
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000daa8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  0800dc58  0800dc58  0000ec58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e330  0800e330  00010060  2**0
                  CONTENTS
  4 .ARM          00000008  0800e330  0800e330  0000f330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e338  0800e338  00010060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e338  0800e338  0000f338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800e340  0800e340  0000f340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800e348  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002abc  20000060  0800e3a8  00010060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002b1c  0800e3a8  00010b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002da23  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056eb  00000000  00000000  0003dab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002428  00000000  00000000  000431a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c40  00000000  00000000  000455c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003069d  00000000  00000000  00047208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b0e4  00000000  00000000  000778a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012aec3  00000000  00000000  000a2989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cd84c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f24  00000000  00000000  001cd890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001d77b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800dc40 	.word	0x0800dc40

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	0800dc40 	.word	0x0800dc40

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <_ZN14DashboardState5resetEv>:
#include "DashboardState.hpp"

void DashboardState::reset() {
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
    lightState = LIGHTS_NONE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
    oldLightState = LIGHTS_NONE;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	709a      	strb	r2, [r3, #2]

    outputPortState = 0;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2200      	movs	r2, #0
 80004f8:	70da      	strb	r2, [r3, #3]
    hornState = 0;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	711a      	strb	r2, [r3, #4]
    fanState = 0;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2200      	movs	r2, #0
 8000504:	715a      	strb	r2, [r3, #5]
    headlightState = 0;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2200      	movs	r2, #0
 800050a:	719a      	strb	r2, [r3, #6]
    pttState = 0;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2200      	movs	r2, #0
 8000510:	71da      	strb	r2, [r3, #7]
    displayState = 0;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2200      	movs	r2, #0
 8000516:	721a      	strb	r2, [r3, #8]

    bmsStatus = 0;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2200      	movs	r2, #0
 800051c:	741a      	strb	r2, [r3, #16]
    mcStatus = 0;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2200      	movs	r2, #0
 8000522:	745a      	strb	r2, [r3, #17]
    arrayStatus = 0;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	749a      	strb	r2, [r3, #18]

    old_bmsStatus = 0;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2200      	movs	r2, #0
 800052e:	74da      	strb	r2, [r3, #19]
    old_mcStatus = 0;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	751a      	strb	r2, [r3, #20]
    old_arrayStatus = 0;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	755a      	strb	r2, [r3, #21]

    uart_rx = 0;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2200      	movs	r2, #0
 8000540:	759a      	strb	r2, [r3, #22]
    old_uart_rx = 0;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	75da      	strb	r2, [r3, #23]
    updateRequested = 0;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2200      	movs	r2, #0
 800054c:	761a      	strb	r2, [r3, #24]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <_ZN14DashboardState14updateFromUARTEv>:

// gets called only when something changes in the dashboard state
void DashboardState::updateFromUART() {
 800055a:	b580      	push	{r7, lr}
 800055c:	b082      	sub	sp, #8
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]

    // uart data for lights (blinkers)
    if (uart_rx & BUTTON_HAZARD) {
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	7d9b      	ldrb	r3, [r3, #22]
 8000566:	f003 0304 	and.w	r3, r3, #4
 800056a:	2b00      	cmp	r3, #0
 800056c:	d003      	beq.n	8000576 <_ZN14DashboardState14updateFromUARTEv+0x1c>
        lightState = LIGHTS_HAZARD;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2203      	movs	r2, #3
 8000572:	701a      	strb	r2, [r3, #0]
 8000574:	e015      	b.n	80005a2 <_ZN14DashboardState14updateFromUARTEv+0x48>
    }
    else if (uart_rx & BUTTON_LEFT_TURN) {
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	7d9b      	ldrb	r3, [r3, #22]
 800057a:	f003 0308 	and.w	r3, r3, #8
 800057e:	2b00      	cmp	r3, #0
 8000580:	d003      	beq.n	800058a <_ZN14DashboardState14updateFromUARTEv+0x30>
        lightState = LIGHTS_LEFT;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]
 8000588:	e00b      	b.n	80005a2 <_ZN14DashboardState14updateFromUARTEv+0x48>
    }
    else if (uart_rx & BUTTON_RIGHT_TURN) {
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	7d9b      	ldrb	r3, [r3, #22]
 800058e:	b25b      	sxtb	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	da03      	bge.n	800059c <_ZN14DashboardState14updateFromUARTEv+0x42>
        lightState = LIGHTS_RIGHT;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2202      	movs	r2, #2
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	e002      	b.n	80005a2 <_ZN14DashboardState14updateFromUARTEv+0x48>
    }
    else {
        lightState = LIGHTS_NONE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
    }

    // if the light state has changed, reset the blink time and update the output port state
    if (oldLightState != lightState) {
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	789a      	ldrb	r2, [r3, #2]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d041      	beq.n	8000632 <_ZN14DashboardState14updateFromUARTEv+0xd8>
        lastBlinkTime = HAL_GetTick(); // reset blink time if light state changes
 80005ae:	f003 f8a5 	bl	80036fc <HAL_GetTick>
 80005b2:	4602      	mov	r2, r0
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	60da      	str	r2, [r3, #12]
        oldLightState = lightState;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	781a      	ldrb	r2, [r3, #0]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	709a      	strb	r2, [r3, #2]
        if (lightState == LIGHTS_HAZARD) {
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	d107      	bne.n	80005d8 <_ZN14DashboardState14updateFromUARTEv+0x7e>
            outputPortState |= (OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	78db      	ldrb	r3, [r3, #3]
 80005cc:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	70da      	strb	r2, [r3, #3]
 80005d6:	e02c      	b.n	8000632 <_ZN14DashboardState14updateFromUARTEv+0xd8>
        }
        else if (lightState == LIGHTS_LEFT) {
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d10e      	bne.n	80005fe <_ZN14DashboardState14updateFromUARTEv+0xa4>
            outputPortState |= OUTPUT_FL_LIGHT_CTRL;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	78db      	ldrb	r3, [r3, #3]
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	70da      	strb	r2, [r3, #3]
            outputPortState &= ~OUTPUT_FR_LIGHT_CTRL;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	78db      	ldrb	r3, [r3, #3]
 80005f2:	f023 0310 	bic.w	r3, r3, #16
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	70da      	strb	r2, [r3, #3]
 80005fc:	e019      	b.n	8000632 <_ZN14DashboardState14updateFromUARTEv+0xd8>
        }
        else if (lightState == LIGHTS_RIGHT) {
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b02      	cmp	r3, #2
 8000604:	d10e      	bne.n	8000624 <_ZN14DashboardState14updateFromUARTEv+0xca>
            outputPortState |= OUTPUT_FR_LIGHT_CTRL;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	78db      	ldrb	r3, [r3, #3]
 800060a:	f043 0310 	orr.w	r3, r3, #16
 800060e:	b2da      	uxtb	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	70da      	strb	r2, [r3, #3]
            outputPortState &= ~OUTPUT_FL_LIGHT_CTRL;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	78db      	ldrb	r3, [r3, #3]
 8000618:	f023 0320 	bic.w	r3, r3, #32
 800061c:	b2da      	uxtb	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	70da      	strb	r2, [r3, #3]
 8000622:	e006      	b.n	8000632 <_ZN14DashboardState14updateFromUARTEv+0xd8>
        }
        else {
            outputPortState &= ~(OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	78db      	ldrb	r3, [r3, #3]
 8000628:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800062c:	b2da      	uxtb	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	70da      	strb	r2, [r3, #3]
        }
    }

    // if headlight should be on  
    if (uart_rx & BUTTON_HEADLIGHTS) {
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	7d9b      	ldrb	r3, [r3, #22]
 8000636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800063a:	2b00      	cmp	r3, #0
 800063c:	d00a      	beq.n	8000654 <_ZN14DashboardState14updateFromUARTEv+0xfa>
        outputPortState |= (OUTPUT_R_HEAD_CTRL | OUTPUT_L_HEAD_CTRL);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	78db      	ldrb	r3, [r3, #3]
 8000642:	f043 030c 	orr.w	r3, r3, #12
 8000646:	b2da      	uxtb	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	70da      	strb	r2, [r3, #3]
        headlightState = 1;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2201      	movs	r2, #1
 8000650:	719a      	strb	r2, [r3, #6]
 8000652:	e009      	b.n	8000668 <_ZN14DashboardState14updateFromUARTEv+0x10e>
    }
    else  {
        outputPortState &= ~(OUTPUT_R_HEAD_CTRL | OUTPUT_L_HEAD_CTRL);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	78db      	ldrb	r3, [r3, #3]
 8000658:	f023 030c 	bic.w	r3, r3, #12
 800065c:	b2da      	uxtb	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	70da      	strb	r2, [r3, #3]
        headlightState = 0;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	719a      	strb	r2, [r3, #6]
    }

    // if horn should be on
    if (uart_rx & BUTTON_HORN) {
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	7d9b      	ldrb	r3, [r3, #22]
 800066c:	f003 0320 	and.w	r3, r3, #32
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00a      	beq.n	800068a <_ZN14DashboardState14updateFromUARTEv+0x130>
        outputPortState |= OUTPUT_HORN_CTRL;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	78db      	ldrb	r3, [r3, #3]
 8000678:	f043 0302 	orr.w	r3, r3, #2
 800067c:	b2da      	uxtb	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	70da      	strb	r2, [r3, #3]
        hornState = 1;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2201      	movs	r2, #1
 8000686:	711a      	strb	r2, [r3, #4]
 8000688:	e009      	b.n	800069e <_ZN14DashboardState14updateFromUARTEv+0x144>
    }
    else {
        outputPortState &= ~OUTPUT_HORN_CTRL;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	78db      	ldrb	r3, [r3, #3]
 800068e:	f023 0302 	bic.w	r3, r3, #2
 8000692:	b2da      	uxtb	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	70da      	strb	r2, [r3, #3]
        hornState = 0;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2200      	movs	r2, #0
 800069c:	711a      	strb	r2, [r3, #4]
    }

    // if fan should be on
    if (uart_rx & BUTTON_FAN) {
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	7d9b      	ldrb	r3, [r3, #22]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d00a      	beq.n	80006c0 <_ZN14DashboardState14updateFromUARTEv+0x166>
        outputPortState |= OUTPUT_FAN_CTRL;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	78db      	ldrb	r3, [r3, #3]
 80006ae:	f043 0301 	orr.w	r3, r3, #1
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	70da      	strb	r2, [r3, #3]
        fanState = 1;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2201      	movs	r2, #1
 80006bc:	715a      	strb	r2, [r3, #5]
 80006be:	e009      	b.n	80006d4 <_ZN14DashboardState14updateFromUARTEv+0x17a>
    }
    else {
        outputPortState &= ~OUTPUT_FAN_CTRL;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	78db      	ldrb	r3, [r3, #3]
 80006c4:	f023 0301 	bic.w	r3, r3, #1
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	70da      	strb	r2, [r3, #3]
        fanState = 0;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	715a      	strb	r2, [r3, #5]
    }

    // if PTT should be on
    if (uart_rx & BUTTON_PTT) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	7d9b      	ldrb	r3, [r3, #22]
 80006d8:	f003 0310 	and.w	r3, r3, #16
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d003      	beq.n	80006e8 <_ZN14DashboardState14updateFromUARTEv+0x18e>
        pttState = 1;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2201      	movs	r2, #1
 80006e4:	71da      	strb	r2, [r3, #7]
 80006e6:	e002      	b.n	80006ee <_ZN14DashboardState14updateFromUARTEv+0x194>
    }
    else {
        pttState = 0;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	71da      	strb	r2, [r3, #7]
    }

    // TODO: do something with displayState cause this isn't setup to go anywhere
    if (uart_rx & BUTTON_DISPLAY) {
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	7d9b      	ldrb	r3, [r3, #22]
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d003      	beq.n	8000702 <_ZN14DashboardState14updateFromUARTEv+0x1a8>
        displayState = 1;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2201      	movs	r2, #1
 80006fe:	721a      	strb	r2, [r3, #8]
    }
    else {
        displayState = 0;
    }

}
 8000700:	e002      	b.n	8000708 <_ZN14DashboardState14updateFromUARTEv+0x1ae>
        displayState = 0;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	721a      	strb	r2, [r3, #8]
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>:

HAL_StatusTypeDef DashboardState::writeToPort(TCAL9538RSVR &U7) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	uint8_t inverted = ~outputPortState;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	78db      	ldrb	r3, [r3, #3]
 800071e:	43db      	mvns	r3, r3
 8000720:	b2db      	uxtb	r3, r3
 8000722:	73fb      	strb	r3, [r7, #15]
    return TCAL9538RSVR_SetOutput(&U7, &inverted); // write to output port
 8000724:	f107 030f 	add.w	r3, r7, #15
 8000728:	4619      	mov	r1, r3
 800072a:	6838      	ldr	r0, [r7, #0]
 800072c:	f002 ff47 	bl	80035be <TCAL9538RSVR_SetOutput>
 8000730:	4603      	mov	r3, r0
}
 8000732:	4618      	mov	r0, r3
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <_ZN14DashboardState11blinkLightsEv>:

void DashboardState::blinkLights() {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    switch (lightState) {
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b03      	cmp	r3, #3
 800074a:	d82b      	bhi.n	80007a4 <_ZN14DashboardState11blinkLightsEv+0x68>
 800074c:	a201      	add	r2, pc, #4	@ (adr r2, 8000754 <_ZN14DashboardState11blinkLightsEv+0x18>)
 800074e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000752:	bf00      	nop
 8000754:	08000795 	.word	0x08000795
 8000758:	08000775 	.word	0x08000775
 800075c:	08000785 	.word	0x08000785
 8000760:	08000765 	.word	0x08000765
        case LIGHTS_HAZARD:
            outputPortState ^= (OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	78db      	ldrb	r3, [r3, #3]
 8000768:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 800076c:	b2da      	uxtb	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	70da      	strb	r2, [r3, #3]
            break;
 8000772:	e017      	b.n	80007a4 <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_LEFT:
            outputPortState ^= OUTPUT_FL_LIGHT_CTRL;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	78db      	ldrb	r3, [r3, #3]
 8000778:	f083 0320 	eor.w	r3, r3, #32
 800077c:	b2da      	uxtb	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	70da      	strb	r2, [r3, #3]
            break;
 8000782:	e00f      	b.n	80007a4 <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_RIGHT:
            outputPortState ^= OUTPUT_FR_LIGHT_CTRL;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	78db      	ldrb	r3, [r3, #3]
 8000788:	f083 0310 	eor.w	r3, r3, #16
 800078c:	b2da      	uxtb	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	70da      	strb	r2, [r3, #3]
            break;
 8000792:	e007      	b.n	80007a4 <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_NONE:
            outputPortState &= ~(OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	78db      	ldrb	r3, [r3, #3]
 8000798:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800079c:	b2da      	uxtb	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	70da      	strb	r2, [r3, #3]
            break;
 80007a2:	bf00      	nop
    }
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <_ZN14DashboardState18getSuppBattVoltageEv>:

float DashboardState::getSuppBattVoltage() {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
    return 0;
 80007b8:	f04f 0300 	mov.w	r3, #0
 80007bc:	ee07 3a90 	vmov	s15, r3
}
 80007c0:	eeb0 0a67 	vmov.f32	s0, s15
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <_ZN14DashboardState13getMotorPowerEv>:

float DashboardState::getMotorPower() {
 80007ce:	b480      	push	{r7}
 80007d0:	b083      	sub	sp, #12
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
    return 0;
 80007d6:	f04f 0300 	mov.w	r3, #0
 80007da:	ee07 3a90 	vmov	s15, r3
}
 80007de:	eeb0 0a67 	vmov.f32	s0, s15
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZN14DashboardState14getCarVelocityEv>:

float DashboardState::getCarVelocity() {
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
    return 0;
 80007f4:	f04f 0300 	mov.w	r3, #0
 80007f8:	ee07 3a90 	vmov	s15, r3
 80007fc:	eeb0 0a67 	vmov.f32	s0, s15
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <CPP_UserSetup>:

DashboardState dashboardState; // Dashboard state object

ILI9341 screen(320, 240);

void CPP_UserSetup(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af02      	add	r7, sp, #8
    // Make sure that timer priorities are configured correctly
    HAL_Delay(10);
 8000812:	200a      	movs	r0, #10
 8000814:	f002 ff7e 	bl	8003714 <HAL_Delay>

	dashboardState.reset(); // reset dashboard state
 8000818:	4831      	ldr	r0, [pc, #196]	@ (80008e0 <CPP_UserSetup+0xd4>)
 800081a:	f7ff fe61 	bl	80004e0 <_ZN14DashboardState5resetEv>

    dma_flag = 0;
 800081e:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <CPP_UserSetup+0xd8>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
    cc_enable = 0;
 8000824:	4b30      	ldr	r3, [pc, #192]	@ (80008e8 <CPP_UserSetup+0xdc>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]

	// -------------------------
	// CAN INIT
	// -------------------------
	Init_CAN_Filter1(hcan1); // set up CAN filter for CAN1
 800082a:	4830      	ldr	r0, [pc, #192]	@ (80008ec <CPP_UserSetup+0xe0>)
 800082c:	f000 fce0 	bl	80011f0 <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef>
	HAL_CAN_Start(&hcan1); // start CAN1
 8000830:	482e      	ldr	r0, [pc, #184]	@ (80008ec <CPP_UserSetup+0xe0>)
 8000832:	f004 fd43 	bl	80052bc <HAL_CAN_Start>
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000836:	2102      	movs	r1, #2
 8000838:	482c      	ldr	r0, [pc, #176]	@ (80008ec <CPP_UserSetup+0xe0>)
 800083a:	f004 ffaa 	bl	8005792 <HAL_CAN_ActivateNotification>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	bf14      	ite	ne
 8000844:	2301      	movne	r3, #1
 8000846:	2300      	moveq	r3, #0
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <CPP_UserSetup+0x46>
	{
		Error_Handler();
 800084e:	f001 fabd 	bl	8001dcc <Error_Handler>

	// -------------------------
	// GPIO EXPANDERS INIT
	// -------------------------

    if (TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0xFF, 0x00) != HAL_OK) { Error_Handler(); } // inputs
 8000852:	2300      	movs	r3, #0
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	23ff      	movs	r3, #255	@ 0xff
 8000858:	2202      	movs	r2, #2
 800085a:	4925      	ldr	r1, [pc, #148]	@ (80008f0 <CPP_UserSetup+0xe4>)
 800085c:	4825      	ldr	r0, [pc, #148]	@ (80008f4 <CPP_UserSetup+0xe8>)
 800085e:	f002 fdf1 	bl	8003444 <TCAL9538RSVR_INIT>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	bf14      	ite	ne
 8000868:	2301      	movne	r3, #1
 800086a:	2300      	moveq	r3, #0
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <CPP_UserSetup+0x6a>
 8000872:	f001 faab 	bl	8001dcc <Error_Handler>
    //if (TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b00111111, 0b11000000) != HAL_OK) { Error_Handler(); }
    if (TCAL9538RSVR_INIT(&U7, &hi2c4, 0x00, 0b00000000, 0b00000000) != HAL_OK) { Error_Handler(); } // output
 8000876:	2300      	movs	r3, #0
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2300      	movs	r3, #0
 800087c:	2200      	movs	r2, #0
 800087e:	491c      	ldr	r1, [pc, #112]	@ (80008f0 <CPP_UserSetup+0xe4>)
 8000880:	481d      	ldr	r0, [pc, #116]	@ (80008f8 <CPP_UserSetup+0xec>)
 8000882:	f002 fddf 	bl	8003444 <TCAL9538RSVR_INIT>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	bf14      	ite	ne
 800088c:	2301      	movne	r3, #1
 800088e:	2300      	moveq	r3, #0
 8000890:	b2db      	uxtb	r3, r3
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <CPP_UserSetup+0x8e>
 8000896:	f001 fa99 	bl	8001dcc <Error_Handler>

    // set outputs to low to start
	if (dashboardState.writeToPort(U7) != HAL_OK) { Error_Handler(); }
 800089a:	4917      	ldr	r1, [pc, #92]	@ (80008f8 <CPP_UserSetup+0xec>)
 800089c:	4810      	ldr	r0, [pc, #64]	@ (80008e0 <CPP_UserSetup+0xd4>)
 800089e:	f7ff ff37 	bl	8000710 <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	bf14      	ite	ne
 80008a8:	2301      	movne	r3, #1
 80008aa:	2300      	moveq	r3, #0
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <CPP_UserSetup+0xaa>
 80008b2:	f001 fa8b 	bl	8001dcc <Error_Handler>

	// Set up UART4 for receiving data from the steering wheel
	HAL_UART_Receive_IT(&huart4, &dashboardState.uart_rx, 1); // enable uart interrupt
 80008b6:	2201      	movs	r2, #1
 80008b8:	4910      	ldr	r1, [pc, #64]	@ (80008fc <CPP_UserSetup+0xf0>)
 80008ba:	4811      	ldr	r0, [pc, #68]	@ (8000900 <CPP_UserSetup+0xf4>)
 80008bc:	f008 fe4a 	bl	8009554 <HAL_UART_Receive_IT>

	// -------------------------
	// SCREEN INIT 
	// -------------------------
	
    screen.Init();
 80008c0:	4810      	ldr	r0, [pc, #64]	@ (8000904 <CPP_UserSetup+0xf8>)
 80008c2:	f001 ff19 	bl	80026f8 <_ZN7ILI93414InitEv>
    screen.SetRotation(3);
 80008c6:	2103      	movs	r1, #3
 80008c8:	480e      	ldr	r0, [pc, #56]	@ (8000904 <CPP_UserSetup+0xf8>)
 80008ca:	f002 fa9f 	bl	8002e0c <_ZN7ILI934111SetRotationEh>
    screen.ClearScreen(RGB565_WHITE);
 80008ce:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80008d2:	480c      	ldr	r0, [pc, #48]	@ (8000904 <CPP_UserSetup+0xf8>)
 80008d4:	f002 f9cf 	bl	8002c76 <_ZN7ILI934111ClearScreenEt>
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000ac 	.word	0x200000ac
 80008e4:	200000a8 	.word	0x200000a8
 80008e8:	200000a9 	.word	0x200000a9
 80008ec:	200001f4 	.word	0x200001f4
 80008f0:	20000244 	.word	0x20000244
 80008f4:	2000007c 	.word	0x2000007c
 80008f8:	2000008c 	.word	0x2000008c
 80008fc:	200000c2 	.word	0x200000c2
 8000900:	20000390 	.word	0x20000390
 8000904:	200000d0 	.word	0x200000d0

08000908 <_Z11StartTask01Pv>:


void StartTask01(void *argument)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	@ 0x30
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]
	uint32_t TxMailbox = { 0 };
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]

	TxHeader.IDE = CAN_ID_EXT;
 800091c:	2304      	movs	r3, #4
 800091e:	61fb      	str	r3, [r7, #28]
	TxHeader.ExtId = CAN_ID_MITSUBA_MOTOR_REQUEST;
 8000920:	4b18      	ldr	r3, [pc, #96]	@ (8000984 <_Z11StartTask01Pv+0x7c>)
 8000922:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 1;
 8000928:	2301      	movs	r3, #1
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
	TxData[0] = 1; // bit 0 = request for frame 0
 800092c:	2301      	movs	r3, #1
 800092e:	733b      	strb	r3, [r7, #12]

  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000930:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000934:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000938:	f005 fe82 	bl	8006640 <HAL_GPIO_TogglePin>
	// also send can message to request frame 0 from mitsuba motor

	while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 800093c:	bf00      	nop
 800093e:	4812      	ldr	r0, [pc, #72]	@ (8000988 <_Z11StartTask01Pv+0x80>)
 8000940:	f004 fdd0 	bl	80054e4 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	bf0c      	ite	eq
 800094a:	2301      	moveq	r3, #1
 800094c:	2300      	movne	r3, #0
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2b00      	cmp	r3, #0
 8000952:	d1f4      	bne.n	800093e <_Z11StartTask01Pv+0x36>
	HAL_StatusTypeDef status;
	status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	f107 020c 	add.w	r2, r7, #12
 800095c:	f107 0114 	add.w	r1, r7, #20
 8000960:	4809      	ldr	r0, [pc, #36]	@ (8000988 <_Z11StartTask01Pv+0x80>)
 8000962:	f004 fcef 	bl	8005344 <HAL_CAN_AddTxMessage>
 8000966:	4603      	mov	r3, r0
 8000968:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (status == HAL_ERROR)
 800096c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000970:	2b01      	cmp	r3, #1
 8000972:	d101      	bne.n	8000978 <_Z11StartTask01Pv+0x70>
	{
		Error_Handler();
 8000974:	f001 fa2a 	bl	8001dcc <Error_Handler>
	}

    osDelay(500);
 8000978:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800097c:	f00a fa1c 	bl	800adb8 <osDelay>
  }
 8000980:	e7d6      	b.n	8000930 <_Z11StartTask01Pv+0x28>
 8000982:	bf00      	nop
 8000984:	08f89540 	.word	0x08f89540
 8000988:	200001f4 	.word	0x200001f4

0800098c <_Z11StartTask02Pv>:
  /* USER CODE END 5 */
}

void StartTask02(void *argument)
{
 800098c:	b5b0      	push	{r4, r5, r7, lr}
 800098e:	b092      	sub	sp, #72	@ 0x48
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

	uint16_t adc_var_avg = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	int HAL_CAN_BUSY = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	643b      	str	r3, [r7, #64]	@ 0x40
	uint64_t messages_sent = 0;
 800099e:	f04f 0200 	mov.w	r2, #0
 80009a2:	f04f 0300 	mov.w	r3, #0
 80009a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	static uint8_t update_cc = 0;

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = { 0 };
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x0; // 11 bit Identifier
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.DLC = 8; // 8 bytes being transmitted
 80009c2:	2308      	movs	r3, #8
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxData[0] = 1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	743b      	strb	r3, [r7, #16]
	uint8_t adc_data[2];



  	  // Transmit over CAN
  	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	f107 0210 	add.w	r2, r7, #16
 80009d2:	f107 0118 	add.w	r1, r7, #24
 80009d6:	4848      	ldr	r0, [pc, #288]	@ (8000af8 <_Z11StartTask02Pv+0x16c>)
 80009d8:	f004 fcb4 	bl	8005344 <HAL_CAN_AddTxMessage>


  for (;;)
  {

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 80009dc:	220a      	movs	r2, #10
 80009de:	4947      	ldr	r1, [pc, #284]	@ (8000afc <_Z11StartTask02Pv+0x170>)
 80009e0:	4847      	ldr	r0, [pc, #284]	@ (8000b00 <_Z11StartTask02Pv+0x174>)
 80009e2:	f003 fa45 	bl	8003e70 <HAL_ADC_Start_DMA>
	// Start ADC with DMA
	while (!(dma_flag));
 80009e6:	bf00      	nop
 80009e8:	4b46      	ldr	r3, [pc, #280]	@ (8000b04 <_Z11StartTask02Pv+0x178>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	bf0c      	ite	eq
 80009f2:	2301      	moveq	r3, #1
 80009f4:	2300      	movne	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d1f5      	bne.n	80009e8 <_Z11StartTask02Pv+0x5c>

	// Stop ADC with DMA
	HAL_ADC_Stop_DMA(&hadc1);
 80009fc:	4840      	ldr	r0, [pc, #256]	@ (8000b00 <_Z11StartTask02Pv+0x174>)
 80009fe:	f003 faf3 	bl	8003fe8 <HAL_ADC_Stop_DMA>
	dma_flag = 0;
 8000a02:	4b40      	ldr	r3, [pc, #256]	@ (8000b04 <_Z11StartTask02Pv+0x178>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
	adc_var_avg = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	// Copy ADC buffer and compute average
	for (int i = 0; i < ADC_BUF_LEN; i++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a12:	e00b      	b.n	8000a2c <_Z11StartTask02Pv+0xa0>
	{
		adc_var_avg += adc_buf[i];
 8000a14:	4a39      	ldr	r2, [pc, #228]	@ (8000afc <_Z11StartTask02Pv+0x170>)
 8000a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a18:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a20:	4413      	add	r3, r2
 8000a22:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	for (int i = 0; i < ADC_BUF_LEN; i++)
 8000a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a28:	3301      	adds	r3, #1
 8000a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a2e:	2b09      	cmp	r3, #9
 8000a30:	ddf0      	ble.n	8000a14 <_Z11StartTask02Pv+0x88>
	}
	adc_var_avg /= ADC_BUF_LEN;
 8000a32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a36:	4a34      	ldr	r2, [pc, #208]	@ (8000b08 <_Z11StartTask02Pv+0x17c>)
 8000a38:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46


	adc_data[0] = adc_var_avg & 0xFF;
 8000a42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	723b      	strb	r3, [r7, #8]
	adc_data[1] = (adc_var_avg >> 8) & 0x0F;
 8000a4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a4e:	0a1b      	lsrs	r3, r3, #8
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	f003 030f 	and.w	r3, r3, #15
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	727b      	strb	r3, [r7, #9]

	if (cc_enable)
 8000a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8000b0c <_Z11StartTask02Pv+0x180>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d00b      	beq.n	8000a7c <_Z11StartTask02Pv+0xf0>
	{
		if (update_cc)
 8000a64:	4b2a      	ldr	r3, [pc, #168]	@ (8000b10 <_Z11StartTask02Pv+0x184>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d00e      	beq.n	8000a8a <_Z11StartTask02Pv+0xfe>
		{
			TxData[5] = adc_data[0];
 8000a6c:	7a3b      	ldrb	r3, [r7, #8]
 8000a6e:	757b      	strb	r3, [r7, #21]
			TxData[6] = adc_data[1];
 8000a70:	7a7b      	ldrb	r3, [r7, #9]
 8000a72:	75bb      	strb	r3, [r7, #22]
			update_cc = 0;
 8000a74:	4b26      	ldr	r3, [pc, #152]	@ (8000b10 <_Z11StartTask02Pv+0x184>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
 8000a7a:	e006      	b.n	8000a8a <_Z11StartTask02Pv+0xfe>
		}
	}
	else
	{
		TxData[5] = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	757b      	strb	r3, [r7, #21]
		TxData[6] = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	75bb      	strb	r3, [r7, #22]
		update_cc = 1;
 8000a84:	4b22      	ldr	r3, [pc, #136]	@ (8000b10 <_Z11StartTask02Pv+0x184>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
	}


	TxData[0] = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	743b      	strb	r3, [r7, #16]
	TxData[1] = adc_data[0];
 8000a8e:	7a3b      	ldrb	r3, [r7, #8]
 8000a90:	747b      	strb	r3, [r7, #17]
	TxData[2] = adc_data[1];
 8000a92:	7a7b      	ldrb	r3, [r7, #9]
 8000a94:	74bb      	strb	r3, [r7, #18]
	//Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
    // Wait until the ADC DMA completes
	  // Send CAN messages
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8000a96:	bf00      	nop
 8000a98:	4817      	ldr	r0, [pc, #92]	@ (8000af8 <_Z11StartTask02Pv+0x16c>)
 8000a9a:	f004 fd23 	bl	80054e4 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	bf0c      	ite	eq
 8000aa4:	2301      	moveq	r3, #1
 8000aa6:	2300      	movne	r3, #0
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1f4      	bne.n	8000a98 <_Z11StartTask02Pv+0x10c>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	f107 0210 	add.w	r2, r7, #16
 8000ab6:	f107 0118 	add.w	r1, r7, #24
 8000aba:	480f      	ldr	r0, [pc, #60]	@ (8000af8 <_Z11StartTask02Pv+0x16c>)
 8000abc:	f004 fc42 	bl	8005344 <HAL_CAN_AddTxMessage>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	  messages_sent++;
 8000ac6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000aca:	1c54      	adds	r4, r2, #1
 8000acc:	f143 0500 	adc.w	r5, r3, #0
 8000ad0:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
	  if (status == HAL_ERROR)
 8000ad4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d102      	bne.n	8000ae2 <_Z11StartTask02Pv+0x156>
	  {
		  Error_Handler();
 8000adc:	f001 f976 	bl	8001dcc <Error_Handler>
 8000ae0:	e006      	b.n	8000af0 <_Z11StartTask02Pv+0x164>
	  }
	  else if (status == HAL_BUSY)
 8000ae2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d102      	bne.n	8000af0 <_Z11StartTask02Pv+0x164>
	  {
		  HAL_CAN_BUSY++;
 8000aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000aec:	3301      	adds	r3, #1
 8000aee:	643b      	str	r3, [r7, #64]	@ 0x40
	  }
    osDelay(20);
 8000af0:	2014      	movs	r0, #20
 8000af2:	f00a f961 	bl	800adb8 <osDelay>
  }
 8000af6:	e771      	b.n	80009dc <_Z11StartTask02Pv+0x50>
 8000af8:	200001f4 	.word	0x200001f4
 8000afc:	20000094 	.word	0x20000094
 8000b00:	20000144 	.word	0x20000144
 8000b04:	200000a8 	.word	0x200000a8
 8000b08:	cccccccd 	.word	0xcccccccd
 8000b0c:	200000a9 	.word	0x200000a9
 8000b10:	20000140 	.word	0x20000140

08000b14 <_Z11StartTask03Pv>:
  /* USER CODE END StartTask02 */
}

void StartTask03(void *argument)
{
 8000b14:	b5b0      	push	{r4, r5, r7, lr}
 8000b16:	b090      	sub	sp, #64	@ 0x40
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */

	int debounce_count = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int HAL_CAN_BUSY = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint64_t messages_sent = 0;
 8000b24:	f04f 0200 	mov.w	r2, #0
 8000b28:	f04f 0300 	mov.w	r3, #0
 8000b2c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
	uint32_t TxMailbox = { 0 };
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = 0x7FF; // 11 bit Identifier !!Change!!
 8000b40:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b44:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
	TxData[0] = 1;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	733b      	strb	r3, [r7, #12]

	Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	4a31      	ldr	r2, [pc, #196]	@ (8000c1c <_Z11StartTask03Pv+0x108>)
 8000b58:	4931      	ldr	r1, [pc, #196]	@ (8000c20 <_Z11StartTask03Pv+0x10c>)
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 fa10 	bl	8000f80 <_Z19Update_CAN_Message1PhS_S_>

	/* Infinite loop */
	for(;;)
	{
	  // Read TCAL Input and update flags
	  if (GPIO_Interrupt_Triggered)
 8000b60:	4b30      	ldr	r3, [pc, #192]	@ (8000c24 <_Z11StartTask03Pv+0x110>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d026      	beq.n	8000bb6 <_Z11StartTask03Pv+0xa2>
	  {
		  if (debounce_count++ <= 2) {continue;}
 8000b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	bfd4      	ite	le
 8000b72:	2301      	movle	r3, #1
 8000b74:	2300      	movgt	r3, #0
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14d      	bne.n	8000c18 <_Z11StartTask03Pv+0x104>
		  DASHBOARD_CRITICAL(
 8000b7c:	f00c fc5c 	bl	800d438 <vPortEnterCritical>
 8000b80:	4829      	ldr	r0, [pc, #164]	@ (8000c28 <_Z11StartTask03Pv+0x114>)
 8000b82:	f002 fce5 	bl	8003550 <TCAL9538RSVR_HandleInterrupt>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	bf14      	ite	ne
 8000b8c:	2301      	movne	r3, #1
 8000b8e:	2300      	moveq	r3, #0
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <_Z11StartTask03Pv+0x86>
 8000b96:	f001 f919 	bl	8001dcc <Error_Handler>
 8000b9a:	f00c fc7f 	bl	800d49c <vPortExitCritical>
		  	if (TCAL9538RSVR_HandleInterrupt(&U5) != HAL_OK) { Error_Handler(); }
		  	//if (TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK){ Error_Handler(); }
		  );

		  Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8000c1c <_Z11StartTask03Pv+0x108>)
 8000ba4:	491e      	ldr	r1, [pc, #120]	@ (8000c20 <_Z11StartTask03Pv+0x10c>)
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f9ea 	bl	8000f80 <_Z19Update_CAN_Message1PhS_S_>
		  GPIO_Interrupt_Triggered = 0;
 8000bac:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <_Z11StartTask03Pv+0x110>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
		  debounce_count = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  }

	  // Send CAN messages
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8000bb6:	bf00      	nop
 8000bb8:	481c      	ldr	r0, [pc, #112]	@ (8000c2c <_Z11StartTask03Pv+0x118>)
 8000bba:	f004 fc93 	bl	80054e4 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	bf0c      	ite	eq
 8000bc4:	2301      	moveq	r3, #1
 8000bc6:	2300      	movne	r3, #0
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1f4      	bne.n	8000bb8 <_Z11StartTask03Pv+0xa4>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	f107 020c 	add.w	r2, r7, #12
 8000bd6:	f107 0114 	add.w	r1, r7, #20
 8000bda:	4814      	ldr	r0, [pc, #80]	@ (8000c2c <_Z11StartTask03Pv+0x118>)
 8000bdc:	f004 fbb2 	bl	8005344 <HAL_CAN_AddTxMessage>
 8000be0:	4603      	mov	r3, r0
 8000be2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  messages_sent++;
 8000be6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000bea:	1c54      	adds	r4, r2, #1
 8000bec:	f143 0500 	adc.w	r5, r3, #0
 8000bf0:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	  if (status == HAL_ERROR)
 8000bf4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d102      	bne.n	8000c02 <_Z11StartTask03Pv+0xee>
	  {
		  Error_Handler();
 8000bfc:	f001 f8e6 	bl	8001dcc <Error_Handler>
 8000c00:	e006      	b.n	8000c10 <_Z11StartTask03Pv+0xfc>
	  }
	  else if (status == HAL_BUSY)
 8000c02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d102      	bne.n	8000c10 <_Z11StartTask03Pv+0xfc>
	  {
		  HAL_CAN_BUSY++;
 8000c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
	  }
	  osDelay(50);
 8000c10:	2032      	movs	r0, #50	@ 0x32
 8000c12:	f00a f8d1 	bl	800adb8 <osDelay>
 8000c16:	e7a3      	b.n	8000b60 <_Z11StartTask03Pv+0x4c>
		  if (debounce_count++ <= 2) {continue;}
 8000c18:	bf00      	nop
  }
 8000c1a:	e7a1      	b.n	8000b60 <_Z11StartTask03Pv+0x4c>
 8000c1c:	20000089 	.word	0x20000089
 8000c20:	20000081 	.word	0x20000081
 8000c24:	200000aa 	.word	0x200000aa
 8000c28:	2000007c 	.word	0x2000007c
 8000c2c:	200001f4 	.word	0x200001f4

08000c30 <_Z11StartTask04Pv>:
  /* USER CODE END StartTask03 */
}


void StartTask04(void *argument)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */

  dashboardState.lastBlinkTime = HAL_GetTick(); // initialize last blink time
 8000c38:	f002 fd60 	bl	80036fc <HAL_GetTick>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8000cb4 <_Z11StartTask04Pv+0x84>)
 8000c40:	60d3      	str	r3, [r2, #12]

  /* Infinite loop */
  for(;;)
  {

    uint32_t currentTick = HAL_GetTick();
 8000c42:	f002 fd5b 	bl	80036fc <HAL_GetTick>
 8000c46:	60f8      	str	r0, [r7, #12]

    if (currentTick - dashboardState.lastBlinkTime > BLINK_INTERVAL_MS)
 8000c48:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <_Z11StartTask04Pv+0x84>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c54:	d909      	bls.n	8000c6a <_Z11StartTask04Pv+0x3a>
    {
      	dashboardState.lastBlinkTime = currentTick;
 8000c56:	4a17      	ldr	r2, [pc, #92]	@ (8000cb4 <_Z11StartTask04Pv+0x84>)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	60d3      	str	r3, [r2, #12]
		// enter critical section because we do read-modify-write operations in that function
		DASHBOARD_CRITICAL(
 8000c5c:	f00c fbec 	bl	800d438 <vPortEnterCritical>
 8000c60:	4814      	ldr	r0, [pc, #80]	@ (8000cb4 <_Z11StartTask04Pv+0x84>)
 8000c62:	f7ff fd6b 	bl	800073c <_ZN14DashboardState11blinkLightsEv>
 8000c66:	f00c fc19 	bl	800d49c <vPortExitCritical>
			dashboardState.blinkLights()
	  	);
	}

	if (dashboardState.updateRequested) {
 8000c6a:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <_Z11StartTask04Pv+0x84>)
 8000c6c:	7e1b      	ldrb	r3, [r3, #24]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d009      	beq.n	8000c86 <_Z11StartTask04Pv+0x56>
		// enter critical section because we do read-modify-write operations in that function
		DASHBOARD_CRITICAL(
 8000c72:	f00c fbe1 	bl	800d438 <vPortEnterCritical>
 8000c76:	480f      	ldr	r0, [pc, #60]	@ (8000cb4 <_Z11StartTask04Pv+0x84>)
 8000c78:	f7ff fc6f 	bl	800055a <_ZN14DashboardState14updateFromUARTEv>
 8000c7c:	f00c fc0e 	bl	800d49c <vPortExitCritical>
			dashboardState.updateFromUART()
		);
		dashboardState.updateRequested = 0; // reset update requested flag
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <_Z11StartTask04Pv+0x84>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	761a      	strb	r2, [r3, #24]
	}

	DASHBOARD_CRITICAL(
 8000c86:	f00c fbd7 	bl	800d438 <vPortEnterCritical>
 8000c8a:	490b      	ldr	r1, [pc, #44]	@ (8000cb8 <_Z11StartTask04Pv+0x88>)
 8000c8c:	4809      	ldr	r0, [pc, #36]	@ (8000cb4 <_Z11StartTask04Pv+0x84>)
 8000c8e:	f7ff fd3f 	bl	8000710 <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	bf14      	ite	ne
 8000c98:	2301      	movne	r3, #1
 8000c9a:	2300      	moveq	r3, #0
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <_Z11StartTask04Pv+0x76>
 8000ca2:	f001 f893 	bl	8001dcc <Error_Handler>
 8000ca6:	f00c fbf9 	bl	800d49c <vPortExitCritical>
		if (dashboardState.writeToPort(U7) != HAL_OK) { Error_Handler(); } // write to output port
	);

    osDelay(50);
 8000caa:	2032      	movs	r0, #50	@ 0x32
 8000cac:	f00a f884 	bl	800adb8 <osDelay>
  }
 8000cb0:	e7c7      	b.n	8000c42 <_Z11StartTask04Pv+0x12>
 8000cb2:	bf00      	nop
 8000cb4:	200000ac 	.word	0x200000ac
 8000cb8:	2000008c 	.word	0x2000008c

08000cbc <_Z11StartTask05Pv>:
  /* USER CODE END StartTask04 */
}


void StartTask05(void *argument)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08c      	sub	sp, #48	@ 0x30
 8000cc0:	af02      	add	r7, sp, #8
 8000cc2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask05 */
	uint16_t color;
	bool lightStateChanged = false;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	bool bmsStatusChanged = false;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	bool mcStatusChanged = false;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	bool arrayStatusChanged = false;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    uint16_t x_text = 70;
 8000cdc:	2346      	movs	r3, #70	@ 0x46
 8000cde:	843b      	strh	r3, [r7, #32]
    uint16_t y_text = 10;
 8000ce0:	230a      	movs	r3, #10
 8000ce2:	83fb      	strh	r3, [r7, #30]
    const char* str1 = "UF Solar Gators :)\0";
 8000ce4:	4ba2      	ldr	r3, [pc, #648]	@ (8000f70 <_Z11StartTask05Pv+0x2b4>)
 8000ce6:	61bb      	str	r3, [r7, #24]
    screen.SetTextSize(2);
 8000ce8:	2102      	movs	r1, #2
 8000cea:	48a2      	ldr	r0, [pc, #648]	@ (8000f74 <_Z11StartTask05Pv+0x2b8>)
 8000cec:	f002 f8fa 	bl	8002ee4 <_ZN7ILI934111SetTextSizeEh>
    screen.DrawText(x_text, y_text, str1, RGB565_BLACK);
 8000cf0:	8bfa      	ldrh	r2, [r7, #30]
 8000cf2:	8c39      	ldrh	r1, [r7, #32]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	489e      	ldr	r0, [pc, #632]	@ (8000f74 <_Z11StartTask05Pv+0x2b8>)
 8000cfc:	f002 fa1e 	bl	800313c <_ZN7ILI93418DrawTextEttPKct>

    x_text = 55;
 8000d00:	2337      	movs	r3, #55	@ 0x37
 8000d02:	843b      	strh	r3, [r7, #32]
    y_text = 170;
 8000d04:	23aa      	movs	r3, #170	@ 0xaa
 8000d06:	83fb      	strh	r3, [r7, #30]
    const char* str2 = "BMS    MC    Array\0";
 8000d08:	4b9b      	ldr	r3, [pc, #620]	@ (8000f78 <_Z11StartTask05Pv+0x2bc>)
 8000d0a:	617b      	str	r3, [r7, #20]

    screen.SetTextSize(2);
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	4899      	ldr	r0, [pc, #612]	@ (8000f74 <_Z11StartTask05Pv+0x2b8>)
 8000d10:	f002 f8e8 	bl	8002ee4 <_ZN7ILI934111SetTextSizeEh>
    screen.DrawText(x_text, y_text, str2, RGB565_BLACK);
 8000d14:	8bfa      	ldrh	r2, [r7, #30]
 8000d16:	8c39      	ldrh	r1, [r7, #32]
 8000d18:	2300      	movs	r3, #0
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	4895      	ldr	r0, [pc, #596]	@ (8000f74 <_Z11StartTask05Pv+0x2b8>)
 8000d20:	f002 fa0c 	bl	800313c <_ZN7ILI93418DrawTextEttPKct>

    screen.FillCircle(70, 210, 10, RGB565_RED);
 8000d24:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	230a      	movs	r3, #10
 8000d2c:	22d2      	movs	r2, #210	@ 0xd2
 8000d2e:	2146      	movs	r1, #70	@ 0x46
 8000d30:	4890      	ldr	r0, [pc, #576]	@ (8000f74 <_Z11StartTask05Pv+0x2b8>)
 8000d32:	f002 fae1 	bl	80032f8 <_ZN7ILI934110FillCircleEtttt>
    screen.FillCircle(150, 210, 10, RGB565_RED);
 8000d36:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	230a      	movs	r3, #10
 8000d3e:	22d2      	movs	r2, #210	@ 0xd2
 8000d40:	2196      	movs	r1, #150	@ 0x96
 8000d42:	488c      	ldr	r0, [pc, #560]	@ (8000f74 <_Z11StartTask05Pv+0x2b8>)
 8000d44:	f002 fad8 	bl	80032f8 <_ZN7ILI934110FillCircleEtttt>
    screen.FillCircle(235, 210, 10, RGB565_RED);
 8000d48:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	230a      	movs	r3, #10
 8000d50:	22d2      	movs	r2, #210	@ 0xd2
 8000d52:	21eb      	movs	r1, #235	@ 0xeb
 8000d54:	4887      	ldr	r0, [pc, #540]	@ (8000f74 <_Z11StartTask05Pv+0x2b8>)
 8000d56:	f002 facf 	bl	80032f8 <_ZN7ILI934110FillCircleEtttt>

  /* Infinite loop */
  for(;;)
  {
	DASHBOARD_CRITICAL( // critical region for all of these read-read operations that are not atomic
 8000d5a:	f00c fb6d 	bl	800d438 <vPortEnterCritical>
 8000d5e:	4b87      	ldr	r3, [pc, #540]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000d60:	785a      	ldrb	r2, [r3, #1]
 8000d62:	4b86      	ldr	r3, [pc, #536]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	bf14      	ite	ne
 8000d6a:	2301      	movne	r3, #1
 8000d6c:	2300      	moveq	r3, #0
 8000d6e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8000d72:	4b82      	ldr	r3, [pc, #520]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000d74:	7cda      	ldrb	r2, [r3, #19]
 8000d76:	4b81      	ldr	r3, [pc, #516]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000d78:	7c1b      	ldrb	r3, [r3, #16]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	bf14      	ite	ne
 8000d7e:	2301      	movne	r3, #1
 8000d80:	2300      	moveq	r3, #0
 8000d82:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000d86:	4b7d      	ldr	r3, [pc, #500]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000d88:	7d1a      	ldrb	r2, [r3, #20]
 8000d8a:	4b7c      	ldr	r3, [pc, #496]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000d8c:	7c5b      	ldrb	r3, [r3, #17]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	bf14      	ite	ne
 8000d92:	2301      	movne	r3, #1
 8000d94:	2300      	moveq	r3, #0
 8000d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000d9a:	4b78      	ldr	r3, [pc, #480]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000d9c:	7d5a      	ldrb	r2, [r3, #21]
 8000d9e:	4b77      	ldr	r3, [pc, #476]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000da0:	7c9b      	ldrb	r3, [r3, #18]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	bf14      	ite	ne
 8000da6:	2301      	movne	r3, #1
 8000da8:	2300      	moveq	r3, #0
 8000daa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8000dae:	4b73      	ldr	r3, [pc, #460]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000db0:	781a      	ldrb	r2, [r3, #0]
 8000db2:	4b72      	ldr	r3, [pc, #456]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000db4:	705a      	strb	r2, [r3, #1]
 8000db6:	4b71      	ldr	r3, [pc, #452]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000db8:	7c1a      	ldrb	r2, [r3, #16]
 8000dba:	4b70      	ldr	r3, [pc, #448]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000dbc:	74da      	strb	r2, [r3, #19]
 8000dbe:	4b6f      	ldr	r3, [pc, #444]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000dc0:	7c5a      	ldrb	r2, [r3, #17]
 8000dc2:	4b6e      	ldr	r3, [pc, #440]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000dc4:	751a      	strb	r2, [r3, #20]
 8000dc6:	4b6d      	ldr	r3, [pc, #436]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000dc8:	7c9a      	ldrb	r2, [r3, #18]
 8000dca:	4b6c      	ldr	r3, [pc, #432]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000dcc:	755a      	strb	r2, [r3, #21]
 8000dce:	f00c fb65 	bl	800d49c <vPortExitCritical>
		dashboardState.old_bmsStatus = dashboardState.bmsStatus;
		dashboardState.old_mcStatus = dashboardState.mcStatus;
		dashboardState.old_arrayStatus = dashboardState.arrayStatus;
	); // end critical section

	if(lightStateChanged){
 8000dd2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d06e      	beq.n	8000eb8 <_Z11StartTask05Pv+0x1fc>
		HAL_Delay(1);
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f002 fc9a 	bl	8003714 <HAL_Delay>
		if(dashboardState.lightState == LIGHTS_LEFT){
 8000de0:	4b66      	ldr	r3, [pc, #408]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d116      	bne.n	8000e16 <_Z11StartTask05Pv+0x15a>
			color = RGB565_GREEN;
 8000de8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000dec:	84fb      	strh	r3, [r7, #38]	@ 0x26
			screen.FillCircle(20, 20, 10, color);
 8000dee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	230a      	movs	r3, #10
 8000df4:	2214      	movs	r2, #20
 8000df6:	2114      	movs	r1, #20
 8000df8:	485e      	ldr	r0, [pc, #376]	@ (8000f74 <_Z11StartTask05Pv+0x2b8>)
 8000dfa:	f002 fa7d 	bl	80032f8 <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_WHITE;
 8000dfe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e02:	84fb      	strh	r3, [r7, #38]	@ 0x26
			screen.FillCircle(300, 20, 10, color);
 8000e04:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	230a      	movs	r3, #10
 8000e0a:	2214      	movs	r2, #20
 8000e0c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000e10:	4858      	ldr	r0, [pc, #352]	@ (8000f74 <_Z11StartTask05Pv+0x2b8>)
 8000e12:	f002 fa71 	bl	80032f8 <_ZN7ILI934110FillCircleEtttt>
		}
		if(dashboardState.lightState == LIGHTS_RIGHT){
 8000e16:	4b59      	ldr	r3, [pc, #356]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d116      	bne.n	8000e4c <_Z11StartTask05Pv+0x190>
			color = RGB565_WHITE;
 8000e1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e22:	84fb      	strh	r3, [r7, #38]	@ 0x26
			screen.FillCircle(20, 20, 10, color);
 8000e24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	230a      	movs	r3, #10
 8000e2a:	2214      	movs	r2, #20
 8000e2c:	2114      	movs	r1, #20
 8000e2e:	4851      	ldr	r0, [pc, #324]	@ (8000f74 <_Z11StartTask05Pv+0x2b8>)
 8000e30:	f002 fa62 	bl	80032f8 <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_GREEN;
 8000e34:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e38:	84fb      	strh	r3, [r7, #38]	@ 0x26
			screen.FillCircle(300, 20, 10, color);
 8000e3a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	230a      	movs	r3, #10
 8000e40:	2214      	movs	r2, #20
 8000e42:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000e46:	484b      	ldr	r0, [pc, #300]	@ (8000f74 <_Z11StartTask05Pv+0x2b8>)
 8000e48:	f002 fa56 	bl	80032f8 <_ZN7ILI934110FillCircleEtttt>
		}
		if(dashboardState.lightState == LIGHTS_HAZARD){
 8000e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	d116      	bne.n	8000e82 <_Z11StartTask05Pv+0x1c6>
			color = RGB565_GREEN;
 8000e54:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e58:	84fb      	strh	r3, [r7, #38]	@ 0x26
			screen.FillCircle(20, 20, 10, color);
 8000e5a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	230a      	movs	r3, #10
 8000e60:	2214      	movs	r2, #20
 8000e62:	2114      	movs	r1, #20
 8000e64:	4843      	ldr	r0, [pc, #268]	@ (8000f74 <_Z11StartTask05Pv+0x2b8>)
 8000e66:	f002 fa47 	bl	80032f8 <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_GREEN;
 8000e6a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e6e:	84fb      	strh	r3, [r7, #38]	@ 0x26
			screen.FillCircle(300, 20, 10, color);
 8000e70:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	230a      	movs	r3, #10
 8000e76:	2214      	movs	r2, #20
 8000e78:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000e7c:	483d      	ldr	r0, [pc, #244]	@ (8000f74 <_Z11StartTask05Pv+0x2b8>)
 8000e7e:	f002 fa3b 	bl	80032f8 <_ZN7ILI934110FillCircleEtttt>
		}
		if(dashboardState.lightState == LIGHTS_NONE){
 8000e82:	4b3e      	ldr	r3, [pc, #248]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d116      	bne.n	8000eb8 <_Z11StartTask05Pv+0x1fc>

			color = RGB565_WHITE;
 8000e8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
			screen.FillCircle(20, 20, 10, color);
 8000e90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	230a      	movs	r3, #10
 8000e96:	2214      	movs	r2, #20
 8000e98:	2114      	movs	r1, #20
 8000e9a:	4836      	ldr	r0, [pc, #216]	@ (8000f74 <_Z11StartTask05Pv+0x2b8>)
 8000e9c:	f002 fa2c 	bl	80032f8 <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_WHITE;
 8000ea0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ea4:	84fb      	strh	r3, [r7, #38]	@ 0x26
			screen.FillCircle(300, 20, 10, color);
 8000ea6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	230a      	movs	r3, #10
 8000eac:	2214      	movs	r2, #20
 8000eae:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000eb2:	4830      	ldr	r0, [pc, #192]	@ (8000f74 <_Z11StartTask05Pv+0x2b8>)
 8000eb4:	f002 fa20 	bl	80032f8 <_ZN7ILI934110FillCircleEtttt>
		}
	}
	if(bmsStatusChanged){
 8000eb8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d012      	beq.n	8000ee6 <_Z11StartTask05Pv+0x22a>
		if (dashboardState.bmsStatus) color = RGB565_GREEN;
 8000ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000ec2:	7c1b      	ldrb	r3, [r3, #16]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <_Z11StartTask05Pv+0x214>
 8000ec8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000ecc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000ece:	e002      	b.n	8000ed6 <_Z11StartTask05Pv+0x21a>
		else color = RGB565_RED;
 8000ed0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000ed4:	84fb      	strh	r3, [r7, #38]	@ 0x26
		screen.FillCircle(70, 210, 10, color);
 8000ed6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	230a      	movs	r3, #10
 8000edc:	22d2      	movs	r2, #210	@ 0xd2
 8000ede:	2146      	movs	r1, #70	@ 0x46
 8000ee0:	4824      	ldr	r0, [pc, #144]	@ (8000f74 <_Z11StartTask05Pv+0x2b8>)
 8000ee2:	f002 fa09 	bl	80032f8 <_ZN7ILI934110FillCircleEtttt>
	}
	if(mcStatusChanged){
 8000ee6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d012      	beq.n	8000f14 <_Z11StartTask05Pv+0x258>
		if (dashboardState.mcStatus) color = RGB565_GREEN;
 8000eee:	4b23      	ldr	r3, [pc, #140]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000ef0:	7c5b      	ldrb	r3, [r3, #17]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <_Z11StartTask05Pv+0x242>
 8000ef6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000efa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000efc:	e002      	b.n	8000f04 <_Z11StartTask05Pv+0x248>
		else color = RGB565_RED;
 8000efe:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000f02:	84fb      	strh	r3, [r7, #38]	@ 0x26
		screen.FillCircle(150, 210, 10, color);
 8000f04:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	230a      	movs	r3, #10
 8000f0a:	22d2      	movs	r2, #210	@ 0xd2
 8000f0c:	2196      	movs	r1, #150	@ 0x96
 8000f0e:	4819      	ldr	r0, [pc, #100]	@ (8000f74 <_Z11StartTask05Pv+0x2b8>)
 8000f10:	f002 f9f2 	bl	80032f8 <_ZN7ILI934110FillCircleEtttt>
	}
	if(arrayStatusChanged){
 8000f14:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d012      	beq.n	8000f42 <_Z11StartTask05Pv+0x286>
		if (dashboardState.arrayStatus) color = RGB565_GREEN;
 8000f1c:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000f1e:	7c9b      	ldrb	r3, [r3, #18]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <_Z11StartTask05Pv+0x270>
 8000f24:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000f28:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000f2a:	e002      	b.n	8000f32 <_Z11StartTask05Pv+0x276>
		else color = RGB565_RED;
 8000f2c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000f30:	84fb      	strh	r3, [r7, #38]	@ 0x26
		screen.FillCircle(235, 210, 10, color);
 8000f32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	230a      	movs	r3, #10
 8000f38:	22d2      	movs	r2, #210	@ 0xd2
 8000f3a:	21eb      	movs	r1, #235	@ 0xeb
 8000f3c:	480d      	ldr	r0, [pc, #52]	@ (8000f74 <_Z11StartTask05Pv+0x2b8>)
 8000f3e:	f002 f9db 	bl	80032f8 <_ZN7ILI934110FillCircleEtttt>
	// always display velocity, and power
	float supp_batt_voltage;
	float motor_power;
	float car_velocity;

	DASHBOARD_CRITICAL(
 8000f42:	f00c fa79 	bl	800d438 <vPortEnterCritical>
 8000f46:	480d      	ldr	r0, [pc, #52]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000f48:	f7ff fc32 	bl	80007b0 <_ZN14DashboardState18getSuppBattVoltageEv>
 8000f4c:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f50:	480a      	ldr	r0, [pc, #40]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000f52:	f7ff fc3c 	bl	80007ce <_ZN14DashboardState13getMotorPowerEv>
 8000f56:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f5a:	4808      	ldr	r0, [pc, #32]	@ (8000f7c <_Z11StartTask05Pv+0x2c0>)
 8000f5c:	f7ff fc46 	bl	80007ec <_ZN14DashboardState14getCarVelocityEv>
 8000f60:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f64:	f00c fa9a 	bl	800d49c <vPortExitCritical>
		supp_batt_voltage = dashboardState.getSuppBattVoltage();
		motor_power = dashboardState.getMotorPower();
		car_velocity = dashboardState.getCarVelocity();
	);

    osDelay(100);
 8000f68:	2064      	movs	r0, #100	@ 0x64
 8000f6a:	f009 ff25 	bl	800adb8 <osDelay>
  }
 8000f6e:	e6f4      	b.n	8000d5a <_Z11StartTask05Pv+0x9e>
 8000f70:	0800dc58 	.word	0x0800dc58
 8000f74:	200000d0 	.word	0x200000d0
 8000f78:	0800dc6c 	.word	0x0800dc6c
 8000f7c:	200000ac 	.word	0x200000ac

08000f80 <_Z19Update_CAN_Message1PhS_S_>:
  /* USER CODE END StartTask05 */
}


void Update_CAN_Message1(uint8_t flags[8], uint8_t* Input1, uint8_t* Input2)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]

	static uint8_t prev_input1 = 0;
	static uint8_t prev_input2 = 0;


	flags[3] = 0;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	3303      	adds	r3, #3
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
	flags[4] = 0;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3304      	adds	r3, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]


	// Detect rising edges for each flag
	uint8_t risingEdges_flag1 = (~prev_input1) & *Input1;
 8000f9c:	4b90      	ldr	r3, [pc, #576]	@ (80011e0 <_Z19Update_CAN_Message1PhS_S_+0x260>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	b25a      	sxtb	r2, r3
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	4013      	ands	r3, r2
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	75fb      	strb	r3, [r7, #23]
	uint8_t risingEdges_flag2 = (~prev_input2) & *Input2;
 8000fb2:	4b8c      	ldr	r3, [pc, #560]	@ (80011e4 <_Z19Update_CAN_Message1PhS_S_+0x264>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	b25b      	sxtb	r3, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	b25a      	sxtb	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	75bb      	strb	r3, [r7, #22]


	flags[1] ^= CHECK_BIT(risingEdges_flag2, 4) << 0; // Main
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	b25a      	sxtb	r2, r3
 8000fd0:	7dbb      	ldrb	r3, [r7, #22]
 8000fd2:	f003 0310 	and.w	r3, r3, #16
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	bf14      	ite	ne
 8000fda:	2301      	movne	r3, #1
 8000fdc:	2300      	moveq	r3, #0
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	4053      	eors	r3, r2
 8000fe4:	b25a      	sxtb	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 5) << 1; // Break
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b25a      	sxtb	r2, r3
 8000ff6:	7dbb      	ldrb	r3, [r7, #22]
 8000ff8:	111b      	asrs	r3, r3, #4
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	b25b      	sxtb	r3, r3
 8001002:	4053      	eors	r3, r2
 8001004:	b25a      	sxtb	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 0) << 2; // Mode
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3301      	adds	r3, #1
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b25a      	sxtb	r2, r3
 8001016:	7dbb      	ldrb	r3, [r7, #22]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	b25b      	sxtb	r3, r3
 800101c:	f003 0304 	and.w	r3, r3, #4
 8001020:	b25b      	sxtb	r3, r3
 8001022:	4053      	eors	r3, r2
 8001024:	b25a      	sxtb	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	3301      	adds	r3, #1
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 5) << 3; // MC
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3301      	adds	r3, #1
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b25a      	sxtb	r2, r3
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	109b      	asrs	r3, r3, #2
 800103a:	b25b      	sxtb	r3, r3
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	b25b      	sxtb	r3, r3
 8001042:	4053      	eors	r3, r2
 8001044:	b25a      	sxtb	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3301      	adds	r3, #1
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 6) << 4; // Array
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	3301      	adds	r3, #1
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b25a      	sxtb	r2, r3
 8001056:	7dfb      	ldrb	r3, [r7, #23]
 8001058:	109b      	asrs	r3, r3, #2
 800105a:	b25b      	sxtb	r3, r3
 800105c:	f003 0310 	and.w	r3, r3, #16
 8001060:	b25b      	sxtb	r3, r3
 8001062:	4053      	eors	r3, r2
 8001064:	b25a      	sxtb	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	3301      	adds	r3, #1
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 4) << 5; // Extra 1
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	3301      	adds	r3, #1
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b25a      	sxtb	r2, r3
 8001076:	7dfb      	ldrb	r3, [r7, #23]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	b25b      	sxtb	r3, r3
 800107c:	f003 0320 	and.w	r3, r3, #32
 8001080:	b25b      	sxtb	r3, r3
 8001082:	4053      	eors	r3, r2
 8001084:	b25a      	sxtb	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3301      	adds	r3, #1
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]
	if (dashboardState.hornState) // Horn
 800108e:	4b56      	ldr	r3, [pc, #344]	@ (80011e8 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 8001090:	791b      	ldrb	r3, [r3, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d009      	beq.n	80010aa <_Z19Update_CAN_Message1PhS_S_+0x12a>
		flags[1] |= (1 << 6);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	3301      	adds	r3, #1
 800109a:	781a      	ldrb	r2, [r3, #0]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3301      	adds	r3, #1
 80010a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	e008      	b.n	80010bc <_Z19Update_CAN_Message1PhS_S_+0x13c>
	else
		flags[1] &= ~(1 << 6);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3301      	adds	r3, #1
 80010ae:	781a      	ldrb	r2, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	3301      	adds	r3, #1
 80010b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	701a      	strb	r2, [r3, #0]
	if (dashboardState.pttState) // PTT (Push to Talk)
 80010bc:	4b4a      	ldr	r3, [pc, #296]	@ (80011e8 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 80010be:	79db      	ldrb	r3, [r3, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d009      	beq.n	80010d8 <_Z19Update_CAN_Message1PhS_S_+0x158>
		flags[1] |= (1 << 7);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	781a      	ldrb	r2, [r3, #0]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3301      	adds	r3, #1
 80010ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	e008      	b.n	80010ea <_Z19Update_CAN_Message1PhS_S_+0x16a>
	else
		flags[1] &= ~(1 << 7);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	3301      	adds	r3, #1
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3301      	adds	r3, #1
 80010e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	701a      	strb	r2, [r3, #0]
	/*
		NOTE:
			currently sending state of turn signal, turn signal on or off
			if wanting to send actual control of turn signal light, need to send outputPortState variable instead of lightState	
	*/
	if (dashboardState.lightState == LIGHTS_HAZARD) // Blinkers
 80010ea:	4b3f      	ldr	r3, [pc, #252]	@ (80011e8 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d109      	bne.n	8001106 <_Z19Update_CAN_Message1PhS_S_+0x186>
		flags[2] |= (1 << 0);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3302      	adds	r3, #2
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3302      	adds	r3, #2
 80010fc:	f042 0201 	orr.w	r2, r2, #1
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	e008      	b.n	8001118 <_Z19Update_CAN_Message1PhS_S_+0x198>
	else
		flags[2] &= ~(1 << 0);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3302      	adds	r3, #2
 800110a:	781a      	ldrb	r2, [r3, #0]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	3302      	adds	r3, #2
 8001110:	f022 0201 	bic.w	r2, r2, #1
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	701a      	strb	r2, [r3, #0]
	if (dashboardState.lightState == LIGHTS_LEFT) // Left Turn
 8001118:	4b33      	ldr	r3, [pc, #204]	@ (80011e8 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d109      	bne.n	8001134 <_Z19Update_CAN_Message1PhS_S_+0x1b4>
		flags[2] |= (1 << 1);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3302      	adds	r3, #2
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3302      	adds	r3, #2
 800112a:	f042 0202 	orr.w	r2, r2, #2
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	e008      	b.n	8001146 <_Z19Update_CAN_Message1PhS_S_+0x1c6>
	else
		flags[2] &= ~(1 << 1);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	3302      	adds	r3, #2
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3302      	adds	r3, #2
 800113e:	f022 0202 	bic.w	r2, r2, #2
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	701a      	strb	r2, [r3, #0]
	if (dashboardState.lightState == LIGHTS_RIGHT) // Right Turn
 8001146:	4b28      	ldr	r3, [pc, #160]	@ (80011e8 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d109      	bne.n	8001162 <_Z19Update_CAN_Message1PhS_S_+0x1e2>
		flags[2] |= (1 << 2);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	3302      	adds	r3, #2
 8001152:	781a      	ldrb	r2, [r3, #0]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3302      	adds	r3, #2
 8001158:	f042 0204 	orr.w	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	e008      	b.n	8001174 <_Z19Update_CAN_Message1PhS_S_+0x1f4>
	else
		flags[2] &= ~(1 << 2);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	3302      	adds	r3, #2
 8001166:	781a      	ldrb	r2, [r3, #0]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3302      	adds	r3, #2
 800116c:	f022 0204 	bic.w	r2, r2, #4
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	701a      	strb	r2, [r3, #0]
	if (dashboardState.headlightState) // Headlights
 8001174:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 8001176:	799b      	ldrb	r3, [r3, #6]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d009      	beq.n	8001190 <_Z19Update_CAN_Message1PhS_S_+0x210>
		flags[2] |= (1 << 3);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3302      	adds	r3, #2
 8001180:	781a      	ldrb	r2, [r3, #0]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3302      	adds	r3, #2
 8001186:	f042 0208 	orr.w	r2, r2, #8
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	701a      	strb	r2, [r3, #0]
 800118e:	e008      	b.n	80011a2 <_Z19Update_CAN_Message1PhS_S_+0x222>
	else
		flags[2] &= ~(1 << 3);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3302      	adds	r3, #2
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3302      	adds	r3, #2
 800119a:	f022 0208 	bic.w	r2, r2, #8
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	701a      	strb	r2, [r3, #0]

	cc_enable ^= CHECK_BIT(risingEdges_flag2, 1);
 80011a2:	7dbb      	ldrb	r3, [r7, #22]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	bf14      	ite	ne
 80011ac:	2301      	movne	r3, #1
 80011ae:	2300      	moveq	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	b25a      	sxtb	r2, r3
 80011b4:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	4053      	eors	r3, r2
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 80011c2:	701a      	strb	r2, [r3, #0]

	prev_input1 = *Input1;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	781a      	ldrb	r2, [r3, #0]
 80011c8:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <_Z19Update_CAN_Message1PhS_S_+0x260>)
 80011ca:	701a      	strb	r2, [r3, #0]
	prev_input2 = *Input2;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <_Z19Update_CAN_Message1PhS_S_+0x264>)
 80011d2:	701a      	strb	r2, [r3, #0]

}
 80011d4:	bf00      	nop
 80011d6:	371c      	adds	r7, #28
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	20000141 	.word	0x20000141
 80011e4:	20000142 	.word	0x20000142
 80011e8:	200000ac 	.word	0x200000ac
 80011ec:	200000a9 	.word	0x200000a9

080011f0 <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef>:
	 *
	 * */
}

void Init_CAN_Filter1(CAN_HandleTypeDef &hcan1)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	@ 0x30
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = CAN_ID_BMS_POWER_CONSUM_INFO << 5;
  canfilterconfig.FilterMaskIdLow = (uint32_t)CAN_ID_MITSUBA_MOTOR_FRAME_0 << 5;

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
*/
  CAN_FilterTypeDef filter = {0};
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	2228      	movs	r2, #40	@ 0x28
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f00c fc41 	bl	800da88 <memset>
    filter.FilterActivation = ENABLE;
 8001206:	2301      	movs	r3, #1
 8001208:	62bb      	str	r3, [r7, #40]	@ 0x28
    filter.FilterBank = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001216:	2301      	movs	r3, #1
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24

    // Accept ALL messages (for debug/testing)
    filter.FilterIdHigh = 0x0000;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
    filter.FilterIdLow = 0x0000;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
    filter.FilterMaskIdHigh = 0x0000;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
    filter.FilterMaskIdLow = 0x0000;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]

    HAL_CAN_ConfigFilter(&hcan1, &filter);
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	4619      	mov	r1, r3
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f003 ff63 	bl	80050fc <HAL_CAN_ConfigFilter>
}
 8001236:	bf00      	nop
 8001238:	3730      	adds	r7, #48	@ 0x30
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0c      	ldr	r2, [pc, #48]	@ (8001280 <HAL_UART_RxCpltCallback+0x40>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d10c      	bne.n	800126c <HAL_UART_RxCpltCallback+0x2c>
  	{
		if (dashboardState.uart_rx != dashboardState.old_uart_rx)
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <HAL_UART_RxCpltCallback+0x44>)
 8001254:	7d9a      	ldrb	r2, [r3, #22]
 8001256:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <HAL_UART_RxCpltCallback+0x44>)
 8001258:	7ddb      	ldrb	r3, [r3, #23]
 800125a:	429a      	cmp	r2, r3
 800125c:	d006      	beq.n	800126c <HAL_UART_RxCpltCallback+0x2c>
		{
			dashboardState.updateRequested = 1; // set flag to update dashboard state
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <HAL_UART_RxCpltCallback+0x44>)
 8001260:	2201      	movs	r2, #1
 8001262:	761a      	strb	r2, [r3, #24]
			dashboardState.old_uart_rx = dashboardState.uart_rx;
 8001264:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <HAL_UART_RxCpltCallback+0x44>)
 8001266:	7d9a      	ldrb	r2, [r3, #22]
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_UART_RxCpltCallback+0x44>)
 800126a:	75da      	strb	r2, [r3, #23]
		}
	}
	HAL_UART_Receive_IT(&huart4, &dashboardState.uart_rx, 1);
 800126c:	2201      	movs	r2, #1
 800126e:	4906      	ldr	r1, [pc, #24]	@ (8001288 <HAL_UART_RxCpltCallback+0x48>)
 8001270:	4806      	ldr	r0, [pc, #24]	@ (800128c <HAL_UART_RxCpltCallback+0x4c>)
 8001272:	f008 f96f 	bl	8009554 <HAL_UART_Receive_IT>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40004c00 	.word	0x40004c00
 8001284:	200000ac 	.word	0x200000ac
 8001288:	200000c2 	.word	0x200000c2
 800128c:	20000390 	.word	0x20000390

08001290 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	dma_flag = 1;
 8001298:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <HAL_ADC_ConvCpltCallback+0x1c>)
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	200000a8 	.word	0x200000a8

080012b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]
	GPIO_Interrupt_Triggered = 1;
 80012ba:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <HAL_GPIO_EXTI_Callback+0x1c>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	200000aa 	.word	0x200000aa

080012d0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80012d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012d4:	b092      	sub	sp, #72	@ 0x48
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	f107 0214 	add.w	r2, r7, #20
 80012e2:	2100      	movs	r1, #0
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f004 f932 	bl	800554e <HAL_CAN_GetRxMessage>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bf14      	ite	ne
 80012f0:	2301      	movne	r3, #1
 80012f2:	2300      	moveq	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
    {
        Error_Handler();
 80012fa:	f000 fd67 	bl	8001dcc <Error_Handler>
    }

	// vcu sends mc and array status
    if (RxHeader.StdId == CAN_ID_VCU_SENSORS)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d11b      	bne.n	800133c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
    {
		uint8_t statusByte = RxData[VCU_SENSORS_STATUS_BYTE_INDEX];
 8001304:	7cfb      	ldrb	r3, [r7, #19]
 8001306:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		dashboardState.mcStatus = CHECK_BIT(
 800130a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	bf14      	ite	ne
 8001316:	2301      	movne	r3, #1
 8001318:	2300      	moveq	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	461a      	mov	r2, r3
 800131e:	4b5c      	ldr	r3, [pc, #368]	@ (8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8001320:	745a      	strb	r2, [r3, #17]
			statusByte, 
			(int)VCU_SENSORS_STATUS_BITS::VCU_MC_ENABLED_BIT_POS
		);
		dashboardState.arrayStatus = CHECK_BIT(
 8001322:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	bf14      	ite	ne
 800132e:	2301      	movne	r3, #1
 8001330:	2300      	moveq	r3, #0
 8001332:	b2db      	uxtb	r3, r3
 8001334:	461a      	mov	r2, r3
 8001336:	4b56      	ldr	r3, [pc, #344]	@ (8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8001338:	749a      	strb	r2, [r3, #18]
		dashboardState.motor_voltage_msb = (motor_voltage >> 8) & 0xFF;
		dashboardState.motor_current_lsb = motor_current & 0xFF;
		dashboardState.motor_current_msb = (motor_current >> 8) & 0xFF;
		dashboardState.motor_current_direction = motor_current_direction;
	}
}
 800133a:	e0a3      	b.n	8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>
	else if (RxHeader.StdId == CAN_ID_POWERBOARD)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	2b03      	cmp	r3, #3
 8001340:	d106      	bne.n	8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
		dashboardState.supp_batt_voltage_lsb = RxData[POWERBOARD_SUPPLEMENTAL_BATTERY_VOLTAGE_LSB_INDEX];
 8001342:	7bba      	ldrb	r2, [r7, #14]
 8001344:	4b52      	ldr	r3, [pc, #328]	@ (8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8001346:	765a      	strb	r2, [r3, #25]
		dashboardState.supp_batt_voltage_msb = RxData[POWERBOARD_SUPPLEMENTAL_BATTERY_VOLTAGE_MSB_INDEX];
 8001348:	7bfa      	ldrb	r2, [r7, #15]
 800134a:	4b51      	ldr	r3, [pc, #324]	@ (8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800134c:	769a      	strb	r2, [r3, #26]
}
 800134e:	e099      	b.n	8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>
	else if (RxHeader.StdId == CAN_ID_BMS_POWER_CONSUM_INFO)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2b06      	cmp	r3, #6
 8001354:	d10f      	bne.n	8001376 <HAL_CAN_RxFifo0MsgPendingCallback+0xa6>
		uint8_t statusByte = RxData[BMS_STATUS_BYTE_INDEX];
 8001356:	7cfb      	ldrb	r3, [r7, #19]
 8001358:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
		dashboardState.bmsStatus = CHECK_BIT(
 800135c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b00      	cmp	r3, #0
 8001366:	bf14      	ite	ne
 8001368:	2301      	movne	r3, #1
 800136a:	2300      	moveq	r3, #0
 800136c:	b2db      	uxtb	r3, r3
 800136e:	461a      	mov	r2, r3
 8001370:	4b47      	ldr	r3, [pc, #284]	@ (8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8001372:	741a      	strb	r2, [r3, #16]
}
 8001374:	e086      	b.n	8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>
	else if (RxHeader.StdId == CAN_ID_MITSUBA_MOTOR_FRAME_0)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	4a46      	ldr	r2, [pc, #280]	@ (8001494 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	f040 8082 	bne.w	8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>
		uint64_t full_data = 0;
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	f04f 0300 	mov.w	r3, #0
 8001388:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		for (int i = 0; i < 8; i++)
 800138c:	2300      	movs	r3, #0
 800138e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001390:	e023      	b.n	80013da <HAL_CAN_RxFifo0MsgPendingCallback+0x10a>
			full_data |= (uint64_t)RxData[i] << (i * 8);
 8001392:	f107 020c 	add.w	r2, r7, #12
 8001396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001398:	4413      	add	r3, r2
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2200      	movs	r2, #0
 80013a0:	4698      	mov	r8, r3
 80013a2:	4691      	mov	r9, r2
 80013a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	f1a3 0120 	sub.w	r1, r3, #32
 80013ac:	f1c3 0220 	rsb	r2, r3, #32
 80013b0:	fa09 f503 	lsl.w	r5, r9, r3
 80013b4:	fa08 f101 	lsl.w	r1, r8, r1
 80013b8:	430d      	orrs	r5, r1
 80013ba:	fa28 f202 	lsr.w	r2, r8, r2
 80013be:	4315      	orrs	r5, r2
 80013c0:	fa08 f403 	lsl.w	r4, r8, r3
 80013c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80013c8:	ea42 0a04 	orr.w	sl, r2, r4
 80013cc:	ea43 0b05 	orr.w	fp, r3, r5
 80013d0:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
		for (int i = 0; i < 8; i++)
 80013d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013d6:	3301      	adds	r3, #1
 80013d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013dc:	2b07      	cmp	r3, #7
 80013de:	ddd8      	ble.n	8001392 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
		uint16_t motor_rpm = (full_data >> MITSUBA_RPM_VELOCITY_LSB_BIT_INDEX) & ((1 << MITSUBA_RPM_VELOCITY_LEN) - 1);
 80013e0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	08ca      	lsrs	r2, r1, #3
 80013ee:	2300      	movs	r3, #0
 80013f0:	b293      	uxth	r3, r2
 80013f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f6:	877b      	strh	r3, [r7, #58]	@ 0x3a
		uint16_t motor_voltage = (full_data >> MITSUBA_VOLTAGE_LSB_BIT_INDEX) & ((1 << MITSUBA_VOLTAGE_LEN) - 1);
 80013f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80013fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001400:	873b      	strh	r3, [r7, #56]	@ 0x38
		uint16_t motor_current = (full_data >> MITSUBA_CURRENT_LSB_BIT_INDEX) & ((1 << MITSUBA_CURRENT_LEN) - 1);
 8001402:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	f04f 0300 	mov.w	r3, #0
 800140e:	0a82      	lsrs	r2, r0, #10
 8001410:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001414:	0a8b      	lsrs	r3, r1, #10
 8001416:	b293      	uxth	r3, r2
 8001418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800141c:	86fb      	strh	r3, [r7, #54]	@ 0x36
		uint8_t motor_current_direction = (full_data >> MITSUBA_BATTERY_CURRENT_DIRECTION_BIT_INDEX) & 0x01;
 800141e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	f04f 0300 	mov.w	r3, #0
 800142a:	0cc2      	lsrs	r2, r0, #19
 800142c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001430:	0ccb      	lsrs	r3, r1, #19
 8001432:	b2d3      	uxtb	r3, r2
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
		dashboardState.motor_rpm_lsb = motor_rpm & 0xFF;
 800143c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8001442:	76da      	strb	r2, [r3, #27]
		dashboardState.motor_rpm_msb = (motor_rpm >> 8) & 0xFF;
 8001444:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001446:	0a1b      	lsrs	r3, r3, #8
 8001448:	b29b      	uxth	r3, r3
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800144e:	771a      	strb	r2, [r3, #28]
		dashboardState.motor_voltage_lsb = motor_voltage & 0xFF;
 8001450:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8001456:	77da      	strb	r2, [r3, #31]
		dashboardState.motor_voltage_msb = (motor_voltage >> 8) & 0xFF;
 8001458:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	b29b      	uxth	r3, r3
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8001462:	f883 2020 	strb.w	r2, [r3, #32]
		dashboardState.motor_current_lsb = motor_current & 0xFF;
 8001466:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800146c:	775a      	strb	r2, [r3, #29]
		dashboardState.motor_current_msb = (motor_current >> 8) & 0xFF;
 800146e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	b29b      	uxth	r3, r3
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8001478:	779a      	strb	r2, [r3, #30]
		dashboardState.motor_current_direction = motor_current_direction;
 800147a:	4a05      	ldr	r2, [pc, #20]	@ (8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800147c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001480:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
}
 8001484:	bf00      	nop
 8001486:	3748      	adds	r7, #72	@ 0x48
 8001488:	46bd      	mov	sp, r7
 800148a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800148e:	bf00      	nop
 8001490:	200000ac 	.word	0x200000ac
 8001494:	08850225 	.word	0x08850225

08001498 <_Z41__static_initialization_and_destruction_0ii>:
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d10a      	bne.n	80014be <_Z41__static_initialization_and_destruction_0ii+0x26>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d105      	bne.n	80014be <_Z41__static_initialization_and_destruction_0ii+0x26>
ILI9341 screen(320, 240);
 80014b2:	22f0      	movs	r2, #240	@ 0xf0
 80014b4:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80014b8:	4808      	ldr	r0, [pc, #32]	@ (80014dc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80014ba:	f001 f863 	bl	8002584 <_ZN7ILI9341C1Ess>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d107      	bne.n	80014d4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d102      	bne.n	80014d4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80014ce:	4803      	ldr	r0, [pc, #12]	@ (80014dc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80014d0:	f001 f8f2 	bl	80026b8 <_ZN7ILI9341D1Ev>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200000d0 	.word	0x200000d0

080014e0 <_GLOBAL__sub_I_U5>:
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80014e8:	2001      	movs	r0, #1
 80014ea:	f7ff ffd5 	bl	8001498 <_Z41__static_initialization_and_destruction_0ii>
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <_GLOBAL__sub_D_U5>:
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80014f8:	2000      	movs	r0, #0
 80014fa:	f7ff ffcd 	bl	8001498 <_Z41__static_initialization_and_destruction_0ii>
 80014fe:	bd80      	pop	{r7, pc}

08001500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001504:	f002 f8cd 	bl	80036a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001508:	f000 f86c 	bl	80015e4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800150c:	f000 fbbe 	bl	8001c8c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001510:	f000 fb8a 	bl	8001c28 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8001514:	f000 f8c8 	bl	80016a8 <_ZL12MX_ADC1_Initv>
  MX_I2C4_Init();
 8001518:	f000 fa5e 	bl	80019d8 <_ZL12MX_I2C4_Initv>
  MX_CAN1_Init();
 800151c:	f000 f9e8 	bl	80018f0 <_ZL12MX_CAN1_Initv>
  MX_CAN2_Init();
 8001520:	f000 fa20 	bl	8001964 <_ZL12MX_CAN2_Initv>
  MX_UART4_Init();
 8001524:	f000 fb4c 	bl	8001bc0 <_ZL13MX_UART4_Initv>
  MX_TIM8_Init();
 8001528:	f000 fae8 	bl	8001afc <_ZL12MX_TIM8_Initv>
  MX_SPI3_Init();
 800152c:	f000 faa2 	bl	8001a74 <_ZL12MX_SPI3_Initv>
  /* USER CODE BEGIN 2 */
  CPP_UserSetup();
 8001530:	f7ff f96c 	bl	800080c <CPP_UserSetup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001534:	f009 fb64 	bl	800ac00 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CAN_Mutex */
  CAN_MutexHandle = osSemaphoreNew(1, 1, &CAN_Mutex_attributes);
 8001538:	4a19      	ldr	r2, [pc, #100]	@ (80015a0 <main+0xa0>)
 800153a:	2101      	movs	r1, #1
 800153c:	2001      	movs	r0, #1
 800153e:	f009 fc56 	bl	800adee <osSemaphoreNew>
 8001542:	4603      	mov	r3, r0
 8001544:	4a17      	ldr	r2, [pc, #92]	@ (80015a4 <main+0xa4>)
 8001546:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartTask01, NULL, &HeartBeat_attributes);
 8001548:	4a17      	ldr	r2, [pc, #92]	@ (80015a8 <main+0xa8>)
 800154a:	2100      	movs	r1, #0
 800154c:	4817      	ldr	r0, [pc, #92]	@ (80015ac <main+0xac>)
 800154e:	f009 fba1 	bl	800ac94 <osThreadNew>
 8001552:	4603      	mov	r3, r0
 8001554:	4a16      	ldr	r2, [pc, #88]	@ (80015b0 <main+0xb0>)
 8001556:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);
 8001558:	4a16      	ldr	r2, [pc, #88]	@ (80015b4 <main+0xb4>)
 800155a:	2100      	movs	r1, #0
 800155c:	4816      	ldr	r0, [pc, #88]	@ (80015b8 <main+0xb8>)
 800155e:	f009 fb99 	bl	800ac94 <osThreadNew>
 8001562:	4603      	mov	r3, r0
 8001564:	4a15      	ldr	r2, [pc, #84]	@ (80015bc <main+0xbc>)
 8001566:	6013      	str	r3, [r2, #0]

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 8001568:	4a15      	ldr	r2, [pc, #84]	@ (80015c0 <main+0xc0>)
 800156a:	2100      	movs	r1, #0
 800156c:	4815      	ldr	r0, [pc, #84]	@ (80015c4 <main+0xc4>)
 800156e:	f009 fb91 	bl	800ac94 <osThreadNew>
 8001572:	4603      	mov	r3, r0
 8001574:	4a14      	ldr	r2, [pc, #80]	@ (80015c8 <main+0xc8>)
 8001576:	6013      	str	r3, [r2, #0]

  /* creation of Outputs_Control */
  Outputs_ControlHandle = osThreadNew(StartTask04, NULL, &Outputs_Control_attributes);
 8001578:	4a14      	ldr	r2, [pc, #80]	@ (80015cc <main+0xcc>)
 800157a:	2100      	movs	r1, #0
 800157c:	4814      	ldr	r0, [pc, #80]	@ (80015d0 <main+0xd0>)
 800157e:	f009 fb89 	bl	800ac94 <osThreadNew>
 8001582:	4603      	mov	r3, r0
 8001584:	4a13      	ldr	r2, [pc, #76]	@ (80015d4 <main+0xd4>)
 8001586:	6013      	str	r3, [r2, #0]

  /* creation of ScreenControl */
  ScreenControlHandle = osThreadNew(StartTask05, NULL, &ScreenControl_attributes);
 8001588:	4a13      	ldr	r2, [pc, #76]	@ (80015d8 <main+0xd8>)
 800158a:	2100      	movs	r1, #0
 800158c:	4813      	ldr	r0, [pc, #76]	@ (80015dc <main+0xdc>)
 800158e:	f009 fb81 	bl	800ac94 <osThreadNew>
 8001592:	4603      	mov	r3, r0
 8001594:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <main+0xe0>)
 8001596:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001598:	f009 fb56 	bl	800ac48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <main+0x9c>
 80015a0:	0800dda4 	.word	0x0800dda4
 80015a4:	2000042c 	.word	0x2000042c
 80015a8:	0800dcf0 	.word	0x0800dcf0
 80015ac:	08000909 	.word	0x08000909
 80015b0:	20000418 	.word	0x20000418
 80015b4:	0800dd14 	.word	0x0800dd14
 80015b8:	0800098d 	.word	0x0800098d
 80015bc:	2000041c 	.word	0x2000041c
 80015c0:	0800dd38 	.word	0x0800dd38
 80015c4:	08000b15 	.word	0x08000b15
 80015c8:	20000420 	.word	0x20000420
 80015cc:	0800dd5c 	.word	0x0800dd5c
 80015d0:	08000c31 	.word	0x08000c31
 80015d4:	20000424 	.word	0x20000424
 80015d8:	0800dd80 	.word	0x0800dd80
 80015dc:	08000cbd 	.word	0x08000cbd
 80015e0:	20000428 	.word	0x20000428

080015e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b096      	sub	sp, #88	@ 0x58
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	2244      	movs	r2, #68	@ 0x44
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f00c fa48 	bl	800da88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	463b      	mov	r3, r7
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001606:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800160a:	f005 fe7d 	bl	8007308 <HAL_PWREx_ControlVoltageScaling>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	bf14      	ite	ne
 8001614:	2301      	movne	r3, #1
 8001616:	2300      	moveq	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800161e:	f000 fbd5 	bl	8001dcc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001622:	2310      	movs	r3, #16
 8001624:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001626:	2301      	movs	r3, #1
 8001628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800162e:	2360      	movs	r3, #96	@ 0x60
 8001630:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001632:	2302      	movs	r3, #2
 8001634:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001636:	2301      	movs	r3, #1
 8001638:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800163a:	2301      	movs	r3, #1
 800163c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800163e:	2314      	movs	r3, #20
 8001640:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001642:	2302      	movs	r3, #2
 8001644:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001646:	2302      	movs	r3, #2
 8001648:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800164a:	2302      	movs	r3, #2
 800164c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4618      	mov	r0, r3
 8001654:	f005 feae 	bl	80073b4 <HAL_RCC_OscConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	bf14      	ite	ne
 800165e:	2301      	movne	r3, #1
 8001660:	2300      	moveq	r3, #0
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8001668:	f000 fbb0 	bl	8001dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166c:	230f      	movs	r3, #15
 800166e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001670:	2303      	movs	r3, #3
 8001672:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001680:	463b      	mov	r3, r7
 8001682:	2102      	movs	r1, #2
 8001684:	4618      	mov	r0, r3
 8001686:	f006 faaf 	bl	8007be8 <HAL_RCC_ClockConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	bf14      	ite	ne
 8001690:	2301      	movne	r3, #1
 8001692:	2300      	moveq	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 800169a:	f000 fb97 	bl	8001dcc <Error_Handler>
  }
}
 800169e:	bf00      	nop
 80016a0:	3758      	adds	r7, #88	@ 0x58
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	@ 0x28
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
 80016c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016ca:	4b86      	ldr	r3, [pc, #536]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 80016cc:	4a86      	ldr	r2, [pc, #536]	@ (80018e8 <_ZL12MX_ADC1_Initv+0x240>)
 80016ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016d0:	4b84      	ldr	r3, [pc, #528]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016d6:	4b83      	ldr	r3, [pc, #524]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016dc:	4b81      	ldr	r3, [pc, #516]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016e2:	4b80      	ldr	r3, [pc, #512]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80016e8:	4b7e      	ldr	r3, [pc, #504]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 80016ea:	2208      	movs	r2, #8
 80016ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016ee:	4b7d      	ldr	r3, [pc, #500]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016f4:	4b7b      	ldr	r3, [pc, #492]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 80016fa:	4b7a      	ldr	r3, [pc, #488]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 80016fc:	220a      	movs	r2, #10
 80016fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001700:	4b78      	ldr	r3, [pc, #480]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001708:	4b76      	ldr	r3, [pc, #472]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 800170a:	2200      	movs	r2, #0
 800170c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800170e:	4b75      	ldr	r3, [pc, #468]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 8001710:	2200      	movs	r2, #0
 8001712:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001714:	4b73      	ldr	r3, [pc, #460]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800171c:	4b71      	ldr	r3, [pc, #452]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 800171e:	2200      	movs	r2, #0
 8001720:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001722:	4b70      	ldr	r3, [pc, #448]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800172a:	486e      	ldr	r0, [pc, #440]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 800172c:	f002 fa4c 	bl	8003bc8 <HAL_ADC_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	bf14      	ite	ne
 8001736:	2301      	movne	r3, #1
 8001738:	2300      	moveq	r3, #0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 8001740:	f000 fb44 	bl	8001dcc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4619      	mov	r1, r3
 800174e:	4865      	ldr	r0, [pc, #404]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 8001750:	f003 fb28 	bl	8004da4 <HAL_ADCEx_MultiModeConfigChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	bf14      	ite	ne
 800175a:	2301      	movne	r3, #1
 800175c:	2300      	moveq	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 8001764:	f000 fb32 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001768:	4b60      	ldr	r3, [pc, #384]	@ (80018ec <_ZL12MX_ADC1_Initv+0x244>)
 800176a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800176c:	2306      	movs	r3, #6
 800176e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001774:	237f      	movs	r3, #127	@ 0x7f
 8001776:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001778:	2304      	movs	r3, #4
 800177a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	4619      	mov	r1, r3
 8001784:	4857      	ldr	r0, [pc, #348]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 8001786:	f002 fca5 	bl	80040d4 <HAL_ADC_ConfigChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	bf14      	ite	ne
 8001790:	2301      	movne	r3, #1
 8001792:	2300      	moveq	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 800179a:	f000 fb17 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800179e:	230c      	movs	r3, #12
 80017a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	4619      	mov	r1, r3
 80017a6:	484f      	ldr	r0, [pc, #316]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 80017a8:	f002 fc94 	bl	80040d4 <HAL_ADC_ConfigChannel>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	bf14      	ite	ne
 80017b2:	2301      	movne	r3, #1
 80017b4:	2300      	moveq	r3, #0
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <_ZL12MX_ADC1_Initv+0x118>
  {
    Error_Handler();
 80017bc:	f000 fb06 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80017c0:	2312      	movs	r3, #18
 80017c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	4619      	mov	r1, r3
 80017c8:	4846      	ldr	r0, [pc, #280]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 80017ca:	f002 fc83 	bl	80040d4 <HAL_ADC_ConfigChannel>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bf14      	ite	ne
 80017d4:	2301      	movne	r3, #1
 80017d6:	2300      	moveq	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <_ZL12MX_ADC1_Initv+0x13a>
  {
    Error_Handler();
 80017de:	f000 faf5 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80017e2:	2318      	movs	r3, #24
 80017e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	4619      	mov	r1, r3
 80017ea:	483e      	ldr	r0, [pc, #248]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 80017ec:	f002 fc72 	bl	80040d4 <HAL_ADC_ConfigChannel>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	bf14      	ite	ne
 80017f6:	2301      	movne	r3, #1
 80017f8:	2300      	moveq	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <_ZL12MX_ADC1_Initv+0x15c>
  {
    Error_Handler();
 8001800:	f000 fae4 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001804:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001808:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4619      	mov	r1, r3
 800180e:	4835      	ldr	r0, [pc, #212]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 8001810:	f002 fc60 	bl	80040d4 <HAL_ADC_ConfigChannel>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	bf14      	ite	ne
 800181a:	2301      	movne	r3, #1
 800181c:	2300      	moveq	r3, #0
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <_ZL12MX_ADC1_Initv+0x180>
  {
    Error_Handler();
 8001824:	f000 fad2 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001828:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800182c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	4619      	mov	r1, r3
 8001832:	482c      	ldr	r0, [pc, #176]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 8001834:	f002 fc4e 	bl	80040d4 <HAL_ADC_ConfigChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	bf14      	ite	ne
 800183e:	2301      	movne	r3, #1
 8001840:	2300      	moveq	r3, #0
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <_ZL12MX_ADC1_Initv+0x1a4>
  {
    Error_Handler();
 8001848:	f000 fac0 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800184c:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8001850:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	4619      	mov	r1, r3
 8001856:	4823      	ldr	r0, [pc, #140]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 8001858:	f002 fc3c 	bl	80040d4 <HAL_ADC_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	bf14      	ite	ne
 8001862:	2301      	movne	r3, #1
 8001864:	2300      	moveq	r3, #0
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <_ZL12MX_ADC1_Initv+0x1c8>
  {
    Error_Handler();
 800186c:	f000 faae 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001870:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001874:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	4619      	mov	r1, r3
 800187a:	481a      	ldr	r0, [pc, #104]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 800187c:	f002 fc2a 	bl	80040d4 <HAL_ADC_ConfigChannel>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	bf14      	ite	ne
 8001886:	2301      	movne	r3, #1
 8001888:	2300      	moveq	r3, #0
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <_ZL12MX_ADC1_Initv+0x1ec>
  {
    Error_Handler();
 8001890:	f000 fa9c 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001894:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001898:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	4619      	mov	r1, r3
 800189e:	4811      	ldr	r0, [pc, #68]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 80018a0:	f002 fc18 	bl	80040d4 <HAL_ADC_ConfigChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bf14      	ite	ne
 80018aa:	2301      	movne	r3, #1
 80018ac:	2300      	moveq	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <_ZL12MX_ADC1_Initv+0x210>
  {
    Error_Handler();
 80018b4:	f000 fa8a 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80018b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	4619      	mov	r1, r3
 80018c2:	4808      	ldr	r0, [pc, #32]	@ (80018e4 <_ZL12MX_ADC1_Initv+0x23c>)
 80018c4:	f002 fc06 	bl	80040d4 <HAL_ADC_ConfigChannel>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	bf14      	ite	ne
 80018ce:	2301      	movne	r3, #1
 80018d0:	2300      	moveq	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <_ZL12MX_ADC1_Initv+0x234>
  {
    Error_Handler();
 80018d8:	f000 fa78 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	3728      	adds	r7, #40	@ 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000144 	.word	0x20000144
 80018e8:	50040000 	.word	0x50040000
 80018ec:	04300002 	.word	0x04300002

080018f0 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80018f4:	4b19      	ldr	r3, [pc, #100]	@ (800195c <_ZL12MX_CAN1_Initv+0x6c>)
 80018f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001960 <_ZL12MX_CAN1_Initv+0x70>)
 80018f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 80018fa:	4b18      	ldr	r3, [pc, #96]	@ (800195c <_ZL12MX_CAN1_Initv+0x6c>)
 80018fc:	2208      	movs	r2, #8
 80018fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001900:	4b16      	ldr	r3, [pc, #88]	@ (800195c <_ZL12MX_CAN1_Initv+0x6c>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001906:	4b15      	ldr	r3, [pc, #84]	@ (800195c <_ZL12MX_CAN1_Initv+0x6c>)
 8001908:	2200      	movs	r2, #0
 800190a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800190c:	4b13      	ldr	r3, [pc, #76]	@ (800195c <_ZL12MX_CAN1_Initv+0x6c>)
 800190e:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001912:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001914:	4b11      	ldr	r3, [pc, #68]	@ (800195c <_ZL12MX_CAN1_Initv+0x6c>)
 8001916:	2200      	movs	r2, #0
 8001918:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800191a:	4b10      	ldr	r3, [pc, #64]	@ (800195c <_ZL12MX_CAN1_Initv+0x6c>)
 800191c:	2200      	movs	r2, #0
 800191e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001920:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <_ZL12MX_CAN1_Initv+0x6c>)
 8001922:	2200      	movs	r2, #0
 8001924:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001926:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <_ZL12MX_CAN1_Initv+0x6c>)
 8001928:	2200      	movs	r2, #0
 800192a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800192c:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <_ZL12MX_CAN1_Initv+0x6c>)
 800192e:	2200      	movs	r2, #0
 8001930:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001932:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <_ZL12MX_CAN1_Initv+0x6c>)
 8001934:	2200      	movs	r2, #0
 8001936:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001938:	4b08      	ldr	r3, [pc, #32]	@ (800195c <_ZL12MX_CAN1_Initv+0x6c>)
 800193a:	2200      	movs	r2, #0
 800193c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800193e:	4807      	ldr	r0, [pc, #28]	@ (800195c <_ZL12MX_CAN1_Initv+0x6c>)
 8001940:	f003 fae0 	bl	8004f04 <HAL_CAN_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	bf14      	ite	ne
 800194a:	2301      	movne	r3, #1
 800194c:	2300      	moveq	r3, #0
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <_ZL12MX_CAN1_Initv+0x68>
  {
    Error_Handler();
 8001954:	f000 fa3a 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	200001f4 	.word	0x200001f4
 8001960:	40006400 	.word	0x40006400

08001964 <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001968:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <_ZL12MX_CAN2_Initv+0x6c>)
 800196a:	4a1a      	ldr	r2, [pc, #104]	@ (80019d4 <_ZL12MX_CAN2_Initv+0x70>)
 800196c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 8;
 800196e:	4b18      	ldr	r3, [pc, #96]	@ (80019d0 <_ZL12MX_CAN2_Initv+0x6c>)
 8001970:	2208      	movs	r2, #8
 8001972:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001974:	4b16      	ldr	r3, [pc, #88]	@ (80019d0 <_ZL12MX_CAN2_Initv+0x6c>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800197a:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <_ZL12MX_CAN2_Initv+0x6c>)
 800197c:	2200      	movs	r2, #0
 800197e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001980:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <_ZL12MX_CAN2_Initv+0x6c>)
 8001982:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001986:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <_ZL12MX_CAN2_Initv+0x6c>)
 800198a:	2200      	movs	r2, #0
 800198c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800198e:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <_ZL12MX_CAN2_Initv+0x6c>)
 8001990:	2200      	movs	r2, #0
 8001992:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001994:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <_ZL12MX_CAN2_Initv+0x6c>)
 8001996:	2200      	movs	r2, #0
 8001998:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800199a:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <_ZL12MX_CAN2_Initv+0x6c>)
 800199c:	2200      	movs	r2, #0
 800199e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80019a0:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <_ZL12MX_CAN2_Initv+0x6c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80019a6:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <_ZL12MX_CAN2_Initv+0x6c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <_ZL12MX_CAN2_Initv+0x6c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80019b2:	4807      	ldr	r0, [pc, #28]	@ (80019d0 <_ZL12MX_CAN2_Initv+0x6c>)
 80019b4:	f003 faa6 	bl	8004f04 <HAL_CAN_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	bf14      	ite	ne
 80019be:	2301      	movne	r3, #1
 80019c0:	2300      	moveq	r3, #0
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <_ZL12MX_CAN2_Initv+0x68>
  {
    Error_Handler();
 80019c8:	f000 fa00 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	2000021c 	.word	0x2000021c
 80019d4:	40006800 	.word	0x40006800

080019d8 <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80019dc:	4b22      	ldr	r3, [pc, #136]	@ (8001a68 <_ZL12MX_I2C4_Initv+0x90>)
 80019de:	4a23      	ldr	r2, [pc, #140]	@ (8001a6c <_ZL12MX_I2C4_Initv+0x94>)
 80019e0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00D09BE3;
 80019e2:	4b21      	ldr	r3, [pc, #132]	@ (8001a68 <_ZL12MX_I2C4_Initv+0x90>)
 80019e4:	4a22      	ldr	r2, [pc, #136]	@ (8001a70 <_ZL12MX_I2C4_Initv+0x98>)
 80019e6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80019e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a68 <_ZL12MX_I2C4_Initv+0x90>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001a68 <_ZL12MX_I2C4_Initv+0x90>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a68 <_ZL12MX_I2C4_Initv+0x90>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80019fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <_ZL12MX_I2C4_Initv+0x90>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a00:	4b19      	ldr	r3, [pc, #100]	@ (8001a68 <_ZL12MX_I2C4_Initv+0x90>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a06:	4b18      	ldr	r3, [pc, #96]	@ (8001a68 <_ZL12MX_I2C4_Initv+0x90>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a0c:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <_ZL12MX_I2C4_Initv+0x90>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001a12:	4815      	ldr	r0, [pc, #84]	@ (8001a68 <_ZL12MX_I2C4_Initv+0x90>)
 8001a14:	f004 fe46 	bl	80066a4 <HAL_I2C_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	bf14      	ite	ne
 8001a1e:	2301      	movne	r3, #1
 8001a20:	2300      	moveq	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 8001a28:	f000 f9d0 	bl	8001dcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	480e      	ldr	r0, [pc, #56]	@ (8001a68 <_ZL12MX_I2C4_Initv+0x90>)
 8001a30:	f005 fbc4 	bl	80071bc <HAL_I2CEx_ConfigAnalogFilter>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	bf14      	ite	ne
 8001a3a:	2301      	movne	r3, #1
 8001a3c:	2300      	moveq	r3, #0
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 8001a44:	f000 f9c2 	bl	8001dcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4807      	ldr	r0, [pc, #28]	@ (8001a68 <_ZL12MX_I2C4_Initv+0x90>)
 8001a4c:	f005 fc01 	bl	8007252 <HAL_I2CEx_ConfigDigitalFilter>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bf14      	ite	ne
 8001a56:	2301      	movne	r3, #1
 8001a58:	2300      	moveq	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 8001a60:	f000 f9b4 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000244 	.word	0x20000244
 8001a6c:	40008400 	.word	0x40008400
 8001a70:	00d09be3 	.word	0x00d09be3

08001a74 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001a78:	4b1e      	ldr	r3, [pc, #120]	@ (8001af4 <_ZL12MX_SPI3_Initv+0x80>)
 8001a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001af8 <_ZL12MX_SPI3_Initv+0x84>)
 8001a7c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <_ZL12MX_SPI3_Initv+0x80>)
 8001a80:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a84:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001a86:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <_ZL12MX_SPI3_Initv+0x80>)
 8001a88:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a8c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a8e:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <_ZL12MX_SPI3_Initv+0x80>)
 8001a90:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001a94:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a96:	4b17      	ldr	r3, [pc, #92]	@ (8001af4 <_ZL12MX_SPI3_Initv+0x80>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a9c:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <_ZL12MX_SPI3_Initv+0x80>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001aa2:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <_ZL12MX_SPI3_Initv+0x80>)
 8001aa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aa8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aaa:	4b12      	ldr	r3, [pc, #72]	@ (8001af4 <_ZL12MX_SPI3_Initv+0x80>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ab0:	4b10      	ldr	r3, [pc, #64]	@ (8001af4 <_ZL12MX_SPI3_Initv+0x80>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8001af4 <_ZL12MX_SPI3_Initv+0x80>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001abc:	4b0d      	ldr	r3, [pc, #52]	@ (8001af4 <_ZL12MX_SPI3_Initv+0x80>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <_ZL12MX_SPI3_Initv+0x80>)
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8001af4 <_ZL12MX_SPI3_Initv+0x80>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ace:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <_ZL12MX_SPI3_Initv+0x80>)
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ad4:	4807      	ldr	r0, [pc, #28]	@ (8001af4 <_ZL12MX_SPI3_Initv+0x80>)
 8001ad6:	f006 ffa7 	bl	8008a28 <HAL_SPI_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	bf14      	ite	ne
 8001ae0:	2301      	movne	r3, #1
 8001ae2:	2300      	moveq	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <_ZL12MX_SPI3_Initv+0x7a>
  {
    Error_Handler();
 8001aea:	f000 f96f 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000298 	.word	0x20000298
 8001af8:	40003c00 	.word	0x40003c00

08001afc <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b1a:	4b27      	ldr	r3, [pc, #156]	@ (8001bb8 <_ZL12MX_TIM8_Initv+0xbc>)
 8001b1c:	4a27      	ldr	r2, [pc, #156]	@ (8001bbc <_ZL12MX_TIM8_Initv+0xc0>)
 8001b1e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 8001b20:	4b25      	ldr	r3, [pc, #148]	@ (8001bb8 <_ZL12MX_TIM8_Initv+0xbc>)
 8001b22:	2203      	movs	r2, #3
 8001b24:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b26:	4b24      	ldr	r3, [pc, #144]	@ (8001bb8 <_ZL12MX_TIM8_Initv+0xbc>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 799;
 8001b2c:	4b22      	ldr	r3, [pc, #136]	@ (8001bb8 <_ZL12MX_TIM8_Initv+0xbc>)
 8001b2e:	f240 321f 	movw	r2, #799	@ 0x31f
 8001b32:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b34:	4b20      	ldr	r3, [pc, #128]	@ (8001bb8 <_ZL12MX_TIM8_Initv+0xbc>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb8 <_ZL12MX_TIM8_Initv+0xbc>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b40:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb8 <_ZL12MX_TIM8_Initv+0xbc>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b46:	481c      	ldr	r0, [pc, #112]	@ (8001bb8 <_ZL12MX_TIM8_Initv+0xbc>)
 8001b48:	f007 f811 	bl	8008b6e <HAL_TIM_Base_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	bf14      	ite	ne
 8001b52:	2301      	movne	r3, #1
 8001b54:	2300      	moveq	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <_ZL12MX_TIM8_Initv+0x64>
  {
    Error_Handler();
 8001b5c:	f000 f936 	bl	8001dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b66:	f107 0310 	add.w	r3, r7, #16
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4812      	ldr	r0, [pc, #72]	@ (8001bb8 <_ZL12MX_TIM8_Initv+0xbc>)
 8001b6e:	f007 f9cc 	bl	8008f0a <HAL_TIM_ConfigClockSource>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	bf14      	ite	ne
 8001b78:	2301      	movne	r3, #1
 8001b7a:	2300      	moveq	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <_ZL12MX_TIM8_Initv+0x8a>
  {
    Error_Handler();
 8001b82:	f000 f923 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	4619      	mov	r1, r3
 8001b96:	4808      	ldr	r0, [pc, #32]	@ (8001bb8 <_ZL12MX_TIM8_Initv+0xbc>)
 8001b98:	f007 fbe8 	bl	800936c <HAL_TIMEx_MasterConfigSynchronization>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	bf14      	ite	ne
 8001ba2:	2301      	movne	r3, #1
 8001ba4:	2300      	moveq	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <_ZL12MX_TIM8_Initv+0xb4>
  {
    Error_Handler();
 8001bac:	f000 f90e 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000344 	.word	0x20000344
 8001bbc:	40013400 	.word	0x40013400

08001bc0 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001bc4:	4b16      	ldr	r3, [pc, #88]	@ (8001c20 <_ZL13MX_UART4_Initv+0x60>)
 8001bc6:	4a17      	ldr	r2, [pc, #92]	@ (8001c24 <_ZL13MX_UART4_Initv+0x64>)
 8001bc8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001bca:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <_ZL13MX_UART4_Initv+0x60>)
 8001bcc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001bd0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <_ZL13MX_UART4_Initv+0x60>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <_ZL13MX_UART4_Initv+0x60>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001bde:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <_ZL13MX_UART4_Initv+0x60>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001be4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <_ZL13MX_UART4_Initv+0x60>)
 8001be6:	220c      	movs	r2, #12
 8001be8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bea:	4b0d      	ldr	r3, [pc, #52]	@ (8001c20 <_ZL13MX_UART4_Initv+0x60>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <_ZL13MX_UART4_Initv+0x60>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c20 <_ZL13MX_UART4_Initv+0x60>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bfc:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <_ZL13MX_UART4_Initv+0x60>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c02:	4807      	ldr	r0, [pc, #28]	@ (8001c20 <_ZL13MX_UART4_Initv+0x60>)
 8001c04:	f007 fc58 	bl	80094b8 <HAL_UART_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	bf14      	ite	ne
 8001c0e:	2301      	movne	r3, #1
 8001c10:	2300      	moveq	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 8001c18:	f000 f8d8 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000390 	.word	0x20000390
 8001c24:	40004c00 	.word	0x40004c00

08001c28 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c2e:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <_ZL11MX_DMA_Initv+0x60>)
 8001c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c32:	4a15      	ldr	r2, [pc, #84]	@ (8001c88 <_ZL11MX_DMA_Initv+0x60>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c3a:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <_ZL11MX_DMA_Initv+0x60>)
 8001c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c46:	4b10      	ldr	r3, [pc, #64]	@ (8001c88 <_ZL11MX_DMA_Initv+0x60>)
 8001c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001c88 <_ZL11MX_DMA_Initv+0x60>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c52:	4b0d      	ldr	r3, [pc, #52]	@ (8001c88 <_ZL11MX_DMA_Initv+0x60>)
 8001c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2105      	movs	r1, #5
 8001c62:	200b      	movs	r0, #11
 8001c64:	f004 f8a2 	bl	8005dac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c68:	200b      	movs	r0, #11
 8001c6a:	f004 f8bb 	bl	8005de4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2105      	movs	r1, #5
 8001c72:	2039      	movs	r0, #57	@ 0x39
 8001c74:	f004 f89a 	bl	8005dac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001c78:	2039      	movs	r0, #57	@ 0x39
 8001c7a:	f004 f8b3 	bl	8005de4 <HAL_NVIC_EnableIRQ>

}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40021000 	.word	0x40021000

08001c8c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8001d9c <_ZL12MX_GPIO_Initv+0x110>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca6:	4a3d      	ldr	r2, [pc, #244]	@ (8001d9c <_ZL12MX_GPIO_Initv+0x110>)
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cae:	4b3b      	ldr	r3, [pc, #236]	@ (8001d9c <_ZL12MX_GPIO_Initv+0x110>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	4b38      	ldr	r3, [pc, #224]	@ (8001d9c <_ZL12MX_GPIO_Initv+0x110>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cbe:	4a37      	ldr	r2, [pc, #220]	@ (8001d9c <_ZL12MX_GPIO_Initv+0x110>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cc6:	4b35      	ldr	r3, [pc, #212]	@ (8001d9c <_ZL12MX_GPIO_Initv+0x110>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd2:	4b32      	ldr	r3, [pc, #200]	@ (8001d9c <_ZL12MX_GPIO_Initv+0x110>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd6:	4a31      	ldr	r2, [pc, #196]	@ (8001d9c <_ZL12MX_GPIO_Initv+0x110>)
 8001cd8:	f043 0302 	orr.w	r3, r3, #2
 8001cdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cde:	4b2f      	ldr	r3, [pc, #188]	@ (8001d9c <_ZL12MX_GPIO_Initv+0x110>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001cea:	2200      	movs	r2, #0
 8001cec:	f248 11ff 	movw	r1, #33279	@ 0x81ff
 8001cf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cf4:	f004 fc8c 	bl	8006610 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |OK_LED_Pin|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Backlight_PWM_GPIO_Port, Backlight_PWM_Pin, GPIO_PIN_RESET);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2110      	movs	r1, #16
 8001cfc:	4828      	ldr	r0, [pc, #160]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x114>)
 8001cfe:	f004 fc87 	bl	8006610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C_D_Pin|WR_Pin|RD_Pin|Parallel_CS_Pin
 8001d02:	2200      	movs	r2, #0
 8001d04:	f241 0117 	movw	r1, #4119	@ 0x1017
 8001d08:	4826      	ldr	r0, [pc, #152]	@ (8001da4 <_ZL12MX_GPIO_Initv+0x118>)
 8001d0a:	f004 fc81 	bl	8006610 <HAL_GPIO_WritePin>
                          |D_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Alert1_Pin */
  GPIO_InitStruct.Pin = Alert1_Pin;
 8001d0e:	2304      	movs	r3, #4
 8001d10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d12:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Alert1_GPIO_Port, &GPIO_InitStruct);
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	4619      	mov	r1, r3
 8001d22:	481f      	ldr	r0, [pc, #124]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x114>)
 8001d24:	f004 fae2 	bl	80062ec <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin
                           OK_LED_Pin PA15 */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001d28:	f248 13ff 	movw	r3, #33279	@ 0x81ff
 8001d2c:	60fb      	str	r3, [r7, #12]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |OK_LED_Pin|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d44:	f004 fad2 	bl	80062ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Backlight_PWM_Pin */
  GPIO_InitStruct.Pin = Backlight_PWM_Pin;
 8001d48:	2310      	movs	r3, #16
 8001d4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Backlight_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4810      	ldr	r0, [pc, #64]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x114>)
 8001d60:	f004 fac4 	bl	80062ec <HAL_GPIO_Init>

  /*Configure GPIO pins : C_D_Pin WR_Pin RD_Pin Parallel_CS_Pin
                           D_C_Pin */
  GPIO_InitStruct.Pin = C_D_Pin|WR_Pin|RD_Pin|Parallel_CS_Pin
 8001d64:	f241 0317 	movw	r3, #4119	@ 0x1017
 8001d68:	60fb      	str	r3, [r7, #12]
                          |D_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4809      	ldr	r0, [pc, #36]	@ (8001da4 <_ZL12MX_GPIO_Initv+0x118>)
 8001d7e:	f004 fab5 	bl	80062ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2105      	movs	r1, #5
 8001d86:	2008      	movs	r0, #8
 8001d88:	f004 f810 	bl	8005dac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d8c:	2008      	movs	r0, #8
 8001d8e:	f004 f829 	bl	8005de4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d92:	bf00      	nop
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	48000800 	.word	0x48000800
 8001da4:	48000400 	.word	0x48000400

08001da8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a04      	ldr	r2, [pc, #16]	@ (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d101      	bne.n	8001dbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dba:	f001 fc8b 	bl	80036d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40000400 	.word	0x40000400

08001dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd0:	b672      	cpsid	i
}
 8001dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd4:	bf00      	nop
 8001dd6:	e7fd      	b.n	8001dd4 <Error_Handler+0x8>

08001dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dde:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <HAL_MspInit+0x4c>)
 8001de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de2:	4a10      	ldr	r2, [pc, #64]	@ (8001e24 <HAL_MspInit+0x4c>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dea:	4b0e      	ldr	r3, [pc, #56]	@ (8001e24 <HAL_MspInit+0x4c>)
 8001dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <HAL_MspInit+0x4c>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <HAL_MspInit+0x4c>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e02:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <HAL_MspInit+0x4c>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	210f      	movs	r1, #15
 8001e12:	f06f 0001 	mvn.w	r0, #1
 8001e16:	f003 ffc9 	bl	8005dac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000

08001e28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b0ac      	sub	sp, #176	@ 0xb0
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e40:	f107 0310 	add.w	r3, r7, #16
 8001e44:	228c      	movs	r2, #140	@ 0x8c
 8001e46:	2100      	movs	r1, #0
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f00b fe1d 	bl	800da88 <memset>
  if(hadc->Instance==ADC1)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a35      	ldr	r2, [pc, #212]	@ (8001f28 <HAL_ADC_MspInit+0x100>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d163      	bne.n	8001f20 <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e5c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001e5e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001e62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e66:	f107 0310 	add.w	r3, r7, #16
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f006 f912 	bl	8008094 <HAL_RCCEx_PeriphCLKConfig>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001e76:	f7ff ffa9 	bl	8001dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f2c <HAL_ADC_MspInit+0x104>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7e:	4a2b      	ldr	r2, [pc, #172]	@ (8001f2c <HAL_ADC_MspInit+0x104>)
 8001e80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e86:	4b29      	ldr	r3, [pc, #164]	@ (8001f2c <HAL_ADC_MspInit+0x104>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e92:	4b26      	ldr	r3, [pc, #152]	@ (8001f2c <HAL_ADC_MspInit+0x104>)
 8001e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e96:	4a25      	ldr	r2, [pc, #148]	@ (8001f2c <HAL_ADC_MspInit+0x104>)
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e9e:	4b23      	ldr	r3, [pc, #140]	@ (8001f2c <HAL_ADC_MspInit+0x104>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ebc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	481b      	ldr	r0, [pc, #108]	@ (8001f30 <HAL_ADC_MspInit+0x108>)
 8001ec4:	f004 fa12 	bl	80062ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f34 <HAL_ADC_MspInit+0x10c>)
 8001eca:	4a1b      	ldr	r2, [pc, #108]	@ (8001f38 <HAL_ADC_MspInit+0x110>)
 8001ecc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001ece:	4b19      	ldr	r3, [pc, #100]	@ (8001f34 <HAL_ADC_MspInit+0x10c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ed4:	4b17      	ldr	r3, [pc, #92]	@ (8001f34 <HAL_ADC_MspInit+0x10c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eda:	4b16      	ldr	r3, [pc, #88]	@ (8001f34 <HAL_ADC_MspInit+0x10c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ee0:	4b14      	ldr	r3, [pc, #80]	@ (8001f34 <HAL_ADC_MspInit+0x10c>)
 8001ee2:	2280      	movs	r2, #128	@ 0x80
 8001ee4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ee6:	4b13      	ldr	r3, [pc, #76]	@ (8001f34 <HAL_ADC_MspInit+0x10c>)
 8001ee8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001eee:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <HAL_ADC_MspInit+0x10c>)
 8001ef0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ef4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f34 <HAL_ADC_MspInit+0x10c>)
 8001ef8:	2220      	movs	r2, #32
 8001efa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001efc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f34 <HAL_ADC_MspInit+0x10c>)
 8001efe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f04:	480b      	ldr	r0, [pc, #44]	@ (8001f34 <HAL_ADC_MspInit+0x10c>)
 8001f06:	f003 ff7b 	bl	8005e00 <HAL_DMA_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 8001f10:	f7ff ff5c 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a07      	ldr	r2, [pc, #28]	@ (8001f34 <HAL_ADC_MspInit+0x10c>)
 8001f18:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f1a:	4a06      	ldr	r2, [pc, #24]	@ (8001f34 <HAL_ADC_MspInit+0x10c>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001f20:	bf00      	nop
 8001f22:	37b0      	adds	r7, #176	@ 0xb0
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	50040000 	.word	0x50040000
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	48000800 	.word	0x48000800
 8001f34:	200001ac 	.word	0x200001ac
 8001f38:	40020008 	.word	0x40020008

08001f3c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08c      	sub	sp, #48	@ 0x30
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 031c 	add.w	r3, r7, #28
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a52      	ldr	r2, [pc, #328]	@ (80020a4 <HAL_CAN_MspInit+0x168>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d14b      	bne.n	8001ff6 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001f5e:	4b52      	ldr	r3, [pc, #328]	@ (80020a8 <HAL_CAN_MspInit+0x16c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	3301      	adds	r3, #1
 8001f64:	4a50      	ldr	r2, [pc, #320]	@ (80020a8 <HAL_CAN_MspInit+0x16c>)
 8001f66:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001f68:	4b4f      	ldr	r3, [pc, #316]	@ (80020a8 <HAL_CAN_MspInit+0x16c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d10b      	bne.n	8001f88 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001f70:	4b4e      	ldr	r3, [pc, #312]	@ (80020ac <HAL_CAN_MspInit+0x170>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f74:	4a4d      	ldr	r2, [pc, #308]	@ (80020ac <HAL_CAN_MspInit+0x170>)
 8001f76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80020ac <HAL_CAN_MspInit+0x170>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f88:	4b48      	ldr	r3, [pc, #288]	@ (80020ac <HAL_CAN_MspInit+0x170>)
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8c:	4a47      	ldr	r2, [pc, #284]	@ (80020ac <HAL_CAN_MspInit+0x170>)
 8001f8e:	f043 0302 	orr.w	r3, r3, #2
 8001f92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f94:	4b45      	ldr	r3, [pc, #276]	@ (80020ac <HAL_CAN_MspInit+0x170>)
 8001f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001faa:	2301      	movs	r3, #1
 8001fac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001fb2:	2309      	movs	r3, #9
 8001fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb6:	f107 031c 	add.w	r3, r7, #28
 8001fba:	4619      	mov	r1, r3
 8001fbc:	483c      	ldr	r0, [pc, #240]	@ (80020b0 <HAL_CAN_MspInit+0x174>)
 8001fbe:	f004 f995 	bl	80062ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001fd4:	2309      	movs	r3, #9
 8001fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd8:	f107 031c 	add.w	r3, r7, #28
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4834      	ldr	r0, [pc, #208]	@ (80020b0 <HAL_CAN_MspInit+0x174>)
 8001fe0:	f004 f984 	bl	80062ec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2105      	movs	r1, #5
 8001fe8:	2014      	movs	r0, #20
 8001fea:	f003 fedf 	bl	8005dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001fee:	2014      	movs	r0, #20
 8001ff0:	f003 fef8 	bl	8005de4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001ff4:	e051      	b.n	800209a <HAL_CAN_MspInit+0x15e>
  else if(hcan->Instance==CAN2)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a2e      	ldr	r2, [pc, #184]	@ (80020b4 <HAL_CAN_MspInit+0x178>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d14c      	bne.n	800209a <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002000:	4b2a      	ldr	r3, [pc, #168]	@ (80020ac <HAL_CAN_MspInit+0x170>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002004:	4a29      	ldr	r2, [pc, #164]	@ (80020ac <HAL_CAN_MspInit+0x170>)
 8002006:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800200a:	6593      	str	r3, [r2, #88]	@ 0x58
 800200c:	4b27      	ldr	r3, [pc, #156]	@ (80020ac <HAL_CAN_MspInit+0x170>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002010:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002018:	4b23      	ldr	r3, [pc, #140]	@ (80020a8 <HAL_CAN_MspInit+0x16c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	3301      	adds	r3, #1
 800201e:	4a22      	ldr	r2, [pc, #136]	@ (80020a8 <HAL_CAN_MspInit+0x16c>)
 8002020:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002022:	4b21      	ldr	r3, [pc, #132]	@ (80020a8 <HAL_CAN_MspInit+0x16c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d10b      	bne.n	8002042 <HAL_CAN_MspInit+0x106>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800202a:	4b20      	ldr	r3, [pc, #128]	@ (80020ac <HAL_CAN_MspInit+0x170>)
 800202c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202e:	4a1f      	ldr	r2, [pc, #124]	@ (80020ac <HAL_CAN_MspInit+0x170>)
 8002030:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002034:	6593      	str	r3, [r2, #88]	@ 0x58
 8002036:	4b1d      	ldr	r3, [pc, #116]	@ (80020ac <HAL_CAN_MspInit+0x170>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002042:	4b1a      	ldr	r3, [pc, #104]	@ (80020ac <HAL_CAN_MspInit+0x170>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002046:	4a19      	ldr	r2, [pc, #100]	@ (80020ac <HAL_CAN_MspInit+0x170>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800204e:	4b17      	ldr	r3, [pc, #92]	@ (80020ac <HAL_CAN_MspInit+0x170>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800205a:	2320      	movs	r3, #32
 800205c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002062:	2301      	movs	r3, #1
 8002064:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 800206a:	2303      	movs	r3, #3
 800206c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206e:	f107 031c 	add.w	r3, r7, #28
 8002072:	4619      	mov	r1, r3
 8002074:	480e      	ldr	r0, [pc, #56]	@ (80020b0 <HAL_CAN_MspInit+0x174>)
 8002076:	f004 f939 	bl	80062ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800207a:	2340      	movs	r3, #64	@ 0x40
 800207c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002086:	2303      	movs	r3, #3
 8002088:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 800208a:	2308      	movs	r3, #8
 800208c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208e:	f107 031c 	add.w	r3, r7, #28
 8002092:	4619      	mov	r1, r3
 8002094:	4806      	ldr	r0, [pc, #24]	@ (80020b0 <HAL_CAN_MspInit+0x174>)
 8002096:	f004 f929 	bl	80062ec <HAL_GPIO_Init>
}
 800209a:	bf00      	nop
 800209c:	3730      	adds	r7, #48	@ 0x30
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40006400 	.word	0x40006400
 80020a8:	20000430 	.word	0x20000430
 80020ac:	40021000 	.word	0x40021000
 80020b0:	48000400 	.word	0x48000400
 80020b4:	40006800 	.word	0x40006800

080020b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b0ac      	sub	sp, #176	@ 0xb0
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020d0:	f107 0310 	add.w	r3, r7, #16
 80020d4:	228c      	movs	r2, #140	@ 0x8c
 80020d6:	2100      	movs	r1, #0
 80020d8:	4618      	mov	r0, r3
 80020da:	f00b fcd5 	bl	800da88 <memset>
  if(hi2c->Instance==I2C4)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a22      	ldr	r2, [pc, #136]	@ (800216c <HAL_I2C_MspInit+0xb4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d13c      	bne.n	8002162 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80020e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80020ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80020ee:	2300      	movs	r3, #0
 80020f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	4618      	mov	r0, r3
 80020f8:	f005 ffcc 	bl	8008094 <HAL_RCCEx_PeriphCLKConfig>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002102:	f7ff fe63 	bl	8001dcc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002106:	4b1a      	ldr	r3, [pc, #104]	@ (8002170 <HAL_I2C_MspInit+0xb8>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	4a19      	ldr	r2, [pc, #100]	@ (8002170 <HAL_I2C_MspInit+0xb8>)
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002112:	4b17      	ldr	r3, [pc, #92]	@ (8002170 <HAL_I2C_MspInit+0xb8>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800211e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002122:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002126:	2312      	movs	r3, #18
 8002128:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002132:	2303      	movs	r3, #3
 8002134:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8002138:	2303      	movs	r3, #3
 800213a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002142:	4619      	mov	r1, r3
 8002144:	480b      	ldr	r0, [pc, #44]	@ (8002174 <HAL_I2C_MspInit+0xbc>)
 8002146:	f004 f8d1 	bl	80062ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800214a:	4b09      	ldr	r3, [pc, #36]	@ (8002170 <HAL_I2C_MspInit+0xb8>)
 800214c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214e:	4a08      	ldr	r2, [pc, #32]	@ (8002170 <HAL_I2C_MspInit+0xb8>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002156:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <HAL_I2C_MspInit+0xb8>)
 8002158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8002162:	bf00      	nop
 8002164:	37b0      	adds	r7, #176	@ 0xb0
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40008400 	.word	0x40008400
 8002170:	40021000 	.word	0x40021000
 8002174:	48000400 	.word	0x48000400

08002178 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08a      	sub	sp, #40	@ 0x28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a3a      	ldr	r2, [pc, #232]	@ (8002280 <HAL_SPI_MspInit+0x108>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d16d      	bne.n	8002276 <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800219a:	4b3a      	ldr	r3, [pc, #232]	@ (8002284 <HAL_SPI_MspInit+0x10c>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219e:	4a39      	ldr	r2, [pc, #228]	@ (8002284 <HAL_SPI_MspInit+0x10c>)
 80021a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80021a6:	4b37      	ldr	r3, [pc, #220]	@ (8002284 <HAL_SPI_MspInit+0x10c>)
 80021a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b2:	4b34      	ldr	r3, [pc, #208]	@ (8002284 <HAL_SPI_MspInit+0x10c>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b6:	4a33      	ldr	r2, [pc, #204]	@ (8002284 <HAL_SPI_MspInit+0x10c>)
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021be:	4b31      	ldr	r3, [pc, #196]	@ (8002284 <HAL_SPI_MspInit+0x10c>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ca:	4b2e      	ldr	r3, [pc, #184]	@ (8002284 <HAL_SPI_MspInit+0x10c>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002284 <HAL_SPI_MspInit+0x10c>)
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002284 <HAL_SPI_MspInit+0x10c>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC12     ------> SPI3_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021f4:	2306      	movs	r3, #6
 80021f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4619      	mov	r1, r3
 80021fe:	4822      	ldr	r0, [pc, #136]	@ (8002288 <HAL_SPI_MspInit+0x110>)
 8002200:	f004 f874 	bl	80062ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002204:	2308      	movs	r3, #8
 8002206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002210:	2303      	movs	r3, #3
 8002212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002214:	2306      	movs	r3, #6
 8002216:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	4619      	mov	r1, r3
 800221e:	481b      	ldr	r0, [pc, #108]	@ (800228c <HAL_SPI_MspInit+0x114>)
 8002220:	f004 f864 	bl	80062ec <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8002224:	4b1a      	ldr	r3, [pc, #104]	@ (8002290 <HAL_SPI_MspInit+0x118>)
 8002226:	4a1b      	ldr	r2, [pc, #108]	@ (8002294 <HAL_SPI_MspInit+0x11c>)
 8002228:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 800222a:	4b19      	ldr	r3, [pc, #100]	@ (8002290 <HAL_SPI_MspInit+0x118>)
 800222c:	2203      	movs	r2, #3
 800222e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002230:	4b17      	ldr	r3, [pc, #92]	@ (8002290 <HAL_SPI_MspInit+0x118>)
 8002232:	2210      	movs	r2, #16
 8002234:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002236:	4b16      	ldr	r3, [pc, #88]	@ (8002290 <HAL_SPI_MspInit+0x118>)
 8002238:	2200      	movs	r2, #0
 800223a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800223c:	4b14      	ldr	r3, [pc, #80]	@ (8002290 <HAL_SPI_MspInit+0x118>)
 800223e:	2280      	movs	r2, #128	@ 0x80
 8002240:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002242:	4b13      	ldr	r3, [pc, #76]	@ (8002290 <HAL_SPI_MspInit+0x118>)
 8002244:	2200      	movs	r2, #0
 8002246:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002248:	4b11      	ldr	r3, [pc, #68]	@ (8002290 <HAL_SPI_MspInit+0x118>)
 800224a:	2200      	movs	r2, #0
 800224c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800224e:	4b10      	ldr	r3, [pc, #64]	@ (8002290 <HAL_SPI_MspInit+0x118>)
 8002250:	2200      	movs	r2, #0
 8002252:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002254:	4b0e      	ldr	r3, [pc, #56]	@ (8002290 <HAL_SPI_MspInit+0x118>)
 8002256:	2200      	movs	r2, #0
 8002258:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800225a:	480d      	ldr	r0, [pc, #52]	@ (8002290 <HAL_SPI_MspInit+0x118>)
 800225c:	f003 fdd0 	bl	8005e00 <HAL_DMA_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8002266:	f7ff fdb1 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a08      	ldr	r2, [pc, #32]	@ (8002290 <HAL_SPI_MspInit+0x118>)
 800226e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002270:	4a07      	ldr	r2, [pc, #28]	@ (8002290 <HAL_SPI_MspInit+0x118>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002276:	bf00      	nop
 8002278:	3728      	adds	r7, #40	@ 0x28
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40003c00 	.word	0x40003c00
 8002284:	40021000 	.word	0x40021000
 8002288:	48000800 	.word	0x48000800
 800228c:	48000400 	.word	0x48000400
 8002290:	200002fc 	.word	0x200002fc
 8002294:	4002041c 	.word	0x4002041c

08002298 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0d      	ldr	r2, [pc, #52]	@ (80022dc <HAL_TIM_Base_MspInit+0x44>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d113      	bne.n	80022d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80022aa:	4b0d      	ldr	r3, [pc, #52]	@ (80022e0 <HAL_TIM_Base_MspInit+0x48>)
 80022ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ae:	4a0c      	ldr	r2, [pc, #48]	@ (80022e0 <HAL_TIM_Base_MspInit+0x48>)
 80022b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80022b6:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <HAL_TIM_Base_MspInit+0x48>)
 80022b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 5, 0);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2105      	movs	r1, #5
 80022c6:	202c      	movs	r0, #44	@ 0x2c
 80022c8:	f003 fd70 	bl	8005dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 80022cc:	202c      	movs	r0, #44	@ 0x2c
 80022ce:	f003 fd89 	bl	8005de4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40013400 	.word	0x40013400
 80022e0:	40021000 	.word	0x40021000

080022e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b0ac      	sub	sp, #176	@ 0xb0
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022fc:	f107 0310 	add.w	r3, r7, #16
 8002300:	228c      	movs	r2, #140	@ 0x8c
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f00b fbbf 	bl	800da88 <memset>
  if(huart->Instance==UART4)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a25      	ldr	r2, [pc, #148]	@ (80023a4 <HAL_UART_MspInit+0xc0>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d143      	bne.n	800239c <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002314:	2308      	movs	r3, #8
 8002316:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002318:	2300      	movs	r3, #0
 800231a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	4618      	mov	r0, r3
 8002322:	f005 feb7 	bl	8008094 <HAL_RCCEx_PeriphCLKConfig>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800232c:	f7ff fd4e 	bl	8001dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002330:	4b1d      	ldr	r3, [pc, #116]	@ (80023a8 <HAL_UART_MspInit+0xc4>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002334:	4a1c      	ldr	r2, [pc, #112]	@ (80023a8 <HAL_UART_MspInit+0xc4>)
 8002336:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800233a:	6593      	str	r3, [r2, #88]	@ 0x58
 800233c:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <HAL_UART_MspInit+0xc4>)
 800233e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002340:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002348:	4b17      	ldr	r3, [pc, #92]	@ (80023a8 <HAL_UART_MspInit+0xc4>)
 800234a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234c:	4a16      	ldr	r2, [pc, #88]	@ (80023a8 <HAL_UART_MspInit+0xc4>)
 800234e:	f043 0304 	orr.w	r3, r3, #4
 8002352:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002354:	4b14      	ldr	r3, [pc, #80]	@ (80023a8 <HAL_UART_MspInit+0xc4>)
 8002356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002360:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002364:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002374:	2303      	movs	r3, #3
 8002376:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800237a:	2308      	movs	r3, #8
 800237c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002380:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002384:	4619      	mov	r1, r3
 8002386:	4809      	ldr	r0, [pc, #36]	@ (80023ac <HAL_UART_MspInit+0xc8>)
 8002388:	f003 ffb0 	bl	80062ec <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800238c:	2200      	movs	r2, #0
 800238e:	2105      	movs	r1, #5
 8002390:	2034      	movs	r0, #52	@ 0x34
 8002392:	f003 fd0b 	bl	8005dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002396:	2034      	movs	r0, #52	@ 0x34
 8002398:	f003 fd24 	bl	8005de4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 800239c:	bf00      	nop
 800239e:	37b0      	adds	r7, #176	@ 0xb0
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40004c00 	.word	0x40004c00
 80023a8:	40021000 	.word	0x40021000
 80023ac:	48000800 	.word	0x48000800

080023b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08e      	sub	sp, #56	@ 0x38
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80023be:	4b34      	ldr	r3, [pc, #208]	@ (8002490 <HAL_InitTick+0xe0>)
 80023c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c2:	4a33      	ldr	r2, [pc, #204]	@ (8002490 <HAL_InitTick+0xe0>)
 80023c4:	f043 0302 	orr.w	r3, r3, #2
 80023c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80023ca:	4b31      	ldr	r3, [pc, #196]	@ (8002490 <HAL_InitTick+0xe0>)
 80023cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023d6:	f107 0210 	add.w	r2, r7, #16
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f005 fdc5 	bl	8007f70 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80023ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d103      	bne.n	80023f8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80023f0:	f005 fd92 	bl	8007f18 <HAL_RCC_GetPCLK1Freq>
 80023f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80023f6:	e004      	b.n	8002402 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80023f8:	f005 fd8e 	bl	8007f18 <HAL_RCC_GetPCLK1Freq>
 80023fc:	4603      	mov	r3, r0
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002404:	4a23      	ldr	r2, [pc, #140]	@ (8002494 <HAL_InitTick+0xe4>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	0c9b      	lsrs	r3, r3, #18
 800240c:	3b01      	subs	r3, #1
 800240e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002410:	4b21      	ldr	r3, [pc, #132]	@ (8002498 <HAL_InitTick+0xe8>)
 8002412:	4a22      	ldr	r2, [pc, #136]	@ (800249c <HAL_InitTick+0xec>)
 8002414:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002416:	4b20      	ldr	r3, [pc, #128]	@ (8002498 <HAL_InitTick+0xe8>)
 8002418:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800241c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800241e:	4a1e      	ldr	r2, [pc, #120]	@ (8002498 <HAL_InitTick+0xe8>)
 8002420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002422:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002424:	4b1c      	ldr	r3, [pc, #112]	@ (8002498 <HAL_InitTick+0xe8>)
 8002426:	2200      	movs	r2, #0
 8002428:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242a:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <HAL_InitTick+0xe8>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002430:	4b19      	ldr	r3, [pc, #100]	@ (8002498 <HAL_InitTick+0xe8>)
 8002432:	2200      	movs	r2, #0
 8002434:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8002436:	4818      	ldr	r0, [pc, #96]	@ (8002498 <HAL_InitTick+0xe8>)
 8002438:	f006 fb99 	bl	8008b6e <HAL_TIM_Base_Init>
 800243c:	4603      	mov	r3, r0
 800243e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002442:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002446:	2b00      	cmp	r3, #0
 8002448:	d11b      	bne.n	8002482 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800244a:	4813      	ldr	r0, [pc, #76]	@ (8002498 <HAL_InitTick+0xe8>)
 800244c:	f006 fbe6 	bl	8008c1c <HAL_TIM_Base_Start_IT>
 8002450:	4603      	mov	r3, r0
 8002452:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002456:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800245a:	2b00      	cmp	r3, #0
 800245c:	d111      	bne.n	8002482 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800245e:	201d      	movs	r0, #29
 8002460:	f003 fcc0 	bl	8005de4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b0f      	cmp	r3, #15
 8002468:	d808      	bhi.n	800247c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800246a:	2200      	movs	r2, #0
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	201d      	movs	r0, #29
 8002470:	f003 fc9c 	bl	8005dac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002474:	4a0a      	ldr	r2, [pc, #40]	@ (80024a0 <HAL_InitTick+0xf0>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e002      	b.n	8002482 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002482:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002486:	4618      	mov	r0, r3
 8002488:	3738      	adds	r7, #56	@ 0x38
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
 8002494:	431bde83 	.word	0x431bde83
 8002498:	20000434 	.word	0x20000434
 800249c:	40000400 	.word	0x40000400
 80024a0:	20000004 	.word	0x20000004

080024a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <NMI_Handler+0x4>

080024ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b0:	bf00      	nop
 80024b2:	e7fd      	b.n	80024b0 <HardFault_Handler+0x4>

080024b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <MemManage_Handler+0x4>

080024bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024c0:	bf00      	nop
 80024c2:	e7fd      	b.n	80024c0 <BusFault_Handler+0x4>

080024c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c8:	bf00      	nop
 80024ca:	e7fd      	b.n	80024c8 <UsageFault_Handler+0x4>

080024cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alert1_Pin);
 80024de:	2004      	movs	r0, #4
 80024e0:	f004 f8c8 	bl	8006674 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024ec:	4802      	ldr	r0, [pc, #8]	@ (80024f8 <DMA1_Channel1_IRQHandler+0x10>)
 80024ee:	f003 fe1e 	bl	800612e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	200001ac 	.word	0x200001ac

080024fc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002500:	4802      	ldr	r0, [pc, #8]	@ (800250c <CAN1_RX0_IRQHandler+0x10>)
 8002502:	f003 f96c 	bl	80057de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200001f4 	.word	0x200001f4

08002510 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002514:	4802      	ldr	r0, [pc, #8]	@ (8002520 <TIM3_IRQHandler+0x10>)
 8002516:	f006 fbf1 	bl	8008cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000434 	.word	0x20000434

08002524 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002528:	4802      	ldr	r0, [pc, #8]	@ (8002534 <TIM8_UP_IRQHandler+0x10>)
 800252a:	f006 fbe7 	bl	8008cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000344 	.word	0x20000344

08002538 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800253c:	4802      	ldr	r0, [pc, #8]	@ (8002548 <UART4_IRQHandler+0x10>)
 800253e:	f007 f855 	bl	80095ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000390 	.word	0x20000390

0800254c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002550:	4802      	ldr	r0, [pc, #8]	@ (800255c <DMA2_Channel2_IRQHandler+0x10>)
 8002552:	f003 fdec 	bl	800612e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200002fc 	.word	0x200002fc

08002560 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002564:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <SystemInit+0x20>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256a:	4a05      	ldr	r2, [pc, #20]	@ (8002580 <SystemInit+0x20>)
 800256c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002570:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <_ZN7ILI9341C1Ess>:
/**
  * @brief   Constructor for ILI9341 class
  * @param   w: width of LCD
  * @param   h: height of LCD
  */
ILI9341::ILI9341(int16_t w, int16_t h):WIDTH(w),HEIGHT(h)
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
 8002590:	4613      	mov	r3, r2
 8002592:	803b      	strh	r3, [r7, #0]
 8002594:	4a45      	ldr	r2, [pc, #276]	@ (80026ac <_ZN7ILI9341C1Ess+0x128>)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	887a      	ldrh	r2, [r7, #2]
 800259e:	809a      	strh	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	883a      	ldrh	r2, [r7, #0]
 80025a4:	80da      	strh	r2, [r3, #6]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	81da      	strh	r2, [r3, #14]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	821a      	strh	r2, [r3, #16]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80025b8:	621a      	str	r2, [r3, #32]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80025c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80025c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80025d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80025d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80025e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80025e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80025f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2204      	movs	r2, #4
 80025f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a2c      	ldr	r2, [pc, #176]	@ (80026b0 <_ZN7ILI9341C1Ess+0x12c>)
 80025fe:	645a      	str	r2, [r3, #68]	@ 0x44
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a29      	ldr	r2, [pc, #164]	@ (80026b0 <_ZN7ILI9341C1Ess+0x12c>)
 800260c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a25      	ldr	r2, [pc, #148]	@ (80026b0 <_ZN7ILI9341C1Ess+0x12c>)
 800261a:	655a      	str	r2, [r3, #84]	@ 0x54
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002622:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a21      	ldr	r2, [pc, #132]	@ (80026b0 <_ZN7ILI9341C1Ess+0x12c>)
 800262a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2220      	movs	r2, #32
 8002630:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a1f      	ldr	r2, [pc, #124]	@ (80026b4 <_ZN7ILI9341C1Ess+0x130>)
 8002638:	665a      	str	r2, [r3, #100]	@ 0x64
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2210      	movs	r2, #16
 800263e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a1b      	ldr	r2, [pc, #108]	@ (80026b4 <_ZN7ILI9341C1Ess+0x130>)
 8002646:	66da      	str	r2, [r3, #108]	@ 0x6c
{
  text_size_ = 1;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	819a      	strh	r2, [r3, #12]
  width_ = WIDTH;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	811a      	strh	r2, [r3, #8]
  height_ = HEIGHT;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	815a      	strh	r2, [r3, #10]
  rotation = 0;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	771a      	strb	r2, [r3, #28]
  cursor_y = cursor_x = 0;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	825a      	strh	r2, [r3, #18]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	829a      	strh	r2, [r3, #20]
  textsize_x = textsize_y = 1;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	76da      	strb	r2, [r3, #27]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	7eda      	ldrb	r2, [r3, #27]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	769a      	strb	r2, [r3, #26]
  textcolor = textbgcolor = 0xFFFF;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800268c:	831a      	strh	r2, [r3, #24]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	8b1a      	ldrh	r2, [r3, #24]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	82da      	strh	r2, [r3, #22]
  wrap = true;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	775a      	strb	r2, [r3, #29]
}
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	0800e328 	.word	0x0800e328
 80026b0:	48000400 	.word	0x48000400
 80026b4:	48000800 	.word	0x48000800

080026b8 <_ZN7ILI9341D1Ev>:

ILI9341::~ILI9341()
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	4a04      	ldr	r2, [pc, #16]	@ (80026d4 <_ZN7ILI9341D1Ev+0x1c>)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	601a      	str	r2, [r3, #0]
{
  // TODO Auto-generated destructor stub
}
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	0800e328 	.word	0x0800e328

080026d8 <_ZN7ILI9341D0Ev>:
ILI9341::~ILI9341()
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
}
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ffe9 	bl	80026b8 <_ZN7ILI9341D1Ev>
 80026e6:	2170      	movs	r1, #112	@ 0x70
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f00b f9b5 	bl	800da58 <_ZdlPvj>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <_ZN7ILI93414InitEv>:

/**
  * @brief  Initialize the LCD.
  */
void ILI9341::Init()
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	6078      	str	r0, [r7, #4]
  // Write all control signals high
  HAL_GPIO_WritePin(Backlight_PWM_GPIO_Port_, Backlight_PWM_Pin_, GPIO_PIN_SET);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800270a:	2201      	movs	r2, #1
 800270c:	4619      	mov	r1, r3
 800270e:	f003 ff7f 	bl	8006610 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800271c:	2201      	movs	r2, #1
 800271e:	4619      	mov	r1, r3
 8002720:	f003 ff76 	bl	8006610 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800272e:	2201      	movs	r2, #1
 8002730:	4619      	mov	r1, r3
 8002732:	f003 ff6d 	bl	8006610 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002740:	2201      	movs	r2, #1
 8002742:	4619      	mov	r1, r3
 8002744:	f003 ff64 	bl	8006610 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_READ_GPIO_Port_, LCD_READ_Pin_, GPIO_PIN_SET);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002752:	2201      	movs	r2, #1
 8002754:	4619      	mov	r1, r3
 8002756:	f003 ff5b 	bl	8006610 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_SET);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002764:	2201      	movs	r2, #1
 8002766:	4619      	mov	r1, r3
 8002768:	f003 ff52 	bl	8006610 <HAL_GPIO_WritePin>

  // Hold reset pin
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_RESET);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002776:	2200      	movs	r2, #0
 8002778:	4619      	mov	r1, r3
 800277a:	f003 ff49 	bl	8006610 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800277e:	200a      	movs	r0, #10
 8002780:	f000 ffc8 	bl	8003714 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_SET);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800278e:	2201      	movs	r2, #1
 8002790:	4619      	mov	r1, r3
 8002792:	f003 ff3d 	bl	8006610 <HAL_GPIO_WritePin>

  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80027a0:	2200      	movs	r2, #0
 80027a2:	4619      	mov	r1, r3
 80027a4:	f003 ff34 	bl	8006610 <HAL_GPIO_WritePin>

  // Soft reset the LCD
  TransmitCmd(ILI9341_SWRESET);
 80027a8:	2101      	movs	r1, #1
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f8c4 	bl	8002938 <_ZN7ILI934111TransmitCmdEh>
  Transmit8bitData(0x00);
 80027b0:	2100      	movs	r1, #0
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f8d8 	bl	8002968 <_ZN7ILI934116Transmit8bitDataEh>
  HAL_Delay(50);
 80027b8:	2032      	movs	r0, #50	@ 0x32
 80027ba:	f000 ffab 	bl	8003714 <HAL_Delay>


  uint8_t cmd, x, numArgs;
  const uint8_t *addr = initcmd;
 80027be:	4b27      	ldr	r3, [pc, #156]	@ (800285c <_ZN7ILI93414InitEv+0x164>)
 80027c0:	613b      	str	r3, [r7, #16]
  while((cmd = *(addr++)) > 0)
 80027c2:	e027      	b.n	8002814 <_ZN7ILI93414InitEv+0x11c>
  {
    x = *(addr++);
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	613a      	str	r2, [r7, #16]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	73bb      	strb	r3, [r7, #14]
    numArgs = x & 0x7F;
 80027ce:	7bbb      	ldrb	r3, [r7, #14]
 80027d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027d4:	75fb      	strb	r3, [r7, #23]
    TransmitCmd(cmd);
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	4619      	mov	r1, r3
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f8ac 	bl	8002938 <_ZN7ILI934111TransmitCmdEh>
    while(numArgs--)
 80027e0:	e007      	b.n	80027f2 <_ZN7ILI93414InitEv+0xfa>
    {
      Transmit8bitData(*(addr++));
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	613a      	str	r2, [r7, #16]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	4619      	mov	r1, r3
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f8bb 	bl	8002968 <_ZN7ILI934116Transmit8bitDataEh>
    while(numArgs--)
 80027f2:	7dfb      	ldrb	r3, [r7, #23]
 80027f4:	1e5a      	subs	r2, r3, #1
 80027f6:	75fa      	strb	r2, [r7, #23]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	bf14      	ite	ne
 80027fc:	2301      	movne	r3, #1
 80027fe:	2300      	moveq	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1ed      	bne.n	80027e2 <_ZN7ILI93414InitEv+0xea>
    }
    if(x & 0x80)
 8002806:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800280a:	2b00      	cmp	r3, #0
 800280c:	da02      	bge.n	8002814 <_ZN7ILI93414InitEv+0x11c>
    {
      HAL_Delay(150);
 800280e:	2096      	movs	r0, #150	@ 0x96
 8002810:	f000 ff80 	bl	8003714 <HAL_Delay>
  while((cmd = *(addr++)) > 0)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	613a      	str	r2, [r7, #16]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	73fb      	strb	r3, [r7, #15]
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf14      	ite	ne
 8002824:	2301      	movne	r3, #1
 8002826:	2300      	moveq	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1ca      	bne.n	80027c4 <_ZN7ILI93414InitEv+0xcc>
    }
  }

  SetWindow(0, 0, width_-1, height_-1);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29b      	uxth	r3, r3
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	2200      	movs	r2, #0
 800284c:	2100      	movs	r1, #0
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f8f0 	bl	8002a34 <_ZN7ILI93419SetWindowEtttt>
}
 8002854:	bf00      	nop
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	0800e2fc 	.word	0x0800e2fc

08002860 <_ZN7ILI93415WriteEh>:

/**
  * @brief  Write data to LCD bus.
  */
inline void ILI9341::Write(uint8_t data)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
  // Put data on Bus
#if UI_USE_HAL
  HAL_GPIO_WritePin(LCD_DATA0_GPIO_Port_, LCD_DATA0_Pin_, static_cast<GPIO_PinState>(data & 0x01U) );
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	b2db      	uxtb	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	2101      	movs	r1, #1
 800287c:	f003 fec8 	bl	8006610 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA1_GPIO_Port_, LCD_DATA1_Pin_, static_cast<GPIO_PinState>(data & 0x02U) );
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	2102      	movs	r1, #2
 8002890:	f003 febe 	bl	8006610 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA2_GPIO_Port_, LCD_DATA2_Pin_, static_cast<GPIO_PinState>(data & 0x04U) );
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002898:	78fb      	ldrb	r3, [r7, #3]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	2104      	movs	r1, #4
 80028a4:	f003 feb4 	bl	8006610 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA3_GPIO_Port_, LCD_DATA3_Pin_, static_cast<GPIO_PinState>(data & 0x08U) );
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	2108      	movs	r1, #8
 80028b8:	f003 feaa 	bl	8006610 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA4_GPIO_Port_, LCD_DATA4_Pin_, static_cast<GPIO_PinState>(data & 0x10U) );
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80028c0:	78fb      	ldrb	r3, [r7, #3]
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	2110      	movs	r1, #16
 80028cc:	f003 fea0 	bl	8006610 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA5_GPIO_Port_, LCD_DATA5_Pin_, static_cast<GPIO_PinState>(data & 0x20U) );
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	f003 0320 	and.w	r3, r3, #32
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	2120      	movs	r1, #32
 80028e0:	f003 fe96 	bl	8006610 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA6_GPIO_Port_, LCD_DATA6_Pin_, static_cast<GPIO_PinState>(data & 0x40U) );
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	2140      	movs	r1, #64	@ 0x40
 80028f4:	f003 fe8c 	bl	8006610 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA7_GPIO_Port_, LCD_DATA7_Pin_, static_cast<GPIO_PinState>(data & 0x80U) );
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a18      	ldr	r0, [r3, #32]
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002902:	b2db      	uxtb	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	2180      	movs	r1, #128	@ 0x80
 8002908:	f003 fe82 	bl	8006610 <HAL_GPIO_WritePin>
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002916:	2200      	movs	r2, #0
 8002918:	4619      	mov	r1, r3
 800291a:	f003 fe79 	bl	8006610 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002928:	2201      	movs	r2, #1
 800292a:	4619      	mov	r1, r3
 800292c:	f003 fe70 	bl	8006610 <HAL_GPIO_WritePin>
  // Pulse Write
  LCD_WRITE_GPIO_Port_->BSRR = LCD_WRITE_Pin_; // changed from brr to bsrr... ok?
  LCD_WRITE_GPIO_Port_->BSRR = (uint32_t)LCD_WRITE_Pin_ << 16U;
#endif

}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <_ZN7ILI934111TransmitCmdEh>:
/**
  * @brief  Sends 8-bit command to LCD.
  * @param  cmd: 8-bit command to be sent.
  */
void ILI9341::TransmitCmd(uint8_t cmd)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	70fb      	strb	r3, [r7, #3]
  // D/C -> LOW
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_RESET);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800294e:	2200      	movs	r2, #0
 8002950:	4619      	mov	r1, r3
 8002952:	f003 fe5d 	bl	8006610 <HAL_GPIO_WritePin>

  Write(cmd);
 8002956:	78fb      	ldrb	r3, [r7, #3]
 8002958:	4619      	mov	r1, r3
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff ff80 	bl	8002860 <_ZN7ILI93415WriteEh>

  // TODO: Can this line be removed?
  // D/C -> HIGH
  // HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <_ZN7ILI934116Transmit8bitDataEh>:
/**
  * @brief  Sends 8-bit data to LCD.
  * @param  data: 8-bit data to be sent.
  */
void ILI9341::Transmit8bitData(uint8_t data)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	70fb      	strb	r3, [r7, #3]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800297e:	2201      	movs	r2, #1
 8002980:	4619      	mov	r1, r3
 8002982:	f003 fe45 	bl	8006610 <HAL_GPIO_WritePin>

  Write(data);
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	4619      	mov	r1, r3
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ff68 	bl	8002860 <_ZN7ILI93415WriteEh>
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <_ZN7ILI934117Transmit16bitDataEt>:
/**
  * @brief  Sends 16-bit data to LCD.
  * @param  data: 16-bit data to be sent to LCD.
  */
void ILI9341::Transmit16bitData(uint16_t data)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029ae:	2201      	movs	r2, #1
 80029b0:	4619      	mov	r1, r3
 80029b2:	f003 fe2d 	bl	8006610 <HAL_GPIO_WritePin>

  Write(static_cast<uint8_t>(data >> 8));
 80029b6:	887b      	ldrh	r3, [r7, #2]
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	4619      	mov	r1, r3
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ff4d 	bl	8002860 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 0));
 80029c6:	887b      	ldrh	r3, [r7, #2]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	4619      	mov	r1, r3
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ff47 	bl	8002860 <_ZN7ILI93415WriteEh>

}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <_ZN7ILI934117Transmit32bitDataEm>:
/**
  * @brief  Sends 32-bit data to LCD.
  * @param  data: 32-bit data to be sent to LCD.
  */
void ILI9341::Transmit32bitData(uint32_t data)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	6039      	str	r1, [r7, #0]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029ee:	2201      	movs	r2, #1
 80029f0:	4619      	mov	r1, r3
 80029f2:	f003 fe0d 	bl	8006610 <HAL_GPIO_WritePin>

  Write(static_cast<uint8_t>(data >> 24));
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	0e1b      	lsrs	r3, r3, #24
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	4619      	mov	r1, r3
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff ff2e 	bl	8002860 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 16));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	0c1b      	lsrs	r3, r3, #16
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff ff27 	bl	8002860 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 8 ));
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	0a1b      	lsrs	r3, r3, #8
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	4619      	mov	r1, r3
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ff20 	bl	8002860 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 0 ));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	4619      	mov	r1, r3
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ff1a 	bl	8002860 <_ZN7ILI93415WriteEh>

}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <_ZN7ILI93419SetWindowEtttt>:
  * @param  xe: x end coordinate. xe > xs.
  * @param  ye: y end coordinate. ye > ys.
  * @retval ILI9341_SUCCESS or ILI9341_ERROR.
  */
char ILI9341::SetWindow (uint16_t xs, uint16_t ys, uint16_t xe, uint16_t ye)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	4608      	mov	r0, r1
 8002a3e:	4611      	mov	r1, r2
 8002a40:	461a      	mov	r2, r3
 8002a42:	4603      	mov	r3, r0
 8002a44:	817b      	strh	r3, [r7, #10]
 8002a46:	460b      	mov	r3, r1
 8002a48:	813b      	strh	r3, [r7, #8]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	80fb      	strh	r3, [r7, #6]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002a58:	2200      	movs	r2, #0
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f003 fdd8 	bl	8006610 <HAL_GPIO_WritePin>

  // check if coordinates is out of range
  // TODO: Use >=, <= instead of >, < for width_ and height_?
  if ((xs > xe) || (xe > width_) ||
 8002a60:	897a      	ldrh	r2, [r7, #10]
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d80f      	bhi.n	8002a88 <_ZN7ILI93419SetWindowEtttt+0x54>
 8002a68:	88fb      	ldrh	r3, [r7, #6]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002a70:	4293      	cmp	r3, r2
 8002a72:	dc09      	bgt.n	8002a88 <_ZN7ILI93419SetWindowEtttt+0x54>
 8002a74:	893a      	ldrh	r2, [r7, #8]
 8002a76:	8b3b      	ldrh	r3, [r7, #24]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d805      	bhi.n	8002a88 <_ZN7ILI93419SetWindowEtttt+0x54>
      (ys > ye) || (ye > height_))
 8002a7c:	8b3b      	ldrh	r3, [r7, #24]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002a84:	4293      	cmp	r3, r2
 8002a86:	dd01      	ble.n	8002a8c <_ZN7ILI93419SetWindowEtttt+0x58>
  {
    // out of range
    return ILI9341_ERROR;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e021      	b.n	8002ad0 <_ZN7ILI93419SetWindowEtttt+0x9c>
  }

  // set column
  TransmitCmd(ILI9341_CASET);
 8002a8c:	212a      	movs	r1, #42	@ 0x2a
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7ff ff52 	bl	8002938 <_ZN7ILI934111TransmitCmdEh>
  // set column -> set column
  Transmit32bitData(((uint32_t) xs << 16) | xe);
 8002a94:	897b      	ldrh	r3, [r7, #10]
 8002a96:	041a      	lsls	r2, r3, #16
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f7ff ff9b 	bl	80029da <_ZN7ILI934117Transmit32bitDataEm>
  // set page
  TransmitCmd(ILI9341_PASET);
 8002aa4:	212b      	movs	r1, #43	@ 0x2b
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f7ff ff46 	bl	8002938 <_ZN7ILI934111TransmitCmdEh>
  // set page -> high byte first
  Transmit32bitData(((uint32_t) ys << 16) | ye);
 8002aac:	893b      	ldrh	r3, [r7, #8]
 8002aae:	041a      	lsls	r2, r3, #16
 8002ab0:	8b3b      	ldrh	r3, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f7ff ff8f 	bl	80029da <_ZN7ILI934117Transmit32bitDataEm>

  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f003 fda1 	bl	8006610 <HAL_GPIO_WritePin>
  // success
  return ILI9341_SUCCESS;
 8002ace:	2301      	movs	r3, #1
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <_ZN7ILI93419DrawPixelEttt>:
  * @param  y: y coordinate.
  * @param  color: 16-bit color.
  * @retval ILI9341_SUCCESS or ILI9341_ERROR.
  */
char ILI9341::DrawPixel (uint16_t x, uint16_t y, uint16_t color)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	817b      	strh	r3, [r7, #10]
 8002aea:	460b      	mov	r3, r1
 8002aec:	813b      	strh	r3, [r7, #8]
 8002aee:	4613      	mov	r3, r2
 8002af0:	80fb      	strh	r3, [r7, #6]
  // check dimension
  if ((x > width_) || (y > height_)) {
 8002af2:	897b      	ldrh	r3, [r7, #10]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002afa:	4293      	cmp	r3, r2
 8002afc:	dc05      	bgt.n	8002b0a <_ZN7ILI93419DrawPixelEttt+0x32>
 8002afe:	893b      	ldrh	r3, [r7, #8]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002b06:	4293      	cmp	r3, r2
 8002b08:	dd01      	ble.n	8002b0e <_ZN7ILI93419DrawPixelEttt+0x36>
    // error
    return ILI9341_ERROR;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	e00f      	b.n	8002b2e <_ZN7ILI93419DrawPixelEttt+0x56>
  }
  // set window
  SetWindow(x, y, x, y);
 8002b0e:	8978      	ldrh	r0, [r7, #10]
 8002b10:	893a      	ldrh	r2, [r7, #8]
 8002b12:	8979      	ldrh	r1, [r7, #10]
 8002b14:	893b      	ldrh	r3, [r7, #8]
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	4603      	mov	r3, r0
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f7ff ff8a 	bl	8002a34 <_ZN7ILI93419SetWindowEtttt>
  // draw pixel by 565 mode
  SendColor565(color, 1);
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	2201      	movs	r2, #1
 8002b24:	4619      	mov	r1, r3
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 f805 	bl	8002b36 <_ZN7ILI934112SendColor565Etm>
  // success
  return ILI9341_SUCCESS;
 8002b2c:	2301      	movs	r3, #1
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <_ZN7ILI934112SendColor565Etm>:

void ILI9341::SendColor565(uint16_t color, uint32_t count)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	817b      	strh	r3, [r7, #10]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002b4e:	2200      	movs	r2, #0
 8002b50:	4619      	mov	r1, r3
 8002b52:	f003 fd5d 	bl	8006610 <HAL_GPIO_WritePin>
  // access to RAM
  TransmitCmd(ILI9341_RAMWR);
 8002b56:	212c      	movs	r1, #44	@ 0x2c
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f7ff feed 	bl	8002938 <_ZN7ILI934111TransmitCmdEh>
  // counter
  while (count--) {
 8002b5e:	e004      	b.n	8002b6a <_ZN7ILI934112SendColor565Etm+0x34>
    // write color - first colors byte
    Transmit16bitData(color);
 8002b60:	897b      	ldrh	r3, [r7, #10]
 8002b62:	4619      	mov	r1, r3
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f7ff ff17 	bl	8002998 <_ZN7ILI934117Transmit16bitDataEt>
  while (count--) {
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	1e5a      	subs	r2, r3, #1
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf14      	ite	ne
 8002b74:	2301      	movne	r3, #1
 8002b76:	2300      	moveq	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <_ZN7ILI934112SendColor565Etm+0x2a>
  }
  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002b88:	2201      	movs	r2, #1
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f003 fd40 	bl	8006610 <HAL_GPIO_WritePin>
}
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <_ZN7ILI93415FloodEtm>:

void ILI9341::Flood(uint16_t color, uint32_t count)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	817b      	strh	r3, [r7, #10]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f003 fd2c 	bl	8006610 <HAL_GPIO_WritePin>
  // access to RAM
  TransmitCmd(ILI9341_RAMWR);
 8002bb8:	212c      	movs	r1, #44	@ 0x2c
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f7ff febc 	bl	8002938 <_ZN7ILI934111TransmitCmdEh>
  // counter
  // Upper and lower are the same
  if( (color & 0xFF) == (color >> 8))
 8002bc0:	897b      	ldrh	r3, [r7, #10]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	897a      	ldrh	r2, [r7, #10]
 8002bc6:	0a12      	lsrs	r2, r2, #8
 8002bc8:	b292      	uxth	r2, r2
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d13c      	bne.n	8002c48 <_ZN7ILI93415FloodEtm+0xb0>
  {
    count--;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	607b      	str	r3, [r7, #4]
    Transmit16bitData(color);
 8002bd4:	897b      	ldrh	r3, [r7, #10]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f7ff fedd 	bl	8002998 <_ZN7ILI934117Transmit16bitDataEt>
    while(count--)
 8002bde:	e023      	b.n	8002c28 <_ZN7ILI93415FloodEtm+0x90>
    {
#if UI_USE_HAL
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002bea:	2200      	movs	r2, #0
 8002bec:	4619      	mov	r1, r3
 8002bee:	f003 fd0f 	bl	8006610 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f003 fd06 	bl	8006610 <HAL_GPIO_WritePin>
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002c0e:	2200      	movs	r2, #0
 8002c10:	4619      	mov	r1, r3
 8002c12:	f003 fcfd 	bl	8006610 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002c20:	2201      	movs	r2, #1
 8002c22:	4619      	mov	r1, r3
 8002c24:	f003 fcf4 	bl	8006610 <HAL_GPIO_WritePin>
    while(count--)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	1e5a      	subs	r2, r3, #1
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	bf14      	ite	ne
 8002c32:	2301      	movne	r3, #1
 8002c34:	2300      	moveq	r3, #0
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1d1      	bne.n	8002be0 <_ZN7ILI93415FloodEtm+0x48>
 8002c3c:	e00e      	b.n	8002c5c <_ZN7ILI93415FloodEtm+0xc4>
  }
  else
  {
    while (count--)
    {
      Transmit16bitData(color);
 8002c3e:	897b      	ldrh	r3, [r7, #10]
 8002c40:	4619      	mov	r1, r3
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f7ff fea8 	bl	8002998 <_ZN7ILI934117Transmit16bitDataEt>
    while (count--)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	1e5a      	subs	r2, r3, #1
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	bf14      	ite	ne
 8002c52:	2301      	movne	r3, #1
 8002c54:	2300      	moveq	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1f0      	bne.n	8002c3e <_ZN7ILI93415FloodEtm+0xa6>
    }
  }
  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002c66:	2201      	movs	r2, #1
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f003 fcd1 	bl	8006610 <HAL_GPIO_WritePin>
}
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <_ZN7ILI934111ClearScreenEt>:

void ILI9341::ClearScreen(uint16_t color)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af02      	add	r7, sp, #8
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	807b      	strh	r3, [r7, #2]
  // set whole window
  SetWindow(0, 0, width_, height_);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	4613      	mov	r3, r2
 8002c96:	2200      	movs	r2, #0
 8002c98:	2100      	movs	r1, #0
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff feca 	bl	8002a34 <_ZN7ILI93419SetWindowEtttt>
  // draw individual pixels
  Flood(color, ILI9341_CACHE_MEM);
 8002ca0:	887b      	ldrh	r3, [r7, #2]
 8002ca2:	f44f 3296 	mov.w	r2, #76800	@ 0x12c00
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff ff75 	bl	8002b98 <_ZN7ILI93415FloodEtm>
  // Update background color
  textbgcolor = color;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	887a      	ldrh	r2, [r7, #2]
 8002cb2:	831a      	strh	r2, [r3, #24]
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_ZN7ILI934113DrawFastHLineEtttt>:

void ILI9341::DrawFastHLine(uint16_t x, uint16_t y, uint16_t length,
                                    uint16_t color) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	4608      	mov	r0, r1
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4603      	mov	r3, r0
 8002ccc:	817b      	strh	r3, [r7, #10]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	813b      	strh	r3, [r7, #8]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	80fb      	strh	r3, [r7, #6]
  int16_t x2;

  // Initial off-screen clipping
  if ((length <= 0) || (y < 0) || (y >= height_) || (x >= width_) ||
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d016      	beq.n	8002d0a <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
 8002cdc:	893b      	ldrh	r3, [r7, #8]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	da10      	bge.n	8002d0a <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
 8002ce8:	897b      	ldrh	r3, [r7, #10]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	da0a      	bge.n	8002d0a <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
      ((x2 = (x + length - 1)) < 0))
 8002cf4:	897a      	ldrh	r2, [r7, #10]
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	82fb      	strh	r3, [r7, #22]
  if ((length <= 0) || (y < 0) || (y >= height_) || (x >= width_) ||
 8002d02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	da01      	bge.n	8002d0e <_ZN7ILI934113DrawFastHLineEtttt+0x52>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <_ZN7ILI934113DrawFastHLineEtttt+0x54>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d123      	bne.n	8002d5c <_ZN7ILI934113DrawFastHLineEtttt+0xa0>

  if (x < 0) { // Clip left
    length += x;
    x = 0;
  }
  if (x2 >= width_) { // Clip right
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	db0c      	blt.n	8002d3c <_ZN7ILI934113DrawFastHLineEtttt+0x80>
    x2 = width_ - 1;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	82fb      	strh	r3, [r7, #22]
    length = x2 - x + 1;
 8002d30:	8afa      	ldrh	r2, [r7, #22]
 8002d32:	897b      	ldrh	r3, [r7, #10]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3301      	adds	r3, #1
 8002d3a:	80fb      	strh	r3, [r7, #6]
  }

  SetWindow(x, y, x2, y);
 8002d3c:	8af8      	ldrh	r0, [r7, #22]
 8002d3e:	893a      	ldrh	r2, [r7, #8]
 8002d40:	8979      	ldrh	r1, [r7, #10]
 8002d42:	893b      	ldrh	r3, [r7, #8]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	4603      	mov	r3, r0
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f7ff fe73 	bl	8002a34 <_ZN7ILI93419SetWindowEtttt>
  Flood(color, length);
 8002d4e:	88fa      	ldrh	r2, [r7, #6]
 8002d50:	8c3b      	ldrh	r3, [r7, #32]
 8002d52:	4619      	mov	r1, r3
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f7ff ff1f 	bl	8002b98 <_ZN7ILI93415FloodEtm>
 8002d5a:	e000      	b.n	8002d5e <_ZN7ILI934113DrawFastHLineEtttt+0xa2>
    return;
 8002d5c:	bf00      	nop
}
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <_ZN7ILI934113DrawFastVLineEtttt>:

void ILI9341::DrawFastVLine(uint16_t x, uint16_t y, uint16_t length,
                                    uint16_t color) {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	4611      	mov	r1, r2
 8002d70:	461a      	mov	r2, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	817b      	strh	r3, [r7, #10]
 8002d76:	460b      	mov	r3, r1
 8002d78:	813b      	strh	r3, [r7, #8]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	80fb      	strh	r3, [r7, #6]
  int16_t y2;

  // Initial off-screen clipping
  if ((length <= 0) || (x < 0) || (x >= width_) || (y >= height_) ||
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d016      	beq.n	8002db2 <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
 8002d84:	897b      	ldrh	r3, [r7, #10]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	da10      	bge.n	8002db2 <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
 8002d90:	893b      	ldrh	r3, [r7, #8]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	da0a      	bge.n	8002db2 <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
      ((y2 = (y + length - 1)) < 0))
 8002d9c:	893a      	ldrh	r2, [r7, #8]
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	4413      	add	r3, r2
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	82fb      	strh	r3, [r7, #22]
  if ((length <= 0) || (x < 0) || (x >= width_) || (y >= height_) ||
 8002daa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	da01      	bge.n	8002db6 <_ZN7ILI934113DrawFastVLineEtttt+0x52>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <_ZN7ILI934113DrawFastVLineEtttt+0x54>
 8002db6:	2300      	movs	r3, #0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d123      	bne.n	8002e04 <_ZN7ILI934113DrawFastVLineEtttt+0xa0>
    return;
  if (y < 0) { // Clip top
    length += y;
    y = 0;
  }
  if (y2 >= height_) { // Clip bottom
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002dc2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	db0c      	blt.n	8002de4 <_ZN7ILI934113DrawFastVLineEtttt+0x80>
    y2 = height_ - 1;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	82fb      	strh	r3, [r7, #22]
    length = y2 - y + 1;
 8002dd8:	8afa      	ldrh	r2, [r7, #22]
 8002dda:	893b      	ldrh	r3, [r7, #8]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	80fb      	strh	r3, [r7, #6]
  }

  SetWindow(x, y, x, y2);
 8002de4:	8afb      	ldrh	r3, [r7, #22]
 8002de6:	8978      	ldrh	r0, [r7, #10]
 8002de8:	893a      	ldrh	r2, [r7, #8]
 8002dea:	8979      	ldrh	r1, [r7, #10]
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	4603      	mov	r3, r0
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f7ff fe1f 	bl	8002a34 <_ZN7ILI93419SetWindowEtttt>
  Flood(color, length);
 8002df6:	88fa      	ldrh	r2, [r7, #6]
 8002df8:	8c3b      	ldrh	r3, [r7, #32]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f7ff fecb 	bl	8002b98 <_ZN7ILI93415FloodEtm>
 8002e02:	e000      	b.n	8002e06 <_ZN7ILI934113DrawFastVLineEtttt+0xa2>
    return;
 8002e04:	bf00      	nop
}
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <_ZN7ILI934111SetRotationEh>:

void ILI9341::SetRotation(uint8_t x) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	70fb      	strb	r3, [r7, #3]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002e22:	2200      	movs	r2, #0
 8002e24:	4619      	mov	r1, r3
 8002e26:	f003 fbf3 	bl	8006610 <HAL_GPIO_WritePin>
  rotation = x % 4; // can't be higher than 3
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	771a      	strb	r2, [r3, #28]
  switch (rotation) {
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	7f1b      	ldrb	r3, [r3, #28]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d832      	bhi.n	8002ea4 <_ZN7ILI934111SetRotationEh+0x98>
 8002e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e44 <_ZN7ILI934111SetRotationEh+0x38>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002e55 	.word	0x08002e55
 8002e48:	08002e69 	.word	0x08002e69
 8002e4c:	08002e7d 	.word	0x08002e7d
 8002e50:	08002e91 	.word	0x08002e91
  case 0:
    x = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8002e54:	2348      	movs	r3, #72	@ 0x48
 8002e56:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTWIDTH;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	22f0      	movs	r2, #240	@ 0xf0
 8002e5c:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTHEIGHT;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002e64:	815a      	strh	r2, [r3, #10]
    break;
 8002e66:	e01d      	b.n	8002ea4 <_ZN7ILI934111SetRotationEh+0x98>
  case 1:
    x = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8002e68:	2328      	movs	r3, #40	@ 0x28
 8002e6a:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTHEIGHT;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002e72:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTWIDTH;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	22f0      	movs	r2, #240	@ 0xf0
 8002e78:	815a      	strh	r2, [r3, #10]
    break;
 8002e7a:	e013      	b.n	8002ea4 <_ZN7ILI934111SetRotationEh+0x98>
  case 2:
    x = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8002e7c:	2388      	movs	r3, #136	@ 0x88
 8002e7e:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTWIDTH;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	22f0      	movs	r2, #240	@ 0xf0
 8002e84:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTHEIGHT;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002e8c:	815a      	strh	r2, [r3, #10]
    break;
 8002e8e:	e009      	b.n	8002ea4 <_ZN7ILI934111SetRotationEh+0x98>
  case 3:
    x = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8002e90:	23e8      	movs	r3, #232	@ 0xe8
 8002e92:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTHEIGHT;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002e9a:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTWIDTH;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	22f0      	movs	r2, #240	@ 0xf0
 8002ea0:	815a      	strh	r2, [r3, #10]
    break;
 8002ea2:	bf00      	nop
  }
  TransmitCmd(ILI9341_MADCTL); // MADCTL
 8002ea4:	2136      	movs	r1, #54	@ 0x36
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff fd46 	bl	8002938 <_ZN7ILI934111TransmitCmdEh>
  Transmit8bitData(x);
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff fd59 	bl	8002968 <_ZN7ILI934116Transmit8bitDataEh>
  // For 9341, init default full-screen address window:
  SetWindow(0, 0, width_ - 1, height_ - 1); // CS_IDLE happens here
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff fdac 	bl	8002a34 <_ZN7ILI93419SetWindowEtttt>
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <_ZN7ILI934111SetTextSizeEh>:

void ILI9341::SetTextSize(uint8_t size)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	70fb      	strb	r3, [r7, #3]
  text_size_ = size;
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	b21a      	sxth	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	819a      	strh	r2, [r3, #12]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <_ZN7ILI93418DrawCharEsshth>:

void ILI9341::DrawChar(int16_t x, int16_t y, unsigned char c,
    uint16_t color, uint8_t size)
{
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b089      	sub	sp, #36	@ 0x24
 8002f08:	af04      	add	r7, sp, #16
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	4608      	mov	r0, r1
 8002f0e:	4611      	mov	r1, r2
 8002f10:	461a      	mov	r2, r3
 8002f12:	4603      	mov	r3, r0
 8002f14:	817b      	strh	r3, [r7, #10]
 8002f16:	460b      	mov	r3, r1
 8002f18:	813b      	strh	r3, [r7, #8]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	71fb      	strb	r3, [r7, #7]
  DrawChar(x, y, c, color, textbgcolor, size, size);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8b1b      	ldrh	r3, [r3, #24]
 8002f22:	79fc      	ldrb	r4, [r7, #7]
 8002f24:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8002f28:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002f2c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002f30:	9203      	str	r2, [sp, #12]
 8002f32:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002f36:	9202      	str	r2, [sp, #8]
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	8c3b      	ldrh	r3, [r7, #32]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	4623      	mov	r3, r4
 8002f40:	4602      	mov	r2, r0
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f804 	bl	8002f50 <_ZN7ILI93418DrawCharEsshtthh>
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd90      	pop	{r4, r7, pc}

08002f50 <_ZN7ILI93418DrawCharEsshtthh>:

void ILI9341::DrawChar(int16_t x, int16_t y, unsigned char c,
    uint16_t color, uint16_t bg, uint8_t size_x,
    uint8_t size_y)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b089      	sub	sp, #36	@ 0x24
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	4608      	mov	r0, r1
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4603      	mov	r3, r0
 8002f60:	817b      	strh	r3, [r7, #10]
 8002f62:	460b      	mov	r3, r1
 8002f64:	813b      	strh	r3, [r7, #8]
 8002f66:	4613      	mov	r3, r2
 8002f68:	71fb      	strb	r3, [r7, #7]
  for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	75fb      	strb	r3, [r7, #23]
 8002f6e:	e0a8      	b.n	80030c2 <_ZN7ILI93418DrawCharEsshtthh+0x172>
      uint8_t line = font[c * 5 + i];
 8002f70:	79fa      	ldrb	r2, [r7, #7]
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	441a      	add	r2, r3
 8002f78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	4a6e      	ldr	r2, [pc, #440]	@ (8003138 <_ZN7ILI93418DrawCharEsshtthh+0x1e8>)
 8002f80:	5cd3      	ldrb	r3, [r2, r3]
 8002f82:	75bb      	strb	r3, [r7, #22]
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8002f84:	2300      	movs	r3, #0
 8002f86:	757b      	strb	r3, [r7, #21]
 8002f88:	e090      	b.n	80030ac <_ZN7ILI93418DrawCharEsshtthh+0x15c>
        if (line & 1) {
 8002f8a:	7dbb      	ldrb	r3, [r7, #22]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d03f      	beq.n	8003014 <_ZN7ILI93418DrawCharEsshtthh+0xc4>
          if (size_x == 1 && size_y == 1)
 8002f94:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d114      	bne.n	8002fc6 <_ZN7ILI93418DrawCharEsshtthh+0x76>
 8002f9c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d110      	bne.n	8002fc6 <_ZN7ILI93418DrawCharEsshtthh+0x76>
            DrawPixel(x + i, y + j, color);
 8002fa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	897b      	ldrh	r3, [r7, #10]
 8002fac:	4413      	add	r3, r2
 8002fae:	b299      	uxth	r1, r3
 8002fb0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	893b      	ldrh	r3, [r7, #8]
 8002fb8:	4413      	add	r3, r2
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f7ff fd8a 	bl	8002ad8 <_ZN7ILI93419DrawPixelEttt>
 8002fc4:	e069      	b.n	800309a <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          else
            FillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 8002fc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	fb12 f303 	smulbb	r3, r2, r3
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	897b      	ldrh	r3, [r7, #10]
 8002fda:	4413      	add	r3, r2
 8002fdc:	b299      	uxth	r1, r3
 8002fde:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	fb12 f303 	smulbb	r3, r2, r3
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	893b      	ldrh	r3, [r7, #8]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	b298      	uxth	r0, r3
 8002ff6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002ffa:	b29c      	uxth	r4, r3
 8002ffc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003000:	b29b      	uxth	r3, r3
 8003002:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003004:	9201      	str	r2, [sp, #4]
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	4623      	mov	r3, r4
 800300a:	4602      	mov	r2, r0
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f8fa 	bl	8003206 <_ZN7ILI93418FillRectEttttt>
 8003012:	e042      	b.n	800309a <_ZN7ILI93418DrawCharEsshtthh+0x14a>
                          color);
        } else if (bg != color) {
 8003014:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003016:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003018:	429a      	cmp	r2, r3
 800301a:	d03e      	beq.n	800309a <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          if (size_x == 1 && size_y == 1)
 800301c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003020:	2b01      	cmp	r3, #1
 8003022:	d114      	bne.n	800304e <_ZN7ILI93418DrawCharEsshtthh+0xfe>
 8003024:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003028:	2b01      	cmp	r3, #1
 800302a:	d110      	bne.n	800304e <_ZN7ILI93418DrawCharEsshtthh+0xfe>
            DrawPixel(x + i, y + j, bg);
 800302c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003030:	b29a      	uxth	r2, r3
 8003032:	897b      	ldrh	r3, [r7, #10]
 8003034:	4413      	add	r3, r2
 8003036:	b299      	uxth	r1, r3
 8003038:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800303c:	b29a      	uxth	r2, r3
 800303e:	893b      	ldrh	r3, [r7, #8]
 8003040:	4413      	add	r3, r2
 8003042:	b29a      	uxth	r2, r3
 8003044:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f7ff fd46 	bl	8002ad8 <_ZN7ILI93419DrawPixelEttt>
 800304c:	e025      	b.n	800309a <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          else
            FillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 800304e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003052:	b29a      	uxth	r2, r3
 8003054:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003058:	b29b      	uxth	r3, r3
 800305a:	fb12 f303 	smulbb	r3, r2, r3
 800305e:	b29a      	uxth	r2, r3
 8003060:	897b      	ldrh	r3, [r7, #10]
 8003062:	4413      	add	r3, r2
 8003064:	b299      	uxth	r1, r3
 8003066:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800306a:	b29a      	uxth	r2, r3
 800306c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003070:	b29b      	uxth	r3, r3
 8003072:	fb12 f303 	smulbb	r3, r2, r3
 8003076:	b29a      	uxth	r2, r3
 8003078:	893b      	ldrh	r3, [r7, #8]
 800307a:	4413      	add	r3, r2
 800307c:	b298      	uxth	r0, r3
 800307e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003082:	b29c      	uxth	r4, r3
 8003084:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003088:	b29b      	uxth	r3, r3
 800308a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800308c:	9201      	str	r2, [sp, #4]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	4623      	mov	r3, r4
 8003092:	4602      	mov	r2, r0
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 f8b6 	bl	8003206 <_ZN7ILI93418FillRectEttttt>
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 800309a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	3301      	adds	r3, #1
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	757b      	strb	r3, [r7, #21]
 80030a6:	7dbb      	ldrb	r3, [r7, #22]
 80030a8:	085b      	lsrs	r3, r3, #1
 80030aa:	75bb      	strb	r3, [r7, #22]
 80030ac:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80030b0:	2b07      	cmp	r3, #7
 80030b2:	f77f af6a 	ble.w	8002f8a <_ZN7ILI93418DrawCharEsshtthh+0x3a>
  for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 80030b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	75fb      	strb	r3, [r7, #23]
 80030c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	f77f af52 	ble.w	8002f70 <_ZN7ILI93418DrawCharEsshtthh+0x20>
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
 80030cc:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80030ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d02d      	beq.n	8003130 <_ZN7ILI93418DrawCharEsshtthh+0x1e0>
      if (size_x == 1 && size_y == 1)
 80030d4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d10e      	bne.n	80030fa <_ZN7ILI93418DrawCharEsshtthh+0x1aa>
 80030dc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d10a      	bne.n	80030fa <_ZN7ILI93418DrawCharEsshtthh+0x1aa>
        DrawFastVLine(x + 5, y, 8, bg);
 80030e4:	897b      	ldrh	r3, [r7, #10]
 80030e6:	3305      	adds	r3, #5
 80030e8:	b299      	uxth	r1, r3
 80030ea:	893a      	ldrh	r2, [r7, #8]
 80030ec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	2308      	movs	r3, #8
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f7ff fe36 	bl	8002d64 <_ZN7ILI934113DrawFastVLineEtttt>
      else
        FillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    }
}
 80030f8:	e01a      	b.n	8003130 <_ZN7ILI93418DrawCharEsshtthh+0x1e0>
        FillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 80030fa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80030fe:	b29b      	uxth	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	0092      	lsls	r2, r2, #2
 8003104:	4413      	add	r3, r2
 8003106:	b29a      	uxth	r2, r3
 8003108:	897b      	ldrh	r3, [r7, #10]
 800310a:	4413      	add	r3, r2
 800310c:	b299      	uxth	r1, r3
 800310e:	8938      	ldrh	r0, [r7, #8]
 8003110:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003114:	b29c      	uxth	r4, r3
 8003116:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800311a:	b29b      	uxth	r3, r3
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	b29b      	uxth	r3, r3
 8003120:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003122:	9201      	str	r2, [sp, #4]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	4623      	mov	r3, r4
 8003128:	4602      	mov	r2, r0
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f86b 	bl	8003206 <_ZN7ILI93418FillRectEttttt>
}
 8003130:	bf00      	nop
 8003132:	371c      	adds	r7, #28
 8003134:	46bd      	mov	sp, r7
 8003136:	bd90      	pop	{r4, r7, pc}
 8003138:	0800ddfc 	.word	0x0800ddfc

0800313c <_ZN7ILI93418DrawTextEttPKct>:

void ILI9341::DrawText(uint16_t x, uint16_t y, const char *str, uint16_t color)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af02      	add	r7, sp, #8
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	607b      	str	r3, [r7, #4]
 8003146:	460b      	mov	r3, r1
 8003148:	817b      	strh	r3, [r7, #10]
 800314a:	4613      	mov	r3, r2
 800314c:	813b      	strh	r3, [r7, #8]
  // NOTE: Characters are 6x8 (wxh)
    uint8_t TempChar;

    /* Set area back to span the entire LCD */
    SetWindow(0, 0, width_ - 1, height_ - 1);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29b      	uxth	r3, r3
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	4613      	mov	r3, r2
 800316a:	2200      	movs	r2, #0
 800316c:	2100      	movs	r1, #0
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f7ff fc60 	bl	8002a34 <_ZN7ILI93419SetWindowEtttt>
    do
    {
        TempChar = *str++;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	75fb      	strb	r3, [r7, #23]
        DrawChar( x, y, TempChar, color, text_size_);
 800317e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003182:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	7df8      	ldrb	r0, [r7, #23]
 8003190:	9301      	str	r3, [sp, #4]
 8003192:	8c3b      	ldrh	r3, [r7, #32]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	4603      	mov	r3, r0
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7ff feb3 	bl	8002f04 <_ZN7ILI93418DrawCharEsshth>
        if( x < width_ - 1 - 8)
 800319e:	897a      	ldrh	r2, [r7, #10]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031a6:	3b09      	subs	r3, #9
 80031a8:	429a      	cmp	r2, r3
 80031aa:	da0c      	bge.n	80031c6 <_ZN7ILI93418DrawTextEttPKct+0x8a>
        {
            x += (6 * text_size_);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	0052      	lsls	r2, r2, #1
 80031b8:	4413      	add	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	897b      	ldrh	r3, [r7, #10]
 80031c0:	4413      	add	r3, r2
 80031c2:	817b      	strh	r3, [r7, #10]
 80031c4:	e016      	b.n	80031f4 <_ZN7ILI93418DrawTextEttPKct+0xb8>
        }
        else if ( y < height_ - 1 - 16)
 80031c6:	893a      	ldrh	r2, [r7, #8]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80031ce:	3b11      	subs	r3, #17
 80031d0:	429a      	cmp	r2, r3
 80031d2:	da0b      	bge.n	80031ec <_ZN7ILI93418DrawTextEttPKct+0xb0>
        {
            x = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	817b      	strh	r3, [r7, #10]
            y += (8 * text_size_);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	893b      	ldrh	r3, [r7, #8]
 80031e6:	4413      	add	r3, r2
 80031e8:	813b      	strh	r3, [r7, #8]
 80031ea:	e003      	b.n	80031f4 <_ZN7ILI93418DrawTextEttPKct+0xb8>
        }
        else
        {
            x = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	817b      	strh	r3, [r7, #10]
            y = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	813b      	strh	r3, [r7, #8]
        }
    }
    while ( *str != 0 );
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1bb      	bne.n	8003174 <_ZN7ILI93418DrawTextEttPKct+0x38>
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <_ZN7ILI93418FillRectEttttt>:
  DrawFastVLine(x, y, h, color);
  DrawFastVLine(x + w - 1, y, h, color);
}

void ILI9341::FillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b088      	sub	sp, #32
 800320a:	af02      	add	r7, sp, #8
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	4608      	mov	r0, r1
 8003210:	4611      	mov	r1, r2
 8003212:	461a      	mov	r2, r3
 8003214:	4603      	mov	r3, r0
 8003216:	817b      	strh	r3, [r7, #10]
 8003218:	460b      	mov	r3, r1
 800321a:	813b      	strh	r3, [r7, #8]
 800321c:	4613      	mov	r3, r2
 800321e:	80fb      	strh	r3, [r7, #6]
  int16_t x2, y2;

  // Initial off-screen clipping
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d024      	beq.n	8003270 <_ZN7ILI93418FillRectEttttt+0x6a>
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 8003226:	8c3b      	ldrh	r3, [r7, #32]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d021      	beq.n	8003270 <_ZN7ILI93418FillRectEttttt+0x6a>
 800322c:	897b      	ldrh	r3, [r7, #10]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003234:	4293      	cmp	r3, r2
 8003236:	da1b      	bge.n	8003270 <_ZN7ILI93418FillRectEttttt+0x6a>
 8003238:	893b      	ldrh	r3, [r7, #8]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8003240:	4293      	cmp	r3, r2
 8003242:	da15      	bge.n	8003270 <_ZN7ILI93418FillRectEttttt+0x6a>
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8003244:	897a      	ldrh	r2, [r7, #10]
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	4413      	add	r3, r2
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29b      	uxth	r3, r3
 8003250:	82fb      	strh	r3, [r7, #22]
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 8003252:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003256:	2b00      	cmp	r3, #0
 8003258:	db0a      	blt.n	8003270 <_ZN7ILI93418FillRectEttttt+0x6a>
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 800325a:	893a      	ldrh	r2, [r7, #8]
 800325c:	8c3b      	ldrh	r3, [r7, #32]
 800325e:	4413      	add	r3, r2
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b29b      	uxth	r3, r3
 8003266:	82bb      	strh	r3, [r7, #20]
 8003268:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800326c:	2b00      	cmp	r3, #0
 800326e:	da01      	bge.n	8003274 <_ZN7ILI93418FillRectEttttt+0x6e>
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <_ZN7ILI93418FillRectEttttt+0x70>
 8003274:	2300      	movs	r3, #0
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 8003276:	2b00      	cmp	r3, #0
 8003278:	d13a      	bne.n	80032f0 <_ZN7ILI93418FillRectEttttt+0xea>
  }
  if (y1 < 0) { // Clip top
    h += y1;
    y1 = 0;
  }
  if (x2 >= width_) { // Clip right
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003280:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003284:	429a      	cmp	r2, r3
 8003286:	db0c      	blt.n	80032a2 <_ZN7ILI93418FillRectEttttt+0x9c>
    x2 = width_ - 1;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b29b      	uxth	r3, r3
 8003294:	82fb      	strh	r3, [r7, #22]
    w = x2 - x1 + 1;
 8003296:	8afa      	ldrh	r2, [r7, #22]
 8003298:	897b      	ldrh	r3, [r7, #10]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	b29b      	uxth	r3, r3
 800329e:	3301      	adds	r3, #1
 80032a0:	80fb      	strh	r3, [r7, #6]
  }
  if (y2 >= height_) { // Clip bottom
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80032a8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	db0c      	blt.n	80032ca <_ZN7ILI93418FillRectEttttt+0xc4>
    y2 = height_ - 1;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	82bb      	strh	r3, [r7, #20]
    h = y2 - y1 + 1;
 80032be:	8aba      	ldrh	r2, [r7, #20]
 80032c0:	893b      	ldrh	r3, [r7, #8]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3301      	adds	r3, #1
 80032c8:	843b      	strh	r3, [r7, #32]
  }

  SetWindow(x1, y1, x2, y2);
 80032ca:	8af8      	ldrh	r0, [r7, #22]
 80032cc:	8abb      	ldrh	r3, [r7, #20]
 80032ce:	893a      	ldrh	r2, [r7, #8]
 80032d0:	8979      	ldrh	r1, [r7, #10]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	4603      	mov	r3, r0
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7ff fbac 	bl	8002a34 <_ZN7ILI93419SetWindowEtttt>
  Flood(color, (uint32_t)w * (uint32_t)h);
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	8c3a      	ldrh	r2, [r7, #32]
 80032e0:	fb03 f202 	mul.w	r2, r3, r2
 80032e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032e6:	4619      	mov	r1, r3
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f7ff fc55 	bl	8002b98 <_ZN7ILI93415FloodEtm>
 80032ee:	e000      	b.n	80032f2 <_ZN7ILI93418FillRectEttttt+0xec>
    return;
 80032f0:	bf00      	nop
}
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <_ZN7ILI934110FillCircleEtttt>:
void ILI9341::FillCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	4608      	mov	r0, r1
 8003302:	4611      	mov	r1, r2
 8003304:	461a      	mov	r2, r3
 8003306:	4603      	mov	r3, r0
 8003308:	817b      	strh	r3, [r7, #10]
 800330a:	460b      	mov	r3, r1
 800330c:	813b      	strh	r3, [r7, #8]
 800330e:	4613      	mov	r3, r2
 8003310:	80fb      	strh	r3, [r7, #6]
    int16_t x = 0, y = r;
 8003312:	2300      	movs	r3, #0
 8003314:	82fb      	strh	r3, [r7, #22]
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	82bb      	strh	r3, [r7, #20]
    int16_t d = 1 - r;
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	f1c3 0301 	rsb	r3, r3, #1
 8003320:	b29b      	uxth	r3, r3
 8003322:	827b      	strh	r3, [r7, #18]

    // Draw initial center line
    DrawFastHLine(x0 - r, y0, 2 * r + 1, color);
 8003324:	897a      	ldrh	r2, [r7, #10]
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	b299      	uxth	r1, r3
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	b29b      	uxth	r3, r3
 8003332:	3301      	adds	r3, #1
 8003334:	b298      	uxth	r0, r3
 8003336:	893a      	ldrh	r2, [r7, #8]
 8003338:	8c3b      	ldrh	r3, [r7, #32]
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	4603      	mov	r3, r0
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f7ff fcbc 	bl	8002cbc <_ZN7ILI934113DrawFastHLineEtttt>

    while (y >= x) {
 8003344:	e073      	b.n	800342e <_ZN7ILI934110FillCircleEtttt+0x136>
        // Draw horizontal spans
        DrawFastHLine(x0 - x, y0 + y, 2 * x + 1, color);
 8003346:	8afb      	ldrh	r3, [r7, #22]
 8003348:	897a      	ldrh	r2, [r7, #10]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	b299      	uxth	r1, r3
 800334e:	8aba      	ldrh	r2, [r7, #20]
 8003350:	893b      	ldrh	r3, [r7, #8]
 8003352:	4413      	add	r3, r2
 8003354:	b29a      	uxth	r2, r3
 8003356:	8afb      	ldrh	r3, [r7, #22]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	b29b      	uxth	r3, r3
 800335c:	3301      	adds	r3, #1
 800335e:	b298      	uxth	r0, r3
 8003360:	8c3b      	ldrh	r3, [r7, #32]
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	4603      	mov	r3, r0
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f7ff fca8 	bl	8002cbc <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - x, y0 - y, 2 * x + 1, color);
 800336c:	8afb      	ldrh	r3, [r7, #22]
 800336e:	897a      	ldrh	r2, [r7, #10]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	b299      	uxth	r1, r3
 8003374:	8abb      	ldrh	r3, [r7, #20]
 8003376:	893a      	ldrh	r2, [r7, #8]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	b29a      	uxth	r2, r3
 800337c:	8afb      	ldrh	r3, [r7, #22]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	b29b      	uxth	r3, r3
 8003382:	3301      	adds	r3, #1
 8003384:	b298      	uxth	r0, r3
 8003386:	8c3b      	ldrh	r3, [r7, #32]
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	4603      	mov	r3, r0
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f7ff fc95 	bl	8002cbc <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - y, y0 + x, 2 * y + 1, color);
 8003392:	8abb      	ldrh	r3, [r7, #20]
 8003394:	897a      	ldrh	r2, [r7, #10]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	b299      	uxth	r1, r3
 800339a:	8afa      	ldrh	r2, [r7, #22]
 800339c:	893b      	ldrh	r3, [r7, #8]
 800339e:	4413      	add	r3, r2
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	8abb      	ldrh	r3, [r7, #20]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3301      	adds	r3, #1
 80033aa:	b298      	uxth	r0, r3
 80033ac:	8c3b      	ldrh	r3, [r7, #32]
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	4603      	mov	r3, r0
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f7ff fc82 	bl	8002cbc <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - y, y0 - x, 2 * y + 1, color);
 80033b8:	8abb      	ldrh	r3, [r7, #20]
 80033ba:	897a      	ldrh	r2, [r7, #10]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	b299      	uxth	r1, r3
 80033c0:	8afb      	ldrh	r3, [r7, #22]
 80033c2:	893a      	ldrh	r2, [r7, #8]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	8abb      	ldrh	r3, [r7, #20]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3301      	adds	r3, #1
 80033d0:	b298      	uxth	r0, r3
 80033d2:	8c3b      	ldrh	r3, [r7, #32]
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	4603      	mov	r3, r0
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f7ff fc6f 	bl	8002cbc <_ZN7ILI934113DrawFastHLineEtttt>

        x++;
 80033de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3301      	adds	r3, #1
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	82fb      	strh	r3, [r7, #22]
        if (d < 0) {
 80033ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	da09      	bge.n	8003406 <_ZN7ILI934110FillCircleEtttt+0x10e>
            d += 2 * x + 1;
 80033f2:	8afb      	ldrh	r3, [r7, #22]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	8a7b      	ldrh	r3, [r7, #18]
 80033fa:	4413      	add	r3, r2
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3301      	adds	r3, #1
 8003400:	b29b      	uxth	r3, r3
 8003402:	827b      	strh	r3, [r7, #18]
 8003404:	e013      	b.n	800342e <_ZN7ILI934110FillCircleEtttt+0x136>
        } else {
            y--;
 8003406:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29b      	uxth	r3, r3
 8003410:	82bb      	strh	r3, [r7, #20]
            d += 2 * (x - y) + 1;
 8003412:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003416:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	b29b      	uxth	r3, r3
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	8a7b      	ldrh	r3, [r7, #18]
 8003424:	4413      	add	r3, r2
 8003426:	b29b      	uxth	r3, r3
 8003428:	3301      	adds	r3, #1
 800342a:	b29b      	uxth	r3, r3
 800342c:	827b      	strh	r3, [r7, #18]
    while (y >= x) {
 800342e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003432:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003436:	429a      	cmp	r2, r3
 8003438:	da85      	bge.n	8003346 <_ZN7ILI934110FillCircleEtttt+0x4e>
        }
    }
}
 800343a:	bf00      	nop
 800343c:	bf00      	nop
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <TCAL9538RSVR_INIT>:
*/



uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	4611      	mov	r1, r2
 8003450:	461a      	mov	r2, r3
 8003452:	460b      	mov	r3, r1
 8003454:	71fb      	strb	r3, [r7, #7]
 8003456:	4613      	mov	r3, r2
 8003458:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;
	dev->input = direction_bitMask;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	79ba      	ldrb	r2, [r7, #6]
 8003462:	719a      	strb	r2, [r3, #6]


    dev->i2cHandle = i2cHandle;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	601a      	str	r2, [r3, #0]
    dev->portValues = 0;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress<<1);
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	b25b      	sxtb	r3, r3
 800347e:	f063 031f 	orn	r3, r3, #31
 8003482:	b25b      	sxtb	r3, r3
 8003484:	b2da      	uxtb	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	711a      	strb	r2, [r3, #4]
    uint8_t hold_bitMask = direction_bitMask;
 800348a:	79bb      	ldrb	r3, [r7, #6]
 800348c:	757b      	strb	r3, [r7, #21]

    status = TCAL9538RSVR_SetDirection(dev, &hold_bitMask);
 800348e:	f107 0315 	add.w	r3, r7, #21
 8003492:	4619      	mov	r1, r3
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f83b 	bl	8003510 <TCAL9538RSVR_SetDirection>
 800349a:	4603      	mov	r3, r0
 800349c:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 800349e:	7dbb      	ldrb	r3, [r7, #22]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf14      	ite	ne
 80034a4:	2301      	movne	r3, #1
 80034a6:	2300      	moveq	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	7dfb      	ldrb	r3, [r7, #23]
 80034ae:	4413      	add	r3, r2
 80034b0:	75fb      	strb	r3, [r7, #23]

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 80034b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034b6:	4619      	mov	r1, r3
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f838 	bl	800352e <TCAL9538RSVR_SetInterrupts>
 80034be:	4603      	mov	r3, r0
 80034c0:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 80034c2:	7dbb      	ldrb	r3, [r7, #22]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	bf14      	ite	ne
 80034c8:	2301      	movne	r3, #1
 80034ca:	2300      	moveq	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	461a      	mov	r2, r3
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
 80034d2:	4413      	add	r3, r2
 80034d4:	75fb      	strb	r3, [r7, #23]

    // if all pins are inputs, invert all pins
    if (direction_bitMask == 0xFF) {
 80034d6:	79bb      	ldrb	r3, [r7, #6]
 80034d8:	2bff      	cmp	r3, #255	@ 0xff
 80034da:	d114      	bne.n	8003506 <TCAL9538RSVR_INIT+0xc2>
        uint8_t full = 0xFF;
 80034dc:	23ff      	movs	r3, #255	@ 0xff
 80034de:	753b      	strb	r3, [r7, #20]
        status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_INVERSION, &full);
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	461a      	mov	r2, r3
 80034e6:	2102      	movs	r1, #2
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f894 	bl	8003616 <TCAL9538RSVR_WriteRegister>
 80034ee:	4603      	mov	r3, r0
 80034f0:	75bb      	strb	r3, [r7, #22]
        errNum += (status != HAL_OK);
 80034f2:	7dbb      	ldrb	r3, [r7, #22]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf14      	ite	ne
 80034f8:	2301      	movne	r3, #1
 80034fa:	2300      	moveq	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	7dfb      	ldrb	r3, [r7, #23]
 8003502:	4413      	add	r3, r2
 8003504:	75fb      	strb	r3, [r7, #23]
    }
    

    return (errNum);
 8003506:	7dfb      	ldrb	r3, [r7, #23]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t* bitMask)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, bitMask);
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	2103      	movs	r1, #3
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f879 	bl	8003616 <TCAL9538RSVR_WriteRegister>
 8003524:	4603      	mov	r3, r0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	460b      	mov	r3, r1
 8003538:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 800353a:	1cfb      	adds	r3, r7, #3
 800353c:	461a      	mov	r2, r3
 800353e:	2145      	movs	r1, #69	@ 0x45
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f868 	bl	8003616 <TCAL9538RSVR_WriteRegister>
 8003546:	4603      	mov	r3, r0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    uint8_t triggeredInterrupts = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	737b      	strb	r3, [r7, #13]


    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 8003560:	f107 030d 	add.w	r3, r7, #13
 8003564:	461a      	mov	r2, r3
 8003566:	2146      	movs	r1, #70	@ 0x46
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f837 	bl	80035dc <TCAL9538RSVR_ReadRegister>
 800356e:	4603      	mov	r3, r0
 8003570:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 8003572:	7bbb      	ldrb	r3, [r7, #14]
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	4413      	add	r3, r2
 8003584:	73fb      	strb	r3, [r7, #15]

    // Read updated input values
    status = TCAL9538RSVR_ReadInput(dev, &dev->portValues);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3305      	adds	r3, #5
 800358a:	4619      	mov	r1, r3
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f807 	bl	80035a0 <TCAL9538RSVR_ReadInput>
 8003592:	4603      	mov	r3, r0
 8003594:	73bb      	strb	r3, [r7, #14]


    return (errNum);
 8003596:	7bfb      	ldrb	r3, [r7, #15]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <TCAL9538RSVR_ReadInput>:




HAL_StatusTypeDef TCAL9538RSVR_ReadInput(TCAL9538RSVR* dev, uint8_t *data)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, data);
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	2100      	movs	r1, #0
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f814 	bl	80035dc <TCAL9538RSVR_ReadRegister>
 80035b4:	4603      	mov	r3, r0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <TCAL9538RSVR_SetOutput>:
HAL_StatusTypeDef TCAL9538RSVR_SetOutput(TCAL9538RSVR* dev, uint8_t *data)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	2101      	movs	r1, #1
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f822 	bl	8003616 <TCAL9538RSVR_WriteRegister>
 80035d2:	4603      	mov	r3, r0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <TCAL9538RSVR_ReadRegister>:

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af04      	add	r7, sp, #16
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	460b      	mov	r3, r1
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	791b      	ldrb	r3, [r3, #4]
 80035f2:	4619      	mov	r1, r3
 80035f4:	7afb      	ldrb	r3, [r7, #11]
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	f04f 33ff 	mov.w	r3, #4294967295
 80035fc:	9302      	str	r3, [sp, #8]
 80035fe:	2301      	movs	r3, #1
 8003600:	9301      	str	r3, [sp, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	2301      	movs	r3, #1
 8003608:	f003 f9fc 	bl	8006a04 <HAL_I2C_Mem_Read>
 800360c:	4603      	mov	r3, r0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b088      	sub	sp, #32
 800361a:	af04      	add	r7, sp, #16
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	460b      	mov	r3, r1
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Write(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	791b      	ldrb	r3, [r3, #4]
 800362c:	4619      	mov	r1, r3
 800362e:	7afb      	ldrb	r3, [r7, #11]
 8003630:	b29a      	uxth	r2, r3
 8003632:	f04f 33ff 	mov.w	r3, #4294967295
 8003636:	9302      	str	r3, [sp, #8]
 8003638:	2301      	movs	r3, #1
 800363a:	9301      	str	r3, [sp, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	2301      	movs	r3, #1
 8003642:	f003 f8cb 	bl	80067dc <HAL_I2C_Mem_Write>
 8003646:	4603      	mov	r3, r0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003650:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003688 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003654:	f7fe ff84 	bl	8002560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003658:	480c      	ldr	r0, [pc, #48]	@ (800368c <LoopForever+0x6>)
  ldr r1, =_edata
 800365a:	490d      	ldr	r1, [pc, #52]	@ (8003690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800365c:	4a0d      	ldr	r2, [pc, #52]	@ (8003694 <LoopForever+0xe>)
  movs r3, #0
 800365e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003660:	e002      	b.n	8003668 <LoopCopyDataInit>

08003662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003666:	3304      	adds	r3, #4

08003668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800366a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800366c:	d3f9      	bcc.n	8003662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800366e:	4a0a      	ldr	r2, [pc, #40]	@ (8003698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003670:	4c0a      	ldr	r4, [pc, #40]	@ (800369c <LoopForever+0x16>)
  movs r3, #0
 8003672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003674:	e001      	b.n	800367a <LoopFillZerobss>

08003676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003678:	3204      	adds	r2, #4

0800367a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800367a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800367c:	d3fb      	bcc.n	8003676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800367e:	f00a fa61 	bl	800db44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003682:	f7fd ff3d 	bl	8001500 <main>

08003686 <LoopForever>:

LoopForever:
    b LoopForever
 8003686:	e7fe      	b.n	8003686 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003688:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800368c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003690:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003694:	0800e348 	.word	0x0800e348
  ldr r2, =_sbss
 8003698:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800369c:	20002b1c 	.word	0x20002b1c

080036a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036a0:	e7fe      	b.n	80036a0 <ADC1_2_IRQHandler>

080036a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ac:	2003      	movs	r0, #3
 80036ae:	f002 fb72 	bl	8005d96 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036b2:	200f      	movs	r0, #15
 80036b4:	f7fe fe7c 	bl	80023b0 <HAL_InitTick>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	71fb      	strb	r3, [r7, #7]
 80036c2:	e001      	b.n	80036c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036c4:	f7fe fb88 	bl	8001dd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036c8:	79fb      	ldrb	r3, [r7, #7]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036d8:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <HAL_IncTick+0x20>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	4b06      	ldr	r3, [pc, #24]	@ (80036f8 <HAL_IncTick+0x24>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4413      	add	r3, r2
 80036e4:	4a04      	ldr	r2, [pc, #16]	@ (80036f8 <HAL_IncTick+0x24>)
 80036e6:	6013      	str	r3, [r2, #0]
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	20000008 	.word	0x20000008
 80036f8:	20000480 	.word	0x20000480

080036fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003700:	4b03      	ldr	r3, [pc, #12]	@ (8003710 <HAL_GetTick+0x14>)
 8003702:	681b      	ldr	r3, [r3, #0]
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	20000480 	.word	0x20000480

08003714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800371c:	f7ff ffee 	bl	80036fc <HAL_GetTick>
 8003720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372c:	d005      	beq.n	800373a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800372e:	4b0a      	ldr	r3, [pc, #40]	@ (8003758 <HAL_Delay+0x44>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4413      	add	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800373a:	bf00      	nop
 800373c:	f7ff ffde 	bl	80036fc <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	429a      	cmp	r2, r3
 800374a:	d8f7      	bhi.n	800373c <HAL_Delay+0x28>
  {
  }
}
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20000008 	.word	0x20000008

0800375c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	431a      	orrs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	609a      	str	r2, [r3, #8]
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	609a      	str	r2, [r3, #8]
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	3360      	adds	r3, #96	@ 0x60
 80037d6:	461a      	mov	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4b08      	ldr	r3, [pc, #32]	@ (8003808 <LL_ADC_SetOffset+0x44>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80037fc:	bf00      	nop
 80037fe:	371c      	adds	r7, #28
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	03fff000 	.word	0x03fff000

0800380c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3360      	adds	r3, #96	@ 0x60
 800381a:	461a      	mov	r2, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	3360      	adds	r3, #96	@ 0x60
 8003848:	461a      	mov	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	431a      	orrs	r2, r3
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003862:	bf00      	nop
 8003864:	371c      	adds	r7, #28
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	615a      	str	r2, [r3, #20]
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80038a8:	2301      	movs	r3, #1
 80038aa:	e000      	b.n	80038ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b087      	sub	sp, #28
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3330      	adds	r3, #48	@ 0x30
 80038ca:	461a      	mov	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	0a1b      	lsrs	r3, r3, #8
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	4413      	add	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f003 031f 	and.w	r3, r3, #31
 80038e4:	211f      	movs	r1, #31
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	43db      	mvns	r3, r3
 80038ec:	401a      	ands	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	0e9b      	lsrs	r3, r3, #26
 80038f2:	f003 011f 	and.w	r1, r3, #31
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003900:	431a      	orrs	r2, r3
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003912:	b480      	push	{r7}
 8003914:	b087      	sub	sp, #28
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	3314      	adds	r3, #20
 8003922:	461a      	mov	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	0e5b      	lsrs	r3, r3, #25
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	4413      	add	r3, r2
 8003930:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	0d1b      	lsrs	r3, r3, #20
 800393a:	f003 031f 	and.w	r3, r3, #31
 800393e:	2107      	movs	r1, #7
 8003940:	fa01 f303 	lsl.w	r3, r1, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	401a      	ands	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	0d1b      	lsrs	r3, r3, #20
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	fa01 f303 	lsl.w	r3, r1, r3
 8003956:	431a      	orrs	r2, r3
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800395c:	bf00      	nop
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003980:	43db      	mvns	r3, r3
 8003982:	401a      	ands	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f003 0318 	and.w	r3, r3, #24
 800398a:	4908      	ldr	r1, [pc, #32]	@ (80039ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800398c:	40d9      	lsrs	r1, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	400b      	ands	r3, r1
 8003992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003996:	431a      	orrs	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	0007ffff 	.word	0x0007ffff

080039b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 031f 	and.w	r3, r3, #31
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80039dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6093      	str	r3, [r2, #8]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a04:	d101      	bne.n	8003a0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003a28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a2c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a54:	d101      	bne.n	8003a5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a7c:	f043 0201 	orr.w	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003aa0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003aa4:	f043 0202 	orr.w	r2, r3, #2
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <LL_ADC_IsEnabled+0x18>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <LL_ADC_IsEnabled+0x1a>
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d101      	bne.n	8003af6 <LL_ADC_IsDisableOngoing+0x18>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <LL_ADC_IsDisableOngoing+0x1a>
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b18:	f043 0204 	orr.w	r2, r3, #4
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b40:	f043 0210 	orr.w	r2, r3, #16
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d101      	bne.n	8003b6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b8a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b8e:	f043 0220 	orr.w	r2, r3, #32
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d101      	bne.n	8003bba <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bc8:	b590      	push	{r4, r7, lr}
 8003bca:	b089      	sub	sp, #36	@ 0x24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e133      	b.n	8003e4a <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7fe f919 	bl	8001e28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fef1 	bl	80039f0 <LL_ADC_IsDeepPowerDownEnabled>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d004      	beq.n	8003c1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff fed7 	bl	80039cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff ff0c 	bl	8003a40 <LL_ADC_IsInternalRegulatorEnabled>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d115      	bne.n	8003c5a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fef0 	bl	8003a18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c38:	4b86      	ldr	r3, [pc, #536]	@ (8003e54 <HAL_ADC_Init+0x28c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	099b      	lsrs	r3, r3, #6
 8003c3e:	4a86      	ldr	r2, [pc, #536]	@ (8003e58 <HAL_ADC_Init+0x290>)
 8003c40:	fba2 2303 	umull	r2, r3, r2, r3
 8003c44:	099b      	lsrs	r3, r3, #6
 8003c46:	3301      	adds	r3, #1
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c4c:	e002      	b.n	8003c54 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f9      	bne.n	8003c4e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff feee 	bl	8003a40 <LL_ADC_IsInternalRegulatorEnabled>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10d      	bne.n	8003c86 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6e:	f043 0210 	orr.w	r2, r3, #16
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c7a:	f043 0201 	orr.w	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff ff62 	bl	8003b54 <LL_ADC_REG_IsConversionOngoing>
 8003c90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f040 80cc 	bne.w	8003e38 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f040 80c8 	bne.w	8003e38 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003cb0:	f043 0202 	orr.w	r2, r3, #2
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff fefb 	bl	8003ab8 <LL_ADC_IsEnabled>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d115      	bne.n	8003cf4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cc8:	4864      	ldr	r0, [pc, #400]	@ (8003e5c <HAL_ADC_Init+0x294>)
 8003cca:	f7ff fef5 	bl	8003ab8 <LL_ADC_IsEnabled>
 8003cce:	4604      	mov	r4, r0
 8003cd0:	4863      	ldr	r0, [pc, #396]	@ (8003e60 <HAL_ADC_Init+0x298>)
 8003cd2:	f7ff fef1 	bl	8003ab8 <LL_ADC_IsEnabled>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	431c      	orrs	r4, r3
 8003cda:	4862      	ldr	r0, [pc, #392]	@ (8003e64 <HAL_ADC_Init+0x29c>)
 8003cdc:	f7ff feec 	bl	8003ab8 <LL_ADC_IsEnabled>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	4323      	orrs	r3, r4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d105      	bne.n	8003cf4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	4619      	mov	r1, r3
 8003cee:	485e      	ldr	r0, [pc, #376]	@ (8003e68 <HAL_ADC_Init+0x2a0>)
 8003cf0:	f7ff fd34 	bl	800375c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	7e5b      	ldrb	r3, [r3, #25]
 8003cf8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003cfe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003d04:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003d0a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d12:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d106      	bne.n	8003d30 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	3b01      	subs	r3, #1
 8003d28:	045b      	lsls	r3, r3, #17
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d009      	beq.n	8003d4c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d44:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	4b46      	ldr	r3, [pc, #280]	@ (8003e6c <HAL_ADC_Init+0x2a4>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	69b9      	ldr	r1, [r7, #24]
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff ff1c 	bl	8003ba2 <LL_ADC_INJ_IsConversionOngoing>
 8003d6a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d140      	bne.n	8003df4 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d13d      	bne.n	8003df4 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	7e1b      	ldrb	r3, [r3, #24]
 8003d80:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d82:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d8a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d9a:	f023 0306 	bic.w	r3, r3, #6
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	69b9      	ldr	r1, [r7, #24]
 8003da4:	430b      	orrs	r3, r1
 8003da6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d118      	bne.n	8003de4 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003dbc:	f023 0304 	bic.w	r3, r3, #4
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003dc8:	4311      	orrs	r1, r2
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003dce:	4311      	orrs	r1, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0201 	orr.w	r2, r2, #1
 8003de0:	611a      	str	r2, [r3, #16]
 8003de2:	e007      	b.n	8003df4 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0201 	bic.w	r2, r2, #1
 8003df2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d10c      	bne.n	8003e16 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e02:	f023 010f 	bic.w	r1, r3, #15
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	1e5a      	subs	r2, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e14:	e007      	b.n	8003e26 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 020f 	bic.w	r2, r2, #15
 8003e24:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2a:	f023 0303 	bic.w	r3, r3, #3
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e36:	e007      	b.n	8003e48 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3c:	f043 0210 	orr.w	r2, r3, #16
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e48:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3724      	adds	r7, #36	@ 0x24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd90      	pop	{r4, r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000000 	.word	0x20000000
 8003e58:	053e2d63 	.word	0x053e2d63
 8003e5c:	50040000 	.word	0x50040000
 8003e60:	50040100 	.word	0x50040100
 8003e64:	50040200 	.word	0x50040200
 8003e68:	50040300 	.word	0x50040300
 8003e6c:	fff0c007 	.word	0xfff0c007

08003e70 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e7c:	4853      	ldr	r0, [pc, #332]	@ (8003fcc <HAL_ADC_Start_DMA+0x15c>)
 8003e7e:	f7ff fd97 	bl	80039b0 <LL_ADC_GetMultimode>
 8003e82:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff fe63 	bl	8003b54 <LL_ADC_REG_IsConversionOngoing>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f040 8093 	bne.w	8003fbc <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_ADC_Start_DMA+0x34>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e08e      	b.n	8003fc2 <HAL_ADC_Start_DMA+0x152>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a47      	ldr	r2, [pc, #284]	@ (8003fd0 <HAL_ADC_Start_DMA+0x160>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d008      	beq.n	8003ec8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2b05      	cmp	r3, #5
 8003ec0:	d002      	beq.n	8003ec8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	2b09      	cmp	r3, #9
 8003ec6:	d172      	bne.n	8003fae <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 fdcb 	bl	8004a64 <ADC_Enable>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003ed2:	7dfb      	ldrb	r3, [r7, #23]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d165      	bne.n	8003fa4 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003edc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ee0:	f023 0301 	bic.w	r3, r3, #1
 8003ee4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a38      	ldr	r2, [pc, #224]	@ (8003fd4 <HAL_ADC_Start_DMA+0x164>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d002      	beq.n	8003efc <HAL_ADC_Start_DMA+0x8c>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	e000      	b.n	8003efe <HAL_ADC_Start_DMA+0x8e>
 8003efc:	4b36      	ldr	r3, [pc, #216]	@ (8003fd8 <HAL_ADC_Start_DMA+0x168>)
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	6812      	ldr	r2, [r2, #0]
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d002      	beq.n	8003f0c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d105      	bne.n	8003f18 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d006      	beq.n	8003f32 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f28:	f023 0206 	bic.w	r2, r3, #6
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f30:	e002      	b.n	8003f38 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f3c:	4a27      	ldr	r2, [pc, #156]	@ (8003fdc <HAL_ADC_Start_DMA+0x16c>)
 8003f3e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f44:	4a26      	ldr	r2, [pc, #152]	@ (8003fe0 <HAL_ADC_Start_DMA+0x170>)
 8003f46:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f4c:	4a25      	ldr	r2, [pc, #148]	@ (8003fe4 <HAL_ADC_Start_DMA+0x174>)
 8003f4e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	221c      	movs	r2, #28
 8003f56:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0210 	orr.w	r2, r2, #16
 8003f6e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3340      	adds	r3, #64	@ 0x40
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f001 ffee 	bl	8005f70 <HAL_DMA_Start_IT>
 8003f94:	4603      	mov	r3, r0
 8003f96:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff fdb1 	bl	8003b04 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003fa2:	e00d      	b.n	8003fc0 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8003fac:	e008      	b.n	8003fc0 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003fba:	e001      	b.n	8003fc0 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	50040300 	.word	0x50040300
 8003fd0:	50040200 	.word	0x50040200
 8003fd4:	50040100 	.word	0x50040100
 8003fd8:	50040000 	.word	0x50040000
 8003fdc:	08004c2f 	.word	0x08004c2f
 8003fe0:	08004d07 	.word	0x08004d07
 8003fe4:	08004d23 	.word	0x08004d23

08003fe8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_ADC_Stop_DMA+0x16>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e051      	b.n	80040a2 <HAL_ADC_Stop_DMA+0xba>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004006:	2103      	movs	r1, #3
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fc6f 	bl	80048ec <ADC_ConversionStop>
 800400e:	4603      	mov	r3, r0
 8004010:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d13f      	bne.n	8004098 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800402c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d10f      	bne.n	8004056 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800403a:	4618      	mov	r0, r3
 800403c:	f001 fff8 	bl	8006030 <HAL_DMA_Abort>
 8004040:	4603      	mov	r3, r0
 8004042:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0210 	bic.w	r2, r2, #16
 8004064:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d105      	bne.n	8004078 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fd7f 	bl	8004b70 <ADC_Disable>
 8004072:	4603      	mov	r3, r0
 8004074:	73fb      	strb	r3, [r7, #15]
 8004076:	e002      	b.n	800407e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fd79 	bl	8004b70 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d109      	bne.n	8004098 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004088:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	f043 0201 	orr.w	r2, r3, #1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
	...

080040d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b0b6      	sub	sp, #216	@ 0xd8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x22>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e3e3      	b.n	80048be <HAL_ADC_ConfigChannel+0x7ea>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fd26 	bl	8003b54 <LL_ADC_REG_IsConversionOngoing>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	f040 83c4 	bne.w	8004898 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b05      	cmp	r3, #5
 800411e:	d824      	bhi.n	800416a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	3b02      	subs	r3, #2
 8004126:	2b03      	cmp	r3, #3
 8004128:	d81b      	bhi.n	8004162 <HAL_ADC_ConfigChannel+0x8e>
 800412a:	a201      	add	r2, pc, #4	@ (adr r2, 8004130 <HAL_ADC_ConfigChannel+0x5c>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	08004141 	.word	0x08004141
 8004134:	08004149 	.word	0x08004149
 8004138:	08004151 	.word	0x08004151
 800413c:	08004159 	.word	0x08004159
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004140:	230c      	movs	r3, #12
 8004142:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004146:	e010      	b.n	800416a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004148:	2312      	movs	r3, #18
 800414a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800414e:	e00c      	b.n	800416a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004150:	2318      	movs	r3, #24
 8004152:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004156:	e008      	b.n	800416a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004158:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800415c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004160:	e003      	b.n	800416a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004162:	2306      	movs	r3, #6
 8004164:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004168:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004178:	f7ff fb9f 	bl	80038ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff fce7 	bl	8003b54 <LL_ADC_REG_IsConversionOngoing>
 8004186:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff fd07 	bl	8003ba2 <LL_ADC_INJ_IsConversionOngoing>
 8004194:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004198:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800419c:	2b00      	cmp	r3, #0
 800419e:	f040 81bf 	bne.w	8004520 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f040 81ba 	bne.w	8004520 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041b4:	d10f      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2200      	movs	r2, #0
 80041c0:	4619      	mov	r1, r3
 80041c2:	f7ff fba6 	bl	8003912 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fb4d 	bl	800386e <LL_ADC_SetSamplingTimeCommonConfig>
 80041d4:	e00e      	b.n	80041f4 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6819      	ldr	r1, [r3, #0]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	461a      	mov	r2, r3
 80041e4:	f7ff fb95 	bl	8003912 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2100      	movs	r1, #0
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff fb3d 	bl	800386e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	695a      	ldr	r2, [r3, #20]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	08db      	lsrs	r3, r3, #3
 8004200:	f003 0303 	and.w	r3, r3, #3
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	2b04      	cmp	r3, #4
 8004214:	d00a      	beq.n	800422c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6919      	ldr	r1, [r3, #16]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004226:	f7ff facd 	bl	80037c4 <LL_ADC_SetOffset>
 800422a:	e179      	b.n	8004520 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2100      	movs	r1, #0
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff faea 	bl	800380c <LL_ADC_GetOffsetChannel>
 8004238:	4603      	mov	r3, r0
 800423a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10a      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x184>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2100      	movs	r1, #0
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff fadf 	bl	800380c <LL_ADC_GetOffsetChannel>
 800424e:	4603      	mov	r3, r0
 8004250:	0e9b      	lsrs	r3, r3, #26
 8004252:	f003 021f 	and.w	r2, r3, #31
 8004256:	e01e      	b.n	8004296 <HAL_ADC_ConfigChannel+0x1c2>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2100      	movs	r1, #0
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff fad4 	bl	800380c <LL_ADC_GetOffsetChannel>
 8004264:	4603      	mov	r3, r0
 8004266:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800426e:	fa93 f3a3 	rbit	r3, r3
 8004272:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004276:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800427a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800427e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8004286:	2320      	movs	r3, #32
 8004288:	e004      	b.n	8004294 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800428a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800428e:	fab3 f383 	clz	r3, r3
 8004292:	b2db      	uxtb	r3, r3
 8004294:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d105      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x1da>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	0e9b      	lsrs	r3, r3, #26
 80042a8:	f003 031f 	and.w	r3, r3, #31
 80042ac:	e018      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x20c>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042ba:	fa93 f3a3 	rbit	r3, r3
 80042be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80042c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80042c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80042ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80042d2:	2320      	movs	r3, #32
 80042d4:	e004      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80042d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80042da:	fab3 f383 	clz	r3, r3
 80042de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d106      	bne.n	80042f2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2200      	movs	r2, #0
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff faa3 	bl	8003838 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2101      	movs	r1, #1
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff fa87 	bl	800380c <LL_ADC_GetOffsetChannel>
 80042fe:	4603      	mov	r3, r0
 8004300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <HAL_ADC_ConfigChannel+0x24a>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2101      	movs	r1, #1
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff fa7c 	bl	800380c <LL_ADC_GetOffsetChannel>
 8004314:	4603      	mov	r3, r0
 8004316:	0e9b      	lsrs	r3, r3, #26
 8004318:	f003 021f 	and.w	r2, r3, #31
 800431c:	e01e      	b.n	800435c <HAL_ADC_ConfigChannel+0x288>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2101      	movs	r1, #1
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff fa71 	bl	800380c <LL_ADC_GetOffsetChannel>
 800432a:	4603      	mov	r3, r0
 800432c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004330:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004334:	fa93 f3a3 	rbit	r3, r3
 8004338:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800433c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004340:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004344:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800434c:	2320      	movs	r3, #32
 800434e:	e004      	b.n	800435a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004350:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004354:	fab3 f383 	clz	r3, r3
 8004358:	b2db      	uxtb	r3, r3
 800435a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004364:	2b00      	cmp	r3, #0
 8004366:	d105      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x2a0>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	0e9b      	lsrs	r3, r3, #26
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	e018      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x2d2>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004380:	fa93 f3a3 	rbit	r3, r3
 8004384:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004388:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800438c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004390:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8004398:	2320      	movs	r3, #32
 800439a:	e004      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800439c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043a0:	fab3 f383 	clz	r3, r3
 80043a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d106      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2200      	movs	r2, #0
 80043b0:	2101      	movs	r1, #1
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff fa40 	bl	8003838 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2102      	movs	r1, #2
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff fa24 	bl	800380c <LL_ADC_GetOffsetChannel>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10a      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0x310>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2102      	movs	r1, #2
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff fa19 	bl	800380c <LL_ADC_GetOffsetChannel>
 80043da:	4603      	mov	r3, r0
 80043dc:	0e9b      	lsrs	r3, r3, #26
 80043de:	f003 021f 	and.w	r2, r3, #31
 80043e2:	e01e      	b.n	8004422 <HAL_ADC_ConfigChannel+0x34e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2102      	movs	r1, #2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff fa0e 	bl	800380c <LL_ADC_GetOffsetChannel>
 80043f0:	4603      	mov	r3, r0
 80043f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043fa:	fa93 f3a3 	rbit	r3, r3
 80043fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004402:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004406:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800440a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8004412:	2320      	movs	r3, #32
 8004414:	e004      	b.n	8004420 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8004416:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800441a:	fab3 f383 	clz	r3, r3
 800441e:	b2db      	uxtb	r3, r3
 8004420:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800442a:	2b00      	cmp	r3, #0
 800442c:	d105      	bne.n	800443a <HAL_ADC_ConfigChannel+0x366>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	0e9b      	lsrs	r3, r3, #26
 8004434:	f003 031f 	and.w	r3, r3, #31
 8004438:	e014      	b.n	8004464 <HAL_ADC_ConfigChannel+0x390>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004440:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004442:	fa93 f3a3 	rbit	r3, r3
 8004446:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004448:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800444a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800444e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8004456:	2320      	movs	r3, #32
 8004458:	e004      	b.n	8004464 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800445a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800445e:	fab3 f383 	clz	r3, r3
 8004462:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004464:	429a      	cmp	r2, r3
 8004466:	d106      	bne.n	8004476 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2200      	movs	r2, #0
 800446e:	2102      	movs	r1, #2
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff f9e1 	bl	8003838 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2103      	movs	r1, #3
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff f9c5 	bl	800380c <LL_ADC_GetOffsetChannel>
 8004482:	4603      	mov	r3, r0
 8004484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <HAL_ADC_ConfigChannel+0x3ce>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2103      	movs	r1, #3
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff f9ba 	bl	800380c <LL_ADC_GetOffsetChannel>
 8004498:	4603      	mov	r3, r0
 800449a:	0e9b      	lsrs	r3, r3, #26
 800449c:	f003 021f 	and.w	r2, r3, #31
 80044a0:	e017      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x3fe>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2103      	movs	r1, #3
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff f9af 	bl	800380c <LL_ADC_GetOffsetChannel>
 80044ae:	4603      	mov	r3, r0
 80044b0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044b4:	fa93 f3a3 	rbit	r3, r3
 80044b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80044ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044bc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80044be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80044c4:	2320      	movs	r3, #32
 80044c6:	e003      	b.n	80044d0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80044c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044ca:	fab3 f383 	clz	r3, r3
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d105      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x416>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	0e9b      	lsrs	r3, r3, #26
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	e011      	b.n	800450e <HAL_ADC_ConfigChannel+0x43a>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044f2:	fa93 f3a3 	rbit	r3, r3
 80044f6:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80044f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044fa:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80044fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8004502:	2320      	movs	r3, #32
 8004504:	e003      	b.n	800450e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8004506:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004508:	fab3 f383 	clz	r3, r3
 800450c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800450e:	429a      	cmp	r2, r3
 8004510:	d106      	bne.n	8004520 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2200      	movs	r2, #0
 8004518:	2103      	movs	r1, #3
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff f98c 	bl	8003838 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff fac7 	bl	8003ab8 <LL_ADC_IsEnabled>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	f040 813f 	bne.w	80047b0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	6819      	ldr	r1, [r3, #0]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	461a      	mov	r2, r3
 8004540:	f7ff fa12 	bl	8003968 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4a8e      	ldr	r2, [pc, #568]	@ (8004784 <HAL_ADC_ConfigChannel+0x6b0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	f040 8130 	bne.w	80047b0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10b      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x4a4>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	0e9b      	lsrs	r3, r3, #26
 8004566:	3301      	adds	r3, #1
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	2b09      	cmp	r3, #9
 800456e:	bf94      	ite	ls
 8004570:	2301      	movls	r3, #1
 8004572:	2300      	movhi	r3, #0
 8004574:	b2db      	uxtb	r3, r3
 8004576:	e019      	b.n	80045ac <HAL_ADC_ConfigChannel+0x4d8>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004580:	fa93 f3a3 	rbit	r3, r3
 8004584:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004588:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800458a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8004590:	2320      	movs	r3, #32
 8004592:	e003      	b.n	800459c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004594:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004596:	fab3 f383 	clz	r3, r3
 800459a:	b2db      	uxtb	r3, r3
 800459c:	3301      	adds	r3, #1
 800459e:	f003 031f 	and.w	r3, r3, #31
 80045a2:	2b09      	cmp	r3, #9
 80045a4:	bf94      	ite	ls
 80045a6:	2301      	movls	r3, #1
 80045a8:	2300      	movhi	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d079      	beq.n	80046a4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d107      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x4f8>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	0e9b      	lsrs	r3, r3, #26
 80045c2:	3301      	adds	r3, #1
 80045c4:	069b      	lsls	r3, r3, #26
 80045c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045ca:	e015      	b.n	80045f8 <HAL_ADC_ConfigChannel+0x524>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045d4:	fa93 f3a3 	rbit	r3, r3
 80045d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80045da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045dc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80045de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80045e4:	2320      	movs	r3, #32
 80045e6:	e003      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80045e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045ea:	fab3 f383 	clz	r3, r3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	3301      	adds	r3, #1
 80045f2:	069b      	lsls	r3, r3, #26
 80045f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004600:	2b00      	cmp	r3, #0
 8004602:	d109      	bne.n	8004618 <HAL_ADC_ConfigChannel+0x544>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	0e9b      	lsrs	r3, r3, #26
 800460a:	3301      	adds	r3, #1
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	2101      	movs	r1, #1
 8004612:	fa01 f303 	lsl.w	r3, r1, r3
 8004616:	e017      	b.n	8004648 <HAL_ADC_ConfigChannel+0x574>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004620:	fa93 f3a3 	rbit	r3, r3
 8004624:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004628:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800462a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004630:	2320      	movs	r3, #32
 8004632:	e003      	b.n	800463c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004636:	fab3 f383 	clz	r3, r3
 800463a:	b2db      	uxtb	r3, r3
 800463c:	3301      	adds	r3, #1
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	2101      	movs	r1, #1
 8004644:	fa01 f303 	lsl.w	r3, r1, r3
 8004648:	ea42 0103 	orr.w	r1, r2, r3
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10a      	bne.n	800466e <HAL_ADC_ConfigChannel+0x59a>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	0e9b      	lsrs	r3, r3, #26
 800465e:	3301      	adds	r3, #1
 8004660:	f003 021f 	and.w	r2, r3, #31
 8004664:	4613      	mov	r3, r2
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	4413      	add	r3, r2
 800466a:	051b      	lsls	r3, r3, #20
 800466c:	e018      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x5cc>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004676:	fa93 f3a3 	rbit	r3, r3
 800467a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800467c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8004686:	2320      	movs	r3, #32
 8004688:	e003      	b.n	8004692 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800468a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468c:	fab3 f383 	clz	r3, r3
 8004690:	b2db      	uxtb	r3, r3
 8004692:	3301      	adds	r3, #1
 8004694:	f003 021f 	and.w	r2, r3, #31
 8004698:	4613      	mov	r3, r2
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	4413      	add	r3, r2
 800469e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046a0:	430b      	orrs	r3, r1
 80046a2:	e080      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d107      	bne.n	80046c0 <HAL_ADC_ConfigChannel+0x5ec>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	0e9b      	lsrs	r3, r3, #26
 80046b6:	3301      	adds	r3, #1
 80046b8:	069b      	lsls	r3, r3, #26
 80046ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046be:	e015      	b.n	80046ec <HAL_ADC_ConfigChannel+0x618>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c8:	fa93 f3a3 	rbit	r3, r3
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80046d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80046d8:	2320      	movs	r3, #32
 80046da:	e003      	b.n	80046e4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80046dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046de:	fab3 f383 	clz	r3, r3
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	3301      	adds	r3, #1
 80046e6:	069b      	lsls	r3, r3, #26
 80046e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d109      	bne.n	800470c <HAL_ADC_ConfigChannel+0x638>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	0e9b      	lsrs	r3, r3, #26
 80046fe:	3301      	adds	r3, #1
 8004700:	f003 031f 	and.w	r3, r3, #31
 8004704:	2101      	movs	r1, #1
 8004706:	fa01 f303 	lsl.w	r3, r1, r3
 800470a:	e017      	b.n	800473c <HAL_ADC_ConfigChannel+0x668>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	fa93 f3a3 	rbit	r3, r3
 8004718:	61bb      	str	r3, [r7, #24]
  return result;
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004724:	2320      	movs	r3, #32
 8004726:	e003      	b.n	8004730 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	fab3 f383 	clz	r3, r3
 800472e:	b2db      	uxtb	r3, r3
 8004730:	3301      	adds	r3, #1
 8004732:	f003 031f 	and.w	r3, r3, #31
 8004736:	2101      	movs	r1, #1
 8004738:	fa01 f303 	lsl.w	r3, r1, r3
 800473c:	ea42 0103 	orr.w	r1, r2, r3
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10d      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x694>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	0e9b      	lsrs	r3, r3, #26
 8004752:	3301      	adds	r3, #1
 8004754:	f003 021f 	and.w	r2, r3, #31
 8004758:	4613      	mov	r3, r2
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	4413      	add	r3, r2
 800475e:	3b1e      	subs	r3, #30
 8004760:	051b      	lsls	r3, r3, #20
 8004762:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004766:	e01d      	b.n	80047a4 <HAL_ADC_ConfigChannel+0x6d0>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	fa93 f3a3 	rbit	r3, r3
 8004774:	60fb      	str	r3, [r7, #12]
  return result;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d103      	bne.n	8004788 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004780:	2320      	movs	r3, #32
 8004782:	e005      	b.n	8004790 <HAL_ADC_ConfigChannel+0x6bc>
 8004784:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	fab3 f383 	clz	r3, r3
 800478e:	b2db      	uxtb	r3, r3
 8004790:	3301      	adds	r3, #1
 8004792:	f003 021f 	and.w	r2, r3, #31
 8004796:	4613      	mov	r3, r2
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	4413      	add	r3, r2
 800479c:	3b1e      	subs	r3, #30
 800479e:	051b      	lsls	r3, r3, #20
 80047a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047a4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047aa:	4619      	mov	r1, r3
 80047ac:	f7ff f8b1 	bl	8003912 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	4b44      	ldr	r3, [pc, #272]	@ (80048c8 <HAL_ADC_ConfigChannel+0x7f4>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d07a      	beq.n	80048b2 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047bc:	4843      	ldr	r0, [pc, #268]	@ (80048cc <HAL_ADC_ConfigChannel+0x7f8>)
 80047be:	f7fe fff3 	bl	80037a8 <LL_ADC_GetCommonPathInternalCh>
 80047c2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a41      	ldr	r2, [pc, #260]	@ (80048d0 <HAL_ADC_ConfigChannel+0x7fc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d12c      	bne.n	800482a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80047d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d126      	bne.n	800482a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a3c      	ldr	r2, [pc, #240]	@ (80048d4 <HAL_ADC_ConfigChannel+0x800>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d004      	beq.n	80047f0 <HAL_ADC_ConfigChannel+0x71c>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a3b      	ldr	r2, [pc, #236]	@ (80048d8 <HAL_ADC_ConfigChannel+0x804>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d15d      	bne.n	80048ac <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047f8:	4619      	mov	r1, r3
 80047fa:	4834      	ldr	r0, [pc, #208]	@ (80048cc <HAL_ADC_ConfigChannel+0x7f8>)
 80047fc:	f7fe ffc1 	bl	8003782 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004800:	4b36      	ldr	r3, [pc, #216]	@ (80048dc <HAL_ADC_ConfigChannel+0x808>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	099b      	lsrs	r3, r3, #6
 8004806:	4a36      	ldr	r2, [pc, #216]	@ (80048e0 <HAL_ADC_ConfigChannel+0x80c>)
 8004808:	fba2 2303 	umull	r2, r3, r2, r3
 800480c:	099b      	lsrs	r3, r3, #6
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	4613      	mov	r3, r2
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800481a:	e002      	b.n	8004822 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	3b01      	subs	r3, #1
 8004820:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f9      	bne.n	800481c <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004828:	e040      	b.n	80048ac <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a2d      	ldr	r2, [pc, #180]	@ (80048e4 <HAL_ADC_ConfigChannel+0x810>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d118      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004834:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004838:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d112      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a23      	ldr	r2, [pc, #140]	@ (80048d4 <HAL_ADC_ConfigChannel+0x800>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <HAL_ADC_ConfigChannel+0x780>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a22      	ldr	r2, [pc, #136]	@ (80048d8 <HAL_ADC_ConfigChannel+0x804>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d12d      	bne.n	80048b0 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004854:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004858:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800485c:	4619      	mov	r1, r3
 800485e:	481b      	ldr	r0, [pc, #108]	@ (80048cc <HAL_ADC_ConfigChannel+0x7f8>)
 8004860:	f7fe ff8f 	bl	8003782 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004864:	e024      	b.n	80048b0 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1f      	ldr	r2, [pc, #124]	@ (80048e8 <HAL_ADC_ConfigChannel+0x814>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d120      	bne.n	80048b2 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004870:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004874:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d11a      	bne.n	80048b2 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a14      	ldr	r2, [pc, #80]	@ (80048d4 <HAL_ADC_ConfigChannel+0x800>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d115      	bne.n	80048b2 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004886:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800488a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800488e:	4619      	mov	r1, r3
 8004890:	480e      	ldr	r0, [pc, #56]	@ (80048cc <HAL_ADC_ConfigChannel+0x7f8>)
 8004892:	f7fe ff76 	bl	8003782 <LL_ADC_SetCommonPathInternalCh>
 8004896:	e00c      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489c:	f043 0220 	orr.w	r2, r3, #32
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80048aa:	e002      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048ac:	bf00      	nop
 80048ae:	e000      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80048ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80048be:	4618      	mov	r0, r3
 80048c0:	37d8      	adds	r7, #216	@ 0xd8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	80080000 	.word	0x80080000
 80048cc:	50040300 	.word	0x50040300
 80048d0:	c7520000 	.word	0xc7520000
 80048d4:	50040000 	.word	0x50040000
 80048d8:	50040200 	.word	0x50040200
 80048dc:	20000000 	.word	0x20000000
 80048e0:	053e2d63 	.word	0x053e2d63
 80048e4:	cb840000 	.word	0xcb840000
 80048e8:	80000001 	.word	0x80000001

080048ec <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff f926 	bl	8003b54 <LL_ADC_REG_IsConversionOngoing>
 8004908:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff f947 	bl	8003ba2 <LL_ADC_INJ_IsConversionOngoing>
 8004914:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d103      	bne.n	8004924 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 8098 	beq.w	8004a54 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d02a      	beq.n	8004988 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	7e5b      	ldrb	r3, [r3, #25]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d126      	bne.n	8004988 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	7e1b      	ldrb	r3, [r3, #24]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d122      	bne.n	8004988 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004942:	2301      	movs	r3, #1
 8004944:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004946:	e014      	b.n	8004972 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	4a45      	ldr	r2, [pc, #276]	@ (8004a60 <ADC_ConversionStop+0x174>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d90d      	bls.n	800496c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004954:	f043 0210 	orr.w	r2, r3, #16
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004960:	f043 0201 	orr.w	r2, r3, #1
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e074      	b.n	8004a56 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	3301      	adds	r3, #1
 8004970:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800497c:	2b40      	cmp	r3, #64	@ 0x40
 800497e:	d1e3      	bne.n	8004948 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2240      	movs	r2, #64	@ 0x40
 8004986:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d014      	beq.n	80049b8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff f8de 	bl	8003b54 <LL_ADC_REG_IsConversionOngoing>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00c      	beq.n	80049b8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff f89b 	bl	8003ade <LL_ADC_IsDisableOngoing>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d104      	bne.n	80049b8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff f8ba 	bl	8003b2c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d014      	beq.n	80049e8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff f8ed 	bl	8003ba2 <LL_ADC_INJ_IsConversionOngoing>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00c      	beq.n	80049e8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff f883 	bl	8003ade <LL_ADC_IsDisableOngoing>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d104      	bne.n	80049e8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff f8c9 	bl	8003b7a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d005      	beq.n	80049fa <ADC_ConversionStop+0x10e>
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d105      	bne.n	8004a00 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80049f4:	230c      	movs	r3, #12
 80049f6:	617b      	str	r3, [r7, #20]
        break;
 80049f8:	e005      	b.n	8004a06 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80049fa:	2308      	movs	r3, #8
 80049fc:	617b      	str	r3, [r7, #20]
        break;
 80049fe:	e002      	b.n	8004a06 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004a00:	2304      	movs	r3, #4
 8004a02:	617b      	str	r3, [r7, #20]
        break;
 8004a04:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004a06:	f7fe fe79 	bl	80036fc <HAL_GetTick>
 8004a0a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004a0c:	e01b      	b.n	8004a46 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004a0e:	f7fe fe75 	bl	80036fc <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b05      	cmp	r3, #5
 8004a1a:	d914      	bls.n	8004a46 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689a      	ldr	r2, [r3, #8]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00d      	beq.n	8004a46 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2e:	f043 0210 	orr.w	r2, r3, #16
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a3a:	f043 0201 	orr.w	r2, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e007      	b.n	8004a56 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1dc      	bne.n	8004a0e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3720      	adds	r7, #32
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	a33fffff 	.word	0xa33fffff

08004a64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff f81f 	bl	8003ab8 <LL_ADC_IsEnabled>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d169      	bne.n	8004b54 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	4b36      	ldr	r3, [pc, #216]	@ (8004b60 <ADC_Enable+0xfc>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00d      	beq.n	8004aaa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a92:	f043 0210 	orr.w	r2, r3, #16
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a9e:	f043 0201 	orr.w	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e055      	b.n	8004b56 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fe ffda 	bl	8003a68 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004ab4:	482b      	ldr	r0, [pc, #172]	@ (8004b64 <ADC_Enable+0x100>)
 8004ab6:	f7fe fe77 	bl	80037a8 <LL_ADC_GetCommonPathInternalCh>
 8004aba:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004abc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d013      	beq.n	8004aec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ac4:	4b28      	ldr	r3, [pc, #160]	@ (8004b68 <ADC_Enable+0x104>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	099b      	lsrs	r3, r3, #6
 8004aca:	4a28      	ldr	r2, [pc, #160]	@ (8004b6c <ADC_Enable+0x108>)
 8004acc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad0:	099b      	lsrs	r3, r3, #6
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ade:	e002      	b.n	8004ae6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f9      	bne.n	8004ae0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004aec:	f7fe fe06 	bl	80036fc <HAL_GetTick>
 8004af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004af2:	e028      	b.n	8004b46 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fe ffdd 	bl	8003ab8 <LL_ADC_IsEnabled>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d104      	bne.n	8004b0e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fe ffad 	bl	8003a68 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b0e:	f7fe fdf5 	bl	80036fc <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d914      	bls.n	8004b46 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d00d      	beq.n	8004b46 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2e:	f043 0210 	orr.w	r2, r3, #16
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3a:	f043 0201 	orr.w	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e007      	b.n	8004b56 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d1cf      	bne.n	8004af4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	8000003f 	.word	0x8000003f
 8004b64:	50040300 	.word	0x50040300
 8004b68:	20000000 	.word	0x20000000
 8004b6c:	053e2d63 	.word	0x053e2d63

08004b70 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fe ffae 	bl	8003ade <LL_ADC_IsDisableOngoing>
 8004b82:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fe ff95 	bl	8003ab8 <LL_ADC_IsEnabled>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d047      	beq.n	8004c24 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d144      	bne.n	8004c24 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 030d 	and.w	r3, r3, #13
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d10c      	bne.n	8004bc2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fe ff6f 	bl	8003a90 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2203      	movs	r2, #3
 8004bb8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004bba:	f7fe fd9f 	bl	80036fc <HAL_GetTick>
 8004bbe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bc0:	e029      	b.n	8004c16 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc6:	f043 0210 	orr.w	r2, r3, #16
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd2:	f043 0201 	orr.w	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e023      	b.n	8004c26 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004bde:	f7fe fd8d 	bl	80036fc <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d914      	bls.n	8004c16 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00d      	beq.n	8004c16 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfe:	f043 0210 	orr.w	r2, r3, #16
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c0a:	f043 0201 	orr.w	r2, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e007      	b.n	8004c26 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1dc      	bne.n	8004bde <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b084      	sub	sp, #16
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c40:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d14b      	bne.n	8004ce0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c4c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d021      	beq.n	8004ca6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe fe14 	bl	8003894 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d032      	beq.n	8004cd8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d12b      	bne.n	8004cd8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d11f      	bne.n	8004cd8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c9c:	f043 0201 	orr.w	r2, r3, #1
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ca4:	e018      	b.n	8004cd8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d111      	bne.n	8004cd8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d105      	bne.n	8004cd8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd0:	f043 0201 	orr.w	r2, r3, #1
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f7fc fad9 	bl	8001290 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004cde:	e00e      	b.n	8004cfe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f7ff f9e6 	bl	80040be <HAL_ADC_ErrorCallback>
}
 8004cf2:	e004      	b.n	8004cfe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	4798      	blx	r3
}
 8004cfe:	bf00      	nop
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f7ff f9c8 	bl	80040aa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d1a:	bf00      	nop
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d40:	f043 0204 	orr.w	r2, r3, #4
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f7ff f9b8 	bl	80040be <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d4e:	bf00      	nop
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <LL_ADC_IsEnabled>:
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <LL_ADC_IsEnabled+0x18>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <LL_ADC_IsEnabled+0x1a>
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <LL_ADC_REG_IsConversionOngoing>:
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d101      	bne.n	8004d94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
	...

08004da4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004da4:	b590      	push	{r4, r7, lr}
 8004da6:	b0a1      	sub	sp, #132	@ 0x84
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e093      	b.n	8004eea <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004dca:	2300      	movs	r3, #0
 8004dcc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004dce:	2300      	movs	r3, #0
 8004dd0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a47      	ldr	r2, [pc, #284]	@ (8004ef4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d102      	bne.n	8004de2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004ddc:	4b46      	ldr	r3, [pc, #280]	@ (8004ef8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	e001      	b.n	8004de6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10b      	bne.n	8004e04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df0:	f043 0220 	orr.w	r2, r3, #32
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e072      	b.n	8004eea <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff ffb8 	bl	8004d7c <LL_ADC_REG_IsConversionOngoing>
 8004e0c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff ffb2 	bl	8004d7c <LL_ADC_REG_IsConversionOngoing>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d154      	bne.n	8004ec8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004e1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d151      	bne.n	8004ec8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e24:	4b35      	ldr	r3, [pc, #212]	@ (8004efc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004e26:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d02c      	beq.n	8004e8a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004e30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	6859      	ldr	r1, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e42:	035b      	lsls	r3, r3, #13
 8004e44:	430b      	orrs	r3, r1
 8004e46:	431a      	orrs	r2, r3
 8004e48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e4a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e4c:	4829      	ldr	r0, [pc, #164]	@ (8004ef4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004e4e:	f7ff ff82 	bl	8004d56 <LL_ADC_IsEnabled>
 8004e52:	4604      	mov	r4, r0
 8004e54:	4828      	ldr	r0, [pc, #160]	@ (8004ef8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004e56:	f7ff ff7e 	bl	8004d56 <LL_ADC_IsEnabled>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	431c      	orrs	r4, r3
 8004e5e:	4828      	ldr	r0, [pc, #160]	@ (8004f00 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004e60:	f7ff ff79 	bl	8004d56 <LL_ADC_IsEnabled>
 8004e64:	4603      	mov	r3, r0
 8004e66:	4323      	orrs	r3, r4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d137      	bne.n	8004edc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004e6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004e74:	f023 030f 	bic.w	r3, r3, #15
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	6811      	ldr	r1, [r2, #0]
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	6892      	ldr	r2, [r2, #8]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	431a      	orrs	r2, r3
 8004e84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e86:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e88:	e028      	b.n	8004edc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004e8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e94:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e96:	4817      	ldr	r0, [pc, #92]	@ (8004ef4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004e98:	f7ff ff5d 	bl	8004d56 <LL_ADC_IsEnabled>
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	4816      	ldr	r0, [pc, #88]	@ (8004ef8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004ea0:	f7ff ff59 	bl	8004d56 <LL_ADC_IsEnabled>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	431c      	orrs	r4, r3
 8004ea8:	4815      	ldr	r0, [pc, #84]	@ (8004f00 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004eaa:	f7ff ff54 	bl	8004d56 <LL_ADC_IsEnabled>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	4323      	orrs	r3, r4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d112      	bne.n	8004edc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004eb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004ebe:	f023 030f 	bic.w	r3, r3, #15
 8004ec2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004ec4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ec6:	e009      	b.n	8004edc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ecc:	f043 0220 	orr.w	r2, r3, #32
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004eda:	e000      	b.n	8004ede <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004edc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004ee6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3784      	adds	r7, #132	@ 0x84
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd90      	pop	{r4, r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	50040000 	.word	0x50040000
 8004ef8:	50040100 	.word	0x50040100
 8004efc:	50040300 	.word	0x50040300
 8004f00:	50040200 	.word	0x50040200

08004f04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e0ed      	b.n	80050f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d102      	bne.n	8004f28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fd f80a 	bl	8001f3c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f38:	f7fe fbe0 	bl	80036fc <HAL_GetTick>
 8004f3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004f3e:	e012      	b.n	8004f66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f40:	f7fe fbdc 	bl	80036fc <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b0a      	cmp	r3, #10
 8004f4c:	d90b      	bls.n	8004f66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f52:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2205      	movs	r2, #5
 8004f5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e0c5      	b.n	80050f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0e5      	beq.n	8004f40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0202 	bic.w	r2, r2, #2
 8004f82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f84:	f7fe fbba 	bl	80036fc <HAL_GetTick>
 8004f88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004f8a:	e012      	b.n	8004fb2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f8c:	f7fe fbb6 	bl	80036fc <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b0a      	cmp	r3, #10
 8004f98:	d90b      	bls.n	8004fb2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2205      	movs	r2, #5
 8004faa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e09f      	b.n	80050f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e5      	bne.n	8004f8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	7e1b      	ldrb	r3, [r3, #24]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d108      	bne.n	8004fda <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	e007      	b.n	8004fea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fe8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	7e5b      	ldrb	r3, [r3, #25]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d108      	bne.n	8005004 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	e007      	b.n	8005014 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005012:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	7e9b      	ldrb	r3, [r3, #26]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d108      	bne.n	800502e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0220 	orr.w	r2, r2, #32
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	e007      	b.n	800503e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0220 	bic.w	r2, r2, #32
 800503c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	7edb      	ldrb	r3, [r3, #27]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d108      	bne.n	8005058 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0210 	bic.w	r2, r2, #16
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	e007      	b.n	8005068 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0210 	orr.w	r2, r2, #16
 8005066:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	7f1b      	ldrb	r3, [r3, #28]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d108      	bne.n	8005082 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0208 	orr.w	r2, r2, #8
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	e007      	b.n	8005092 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0208 	bic.w	r2, r2, #8
 8005090:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	7f5b      	ldrb	r3, [r3, #29]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d108      	bne.n	80050ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f042 0204 	orr.w	r2, r2, #4
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	e007      	b.n	80050bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0204 	bic.w	r2, r2, #4
 80050ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	431a      	orrs	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	ea42 0103 	orr.w	r1, r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	1e5a      	subs	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005112:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005114:	7cfb      	ldrb	r3, [r7, #19]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d003      	beq.n	8005122 <HAL_CAN_ConfigFilter+0x26>
 800511a:	7cfb      	ldrb	r3, [r7, #19]
 800511c:	2b02      	cmp	r3, #2
 800511e:	f040 80be 	bne.w	800529e <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005122:	4b65      	ldr	r3, [pc, #404]	@ (80052b8 <HAL_CAN_ConfigFilter+0x1bc>)
 8005124:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800512c:	f043 0201 	orr.w	r2, r3, #1
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800513c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005150:	021b      	lsls	r3, r3, #8
 8005152:	431a      	orrs	r2, r3
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	2201      	movs	r2, #1
 8005164:	fa02 f303 	lsl.w	r3, r2, r3
 8005168:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	43db      	mvns	r3, r3
 8005174:	401a      	ands	r2, r3
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d123      	bne.n	80051cc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	43db      	mvns	r3, r3
 800518e:	401a      	ands	r2, r3
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80051a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	3248      	adds	r2, #72	@ 0x48
 80051ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80051c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80051c2:	6979      	ldr	r1, [r7, #20]
 80051c4:	3348      	adds	r3, #72	@ 0x48
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	440b      	add	r3, r1
 80051ca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d122      	bne.n	800521a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	431a      	orrs	r2, r3
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80051f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	3248      	adds	r2, #72	@ 0x48
 80051fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800520e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005210:	6979      	ldr	r1, [r7, #20]
 8005212:	3348      	adds	r3, #72	@ 0x48
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	440b      	add	r3, r1
 8005218:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d109      	bne.n	8005236 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	43db      	mvns	r3, r3
 800522c:	401a      	ands	r2, r3
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005234:	e007      	b.n	8005246 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	431a      	orrs	r2, r3
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d109      	bne.n	8005262 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	43db      	mvns	r3, r3
 8005258:	401a      	ands	r2, r3
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8005260:	e007      	b.n	8005272 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	431a      	orrs	r2, r3
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d107      	bne.n	800528a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	431a      	orrs	r2, r3
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005290:	f023 0201 	bic.w	r2, r3, #1
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	e006      	b.n	80052ac <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
  }
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	371c      	adds	r7, #28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	40006400 	.word	0x40006400

080052bc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d12e      	bne.n	800532e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0201 	bic.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052e8:	f7fe fa08 	bl	80036fc <HAL_GetTick>
 80052ec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80052ee:	e012      	b.n	8005316 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80052f0:	f7fe fa04 	bl	80036fc <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b0a      	cmp	r3, #10
 80052fc:	d90b      	bls.n	8005316 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005302:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2205      	movs	r2, #5
 800530e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e012      	b.n	800533c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e5      	bne.n	80052f0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	e006      	b.n	800533c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005332:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
  }
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005344:	b480      	push	{r7}
 8005346:	b089      	sub	sp, #36	@ 0x24
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005358:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005362:	7ffb      	ldrb	r3, [r7, #31]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d003      	beq.n	8005370 <HAL_CAN_AddTxMessage+0x2c>
 8005368:	7ffb      	ldrb	r3, [r7, #31]
 800536a:	2b02      	cmp	r3, #2
 800536c:	f040 80ad 	bne.w	80054ca <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10a      	bne.n	8005390 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005380:	2b00      	cmp	r3, #0
 8005382:	d105      	bne.n	8005390 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 8095 	beq.w	80054ba <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	0e1b      	lsrs	r3, r3, #24
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800539a:	2201      	movs	r2, #1
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	409a      	lsls	r2, r3
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10d      	bne.n	80053c8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80053b6:	68f9      	ldr	r1, [r7, #12]
 80053b8:	6809      	ldr	r1, [r1, #0]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	3318      	adds	r3, #24
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	440b      	add	r3, r1
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	e00f      	b.n	80053e8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053d2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053d8:	68f9      	ldr	r1, [r7, #12]
 80053da:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80053dc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	3318      	adds	r3, #24
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	440b      	add	r3, r1
 80053e6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6819      	ldr	r1, [r3, #0]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	3318      	adds	r3, #24
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	440b      	add	r3, r1
 80053f8:	3304      	adds	r3, #4
 80053fa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	7d1b      	ldrb	r3, [r3, #20]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d111      	bne.n	8005428 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	3318      	adds	r3, #24
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	4413      	add	r3, r2
 8005410:	3304      	adds	r3, #4
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	6811      	ldr	r1, [r2, #0]
 8005418:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	3318      	adds	r3, #24
 8005420:	011b      	lsls	r3, r3, #4
 8005422:	440b      	add	r3, r1
 8005424:	3304      	adds	r3, #4
 8005426:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3307      	adds	r3, #7
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	061a      	lsls	r2, r3, #24
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3306      	adds	r3, #6
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	041b      	lsls	r3, r3, #16
 8005438:	431a      	orrs	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3305      	adds	r3, #5
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	4313      	orrs	r3, r2
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	3204      	adds	r2, #4
 8005448:	7812      	ldrb	r2, [r2, #0]
 800544a:	4610      	mov	r0, r2
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	6811      	ldr	r1, [r2, #0]
 8005450:	ea43 0200 	orr.w	r2, r3, r0
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	440b      	add	r3, r1
 800545a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800545e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3303      	adds	r3, #3
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	061a      	lsls	r2, r3, #24
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3302      	adds	r3, #2
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	041b      	lsls	r3, r3, #16
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3301      	adds	r3, #1
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	4313      	orrs	r3, r2
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	7812      	ldrb	r2, [r2, #0]
 8005480:	4610      	mov	r0, r2
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	6811      	ldr	r1, [r2, #0]
 8005486:	ea43 0200 	orr.w	r2, r3, r0
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	440b      	add	r3, r1
 8005490:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005494:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	3318      	adds	r3, #24
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	4413      	add	r3, r2
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	6811      	ldr	r1, [r2, #0]
 80054a8:	f043 0201 	orr.w	r2, r3, #1
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	3318      	adds	r3, #24
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	440b      	add	r3, r1
 80054b4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	e00e      	b.n	80054d8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e006      	b.n	80054d8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
  }
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3724      	adds	r7, #36	@ 0x24
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054f6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80054f8:	7afb      	ldrb	r3, [r7, #11]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d002      	beq.n	8005504 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80054fe:	7afb      	ldrb	r3, [r7, #11]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d11d      	bne.n	8005540 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3301      	adds	r3, #1
 8005516:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3301      	adds	r3, #1
 800552a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3301      	adds	r3, #1
 800553e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8005540:	68fb      	ldr	r3, [r7, #12]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800554e:	b480      	push	{r7}
 8005550:	b087      	sub	sp, #28
 8005552:	af00      	add	r7, sp, #0
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	607a      	str	r2, [r7, #4]
 800555a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005562:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005564:	7dfb      	ldrb	r3, [r7, #23]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d003      	beq.n	8005572 <HAL_CAN_GetRxMessage+0x24>
 800556a:	7dfb      	ldrb	r3, [r7, #23]
 800556c:	2b02      	cmp	r3, #2
 800556e:	f040 8103 	bne.w	8005778 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10e      	bne.n	8005596 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d116      	bne.n	80055b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e0f7      	b.n	8005786 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	f003 0303 	and.w	r3, r3, #3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d107      	bne.n	80055b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e0e8      	b.n	8005786 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	331b      	adds	r3, #27
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	4413      	add	r3, r2
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0204 	and.w	r2, r3, #4
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10c      	bne.n	80055ec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	331b      	adds	r3, #27
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	4413      	add	r3, r2
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	0d5b      	lsrs	r3, r3, #21
 80055e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	e00b      	b.n	8005604 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	331b      	adds	r3, #27
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	4413      	add	r3, r2
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	08db      	lsrs	r3, r3, #3
 80055fc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	331b      	adds	r3, #27
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	4413      	add	r3, r2
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0202 	and.w	r2, r3, #2
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	331b      	adds	r3, #27
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	4413      	add	r3, r2
 8005626:	3304      	adds	r3, #4
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2208      	movs	r2, #8
 8005636:	611a      	str	r2, [r3, #16]
 8005638:	e00b      	b.n	8005652 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	331b      	adds	r3, #27
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	4413      	add	r3, r2
 8005646:	3304      	adds	r3, #4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 020f 	and.w	r2, r3, #15
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	331b      	adds	r3, #27
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	4413      	add	r3, r2
 800565e:	3304      	adds	r3, #4
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	0a1b      	lsrs	r3, r3, #8
 8005664:	b2da      	uxtb	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	331b      	adds	r3, #27
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	4413      	add	r3, r2
 8005676:	3304      	adds	r3, #4
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	0c1b      	lsrs	r3, r3, #16
 800567c:	b29a      	uxth	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	4413      	add	r3, r2
 800568c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	b2da      	uxtb	r2, r3
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	0a1a      	lsrs	r2, r3, #8
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	3301      	adds	r3, #1
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	0c1a      	lsrs	r2, r3, #16
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	3302      	adds	r3, #2
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	0e1a      	lsrs	r2, r3, #24
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	3303      	adds	r3, #3
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	3304      	adds	r3, #4
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	4413      	add	r3, r2
 8005708:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	0a1a      	lsrs	r2, r3, #8
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	3305      	adds	r3, #5
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	4413      	add	r3, r2
 8005722:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	0c1a      	lsrs	r2, r3, #16
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	3306      	adds	r3, #6
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	4413      	add	r3, r2
 800573c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	0e1a      	lsrs	r2, r3, #24
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	3307      	adds	r3, #7
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d108      	bne.n	8005764 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0220 	orr.w	r2, r2, #32
 8005760:	60da      	str	r2, [r3, #12]
 8005762:	e007      	b.n	8005774 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0220 	orr.w	r2, r2, #32
 8005772:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005774:	2300      	movs	r3, #0
 8005776:	e006      	b.n	8005786 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
  }
}
 8005786:	4618      	mov	r0, r3
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005792:	b480      	push	{r7}
 8005794:	b085      	sub	sp, #20
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057a2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d002      	beq.n	80057b0 <HAL_CAN_ActivateNotification+0x1e>
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d109      	bne.n	80057c4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6959      	ldr	r1, [r3, #20]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	e006      	b.n	80057d2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
  }
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b08a      	sub	sp, #40	@ 0x28
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d07c      	beq.n	800591e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d023      	beq.n	8005876 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2201      	movs	r2, #1
 8005834:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f983 	bl	8005b4c <HAL_CAN_TxMailbox0CompleteCallback>
 8005846:	e016      	b.n	8005876 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b00      	cmp	r3, #0
 8005850:	d004      	beq.n	800585c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005854:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005858:	627b      	str	r3, [r7, #36]	@ 0x24
 800585a:	e00c      	b.n	8005876 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d004      	beq.n	8005870 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800586c:	627b      	str	r3, [r7, #36]	@ 0x24
 800586e:	e002      	b.n	8005876 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f989 	bl	8005b88 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800587c:	2b00      	cmp	r3, #0
 800587e:	d024      	beq.n	80058ca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005888:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f963 	bl	8005b60 <HAL_CAN_TxMailbox1CompleteCallback>
 800589a:	e016      	b.n	80058ca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d004      	beq.n	80058b0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80058a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80058ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ae:	e00c      	b.n	80058ca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d004      	beq.n	80058c4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80058c2:	e002      	b.n	80058ca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f969 	bl	8005b9c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d024      	beq.n	800591e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80058dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f943 	bl	8005b74 <HAL_CAN_TxMailbox2CompleteCallback>
 80058ee:	e016      	b.n	800591e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d004      	beq.n	8005904 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80058fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005900:	627b      	str	r3, [r7, #36]	@ 0x24
 8005902:	e00c      	b.n	800591e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d004      	beq.n	8005918 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800590e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005914:	627b      	str	r3, [r7, #36]	@ 0x24
 8005916:	e002      	b.n	800591e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f949 	bl	8005bb0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00c      	beq.n	8005942 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f003 0310 	and.w	r3, r3, #16
 800592e:	2b00      	cmp	r3, #0
 8005930:	d007      	beq.n	8005942 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005938:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2210      	movs	r2, #16
 8005940:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00b      	beq.n	8005964 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	2b00      	cmp	r3, #0
 8005954:	d006      	beq.n	8005964 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2208      	movs	r2, #8
 800595c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f930 	bl	8005bc4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d009      	beq.n	8005982 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7fb fca7 	bl	80012d0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00c      	beq.n	80059a6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f003 0310 	and.w	r3, r3, #16
 8005992:	2b00      	cmp	r3, #0
 8005994:	d007      	beq.n	80059a6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005998:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800599c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2210      	movs	r2, #16
 80059a4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00b      	beq.n	80059c8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d006      	beq.n	80059c8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2208      	movs	r2, #8
 80059c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f912 	bl	8005bec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	f003 0310 	and.w	r3, r3, #16
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d009      	beq.n	80059e6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	f003 0303 	and.w	r3, r3, #3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f8f9 	bl	8005bd8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00b      	beq.n	8005a08 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f003 0310 	and.w	r3, r3, #16
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d006      	beq.n	8005a08 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2210      	movs	r2, #16
 8005a00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f8fc 	bl	8005c00 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00b      	beq.n	8005a2a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	f003 0308 	and.w	r3, r3, #8
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d006      	beq.n	8005a2a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2208      	movs	r2, #8
 8005a22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f8f5 	bl	8005c14 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d07b      	beq.n	8005b2c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d072      	beq.n	8005b24 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d008      	beq.n	8005a5a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	f043 0301 	orr.w	r3, r3, #1
 8005a58:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d008      	beq.n	8005a76 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a70:	f043 0302 	orr.w	r3, r3, #2
 8005a74:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d008      	beq.n	8005a92 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8c:	f043 0304 	orr.w	r3, r3, #4
 8005a90:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d043      	beq.n	8005b24 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d03e      	beq.n	8005b24 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005aac:	2b60      	cmp	r3, #96	@ 0x60
 8005aae:	d02b      	beq.n	8005b08 <HAL_CAN_IRQHandler+0x32a>
 8005ab0:	2b60      	cmp	r3, #96	@ 0x60
 8005ab2:	d82e      	bhi.n	8005b12 <HAL_CAN_IRQHandler+0x334>
 8005ab4:	2b50      	cmp	r3, #80	@ 0x50
 8005ab6:	d022      	beq.n	8005afe <HAL_CAN_IRQHandler+0x320>
 8005ab8:	2b50      	cmp	r3, #80	@ 0x50
 8005aba:	d82a      	bhi.n	8005b12 <HAL_CAN_IRQHandler+0x334>
 8005abc:	2b40      	cmp	r3, #64	@ 0x40
 8005abe:	d019      	beq.n	8005af4 <HAL_CAN_IRQHandler+0x316>
 8005ac0:	2b40      	cmp	r3, #64	@ 0x40
 8005ac2:	d826      	bhi.n	8005b12 <HAL_CAN_IRQHandler+0x334>
 8005ac4:	2b30      	cmp	r3, #48	@ 0x30
 8005ac6:	d010      	beq.n	8005aea <HAL_CAN_IRQHandler+0x30c>
 8005ac8:	2b30      	cmp	r3, #48	@ 0x30
 8005aca:	d822      	bhi.n	8005b12 <HAL_CAN_IRQHandler+0x334>
 8005acc:	2b10      	cmp	r3, #16
 8005ace:	d002      	beq.n	8005ad6 <HAL_CAN_IRQHandler+0x2f8>
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	d005      	beq.n	8005ae0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005ad4:	e01d      	b.n	8005b12 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	f043 0308 	orr.w	r3, r3, #8
 8005adc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005ade:	e019      	b.n	8005b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae2:	f043 0310 	orr.w	r3, r3, #16
 8005ae6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005ae8:	e014      	b.n	8005b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aec:	f043 0320 	orr.w	r3, r3, #32
 8005af0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005af2:	e00f      	b.n	8005b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005afa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005afc:	e00a      	b.n	8005b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b04:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b06:	e005      	b.n	8005b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b0e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b10:	e000      	b.n	8005b14 <HAL_CAN_IRQHandler+0x336>
            break;
 8005b12:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005b22:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2204      	movs	r2, #4
 8005b2a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d008      	beq.n	8005b44 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f872 	bl	8005c28 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005b44:	bf00      	nop
 8005b46:	3728      	adds	r7, #40	@ 0x28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c80 <__NVIC_SetPriorityGrouping+0x44>)
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005c58:	4013      	ands	r3, r2
 8005c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c6e:	4a04      	ldr	r2, [pc, #16]	@ (8005c80 <__NVIC_SetPriorityGrouping+0x44>)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	60d3      	str	r3, [r2, #12]
}
 8005c74:	bf00      	nop
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	e000ed00 	.word	0xe000ed00

08005c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c88:	4b04      	ldr	r3, [pc, #16]	@ (8005c9c <__NVIC_GetPriorityGrouping+0x18>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	0a1b      	lsrs	r3, r3, #8
 8005c8e:	f003 0307 	and.w	r3, r3, #7
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	e000ed00 	.word	0xe000ed00

08005ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	db0b      	blt.n	8005cca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cb2:	79fb      	ldrb	r3, [r7, #7]
 8005cb4:	f003 021f 	and.w	r2, r3, #31
 8005cb8:	4907      	ldr	r1, [pc, #28]	@ (8005cd8 <__NVIC_EnableIRQ+0x38>)
 8005cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cbe:	095b      	lsrs	r3, r3, #5
 8005cc0:	2001      	movs	r0, #1
 8005cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8005cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	e000e100 	.word	0xe000e100

08005cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	6039      	str	r1, [r7, #0]
 8005ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	db0a      	blt.n	8005d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	490c      	ldr	r1, [pc, #48]	@ (8005d28 <__NVIC_SetPriority+0x4c>)
 8005cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfa:	0112      	lsls	r2, r2, #4
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	440b      	add	r3, r1
 8005d00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d04:	e00a      	b.n	8005d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	4908      	ldr	r1, [pc, #32]	@ (8005d2c <__NVIC_SetPriority+0x50>)
 8005d0c:	79fb      	ldrb	r3, [r7, #7]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	3b04      	subs	r3, #4
 8005d14:	0112      	lsls	r2, r2, #4
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	440b      	add	r3, r1
 8005d1a:	761a      	strb	r2, [r3, #24]
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	e000e100 	.word	0xe000e100
 8005d2c:	e000ed00 	.word	0xe000ed00

08005d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b089      	sub	sp, #36	@ 0x24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	f1c3 0307 	rsb	r3, r3, #7
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	bf28      	it	cs
 8005d4e:	2304      	movcs	r3, #4
 8005d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	3304      	adds	r3, #4
 8005d56:	2b06      	cmp	r3, #6
 8005d58:	d902      	bls.n	8005d60 <NVIC_EncodePriority+0x30>
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	3b03      	subs	r3, #3
 8005d5e:	e000      	b.n	8005d62 <NVIC_EncodePriority+0x32>
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d64:	f04f 32ff 	mov.w	r2, #4294967295
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	43da      	mvns	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	401a      	ands	r2, r3
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d78:	f04f 31ff 	mov.w	r1, #4294967295
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d82:	43d9      	mvns	r1, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d88:	4313      	orrs	r3, r2
         );
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3724      	adds	r7, #36	@ 0x24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b082      	sub	sp, #8
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff ff4c 	bl	8005c3c <__NVIC_SetPriorityGrouping>
}
 8005da4:	bf00      	nop
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005dbe:	f7ff ff61 	bl	8005c84 <__NVIC_GetPriorityGrouping>
 8005dc2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	68b9      	ldr	r1, [r7, #8]
 8005dc8:	6978      	ldr	r0, [r7, #20]
 8005dca:	f7ff ffb1 	bl	8005d30 <NVIC_EncodePriority>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff ff80 	bl	8005cdc <__NVIC_SetPriority>
}
 8005ddc:	bf00      	nop
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	4603      	mov	r3, r0
 8005dec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff ff54 	bl	8005ca0 <__NVIC_EnableIRQ>
}
 8005df8:	bf00      	nop
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e098      	b.n	8005f44 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	461a      	mov	r2, r3
 8005e18:	4b4d      	ldr	r3, [pc, #308]	@ (8005f50 <HAL_DMA_Init+0x150>)
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d80f      	bhi.n	8005e3e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	4b4b      	ldr	r3, [pc, #300]	@ (8005f54 <HAL_DMA_Init+0x154>)
 8005e26:	4413      	add	r3, r2
 8005e28:	4a4b      	ldr	r2, [pc, #300]	@ (8005f58 <HAL_DMA_Init+0x158>)
 8005e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2e:	091b      	lsrs	r3, r3, #4
 8005e30:	009a      	lsls	r2, r3, #2
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a48      	ldr	r2, [pc, #288]	@ (8005f5c <HAL_DMA_Init+0x15c>)
 8005e3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8005e3c:	e00e      	b.n	8005e5c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	4b46      	ldr	r3, [pc, #280]	@ (8005f60 <HAL_DMA_Init+0x160>)
 8005e46:	4413      	add	r3, r2
 8005e48:	4a43      	ldr	r2, [pc, #268]	@ (8005f58 <HAL_DMA_Init+0x158>)
 8005e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4e:	091b      	lsrs	r3, r3, #4
 8005e50:	009a      	lsls	r2, r3, #2
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a42      	ldr	r2, [pc, #264]	@ (8005f64 <HAL_DMA_Init+0x164>)
 8005e5a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005e72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005eb6:	d039      	beq.n	8005f2c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebc:	4a27      	ldr	r2, [pc, #156]	@ (8005f5c <HAL_DMA_Init+0x15c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d11a      	bne.n	8005ef8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005ec2:	4b29      	ldr	r3, [pc, #164]	@ (8005f68 <HAL_DMA_Init+0x168>)
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eca:	f003 031c 	and.w	r3, r3, #28
 8005ece:	210f      	movs	r1, #15
 8005ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed4:	43db      	mvns	r3, r3
 8005ed6:	4924      	ldr	r1, [pc, #144]	@ (8005f68 <HAL_DMA_Init+0x168>)
 8005ed8:	4013      	ands	r3, r2
 8005eda:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005edc:	4b22      	ldr	r3, [pc, #136]	@ (8005f68 <HAL_DMA_Init+0x168>)
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6859      	ldr	r1, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee8:	f003 031c 	and.w	r3, r3, #28
 8005eec:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef0:	491d      	ldr	r1, [pc, #116]	@ (8005f68 <HAL_DMA_Init+0x168>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	600b      	str	r3, [r1, #0]
 8005ef6:	e019      	b.n	8005f2c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8005f6c <HAL_DMA_Init+0x16c>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f00:	f003 031c 	and.w	r3, r3, #28
 8005f04:	210f      	movs	r1, #15
 8005f06:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0a:	43db      	mvns	r3, r3
 8005f0c:	4917      	ldr	r1, [pc, #92]	@ (8005f6c <HAL_DMA_Init+0x16c>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005f12:	4b16      	ldr	r3, [pc, #88]	@ (8005f6c <HAL_DMA_Init+0x16c>)
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6859      	ldr	r1, [r3, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1e:	f003 031c 	and.w	r3, r3, #28
 8005f22:	fa01 f303 	lsl.w	r3, r1, r3
 8005f26:	4911      	ldr	r1, [pc, #68]	@ (8005f6c <HAL_DMA_Init+0x16c>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	40020407 	.word	0x40020407
 8005f54:	bffdfff8 	.word	0xbffdfff8
 8005f58:	cccccccd 	.word	0xcccccccd
 8005f5c:	40020000 	.word	0x40020000
 8005f60:	bffdfbf8 	.word	0xbffdfbf8
 8005f64:	40020400 	.word	0x40020400
 8005f68:	400200a8 	.word	0x400200a8
 8005f6c:	400204a8 	.word	0x400204a8

08005f70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d101      	bne.n	8005f90 <HAL_DMA_Start_IT+0x20>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e04b      	b.n	8006028 <HAL_DMA_Start_IT+0xb8>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d13a      	bne.n	800601a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0201 	bic.w	r2, r2, #1
 8005fc0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	68b9      	ldr	r1, [r7, #8]
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 f95f 	bl	800628c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d008      	beq.n	8005fe8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 020e 	orr.w	r2, r2, #14
 8005fe4:	601a      	str	r2, [r3, #0]
 8005fe6:	e00f      	b.n	8006008 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0204 	bic.w	r2, r2, #4
 8005ff6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 020a 	orr.w	r2, r2, #10
 8006006:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f042 0201 	orr.w	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	e005      	b.n	8006026 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006022:	2302      	movs	r3, #2
 8006024:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006026:	7dfb      	ldrb	r3, [r7, #23]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3718      	adds	r7, #24
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d008      	beq.n	800605a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2204      	movs	r2, #4
 800604c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e022      	b.n	80060a0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 020e 	bic.w	r2, r2, #14
 8006068:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0201 	bic.w	r2, r2, #1
 8006078:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607e:	f003 021c 	and.w	r2, r3, #28
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006086:	2101      	movs	r1, #1
 8006088:	fa01 f202 	lsl.w	r2, r1, r2
 800608c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800609e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d005      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2204      	movs	r2, #4
 80060c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	73fb      	strb	r3, [r7, #15]
 80060ce:	e029      	b.n	8006124 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 020e 	bic.w	r2, r2, #14
 80060de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0201 	bic.w	r2, r2, #1
 80060ee:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060f4:	f003 021c 	and.w	r2, r3, #28
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fc:	2101      	movs	r1, #1
 80060fe:	fa01 f202 	lsl.w	r2, r1, r2
 8006102:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	4798      	blx	r3
    }
  }
  return status;
 8006124:	7bfb      	ldrb	r3, [r7, #15]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800614a:	f003 031c 	and.w	r3, r3, #28
 800614e:	2204      	movs	r2, #4
 8006150:	409a      	lsls	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4013      	ands	r3, r2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d026      	beq.n	80061a8 <HAL_DMA_IRQHandler+0x7a>
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d021      	beq.n	80061a8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	d107      	bne.n	8006182 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0204 	bic.w	r2, r2, #4
 8006180:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006186:	f003 021c 	and.w	r2, r3, #28
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618e:	2104      	movs	r1, #4
 8006190:	fa01 f202 	lsl.w	r2, r1, r2
 8006194:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800619a:	2b00      	cmp	r3, #0
 800619c:	d071      	beq.n	8006282 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80061a6:	e06c      	b.n	8006282 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ac:	f003 031c 	and.w	r3, r3, #28
 80061b0:	2202      	movs	r2, #2
 80061b2:	409a      	lsls	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4013      	ands	r3, r2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d02e      	beq.n	800621a <HAL_DMA_IRQHandler+0xec>
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d029      	beq.n	800621a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10b      	bne.n	80061ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 020a 	bic.w	r2, r2, #10
 80061e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f0:	f003 021c 	and.w	r2, r3, #28
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f8:	2102      	movs	r1, #2
 80061fa:	fa01 f202 	lsl.w	r2, r1, r2
 80061fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620c:	2b00      	cmp	r3, #0
 800620e:	d038      	beq.n	8006282 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006218:	e033      	b.n	8006282 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800621e:	f003 031c 	and.w	r3, r3, #28
 8006222:	2208      	movs	r2, #8
 8006224:	409a      	lsls	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4013      	ands	r3, r2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d02a      	beq.n	8006284 <HAL_DMA_IRQHandler+0x156>
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f003 0308 	and.w	r3, r3, #8
 8006234:	2b00      	cmp	r3, #0
 8006236:	d025      	beq.n	8006284 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 020e 	bic.w	r2, r2, #14
 8006246:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800624c:	f003 021c 	and.w	r2, r3, #28
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006254:	2101      	movs	r1, #1
 8006256:	fa01 f202 	lsl.w	r2, r1, r2
 800625a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006276:	2b00      	cmp	r3, #0
 8006278:	d004      	beq.n	8006284 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006282:	bf00      	nop
 8006284:	bf00      	nop
}
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
 8006298:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800629e:	f003 021c 	and.w	r2, r3, #28
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a6:	2101      	movs	r1, #1
 80062a8:	fa01 f202 	lsl.w	r2, r1, r2
 80062ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	2b10      	cmp	r3, #16
 80062bc:	d108      	bne.n	80062d0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80062ce:	e007      	b.n	80062e0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	60da      	str	r2, [r3, #12]
}
 80062e0:	bf00      	nop
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80062f6:	2300      	movs	r3, #0
 80062f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062fa:	e166      	b.n	80065ca <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	2101      	movs	r1, #1
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	fa01 f303 	lsl.w	r3, r1, r3
 8006308:	4013      	ands	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 8158 	beq.w	80065c4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f003 0303 	and.w	r3, r3, #3
 800631c:	2b01      	cmp	r3, #1
 800631e:	d005      	beq.n	800632c <HAL_GPIO_Init+0x40>
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f003 0303 	and.w	r3, r3, #3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d130      	bne.n	800638e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	2203      	movs	r2, #3
 8006338:	fa02 f303 	lsl.w	r3, r2, r3
 800633c:	43db      	mvns	r3, r3
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	4013      	ands	r3, r2
 8006342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	fa02 f303 	lsl.w	r3, r2, r3
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006362:	2201      	movs	r2, #1
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	fa02 f303 	lsl.w	r3, r2, r3
 800636a:	43db      	mvns	r3, r3
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	4013      	ands	r3, r2
 8006370:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	091b      	lsrs	r3, r3, #4
 8006378:	f003 0201 	and.w	r2, r3, #1
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	fa02 f303 	lsl.w	r3, r2, r3
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	4313      	orrs	r3, r2
 8006386:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f003 0303 	and.w	r3, r3, #3
 8006396:	2b03      	cmp	r3, #3
 8006398:	d017      	beq.n	80063ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	2203      	movs	r2, #3
 80063a6:	fa02 f303 	lsl.w	r3, r2, r3
 80063aa:	43db      	mvns	r3, r3
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	4013      	ands	r3, r2
 80063b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	fa02 f303 	lsl.w	r3, r2, r3
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f003 0303 	and.w	r3, r3, #3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d123      	bne.n	800641e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	08da      	lsrs	r2, r3, #3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	3208      	adds	r2, #8
 80063de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	220f      	movs	r2, #15
 80063ee:	fa02 f303 	lsl.w	r3, r2, r3
 80063f2:	43db      	mvns	r3, r3
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	4013      	ands	r3, r2
 80063f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	691a      	ldr	r2, [r3, #16]
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f003 0307 	and.w	r3, r3, #7
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	fa02 f303 	lsl.w	r3, r2, r3
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4313      	orrs	r3, r2
 800640e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	08da      	lsrs	r2, r3, #3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3208      	adds	r2, #8
 8006418:	6939      	ldr	r1, [r7, #16]
 800641a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	2203      	movs	r2, #3
 800642a:	fa02 f303 	lsl.w	r3, r2, r3
 800642e:	43db      	mvns	r3, r3
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	4013      	ands	r3, r2
 8006434:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f003 0203 	and.w	r2, r3, #3
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	fa02 f303 	lsl.w	r3, r2, r3
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	4313      	orrs	r3, r2
 800644a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 80b2 	beq.w	80065c4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006460:	4b61      	ldr	r3, [pc, #388]	@ (80065e8 <HAL_GPIO_Init+0x2fc>)
 8006462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006464:	4a60      	ldr	r2, [pc, #384]	@ (80065e8 <HAL_GPIO_Init+0x2fc>)
 8006466:	f043 0301 	orr.w	r3, r3, #1
 800646a:	6613      	str	r3, [r2, #96]	@ 0x60
 800646c:	4b5e      	ldr	r3, [pc, #376]	@ (80065e8 <HAL_GPIO_Init+0x2fc>)
 800646e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	60bb      	str	r3, [r7, #8]
 8006476:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006478:	4a5c      	ldr	r2, [pc, #368]	@ (80065ec <HAL_GPIO_Init+0x300>)
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	089b      	lsrs	r3, r3, #2
 800647e:	3302      	adds	r3, #2
 8006480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006484:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f003 0303 	and.w	r3, r3, #3
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	220f      	movs	r2, #15
 8006490:	fa02 f303 	lsl.w	r3, r2, r3
 8006494:	43db      	mvns	r3, r3
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	4013      	ands	r3, r2
 800649a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80064a2:	d02b      	beq.n	80064fc <HAL_GPIO_Init+0x210>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a52      	ldr	r2, [pc, #328]	@ (80065f0 <HAL_GPIO_Init+0x304>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d025      	beq.n	80064f8 <HAL_GPIO_Init+0x20c>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a51      	ldr	r2, [pc, #324]	@ (80065f4 <HAL_GPIO_Init+0x308>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d01f      	beq.n	80064f4 <HAL_GPIO_Init+0x208>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a50      	ldr	r2, [pc, #320]	@ (80065f8 <HAL_GPIO_Init+0x30c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d019      	beq.n	80064f0 <HAL_GPIO_Init+0x204>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a4f      	ldr	r2, [pc, #316]	@ (80065fc <HAL_GPIO_Init+0x310>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d013      	beq.n	80064ec <HAL_GPIO_Init+0x200>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a4e      	ldr	r2, [pc, #312]	@ (8006600 <HAL_GPIO_Init+0x314>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00d      	beq.n	80064e8 <HAL_GPIO_Init+0x1fc>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a4d      	ldr	r2, [pc, #308]	@ (8006604 <HAL_GPIO_Init+0x318>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d007      	beq.n	80064e4 <HAL_GPIO_Init+0x1f8>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a4c      	ldr	r2, [pc, #304]	@ (8006608 <HAL_GPIO_Init+0x31c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d101      	bne.n	80064e0 <HAL_GPIO_Init+0x1f4>
 80064dc:	2307      	movs	r3, #7
 80064de:	e00e      	b.n	80064fe <HAL_GPIO_Init+0x212>
 80064e0:	2308      	movs	r3, #8
 80064e2:	e00c      	b.n	80064fe <HAL_GPIO_Init+0x212>
 80064e4:	2306      	movs	r3, #6
 80064e6:	e00a      	b.n	80064fe <HAL_GPIO_Init+0x212>
 80064e8:	2305      	movs	r3, #5
 80064ea:	e008      	b.n	80064fe <HAL_GPIO_Init+0x212>
 80064ec:	2304      	movs	r3, #4
 80064ee:	e006      	b.n	80064fe <HAL_GPIO_Init+0x212>
 80064f0:	2303      	movs	r3, #3
 80064f2:	e004      	b.n	80064fe <HAL_GPIO_Init+0x212>
 80064f4:	2302      	movs	r3, #2
 80064f6:	e002      	b.n	80064fe <HAL_GPIO_Init+0x212>
 80064f8:	2301      	movs	r3, #1
 80064fa:	e000      	b.n	80064fe <HAL_GPIO_Init+0x212>
 80064fc:	2300      	movs	r3, #0
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	f002 0203 	and.w	r2, r2, #3
 8006504:	0092      	lsls	r2, r2, #2
 8006506:	4093      	lsls	r3, r2
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	4313      	orrs	r3, r2
 800650c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800650e:	4937      	ldr	r1, [pc, #220]	@ (80065ec <HAL_GPIO_Init+0x300>)
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	089b      	lsrs	r3, r3, #2
 8006514:	3302      	adds	r3, #2
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800651c:	4b3b      	ldr	r3, [pc, #236]	@ (800660c <HAL_GPIO_Init+0x320>)
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	43db      	mvns	r3, r3
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	4013      	ands	r3, r2
 800652a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4313      	orrs	r3, r2
 800653e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006540:	4a32      	ldr	r2, [pc, #200]	@ (800660c <HAL_GPIO_Init+0x320>)
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006546:	4b31      	ldr	r3, [pc, #196]	@ (800660c <HAL_GPIO_Init+0x320>)
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	43db      	mvns	r3, r3
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4013      	ands	r3, r2
 8006554:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4313      	orrs	r3, r2
 8006568:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800656a:	4a28      	ldr	r2, [pc, #160]	@ (800660c <HAL_GPIO_Init+0x320>)
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006570:	4b26      	ldr	r3, [pc, #152]	@ (800660c <HAL_GPIO_Init+0x320>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	43db      	mvns	r3, r3
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	4013      	ands	r3, r2
 800657e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d003      	beq.n	8006594 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4313      	orrs	r3, r2
 8006592:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006594:	4a1d      	ldr	r2, [pc, #116]	@ (800660c <HAL_GPIO_Init+0x320>)
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800659a:	4b1c      	ldr	r3, [pc, #112]	@ (800660c <HAL_GPIO_Init+0x320>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	43db      	mvns	r3, r3
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	4013      	ands	r3, r2
 80065a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80065be:	4a13      	ldr	r2, [pc, #76]	@ (800660c <HAL_GPIO_Init+0x320>)
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	3301      	adds	r3, #1
 80065c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	fa22 f303 	lsr.w	r3, r2, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f47f ae91 	bne.w	80062fc <HAL_GPIO_Init+0x10>
  }
}
 80065da:	bf00      	nop
 80065dc:	bf00      	nop
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	40021000 	.word	0x40021000
 80065ec:	40010000 	.word	0x40010000
 80065f0:	48000400 	.word	0x48000400
 80065f4:	48000800 	.word	0x48000800
 80065f8:	48000c00 	.word	0x48000c00
 80065fc:	48001000 	.word	0x48001000
 8006600:	48001400 	.word	0x48001400
 8006604:	48001800 	.word	0x48001800
 8006608:	48001c00 	.word	0x48001c00
 800660c:	40010400 	.word	0x40010400

08006610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	460b      	mov	r3, r1
 800661a:	807b      	strh	r3, [r7, #2]
 800661c:	4613      	mov	r3, r2
 800661e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006620:	787b      	ldrb	r3, [r7, #1]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006626:	887a      	ldrh	r2, [r7, #2]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800662c:	e002      	b.n	8006634 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800662e:	887a      	ldrh	r2, [r7, #2]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006652:	887a      	ldrh	r2, [r7, #2]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4013      	ands	r3, r2
 8006658:	041a      	lsls	r2, r3, #16
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	43d9      	mvns	r1, r3
 800665e:	887b      	ldrh	r3, [r7, #2]
 8006660:	400b      	ands	r3, r1
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	619a      	str	r2, [r3, #24]
}
 8006668:	bf00      	nop
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800667e:	4b08      	ldr	r3, [pc, #32]	@ (80066a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006680:	695a      	ldr	r2, [r3, #20]
 8006682:	88fb      	ldrh	r3, [r7, #6]
 8006684:	4013      	ands	r3, r2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d006      	beq.n	8006698 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800668a:	4a05      	ldr	r2, [pc, #20]	@ (80066a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800668c:	88fb      	ldrh	r3, [r7, #6]
 800668e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006690:	88fb      	ldrh	r3, [r7, #6]
 8006692:	4618      	mov	r0, r3
 8006694:	f7fa fe0c 	bl	80012b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006698:	bf00      	nop
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	40010400 	.word	0x40010400

080066a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e08d      	b.n	80067d2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d106      	bne.n	80066d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fb fcf4 	bl	80020b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2224      	movs	r2, #36	@ 0x24
 80066d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0201 	bic.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80066f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006704:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d107      	bne.n	800671e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800671a:	609a      	str	r2, [r3, #8]
 800671c:	e006      	b.n	800672c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800672a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	2b02      	cmp	r3, #2
 8006732:	d108      	bne.n	8006746 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006742:	605a      	str	r2, [r3, #4]
 8006744:	e007      	b.n	8006756 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006754:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	6812      	ldr	r2, [r2, #0]
 8006760:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006764:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006768:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006778:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	691a      	ldr	r2, [r3, #16]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	69d9      	ldr	r1, [r3, #28]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1a      	ldr	r2, [r3, #32]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0201 	orr.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2220      	movs	r2, #32
 80067be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
	...

080067dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af02      	add	r7, sp, #8
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	4608      	mov	r0, r1
 80067e6:	4611      	mov	r1, r2
 80067e8:	461a      	mov	r2, r3
 80067ea:	4603      	mov	r3, r0
 80067ec:	817b      	strh	r3, [r7, #10]
 80067ee:	460b      	mov	r3, r1
 80067f0:	813b      	strh	r3, [r7, #8]
 80067f2:	4613      	mov	r3, r2
 80067f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b20      	cmp	r3, #32
 8006800:	f040 80f9 	bne.w	80069f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <HAL_I2C_Mem_Write+0x34>
 800680a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800680c:	2b00      	cmp	r3, #0
 800680e:	d105      	bne.n	800681c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006816:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e0ed      	b.n	80069f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006822:	2b01      	cmp	r3, #1
 8006824:	d101      	bne.n	800682a <HAL_I2C_Mem_Write+0x4e>
 8006826:	2302      	movs	r3, #2
 8006828:	e0e6      	b.n	80069f8 <HAL_I2C_Mem_Write+0x21c>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006832:	f7fc ff63 	bl	80036fc <HAL_GetTick>
 8006836:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	2319      	movs	r3, #25
 800683e:	2201      	movs	r2, #1
 8006840:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 fac3 	bl	8006dd0 <I2C_WaitOnFlagUntilTimeout>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e0d1      	b.n	80069f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2221      	movs	r2, #33	@ 0x21
 8006858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2240      	movs	r2, #64	@ 0x40
 8006860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a3a      	ldr	r2, [r7, #32]
 800686e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006874:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800687c:	88f8      	ldrh	r0, [r7, #6]
 800687e:	893a      	ldrh	r2, [r7, #8]
 8006880:	8979      	ldrh	r1, [r7, #10]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	9301      	str	r3, [sp, #4]
 8006886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	4603      	mov	r3, r0
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 f9d3 	bl	8006c38 <I2C_RequestMemoryWrite>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d005      	beq.n	80068a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e0a9      	b.n	80069f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	2bff      	cmp	r3, #255	@ 0xff
 80068ac:	d90e      	bls.n	80068cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	22ff      	movs	r2, #255	@ 0xff
 80068b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	8979      	ldrh	r1, [r7, #10]
 80068bc:	2300      	movs	r3, #0
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 fc47 	bl	8007158 <I2C_TransferConfig>
 80068ca:	e00f      	b.n	80068ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	8979      	ldrh	r1, [r7, #10]
 80068de:	2300      	movs	r3, #0
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 fc36 	bl	8007158 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 fac6 	bl	8006e82 <I2C_WaitOnTXISFlagUntilTimeout>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e07b      	b.n	80069f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006904:	781a      	ldrb	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800691a:	b29b      	uxth	r3, r3
 800691c:	3b01      	subs	r3, #1
 800691e:	b29a      	uxth	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006928:	3b01      	subs	r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006934:	b29b      	uxth	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d034      	beq.n	80069a4 <HAL_I2C_Mem_Write+0x1c8>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800693e:	2b00      	cmp	r3, #0
 8006940:	d130      	bne.n	80069a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006948:	2200      	movs	r2, #0
 800694a:	2180      	movs	r1, #128	@ 0x80
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 fa3f 	bl	8006dd0 <I2C_WaitOnFlagUntilTimeout>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e04d      	b.n	80069f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006960:	b29b      	uxth	r3, r3
 8006962:	2bff      	cmp	r3, #255	@ 0xff
 8006964:	d90e      	bls.n	8006984 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	22ff      	movs	r2, #255	@ 0xff
 800696a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006970:	b2da      	uxtb	r2, r3
 8006972:	8979      	ldrh	r1, [r7, #10]
 8006974:	2300      	movs	r3, #0
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f000 fbeb 	bl	8007158 <I2C_TransferConfig>
 8006982:	e00f      	b.n	80069a4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006988:	b29a      	uxth	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006992:	b2da      	uxtb	r2, r3
 8006994:	8979      	ldrh	r1, [r7, #10]
 8006996:	2300      	movs	r3, #0
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 fbda 	bl	8007158 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d19e      	bne.n	80068ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 faac 	bl	8006f10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e01a      	b.n	80069f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2220      	movs	r2, #32
 80069c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6859      	ldr	r1, [r3, #4]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006a00 <HAL_I2C_Mem_Write+0x224>)
 80069d6:	400b      	ands	r3, r1
 80069d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2220      	movs	r2, #32
 80069de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e000      	b.n	80069f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80069f6:	2302      	movs	r3, #2
  }
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	fe00e800 	.word	0xfe00e800

08006a04 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b088      	sub	sp, #32
 8006a08:	af02      	add	r7, sp, #8
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	4608      	mov	r0, r1
 8006a0e:	4611      	mov	r1, r2
 8006a10:	461a      	mov	r2, r3
 8006a12:	4603      	mov	r3, r0
 8006a14:	817b      	strh	r3, [r7, #10]
 8006a16:	460b      	mov	r3, r1
 8006a18:	813b      	strh	r3, [r7, #8]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	f040 80fd 	bne.w	8006c26 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <HAL_I2C_Mem_Read+0x34>
 8006a32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d105      	bne.n	8006a44 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a3e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e0f1      	b.n	8006c28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d101      	bne.n	8006a52 <HAL_I2C_Mem_Read+0x4e>
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e0ea      	b.n	8006c28 <HAL_I2C_Mem_Read+0x224>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a5a:	f7fc fe4f 	bl	80036fc <HAL_GetTick>
 8006a5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	2319      	movs	r3, #25
 8006a66:	2201      	movs	r2, #1
 8006a68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 f9af 	bl	8006dd0 <I2C_WaitOnFlagUntilTimeout>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e0d5      	b.n	8006c28 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2222      	movs	r2, #34	@ 0x22
 8006a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2240      	movs	r2, #64	@ 0x40
 8006a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a3a      	ldr	r2, [r7, #32]
 8006a96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006aa4:	88f8      	ldrh	r0, [r7, #6]
 8006aa6:	893a      	ldrh	r2, [r7, #8]
 8006aa8:	8979      	ldrh	r1, [r7, #10]
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	9301      	str	r3, [sp, #4]
 8006aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 f913 	bl	8006ce0 <I2C_RequestMemoryRead>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d005      	beq.n	8006acc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e0ad      	b.n	8006c28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	2bff      	cmp	r3, #255	@ 0xff
 8006ad4:	d90e      	bls.n	8006af4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	8979      	ldrh	r1, [r7, #10]
 8006ae4:	4b52      	ldr	r3, [pc, #328]	@ (8006c30 <HAL_I2C_Mem_Read+0x22c>)
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 fb33 	bl	8007158 <I2C_TransferConfig>
 8006af2:	e00f      	b.n	8006b14 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b02:	b2da      	uxtb	r2, r3
 8006b04:	8979      	ldrh	r1, [r7, #10]
 8006b06:	4b4a      	ldr	r3, [pc, #296]	@ (8006c30 <HAL_I2C_Mem_Read+0x22c>)
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f000 fb22 	bl	8007158 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	2104      	movs	r1, #4
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 f956 	bl	8006dd0 <I2C_WaitOnFlagUntilTimeout>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e07c      	b.n	8006c28 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b38:	b2d2      	uxtb	r2, r2
 8006b3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d034      	beq.n	8006bd4 <HAL_I2C_Mem_Read+0x1d0>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d130      	bne.n	8006bd4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2180      	movs	r1, #128	@ 0x80
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 f927 	bl	8006dd0 <I2C_WaitOnFlagUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e04d      	b.n	8006c28 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	2bff      	cmp	r3, #255	@ 0xff
 8006b94:	d90e      	bls.n	8006bb4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	8979      	ldrh	r1, [r7, #10]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 fad3 	bl	8007158 <I2C_TransferConfig>
 8006bb2:	e00f      	b.n	8006bd4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	8979      	ldrh	r1, [r7, #10]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 fac2 	bl	8007158 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d19a      	bne.n	8006b14 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 f994 	bl	8006f10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e01a      	b.n	8006c28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6859      	ldr	r1, [r3, #4]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	4b0b      	ldr	r3, [pc, #44]	@ (8006c34 <HAL_I2C_Mem_Read+0x230>)
 8006c06:	400b      	ands	r3, r1
 8006c08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	e000      	b.n	8006c28 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006c26:	2302      	movs	r3, #2
  }
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	80002400 	.word	0x80002400
 8006c34:	fe00e800 	.word	0xfe00e800

08006c38 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af02      	add	r7, sp, #8
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	4608      	mov	r0, r1
 8006c42:	4611      	mov	r1, r2
 8006c44:	461a      	mov	r2, r3
 8006c46:	4603      	mov	r3, r0
 8006c48:	817b      	strh	r3, [r7, #10]
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	813b      	strh	r3, [r7, #8]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	b2da      	uxtb	r2, r3
 8006c56:	8979      	ldrh	r1, [r7, #10]
 8006c58:	4b20      	ldr	r3, [pc, #128]	@ (8006cdc <I2C_RequestMemoryWrite+0xa4>)
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 fa79 	bl	8007158 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c66:	69fa      	ldr	r2, [r7, #28]
 8006c68:	69b9      	ldr	r1, [r7, #24]
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 f909 	bl	8006e82 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e02c      	b.n	8006cd4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c7a:	88fb      	ldrh	r3, [r7, #6]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d105      	bne.n	8006c8c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c80:	893b      	ldrh	r3, [r7, #8]
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c8a:	e015      	b.n	8006cb8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c8c:	893b      	ldrh	r3, [r7, #8]
 8006c8e:	0a1b      	lsrs	r3, r3, #8
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	69b9      	ldr	r1, [r7, #24]
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 f8ef 	bl	8006e82 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e012      	b.n	8006cd4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cae:	893b      	ldrh	r3, [r7, #8]
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	2180      	movs	r1, #128	@ 0x80
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 f884 	bl	8006dd0 <I2C_WaitOnFlagUntilTimeout>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	80002000 	.word	0x80002000

08006ce0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	4608      	mov	r0, r1
 8006cea:	4611      	mov	r1, r2
 8006cec:	461a      	mov	r2, r3
 8006cee:	4603      	mov	r3, r0
 8006cf0:	817b      	strh	r3, [r7, #10]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	813b      	strh	r3, [r7, #8]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006cfa:	88fb      	ldrh	r3, [r7, #6]
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	8979      	ldrh	r1, [r7, #10]
 8006d00:	4b20      	ldr	r3, [pc, #128]	@ (8006d84 <I2C_RequestMemoryRead+0xa4>)
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	2300      	movs	r3, #0
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 fa26 	bl	8007158 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d0c:	69fa      	ldr	r2, [r7, #28]
 8006d0e:	69b9      	ldr	r1, [r7, #24]
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f000 f8b6 	bl	8006e82 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e02c      	b.n	8006d7a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d20:	88fb      	ldrh	r3, [r7, #6]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d105      	bne.n	8006d32 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d26:	893b      	ldrh	r3, [r7, #8]
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d30:	e015      	b.n	8006d5e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d32:	893b      	ldrh	r3, [r7, #8]
 8006d34:	0a1b      	lsrs	r3, r3, #8
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d40:	69fa      	ldr	r2, [r7, #28]
 8006d42:	69b9      	ldr	r1, [r7, #24]
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 f89c 	bl	8006e82 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e012      	b.n	8006d7a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d54:	893b      	ldrh	r3, [r7, #8]
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	2200      	movs	r2, #0
 8006d66:	2140      	movs	r1, #64	@ 0x40
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f000 f831 	bl	8006dd0 <I2C_WaitOnFlagUntilTimeout>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e000      	b.n	8006d7a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	80002000 	.word	0x80002000

08006d88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d103      	bne.n	8006da6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2200      	movs	r2, #0
 8006da4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d007      	beq.n	8006dc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	699a      	ldr	r2, [r3, #24]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f042 0201 	orr.w	r2, r2, #1
 8006dc2:	619a      	str	r2, [r3, #24]
  }
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	603b      	str	r3, [r7, #0]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006de0:	e03b      	b.n	8006e5a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 f8d6 	bl	8006f98 <I2C_IsErrorOccurred>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e041      	b.n	8006e7a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfc:	d02d      	beq.n	8006e5a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dfe:	f7fc fc7d 	bl	80036fc <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d302      	bcc.n	8006e14 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d122      	bne.n	8006e5a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699a      	ldr	r2, [r3, #24]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	bf0c      	ite	eq
 8006e24:	2301      	moveq	r3, #1
 8006e26:	2300      	movne	r3, #0
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	79fb      	ldrb	r3, [r7, #7]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d113      	bne.n	8006e5a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e36:	f043 0220 	orr.w	r2, r3, #32
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e00f      	b.n	8006e7a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	699a      	ldr	r2, [r3, #24]
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	4013      	ands	r3, r2
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	bf0c      	ite	eq
 8006e6a:	2301      	moveq	r3, #1
 8006e6c:	2300      	movne	r3, #0
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	461a      	mov	r2, r3
 8006e72:	79fb      	ldrb	r3, [r7, #7]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d0b4      	beq.n	8006de2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	60f8      	str	r0, [r7, #12]
 8006e8a:	60b9      	str	r1, [r7, #8]
 8006e8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e8e:	e033      	b.n	8006ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	68b9      	ldr	r1, [r7, #8]
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 f87f 	bl	8006f98 <I2C_IsErrorOccurred>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e031      	b.n	8006f08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eaa:	d025      	beq.n	8006ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eac:	f7fc fc26 	bl	80036fc <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d302      	bcc.n	8006ec2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d11a      	bne.n	8006ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d013      	beq.n	8006ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ed4:	f043 0220 	orr.w	r2, r3, #32
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e007      	b.n	8006f08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d1c4      	bne.n	8006e90 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f1c:	e02f      	b.n	8006f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	68b9      	ldr	r1, [r7, #8]
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f000 f838 	bl	8006f98 <I2C_IsErrorOccurred>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e02d      	b.n	8006f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f32:	f7fc fbe3 	bl	80036fc <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d302      	bcc.n	8006f48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d11a      	bne.n	8006f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	f003 0320 	and.w	r3, r3, #32
 8006f52:	2b20      	cmp	r3, #32
 8006f54:	d013      	beq.n	8006f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f5a:	f043 0220 	orr.w	r2, r3, #32
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e007      	b.n	8006f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	f003 0320 	and.w	r3, r3, #32
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	d1c8      	bne.n	8006f1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
	...

08006f98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08a      	sub	sp, #40	@ 0x28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	f003 0310 	and.w	r3, r3, #16
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d068      	beq.n	8007096 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2210      	movs	r2, #16
 8006fca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006fcc:	e049      	b.n	8007062 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd4:	d045      	beq.n	8007062 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006fd6:	f7fc fb91 	bl	80036fc <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d302      	bcc.n	8006fec <I2C_IsErrorOccurred+0x54>
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d13a      	bne.n	8007062 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ff6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ffe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800700a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800700e:	d121      	bne.n	8007054 <I2C_IsErrorOccurred+0xbc>
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007016:	d01d      	beq.n	8007054 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007018:	7cfb      	ldrb	r3, [r7, #19]
 800701a:	2b20      	cmp	r3, #32
 800701c:	d01a      	beq.n	8007054 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800702c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800702e:	f7fc fb65 	bl	80036fc <HAL_GetTick>
 8007032:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007034:	e00e      	b.n	8007054 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007036:	f7fc fb61 	bl	80036fc <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	2b19      	cmp	r3, #25
 8007042:	d907      	bls.n	8007054 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	f043 0320 	orr.w	r3, r3, #32
 800704a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007052:	e006      	b.n	8007062 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	f003 0320 	and.w	r3, r3, #32
 800705e:	2b20      	cmp	r3, #32
 8007060:	d1e9      	bne.n	8007036 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	f003 0320 	and.w	r3, r3, #32
 800706c:	2b20      	cmp	r3, #32
 800706e:	d003      	beq.n	8007078 <I2C_IsErrorOccurred+0xe0>
 8007070:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0aa      	beq.n	8006fce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800707c:	2b00      	cmp	r3, #0
 800707e:	d103      	bne.n	8007088 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2220      	movs	r2, #32
 8007086:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	f043 0304 	orr.w	r3, r3, #4
 800708e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00b      	beq.n	80070c0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	f043 0301 	orr.w	r3, r3, #1
 80070ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80070b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00b      	beq.n	80070e2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	f043 0308 	orr.w	r3, r3, #8
 80070d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80070da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00b      	beq.n	8007104 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	f043 0302 	orr.w	r3, r3, #2
 80070f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007104:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007108:	2b00      	cmp	r3, #0
 800710a:	d01c      	beq.n	8007146 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f7ff fe3b 	bl	8006d88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6859      	ldr	r1, [r3, #4]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	4b0d      	ldr	r3, [pc, #52]	@ (8007154 <I2C_IsErrorOccurred+0x1bc>)
 800711e:	400b      	ands	r3, r1
 8007120:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	431a      	orrs	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2220      	movs	r2, #32
 8007132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007146:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800714a:	4618      	mov	r0, r3
 800714c:	3728      	adds	r7, #40	@ 0x28
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	fe00e800 	.word	0xfe00e800

08007158 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	607b      	str	r3, [r7, #4]
 8007162:	460b      	mov	r3, r1
 8007164:	817b      	strh	r3, [r7, #10]
 8007166:	4613      	mov	r3, r2
 8007168:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800716a:	897b      	ldrh	r3, [r7, #10]
 800716c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007170:	7a7b      	ldrb	r3, [r7, #9]
 8007172:	041b      	lsls	r3, r3, #16
 8007174:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007178:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	4313      	orrs	r3, r2
 8007182:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007186:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	0d5b      	lsrs	r3, r3, #21
 8007192:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007196:	4b08      	ldr	r3, [pc, #32]	@ (80071b8 <I2C_TransferConfig+0x60>)
 8007198:	430b      	orrs	r3, r1
 800719a:	43db      	mvns	r3, r3
 800719c:	ea02 0103 	and.w	r1, r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80071aa:	bf00      	nop
 80071ac:	371c      	adds	r7, #28
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	03ff63ff 	.word	0x03ff63ff

080071bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b20      	cmp	r3, #32
 80071d0:	d138      	bne.n	8007244 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d101      	bne.n	80071e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80071dc:	2302      	movs	r3, #2
 80071de:	e032      	b.n	8007246 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2224      	movs	r2, #36	@ 0x24
 80071ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f022 0201 	bic.w	r2, r2, #1
 80071fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800720e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6819      	ldr	r1, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f042 0201 	orr.w	r2, r2, #1
 800722e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2220      	movs	r2, #32
 8007234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	e000      	b.n	8007246 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007244:	2302      	movs	r3, #2
  }
}
 8007246:	4618      	mov	r0, r3
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007252:	b480      	push	{r7}
 8007254:	b085      	sub	sp, #20
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b20      	cmp	r3, #32
 8007266:	d139      	bne.n	80072dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800726e:	2b01      	cmp	r3, #1
 8007270:	d101      	bne.n	8007276 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007272:	2302      	movs	r3, #2
 8007274:	e033      	b.n	80072de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2224      	movs	r2, #36	@ 0x24
 8007282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0201 	bic.w	r2, r2, #1
 8007294:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80072a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	021b      	lsls	r3, r3, #8
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f042 0201 	orr.w	r2, r2, #1
 80072c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	e000      	b.n	80072de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80072dc:	2302      	movs	r3, #2
  }
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
	...

080072ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80072f0:	4b04      	ldr	r3, [pc, #16]	@ (8007304 <HAL_PWREx_GetVoltageRange+0x18>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	40007000 	.word	0x40007000

08007308 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007316:	d130      	bne.n	800737a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007318:	4b23      	ldr	r3, [pc, #140]	@ (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007324:	d038      	beq.n	8007398 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007326:	4b20      	ldr	r3, [pc, #128]	@ (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800732e:	4a1e      	ldr	r2, [pc, #120]	@ (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007330:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007334:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007336:	4b1d      	ldr	r3, [pc, #116]	@ (80073ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2232      	movs	r2, #50	@ 0x32
 800733c:	fb02 f303 	mul.w	r3, r2, r3
 8007340:	4a1b      	ldr	r2, [pc, #108]	@ (80073b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007342:	fba2 2303 	umull	r2, r3, r2, r3
 8007346:	0c9b      	lsrs	r3, r3, #18
 8007348:	3301      	adds	r3, #1
 800734a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800734c:	e002      	b.n	8007354 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3b01      	subs	r3, #1
 8007352:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007354:	4b14      	ldr	r3, [pc, #80]	@ (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800735c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007360:	d102      	bne.n	8007368 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1f2      	bne.n	800734e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007368:	4b0f      	ldr	r3, [pc, #60]	@ (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007374:	d110      	bne.n	8007398 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e00f      	b.n	800739a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800737a:	4b0b      	ldr	r3, [pc, #44]	@ (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007382:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007386:	d007      	beq.n	8007398 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007388:	4b07      	ldr	r3, [pc, #28]	@ (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007390:	4a05      	ldr	r2, [pc, #20]	@ (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007392:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007396:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	40007000 	.word	0x40007000
 80073ac:	20000000 	.word	0x20000000
 80073b0:	431bde83 	.word	0x431bde83

080073b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b088      	sub	sp, #32
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d102      	bne.n	80073c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	f000 bc08 	b.w	8007bd8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073c8:	4b96      	ldr	r3, [pc, #600]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f003 030c 	and.w	r3, r3, #12
 80073d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073d2:	4b94      	ldr	r3, [pc, #592]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	f003 0303 	and.w	r3, r3, #3
 80073da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0310 	and.w	r3, r3, #16
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f000 80e4 	beq.w	80075b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d007      	beq.n	8007400 <HAL_RCC_OscConfig+0x4c>
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	2b0c      	cmp	r3, #12
 80073f4:	f040 808b 	bne.w	800750e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	f040 8087 	bne.w	800750e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007400:	4b88      	ldr	r3, [pc, #544]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b00      	cmp	r3, #0
 800740a:	d005      	beq.n	8007418 <HAL_RCC_OscConfig+0x64>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e3df      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a1a      	ldr	r2, [r3, #32]
 800741c:	4b81      	ldr	r3, [pc, #516]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0308 	and.w	r3, r3, #8
 8007424:	2b00      	cmp	r3, #0
 8007426:	d004      	beq.n	8007432 <HAL_RCC_OscConfig+0x7e>
 8007428:	4b7e      	ldr	r3, [pc, #504]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007430:	e005      	b.n	800743e <HAL_RCC_OscConfig+0x8a>
 8007432:	4b7c      	ldr	r3, [pc, #496]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 8007434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007438:	091b      	lsrs	r3, r3, #4
 800743a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800743e:	4293      	cmp	r3, r2
 8007440:	d223      	bcs.n	800748a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	4618      	mov	r0, r3
 8007448:	f000 fdc4 	bl	8007fd4 <RCC_SetFlashLatencyFromMSIRange>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e3c0      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007456:	4b73      	ldr	r3, [pc, #460]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a72      	ldr	r2, [pc, #456]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 800745c:	f043 0308 	orr.w	r3, r3, #8
 8007460:	6013      	str	r3, [r2, #0]
 8007462:	4b70      	ldr	r3, [pc, #448]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	496d      	ldr	r1, [pc, #436]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 8007470:	4313      	orrs	r3, r2
 8007472:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007474:	4b6b      	ldr	r3, [pc, #428]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	021b      	lsls	r3, r3, #8
 8007482:	4968      	ldr	r1, [pc, #416]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 8007484:	4313      	orrs	r3, r2
 8007486:	604b      	str	r3, [r1, #4]
 8007488:	e025      	b.n	80074d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800748a:	4b66      	ldr	r3, [pc, #408]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a65      	ldr	r2, [pc, #404]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 8007490:	f043 0308 	orr.w	r3, r3, #8
 8007494:	6013      	str	r3, [r2, #0]
 8007496:	4b63      	ldr	r3, [pc, #396]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	4960      	ldr	r1, [pc, #384]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80074a8:	4b5e      	ldr	r3, [pc, #376]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	69db      	ldr	r3, [r3, #28]
 80074b4:	021b      	lsls	r3, r3, #8
 80074b6:	495b      	ldr	r1, [pc, #364]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d109      	bne.n	80074d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fd84 	bl	8007fd4 <RCC_SetFlashLatencyFromMSIRange>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e380      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80074d6:	f000 fc87 	bl	8007de8 <HAL_RCC_GetSysClockFreq>
 80074da:	4602      	mov	r2, r0
 80074dc:	4b51      	ldr	r3, [pc, #324]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	091b      	lsrs	r3, r3, #4
 80074e2:	f003 030f 	and.w	r3, r3, #15
 80074e6:	4950      	ldr	r1, [pc, #320]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 80074e8:	5ccb      	ldrb	r3, [r1, r3]
 80074ea:	f003 031f 	and.w	r3, r3, #31
 80074ee:	fa22 f303 	lsr.w	r3, r2, r3
 80074f2:	4a4e      	ldr	r2, [pc, #312]	@ (800762c <HAL_RCC_OscConfig+0x278>)
 80074f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80074f6:	4b4e      	ldr	r3, [pc, #312]	@ (8007630 <HAL_RCC_OscConfig+0x27c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fa ff58 	bl	80023b0 <HAL_InitTick>
 8007500:	4603      	mov	r3, r0
 8007502:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d052      	beq.n	80075b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800750a:	7bfb      	ldrb	r3, [r7, #15]
 800750c:	e364      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d032      	beq.n	800757c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007516:	4b43      	ldr	r3, [pc, #268]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a42      	ldr	r2, [pc, #264]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 800751c:	f043 0301 	orr.w	r3, r3, #1
 8007520:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007522:	f7fc f8eb 	bl	80036fc <HAL_GetTick>
 8007526:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007528:	e008      	b.n	800753c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800752a:	f7fc f8e7 	bl	80036fc <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	2b02      	cmp	r3, #2
 8007536:	d901      	bls.n	800753c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e34d      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800753c:	4b39      	ldr	r3, [pc, #228]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0302 	and.w	r3, r3, #2
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0f0      	beq.n	800752a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007548:	4b36      	ldr	r3, [pc, #216]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a35      	ldr	r2, [pc, #212]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 800754e:	f043 0308 	orr.w	r3, r3, #8
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	4b33      	ldr	r3, [pc, #204]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a1b      	ldr	r3, [r3, #32]
 8007560:	4930      	ldr	r1, [pc, #192]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 8007562:	4313      	orrs	r3, r2
 8007564:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007566:	4b2f      	ldr	r3, [pc, #188]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	021b      	lsls	r3, r3, #8
 8007574:	492b      	ldr	r1, [pc, #172]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 8007576:	4313      	orrs	r3, r2
 8007578:	604b      	str	r3, [r1, #4]
 800757a:	e01a      	b.n	80075b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800757c:	4b29      	ldr	r3, [pc, #164]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a28      	ldr	r2, [pc, #160]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 8007582:	f023 0301 	bic.w	r3, r3, #1
 8007586:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007588:	f7fc f8b8 	bl	80036fc <HAL_GetTick>
 800758c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800758e:	e008      	b.n	80075a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007590:	f7fc f8b4 	bl	80036fc <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	2b02      	cmp	r3, #2
 800759c:	d901      	bls.n	80075a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e31a      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80075a2:	4b20      	ldr	r3, [pc, #128]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1f0      	bne.n	8007590 <HAL_RCC_OscConfig+0x1dc>
 80075ae:	e000      	b.n	80075b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80075b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d073      	beq.n	80076a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	2b08      	cmp	r3, #8
 80075c2:	d005      	beq.n	80075d0 <HAL_RCC_OscConfig+0x21c>
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	2b0c      	cmp	r3, #12
 80075c8:	d10e      	bne.n	80075e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d10b      	bne.n	80075e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075d0:	4b14      	ldr	r3, [pc, #80]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d063      	beq.n	80076a4 <HAL_RCC_OscConfig+0x2f0>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d15f      	bne.n	80076a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e2f7      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075f0:	d106      	bne.n	8007600 <HAL_RCC_OscConfig+0x24c>
 80075f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a0b      	ldr	r2, [pc, #44]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 80075f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	e025      	b.n	800764c <HAL_RCC_OscConfig+0x298>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007608:	d114      	bne.n	8007634 <HAL_RCC_OscConfig+0x280>
 800760a:	4b06      	ldr	r3, [pc, #24]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a05      	ldr	r2, [pc, #20]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 8007610:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007614:	6013      	str	r3, [r2, #0]
 8007616:	4b03      	ldr	r3, [pc, #12]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a02      	ldr	r2, [pc, #8]	@ (8007624 <HAL_RCC_OscConfig+0x270>)
 800761c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007620:	6013      	str	r3, [r2, #0]
 8007622:	e013      	b.n	800764c <HAL_RCC_OscConfig+0x298>
 8007624:	40021000 	.word	0x40021000
 8007628:	0800ddb4 	.word	0x0800ddb4
 800762c:	20000000 	.word	0x20000000
 8007630:	20000004 	.word	0x20000004
 8007634:	4ba0      	ldr	r3, [pc, #640]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a9f      	ldr	r2, [pc, #636]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 800763a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800763e:	6013      	str	r3, [r2, #0]
 8007640:	4b9d      	ldr	r3, [pc, #628]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a9c      	ldr	r2, [pc, #624]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 8007646:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800764a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d013      	beq.n	800767c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007654:	f7fc f852 	bl	80036fc <HAL_GetTick>
 8007658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800765a:	e008      	b.n	800766e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800765c:	f7fc f84e 	bl	80036fc <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b64      	cmp	r3, #100	@ 0x64
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e2b4      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800766e:	4b92      	ldr	r3, [pc, #584]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0f0      	beq.n	800765c <HAL_RCC_OscConfig+0x2a8>
 800767a:	e014      	b.n	80076a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800767c:	f7fc f83e 	bl	80036fc <HAL_GetTick>
 8007680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007682:	e008      	b.n	8007696 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007684:	f7fc f83a 	bl	80036fc <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	2b64      	cmp	r3, #100	@ 0x64
 8007690:	d901      	bls.n	8007696 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e2a0      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007696:	4b88      	ldr	r3, [pc, #544]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1f0      	bne.n	8007684 <HAL_RCC_OscConfig+0x2d0>
 80076a2:	e000      	b.n	80076a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d060      	beq.n	8007774 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	2b04      	cmp	r3, #4
 80076b6:	d005      	beq.n	80076c4 <HAL_RCC_OscConfig+0x310>
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	2b0c      	cmp	r3, #12
 80076bc:	d119      	bne.n	80076f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d116      	bne.n	80076f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076c4:	4b7c      	ldr	r3, [pc, #496]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d005      	beq.n	80076dc <HAL_RCC_OscConfig+0x328>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e27d      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076dc:	4b76      	ldr	r3, [pc, #472]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	061b      	lsls	r3, r3, #24
 80076ea:	4973      	ldr	r1, [pc, #460]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076f0:	e040      	b.n	8007774 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d023      	beq.n	8007742 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076fa:	4b6f      	ldr	r3, [pc, #444]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a6e      	ldr	r2, [pc, #440]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 8007700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007706:	f7fb fff9 	bl	80036fc <HAL_GetTick>
 800770a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800770c:	e008      	b.n	8007720 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800770e:	f7fb fff5 	bl	80036fc <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	2b02      	cmp	r3, #2
 800771a:	d901      	bls.n	8007720 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800771c:	2303      	movs	r3, #3
 800771e:	e25b      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007720:	4b65      	ldr	r3, [pc, #404]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007728:	2b00      	cmp	r3, #0
 800772a:	d0f0      	beq.n	800770e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800772c:	4b62      	ldr	r3, [pc, #392]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	061b      	lsls	r3, r3, #24
 800773a:	495f      	ldr	r1, [pc, #380]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 800773c:	4313      	orrs	r3, r2
 800773e:	604b      	str	r3, [r1, #4]
 8007740:	e018      	b.n	8007774 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007742:	4b5d      	ldr	r3, [pc, #372]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a5c      	ldr	r2, [pc, #368]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 8007748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800774c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800774e:	f7fb ffd5 	bl	80036fc <HAL_GetTick>
 8007752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007754:	e008      	b.n	8007768 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007756:	f7fb ffd1 	bl	80036fc <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	2b02      	cmp	r3, #2
 8007762:	d901      	bls.n	8007768 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e237      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007768:	4b53      	ldr	r3, [pc, #332]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1f0      	bne.n	8007756 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0308 	and.w	r3, r3, #8
 800777c:	2b00      	cmp	r3, #0
 800777e:	d03c      	beq.n	80077fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d01c      	beq.n	80077c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007788:	4b4b      	ldr	r3, [pc, #300]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 800778a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800778e:	4a4a      	ldr	r2, [pc, #296]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 8007790:	f043 0301 	orr.w	r3, r3, #1
 8007794:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007798:	f7fb ffb0 	bl	80036fc <HAL_GetTick>
 800779c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800779e:	e008      	b.n	80077b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077a0:	f7fb ffac 	bl	80036fc <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d901      	bls.n	80077b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e212      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80077b2:	4b41      	ldr	r3, [pc, #260]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 80077b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d0ef      	beq.n	80077a0 <HAL_RCC_OscConfig+0x3ec>
 80077c0:	e01b      	b.n	80077fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077c2:	4b3d      	ldr	r3, [pc, #244]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 80077c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077c8:	4a3b      	ldr	r2, [pc, #236]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 80077ca:	f023 0301 	bic.w	r3, r3, #1
 80077ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077d2:	f7fb ff93 	bl	80036fc <HAL_GetTick>
 80077d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80077d8:	e008      	b.n	80077ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077da:	f7fb ff8f 	bl	80036fc <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d901      	bls.n	80077ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e1f5      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80077ec:	4b32      	ldr	r3, [pc, #200]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 80077ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1ef      	bne.n	80077da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0304 	and.w	r3, r3, #4
 8007802:	2b00      	cmp	r3, #0
 8007804:	f000 80a6 	beq.w	8007954 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007808:	2300      	movs	r3, #0
 800780a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800780c:	4b2a      	ldr	r3, [pc, #168]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 800780e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10d      	bne.n	8007834 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007818:	4b27      	ldr	r3, [pc, #156]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 800781a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800781c:	4a26      	ldr	r2, [pc, #152]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 800781e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007822:	6593      	str	r3, [r2, #88]	@ 0x58
 8007824:	4b24      	ldr	r3, [pc, #144]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 8007826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800782c:	60bb      	str	r3, [r7, #8]
 800782e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007830:	2301      	movs	r3, #1
 8007832:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007834:	4b21      	ldr	r3, [pc, #132]	@ (80078bc <HAL_RCC_OscConfig+0x508>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800783c:	2b00      	cmp	r3, #0
 800783e:	d118      	bne.n	8007872 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007840:	4b1e      	ldr	r3, [pc, #120]	@ (80078bc <HAL_RCC_OscConfig+0x508>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a1d      	ldr	r2, [pc, #116]	@ (80078bc <HAL_RCC_OscConfig+0x508>)
 8007846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800784a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800784c:	f7fb ff56 	bl	80036fc <HAL_GetTick>
 8007850:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007852:	e008      	b.n	8007866 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007854:	f7fb ff52 	bl	80036fc <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e1b8      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007866:	4b15      	ldr	r3, [pc, #84]	@ (80078bc <HAL_RCC_OscConfig+0x508>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0f0      	beq.n	8007854 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d108      	bne.n	800788c <HAL_RCC_OscConfig+0x4d8>
 800787a:	4b0f      	ldr	r3, [pc, #60]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 800787c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007880:	4a0d      	ldr	r2, [pc, #52]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 8007882:	f043 0301 	orr.w	r3, r3, #1
 8007886:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800788a:	e029      	b.n	80078e0 <HAL_RCC_OscConfig+0x52c>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	2b05      	cmp	r3, #5
 8007892:	d115      	bne.n	80078c0 <HAL_RCC_OscConfig+0x50c>
 8007894:	4b08      	ldr	r3, [pc, #32]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 8007896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800789a:	4a07      	ldr	r2, [pc, #28]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 800789c:	f043 0304 	orr.w	r3, r3, #4
 80078a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80078a4:	4b04      	ldr	r3, [pc, #16]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 80078a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078aa:	4a03      	ldr	r2, [pc, #12]	@ (80078b8 <HAL_RCC_OscConfig+0x504>)
 80078ac:	f043 0301 	orr.w	r3, r3, #1
 80078b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80078b4:	e014      	b.n	80078e0 <HAL_RCC_OscConfig+0x52c>
 80078b6:	bf00      	nop
 80078b8:	40021000 	.word	0x40021000
 80078bc:	40007000 	.word	0x40007000
 80078c0:	4b9d      	ldr	r3, [pc, #628]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 80078c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078c6:	4a9c      	ldr	r2, [pc, #624]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 80078c8:	f023 0301 	bic.w	r3, r3, #1
 80078cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80078d0:	4b99      	ldr	r3, [pc, #612]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 80078d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078d6:	4a98      	ldr	r2, [pc, #608]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 80078d8:	f023 0304 	bic.w	r3, r3, #4
 80078dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d016      	beq.n	8007916 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078e8:	f7fb ff08 	bl	80036fc <HAL_GetTick>
 80078ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078ee:	e00a      	b.n	8007906 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078f0:	f7fb ff04 	bl	80036fc <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078fe:	4293      	cmp	r3, r2
 8007900:	d901      	bls.n	8007906 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e168      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007906:	4b8c      	ldr	r3, [pc, #560]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 8007908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800790c:	f003 0302 	and.w	r3, r3, #2
 8007910:	2b00      	cmp	r3, #0
 8007912:	d0ed      	beq.n	80078f0 <HAL_RCC_OscConfig+0x53c>
 8007914:	e015      	b.n	8007942 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007916:	f7fb fef1 	bl	80036fc <HAL_GetTick>
 800791a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800791c:	e00a      	b.n	8007934 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800791e:	f7fb feed 	bl	80036fc <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	f241 3288 	movw	r2, #5000	@ 0x1388
 800792c:	4293      	cmp	r3, r2
 800792e:	d901      	bls.n	8007934 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e151      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007934:	4b80      	ldr	r3, [pc, #512]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 8007936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1ed      	bne.n	800791e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007942:	7ffb      	ldrb	r3, [r7, #31]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d105      	bne.n	8007954 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007948:	4b7b      	ldr	r3, [pc, #492]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 800794a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800794c:	4a7a      	ldr	r2, [pc, #488]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 800794e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007952:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0320 	and.w	r3, r3, #32
 800795c:	2b00      	cmp	r3, #0
 800795e:	d03c      	beq.n	80079da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007964:	2b00      	cmp	r3, #0
 8007966:	d01c      	beq.n	80079a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007968:	4b73      	ldr	r3, [pc, #460]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 800796a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800796e:	4a72      	ldr	r2, [pc, #456]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 8007970:	f043 0301 	orr.w	r3, r3, #1
 8007974:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007978:	f7fb fec0 	bl	80036fc <HAL_GetTick>
 800797c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800797e:	e008      	b.n	8007992 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007980:	f7fb febc 	bl	80036fc <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b02      	cmp	r3, #2
 800798c:	d901      	bls.n	8007992 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e122      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007992:	4b69      	ldr	r3, [pc, #420]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 8007994:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d0ef      	beq.n	8007980 <HAL_RCC_OscConfig+0x5cc>
 80079a0:	e01b      	b.n	80079da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80079a2:	4b65      	ldr	r3, [pc, #404]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 80079a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80079a8:	4a63      	ldr	r2, [pc, #396]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 80079aa:	f023 0301 	bic.w	r3, r3, #1
 80079ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079b2:	f7fb fea3 	bl	80036fc <HAL_GetTick>
 80079b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80079b8:	e008      	b.n	80079cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80079ba:	f7fb fe9f 	bl	80036fc <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d901      	bls.n	80079cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e105      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80079cc:	4b5a      	ldr	r3, [pc, #360]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 80079ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80079d2:	f003 0302 	and.w	r3, r3, #2
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1ef      	bne.n	80079ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 80f9 	beq.w	8007bd6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	f040 80cf 	bne.w	8007b8c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80079ee:	4b52      	ldr	r3, [pc, #328]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f003 0203 	and.w	r2, r3, #3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d12c      	bne.n	8007a5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d123      	bne.n	8007a5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d11b      	bne.n	8007a5c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d113      	bne.n	8007a5c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a3e:	085b      	lsrs	r3, r3, #1
 8007a40:	3b01      	subs	r3, #1
 8007a42:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d109      	bne.n	8007a5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a52:	085b      	lsrs	r3, r3, #1
 8007a54:	3b01      	subs	r3, #1
 8007a56:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d071      	beq.n	8007b40 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	2b0c      	cmp	r3, #12
 8007a60:	d068      	beq.n	8007b34 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007a62:	4b35      	ldr	r3, [pc, #212]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d105      	bne.n	8007a7a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007a6e:	4b32      	ldr	r3, [pc, #200]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e0ac      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a2d      	ldr	r2, [pc, #180]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 8007a84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007a8a:	f7fb fe37 	bl	80036fc <HAL_GetTick>
 8007a8e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a90:	e008      	b.n	8007aa4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a92:	f7fb fe33 	bl	80036fc <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d901      	bls.n	8007aa4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e099      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007aa4:	4b24      	ldr	r3, [pc, #144]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1f0      	bne.n	8007a92 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ab0:	4b21      	ldr	r3, [pc, #132]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	4b21      	ldr	r3, [pc, #132]	@ (8007b3c <HAL_RCC_OscConfig+0x788>)
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007ac0:	3a01      	subs	r2, #1
 8007ac2:	0112      	lsls	r2, r2, #4
 8007ac4:	4311      	orrs	r1, r2
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007aca:	0212      	lsls	r2, r2, #8
 8007acc:	4311      	orrs	r1, r2
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007ad2:	0852      	lsrs	r2, r2, #1
 8007ad4:	3a01      	subs	r2, #1
 8007ad6:	0552      	lsls	r2, r2, #21
 8007ad8:	4311      	orrs	r1, r2
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007ade:	0852      	lsrs	r2, r2, #1
 8007ae0:	3a01      	subs	r2, #1
 8007ae2:	0652      	lsls	r2, r2, #25
 8007ae4:	4311      	orrs	r1, r2
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007aea:	06d2      	lsls	r2, r2, #27
 8007aec:	430a      	orrs	r2, r1
 8007aee:	4912      	ldr	r1, [pc, #72]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007af4:	4b10      	ldr	r3, [pc, #64]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a0f      	ldr	r2, [pc, #60]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 8007afa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007afe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007b00:	4b0d      	ldr	r3, [pc, #52]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	4a0c      	ldr	r2, [pc, #48]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 8007b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007b0c:	f7fb fdf6 	bl	80036fc <HAL_GetTick>
 8007b10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b12:	e008      	b.n	8007b26 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b14:	f7fb fdf2 	bl	80036fc <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d901      	bls.n	8007b26 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e058      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b26:	4b04      	ldr	r3, [pc, #16]	@ (8007b38 <HAL_RCC_OscConfig+0x784>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d0f0      	beq.n	8007b14 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b32:	e050      	b.n	8007bd6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e04f      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
 8007b38:	40021000 	.word	0x40021000
 8007b3c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b40:	4b27      	ldr	r3, [pc, #156]	@ (8007be0 <HAL_RCC_OscConfig+0x82c>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d144      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007b4c:	4b24      	ldr	r3, [pc, #144]	@ (8007be0 <HAL_RCC_OscConfig+0x82c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a23      	ldr	r2, [pc, #140]	@ (8007be0 <HAL_RCC_OscConfig+0x82c>)
 8007b52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007b58:	4b21      	ldr	r3, [pc, #132]	@ (8007be0 <HAL_RCC_OscConfig+0x82c>)
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	4a20      	ldr	r2, [pc, #128]	@ (8007be0 <HAL_RCC_OscConfig+0x82c>)
 8007b5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007b64:	f7fb fdca 	bl	80036fc <HAL_GetTick>
 8007b68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b6a:	e008      	b.n	8007b7e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b6c:	f7fb fdc6 	bl	80036fc <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d901      	bls.n	8007b7e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e02c      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b7e:	4b18      	ldr	r3, [pc, #96]	@ (8007be0 <HAL_RCC_OscConfig+0x82c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d0f0      	beq.n	8007b6c <HAL_RCC_OscConfig+0x7b8>
 8007b8a:	e024      	b.n	8007bd6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	2b0c      	cmp	r3, #12
 8007b90:	d01f      	beq.n	8007bd2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b92:	4b13      	ldr	r3, [pc, #76]	@ (8007be0 <HAL_RCC_OscConfig+0x82c>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a12      	ldr	r2, [pc, #72]	@ (8007be0 <HAL_RCC_OscConfig+0x82c>)
 8007b98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b9e:	f7fb fdad 	bl	80036fc <HAL_GetTick>
 8007ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ba4:	e008      	b.n	8007bb8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ba6:	f7fb fda9 	bl	80036fc <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d901      	bls.n	8007bb8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e00f      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bb8:	4b09      	ldr	r3, [pc, #36]	@ (8007be0 <HAL_RCC_OscConfig+0x82c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1f0      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007bc4:	4b06      	ldr	r3, [pc, #24]	@ (8007be0 <HAL_RCC_OscConfig+0x82c>)
 8007bc6:	68da      	ldr	r2, [r3, #12]
 8007bc8:	4905      	ldr	r1, [pc, #20]	@ (8007be0 <HAL_RCC_OscConfig+0x82c>)
 8007bca:	4b06      	ldr	r3, [pc, #24]	@ (8007be4 <HAL_RCC_OscConfig+0x830>)
 8007bcc:	4013      	ands	r3, r2
 8007bce:	60cb      	str	r3, [r1, #12]
 8007bd0:	e001      	b.n	8007bd6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e000      	b.n	8007bd8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3720      	adds	r7, #32
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	40021000 	.word	0x40021000
 8007be4:	feeefffc 	.word	0xfeeefffc

08007be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d101      	bne.n	8007bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e0e7      	b.n	8007dcc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007bfc:	4b75      	ldr	r3, [pc, #468]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0307 	and.w	r3, r3, #7
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d910      	bls.n	8007c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c0a:	4b72      	ldr	r3, [pc, #456]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f023 0207 	bic.w	r2, r3, #7
 8007c12:	4970      	ldr	r1, [pc, #448]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c1a:	4b6e      	ldr	r3, [pc, #440]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 0307 	and.w	r3, r3, #7
 8007c22:	683a      	ldr	r2, [r7, #0]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d001      	beq.n	8007c2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e0cf      	b.n	8007dcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0302 	and.w	r3, r3, #2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d010      	beq.n	8007c5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689a      	ldr	r2, [r3, #8]
 8007c3c:	4b66      	ldr	r3, [pc, #408]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d908      	bls.n	8007c5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c48:	4b63      	ldr	r3, [pc, #396]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	4960      	ldr	r1, [pc, #384]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d04c      	beq.n	8007d00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	2b03      	cmp	r3, #3
 8007c6c:	d107      	bne.n	8007c7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c6e:	4b5a      	ldr	r3, [pc, #360]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d121      	bne.n	8007cbe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e0a6      	b.n	8007dcc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d107      	bne.n	8007c96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c86:	4b54      	ldr	r3, [pc, #336]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d115      	bne.n	8007cbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e09a      	b.n	8007dcc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d107      	bne.n	8007cae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007c9e:	4b4e      	ldr	r3, [pc, #312]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 0302 	and.w	r3, r3, #2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d109      	bne.n	8007cbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e08e      	b.n	8007dcc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007cae:	4b4a      	ldr	r3, [pc, #296]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e086      	b.n	8007dcc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007cbe:	4b46      	ldr	r3, [pc, #280]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f023 0203 	bic.w	r2, r3, #3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	4943      	ldr	r1, [pc, #268]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cd0:	f7fb fd14 	bl	80036fc <HAL_GetTick>
 8007cd4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cd6:	e00a      	b.n	8007cee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cd8:	f7fb fd10 	bl	80036fc <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d901      	bls.n	8007cee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e06e      	b.n	8007dcc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cee:	4b3a      	ldr	r3, [pc, #232]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f003 020c 	and.w	r2, r3, #12
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d1eb      	bne.n	8007cd8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0302 	and.w	r3, r3, #2
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d010      	beq.n	8007d2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	689a      	ldr	r2, [r3, #8]
 8007d10:	4b31      	ldr	r3, [pc, #196]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d208      	bcs.n	8007d2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	492b      	ldr	r1, [pc, #172]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d2e:	4b29      	ldr	r3, [pc, #164]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0307 	and.w	r3, r3, #7
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d210      	bcs.n	8007d5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d3c:	4b25      	ldr	r3, [pc, #148]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f023 0207 	bic.w	r2, r3, #7
 8007d44:	4923      	ldr	r1, [pc, #140]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d4c:	4b21      	ldr	r3, [pc, #132]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0307 	and.w	r3, r3, #7
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d001      	beq.n	8007d5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e036      	b.n	8007dcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0304 	and.w	r3, r3, #4
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d008      	beq.n	8007d7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	4918      	ldr	r1, [pc, #96]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 0308 	and.w	r3, r3, #8
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d009      	beq.n	8007d9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d88:	4b13      	ldr	r3, [pc, #76]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	00db      	lsls	r3, r3, #3
 8007d96:	4910      	ldr	r1, [pc, #64]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007d9c:	f000 f824 	bl	8007de8 <HAL_RCC_GetSysClockFreq>
 8007da0:	4602      	mov	r2, r0
 8007da2:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	091b      	lsrs	r3, r3, #4
 8007da8:	f003 030f 	and.w	r3, r3, #15
 8007dac:	490b      	ldr	r1, [pc, #44]	@ (8007ddc <HAL_RCC_ClockConfig+0x1f4>)
 8007dae:	5ccb      	ldrb	r3, [r1, r3]
 8007db0:	f003 031f 	and.w	r3, r3, #31
 8007db4:	fa22 f303 	lsr.w	r3, r2, r3
 8007db8:	4a09      	ldr	r2, [pc, #36]	@ (8007de0 <HAL_RCC_ClockConfig+0x1f8>)
 8007dba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007dbc:	4b09      	ldr	r3, [pc, #36]	@ (8007de4 <HAL_RCC_ClockConfig+0x1fc>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7fa faf5 	bl	80023b0 <HAL_InitTick>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8007dca:	7afb      	ldrb	r3, [r7, #11]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	40022000 	.word	0x40022000
 8007dd8:	40021000 	.word	0x40021000
 8007ddc:	0800ddb4 	.word	0x0800ddb4
 8007de0:	20000000 	.word	0x20000000
 8007de4:	20000004 	.word	0x20000004

08007de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b089      	sub	sp, #36	@ 0x24
 8007dec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007dee:	2300      	movs	r3, #0
 8007df0:	61fb      	str	r3, [r7, #28]
 8007df2:	2300      	movs	r3, #0
 8007df4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007df6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f003 030c 	and.w	r3, r3, #12
 8007dfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e00:	4b3b      	ldr	r3, [pc, #236]	@ (8007ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	f003 0303 	and.w	r3, r3, #3
 8007e08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d005      	beq.n	8007e1c <HAL_RCC_GetSysClockFreq+0x34>
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	2b0c      	cmp	r3, #12
 8007e14:	d121      	bne.n	8007e5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d11e      	bne.n	8007e5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007e1c:	4b34      	ldr	r3, [pc, #208]	@ (8007ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0308 	and.w	r3, r3, #8
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d107      	bne.n	8007e38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007e28:	4b31      	ldr	r3, [pc, #196]	@ (8007ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e2e:	0a1b      	lsrs	r3, r3, #8
 8007e30:	f003 030f 	and.w	r3, r3, #15
 8007e34:	61fb      	str	r3, [r7, #28]
 8007e36:	e005      	b.n	8007e44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007e38:	4b2d      	ldr	r3, [pc, #180]	@ (8007ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	091b      	lsrs	r3, r3, #4
 8007e3e:	f003 030f 	and.w	r3, r3, #15
 8007e42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007e44:	4a2b      	ldr	r2, [pc, #172]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10d      	bne.n	8007e70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e58:	e00a      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	2b04      	cmp	r3, #4
 8007e5e:	d102      	bne.n	8007e66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007e60:	4b25      	ldr	r3, [pc, #148]	@ (8007ef8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007e62:	61bb      	str	r3, [r7, #24]
 8007e64:	e004      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d101      	bne.n	8007e70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007e6c:	4b23      	ldr	r3, [pc, #140]	@ (8007efc <HAL_RCC_GetSysClockFreq+0x114>)
 8007e6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	2b0c      	cmp	r3, #12
 8007e74:	d134      	bne.n	8007ee0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e76:	4b1e      	ldr	r3, [pc, #120]	@ (8007ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f003 0303 	and.w	r3, r3, #3
 8007e7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d003      	beq.n	8007e8e <HAL_RCC_GetSysClockFreq+0xa6>
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	d003      	beq.n	8007e94 <HAL_RCC_GetSysClockFreq+0xac>
 8007e8c:	e005      	b.n	8007e9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ef8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007e90:	617b      	str	r3, [r7, #20]
      break;
 8007e92:	e005      	b.n	8007ea0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007e94:	4b19      	ldr	r3, [pc, #100]	@ (8007efc <HAL_RCC_GetSysClockFreq+0x114>)
 8007e96:	617b      	str	r3, [r7, #20]
      break;
 8007e98:	e002      	b.n	8007ea0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	617b      	str	r3, [r7, #20]
      break;
 8007e9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ea0:	4b13      	ldr	r3, [pc, #76]	@ (8007ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	091b      	lsrs	r3, r3, #4
 8007ea6:	f003 0307 	and.w	r3, r3, #7
 8007eaa:	3301      	adds	r3, #1
 8007eac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007eae:	4b10      	ldr	r3, [pc, #64]	@ (8007ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	0a1b      	lsrs	r3, r3, #8
 8007eb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	fb03 f202 	mul.w	r2, r3, r2
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	0e5b      	lsrs	r3, r3, #25
 8007ecc:	f003 0303 	and.w	r3, r3, #3
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	005b      	lsls	r3, r3, #1
 8007ed4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ede:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007ee0:	69bb      	ldr	r3, [r7, #24]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3724      	adds	r7, #36	@ 0x24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	40021000 	.word	0x40021000
 8007ef4:	0800ddcc 	.word	0x0800ddcc
 8007ef8:	00f42400 	.word	0x00f42400
 8007efc:	007a1200 	.word	0x007a1200

08007f00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f00:	b480      	push	{r7}
 8007f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f04:	4b03      	ldr	r3, [pc, #12]	@ (8007f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f06:	681b      	ldr	r3, [r3, #0]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	20000000 	.word	0x20000000

08007f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007f1c:	f7ff fff0 	bl	8007f00 <HAL_RCC_GetHCLKFreq>
 8007f20:	4602      	mov	r2, r0
 8007f22:	4b06      	ldr	r3, [pc, #24]	@ (8007f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	0a1b      	lsrs	r3, r3, #8
 8007f28:	f003 0307 	and.w	r3, r3, #7
 8007f2c:	4904      	ldr	r1, [pc, #16]	@ (8007f40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f2e:	5ccb      	ldrb	r3, [r1, r3]
 8007f30:	f003 031f 	and.w	r3, r3, #31
 8007f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	40021000 	.word	0x40021000
 8007f40:	0800ddc4 	.word	0x0800ddc4

08007f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007f48:	f7ff ffda 	bl	8007f00 <HAL_RCC_GetHCLKFreq>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	4b06      	ldr	r3, [pc, #24]	@ (8007f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	0adb      	lsrs	r3, r3, #11
 8007f54:	f003 0307 	and.w	r3, r3, #7
 8007f58:	4904      	ldr	r1, [pc, #16]	@ (8007f6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f5a:	5ccb      	ldrb	r3, [r1, r3]
 8007f5c:	f003 031f 	and.w	r3, r3, #31
 8007f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	40021000 	.word	0x40021000
 8007f6c:	0800ddc4 	.word	0x0800ddc4

08007f70 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	220f      	movs	r2, #15
 8007f7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007f80:	4b12      	ldr	r3, [pc, #72]	@ (8007fcc <HAL_RCC_GetClockConfig+0x5c>)
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f003 0203 	and.w	r2, r3, #3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8007fcc <HAL_RCC_GetClockConfig+0x5c>)
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007f98:	4b0c      	ldr	r3, [pc, #48]	@ (8007fcc <HAL_RCC_GetClockConfig+0x5c>)
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007fa4:	4b09      	ldr	r3, [pc, #36]	@ (8007fcc <HAL_RCC_GetClockConfig+0x5c>)
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	08db      	lsrs	r3, r3, #3
 8007faa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007fb2:	4b07      	ldr	r3, [pc, #28]	@ (8007fd0 <HAL_RCC_GetClockConfig+0x60>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0207 	and.w	r2, r3, #7
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	601a      	str	r2, [r3, #0]
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	40021000 	.word	0x40021000
 8007fd0:	40022000 	.word	0x40022000

08007fd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007fdc:	2300      	movs	r3, #0
 8007fde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800808c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d003      	beq.n	8007ff4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007fec:	f7ff f97e 	bl	80072ec <HAL_PWREx_GetVoltageRange>
 8007ff0:	6178      	str	r0, [r7, #20]
 8007ff2:	e014      	b.n	800801e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ff4:	4b25      	ldr	r3, [pc, #148]	@ (800808c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ff8:	4a24      	ldr	r2, [pc, #144]	@ (800808c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ffe:	6593      	str	r3, [r2, #88]	@ 0x58
 8008000:	4b22      	ldr	r3, [pc, #136]	@ (800808c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008008:	60fb      	str	r3, [r7, #12]
 800800a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800800c:	f7ff f96e 	bl	80072ec <HAL_PWREx_GetVoltageRange>
 8008010:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008012:	4b1e      	ldr	r3, [pc, #120]	@ (800808c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008016:	4a1d      	ldr	r2, [pc, #116]	@ (800808c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008018:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800801c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008024:	d10b      	bne.n	800803e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b80      	cmp	r3, #128	@ 0x80
 800802a:	d919      	bls.n	8008060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2ba0      	cmp	r3, #160	@ 0xa0
 8008030:	d902      	bls.n	8008038 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008032:	2302      	movs	r3, #2
 8008034:	613b      	str	r3, [r7, #16]
 8008036:	e013      	b.n	8008060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008038:	2301      	movs	r3, #1
 800803a:	613b      	str	r3, [r7, #16]
 800803c:	e010      	b.n	8008060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b80      	cmp	r3, #128	@ 0x80
 8008042:	d902      	bls.n	800804a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008044:	2303      	movs	r3, #3
 8008046:	613b      	str	r3, [r7, #16]
 8008048:	e00a      	b.n	8008060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b80      	cmp	r3, #128	@ 0x80
 800804e:	d102      	bne.n	8008056 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008050:	2302      	movs	r3, #2
 8008052:	613b      	str	r3, [r7, #16]
 8008054:	e004      	b.n	8008060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b70      	cmp	r3, #112	@ 0x70
 800805a:	d101      	bne.n	8008060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800805c:	2301      	movs	r3, #1
 800805e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008060:	4b0b      	ldr	r3, [pc, #44]	@ (8008090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f023 0207 	bic.w	r2, r3, #7
 8008068:	4909      	ldr	r1, [pc, #36]	@ (8008090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	4313      	orrs	r3, r2
 800806e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008070:	4b07      	ldr	r3, [pc, #28]	@ (8008090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0307 	and.w	r3, r3, #7
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	429a      	cmp	r2, r3
 800807c:	d001      	beq.n	8008082 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e000      	b.n	8008084 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	40021000 	.word	0x40021000
 8008090:	40022000 	.word	0x40022000

08008094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800809c:	2300      	movs	r3, #0
 800809e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80080a0:	2300      	movs	r3, #0
 80080a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d041      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80080b8:	d02a      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80080ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80080be:	d824      	bhi.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80080c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080c4:	d008      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80080c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080ca:	d81e      	bhi.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00a      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80080d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080d4:	d010      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80080d6:	e018      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80080d8:	4b86      	ldr	r3, [pc, #536]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	4a85      	ldr	r2, [pc, #532]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80080e4:	e015      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3304      	adds	r3, #4
 80080ea:	2100      	movs	r1, #0
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 facd 	bl	800868c <RCCEx_PLLSAI1_Config>
 80080f2:	4603      	mov	r3, r0
 80080f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80080f6:	e00c      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3320      	adds	r3, #32
 80080fc:	2100      	movs	r1, #0
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 fbb6 	bl	8008870 <RCCEx_PLLSAI2_Config>
 8008104:	4603      	mov	r3, r0
 8008106:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008108:	e003      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	74fb      	strb	r3, [r7, #19]
      break;
 800810e:	e000      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008112:	7cfb      	ldrb	r3, [r7, #19]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10b      	bne.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008118:	4b76      	ldr	r3, [pc, #472]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800811a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800811e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008126:	4973      	ldr	r1, [pc, #460]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008128:	4313      	orrs	r3, r2
 800812a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800812e:	e001      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008130:	7cfb      	ldrb	r3, [r7, #19]
 8008132:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d041      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008144:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008148:	d02a      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800814a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800814e:	d824      	bhi.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008150:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008154:	d008      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008156:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800815a:	d81e      	bhi.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00a      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008160:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008164:	d010      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008166:	e018      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008168:	4b62      	ldr	r3, [pc, #392]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	4a61      	ldr	r2, [pc, #388]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800816e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008172:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008174:	e015      	b.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	3304      	adds	r3, #4
 800817a:	2100      	movs	r1, #0
 800817c:	4618      	mov	r0, r3
 800817e:	f000 fa85 	bl	800868c <RCCEx_PLLSAI1_Config>
 8008182:	4603      	mov	r3, r0
 8008184:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008186:	e00c      	b.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	3320      	adds	r3, #32
 800818c:	2100      	movs	r1, #0
 800818e:	4618      	mov	r0, r3
 8008190:	f000 fb6e 	bl	8008870 <RCCEx_PLLSAI2_Config>
 8008194:	4603      	mov	r3, r0
 8008196:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008198:	e003      	b.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	74fb      	strb	r3, [r7, #19]
      break;
 800819e:	e000      	b.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80081a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081a2:	7cfb      	ldrb	r3, [r7, #19]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10b      	bne.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80081a8:	4b52      	ldr	r3, [pc, #328]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081b6:	494f      	ldr	r1, [pc, #316]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081b8:	4313      	orrs	r3, r2
 80081ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80081be:	e001      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c0:	7cfb      	ldrb	r3, [r7, #19]
 80081c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 80a0 	beq.w	8008312 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081d2:	2300      	movs	r3, #0
 80081d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80081d6:	4b47      	ldr	r3, [pc, #284]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80081e2:	2301      	movs	r3, #1
 80081e4:	e000      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80081e6:	2300      	movs	r3, #0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00d      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081ec:	4b41      	ldr	r3, [pc, #260]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081f0:	4a40      	ldr	r2, [pc, #256]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80081f8:	4b3e      	ldr	r3, [pc, #248]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008200:	60bb      	str	r3, [r7, #8]
 8008202:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008204:	2301      	movs	r3, #1
 8008206:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008208:	4b3b      	ldr	r3, [pc, #236]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a3a      	ldr	r2, [pc, #232]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800820e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008212:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008214:	f7fb fa72 	bl	80036fc <HAL_GetTick>
 8008218:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800821a:	e009      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800821c:	f7fb fa6e 	bl	80036fc <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b02      	cmp	r3, #2
 8008228:	d902      	bls.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	74fb      	strb	r3, [r7, #19]
        break;
 800822e:	e005      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008230:	4b31      	ldr	r3, [pc, #196]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008238:	2b00      	cmp	r3, #0
 800823a:	d0ef      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800823c:	7cfb      	ldrb	r3, [r7, #19]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d15c      	bne.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008242:	4b2c      	ldr	r3, [pc, #176]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008248:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800824c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d01f      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	429a      	cmp	r2, r3
 800825e:	d019      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008260:	4b24      	ldr	r3, [pc, #144]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008266:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800826a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800826c:	4b21      	ldr	r3, [pc, #132]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800826e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008272:	4a20      	ldr	r2, [pc, #128]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008278:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800827c:	4b1d      	ldr	r3, [pc, #116]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800827e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008282:	4a1c      	ldr	r2, [pc, #112]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008284:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008288:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800828c:	4a19      	ldr	r2, [pc, #100]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b00      	cmp	r3, #0
 800829c:	d016      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800829e:	f7fb fa2d 	bl	80036fc <HAL_GetTick>
 80082a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082a4:	e00b      	b.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082a6:	f7fb fa29 	bl	80036fc <HAL_GetTick>
 80082aa:	4602      	mov	r2, r0
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d902      	bls.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	74fb      	strb	r3, [r7, #19]
            break;
 80082bc:	e006      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082be:	4b0d      	ldr	r3, [pc, #52]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082c4:	f003 0302 	and.w	r3, r3, #2
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d0ec      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80082cc:	7cfb      	ldrb	r3, [r7, #19]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10c      	bne.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082d2:	4b08      	ldr	r3, [pc, #32]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082e2:	4904      	ldr	r1, [pc, #16]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082e4:	4313      	orrs	r3, r2
 80082e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80082ea:	e009      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80082ec:	7cfb      	ldrb	r3, [r7, #19]
 80082ee:	74bb      	strb	r3, [r7, #18]
 80082f0:	e006      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80082f2:	bf00      	nop
 80082f4:	40021000 	.word	0x40021000
 80082f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082fc:	7cfb      	ldrb	r3, [r7, #19]
 80082fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008300:	7c7b      	ldrb	r3, [r7, #17]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d105      	bne.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008306:	4ba6      	ldr	r3, [pc, #664]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800830a:	4aa5      	ldr	r2, [pc, #660]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800830c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008310:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00a      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800831e:	4ba0      	ldr	r3, [pc, #640]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008324:	f023 0203 	bic.w	r2, r3, #3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832c:	499c      	ldr	r1, [pc, #624]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800832e:	4313      	orrs	r3, r2
 8008330:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0302 	and.w	r3, r3, #2
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00a      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008340:	4b97      	ldr	r3, [pc, #604]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008346:	f023 020c 	bic.w	r2, r3, #12
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800834e:	4994      	ldr	r1, [pc, #592]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008350:	4313      	orrs	r3, r2
 8008352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0304 	and.w	r3, r3, #4
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008362:	4b8f      	ldr	r3, [pc, #572]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008368:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008370:	498b      	ldr	r1, [pc, #556]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008372:	4313      	orrs	r3, r2
 8008374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0308 	and.w	r3, r3, #8
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00a      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008384:	4b86      	ldr	r3, [pc, #536]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800838a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008392:	4983      	ldr	r1, [pc, #524]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008394:	4313      	orrs	r3, r2
 8008396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 0310 	and.w	r3, r3, #16
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00a      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80083a6:	4b7e      	ldr	r3, [pc, #504]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083b4:	497a      	ldr	r1, [pc, #488]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0320 	and.w	r3, r3, #32
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00a      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083c8:	4b75      	ldr	r3, [pc, #468]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083d6:	4972      	ldr	r1, [pc, #456]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083d8:	4313      	orrs	r3, r2
 80083da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00a      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083ea:	4b6d      	ldr	r3, [pc, #436]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083f8:	4969      	ldr	r1, [pc, #420]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00a      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800840c:	4b64      	ldr	r3, [pc, #400]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800840e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008412:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800841a:	4961      	ldr	r1, [pc, #388]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800841c:	4313      	orrs	r3, r2
 800841e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800842e:	4b5c      	ldr	r3, [pc, #368]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008434:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800843c:	4958      	ldr	r1, [pc, #352]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800843e:	4313      	orrs	r3, r2
 8008440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00a      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008450:	4b53      	ldr	r3, [pc, #332]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008456:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800845e:	4950      	ldr	r1, [pc, #320]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008460:	4313      	orrs	r3, r2
 8008462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00a      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008472:	4b4b      	ldr	r3, [pc, #300]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008478:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008480:	4947      	ldr	r1, [pc, #284]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008482:	4313      	orrs	r3, r2
 8008484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00a      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008494:	4b42      	ldr	r3, [pc, #264]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008496:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800849a:	f023 0203 	bic.w	r2, r3, #3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084a2:	493f      	ldr	r1, [pc, #252]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d028      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084b6:	4b3a      	ldr	r3, [pc, #232]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80084b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084c4:	4936      	ldr	r1, [pc, #216]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084d4:	d106      	bne.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084d6:	4b32      	ldr	r3, [pc, #200]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	4a31      	ldr	r2, [pc, #196]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80084dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084e0:	60d3      	str	r3, [r2, #12]
 80084e2:	e011      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80084ec:	d10c      	bne.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	3304      	adds	r3, #4
 80084f2:	2101      	movs	r1, #1
 80084f4:	4618      	mov	r0, r3
 80084f6:	f000 f8c9 	bl	800868c <RCCEx_PLLSAI1_Config>
 80084fa:	4603      	mov	r3, r0
 80084fc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80084fe:	7cfb      	ldrb	r3, [r7, #19]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8008504:	7cfb      	ldrb	r3, [r7, #19]
 8008506:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d028      	beq.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008514:	4b22      	ldr	r3, [pc, #136]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800851a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008522:	491f      	ldr	r1, [pc, #124]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008524:	4313      	orrs	r3, r2
 8008526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800852e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008532:	d106      	bne.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008534:	4b1a      	ldr	r3, [pc, #104]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	4a19      	ldr	r2, [pc, #100]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800853a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800853e:	60d3      	str	r3, [r2, #12]
 8008540:	e011      	b.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008546:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800854a:	d10c      	bne.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	3304      	adds	r3, #4
 8008550:	2101      	movs	r1, #1
 8008552:	4618      	mov	r0, r3
 8008554:	f000 f89a 	bl	800868c <RCCEx_PLLSAI1_Config>
 8008558:	4603      	mov	r3, r0
 800855a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800855c:	7cfb      	ldrb	r3, [r7, #19]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8008562:	7cfb      	ldrb	r3, [r7, #19]
 8008564:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800856e:	2b00      	cmp	r3, #0
 8008570:	d02a      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008572:	4b0b      	ldr	r3, [pc, #44]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008578:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008580:	4907      	ldr	r1, [pc, #28]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008582:	4313      	orrs	r3, r2
 8008584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800858c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008590:	d108      	bne.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008592:	4b03      	ldr	r3, [pc, #12]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	4a02      	ldr	r2, [pc, #8]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008598:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800859c:	60d3      	str	r3, [r2, #12]
 800859e:	e013      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80085a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80085ac:	d10c      	bne.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	3304      	adds	r3, #4
 80085b2:	2101      	movs	r1, #1
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 f869 	bl	800868c <RCCEx_PLLSAI1_Config>
 80085ba:	4603      	mov	r3, r0
 80085bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80085be:	7cfb      	ldrb	r3, [r7, #19]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d001      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80085c4:	7cfb      	ldrb	r3, [r7, #19]
 80085c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d02f      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085d4:	4b2c      	ldr	r3, [pc, #176]	@ (8008688 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80085d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085e2:	4929      	ldr	r1, [pc, #164]	@ (8008688 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80085e4:	4313      	orrs	r3, r2
 80085e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085f2:	d10d      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3304      	adds	r3, #4
 80085f8:	2102      	movs	r1, #2
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 f846 	bl	800868c <RCCEx_PLLSAI1_Config>
 8008600:	4603      	mov	r3, r0
 8008602:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008604:	7cfb      	ldrb	r3, [r7, #19]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d014      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800860a:	7cfb      	ldrb	r3, [r7, #19]
 800860c:	74bb      	strb	r3, [r7, #18]
 800860e:	e011      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008614:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008618:	d10c      	bne.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	3320      	adds	r3, #32
 800861e:	2102      	movs	r1, #2
 8008620:	4618      	mov	r0, r3
 8008622:	f000 f925 	bl	8008870 <RCCEx_PLLSAI2_Config>
 8008626:	4603      	mov	r3, r0
 8008628:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800862a:	7cfb      	ldrb	r3, [r7, #19]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8008630:	7cfb      	ldrb	r3, [r7, #19]
 8008632:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00b      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008640:	4b11      	ldr	r3, [pc, #68]	@ (8008688 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008646:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008650:	490d      	ldr	r1, [pc, #52]	@ (8008688 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008652:	4313      	orrs	r3, r2
 8008654:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00b      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008664:	4b08      	ldr	r3, [pc, #32]	@ (8008688 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800866a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008674:	4904      	ldr	r1, [pc, #16]	@ (8008688 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008676:	4313      	orrs	r3, r2
 8008678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800867c:	7cbb      	ldrb	r3, [r7, #18]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3718      	adds	r7, #24
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	40021000 	.word	0x40021000

0800868c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800869a:	4b74      	ldr	r3, [pc, #464]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	f003 0303 	and.w	r3, r3, #3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d018      	beq.n	80086d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80086a6:	4b71      	ldr	r3, [pc, #452]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	f003 0203 	and.w	r2, r3, #3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d10d      	bne.n	80086d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
       ||
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d009      	beq.n	80086d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80086be:	4b6b      	ldr	r3, [pc, #428]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	091b      	lsrs	r3, r3, #4
 80086c4:	f003 0307 	and.w	r3, r3, #7
 80086c8:	1c5a      	adds	r2, r3, #1
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	685b      	ldr	r3, [r3, #4]
       ||
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d047      	beq.n	8008762 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	73fb      	strb	r3, [r7, #15]
 80086d6:	e044      	b.n	8008762 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2b03      	cmp	r3, #3
 80086de:	d018      	beq.n	8008712 <RCCEx_PLLSAI1_Config+0x86>
 80086e0:	2b03      	cmp	r3, #3
 80086e2:	d825      	bhi.n	8008730 <RCCEx_PLLSAI1_Config+0xa4>
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d002      	beq.n	80086ee <RCCEx_PLLSAI1_Config+0x62>
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d009      	beq.n	8008700 <RCCEx_PLLSAI1_Config+0x74>
 80086ec:	e020      	b.n	8008730 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80086ee:	4b5f      	ldr	r3, [pc, #380]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d11d      	bne.n	8008736 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086fe:	e01a      	b.n	8008736 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008700:	4b5a      	ldr	r3, [pc, #360]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008708:	2b00      	cmp	r3, #0
 800870a:	d116      	bne.n	800873a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008710:	e013      	b.n	800873a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008712:	4b56      	ldr	r3, [pc, #344]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10f      	bne.n	800873e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800871e:	4b53      	ldr	r3, [pc, #332]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d109      	bne.n	800873e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800872e:	e006      	b.n	800873e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	73fb      	strb	r3, [r7, #15]
      break;
 8008734:	e004      	b.n	8008740 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008736:	bf00      	nop
 8008738:	e002      	b.n	8008740 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800873a:	bf00      	nop
 800873c:	e000      	b.n	8008740 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800873e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008740:	7bfb      	ldrb	r3, [r7, #15]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10d      	bne.n	8008762 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008746:	4b49      	ldr	r3, [pc, #292]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6819      	ldr	r1, [r3, #0]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	3b01      	subs	r3, #1
 8008758:	011b      	lsls	r3, r3, #4
 800875a:	430b      	orrs	r3, r1
 800875c:	4943      	ldr	r1, [pc, #268]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 800875e:	4313      	orrs	r3, r2
 8008760:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008762:	7bfb      	ldrb	r3, [r7, #15]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d17c      	bne.n	8008862 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008768:	4b40      	ldr	r3, [pc, #256]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a3f      	ldr	r2, [pc, #252]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 800876e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008772:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008774:	f7fa ffc2 	bl	80036fc <HAL_GetTick>
 8008778:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800877a:	e009      	b.n	8008790 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800877c:	f7fa ffbe 	bl	80036fc <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	2b02      	cmp	r3, #2
 8008788:	d902      	bls.n	8008790 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	73fb      	strb	r3, [r7, #15]
        break;
 800878e:	e005      	b.n	800879c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008790:	4b36      	ldr	r3, [pc, #216]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1ef      	bne.n	800877c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d15f      	bne.n	8008862 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d110      	bne.n	80087ca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80087a8:	4b30      	ldr	r3, [pc, #192]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80087b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	6892      	ldr	r2, [r2, #8]
 80087b8:	0211      	lsls	r1, r2, #8
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	68d2      	ldr	r2, [r2, #12]
 80087be:	06d2      	lsls	r2, r2, #27
 80087c0:	430a      	orrs	r2, r1
 80087c2:	492a      	ldr	r1, [pc, #168]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 80087c4:	4313      	orrs	r3, r2
 80087c6:	610b      	str	r3, [r1, #16]
 80087c8:	e027      	b.n	800881a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d112      	bne.n	80087f6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80087d0:	4b26      	ldr	r3, [pc, #152]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80087d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	6892      	ldr	r2, [r2, #8]
 80087e0:	0211      	lsls	r1, r2, #8
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	6912      	ldr	r2, [r2, #16]
 80087e6:	0852      	lsrs	r2, r2, #1
 80087e8:	3a01      	subs	r2, #1
 80087ea:	0552      	lsls	r2, r2, #21
 80087ec:	430a      	orrs	r2, r1
 80087ee:	491f      	ldr	r1, [pc, #124]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	610b      	str	r3, [r1, #16]
 80087f4:	e011      	b.n	800881a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80087f6:	4b1d      	ldr	r3, [pc, #116]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80087fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	6892      	ldr	r2, [r2, #8]
 8008806:	0211      	lsls	r1, r2, #8
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	6952      	ldr	r2, [r2, #20]
 800880c:	0852      	lsrs	r2, r2, #1
 800880e:	3a01      	subs	r2, #1
 8008810:	0652      	lsls	r2, r2, #25
 8008812:	430a      	orrs	r2, r1
 8008814:	4915      	ldr	r1, [pc, #84]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008816:	4313      	orrs	r3, r2
 8008818:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800881a:	4b14      	ldr	r3, [pc, #80]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a13      	ldr	r2, [pc, #76]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008820:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008824:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008826:	f7fa ff69 	bl	80036fc <HAL_GetTick>
 800882a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800882c:	e009      	b.n	8008842 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800882e:	f7fa ff65 	bl	80036fc <HAL_GetTick>
 8008832:	4602      	mov	r2, r0
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	2b02      	cmp	r3, #2
 800883a:	d902      	bls.n	8008842 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	73fb      	strb	r3, [r7, #15]
          break;
 8008840:	e005      	b.n	800884e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008842:	4b0a      	ldr	r3, [pc, #40]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d0ef      	beq.n	800882e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800884e:	7bfb      	ldrb	r3, [r7, #15]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d106      	bne.n	8008862 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008854:	4b05      	ldr	r3, [pc, #20]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008856:	691a      	ldr	r2, [r3, #16]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	4903      	ldr	r1, [pc, #12]	@ (800886c <RCCEx_PLLSAI1_Config+0x1e0>)
 800885e:	4313      	orrs	r3, r2
 8008860:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008862:	7bfb      	ldrb	r3, [r7, #15]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	40021000 	.word	0x40021000

08008870 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800887e:	4b69      	ldr	r3, [pc, #420]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	f003 0303 	and.w	r3, r3, #3
 8008886:	2b00      	cmp	r3, #0
 8008888:	d018      	beq.n	80088bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800888a:	4b66      	ldr	r3, [pc, #408]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	f003 0203 	and.w	r2, r3, #3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	429a      	cmp	r2, r3
 8008898:	d10d      	bne.n	80088b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
       ||
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d009      	beq.n	80088b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80088a2:	4b60      	ldr	r3, [pc, #384]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	091b      	lsrs	r3, r3, #4
 80088a8:	f003 0307 	and.w	r3, r3, #7
 80088ac:	1c5a      	adds	r2, r3, #1
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685b      	ldr	r3, [r3, #4]
       ||
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d047      	beq.n	8008946 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	73fb      	strb	r3, [r7, #15]
 80088ba:	e044      	b.n	8008946 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b03      	cmp	r3, #3
 80088c2:	d018      	beq.n	80088f6 <RCCEx_PLLSAI2_Config+0x86>
 80088c4:	2b03      	cmp	r3, #3
 80088c6:	d825      	bhi.n	8008914 <RCCEx_PLLSAI2_Config+0xa4>
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d002      	beq.n	80088d2 <RCCEx_PLLSAI2_Config+0x62>
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d009      	beq.n	80088e4 <RCCEx_PLLSAI2_Config+0x74>
 80088d0:	e020      	b.n	8008914 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80088d2:	4b54      	ldr	r3, [pc, #336]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d11d      	bne.n	800891a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80088e2:	e01a      	b.n	800891a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80088e4:	4b4f      	ldr	r3, [pc, #316]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d116      	bne.n	800891e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80088f4:	e013      	b.n	800891e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80088f6:	4b4b      	ldr	r3, [pc, #300]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10f      	bne.n	8008922 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008902:	4b48      	ldr	r3, [pc, #288]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d109      	bne.n	8008922 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008912:	e006      	b.n	8008922 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	73fb      	strb	r3, [r7, #15]
      break;
 8008918:	e004      	b.n	8008924 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800891a:	bf00      	nop
 800891c:	e002      	b.n	8008924 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800891e:	bf00      	nop
 8008920:	e000      	b.n	8008924 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008922:	bf00      	nop
    }

    if(status == HAL_OK)
 8008924:	7bfb      	ldrb	r3, [r7, #15]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10d      	bne.n	8008946 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800892a:	4b3e      	ldr	r3, [pc, #248]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6819      	ldr	r1, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	3b01      	subs	r3, #1
 800893c:	011b      	lsls	r3, r3, #4
 800893e:	430b      	orrs	r3, r1
 8008940:	4938      	ldr	r1, [pc, #224]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008942:	4313      	orrs	r3, r2
 8008944:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d166      	bne.n	8008a1a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800894c:	4b35      	ldr	r3, [pc, #212]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a34      	ldr	r2, [pc, #208]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008952:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008958:	f7fa fed0 	bl	80036fc <HAL_GetTick>
 800895c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800895e:	e009      	b.n	8008974 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008960:	f7fa fecc 	bl	80036fc <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	2b02      	cmp	r3, #2
 800896c:	d902      	bls.n	8008974 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	73fb      	strb	r3, [r7, #15]
        break;
 8008972:	e005      	b.n	8008980 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008974:	4b2b      	ldr	r3, [pc, #172]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1ef      	bne.n	8008960 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008980:	7bfb      	ldrb	r3, [r7, #15]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d149      	bne.n	8008a1a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d110      	bne.n	80089ae <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800898c:	4b25      	ldr	r3, [pc, #148]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8008994:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	6892      	ldr	r2, [r2, #8]
 800899c:	0211      	lsls	r1, r2, #8
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	68d2      	ldr	r2, [r2, #12]
 80089a2:	06d2      	lsls	r2, r2, #27
 80089a4:	430a      	orrs	r2, r1
 80089a6:	491f      	ldr	r1, [pc, #124]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 80089a8:	4313      	orrs	r3, r2
 80089aa:	614b      	str	r3, [r1, #20]
 80089ac:	e011      	b.n	80089d2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80089ae:	4b1d      	ldr	r3, [pc, #116]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80089b6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	6892      	ldr	r2, [r2, #8]
 80089be:	0211      	lsls	r1, r2, #8
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	6912      	ldr	r2, [r2, #16]
 80089c4:	0852      	lsrs	r2, r2, #1
 80089c6:	3a01      	subs	r2, #1
 80089c8:	0652      	lsls	r2, r2, #25
 80089ca:	430a      	orrs	r2, r1
 80089cc:	4915      	ldr	r1, [pc, #84]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 80089ce:	4313      	orrs	r3, r2
 80089d0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80089d2:	4b14      	ldr	r3, [pc, #80]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a13      	ldr	r2, [pc, #76]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 80089d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089dc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089de:	f7fa fe8d 	bl	80036fc <HAL_GetTick>
 80089e2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80089e4:	e009      	b.n	80089fa <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80089e6:	f7fa fe89 	bl	80036fc <HAL_GetTick>
 80089ea:	4602      	mov	r2, r0
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d902      	bls.n	80089fa <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80089f4:	2303      	movs	r3, #3
 80089f6:	73fb      	strb	r3, [r7, #15]
          break;
 80089f8:	e005      	b.n	8008a06 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80089fa:	4b0a      	ldr	r3, [pc, #40]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d0ef      	beq.n	80089e6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d106      	bne.n	8008a1a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008a0c:	4b05      	ldr	r3, [pc, #20]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008a0e:	695a      	ldr	r2, [r3, #20]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	4903      	ldr	r1, [pc, #12]	@ (8008a24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	40021000 	.word	0x40021000

08008a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e095      	b.n	8008b66 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d108      	bne.n	8008a54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a4a:	d009      	beq.n	8008a60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	61da      	str	r2, [r3, #28]
 8008a52:	e005      	b.n	8008a60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d106      	bne.n	8008a80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7f9 fb7c 	bl	8002178 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008aa0:	d902      	bls.n	8008aa8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	60fb      	str	r3, [r7, #12]
 8008aa6:	e002      	b.n	8008aae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008aa8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008aac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008ab6:	d007      	beq.n	8008ac8 <HAL_SPI_Init+0xa0>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ac0:	d002      	beq.n	8008ac8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008ad8:	431a      	orrs	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	f003 0302 	and.w	r3, r3, #2
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	f003 0301 	and.w	r3, r3, #1
 8008aec:	431a      	orrs	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008af6:	431a      	orrs	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	69db      	ldr	r3, [r3, #28]
 8008afc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b00:	431a      	orrs	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b0a:	ea42 0103 	orr.w	r1, r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b12:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	0c1b      	lsrs	r3, r3, #16
 8008b24:	f003 0204 	and.w	r2, r3, #4
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b2c:	f003 0310 	and.w	r3, r3, #16
 8008b30:	431a      	orrs	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b36:	f003 0308 	and.w	r3, r3, #8
 8008b3a:	431a      	orrs	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008b44:	ea42 0103 	orr.w	r1, r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	430a      	orrs	r2, r1
 8008b54:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b082      	sub	sp, #8
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e049      	b.n	8008c14 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d106      	bne.n	8008b9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f7f9 fb7f 	bl	8002298 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	3304      	adds	r3, #4
 8008baa:	4619      	mov	r1, r3
 8008bac:	4610      	mov	r0, r2
 8008bae:	f000 fa9d 	bl	80090ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d001      	beq.n	8008c34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e04f      	b.n	8008cd4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f042 0201 	orr.w	r2, r2, #1
 8008c4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a23      	ldr	r2, [pc, #140]	@ (8008ce0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d01d      	beq.n	8008c92 <HAL_TIM_Base_Start_IT+0x76>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c5e:	d018      	beq.n	8008c92 <HAL_TIM_Base_Start_IT+0x76>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a1f      	ldr	r2, [pc, #124]	@ (8008ce4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d013      	beq.n	8008c92 <HAL_TIM_Base_Start_IT+0x76>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8008ce8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d00e      	beq.n	8008c92 <HAL_TIM_Base_Start_IT+0x76>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a1c      	ldr	r2, [pc, #112]	@ (8008cec <HAL_TIM_Base_Start_IT+0xd0>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d009      	beq.n	8008c92 <HAL_TIM_Base_Start_IT+0x76>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a1b      	ldr	r2, [pc, #108]	@ (8008cf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d004      	beq.n	8008c92 <HAL_TIM_Base_Start_IT+0x76>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a19      	ldr	r2, [pc, #100]	@ (8008cf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d115      	bne.n	8008cbe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	689a      	ldr	r2, [r3, #8]
 8008c98:	4b17      	ldr	r3, [pc, #92]	@ (8008cf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2b06      	cmp	r3, #6
 8008ca2:	d015      	beq.n	8008cd0 <HAL_TIM_Base_Start_IT+0xb4>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008caa:	d011      	beq.n	8008cd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f042 0201 	orr.w	r2, r2, #1
 8008cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cbc:	e008      	b.n	8008cd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f042 0201 	orr.w	r2, r2, #1
 8008ccc:	601a      	str	r2, [r3, #0]
 8008cce:	e000      	b.n	8008cd2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3714      	adds	r7, #20
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	40012c00 	.word	0x40012c00
 8008ce4:	40000400 	.word	0x40000400
 8008ce8:	40000800 	.word	0x40000800
 8008cec:	40000c00 	.word	0x40000c00
 8008cf0:	40013400 	.word	0x40013400
 8008cf4:	40014000 	.word	0x40014000
 8008cf8:	00010007 	.word	0x00010007

08008cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	f003 0302 	and.w	r3, r3, #2
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d020      	beq.n	8008d60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f003 0302 	and.w	r3, r3, #2
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d01b      	beq.n	8008d60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f06f 0202 	mvn.w	r2, #2
 8008d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2201      	movs	r2, #1
 8008d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	f003 0303 	and.w	r3, r3, #3
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d003      	beq.n	8008d4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f9b2 	bl	80090b0 <HAL_TIM_IC_CaptureCallback>
 8008d4c:	e005      	b.n	8008d5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f9a4 	bl	800909c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f9b5 	bl	80090c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	f003 0304 	and.w	r3, r3, #4
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d020      	beq.n	8008dac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f003 0304 	and.w	r3, r3, #4
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d01b      	beq.n	8008dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f06f 0204 	mvn.w	r2, #4
 8008d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2202      	movs	r2, #2
 8008d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d003      	beq.n	8008d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 f98c 	bl	80090b0 <HAL_TIM_IC_CaptureCallback>
 8008d98:	e005      	b.n	8008da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f97e 	bl	800909c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f98f 	bl	80090c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	f003 0308 	and.w	r3, r3, #8
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d020      	beq.n	8008df8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f003 0308 	and.w	r3, r3, #8
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d01b      	beq.n	8008df8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f06f 0208 	mvn.w	r2, #8
 8008dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2204      	movs	r2, #4
 8008dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	69db      	ldr	r3, [r3, #28]
 8008dd6:	f003 0303 	and.w	r3, r3, #3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f966 	bl	80090b0 <HAL_TIM_IC_CaptureCallback>
 8008de4:	e005      	b.n	8008df2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f958 	bl	800909c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f969 	bl	80090c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	f003 0310 	and.w	r3, r3, #16
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d020      	beq.n	8008e44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f003 0310 	and.w	r3, r3, #16
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01b      	beq.n	8008e44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f06f 0210 	mvn.w	r2, #16
 8008e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2208      	movs	r2, #8
 8008e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	69db      	ldr	r3, [r3, #28]
 8008e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f940 	bl	80090b0 <HAL_TIM_IC_CaptureCallback>
 8008e30:	e005      	b.n	8008e3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f932 	bl	800909c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f943 	bl	80090c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00c      	beq.n	8008e68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f003 0301 	and.w	r3, r3, #1
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d007      	beq.n	8008e68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f06f 0201 	mvn.w	r2, #1
 8008e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f7f8 ffa0 	bl	8001da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d104      	bne.n	8008e7c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00c      	beq.n	8008e96 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d007      	beq.n	8008e96 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fafd 	bl	8009490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00c      	beq.n	8008eba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d007      	beq.n	8008eba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 faf5 	bl	80094a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00c      	beq.n	8008ede <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d007      	beq.n	8008ede <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f8fd 	bl	80090d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	f003 0320 	and.w	r3, r3, #32
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00c      	beq.n	8008f02 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f003 0320 	and.w	r3, r3, #32
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d007      	beq.n	8008f02 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f06f 0220 	mvn.w	r2, #32
 8008efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fabd 	bl	800947c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f02:	bf00      	nop
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b084      	sub	sp, #16
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d101      	bne.n	8008f26 <HAL_TIM_ConfigClockSource+0x1c>
 8008f22:	2302      	movs	r3, #2
 8008f24:	e0b6      	b.n	8009094 <HAL_TIM_ConfigClockSource+0x18a>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2202      	movs	r2, #2
 8008f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f44:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008f48:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f50:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f62:	d03e      	beq.n	8008fe2 <HAL_TIM_ConfigClockSource+0xd8>
 8008f64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f68:	f200 8087 	bhi.w	800907a <HAL_TIM_ConfigClockSource+0x170>
 8008f6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f70:	f000 8086 	beq.w	8009080 <HAL_TIM_ConfigClockSource+0x176>
 8008f74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f78:	d87f      	bhi.n	800907a <HAL_TIM_ConfigClockSource+0x170>
 8008f7a:	2b70      	cmp	r3, #112	@ 0x70
 8008f7c:	d01a      	beq.n	8008fb4 <HAL_TIM_ConfigClockSource+0xaa>
 8008f7e:	2b70      	cmp	r3, #112	@ 0x70
 8008f80:	d87b      	bhi.n	800907a <HAL_TIM_ConfigClockSource+0x170>
 8008f82:	2b60      	cmp	r3, #96	@ 0x60
 8008f84:	d050      	beq.n	8009028 <HAL_TIM_ConfigClockSource+0x11e>
 8008f86:	2b60      	cmp	r3, #96	@ 0x60
 8008f88:	d877      	bhi.n	800907a <HAL_TIM_ConfigClockSource+0x170>
 8008f8a:	2b50      	cmp	r3, #80	@ 0x50
 8008f8c:	d03c      	beq.n	8009008 <HAL_TIM_ConfigClockSource+0xfe>
 8008f8e:	2b50      	cmp	r3, #80	@ 0x50
 8008f90:	d873      	bhi.n	800907a <HAL_TIM_ConfigClockSource+0x170>
 8008f92:	2b40      	cmp	r3, #64	@ 0x40
 8008f94:	d058      	beq.n	8009048 <HAL_TIM_ConfigClockSource+0x13e>
 8008f96:	2b40      	cmp	r3, #64	@ 0x40
 8008f98:	d86f      	bhi.n	800907a <HAL_TIM_ConfigClockSource+0x170>
 8008f9a:	2b30      	cmp	r3, #48	@ 0x30
 8008f9c:	d064      	beq.n	8009068 <HAL_TIM_ConfigClockSource+0x15e>
 8008f9e:	2b30      	cmp	r3, #48	@ 0x30
 8008fa0:	d86b      	bhi.n	800907a <HAL_TIM_ConfigClockSource+0x170>
 8008fa2:	2b20      	cmp	r3, #32
 8008fa4:	d060      	beq.n	8009068 <HAL_TIM_ConfigClockSource+0x15e>
 8008fa6:	2b20      	cmp	r3, #32
 8008fa8:	d867      	bhi.n	800907a <HAL_TIM_ConfigClockSource+0x170>
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d05c      	beq.n	8009068 <HAL_TIM_ConfigClockSource+0x15e>
 8008fae:	2b10      	cmp	r3, #16
 8008fb0:	d05a      	beq.n	8009068 <HAL_TIM_ConfigClockSource+0x15e>
 8008fb2:	e062      	b.n	800907a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008fc4:	f000 f9b2 	bl	800932c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008fd6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	609a      	str	r2, [r3, #8]
      break;
 8008fe0:	e04f      	b.n	8009082 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ff2:	f000 f99b 	bl	800932c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	689a      	ldr	r2, [r3, #8]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009004:	609a      	str	r2, [r3, #8]
      break;
 8009006:	e03c      	b.n	8009082 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009014:	461a      	mov	r2, r3
 8009016:	f000 f90f 	bl	8009238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2150      	movs	r1, #80	@ 0x50
 8009020:	4618      	mov	r0, r3
 8009022:	f000 f968 	bl	80092f6 <TIM_ITRx_SetConfig>
      break;
 8009026:	e02c      	b.n	8009082 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009034:	461a      	mov	r2, r3
 8009036:	f000 f92e 	bl	8009296 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2160      	movs	r1, #96	@ 0x60
 8009040:	4618      	mov	r0, r3
 8009042:	f000 f958 	bl	80092f6 <TIM_ITRx_SetConfig>
      break;
 8009046:	e01c      	b.n	8009082 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009054:	461a      	mov	r2, r3
 8009056:	f000 f8ef 	bl	8009238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2140      	movs	r1, #64	@ 0x40
 8009060:	4618      	mov	r0, r3
 8009062:	f000 f948 	bl	80092f6 <TIM_ITRx_SetConfig>
      break;
 8009066:	e00c      	b.n	8009082 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4619      	mov	r1, r3
 8009072:	4610      	mov	r0, r2
 8009074:	f000 f93f 	bl	80092f6 <TIM_ITRx_SetConfig>
      break;
 8009078:	e003      	b.n	8009082 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	73fb      	strb	r3, [r7, #15]
      break;
 800907e:	e000      	b.n	8009082 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009080:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009092:	7bfb      	ldrb	r3, [r7, #15]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090a4:	bf00      	nop
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090cc:	bf00      	nop
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a46      	ldr	r2, [pc, #280]	@ (8009218 <TIM_Base_SetConfig+0x12c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d013      	beq.n	800912c <TIM_Base_SetConfig+0x40>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800910a:	d00f      	beq.n	800912c <TIM_Base_SetConfig+0x40>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a43      	ldr	r2, [pc, #268]	@ (800921c <TIM_Base_SetConfig+0x130>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d00b      	beq.n	800912c <TIM_Base_SetConfig+0x40>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a42      	ldr	r2, [pc, #264]	@ (8009220 <TIM_Base_SetConfig+0x134>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d007      	beq.n	800912c <TIM_Base_SetConfig+0x40>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a41      	ldr	r2, [pc, #260]	@ (8009224 <TIM_Base_SetConfig+0x138>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d003      	beq.n	800912c <TIM_Base_SetConfig+0x40>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a40      	ldr	r2, [pc, #256]	@ (8009228 <TIM_Base_SetConfig+0x13c>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d108      	bne.n	800913e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	4313      	orrs	r3, r2
 800913c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a35      	ldr	r2, [pc, #212]	@ (8009218 <TIM_Base_SetConfig+0x12c>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d01f      	beq.n	8009186 <TIM_Base_SetConfig+0x9a>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800914c:	d01b      	beq.n	8009186 <TIM_Base_SetConfig+0x9a>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a32      	ldr	r2, [pc, #200]	@ (800921c <TIM_Base_SetConfig+0x130>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d017      	beq.n	8009186 <TIM_Base_SetConfig+0x9a>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a31      	ldr	r2, [pc, #196]	@ (8009220 <TIM_Base_SetConfig+0x134>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d013      	beq.n	8009186 <TIM_Base_SetConfig+0x9a>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a30      	ldr	r2, [pc, #192]	@ (8009224 <TIM_Base_SetConfig+0x138>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d00f      	beq.n	8009186 <TIM_Base_SetConfig+0x9a>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a2f      	ldr	r2, [pc, #188]	@ (8009228 <TIM_Base_SetConfig+0x13c>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d00b      	beq.n	8009186 <TIM_Base_SetConfig+0x9a>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a2e      	ldr	r2, [pc, #184]	@ (800922c <TIM_Base_SetConfig+0x140>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d007      	beq.n	8009186 <TIM_Base_SetConfig+0x9a>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a2d      	ldr	r2, [pc, #180]	@ (8009230 <TIM_Base_SetConfig+0x144>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d003      	beq.n	8009186 <TIM_Base_SetConfig+0x9a>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a2c      	ldr	r2, [pc, #176]	@ (8009234 <TIM_Base_SetConfig+0x148>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d108      	bne.n	8009198 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800918c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	4313      	orrs	r3, r2
 8009196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	695b      	ldr	r3, [r3, #20]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	689a      	ldr	r2, [r3, #8]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a16      	ldr	r2, [pc, #88]	@ (8009218 <TIM_Base_SetConfig+0x12c>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d00f      	beq.n	80091e4 <TIM_Base_SetConfig+0xf8>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a18      	ldr	r2, [pc, #96]	@ (8009228 <TIM_Base_SetConfig+0x13c>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d00b      	beq.n	80091e4 <TIM_Base_SetConfig+0xf8>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a17      	ldr	r2, [pc, #92]	@ (800922c <TIM_Base_SetConfig+0x140>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d007      	beq.n	80091e4 <TIM_Base_SetConfig+0xf8>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a16      	ldr	r2, [pc, #88]	@ (8009230 <TIM_Base_SetConfig+0x144>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d003      	beq.n	80091e4 <TIM_Base_SetConfig+0xf8>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a15      	ldr	r2, [pc, #84]	@ (8009234 <TIM_Base_SetConfig+0x148>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d103      	bne.n	80091ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	691a      	ldr	r2, [r3, #16]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	f003 0301 	and.w	r3, r3, #1
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d105      	bne.n	800920a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	f023 0201 	bic.w	r2, r3, #1
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	611a      	str	r2, [r3, #16]
  }
}
 800920a:	bf00      	nop
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	40012c00 	.word	0x40012c00
 800921c:	40000400 	.word	0x40000400
 8009220:	40000800 	.word	0x40000800
 8009224:	40000c00 	.word	0x40000c00
 8009228:	40013400 	.word	0x40013400
 800922c:	40014000 	.word	0x40014000
 8009230:	40014400 	.word	0x40014400
 8009234:	40014800 	.word	0x40014800

08009238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009238:	b480      	push	{r7}
 800923a:	b087      	sub	sp, #28
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6a1b      	ldr	r3, [r3, #32]
 8009248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6a1b      	ldr	r3, [r3, #32]
 800924e:	f023 0201 	bic.w	r2, r3, #1
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	011b      	lsls	r3, r3, #4
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	4313      	orrs	r3, r2
 800926c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f023 030a 	bic.w	r3, r3, #10
 8009274:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009276:	697a      	ldr	r2, [r7, #20]
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	4313      	orrs	r3, r2
 800927c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	621a      	str	r2, [r3, #32]
}
 800928a:	bf00      	nop
 800928c:	371c      	adds	r7, #28
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr

08009296 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009296:	b480      	push	{r7}
 8009298:	b087      	sub	sp, #28
 800929a:	af00      	add	r7, sp, #0
 800929c:	60f8      	str	r0, [r7, #12]
 800929e:	60b9      	str	r1, [r7, #8]
 80092a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6a1b      	ldr	r3, [r3, #32]
 80092a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6a1b      	ldr	r3, [r3, #32]
 80092ac:	f023 0210 	bic.w	r2, r3, #16
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80092c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	031b      	lsls	r3, r3, #12
 80092c6:	693a      	ldr	r2, [r7, #16]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80092d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	011b      	lsls	r3, r3, #4
 80092d8:	697a      	ldr	r2, [r7, #20]
 80092da:	4313      	orrs	r3, r2
 80092dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	693a      	ldr	r2, [r7, #16]
 80092e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	621a      	str	r2, [r3, #32]
}
 80092ea:	bf00      	nop
 80092ec:	371c      	adds	r7, #28
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b085      	sub	sp, #20
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800930c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800930e:	683a      	ldr	r2, [r7, #0]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4313      	orrs	r3, r2
 8009314:	f043 0307 	orr.w	r3, r3, #7
 8009318:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	609a      	str	r2, [r3, #8]
}
 8009320:	bf00      	nop
 8009322:	3714      	adds	r7, #20
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800932c:	b480      	push	{r7}
 800932e:	b087      	sub	sp, #28
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
 8009338:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009346:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	021a      	lsls	r2, r3, #8
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	431a      	orrs	r2, r3
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	4313      	orrs	r3, r2
 8009354:	697a      	ldr	r2, [r7, #20]
 8009356:	4313      	orrs	r3, r2
 8009358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	697a      	ldr	r2, [r7, #20]
 800935e:	609a      	str	r2, [r3, #8]
}
 8009360:	bf00      	nop
 8009362:	371c      	adds	r7, #28
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800937c:	2b01      	cmp	r3, #1
 800937e:	d101      	bne.n	8009384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009380:	2302      	movs	r3, #2
 8009382:	e068      	b.n	8009456 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2202      	movs	r2, #2
 8009390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a2e      	ldr	r2, [pc, #184]	@ (8009464 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d004      	beq.n	80093b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a2d      	ldr	r2, [pc, #180]	@ (8009468 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d108      	bne.n	80093ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80093be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	4313      	orrs	r3, r2
 80093da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a1e      	ldr	r2, [pc, #120]	@ (8009464 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d01d      	beq.n	800942a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093f6:	d018      	beq.n	800942a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a1b      	ldr	r2, [pc, #108]	@ (800946c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d013      	beq.n	800942a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a1a      	ldr	r2, [pc, #104]	@ (8009470 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d00e      	beq.n	800942a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a18      	ldr	r2, [pc, #96]	@ (8009474 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d009      	beq.n	800942a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a13      	ldr	r2, [pc, #76]	@ (8009468 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d004      	beq.n	800942a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a14      	ldr	r2, [pc, #80]	@ (8009478 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d10c      	bne.n	8009444 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009430:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	4313      	orrs	r3, r2
 800943a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68ba      	ldr	r2, [r7, #8]
 8009442:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	40012c00 	.word	0x40012c00
 8009468:	40013400 	.word	0x40013400
 800946c:	40000400 	.word	0x40000400
 8009470:	40000800 	.word	0x40000800
 8009474:	40000c00 	.word	0x40000c00
 8009478:	40014000 	.word	0x40014000

0800947c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009498:	bf00      	nop
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d101      	bne.n	80094ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e040      	b.n	800954c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d106      	bne.n	80094e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7f8 ff02 	bl	80022e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2224      	movs	r2, #36	@ 0x24
 80094e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f022 0201 	bic.w	r2, r2, #1
 80094f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d002      	beq.n	8009504 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fe52 	bl	800a1a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fb97 	bl	8009c38 <UART_SetConfig>
 800950a:	4603      	mov	r3, r0
 800950c:	2b01      	cmp	r3, #1
 800950e:	d101      	bne.n	8009514 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e01b      	b.n	800954c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009522:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	689a      	ldr	r2, [r3, #8]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009532:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f042 0201 	orr.w	r2, r2, #1
 8009542:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fed1 	bl	800a2ec <UART_CheckIdleState>
 800954a:	4603      	mov	r3, r0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b08a      	sub	sp, #40	@ 0x28
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	4613      	mov	r3, r2
 8009560:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009568:	2b20      	cmp	r3, #32
 800956a:	d137      	bne.n	80095dc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d002      	beq.n	8009578 <HAL_UART_Receive_IT+0x24>
 8009572:	88fb      	ldrh	r3, [r7, #6]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d101      	bne.n	800957c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e030      	b.n	80095de <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a18      	ldr	r2, [pc, #96]	@ (80095e8 <HAL_UART_Receive_IT+0x94>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d01f      	beq.n	80095cc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009596:	2b00      	cmp	r3, #0
 8009598:	d018      	beq.n	80095cc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	e853 3f00 	ldrex	r3, [r3]
 80095a6:	613b      	str	r3, [r7, #16]
   return(result);
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80095ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	461a      	mov	r2, r3
 80095b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b8:	623b      	str	r3, [r7, #32]
 80095ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095bc:	69f9      	ldr	r1, [r7, #28]
 80095be:	6a3a      	ldr	r2, [r7, #32]
 80095c0:	e841 2300 	strex	r3, r2, [r1]
 80095c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1e6      	bne.n	800959a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80095cc:	88fb      	ldrh	r3, [r7, #6]
 80095ce:	461a      	mov	r2, r3
 80095d0:	68b9      	ldr	r1, [r7, #8]
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 ffa0 	bl	800a518 <UART_Start_Receive_IT>
 80095d8:	4603      	mov	r3, r0
 80095da:	e000      	b.n	80095de <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80095dc:	2302      	movs	r3, #2
  }
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3728      	adds	r7, #40	@ 0x28
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	40008000 	.word	0x40008000

080095ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b0ba      	sub	sp, #232	@ 0xe8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009612:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009616:	f640 030f 	movw	r3, #2063	@ 0x80f
 800961a:	4013      	ands	r3, r2
 800961c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009620:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009624:	2b00      	cmp	r3, #0
 8009626:	d115      	bne.n	8009654 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800962c:	f003 0320 	and.w	r3, r3, #32
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00f      	beq.n	8009654 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009638:	f003 0320 	and.w	r3, r3, #32
 800963c:	2b00      	cmp	r3, #0
 800963e:	d009      	beq.n	8009654 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009644:	2b00      	cmp	r3, #0
 8009646:	f000 82ca 	beq.w	8009bde <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	4798      	blx	r3
      }
      return;
 8009652:	e2c4      	b.n	8009bde <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009654:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009658:	2b00      	cmp	r3, #0
 800965a:	f000 8117 	beq.w	800988c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800965e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b00      	cmp	r3, #0
 8009668:	d106      	bne.n	8009678 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800966a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800966e:	4b85      	ldr	r3, [pc, #532]	@ (8009884 <HAL_UART_IRQHandler+0x298>)
 8009670:	4013      	ands	r3, r2
 8009672:	2b00      	cmp	r3, #0
 8009674:	f000 810a 	beq.w	800988c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800967c:	f003 0301 	and.w	r3, r3, #1
 8009680:	2b00      	cmp	r3, #0
 8009682:	d011      	beq.n	80096a8 <HAL_UART_IRQHandler+0xbc>
 8009684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00b      	beq.n	80096a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2201      	movs	r2, #1
 8009696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800969e:	f043 0201 	orr.w	r2, r3, #1
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096ac:	f003 0302 	and.w	r3, r3, #2
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d011      	beq.n	80096d8 <HAL_UART_IRQHandler+0xec>
 80096b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00b      	beq.n	80096d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2202      	movs	r2, #2
 80096c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096ce:	f043 0204 	orr.w	r2, r3, #4
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096dc:	f003 0304 	and.w	r3, r3, #4
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d011      	beq.n	8009708 <HAL_UART_IRQHandler+0x11c>
 80096e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096e8:	f003 0301 	and.w	r3, r3, #1
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00b      	beq.n	8009708 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2204      	movs	r2, #4
 80096f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096fe:	f043 0202 	orr.w	r2, r3, #2
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800970c:	f003 0308 	and.w	r3, r3, #8
 8009710:	2b00      	cmp	r3, #0
 8009712:	d017      	beq.n	8009744 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009718:	f003 0320 	and.w	r3, r3, #32
 800971c:	2b00      	cmp	r3, #0
 800971e:	d105      	bne.n	800972c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009724:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00b      	beq.n	8009744 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2208      	movs	r2, #8
 8009732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800973a:	f043 0208 	orr.w	r2, r3, #8
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009748:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800974c:	2b00      	cmp	r3, #0
 800974e:	d012      	beq.n	8009776 <HAL_UART_IRQHandler+0x18a>
 8009750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009754:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00c      	beq.n	8009776 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009764:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800976c:	f043 0220 	orr.w	r2, r3, #32
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800977c:	2b00      	cmp	r3, #0
 800977e:	f000 8230 	beq.w	8009be2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009786:	f003 0320 	and.w	r3, r3, #32
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00d      	beq.n	80097aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800978e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009792:	f003 0320 	and.w	r3, r3, #32
 8009796:	2b00      	cmp	r3, #0
 8009798:	d007      	beq.n	80097aa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097be:	2b40      	cmp	r3, #64	@ 0x40
 80097c0:	d005      	beq.n	80097ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80097c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80097c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d04f      	beq.n	800986e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 ff68 	bl	800a6a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097de:	2b40      	cmp	r3, #64	@ 0x40
 80097e0:	d141      	bne.n	8009866 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	3308      	adds	r3, #8
 80097e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80097f0:	e853 3f00 	ldrex	r3, [r3]
 80097f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80097f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80097fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009800:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3308      	adds	r3, #8
 800980a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800980e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009812:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009816:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800981a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800981e:	e841 2300 	strex	r3, r2, [r1]
 8009822:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009826:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1d9      	bne.n	80097e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009832:	2b00      	cmp	r3, #0
 8009834:	d013      	beq.n	800985e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800983a:	4a13      	ldr	r2, [pc, #76]	@ (8009888 <HAL_UART_IRQHandler+0x29c>)
 800983c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009842:	4618      	mov	r0, r3
 8009844:	f7fc fc32 	bl	80060ac <HAL_DMA_Abort_IT>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d017      	beq.n	800987e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009858:	4610      	mov	r0, r2
 800985a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800985c:	e00f      	b.n	800987e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f9d4 	bl	8009c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009864:	e00b      	b.n	800987e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f9d0 	bl	8009c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800986c:	e007      	b.n	800987e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f9cc 	bl	8009c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800987c:	e1b1      	b.n	8009be2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800987e:	bf00      	nop
    return;
 8009880:	e1af      	b.n	8009be2 <HAL_UART_IRQHandler+0x5f6>
 8009882:	bf00      	nop
 8009884:	04000120 	.word	0x04000120
 8009888:	0800a76d 	.word	0x0800a76d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009890:	2b01      	cmp	r3, #1
 8009892:	f040 816a 	bne.w	8009b6a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800989a:	f003 0310 	and.w	r3, r3, #16
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f000 8163 	beq.w	8009b6a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80098a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098a8:	f003 0310 	and.w	r3, r3, #16
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f000 815c 	beq.w	8009b6a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2210      	movs	r2, #16
 80098b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098c4:	2b40      	cmp	r3, #64	@ 0x40
 80098c6:	f040 80d4 	bne.w	8009a72 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80098d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 80ad 	beq.w	8009a3a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80098e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80098ea:	429a      	cmp	r2, r3
 80098ec:	f080 80a5 	bcs.w	8009a3a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80098f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 0320 	and.w	r3, r3, #32
 8009906:	2b00      	cmp	r3, #0
 8009908:	f040 8086 	bne.w	8009a18 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009914:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009918:	e853 3f00 	ldrex	r3, [r3]
 800991c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009920:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009928:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	461a      	mov	r2, r3
 8009932:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009936:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800993a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009942:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009946:	e841 2300 	strex	r3, r2, [r1]
 800994a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800994e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1da      	bne.n	800990c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	3308      	adds	r3, #8
 800995c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009960:	e853 3f00 	ldrex	r3, [r3]
 8009964:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009966:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009968:	f023 0301 	bic.w	r3, r3, #1
 800996c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3308      	adds	r3, #8
 8009976:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800997a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800997e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009980:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009982:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009986:	e841 2300 	strex	r3, r2, [r1]
 800998a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800998c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1e1      	bne.n	8009956 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	3308      	adds	r3, #8
 8009998:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800999c:	e853 3f00 	ldrex	r3, [r3]
 80099a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80099a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80099a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3308      	adds	r3, #8
 80099b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80099b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80099b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80099bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80099be:	e841 2300 	strex	r3, r2, [r1]
 80099c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80099c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1e3      	bne.n	8009992 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2220      	movs	r2, #32
 80099ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099e0:	e853 3f00 	ldrex	r3, [r3]
 80099e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80099e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099e8:	f023 0310 	bic.w	r3, r3, #16
 80099ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	461a      	mov	r2, r3
 80099f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80099fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a02:	e841 2300 	strex	r3, r2, [r1]
 8009a06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1e4      	bne.n	80099d8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fc fb0c 	bl	8006030 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2202      	movs	r2, #2
 8009a1c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	1ad3      	subs	r3, r2, r3
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	4619      	mov	r1, r3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f8f4 	bl	8009c20 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009a38:	e0d5      	b.n	8009be6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009a40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a44:	429a      	cmp	r2, r3
 8009a46:	f040 80ce 	bne.w	8009be6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 0320 	and.w	r3, r3, #32
 8009a56:	2b20      	cmp	r3, #32
 8009a58:	f040 80c5 	bne.w	8009be6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009a68:	4619      	mov	r1, r3
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f8d8 	bl	8009c20 <HAL_UARTEx_RxEventCallback>
      return;
 8009a70:	e0b9      	b.n	8009be6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f000 80ab 	beq.w	8009bea <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8009a94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f000 80a6 	beq.w	8009bea <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa6:	e853 3f00 	ldrex	r3, [r3]
 8009aaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ab2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	461a      	mov	r2, r3
 8009abc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009ac0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ac2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ac6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ac8:	e841 2300 	strex	r3, r2, [r1]
 8009acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d1e4      	bne.n	8009a9e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3308      	adds	r3, #8
 8009ada:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ade:	e853 3f00 	ldrex	r3, [r3]
 8009ae2:	623b      	str	r3, [r7, #32]
   return(result);
 8009ae4:	6a3b      	ldr	r3, [r7, #32]
 8009ae6:	f023 0301 	bic.w	r3, r3, #1
 8009aea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3308      	adds	r3, #8
 8009af4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009af8:	633a      	str	r2, [r7, #48]	@ 0x30
 8009afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009afe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b00:	e841 2300 	strex	r3, r2, [r1]
 8009b04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1e3      	bne.n	8009ad4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2220      	movs	r2, #32
 8009b10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	e853 3f00 	ldrex	r3, [r3]
 8009b2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f023 0310 	bic.w	r3, r3, #16
 8009b34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009b42:	61fb      	str	r3, [r7, #28]
 8009b44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b46:	69b9      	ldr	r1, [r7, #24]
 8009b48:	69fa      	ldr	r2, [r7, #28]
 8009b4a:	e841 2300 	strex	r3, r2, [r1]
 8009b4e:	617b      	str	r3, [r7, #20]
   return(result);
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1e4      	bne.n	8009b20 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2202      	movs	r2, #2
 8009b5a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b60:	4619      	mov	r1, r3
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 f85c 	bl	8009c20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b68:	e03f      	b.n	8009bea <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00e      	beq.n	8009b94 <HAL_UART_IRQHandler+0x5a8>
 8009b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d008      	beq.n	8009b94 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009b8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 ffe9 	bl	800ab64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b92:	e02d      	b.n	8009bf0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00e      	beq.n	8009bbe <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d008      	beq.n	8009bbe <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d01c      	beq.n	8009bee <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	4798      	blx	r3
    }
    return;
 8009bbc:	e017      	b.n	8009bee <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d012      	beq.n	8009bf0 <HAL_UART_IRQHandler+0x604>
 8009bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00c      	beq.n	8009bf0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fdde 	bl	800a798 <UART_EndTransmit_IT>
    return;
 8009bdc:	e008      	b.n	8009bf0 <HAL_UART_IRQHandler+0x604>
      return;
 8009bde:	bf00      	nop
 8009be0:	e006      	b.n	8009bf0 <HAL_UART_IRQHandler+0x604>
    return;
 8009be2:	bf00      	nop
 8009be4:	e004      	b.n	8009bf0 <HAL_UART_IRQHandler+0x604>
      return;
 8009be6:	bf00      	nop
 8009be8:	e002      	b.n	8009bf0 <HAL_UART_IRQHandler+0x604>
      return;
 8009bea:	bf00      	nop
 8009bec:	e000      	b.n	8009bf0 <HAL_UART_IRQHandler+0x604>
    return;
 8009bee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009bf0:	37e8      	adds	r7, #232	@ 0xe8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop

08009bf8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c3c:	b08a      	sub	sp, #40	@ 0x28
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	689a      	ldr	r2, [r3, #8]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	431a      	orrs	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	431a      	orrs	r2, r3
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	69db      	ldr	r3, [r3, #28]
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	4ba4      	ldr	r3, [pc, #656]	@ (8009ef8 <UART_SetConfig+0x2c0>)
 8009c68:	4013      	ands	r3, r2
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	6812      	ldr	r2, [r2, #0]
 8009c6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c70:	430b      	orrs	r3, r1
 8009c72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	68da      	ldr	r2, [r3, #12]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	430a      	orrs	r2, r1
 8009c88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	699b      	ldr	r3, [r3, #24]
 8009c8e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a99      	ldr	r2, [pc, #612]	@ (8009efc <UART_SetConfig+0x2c4>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d004      	beq.n	8009ca4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6a1b      	ldr	r3, [r3, #32]
 8009c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cb4:	430a      	orrs	r2, r1
 8009cb6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a90      	ldr	r2, [pc, #576]	@ (8009f00 <UART_SetConfig+0x2c8>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d126      	bne.n	8009d10 <UART_SetConfig+0xd8>
 8009cc2:	4b90      	ldr	r3, [pc, #576]	@ (8009f04 <UART_SetConfig+0x2cc>)
 8009cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cc8:	f003 0303 	and.w	r3, r3, #3
 8009ccc:	2b03      	cmp	r3, #3
 8009cce:	d81b      	bhi.n	8009d08 <UART_SetConfig+0xd0>
 8009cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd8 <UART_SetConfig+0xa0>)
 8009cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd6:	bf00      	nop
 8009cd8:	08009ce9 	.word	0x08009ce9
 8009cdc:	08009cf9 	.word	0x08009cf9
 8009ce0:	08009cf1 	.word	0x08009cf1
 8009ce4:	08009d01 	.word	0x08009d01
 8009ce8:	2301      	movs	r3, #1
 8009cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009cee:	e116      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009cf0:	2302      	movs	r3, #2
 8009cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009cf6:	e112      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009cf8:	2304      	movs	r3, #4
 8009cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009cfe:	e10e      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009d00:	2308      	movs	r3, #8
 8009d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d06:	e10a      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009d08:	2310      	movs	r3, #16
 8009d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d0e:	e106      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a7c      	ldr	r2, [pc, #496]	@ (8009f08 <UART_SetConfig+0x2d0>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d138      	bne.n	8009d8c <UART_SetConfig+0x154>
 8009d1a:	4b7a      	ldr	r3, [pc, #488]	@ (8009f04 <UART_SetConfig+0x2cc>)
 8009d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d20:	f003 030c 	and.w	r3, r3, #12
 8009d24:	2b0c      	cmp	r3, #12
 8009d26:	d82d      	bhi.n	8009d84 <UART_SetConfig+0x14c>
 8009d28:	a201      	add	r2, pc, #4	@ (adr r2, 8009d30 <UART_SetConfig+0xf8>)
 8009d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2e:	bf00      	nop
 8009d30:	08009d65 	.word	0x08009d65
 8009d34:	08009d85 	.word	0x08009d85
 8009d38:	08009d85 	.word	0x08009d85
 8009d3c:	08009d85 	.word	0x08009d85
 8009d40:	08009d75 	.word	0x08009d75
 8009d44:	08009d85 	.word	0x08009d85
 8009d48:	08009d85 	.word	0x08009d85
 8009d4c:	08009d85 	.word	0x08009d85
 8009d50:	08009d6d 	.word	0x08009d6d
 8009d54:	08009d85 	.word	0x08009d85
 8009d58:	08009d85 	.word	0x08009d85
 8009d5c:	08009d85 	.word	0x08009d85
 8009d60:	08009d7d 	.word	0x08009d7d
 8009d64:	2300      	movs	r3, #0
 8009d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d6a:	e0d8      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d72:	e0d4      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009d74:	2304      	movs	r3, #4
 8009d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d7a:	e0d0      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009d7c:	2308      	movs	r3, #8
 8009d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d82:	e0cc      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009d84:	2310      	movs	r3, #16
 8009d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d8a:	e0c8      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a5e      	ldr	r2, [pc, #376]	@ (8009f0c <UART_SetConfig+0x2d4>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d125      	bne.n	8009de2 <UART_SetConfig+0x1aa>
 8009d96:	4b5b      	ldr	r3, [pc, #364]	@ (8009f04 <UART_SetConfig+0x2cc>)
 8009d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009da0:	2b30      	cmp	r3, #48	@ 0x30
 8009da2:	d016      	beq.n	8009dd2 <UART_SetConfig+0x19a>
 8009da4:	2b30      	cmp	r3, #48	@ 0x30
 8009da6:	d818      	bhi.n	8009dda <UART_SetConfig+0x1a2>
 8009da8:	2b20      	cmp	r3, #32
 8009daa:	d00a      	beq.n	8009dc2 <UART_SetConfig+0x18a>
 8009dac:	2b20      	cmp	r3, #32
 8009dae:	d814      	bhi.n	8009dda <UART_SetConfig+0x1a2>
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d002      	beq.n	8009dba <UART_SetConfig+0x182>
 8009db4:	2b10      	cmp	r3, #16
 8009db6:	d008      	beq.n	8009dca <UART_SetConfig+0x192>
 8009db8:	e00f      	b.n	8009dda <UART_SetConfig+0x1a2>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009dc0:	e0ad      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009dc2:	2302      	movs	r3, #2
 8009dc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009dc8:	e0a9      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009dca:	2304      	movs	r3, #4
 8009dcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009dd0:	e0a5      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009dd2:	2308      	movs	r3, #8
 8009dd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009dd8:	e0a1      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009dda:	2310      	movs	r3, #16
 8009ddc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009de0:	e09d      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a4a      	ldr	r2, [pc, #296]	@ (8009f10 <UART_SetConfig+0x2d8>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d125      	bne.n	8009e38 <UART_SetConfig+0x200>
 8009dec:	4b45      	ldr	r3, [pc, #276]	@ (8009f04 <UART_SetConfig+0x2cc>)
 8009dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009df2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009df6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009df8:	d016      	beq.n	8009e28 <UART_SetConfig+0x1f0>
 8009dfa:	2bc0      	cmp	r3, #192	@ 0xc0
 8009dfc:	d818      	bhi.n	8009e30 <UART_SetConfig+0x1f8>
 8009dfe:	2b80      	cmp	r3, #128	@ 0x80
 8009e00:	d00a      	beq.n	8009e18 <UART_SetConfig+0x1e0>
 8009e02:	2b80      	cmp	r3, #128	@ 0x80
 8009e04:	d814      	bhi.n	8009e30 <UART_SetConfig+0x1f8>
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d002      	beq.n	8009e10 <UART_SetConfig+0x1d8>
 8009e0a:	2b40      	cmp	r3, #64	@ 0x40
 8009e0c:	d008      	beq.n	8009e20 <UART_SetConfig+0x1e8>
 8009e0e:	e00f      	b.n	8009e30 <UART_SetConfig+0x1f8>
 8009e10:	2300      	movs	r3, #0
 8009e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e16:	e082      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009e18:	2302      	movs	r3, #2
 8009e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e1e:	e07e      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009e20:	2304      	movs	r3, #4
 8009e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e26:	e07a      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009e28:	2308      	movs	r3, #8
 8009e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e2e:	e076      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009e30:	2310      	movs	r3, #16
 8009e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e36:	e072      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a35      	ldr	r2, [pc, #212]	@ (8009f14 <UART_SetConfig+0x2dc>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d12a      	bne.n	8009e98 <UART_SetConfig+0x260>
 8009e42:	4b30      	ldr	r3, [pc, #192]	@ (8009f04 <UART_SetConfig+0x2cc>)
 8009e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e50:	d01a      	beq.n	8009e88 <UART_SetConfig+0x250>
 8009e52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e56:	d81b      	bhi.n	8009e90 <UART_SetConfig+0x258>
 8009e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e5c:	d00c      	beq.n	8009e78 <UART_SetConfig+0x240>
 8009e5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e62:	d815      	bhi.n	8009e90 <UART_SetConfig+0x258>
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d003      	beq.n	8009e70 <UART_SetConfig+0x238>
 8009e68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e6c:	d008      	beq.n	8009e80 <UART_SetConfig+0x248>
 8009e6e:	e00f      	b.n	8009e90 <UART_SetConfig+0x258>
 8009e70:	2300      	movs	r3, #0
 8009e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e76:	e052      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009e78:	2302      	movs	r3, #2
 8009e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e7e:	e04e      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009e80:	2304      	movs	r3, #4
 8009e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e86:	e04a      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009e88:	2308      	movs	r3, #8
 8009e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e8e:	e046      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009e90:	2310      	movs	r3, #16
 8009e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e96:	e042      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a17      	ldr	r2, [pc, #92]	@ (8009efc <UART_SetConfig+0x2c4>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d13a      	bne.n	8009f18 <UART_SetConfig+0x2e0>
 8009ea2:	4b18      	ldr	r3, [pc, #96]	@ (8009f04 <UART_SetConfig+0x2cc>)
 8009ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ea8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009eac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009eb0:	d01a      	beq.n	8009ee8 <UART_SetConfig+0x2b0>
 8009eb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009eb6:	d81b      	bhi.n	8009ef0 <UART_SetConfig+0x2b8>
 8009eb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ebc:	d00c      	beq.n	8009ed8 <UART_SetConfig+0x2a0>
 8009ebe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ec2:	d815      	bhi.n	8009ef0 <UART_SetConfig+0x2b8>
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d003      	beq.n	8009ed0 <UART_SetConfig+0x298>
 8009ec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ecc:	d008      	beq.n	8009ee0 <UART_SetConfig+0x2a8>
 8009ece:	e00f      	b.n	8009ef0 <UART_SetConfig+0x2b8>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ed6:	e022      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009ed8:	2302      	movs	r3, #2
 8009eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ede:	e01e      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009ee0:	2304      	movs	r3, #4
 8009ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ee6:	e01a      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009ee8:	2308      	movs	r3, #8
 8009eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009eee:	e016      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009ef0:	2310      	movs	r3, #16
 8009ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ef6:	e012      	b.n	8009f1e <UART_SetConfig+0x2e6>
 8009ef8:	efff69f3 	.word	0xefff69f3
 8009efc:	40008000 	.word	0x40008000
 8009f00:	40013800 	.word	0x40013800
 8009f04:	40021000 	.word	0x40021000
 8009f08:	40004400 	.word	0x40004400
 8009f0c:	40004800 	.word	0x40004800
 8009f10:	40004c00 	.word	0x40004c00
 8009f14:	40005000 	.word	0x40005000
 8009f18:	2310      	movs	r3, #16
 8009f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a9f      	ldr	r2, [pc, #636]	@ (800a1a0 <UART_SetConfig+0x568>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d17a      	bne.n	800a01e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009f2c:	2b08      	cmp	r3, #8
 8009f2e:	d824      	bhi.n	8009f7a <UART_SetConfig+0x342>
 8009f30:	a201      	add	r2, pc, #4	@ (adr r2, 8009f38 <UART_SetConfig+0x300>)
 8009f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f36:	bf00      	nop
 8009f38:	08009f5d 	.word	0x08009f5d
 8009f3c:	08009f7b 	.word	0x08009f7b
 8009f40:	08009f65 	.word	0x08009f65
 8009f44:	08009f7b 	.word	0x08009f7b
 8009f48:	08009f6b 	.word	0x08009f6b
 8009f4c:	08009f7b 	.word	0x08009f7b
 8009f50:	08009f7b 	.word	0x08009f7b
 8009f54:	08009f7b 	.word	0x08009f7b
 8009f58:	08009f73 	.word	0x08009f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f5c:	f7fd ffdc 	bl	8007f18 <HAL_RCC_GetPCLK1Freq>
 8009f60:	61f8      	str	r0, [r7, #28]
        break;
 8009f62:	e010      	b.n	8009f86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f64:	4b8f      	ldr	r3, [pc, #572]	@ (800a1a4 <UART_SetConfig+0x56c>)
 8009f66:	61fb      	str	r3, [r7, #28]
        break;
 8009f68:	e00d      	b.n	8009f86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f6a:	f7fd ff3d 	bl	8007de8 <HAL_RCC_GetSysClockFreq>
 8009f6e:	61f8      	str	r0, [r7, #28]
        break;
 8009f70:	e009      	b.n	8009f86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f76:	61fb      	str	r3, [r7, #28]
        break;
 8009f78:	e005      	b.n	8009f86 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009f84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f000 80fb 	beq.w	800a184 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	685a      	ldr	r2, [r3, #4]
 8009f92:	4613      	mov	r3, r2
 8009f94:	005b      	lsls	r3, r3, #1
 8009f96:	4413      	add	r3, r2
 8009f98:	69fa      	ldr	r2, [r7, #28]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d305      	bcc.n	8009faa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009fa4:	69fa      	ldr	r2, [r7, #28]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d903      	bls.n	8009fb2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009fb0:	e0e8      	b.n	800a184 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	461c      	mov	r4, r3
 8009fb8:	4615      	mov	r5, r2
 8009fba:	f04f 0200 	mov.w	r2, #0
 8009fbe:	f04f 0300 	mov.w	r3, #0
 8009fc2:	022b      	lsls	r3, r5, #8
 8009fc4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009fc8:	0222      	lsls	r2, r4, #8
 8009fca:	68f9      	ldr	r1, [r7, #12]
 8009fcc:	6849      	ldr	r1, [r1, #4]
 8009fce:	0849      	lsrs	r1, r1, #1
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	4688      	mov	r8, r1
 8009fd4:	4681      	mov	r9, r0
 8009fd6:	eb12 0a08 	adds.w	sl, r2, r8
 8009fda:	eb43 0b09 	adc.w	fp, r3, r9
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	603b      	str	r3, [r7, #0]
 8009fe6:	607a      	str	r2, [r7, #4]
 8009fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fec:	4650      	mov	r0, sl
 8009fee:	4659      	mov	r1, fp
 8009ff0:	f7f6 f8fe 	bl	80001f0 <__aeabi_uldivmod>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a002:	d308      	bcc.n	800a016 <UART_SetConfig+0x3de>
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a00a:	d204      	bcs.n	800a016 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	69ba      	ldr	r2, [r7, #24]
 800a012:	60da      	str	r2, [r3, #12]
 800a014:	e0b6      	b.n	800a184 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a01c:	e0b2      	b.n	800a184 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	69db      	ldr	r3, [r3, #28]
 800a022:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a026:	d15e      	bne.n	800a0e6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800a028:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a02c:	2b08      	cmp	r3, #8
 800a02e:	d828      	bhi.n	800a082 <UART_SetConfig+0x44a>
 800a030:	a201      	add	r2, pc, #4	@ (adr r2, 800a038 <UART_SetConfig+0x400>)
 800a032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a036:	bf00      	nop
 800a038:	0800a05d 	.word	0x0800a05d
 800a03c:	0800a065 	.word	0x0800a065
 800a040:	0800a06d 	.word	0x0800a06d
 800a044:	0800a083 	.word	0x0800a083
 800a048:	0800a073 	.word	0x0800a073
 800a04c:	0800a083 	.word	0x0800a083
 800a050:	0800a083 	.word	0x0800a083
 800a054:	0800a083 	.word	0x0800a083
 800a058:	0800a07b 	.word	0x0800a07b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a05c:	f7fd ff5c 	bl	8007f18 <HAL_RCC_GetPCLK1Freq>
 800a060:	61f8      	str	r0, [r7, #28]
        break;
 800a062:	e014      	b.n	800a08e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a064:	f7fd ff6e 	bl	8007f44 <HAL_RCC_GetPCLK2Freq>
 800a068:	61f8      	str	r0, [r7, #28]
        break;
 800a06a:	e010      	b.n	800a08e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a06c:	4b4d      	ldr	r3, [pc, #308]	@ (800a1a4 <UART_SetConfig+0x56c>)
 800a06e:	61fb      	str	r3, [r7, #28]
        break;
 800a070:	e00d      	b.n	800a08e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a072:	f7fd feb9 	bl	8007de8 <HAL_RCC_GetSysClockFreq>
 800a076:	61f8      	str	r0, [r7, #28]
        break;
 800a078:	e009      	b.n	800a08e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a07a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a07e:	61fb      	str	r3, [r7, #28]
        break;
 800a080:	e005      	b.n	800a08e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800a082:	2300      	movs	r3, #0
 800a084:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a08c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d077      	beq.n	800a184 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	005a      	lsls	r2, r3, #1
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	085b      	lsrs	r3, r3, #1
 800a09e:	441a      	add	r2, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	2b0f      	cmp	r3, #15
 800a0ae:	d916      	bls.n	800a0de <UART_SetConfig+0x4a6>
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0b6:	d212      	bcs.n	800a0de <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	f023 030f 	bic.w	r3, r3, #15
 800a0c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	085b      	lsrs	r3, r3, #1
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	f003 0307 	and.w	r3, r3, #7
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	8afb      	ldrh	r3, [r7, #22]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	8afa      	ldrh	r2, [r7, #22]
 800a0da:	60da      	str	r2, [r3, #12]
 800a0dc:	e052      	b.n	800a184 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a0e4:	e04e      	b.n	800a184 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a0ea:	2b08      	cmp	r3, #8
 800a0ec:	d827      	bhi.n	800a13e <UART_SetConfig+0x506>
 800a0ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f4 <UART_SetConfig+0x4bc>)
 800a0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f4:	0800a119 	.word	0x0800a119
 800a0f8:	0800a121 	.word	0x0800a121
 800a0fc:	0800a129 	.word	0x0800a129
 800a100:	0800a13f 	.word	0x0800a13f
 800a104:	0800a12f 	.word	0x0800a12f
 800a108:	0800a13f 	.word	0x0800a13f
 800a10c:	0800a13f 	.word	0x0800a13f
 800a110:	0800a13f 	.word	0x0800a13f
 800a114:	0800a137 	.word	0x0800a137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a118:	f7fd fefe 	bl	8007f18 <HAL_RCC_GetPCLK1Freq>
 800a11c:	61f8      	str	r0, [r7, #28]
        break;
 800a11e:	e014      	b.n	800a14a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a120:	f7fd ff10 	bl	8007f44 <HAL_RCC_GetPCLK2Freq>
 800a124:	61f8      	str	r0, [r7, #28]
        break;
 800a126:	e010      	b.n	800a14a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a128:	4b1e      	ldr	r3, [pc, #120]	@ (800a1a4 <UART_SetConfig+0x56c>)
 800a12a:	61fb      	str	r3, [r7, #28]
        break;
 800a12c:	e00d      	b.n	800a14a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a12e:	f7fd fe5b 	bl	8007de8 <HAL_RCC_GetSysClockFreq>
 800a132:	61f8      	str	r0, [r7, #28]
        break;
 800a134:	e009      	b.n	800a14a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a13a:	61fb      	str	r3, [r7, #28]
        break;
 800a13c:	e005      	b.n	800a14a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800a13e:	2300      	movs	r3, #0
 800a140:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a148:	bf00      	nop
    }

    if (pclk != 0U)
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d019      	beq.n	800a184 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	085a      	lsrs	r2, r3, #1
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	441a      	add	r2, r3
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a162:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	2b0f      	cmp	r3, #15
 800a168:	d909      	bls.n	800a17e <UART_SetConfig+0x546>
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a170:	d205      	bcs.n	800a17e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	b29a      	uxth	r2, r3
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	60da      	str	r2, [r3, #12]
 800a17c:	e002      	b.n	800a184 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2200      	movs	r2, #0
 800a188:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a190:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800a194:	4618      	mov	r0, r3
 800a196:	3728      	adds	r7, #40	@ 0x28
 800a198:	46bd      	mov	sp, r7
 800a19a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a19e:	bf00      	nop
 800a1a0:	40008000 	.word	0x40008000
 800a1a4:	00f42400 	.word	0x00f42400

0800a1a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1b4:	f003 0308 	and.w	r3, r3, #8
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00a      	beq.n	800a1d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	430a      	orrs	r2, r1
 800a1d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00a      	beq.n	800a1f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	430a      	orrs	r2, r1
 800a1f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1f8:	f003 0302 	and.w	r3, r3, #2
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00a      	beq.n	800a216 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	430a      	orrs	r2, r1
 800a214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a21a:	f003 0304 	and.w	r3, r3, #4
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d00a      	beq.n	800a238 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	430a      	orrs	r2, r1
 800a236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a23c:	f003 0310 	and.w	r3, r3, #16
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00a      	beq.n	800a25a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	430a      	orrs	r2, r1
 800a258:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a25e:	f003 0320 	and.w	r3, r3, #32
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00a      	beq.n	800a27c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	430a      	orrs	r2, r1
 800a27a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a284:	2b00      	cmp	r3, #0
 800a286:	d01a      	beq.n	800a2be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	430a      	orrs	r2, r1
 800a29c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2a6:	d10a      	bne.n	800a2be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00a      	beq.n	800a2e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	430a      	orrs	r2, r1
 800a2de:	605a      	str	r2, [r3, #4]
  }
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b098      	sub	sp, #96	@ 0x60
 800a2f0:	af02      	add	r7, sp, #8
 800a2f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2fc:	f7f9 f9fe 	bl	80036fc <HAL_GetTick>
 800a300:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 0308 	and.w	r3, r3, #8
 800a30c:	2b08      	cmp	r3, #8
 800a30e:	d12e      	bne.n	800a36e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a310:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a314:	9300      	str	r3, [sp, #0]
 800a316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a318:	2200      	movs	r2, #0
 800a31a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f88c 	bl	800a43c <UART_WaitOnFlagUntilTimeout>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d021      	beq.n	800a36e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a332:	e853 3f00 	ldrex	r3, [r3]
 800a336:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a33a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a33e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	461a      	mov	r2, r3
 800a346:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a348:	647b      	str	r3, [r7, #68]	@ 0x44
 800a34a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a34e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a350:	e841 2300 	strex	r3, r2, [r1]
 800a354:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1e6      	bne.n	800a32a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2220      	movs	r2, #32
 800a360:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a36a:	2303      	movs	r3, #3
 800a36c:	e062      	b.n	800a434 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 0304 	and.w	r3, r3, #4
 800a378:	2b04      	cmp	r3, #4
 800a37a:	d149      	bne.n	800a410 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a37c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a384:	2200      	movs	r2, #0
 800a386:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 f856 	bl	800a43c <UART_WaitOnFlagUntilTimeout>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d03c      	beq.n	800a410 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a39e:	e853 3f00 	ldrex	r3, [r3]
 800a3a2:	623b      	str	r3, [r7, #32]
   return(result);
 800a3a4:	6a3b      	ldr	r3, [r7, #32]
 800a3a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3bc:	e841 2300 	strex	r3, r2, [r1]
 800a3c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1e6      	bne.n	800a396 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	3308      	adds	r3, #8
 800a3ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	e853 3f00 	ldrex	r3, [r3]
 800a3d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f023 0301 	bic.w	r3, r3, #1
 800a3de:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	3308      	adds	r3, #8
 800a3e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3e8:	61fa      	str	r2, [r7, #28]
 800a3ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ec:	69b9      	ldr	r1, [r7, #24]
 800a3ee:	69fa      	ldr	r2, [r7, #28]
 800a3f0:	e841 2300 	strex	r3, r2, [r1]
 800a3f4:	617b      	str	r3, [r7, #20]
   return(result);
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1e5      	bne.n	800a3c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2220      	movs	r2, #32
 800a400:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e011      	b.n	800a434 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2220      	movs	r2, #32
 800a414:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2220      	movs	r2, #32
 800a41a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3758      	adds	r7, #88	@ 0x58
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	603b      	str	r3, [r7, #0]
 800a448:	4613      	mov	r3, r2
 800a44a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a44c:	e04f      	b.n	800a4ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a454:	d04b      	beq.n	800a4ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a456:	f7f9 f951 	bl	80036fc <HAL_GetTick>
 800a45a:	4602      	mov	r2, r0
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	1ad3      	subs	r3, r2, r3
 800a460:	69ba      	ldr	r2, [r7, #24]
 800a462:	429a      	cmp	r2, r3
 800a464:	d302      	bcc.n	800a46c <UART_WaitOnFlagUntilTimeout+0x30>
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d101      	bne.n	800a470 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	e04e      	b.n	800a50e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 0304 	and.w	r3, r3, #4
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d037      	beq.n	800a4ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	2b80      	cmp	r3, #128	@ 0x80
 800a482:	d034      	beq.n	800a4ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	2b40      	cmp	r3, #64	@ 0x40
 800a488:	d031      	beq.n	800a4ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	69db      	ldr	r3, [r3, #28]
 800a490:	f003 0308 	and.w	r3, r3, #8
 800a494:	2b08      	cmp	r3, #8
 800a496:	d110      	bne.n	800a4ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2208      	movs	r2, #8
 800a49e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f000 f8ff 	bl	800a6a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2208      	movs	r2, #8
 800a4aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e029      	b.n	800a50e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	69db      	ldr	r3, [r3, #28]
 800a4c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a4c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4c8:	d111      	bne.n	800a4ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a4d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f000 f8e5 	bl	800a6a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2220      	movs	r2, #32
 800a4de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	e00f      	b.n	800a50e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	69da      	ldr	r2, [r3, #28]
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	bf0c      	ite	eq
 800a4fe:	2301      	moveq	r3, #1
 800a500:	2300      	movne	r3, #0
 800a502:	b2db      	uxtb	r3, r3
 800a504:	461a      	mov	r2, r3
 800a506:	79fb      	ldrb	r3, [r7, #7]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d0a0      	beq.n	800a44e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
	...

0800a518 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a518:	b480      	push	{r7}
 800a51a:	b097      	sub	sp, #92	@ 0x5c
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	4613      	mov	r3, r2
 800a524:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	88fa      	ldrh	r2, [r7, #6]
 800a530:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	88fa      	ldrh	r2, [r7, #6]
 800a538:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a54a:	d10e      	bne.n	800a56a <UART_Start_Receive_IT+0x52>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d105      	bne.n	800a560 <UART_Start_Receive_IT+0x48>
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a55a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a55e:	e02d      	b.n	800a5bc <UART_Start_Receive_IT+0xa4>
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	22ff      	movs	r2, #255	@ 0xff
 800a564:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a568:	e028      	b.n	800a5bc <UART_Start_Receive_IT+0xa4>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10d      	bne.n	800a58e <UART_Start_Receive_IT+0x76>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	691b      	ldr	r3, [r3, #16]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d104      	bne.n	800a584 <UART_Start_Receive_IT+0x6c>
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	22ff      	movs	r2, #255	@ 0xff
 800a57e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a582:	e01b      	b.n	800a5bc <UART_Start_Receive_IT+0xa4>
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	227f      	movs	r2, #127	@ 0x7f
 800a588:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a58c:	e016      	b.n	800a5bc <UART_Start_Receive_IT+0xa4>
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a596:	d10d      	bne.n	800a5b4 <UART_Start_Receive_IT+0x9c>
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d104      	bne.n	800a5aa <UART_Start_Receive_IT+0x92>
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	227f      	movs	r2, #127	@ 0x7f
 800a5a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a5a8:	e008      	b.n	800a5bc <UART_Start_Receive_IT+0xa4>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	223f      	movs	r2, #63	@ 0x3f
 800a5ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a5b2:	e003      	b.n	800a5bc <UART_Start_Receive_IT+0xa4>
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2222      	movs	r2, #34	@ 0x22
 800a5c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3308      	adds	r3, #8
 800a5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5d6:	e853 3f00 	ldrex	r3, [r3]
 800a5da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5de:	f043 0301 	orr.w	r3, r3, #1
 800a5e2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	3308      	adds	r3, #8
 800a5ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a5ec:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a5ee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a5f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5f4:	e841 2300 	strex	r3, r2, [r1]
 800a5f8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a5fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d1e5      	bne.n	800a5cc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a608:	d107      	bne.n	800a61a <UART_Start_Receive_IT+0x102>
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d103      	bne.n	800a61a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	4a21      	ldr	r2, [pc, #132]	@ (800a69c <UART_Start_Receive_IT+0x184>)
 800a616:	669a      	str	r2, [r3, #104]	@ 0x68
 800a618:	e002      	b.n	800a620 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	4a20      	ldr	r2, [pc, #128]	@ (800a6a0 <UART_Start_Receive_IT+0x188>)
 800a61e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d019      	beq.n	800a65c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a630:	e853 3f00 	ldrex	r3, [r3]
 800a634:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a638:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a63c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	461a      	mov	r2, r3
 800a644:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a646:	637b      	str	r3, [r7, #52]	@ 0x34
 800a648:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a64a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a64c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a64e:	e841 2300 	strex	r3, r2, [r1]
 800a652:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1e6      	bne.n	800a628 <UART_Start_Receive_IT+0x110>
 800a65a:	e018      	b.n	800a68e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	e853 3f00 	ldrex	r3, [r3]
 800a668:	613b      	str	r3, [r7, #16]
   return(result);
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	f043 0320 	orr.w	r3, r3, #32
 800a670:	653b      	str	r3, [r7, #80]	@ 0x50
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	461a      	mov	r2, r3
 800a678:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a67a:	623b      	str	r3, [r7, #32]
 800a67c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67e:	69f9      	ldr	r1, [r7, #28]
 800a680:	6a3a      	ldr	r2, [r7, #32]
 800a682:	e841 2300 	strex	r3, r2, [r1]
 800a686:	61bb      	str	r3, [r7, #24]
   return(result);
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1e6      	bne.n	800a65c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	375c      	adds	r7, #92	@ 0x5c
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr
 800a69c:	0800a9a9 	.word	0x0800a9a9
 800a6a0:	0800a7ed 	.word	0x0800a7ed

0800a6a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b095      	sub	sp, #84	@ 0x54
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6b4:	e853 3f00 	ldrex	r3, [r3]
 800a6b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6d2:	e841 2300 	strex	r3, r2, [r1]
 800a6d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d1e6      	bne.n	800a6ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	3308      	adds	r3, #8
 800a6e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e6:	6a3b      	ldr	r3, [r7, #32]
 800a6e8:	e853 3f00 	ldrex	r3, [r3]
 800a6ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	f023 0301 	bic.w	r3, r3, #1
 800a6f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	3308      	adds	r3, #8
 800a6fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a700:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a702:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a706:	e841 2300 	strex	r3, r2, [r1]
 800a70a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1e5      	bne.n	800a6de <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a716:	2b01      	cmp	r3, #1
 800a718:	d118      	bne.n	800a74c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	e853 3f00 	ldrex	r3, [r3]
 800a726:	60bb      	str	r3, [r7, #8]
   return(result);
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	f023 0310 	bic.w	r3, r3, #16
 800a72e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	461a      	mov	r2, r3
 800a736:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a738:	61bb      	str	r3, [r7, #24]
 800a73a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73c:	6979      	ldr	r1, [r7, #20]
 800a73e:	69ba      	ldr	r2, [r7, #24]
 800a740:	e841 2300 	strex	r3, r2, [r1]
 800a744:	613b      	str	r3, [r7, #16]
   return(result);
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1e6      	bne.n	800a71a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2220      	movs	r2, #32
 800a750:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a760:	bf00      	nop
 800a762:	3754      	adds	r7, #84	@ 0x54
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a778:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f7ff fa3e 	bl	8009c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a790:	bf00      	nop
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b088      	sub	sp, #32
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	e853 3f00 	ldrex	r3, [r3]
 800a7ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7b4:	61fb      	str	r3, [r7, #28]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	61bb      	str	r3, [r7, #24]
 800a7c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c2:	6979      	ldr	r1, [r7, #20]
 800a7c4:	69ba      	ldr	r2, [r7, #24]
 800a7c6:	e841 2300 	strex	r3, r2, [r1]
 800a7ca:	613b      	str	r3, [r7, #16]
   return(result);
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1e6      	bne.n	800a7a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2220      	movs	r2, #32
 800a7d6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7ff fa0a 	bl	8009bf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7e4:	bf00      	nop
 800a7e6:	3720      	adds	r7, #32
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b09c      	sub	sp, #112	@ 0x70
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a7fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a804:	2b22      	cmp	r3, #34	@ 0x22
 800a806:	f040 80be 	bne.w	800a986 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a810:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a814:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a818:	b2d9      	uxtb	r1, r3
 800a81a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a81e:	b2da      	uxtb	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a824:	400a      	ands	r2, r1
 800a826:	b2d2      	uxtb	r2, r2
 800a828:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a82e:	1c5a      	adds	r2, r3, #1
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	3b01      	subs	r3, #1
 800a83e:	b29a      	uxth	r2, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f040 80a3 	bne.w	800a99a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a85c:	e853 3f00 	ldrex	r3, [r3]
 800a860:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a864:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a868:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a872:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a874:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a876:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a878:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a87a:	e841 2300 	strex	r3, r2, [r1]
 800a87e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a880:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1e6      	bne.n	800a854 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	3308      	adds	r3, #8
 800a88c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a890:	e853 3f00 	ldrex	r3, [r3]
 800a894:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a898:	f023 0301 	bic.w	r3, r3, #1
 800a89c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3308      	adds	r3, #8
 800a8a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a8a6:	647a      	str	r2, [r7, #68]	@ 0x44
 800a8a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a8ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8ae:	e841 2300 	strex	r3, r2, [r1]
 800a8b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a8b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1e5      	bne.n	800a886 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2220      	movs	r2, #32
 800a8be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a34      	ldr	r2, [pc, #208]	@ (800a9a4 <UART_RxISR_8BIT+0x1b8>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d01f      	beq.n	800a918 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d018      	beq.n	800a918 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ee:	e853 3f00 	ldrex	r3, [r3]
 800a8f2:	623b      	str	r3, [r7, #32]
   return(result);
 800a8f4:	6a3b      	ldr	r3, [r7, #32]
 800a8f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a8fa:	663b      	str	r3, [r7, #96]	@ 0x60
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	461a      	mov	r2, r3
 800a902:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a904:	633b      	str	r3, [r7, #48]	@ 0x30
 800a906:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a908:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a90a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a90c:	e841 2300 	strex	r3, r2, [r1]
 800a910:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1e6      	bne.n	800a8e6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d12e      	bne.n	800a97e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	e853 3f00 	ldrex	r3, [r3]
 800a932:	60fb      	str	r3, [r7, #12]
   return(result);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f023 0310 	bic.w	r3, r3, #16
 800a93a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	461a      	mov	r2, r3
 800a942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a944:	61fb      	str	r3, [r7, #28]
 800a946:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a948:	69b9      	ldr	r1, [r7, #24]
 800a94a:	69fa      	ldr	r2, [r7, #28]
 800a94c:	e841 2300 	strex	r3, r2, [r1]
 800a950:	617b      	str	r3, [r7, #20]
   return(result);
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1e6      	bne.n	800a926 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	69db      	ldr	r3, [r3, #28]
 800a95e:	f003 0310 	and.w	r3, r3, #16
 800a962:	2b10      	cmp	r3, #16
 800a964:	d103      	bne.n	800a96e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2210      	movs	r2, #16
 800a96c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a974:	4619      	mov	r1, r3
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f7ff f952 	bl	8009c20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a97c:	e00d      	b.n	800a99a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7f6 fc5e 	bl	8001240 <HAL_UART_RxCpltCallback>
}
 800a984:	e009      	b.n	800a99a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	8b1b      	ldrh	r3, [r3, #24]
 800a98c:	b29a      	uxth	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f042 0208 	orr.w	r2, r2, #8
 800a996:	b292      	uxth	r2, r2
 800a998:	831a      	strh	r2, [r3, #24]
}
 800a99a:	bf00      	nop
 800a99c:	3770      	adds	r7, #112	@ 0x70
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	40008000 	.word	0x40008000

0800a9a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b09c      	sub	sp, #112	@ 0x70
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a9b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9c0:	2b22      	cmp	r3, #34	@ 0x22
 800a9c2:	f040 80be 	bne.w	800ab42 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a9cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a9d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a9da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a9de:	4013      	ands	r3, r2
 800a9e0:	b29a      	uxth	r2, r3
 800a9e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9ea:	1c9a      	adds	r2, r3, #2
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f040 80a3 	bne.w	800ab56 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa18:	e853 3f00 	ldrex	r3, [r3]
 800aa1c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800aa1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa24:	667b      	str	r3, [r7, #100]	@ 0x64
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa2e:	657b      	str	r3, [r7, #84]	@ 0x54
 800aa30:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aa34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aa36:	e841 2300 	strex	r3, r2, [r1]
 800aa3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800aa3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1e6      	bne.n	800aa10 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	3308      	adds	r3, #8
 800aa48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa4c:	e853 3f00 	ldrex	r3, [r3]
 800aa50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa54:	f023 0301 	bic.w	r3, r3, #1
 800aa58:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	3308      	adds	r3, #8
 800aa60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aa62:	643a      	str	r2, [r7, #64]	@ 0x40
 800aa64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa6a:	e841 2300 	strex	r3, r2, [r1]
 800aa6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d1e5      	bne.n	800aa42 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2220      	movs	r2, #32
 800aa7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a34      	ldr	r2, [pc, #208]	@ (800ab60 <UART_RxISR_16BIT+0x1b8>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d01f      	beq.n	800aad4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d018      	beq.n	800aad4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa8:	6a3b      	ldr	r3, [r7, #32]
 800aaaa:	e853 3f00 	ldrex	r3, [r3]
 800aaae:	61fb      	str	r3, [r7, #28]
   return(result);
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aab6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	461a      	mov	r2, r3
 800aabe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aac2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aac8:	e841 2300 	strex	r3, r2, [r1]
 800aacc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d1e6      	bne.n	800aaa2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d12e      	bne.n	800ab3a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	e853 3f00 	ldrex	r3, [r3]
 800aaee:	60bb      	str	r3, [r7, #8]
   return(result);
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	f023 0310 	bic.w	r3, r3, #16
 800aaf6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	461a      	mov	r2, r3
 800aafe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ab00:	61bb      	str	r3, [r7, #24]
 800ab02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab04:	6979      	ldr	r1, [r7, #20]
 800ab06:	69ba      	ldr	r2, [r7, #24]
 800ab08:	e841 2300 	strex	r3, r2, [r1]
 800ab0c:	613b      	str	r3, [r7, #16]
   return(result);
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1e6      	bne.n	800aae2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	69db      	ldr	r3, [r3, #28]
 800ab1a:	f003 0310 	and.w	r3, r3, #16
 800ab1e:	2b10      	cmp	r3, #16
 800ab20:	d103      	bne.n	800ab2a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2210      	movs	r2, #16
 800ab28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ab30:	4619      	mov	r1, r3
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f7ff f874 	bl	8009c20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab38:	e00d      	b.n	800ab56 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f7f6 fb80 	bl	8001240 <HAL_UART_RxCpltCallback>
}
 800ab40:	e009      	b.n	800ab56 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	8b1b      	ldrh	r3, [r3, #24]
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f042 0208 	orr.w	r2, r2, #8
 800ab52:	b292      	uxth	r2, r2
 800ab54:	831a      	strh	r2, [r3, #24]
}
 800ab56:	bf00      	nop
 800ab58:	3770      	adds	r7, #112	@ 0x70
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	40008000 	.word	0x40008000

0800ab64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ab6c:	bf00      	nop
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <__NVIC_SetPriority>:
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	4603      	mov	r3, r0
 800ab80:	6039      	str	r1, [r7, #0]
 800ab82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	db0a      	blt.n	800aba2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	490c      	ldr	r1, [pc, #48]	@ (800abc4 <__NVIC_SetPriority+0x4c>)
 800ab92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab96:	0112      	lsls	r2, r2, #4
 800ab98:	b2d2      	uxtb	r2, r2
 800ab9a:	440b      	add	r3, r1
 800ab9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800aba0:	e00a      	b.n	800abb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	b2da      	uxtb	r2, r3
 800aba6:	4908      	ldr	r1, [pc, #32]	@ (800abc8 <__NVIC_SetPriority+0x50>)
 800aba8:	79fb      	ldrb	r3, [r7, #7]
 800abaa:	f003 030f 	and.w	r3, r3, #15
 800abae:	3b04      	subs	r3, #4
 800abb0:	0112      	lsls	r2, r2, #4
 800abb2:	b2d2      	uxtb	r2, r2
 800abb4:	440b      	add	r3, r1
 800abb6:	761a      	strb	r2, [r3, #24]
}
 800abb8:	bf00      	nop
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr
 800abc4:	e000e100 	.word	0xe000e100
 800abc8:	e000ed00 	.word	0xe000ed00

0800abcc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800abcc:	b580      	push	{r7, lr}
 800abce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800abd0:	4b05      	ldr	r3, [pc, #20]	@ (800abe8 <SysTick_Handler+0x1c>)
 800abd2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800abd4:	f001 fec6 	bl	800c964 <xTaskGetSchedulerState>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d001      	beq.n	800abe2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800abde:	f002 fcbb 	bl	800d558 <xPortSysTickHandler>
  }
}
 800abe2:	bf00      	nop
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	e000e010 	.word	0xe000e010

0800abec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800abec:	b580      	push	{r7, lr}
 800abee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800abf0:	2100      	movs	r1, #0
 800abf2:	f06f 0004 	mvn.w	r0, #4
 800abf6:	f7ff ffbf 	bl	800ab78 <__NVIC_SetPriority>
#endif
}
 800abfa:	bf00      	nop
 800abfc:	bd80      	pop	{r7, pc}
	...

0800ac00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac06:	f3ef 8305 	mrs	r3, IPSR
 800ac0a:	603b      	str	r3, [r7, #0]
  return(result);
 800ac0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d003      	beq.n	800ac1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ac12:	f06f 0305 	mvn.w	r3, #5
 800ac16:	607b      	str	r3, [r7, #4]
 800ac18:	e00c      	b.n	800ac34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ac1a:	4b0a      	ldr	r3, [pc, #40]	@ (800ac44 <osKernelInitialize+0x44>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d105      	bne.n	800ac2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ac22:	4b08      	ldr	r3, [pc, #32]	@ (800ac44 <osKernelInitialize+0x44>)
 800ac24:	2201      	movs	r2, #1
 800ac26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	607b      	str	r3, [r7, #4]
 800ac2c:	e002      	b.n	800ac34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ac2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ac34:	687b      	ldr	r3, [r7, #4]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	370c      	adds	r7, #12
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	20000484 	.word	0x20000484

0800ac48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac4e:	f3ef 8305 	mrs	r3, IPSR
 800ac52:	603b      	str	r3, [r7, #0]
  return(result);
 800ac54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d003      	beq.n	800ac62 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ac5a:	f06f 0305 	mvn.w	r3, #5
 800ac5e:	607b      	str	r3, [r7, #4]
 800ac60:	e010      	b.n	800ac84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ac62:	4b0b      	ldr	r3, [pc, #44]	@ (800ac90 <osKernelStart+0x48>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d109      	bne.n	800ac7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ac6a:	f7ff ffbf 	bl	800abec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ac6e:	4b08      	ldr	r3, [pc, #32]	@ (800ac90 <osKernelStart+0x48>)
 800ac70:	2202      	movs	r2, #2
 800ac72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ac74:	f001 fa12 	bl	800c09c <vTaskStartScheduler>
      stat = osOK;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	607b      	str	r3, [r7, #4]
 800ac7c:	e002      	b.n	800ac84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ac7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ac84:	687b      	ldr	r3, [r7, #4]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3708      	adds	r7, #8
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	20000484 	.word	0x20000484

0800ac94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b08e      	sub	sp, #56	@ 0x38
 800ac98:	af04      	add	r7, sp, #16
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aca0:	2300      	movs	r3, #0
 800aca2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aca4:	f3ef 8305 	mrs	r3, IPSR
 800aca8:	617b      	str	r3, [r7, #20]
  return(result);
 800acaa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800acac:	2b00      	cmp	r3, #0
 800acae:	d17e      	bne.n	800adae <osThreadNew+0x11a>
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d07b      	beq.n	800adae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800acb6:	2380      	movs	r3, #128	@ 0x80
 800acb8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800acba:	2318      	movs	r3, #24
 800acbc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800acbe:	2300      	movs	r3, #0
 800acc0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800acc2:	f04f 33ff 	mov.w	r3, #4294967295
 800acc6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d045      	beq.n	800ad5a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d002      	beq.n	800acdc <osThreadNew+0x48>
        name = attr->name;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	699b      	ldr	r3, [r3, #24]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d002      	beq.n	800acea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	699b      	ldr	r3, [r3, #24]
 800ace8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d008      	beq.n	800ad02 <osThreadNew+0x6e>
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	2b38      	cmp	r3, #56	@ 0x38
 800acf4:	d805      	bhi.n	800ad02 <osThreadNew+0x6e>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	f003 0301 	and.w	r3, r3, #1
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d001      	beq.n	800ad06 <osThreadNew+0x72>
        return (NULL);
 800ad02:	2300      	movs	r3, #0
 800ad04:	e054      	b.n	800adb0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	695b      	ldr	r3, [r3, #20]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d003      	beq.n	800ad16 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	695b      	ldr	r3, [r3, #20]
 800ad12:	089b      	lsrs	r3, r3, #2
 800ad14:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00e      	beq.n	800ad3c <osThreadNew+0xa8>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	2ba7      	cmp	r3, #167	@ 0xa7
 800ad24:	d90a      	bls.n	800ad3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d006      	beq.n	800ad3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	695b      	ldr	r3, [r3, #20]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d002      	beq.n	800ad3c <osThreadNew+0xa8>
        mem = 1;
 800ad36:	2301      	movs	r3, #1
 800ad38:	61bb      	str	r3, [r7, #24]
 800ad3a:	e010      	b.n	800ad5e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10c      	bne.n	800ad5e <osThreadNew+0xca>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d108      	bne.n	800ad5e <osThreadNew+0xca>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	691b      	ldr	r3, [r3, #16]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d104      	bne.n	800ad5e <osThreadNew+0xca>
          mem = 0;
 800ad54:	2300      	movs	r3, #0
 800ad56:	61bb      	str	r3, [r7, #24]
 800ad58:	e001      	b.n	800ad5e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d110      	bne.n	800ad86 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ad6c:	9202      	str	r2, [sp, #8]
 800ad6e:	9301      	str	r3, [sp, #4]
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	6a3a      	ldr	r2, [r7, #32]
 800ad78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f000 ff9a 	bl	800bcb4 <xTaskCreateStatic>
 800ad80:	4603      	mov	r3, r0
 800ad82:	613b      	str	r3, [r7, #16]
 800ad84:	e013      	b.n	800adae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d110      	bne.n	800adae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ad8c:	6a3b      	ldr	r3, [r7, #32]
 800ad8e:	b29a      	uxth	r2, r3
 800ad90:	f107 0310 	add.w	r3, r7, #16
 800ad94:	9301      	str	r3, [sp, #4]
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	9300      	str	r3, [sp, #0]
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f000 ffe8 	bl	800bd74 <xTaskCreate>
 800ada4:	4603      	mov	r3, r0
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d001      	beq.n	800adae <osThreadNew+0x11a>
            hTask = NULL;
 800adaa:	2300      	movs	r3, #0
 800adac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800adae:	693b      	ldr	r3, [r7, #16]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3728      	adds	r7, #40	@ 0x28
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adc0:	f3ef 8305 	mrs	r3, IPSR
 800adc4:	60bb      	str	r3, [r7, #8]
  return(result);
 800adc6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d003      	beq.n	800add4 <osDelay+0x1c>
    stat = osErrorISR;
 800adcc:	f06f 0305 	mvn.w	r3, #5
 800add0:	60fb      	str	r3, [r7, #12]
 800add2:	e007      	b.n	800ade4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800add4:	2300      	movs	r3, #0
 800add6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d002      	beq.n	800ade4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f001 f926 	bl	800c030 <vTaskDelay>
    }
  }

  return (stat);
 800ade4:	68fb      	ldr	r3, [r7, #12]
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800adee:	b580      	push	{r7, lr}
 800adf0:	b08a      	sub	sp, #40	@ 0x28
 800adf2:	af02      	add	r7, sp, #8
 800adf4:	60f8      	str	r0, [r7, #12]
 800adf6:	60b9      	str	r1, [r7, #8]
 800adf8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800adfa:	2300      	movs	r3, #0
 800adfc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adfe:	f3ef 8305 	mrs	r3, IPSR
 800ae02:	613b      	str	r3, [r7, #16]
  return(result);
 800ae04:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d175      	bne.n	800aef6 <osSemaphoreNew+0x108>
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d072      	beq.n	800aef6 <osSemaphoreNew+0x108>
 800ae10:	68ba      	ldr	r2, [r7, #8]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d86e      	bhi.n	800aef6 <osSemaphoreNew+0x108>
    mem = -1;
 800ae18:	f04f 33ff 	mov.w	r3, #4294967295
 800ae1c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d015      	beq.n	800ae50 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d006      	beq.n	800ae3a <osSemaphoreNew+0x4c>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	2b4f      	cmp	r3, #79	@ 0x4f
 800ae32:	d902      	bls.n	800ae3a <osSemaphoreNew+0x4c>
        mem = 1;
 800ae34:	2301      	movs	r3, #1
 800ae36:	61bb      	str	r3, [r7, #24]
 800ae38:	e00c      	b.n	800ae54 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d108      	bne.n	800ae54 <osSemaphoreNew+0x66>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d104      	bne.n	800ae54 <osSemaphoreNew+0x66>
          mem = 0;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	61bb      	str	r3, [r7, #24]
 800ae4e:	e001      	b.n	800ae54 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ae50:	2300      	movs	r3, #0
 800ae52:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae5a:	d04c      	beq.n	800aef6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d128      	bne.n	800aeb4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d10a      	bne.n	800ae7e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	2203      	movs	r2, #3
 800ae6e:	9200      	str	r2, [sp, #0]
 800ae70:	2200      	movs	r2, #0
 800ae72:	2100      	movs	r1, #0
 800ae74:	2001      	movs	r0, #1
 800ae76:	f000 f995 	bl	800b1a4 <xQueueGenericCreateStatic>
 800ae7a:	61f8      	str	r0, [r7, #28]
 800ae7c:	e005      	b.n	800ae8a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ae7e:	2203      	movs	r2, #3
 800ae80:	2100      	movs	r1, #0
 800ae82:	2001      	movs	r0, #1
 800ae84:	f000 fa0b 	bl	800b29e <xQueueGenericCreate>
 800ae88:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ae8a:	69fb      	ldr	r3, [r7, #28]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d022      	beq.n	800aed6 <osSemaphoreNew+0xe8>
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d01f      	beq.n	800aed6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ae96:	2300      	movs	r3, #0
 800ae98:	2200      	movs	r2, #0
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	69f8      	ldr	r0, [r7, #28]
 800ae9e:	f000 facb 	bl	800b438 <xQueueGenericSend>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d016      	beq.n	800aed6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800aea8:	69f8      	ldr	r0, [r7, #28]
 800aeaa:	f000 fd47 	bl	800b93c <vQueueDelete>
            hSemaphore = NULL;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	61fb      	str	r3, [r7, #28]
 800aeb2:	e010      	b.n	800aed6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d108      	bne.n	800aecc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	461a      	mov	r2, r3
 800aec0:	68b9      	ldr	r1, [r7, #8]
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f000 fa49 	bl	800b35a <xQueueCreateCountingSemaphoreStatic>
 800aec8:	61f8      	str	r0, [r7, #28]
 800aeca:	e004      	b.n	800aed6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800aecc:	68b9      	ldr	r1, [r7, #8]
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f000 fa7c 	bl	800b3cc <xQueueCreateCountingSemaphore>
 800aed4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800aed6:	69fb      	ldr	r3, [r7, #28]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00c      	beq.n	800aef6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d003      	beq.n	800aeea <osSemaphoreNew+0xfc>
          name = attr->name;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	617b      	str	r3, [r7, #20]
 800aee8:	e001      	b.n	800aeee <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800aeea:	2300      	movs	r3, #0
 800aeec:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800aeee:	6979      	ldr	r1, [r7, #20]
 800aef0:	69f8      	ldr	r0, [r7, #28]
 800aef2:	f000 fe57 	bl	800bba4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800aef6:	69fb      	ldr	r3, [r7, #28]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3720      	adds	r7, #32
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	4a07      	ldr	r2, [pc, #28]	@ (800af2c <vApplicationGetIdleTaskMemory+0x2c>)
 800af10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	4a06      	ldr	r2, [pc, #24]	@ (800af30 <vApplicationGetIdleTaskMemory+0x30>)
 800af16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2280      	movs	r2, #128	@ 0x80
 800af1c:	601a      	str	r2, [r3, #0]
}
 800af1e:	bf00      	nop
 800af20:	3714      	adds	r7, #20
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	20000488 	.word	0x20000488
 800af30:	20000530 	.word	0x20000530

0800af34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800af34:	b480      	push	{r7}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	4a07      	ldr	r2, [pc, #28]	@ (800af60 <vApplicationGetTimerTaskMemory+0x2c>)
 800af44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	4a06      	ldr	r2, [pc, #24]	@ (800af64 <vApplicationGetTimerTaskMemory+0x30>)
 800af4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800af52:	601a      	str	r2, [r3, #0]
}
 800af54:	bf00      	nop
 800af56:	3714      	adds	r7, #20
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr
 800af60:	20000730 	.word	0x20000730
 800af64:	200007d8 	.word	0x200007d8

0800af68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f103 0208 	add.w	r2, r3, #8
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f04f 32ff 	mov.w	r2, #4294967295
 800af80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f103 0208 	add.w	r2, r3, #8
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f103 0208 	add.w	r2, r3, #8
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800af9c:	bf00      	nop
 800af9e:	370c      	adds	r7, #12
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800afb6:	bf00      	nop
 800afb8:	370c      	adds	r7, #12
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr

0800afc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800afc2:	b480      	push	{r7}
 800afc4:	b085      	sub	sp, #20
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
 800afca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	689a      	ldr	r2, [r3, #8]
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	683a      	ldr	r2, [r7, #0]
 800afe6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	683a      	ldr	r2, [r7, #0]
 800afec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	1c5a      	adds	r2, r3, #1
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	601a      	str	r2, [r3, #0]
}
 800affe:	bf00      	nop
 800b000:	3714      	adds	r7, #20
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr

0800b00a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b00a:	b480      	push	{r7}
 800b00c:	b085      	sub	sp, #20
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b020:	d103      	bne.n	800b02a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	691b      	ldr	r3, [r3, #16]
 800b026:	60fb      	str	r3, [r7, #12]
 800b028:	e00c      	b.n	800b044 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	3308      	adds	r3, #8
 800b02e:	60fb      	str	r3, [r7, #12]
 800b030:	e002      	b.n	800b038 <vListInsert+0x2e>
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	60fb      	str	r3, [r7, #12]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	429a      	cmp	r2, r3
 800b042:	d2f6      	bcs.n	800b032 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	685a      	ldr	r2, [r3, #4]
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	683a      	ldr	r2, [r7, #0]
 800b052:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	683a      	ldr	r2, [r7, #0]
 800b05e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	1c5a      	adds	r2, r3, #1
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	601a      	str	r2, [r3, #0]
}
 800b070:	bf00      	nop
 800b072:	3714      	adds	r7, #20
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr

0800b07c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	691b      	ldr	r3, [r3, #16]
 800b088:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	6892      	ldr	r2, [r2, #8]
 800b092:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	6852      	ldr	r2, [r2, #4]
 800b09c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d103      	bne.n	800b0b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	689a      	ldr	r2, [r3, #8]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	1e5a      	subs	r2, r3, #1
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3714      	adds	r7, #20
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10b      	bne.n	800b0fc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e8:	f383 8811 	msr	BASEPRI, r3
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b0f6:	bf00      	nop
 800b0f8:	bf00      	nop
 800b0fa:	e7fd      	b.n	800b0f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b0fc:	f002 f99c 	bl	800d438 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b108:	68f9      	ldr	r1, [r7, #12]
 800b10a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b10c:	fb01 f303 	mul.w	r3, r1, r3
 800b110:	441a      	add	r2, r3
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b12c:	3b01      	subs	r3, #1
 800b12e:	68f9      	ldr	r1, [r7, #12]
 800b130:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b132:	fb01 f303 	mul.w	r3, r1, r3
 800b136:	441a      	add	r2, r3
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	22ff      	movs	r2, #255	@ 0xff
 800b140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	22ff      	movs	r2, #255	@ 0xff
 800b148:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d114      	bne.n	800b17c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	691b      	ldr	r3, [r3, #16]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d01a      	beq.n	800b190 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	3310      	adds	r3, #16
 800b15e:	4618      	mov	r0, r3
 800b160:	f001 fa3a 	bl	800c5d8 <xTaskRemoveFromEventList>
 800b164:	4603      	mov	r3, r0
 800b166:	2b00      	cmp	r3, #0
 800b168:	d012      	beq.n	800b190 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b16a:	4b0d      	ldr	r3, [pc, #52]	@ (800b1a0 <xQueueGenericReset+0xd0>)
 800b16c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b170:	601a      	str	r2, [r3, #0]
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	e009      	b.n	800b190 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	3310      	adds	r3, #16
 800b180:	4618      	mov	r0, r3
 800b182:	f7ff fef1 	bl	800af68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	3324      	adds	r3, #36	@ 0x24
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7ff feec 	bl	800af68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b190:	f002 f984 	bl	800d49c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b194:	2301      	movs	r3, #1
}
 800b196:	4618      	mov	r0, r3
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	e000ed04 	.word	0xe000ed04

0800b1a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b08e      	sub	sp, #56	@ 0x38
 800b1a8:	af02      	add	r7, sp, #8
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	607a      	str	r2, [r7, #4]
 800b1b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d10b      	bne.n	800b1d0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b1b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1bc:	f383 8811 	msr	BASEPRI, r3
 800b1c0:	f3bf 8f6f 	isb	sy
 800b1c4:	f3bf 8f4f 	dsb	sy
 800b1c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b1ca:	bf00      	nop
 800b1cc:	bf00      	nop
 800b1ce:	e7fd      	b.n	800b1cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d10b      	bne.n	800b1ee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1da:	f383 8811 	msr	BASEPRI, r3
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b1e8:	bf00      	nop
 800b1ea:	bf00      	nop
 800b1ec:	e7fd      	b.n	800b1ea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d002      	beq.n	800b1fa <xQueueGenericCreateStatic+0x56>
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d001      	beq.n	800b1fe <xQueueGenericCreateStatic+0x5a>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e000      	b.n	800b200 <xQueueGenericCreateStatic+0x5c>
 800b1fe:	2300      	movs	r3, #0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10b      	bne.n	800b21c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b208:	f383 8811 	msr	BASEPRI, r3
 800b20c:	f3bf 8f6f 	isb	sy
 800b210:	f3bf 8f4f 	dsb	sy
 800b214:	623b      	str	r3, [r7, #32]
}
 800b216:	bf00      	nop
 800b218:	bf00      	nop
 800b21a:	e7fd      	b.n	800b218 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d102      	bne.n	800b228 <xQueueGenericCreateStatic+0x84>
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d101      	bne.n	800b22c <xQueueGenericCreateStatic+0x88>
 800b228:	2301      	movs	r3, #1
 800b22a:	e000      	b.n	800b22e <xQueueGenericCreateStatic+0x8a>
 800b22c:	2300      	movs	r3, #0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d10b      	bne.n	800b24a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b236:	f383 8811 	msr	BASEPRI, r3
 800b23a:	f3bf 8f6f 	isb	sy
 800b23e:	f3bf 8f4f 	dsb	sy
 800b242:	61fb      	str	r3, [r7, #28]
}
 800b244:	bf00      	nop
 800b246:	bf00      	nop
 800b248:	e7fd      	b.n	800b246 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b24a:	2350      	movs	r3, #80	@ 0x50
 800b24c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	2b50      	cmp	r3, #80	@ 0x50
 800b252:	d00b      	beq.n	800b26c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b258:	f383 8811 	msr	BASEPRI, r3
 800b25c:	f3bf 8f6f 	isb	sy
 800b260:	f3bf 8f4f 	dsb	sy
 800b264:	61bb      	str	r3, [r7, #24]
}
 800b266:	bf00      	nop
 800b268:	bf00      	nop
 800b26a:	e7fd      	b.n	800b268 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b26c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b274:	2b00      	cmp	r3, #0
 800b276:	d00d      	beq.n	800b294 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b27a:	2201      	movs	r2, #1
 800b27c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b280:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b286:	9300      	str	r3, [sp, #0]
 800b288:	4613      	mov	r3, r2
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	68b9      	ldr	r1, [r7, #8]
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f000 f840 	bl	800b314 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b296:	4618      	mov	r0, r3
 800b298:	3730      	adds	r7, #48	@ 0x30
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b08a      	sub	sp, #40	@ 0x28
 800b2a2:	af02      	add	r7, sp, #8
 800b2a4:	60f8      	str	r0, [r7, #12]
 800b2a6:	60b9      	str	r1, [r7, #8]
 800b2a8:	4613      	mov	r3, r2
 800b2aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d10b      	bne.n	800b2ca <xQueueGenericCreate+0x2c>
	__asm volatile
 800b2b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b6:	f383 8811 	msr	BASEPRI, r3
 800b2ba:	f3bf 8f6f 	isb	sy
 800b2be:	f3bf 8f4f 	dsb	sy
 800b2c2:	613b      	str	r3, [r7, #16]
}
 800b2c4:	bf00      	nop
 800b2c6:	bf00      	nop
 800b2c8:	e7fd      	b.n	800b2c6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	fb02 f303 	mul.w	r3, r2, r3
 800b2d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b2d4:	69fb      	ldr	r3, [r7, #28]
 800b2d6:	3350      	adds	r3, #80	@ 0x50
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f002 f9cf 	bl	800d67c <pvPortMalloc>
 800b2de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d011      	beq.n	800b30a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	3350      	adds	r3, #80	@ 0x50
 800b2ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b2f8:	79fa      	ldrb	r2, [r7, #7]
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	9300      	str	r3, [sp, #0]
 800b2fe:	4613      	mov	r3, r2
 800b300:	697a      	ldr	r2, [r7, #20]
 800b302:	68b9      	ldr	r1, [r7, #8]
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	f000 f805 	bl	800b314 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b30a:	69bb      	ldr	r3, [r7, #24]
	}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3720      	adds	r7, #32
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	607a      	str	r2, [r7, #4]
 800b320:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d103      	bne.n	800b330 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	69ba      	ldr	r2, [r7, #24]
 800b32c:	601a      	str	r2, [r3, #0]
 800b32e:	e002      	b.n	800b336 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b33c:	69bb      	ldr	r3, [r7, #24]
 800b33e:	68ba      	ldr	r2, [r7, #8]
 800b340:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b342:	2101      	movs	r1, #1
 800b344:	69b8      	ldr	r0, [r7, #24]
 800b346:	f7ff fec3 	bl	800b0d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	78fa      	ldrb	r2, [r7, #3]
 800b34e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b352:	bf00      	nop
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b08a      	sub	sp, #40	@ 0x28
 800b35e:	af02      	add	r7, sp, #8
 800b360:	60f8      	str	r0, [r7, #12]
 800b362:	60b9      	str	r1, [r7, #8]
 800b364:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d10b      	bne.n	800b384 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800b36c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b370:	f383 8811 	msr	BASEPRI, r3
 800b374:	f3bf 8f6f 	isb	sy
 800b378:	f3bf 8f4f 	dsb	sy
 800b37c:	61bb      	str	r3, [r7, #24]
}
 800b37e:	bf00      	nop
 800b380:	bf00      	nop
 800b382:	e7fd      	b.n	800b380 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b384:	68ba      	ldr	r2, [r7, #8]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d90b      	bls.n	800b3a4 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800b38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b390:	f383 8811 	msr	BASEPRI, r3
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	617b      	str	r3, [r7, #20]
}
 800b39e:	bf00      	nop
 800b3a0:	bf00      	nop
 800b3a2:	e7fd      	b.n	800b3a0 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b3a4:	2302      	movs	r3, #2
 800b3a6:	9300      	str	r3, [sp, #0]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f7ff fef8 	bl	800b1a4 <xQueueGenericCreateStatic>
 800b3b4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b3c2:	69fb      	ldr	r3, [r7, #28]
	}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3720      	adds	r7, #32
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d10b      	bne.n	800b3f4 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800b3dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3e0:	f383 8811 	msr	BASEPRI, r3
 800b3e4:	f3bf 8f6f 	isb	sy
 800b3e8:	f3bf 8f4f 	dsb	sy
 800b3ec:	613b      	str	r3, [r7, #16]
}
 800b3ee:	bf00      	nop
 800b3f0:	bf00      	nop
 800b3f2:	e7fd      	b.n	800b3f0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b3f4:	683a      	ldr	r2, [r7, #0]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d90b      	bls.n	800b414 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800b3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	60fb      	str	r3, [r7, #12]
}
 800b40e:	bf00      	nop
 800b410:	bf00      	nop
 800b412:	e7fd      	b.n	800b410 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b414:	2202      	movs	r2, #2
 800b416:	2100      	movs	r1, #0
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f7ff ff40 	bl	800b29e <xQueueGenericCreate>
 800b41e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d002      	beq.n	800b42c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	683a      	ldr	r2, [r7, #0]
 800b42a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b42c:	697b      	ldr	r3, [r7, #20]
	}
 800b42e:	4618      	mov	r0, r3
 800b430:	3718      	adds	r7, #24
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
	...

0800b438 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b08e      	sub	sp, #56	@ 0x38
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	607a      	str	r2, [r7, #4]
 800b444:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b446:	2300      	movs	r3, #0
 800b448:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b450:	2b00      	cmp	r3, #0
 800b452:	d10b      	bne.n	800b46c <xQueueGenericSend+0x34>
	__asm volatile
 800b454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b458:	f383 8811 	msr	BASEPRI, r3
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b466:	bf00      	nop
 800b468:	bf00      	nop
 800b46a:	e7fd      	b.n	800b468 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d103      	bne.n	800b47a <xQueueGenericSend+0x42>
 800b472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b476:	2b00      	cmp	r3, #0
 800b478:	d101      	bne.n	800b47e <xQueueGenericSend+0x46>
 800b47a:	2301      	movs	r3, #1
 800b47c:	e000      	b.n	800b480 <xQueueGenericSend+0x48>
 800b47e:	2300      	movs	r3, #0
 800b480:	2b00      	cmp	r3, #0
 800b482:	d10b      	bne.n	800b49c <xQueueGenericSend+0x64>
	__asm volatile
 800b484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b488:	f383 8811 	msr	BASEPRI, r3
 800b48c:	f3bf 8f6f 	isb	sy
 800b490:	f3bf 8f4f 	dsb	sy
 800b494:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b496:	bf00      	nop
 800b498:	bf00      	nop
 800b49a:	e7fd      	b.n	800b498 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d103      	bne.n	800b4aa <xQueueGenericSend+0x72>
 800b4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d101      	bne.n	800b4ae <xQueueGenericSend+0x76>
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e000      	b.n	800b4b0 <xQueueGenericSend+0x78>
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d10b      	bne.n	800b4cc <xQueueGenericSend+0x94>
	__asm volatile
 800b4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b8:	f383 8811 	msr	BASEPRI, r3
 800b4bc:	f3bf 8f6f 	isb	sy
 800b4c0:	f3bf 8f4f 	dsb	sy
 800b4c4:	623b      	str	r3, [r7, #32]
}
 800b4c6:	bf00      	nop
 800b4c8:	bf00      	nop
 800b4ca:	e7fd      	b.n	800b4c8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4cc:	f001 fa4a 	bl	800c964 <xTaskGetSchedulerState>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d102      	bne.n	800b4dc <xQueueGenericSend+0xa4>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d101      	bne.n	800b4e0 <xQueueGenericSend+0xa8>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e000      	b.n	800b4e2 <xQueueGenericSend+0xaa>
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d10b      	bne.n	800b4fe <xQueueGenericSend+0xc6>
	__asm volatile
 800b4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	61fb      	str	r3, [r7, #28]
}
 800b4f8:	bf00      	nop
 800b4fa:	bf00      	nop
 800b4fc:	e7fd      	b.n	800b4fa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4fe:	f001 ff9b 	bl	800d438 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b504:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d302      	bcc.n	800b514 <xQueueGenericSend+0xdc>
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	2b02      	cmp	r3, #2
 800b512:	d129      	bne.n	800b568 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	68b9      	ldr	r1, [r7, #8]
 800b518:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b51a:	f000 fa33 	bl	800b984 <prvCopyDataToQueue>
 800b51e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b524:	2b00      	cmp	r3, #0
 800b526:	d010      	beq.n	800b54a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b52a:	3324      	adds	r3, #36	@ 0x24
 800b52c:	4618      	mov	r0, r3
 800b52e:	f001 f853 	bl	800c5d8 <xTaskRemoveFromEventList>
 800b532:	4603      	mov	r3, r0
 800b534:	2b00      	cmp	r3, #0
 800b536:	d013      	beq.n	800b560 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b538:	4b3f      	ldr	r3, [pc, #252]	@ (800b638 <xQueueGenericSend+0x200>)
 800b53a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b53e:	601a      	str	r2, [r3, #0]
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	e00a      	b.n	800b560 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d007      	beq.n	800b560 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b550:	4b39      	ldr	r3, [pc, #228]	@ (800b638 <xQueueGenericSend+0x200>)
 800b552:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b556:	601a      	str	r2, [r3, #0]
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b560:	f001 ff9c 	bl	800d49c <vPortExitCritical>
				return pdPASS;
 800b564:	2301      	movs	r3, #1
 800b566:	e063      	b.n	800b630 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d103      	bne.n	800b576 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b56e:	f001 ff95 	bl	800d49c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b572:	2300      	movs	r3, #0
 800b574:	e05c      	b.n	800b630 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d106      	bne.n	800b58a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b57c:	f107 0314 	add.w	r3, r7, #20
 800b580:	4618      	mov	r0, r3
 800b582:	f001 f88d 	bl	800c6a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b586:	2301      	movs	r3, #1
 800b588:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b58a:	f001 ff87 	bl	800d49c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b58e:	f000 fdf5 	bl	800c17c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b592:	f001 ff51 	bl	800d438 <vPortEnterCritical>
 800b596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b598:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b59c:	b25b      	sxtb	r3, r3
 800b59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a2:	d103      	bne.n	800b5ac <xQueueGenericSend+0x174>
 800b5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b5b2:	b25b      	sxtb	r3, r3
 800b5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5b8:	d103      	bne.n	800b5c2 <xQueueGenericSend+0x18a>
 800b5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b5c2:	f001 ff6b 	bl	800d49c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b5c6:	1d3a      	adds	r2, r7, #4
 800b5c8:	f107 0314 	add.w	r3, r7, #20
 800b5cc:	4611      	mov	r1, r2
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f001 f87c 	bl	800c6cc <xTaskCheckForTimeOut>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d124      	bne.n	800b624 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b5da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5dc:	f000 faca 	bl	800bb74 <prvIsQueueFull>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d018      	beq.n	800b618 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5e8:	3310      	adds	r3, #16
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	4611      	mov	r1, r2
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f000 ffa0 	bl	800c534 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b5f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5f6:	f000 fa55 	bl	800baa4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b5fa:	f000 fdcd 	bl	800c198 <xTaskResumeAll>
 800b5fe:	4603      	mov	r3, r0
 800b600:	2b00      	cmp	r3, #0
 800b602:	f47f af7c 	bne.w	800b4fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b606:	4b0c      	ldr	r3, [pc, #48]	@ (800b638 <xQueueGenericSend+0x200>)
 800b608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b60c:	601a      	str	r2, [r3, #0]
 800b60e:	f3bf 8f4f 	dsb	sy
 800b612:	f3bf 8f6f 	isb	sy
 800b616:	e772      	b.n	800b4fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b618:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b61a:	f000 fa43 	bl	800baa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b61e:	f000 fdbb 	bl	800c198 <xTaskResumeAll>
 800b622:	e76c      	b.n	800b4fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b624:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b626:	f000 fa3d 	bl	800baa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b62a:	f000 fdb5 	bl	800c198 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b62e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b630:	4618      	mov	r0, r3
 800b632:	3738      	adds	r7, #56	@ 0x38
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	e000ed04 	.word	0xe000ed04

0800b63c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b090      	sub	sp, #64	@ 0x40
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
 800b648:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10b      	bne.n	800b66c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b666:	bf00      	nop
 800b668:	bf00      	nop
 800b66a:	e7fd      	b.n	800b668 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d103      	bne.n	800b67a <xQueueGenericSendFromISR+0x3e>
 800b672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b676:	2b00      	cmp	r3, #0
 800b678:	d101      	bne.n	800b67e <xQueueGenericSendFromISR+0x42>
 800b67a:	2301      	movs	r3, #1
 800b67c:	e000      	b.n	800b680 <xQueueGenericSendFromISR+0x44>
 800b67e:	2300      	movs	r3, #0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d10b      	bne.n	800b69c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b688:	f383 8811 	msr	BASEPRI, r3
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	f3bf 8f4f 	dsb	sy
 800b694:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b696:	bf00      	nop
 800b698:	bf00      	nop
 800b69a:	e7fd      	b.n	800b698 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	2b02      	cmp	r3, #2
 800b6a0:	d103      	bne.n	800b6aa <xQueueGenericSendFromISR+0x6e>
 800b6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d101      	bne.n	800b6ae <xQueueGenericSendFromISR+0x72>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e000      	b.n	800b6b0 <xQueueGenericSendFromISR+0x74>
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d10b      	bne.n	800b6cc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b6b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6b8:	f383 8811 	msr	BASEPRI, r3
 800b6bc:	f3bf 8f6f 	isb	sy
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	623b      	str	r3, [r7, #32]
}
 800b6c6:	bf00      	nop
 800b6c8:	bf00      	nop
 800b6ca:	e7fd      	b.n	800b6c8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b6cc:	f001 ff94 	bl	800d5f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b6d0:	f3ef 8211 	mrs	r2, BASEPRI
 800b6d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d8:	f383 8811 	msr	BASEPRI, r3
 800b6dc:	f3bf 8f6f 	isb	sy
 800b6e0:	f3bf 8f4f 	dsb	sy
 800b6e4:	61fa      	str	r2, [r7, #28]
 800b6e6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b6e8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b6ea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d302      	bcc.n	800b6fe <xQueueGenericSendFromISR+0xc2>
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	d12f      	bne.n	800b75e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b700:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b704:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b70a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b70c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	68b9      	ldr	r1, [r7, #8]
 800b712:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b714:	f000 f936 	bl	800b984 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b718:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b71c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b720:	d112      	bne.n	800b748 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b726:	2b00      	cmp	r3, #0
 800b728:	d016      	beq.n	800b758 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b72c:	3324      	adds	r3, #36	@ 0x24
 800b72e:	4618      	mov	r0, r3
 800b730:	f000 ff52 	bl	800c5d8 <xTaskRemoveFromEventList>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00e      	beq.n	800b758 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d00b      	beq.n	800b758 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2201      	movs	r2, #1
 800b744:	601a      	str	r2, [r3, #0]
 800b746:	e007      	b.n	800b758 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b748:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b74c:	3301      	adds	r3, #1
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	b25a      	sxtb	r2, r3
 800b752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b758:	2301      	movs	r3, #1
 800b75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b75c:	e001      	b.n	800b762 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b75e:	2300      	movs	r3, #0
 800b760:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b764:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b76c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b76e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b770:	4618      	mov	r0, r3
 800b772:	3740      	adds	r7, #64	@ 0x40
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b08c      	sub	sp, #48	@ 0x30
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b784:	2300      	movs	r3, #0
 800b786:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d10b      	bne.n	800b7aa <xQueueReceive+0x32>
	__asm volatile
 800b792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	623b      	str	r3, [r7, #32]
}
 800b7a4:	bf00      	nop
 800b7a6:	bf00      	nop
 800b7a8:	e7fd      	b.n	800b7a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d103      	bne.n	800b7b8 <xQueueReceive+0x40>
 800b7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d101      	bne.n	800b7bc <xQueueReceive+0x44>
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e000      	b.n	800b7be <xQueueReceive+0x46>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d10b      	bne.n	800b7da <xQueueReceive+0x62>
	__asm volatile
 800b7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c6:	f383 8811 	msr	BASEPRI, r3
 800b7ca:	f3bf 8f6f 	isb	sy
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	61fb      	str	r3, [r7, #28]
}
 800b7d4:	bf00      	nop
 800b7d6:	bf00      	nop
 800b7d8:	e7fd      	b.n	800b7d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7da:	f001 f8c3 	bl	800c964 <xTaskGetSchedulerState>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d102      	bne.n	800b7ea <xQueueReceive+0x72>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d101      	bne.n	800b7ee <xQueueReceive+0x76>
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e000      	b.n	800b7f0 <xQueueReceive+0x78>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d10b      	bne.n	800b80c <xQueueReceive+0x94>
	__asm volatile
 800b7f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f8:	f383 8811 	msr	BASEPRI, r3
 800b7fc:	f3bf 8f6f 	isb	sy
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	61bb      	str	r3, [r7, #24]
}
 800b806:	bf00      	nop
 800b808:	bf00      	nop
 800b80a:	e7fd      	b.n	800b808 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b80c:	f001 fe14 	bl	800d438 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b814:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d01f      	beq.n	800b85c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b81c:	68b9      	ldr	r1, [r7, #8]
 800b81e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b820:	f000 f91a 	bl	800ba58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b826:	1e5a      	subs	r2, r3, #1
 800b828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b82a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b82e:	691b      	ldr	r3, [r3, #16]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00f      	beq.n	800b854 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b836:	3310      	adds	r3, #16
 800b838:	4618      	mov	r0, r3
 800b83a:	f000 fecd 	bl	800c5d8 <xTaskRemoveFromEventList>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d007      	beq.n	800b854 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b844:	4b3c      	ldr	r3, [pc, #240]	@ (800b938 <xQueueReceive+0x1c0>)
 800b846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b84a:	601a      	str	r2, [r3, #0]
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b854:	f001 fe22 	bl	800d49c <vPortExitCritical>
				return pdPASS;
 800b858:	2301      	movs	r3, #1
 800b85a:	e069      	b.n	800b930 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d103      	bne.n	800b86a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b862:	f001 fe1b 	bl	800d49c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b866:	2300      	movs	r3, #0
 800b868:	e062      	b.n	800b930 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d106      	bne.n	800b87e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b870:	f107 0310 	add.w	r3, r7, #16
 800b874:	4618      	mov	r0, r3
 800b876:	f000 ff13 	bl	800c6a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b87a:	2301      	movs	r3, #1
 800b87c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b87e:	f001 fe0d 	bl	800d49c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b882:	f000 fc7b 	bl	800c17c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b886:	f001 fdd7 	bl	800d438 <vPortEnterCritical>
 800b88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b88c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b890:	b25b      	sxtb	r3, r3
 800b892:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b896:	d103      	bne.n	800b8a0 <xQueueReceive+0x128>
 800b898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b89a:	2200      	movs	r2, #0
 800b89c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b8a6:	b25b      	sxtb	r3, r3
 800b8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ac:	d103      	bne.n	800b8b6 <xQueueReceive+0x13e>
 800b8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b8b6:	f001 fdf1 	bl	800d49c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8ba:	1d3a      	adds	r2, r7, #4
 800b8bc:	f107 0310 	add.w	r3, r7, #16
 800b8c0:	4611      	mov	r1, r2
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f000 ff02 	bl	800c6cc <xTaskCheckForTimeOut>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d123      	bne.n	800b916 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8d0:	f000 f93a 	bl	800bb48 <prvIsQueueEmpty>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d017      	beq.n	800b90a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8dc:	3324      	adds	r3, #36	@ 0x24
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	4611      	mov	r1, r2
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f000 fe26 	bl	800c534 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b8e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8ea:	f000 f8db 	bl	800baa4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b8ee:	f000 fc53 	bl	800c198 <xTaskResumeAll>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d189      	bne.n	800b80c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b8f8:	4b0f      	ldr	r3, [pc, #60]	@ (800b938 <xQueueReceive+0x1c0>)
 800b8fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8fe:	601a      	str	r2, [r3, #0]
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	f3bf 8f6f 	isb	sy
 800b908:	e780      	b.n	800b80c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b90a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b90c:	f000 f8ca 	bl	800baa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b910:	f000 fc42 	bl	800c198 <xTaskResumeAll>
 800b914:	e77a      	b.n	800b80c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b918:	f000 f8c4 	bl	800baa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b91c:	f000 fc3c 	bl	800c198 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b920:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b922:	f000 f911 	bl	800bb48 <prvIsQueueEmpty>
 800b926:	4603      	mov	r3, r0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f43f af6f 	beq.w	800b80c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b92e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b930:	4618      	mov	r0, r3
 800b932:	3730      	adds	r7, #48	@ 0x30
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	e000ed04 	.word	0xe000ed04

0800b93c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d10b      	bne.n	800b966 <vQueueDelete+0x2a>
	__asm volatile
 800b94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b952:	f383 8811 	msr	BASEPRI, r3
 800b956:	f3bf 8f6f 	isb	sy
 800b95a:	f3bf 8f4f 	dsb	sy
 800b95e:	60bb      	str	r3, [r7, #8]
}
 800b960:	bf00      	nop
 800b962:	bf00      	nop
 800b964:	e7fd      	b.n	800b962 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f000 f946 	bl	800bbf8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b972:	2b00      	cmp	r3, #0
 800b974:	d102      	bne.n	800b97c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f001 ff4e 	bl	800d818 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b97c:	bf00      	nop
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b990:	2300      	movs	r3, #0
 800b992:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b998:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d10d      	bne.n	800b9be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d14d      	bne.n	800ba46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f000 fff6 	bl	800c9a0 <xTaskPriorityDisinherit>
 800b9b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	609a      	str	r2, [r3, #8]
 800b9bc:	e043      	b.n	800ba46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d119      	bne.n	800b9f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6858      	ldr	r0, [r3, #4]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	68b9      	ldr	r1, [r7, #8]
 800b9d0:	f002 f8de 	bl	800db90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	685a      	ldr	r2, [r3, #4]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9dc:	441a      	add	r2, r3
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	685a      	ldr	r2, [r3, #4]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	689b      	ldr	r3, [r3, #8]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d32b      	bcc.n	800ba46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	605a      	str	r2, [r3, #4]
 800b9f6:	e026      	b.n	800ba46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	68d8      	ldr	r0, [r3, #12]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba00:	461a      	mov	r2, r3
 800ba02:	68b9      	ldr	r1, [r7, #8]
 800ba04:	f002 f8c4 	bl	800db90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	68da      	ldr	r2, [r3, #12]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba10:	425b      	negs	r3, r3
 800ba12:	441a      	add	r2, r3
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	68da      	ldr	r2, [r3, #12]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d207      	bcs.n	800ba34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	689a      	ldr	r2, [r3, #8]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba2c:	425b      	negs	r3, r3
 800ba2e:	441a      	add	r2, r3
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	d105      	bne.n	800ba46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d002      	beq.n	800ba46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	3b01      	subs	r3, #1
 800ba44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	1c5a      	adds	r2, r3, #1
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ba4e:	697b      	ldr	r3, [r7, #20]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3718      	adds	r7, #24
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d018      	beq.n	800ba9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	68da      	ldr	r2, [r3, #12]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba72:	441a      	add	r2, r3
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	68da      	ldr	r2, [r3, #12]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d303      	bcc.n	800ba8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	68d9      	ldr	r1, [r3, #12]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba94:	461a      	mov	r2, r3
 800ba96:	6838      	ldr	r0, [r7, #0]
 800ba98:	f002 f87a 	bl	800db90 <memcpy>
	}
}
 800ba9c:	bf00      	nop
 800ba9e:	3708      	adds	r7, #8
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800baac:	f001 fcc4 	bl	800d438 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bab6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bab8:	e011      	b.n	800bade <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d012      	beq.n	800bae8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	3324      	adds	r3, #36	@ 0x24
 800bac6:	4618      	mov	r0, r3
 800bac8:	f000 fd86 	bl	800c5d8 <xTaskRemoveFromEventList>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d001      	beq.n	800bad6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bad2:	f000 fe5f 	bl	800c794 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bad6:	7bfb      	ldrb	r3, [r7, #15]
 800bad8:	3b01      	subs	r3, #1
 800bada:	b2db      	uxtb	r3, r3
 800badc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	dce9      	bgt.n	800baba <prvUnlockQueue+0x16>
 800bae6:	e000      	b.n	800baea <prvUnlockQueue+0x46>
					break;
 800bae8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	22ff      	movs	r2, #255	@ 0xff
 800baee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800baf2:	f001 fcd3 	bl	800d49c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800baf6:	f001 fc9f 	bl	800d438 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bb00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb02:	e011      	b.n	800bb28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	691b      	ldr	r3, [r3, #16]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d012      	beq.n	800bb32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	3310      	adds	r3, #16
 800bb10:	4618      	mov	r0, r3
 800bb12:	f000 fd61 	bl	800c5d8 <xTaskRemoveFromEventList>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d001      	beq.n	800bb20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bb1c:	f000 fe3a 	bl	800c794 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bb20:	7bbb      	ldrb	r3, [r7, #14]
 800bb22:	3b01      	subs	r3, #1
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	dce9      	bgt.n	800bb04 <prvUnlockQueue+0x60>
 800bb30:	e000      	b.n	800bb34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bb32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	22ff      	movs	r2, #255	@ 0xff
 800bb38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bb3c:	f001 fcae 	bl	800d49c <vPortExitCritical>
}
 800bb40:	bf00      	nop
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb50:	f001 fc72 	bl	800d438 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d102      	bne.n	800bb62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	60fb      	str	r3, [r7, #12]
 800bb60:	e001      	b.n	800bb66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bb62:	2300      	movs	r3, #0
 800bb64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb66:	f001 fc99 	bl	800d49c <vPortExitCritical>

	return xReturn;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb7c:	f001 fc5c 	bl	800d438 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d102      	bne.n	800bb92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	60fb      	str	r3, [r7, #12]
 800bb90:	e001      	b.n	800bb96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bb92:	2300      	movs	r3, #0
 800bb94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb96:	f001 fc81 	bl	800d49c <vPortExitCritical>

	return xReturn;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3710      	adds	r7, #16
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bba4:	b480      	push	{r7}
 800bba6:	b085      	sub	sp, #20
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bbae:	2300      	movs	r3, #0
 800bbb0:	60fb      	str	r3, [r7, #12]
 800bbb2:	e014      	b.n	800bbde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bbb4:	4a0f      	ldr	r2, [pc, #60]	@ (800bbf4 <vQueueAddToRegistry+0x50>)
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d10b      	bne.n	800bbd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bbc0:	490c      	ldr	r1, [pc, #48]	@ (800bbf4 <vQueueAddToRegistry+0x50>)
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	683a      	ldr	r2, [r7, #0]
 800bbc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bbca:	4a0a      	ldr	r2, [pc, #40]	@ (800bbf4 <vQueueAddToRegistry+0x50>)
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	00db      	lsls	r3, r3, #3
 800bbd0:	4413      	add	r3, r2
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bbd6:	e006      	b.n	800bbe6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	60fb      	str	r3, [r7, #12]
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2b07      	cmp	r3, #7
 800bbe2:	d9e7      	bls.n	800bbb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bbe4:	bf00      	nop
 800bbe6:	bf00      	nop
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	20000bd8 	.word	0x20000bd8

0800bbf8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc00:	2300      	movs	r3, #0
 800bc02:	60fb      	str	r3, [r7, #12]
 800bc04:	e016      	b.n	800bc34 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bc06:	4a10      	ldr	r2, [pc, #64]	@ (800bc48 <vQueueUnregisterQueue+0x50>)
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	00db      	lsls	r3, r3, #3
 800bc0c:	4413      	add	r3, r2
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d10b      	bne.n	800bc2e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bc16:	4a0c      	ldr	r2, [pc, #48]	@ (800bc48 <vQueueUnregisterQueue+0x50>)
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bc20:	4a09      	ldr	r2, [pc, #36]	@ (800bc48 <vQueueUnregisterQueue+0x50>)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	00db      	lsls	r3, r3, #3
 800bc26:	4413      	add	r3, r2
 800bc28:	2200      	movs	r2, #0
 800bc2a:	605a      	str	r2, [r3, #4]
				break;
 800bc2c:	e006      	b.n	800bc3c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	3301      	adds	r3, #1
 800bc32:	60fb      	str	r3, [r7, #12]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2b07      	cmp	r3, #7
 800bc38:	d9e5      	bls.n	800bc06 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bc3a:	bf00      	nop
 800bc3c:	bf00      	nop
 800bc3e:	3714      	adds	r7, #20
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr
 800bc48:	20000bd8 	.word	0x20000bd8

0800bc4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b086      	sub	sp, #24
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bc5c:	f001 fbec 	bl	800d438 <vPortEnterCritical>
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bc66:	b25b      	sxtb	r3, r3
 800bc68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc6c:	d103      	bne.n	800bc76 <vQueueWaitForMessageRestricted+0x2a>
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc7c:	b25b      	sxtb	r3, r3
 800bc7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc82:	d103      	bne.n	800bc8c <vQueueWaitForMessageRestricted+0x40>
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	2200      	movs	r2, #0
 800bc88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc8c:	f001 fc06 	bl	800d49c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d106      	bne.n	800bca6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	3324      	adds	r3, #36	@ 0x24
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	68b9      	ldr	r1, [r7, #8]
 800bca0:	4618      	mov	r0, r3
 800bca2:	f000 fc6d 	bl	800c580 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bca6:	6978      	ldr	r0, [r7, #20]
 800bca8:	f7ff fefc 	bl	800baa4 <prvUnlockQueue>
	}
 800bcac:	bf00      	nop
 800bcae:	3718      	adds	r7, #24
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b08e      	sub	sp, #56	@ 0x38
 800bcb8:	af04      	add	r7, sp, #16
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	607a      	str	r2, [r7, #4]
 800bcc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bcc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10b      	bne.n	800bce0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800bcc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bccc:	f383 8811 	msr	BASEPRI, r3
 800bcd0:	f3bf 8f6f 	isb	sy
 800bcd4:	f3bf 8f4f 	dsb	sy
 800bcd8:	623b      	str	r3, [r7, #32]
}
 800bcda:	bf00      	nop
 800bcdc:	bf00      	nop
 800bcde:	e7fd      	b.n	800bcdc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d10b      	bne.n	800bcfe <xTaskCreateStatic+0x4a>
	__asm volatile
 800bce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcea:	f383 8811 	msr	BASEPRI, r3
 800bcee:	f3bf 8f6f 	isb	sy
 800bcf2:	f3bf 8f4f 	dsb	sy
 800bcf6:	61fb      	str	r3, [r7, #28]
}
 800bcf8:	bf00      	nop
 800bcfa:	bf00      	nop
 800bcfc:	e7fd      	b.n	800bcfa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bcfe:	23a8      	movs	r3, #168	@ 0xa8
 800bd00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	2ba8      	cmp	r3, #168	@ 0xa8
 800bd06:	d00b      	beq.n	800bd20 <xTaskCreateStatic+0x6c>
	__asm volatile
 800bd08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd0c:	f383 8811 	msr	BASEPRI, r3
 800bd10:	f3bf 8f6f 	isb	sy
 800bd14:	f3bf 8f4f 	dsb	sy
 800bd18:	61bb      	str	r3, [r7, #24]
}
 800bd1a:	bf00      	nop
 800bd1c:	bf00      	nop
 800bd1e:	e7fd      	b.n	800bd1c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bd20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bd22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d01e      	beq.n	800bd66 <xTaskCreateStatic+0xb2>
 800bd28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d01b      	beq.n	800bd66 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd30:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd36:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd3a:	2202      	movs	r2, #2
 800bd3c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bd40:	2300      	movs	r3, #0
 800bd42:	9303      	str	r3, [sp, #12]
 800bd44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd46:	9302      	str	r3, [sp, #8]
 800bd48:	f107 0314 	add.w	r3, r7, #20
 800bd4c:	9301      	str	r3, [sp, #4]
 800bd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd50:	9300      	str	r3, [sp, #0]
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	68b9      	ldr	r1, [r7, #8]
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f000 f851 	bl	800be00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bd60:	f000 f8f6 	bl	800bf50 <prvAddNewTaskToReadyList>
 800bd64:	e001      	b.n	800bd6a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bd66:	2300      	movs	r3, #0
 800bd68:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bd6a:	697b      	ldr	r3, [r7, #20]
	}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3728      	adds	r7, #40	@ 0x28
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b08c      	sub	sp, #48	@ 0x30
 800bd78:	af04      	add	r7, sp, #16
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	603b      	str	r3, [r7, #0]
 800bd80:	4613      	mov	r3, r2
 800bd82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bd84:	88fb      	ldrh	r3, [r7, #6]
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f001 fc77 	bl	800d67c <pvPortMalloc>
 800bd8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d00e      	beq.n	800bdb4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bd96:	20a8      	movs	r0, #168	@ 0xa8
 800bd98:	f001 fc70 	bl	800d67c <pvPortMalloc>
 800bd9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d003      	beq.n	800bdac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	697a      	ldr	r2, [r7, #20]
 800bda8:	631a      	str	r2, [r3, #48]	@ 0x30
 800bdaa:	e005      	b.n	800bdb8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bdac:	6978      	ldr	r0, [r7, #20]
 800bdae:	f001 fd33 	bl	800d818 <vPortFree>
 800bdb2:	e001      	b.n	800bdb8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d017      	beq.n	800bdee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bdc6:	88fa      	ldrh	r2, [r7, #6]
 800bdc8:	2300      	movs	r3, #0
 800bdca:	9303      	str	r3, [sp, #12]
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	9302      	str	r3, [sp, #8]
 800bdd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdd2:	9301      	str	r3, [sp, #4]
 800bdd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdd6:	9300      	str	r3, [sp, #0]
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	68b9      	ldr	r1, [r7, #8]
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f000 f80f 	bl	800be00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bde2:	69f8      	ldr	r0, [r7, #28]
 800bde4:	f000 f8b4 	bl	800bf50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bde8:	2301      	movs	r3, #1
 800bdea:	61bb      	str	r3, [r7, #24]
 800bdec:	e002      	b.n	800bdf4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bdee:	f04f 33ff 	mov.w	r3, #4294967295
 800bdf2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bdf4:	69bb      	ldr	r3, [r7, #24]
	}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3720      	adds	r7, #32
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
	...

0800be00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b088      	sub	sp, #32
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	607a      	str	r2, [r7, #4]
 800be0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800be0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be10:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	461a      	mov	r2, r3
 800be18:	21a5      	movs	r1, #165	@ 0xa5
 800be1a:	f001 fe35 	bl	800da88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800be1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be28:	3b01      	subs	r3, #1
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	4413      	add	r3, r2
 800be2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	f023 0307 	bic.w	r3, r3, #7
 800be36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	f003 0307 	and.w	r3, r3, #7
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00b      	beq.n	800be5a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800be42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be46:	f383 8811 	msr	BASEPRI, r3
 800be4a:	f3bf 8f6f 	isb	sy
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	617b      	str	r3, [r7, #20]
}
 800be54:	bf00      	nop
 800be56:	bf00      	nop
 800be58:	e7fd      	b.n	800be56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d01f      	beq.n	800bea0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be60:	2300      	movs	r3, #0
 800be62:	61fb      	str	r3, [r7, #28]
 800be64:	e012      	b.n	800be8c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800be66:	68ba      	ldr	r2, [r7, #8]
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	4413      	add	r3, r2
 800be6c:	7819      	ldrb	r1, [r3, #0]
 800be6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	4413      	add	r3, r2
 800be74:	3334      	adds	r3, #52	@ 0x34
 800be76:	460a      	mov	r2, r1
 800be78:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800be7a:	68ba      	ldr	r2, [r7, #8]
 800be7c:	69fb      	ldr	r3, [r7, #28]
 800be7e:	4413      	add	r3, r2
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d006      	beq.n	800be94 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be86:	69fb      	ldr	r3, [r7, #28]
 800be88:	3301      	adds	r3, #1
 800be8a:	61fb      	str	r3, [r7, #28]
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	2b0f      	cmp	r3, #15
 800be90:	d9e9      	bls.n	800be66 <prvInitialiseNewTask+0x66>
 800be92:	e000      	b.n	800be96 <prvInitialiseNewTask+0x96>
			{
				break;
 800be94:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800be96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be98:	2200      	movs	r2, #0
 800be9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800be9e:	e003      	b.n	800bea8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea2:	2200      	movs	r2, #0
 800bea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beaa:	2b37      	cmp	r3, #55	@ 0x37
 800beac:	d901      	bls.n	800beb2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800beae:	2337      	movs	r3, #55	@ 0x37
 800beb0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800beb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800beb6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800beb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bebc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec0:	2200      	movs	r2, #0
 800bec2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec6:	3304      	adds	r3, #4
 800bec8:	4618      	mov	r0, r3
 800beca:	f7ff f86d 	bl	800afa8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed0:	3318      	adds	r3, #24
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7ff f868 	bl	800afa8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bedc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800beec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800beee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef0:	2200      	movs	r2, #0
 800bef2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef8:	2200      	movs	r2, #0
 800befa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800befe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf00:	3354      	adds	r3, #84	@ 0x54
 800bf02:	224c      	movs	r2, #76	@ 0x4c
 800bf04:	2100      	movs	r1, #0
 800bf06:	4618      	mov	r0, r3
 800bf08:	f001 fdbe 	bl	800da88 <memset>
 800bf0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf0e:	4a0d      	ldr	r2, [pc, #52]	@ (800bf44 <prvInitialiseNewTask+0x144>)
 800bf10:	659a      	str	r2, [r3, #88]	@ 0x58
 800bf12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf14:	4a0c      	ldr	r2, [pc, #48]	@ (800bf48 <prvInitialiseNewTask+0x148>)
 800bf16:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bf18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf1a:	4a0c      	ldr	r2, [pc, #48]	@ (800bf4c <prvInitialiseNewTask+0x14c>)
 800bf1c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bf1e:	683a      	ldr	r2, [r7, #0]
 800bf20:	68f9      	ldr	r1, [r7, #12]
 800bf22:	69b8      	ldr	r0, [r7, #24]
 800bf24:	f001 f95a 	bl	800d1dc <pxPortInitialiseStack>
 800bf28:	4602      	mov	r2, r0
 800bf2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bf2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d002      	beq.n	800bf3a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bf34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf3a:	bf00      	nop
 800bf3c:	3720      	adds	r7, #32
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	200029e0 	.word	0x200029e0
 800bf48:	20002a48 	.word	0x20002a48
 800bf4c:	20002ab0 	.word	0x20002ab0

0800bf50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bf58:	f001 fa6e 	bl	800d438 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bf5c:	4b2d      	ldr	r3, [pc, #180]	@ (800c014 <prvAddNewTaskToReadyList+0xc4>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	3301      	adds	r3, #1
 800bf62:	4a2c      	ldr	r2, [pc, #176]	@ (800c014 <prvAddNewTaskToReadyList+0xc4>)
 800bf64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bf66:	4b2c      	ldr	r3, [pc, #176]	@ (800c018 <prvAddNewTaskToReadyList+0xc8>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d109      	bne.n	800bf82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bf6e:	4a2a      	ldr	r2, [pc, #168]	@ (800c018 <prvAddNewTaskToReadyList+0xc8>)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bf74:	4b27      	ldr	r3, [pc, #156]	@ (800c014 <prvAddNewTaskToReadyList+0xc4>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d110      	bne.n	800bf9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bf7c:	f000 fc2e 	bl	800c7dc <prvInitialiseTaskLists>
 800bf80:	e00d      	b.n	800bf9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bf82:	4b26      	ldr	r3, [pc, #152]	@ (800c01c <prvAddNewTaskToReadyList+0xcc>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d109      	bne.n	800bf9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bf8a:	4b23      	ldr	r3, [pc, #140]	@ (800c018 <prvAddNewTaskToReadyList+0xc8>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d802      	bhi.n	800bf9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bf98:	4a1f      	ldr	r2, [pc, #124]	@ (800c018 <prvAddNewTaskToReadyList+0xc8>)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bf9e:	4b20      	ldr	r3, [pc, #128]	@ (800c020 <prvAddNewTaskToReadyList+0xd0>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	4a1e      	ldr	r2, [pc, #120]	@ (800c020 <prvAddNewTaskToReadyList+0xd0>)
 800bfa6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bfa8:	4b1d      	ldr	r3, [pc, #116]	@ (800c020 <prvAddNewTaskToReadyList+0xd0>)
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfb4:	4b1b      	ldr	r3, [pc, #108]	@ (800c024 <prvAddNewTaskToReadyList+0xd4>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d903      	bls.n	800bfc4 <prvAddNewTaskToReadyList+0x74>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfc0:	4a18      	ldr	r2, [pc, #96]	@ (800c024 <prvAddNewTaskToReadyList+0xd4>)
 800bfc2:	6013      	str	r3, [r2, #0]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfc8:	4613      	mov	r3, r2
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	4413      	add	r3, r2
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	4a15      	ldr	r2, [pc, #84]	@ (800c028 <prvAddNewTaskToReadyList+0xd8>)
 800bfd2:	441a      	add	r2, r3
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	4619      	mov	r1, r3
 800bfda:	4610      	mov	r0, r2
 800bfdc:	f7fe fff1 	bl	800afc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bfe0:	f001 fa5c 	bl	800d49c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bfe4:	4b0d      	ldr	r3, [pc, #52]	@ (800c01c <prvAddNewTaskToReadyList+0xcc>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d00e      	beq.n	800c00a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bfec:	4b0a      	ldr	r3, [pc, #40]	@ (800c018 <prvAddNewTaskToReadyList+0xc8>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d207      	bcs.n	800c00a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bffa:	4b0c      	ldr	r3, [pc, #48]	@ (800c02c <prvAddNewTaskToReadyList+0xdc>)
 800bffc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c000:	601a      	str	r2, [r3, #0]
 800c002:	f3bf 8f4f 	dsb	sy
 800c006:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c00a:	bf00      	nop
 800c00c:	3708      	adds	r7, #8
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	200010ec 	.word	0x200010ec
 800c018:	20000c18 	.word	0x20000c18
 800c01c:	200010f8 	.word	0x200010f8
 800c020:	20001108 	.word	0x20001108
 800c024:	200010f4 	.word	0x200010f4
 800c028:	20000c1c 	.word	0x20000c1c
 800c02c:	e000ed04 	.word	0xe000ed04

0800c030 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c038:	2300      	movs	r3, #0
 800c03a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d018      	beq.n	800c074 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c042:	4b14      	ldr	r3, [pc, #80]	@ (800c094 <vTaskDelay+0x64>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00b      	beq.n	800c062 <vTaskDelay+0x32>
	__asm volatile
 800c04a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c04e:	f383 8811 	msr	BASEPRI, r3
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	60bb      	str	r3, [r7, #8]
}
 800c05c:	bf00      	nop
 800c05e:	bf00      	nop
 800c060:	e7fd      	b.n	800c05e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c062:	f000 f88b 	bl	800c17c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c066:	2100      	movs	r1, #0
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 fd09 	bl	800ca80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c06e:	f000 f893 	bl	800c198 <xTaskResumeAll>
 800c072:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d107      	bne.n	800c08a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c07a:	4b07      	ldr	r3, [pc, #28]	@ (800c098 <vTaskDelay+0x68>)
 800c07c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c080:	601a      	str	r2, [r3, #0]
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c08a:	bf00      	nop
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	20001114 	.word	0x20001114
 800c098:	e000ed04 	.word	0xe000ed04

0800c09c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b08a      	sub	sp, #40	@ 0x28
 800c0a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c0aa:	463a      	mov	r2, r7
 800c0ac:	1d39      	adds	r1, r7, #4
 800c0ae:	f107 0308 	add.w	r3, r7, #8
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7fe ff24 	bl	800af00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c0b8:	6839      	ldr	r1, [r7, #0]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	68ba      	ldr	r2, [r7, #8]
 800c0be:	9202      	str	r2, [sp, #8]
 800c0c0:	9301      	str	r3, [sp, #4]
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	9300      	str	r3, [sp, #0]
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	460a      	mov	r2, r1
 800c0ca:	4924      	ldr	r1, [pc, #144]	@ (800c15c <vTaskStartScheduler+0xc0>)
 800c0cc:	4824      	ldr	r0, [pc, #144]	@ (800c160 <vTaskStartScheduler+0xc4>)
 800c0ce:	f7ff fdf1 	bl	800bcb4 <xTaskCreateStatic>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	4a23      	ldr	r2, [pc, #140]	@ (800c164 <vTaskStartScheduler+0xc8>)
 800c0d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c0d8:	4b22      	ldr	r3, [pc, #136]	@ (800c164 <vTaskStartScheduler+0xc8>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d002      	beq.n	800c0e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	617b      	str	r3, [r7, #20]
 800c0e4:	e001      	b.n	800c0ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d102      	bne.n	800c0f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c0f0:	f000 fd1a 	bl	800cb28 <xTimerCreateTimerTask>
 800c0f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d11b      	bne.n	800c134 <vTaskStartScheduler+0x98>
	__asm volatile
 800c0fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c100:	f383 8811 	msr	BASEPRI, r3
 800c104:	f3bf 8f6f 	isb	sy
 800c108:	f3bf 8f4f 	dsb	sy
 800c10c:	613b      	str	r3, [r7, #16]
}
 800c10e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c110:	4b15      	ldr	r3, [pc, #84]	@ (800c168 <vTaskStartScheduler+0xcc>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	3354      	adds	r3, #84	@ 0x54
 800c116:	4a15      	ldr	r2, [pc, #84]	@ (800c16c <vTaskStartScheduler+0xd0>)
 800c118:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c11a:	4b15      	ldr	r3, [pc, #84]	@ (800c170 <vTaskStartScheduler+0xd4>)
 800c11c:	f04f 32ff 	mov.w	r2, #4294967295
 800c120:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c122:	4b14      	ldr	r3, [pc, #80]	@ (800c174 <vTaskStartScheduler+0xd8>)
 800c124:	2201      	movs	r2, #1
 800c126:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c128:	4b13      	ldr	r3, [pc, #76]	@ (800c178 <vTaskStartScheduler+0xdc>)
 800c12a:	2200      	movs	r2, #0
 800c12c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c12e:	f001 f8df 	bl	800d2f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c132:	e00f      	b.n	800c154 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c13a:	d10b      	bne.n	800c154 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c140:	f383 8811 	msr	BASEPRI, r3
 800c144:	f3bf 8f6f 	isb	sy
 800c148:	f3bf 8f4f 	dsb	sy
 800c14c:	60fb      	str	r3, [r7, #12]
}
 800c14e:	bf00      	nop
 800c150:	bf00      	nop
 800c152:	e7fd      	b.n	800c150 <vTaskStartScheduler+0xb4>
}
 800c154:	bf00      	nop
 800c156:	3718      	adds	r7, #24
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	0800dcd8 	.word	0x0800dcd8
 800c160:	0800c7ad 	.word	0x0800c7ad
 800c164:	20001110 	.word	0x20001110
 800c168:	20000c18 	.word	0x20000c18
 800c16c:	20000010 	.word	0x20000010
 800c170:	2000110c 	.word	0x2000110c
 800c174:	200010f8 	.word	0x200010f8
 800c178:	200010f0 	.word	0x200010f0

0800c17c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c17c:	b480      	push	{r7}
 800c17e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c180:	4b04      	ldr	r3, [pc, #16]	@ (800c194 <vTaskSuspendAll+0x18>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	3301      	adds	r3, #1
 800c186:	4a03      	ldr	r2, [pc, #12]	@ (800c194 <vTaskSuspendAll+0x18>)
 800c188:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c18a:	bf00      	nop
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr
 800c194:	20001114 	.word	0x20001114

0800c198 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c1a6:	4b42      	ldr	r3, [pc, #264]	@ (800c2b0 <xTaskResumeAll+0x118>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d10b      	bne.n	800c1c6 <xTaskResumeAll+0x2e>
	__asm volatile
 800c1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b2:	f383 8811 	msr	BASEPRI, r3
 800c1b6:	f3bf 8f6f 	isb	sy
 800c1ba:	f3bf 8f4f 	dsb	sy
 800c1be:	603b      	str	r3, [r7, #0]
}
 800c1c0:	bf00      	nop
 800c1c2:	bf00      	nop
 800c1c4:	e7fd      	b.n	800c1c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c1c6:	f001 f937 	bl	800d438 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c1ca:	4b39      	ldr	r3, [pc, #228]	@ (800c2b0 <xTaskResumeAll+0x118>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	4a37      	ldr	r2, [pc, #220]	@ (800c2b0 <xTaskResumeAll+0x118>)
 800c1d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1d4:	4b36      	ldr	r3, [pc, #216]	@ (800c2b0 <xTaskResumeAll+0x118>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d162      	bne.n	800c2a2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c1dc:	4b35      	ldr	r3, [pc, #212]	@ (800c2b4 <xTaskResumeAll+0x11c>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d05e      	beq.n	800c2a2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c1e4:	e02f      	b.n	800c246 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1e6:	4b34      	ldr	r3, [pc, #208]	@ (800c2b8 <xTaskResumeAll+0x120>)
 800c1e8:	68db      	ldr	r3, [r3, #12]
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	3318      	adds	r3, #24
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fe ff42 	bl	800b07c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7fe ff3d 	bl	800b07c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c206:	4b2d      	ldr	r3, [pc, #180]	@ (800c2bc <xTaskResumeAll+0x124>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d903      	bls.n	800c216 <xTaskResumeAll+0x7e>
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c212:	4a2a      	ldr	r2, [pc, #168]	@ (800c2bc <xTaskResumeAll+0x124>)
 800c214:	6013      	str	r3, [r2, #0]
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c21a:	4613      	mov	r3, r2
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	4413      	add	r3, r2
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	4a27      	ldr	r2, [pc, #156]	@ (800c2c0 <xTaskResumeAll+0x128>)
 800c224:	441a      	add	r2, r3
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	3304      	adds	r3, #4
 800c22a:	4619      	mov	r1, r3
 800c22c:	4610      	mov	r0, r2
 800c22e:	f7fe fec8 	bl	800afc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c236:	4b23      	ldr	r3, [pc, #140]	@ (800c2c4 <xTaskResumeAll+0x12c>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d302      	bcc.n	800c246 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c240:	4b21      	ldr	r3, [pc, #132]	@ (800c2c8 <xTaskResumeAll+0x130>)
 800c242:	2201      	movs	r2, #1
 800c244:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c246:	4b1c      	ldr	r3, [pc, #112]	@ (800c2b8 <xTaskResumeAll+0x120>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d1cb      	bne.n	800c1e6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d001      	beq.n	800c258 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c254:	f000 fb66 	bl	800c924 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c258:	4b1c      	ldr	r3, [pc, #112]	@ (800c2cc <xTaskResumeAll+0x134>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d010      	beq.n	800c286 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c264:	f000 f846 	bl	800c2f4 <xTaskIncrementTick>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d002      	beq.n	800c274 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c26e:	4b16      	ldr	r3, [pc, #88]	@ (800c2c8 <xTaskResumeAll+0x130>)
 800c270:	2201      	movs	r2, #1
 800c272:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	3b01      	subs	r3, #1
 800c278:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d1f1      	bne.n	800c264 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c280:	4b12      	ldr	r3, [pc, #72]	@ (800c2cc <xTaskResumeAll+0x134>)
 800c282:	2200      	movs	r2, #0
 800c284:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c286:	4b10      	ldr	r3, [pc, #64]	@ (800c2c8 <xTaskResumeAll+0x130>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d009      	beq.n	800c2a2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c28e:	2301      	movs	r3, #1
 800c290:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c292:	4b0f      	ldr	r3, [pc, #60]	@ (800c2d0 <xTaskResumeAll+0x138>)
 800c294:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c298:	601a      	str	r2, [r3, #0]
 800c29a:	f3bf 8f4f 	dsb	sy
 800c29e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2a2:	f001 f8fb 	bl	800d49c <vPortExitCritical>

	return xAlreadyYielded;
 800c2a6:	68bb      	ldr	r3, [r7, #8]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3710      	adds	r7, #16
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	20001114 	.word	0x20001114
 800c2b4:	200010ec 	.word	0x200010ec
 800c2b8:	200010ac 	.word	0x200010ac
 800c2bc:	200010f4 	.word	0x200010f4
 800c2c0:	20000c1c 	.word	0x20000c1c
 800c2c4:	20000c18 	.word	0x20000c18
 800c2c8:	20001100 	.word	0x20001100
 800c2cc:	200010fc 	.word	0x200010fc
 800c2d0:	e000ed04 	.word	0xe000ed04

0800c2d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b083      	sub	sp, #12
 800c2d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c2da:	4b05      	ldr	r3, [pc, #20]	@ (800c2f0 <xTaskGetTickCount+0x1c>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c2e0:	687b      	ldr	r3, [r7, #4]
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr
 800c2ee:	bf00      	nop
 800c2f0:	200010f0 	.word	0x200010f0

0800c2f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b086      	sub	sp, #24
 800c2f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2fe:	4b4f      	ldr	r3, [pc, #316]	@ (800c43c <xTaskIncrementTick+0x148>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	f040 8090 	bne.w	800c428 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c308:	4b4d      	ldr	r3, [pc, #308]	@ (800c440 <xTaskIncrementTick+0x14c>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	3301      	adds	r3, #1
 800c30e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c310:	4a4b      	ldr	r2, [pc, #300]	@ (800c440 <xTaskIncrementTick+0x14c>)
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d121      	bne.n	800c360 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c31c:	4b49      	ldr	r3, [pc, #292]	@ (800c444 <xTaskIncrementTick+0x150>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d00b      	beq.n	800c33e <xTaskIncrementTick+0x4a>
	__asm volatile
 800c326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c32a:	f383 8811 	msr	BASEPRI, r3
 800c32e:	f3bf 8f6f 	isb	sy
 800c332:	f3bf 8f4f 	dsb	sy
 800c336:	603b      	str	r3, [r7, #0]
}
 800c338:	bf00      	nop
 800c33a:	bf00      	nop
 800c33c:	e7fd      	b.n	800c33a <xTaskIncrementTick+0x46>
 800c33e:	4b41      	ldr	r3, [pc, #260]	@ (800c444 <xTaskIncrementTick+0x150>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	60fb      	str	r3, [r7, #12]
 800c344:	4b40      	ldr	r3, [pc, #256]	@ (800c448 <xTaskIncrementTick+0x154>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a3e      	ldr	r2, [pc, #248]	@ (800c444 <xTaskIncrementTick+0x150>)
 800c34a:	6013      	str	r3, [r2, #0]
 800c34c:	4a3e      	ldr	r2, [pc, #248]	@ (800c448 <xTaskIncrementTick+0x154>)
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6013      	str	r3, [r2, #0]
 800c352:	4b3e      	ldr	r3, [pc, #248]	@ (800c44c <xTaskIncrementTick+0x158>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	3301      	adds	r3, #1
 800c358:	4a3c      	ldr	r2, [pc, #240]	@ (800c44c <xTaskIncrementTick+0x158>)
 800c35a:	6013      	str	r3, [r2, #0]
 800c35c:	f000 fae2 	bl	800c924 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c360:	4b3b      	ldr	r3, [pc, #236]	@ (800c450 <xTaskIncrementTick+0x15c>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	693a      	ldr	r2, [r7, #16]
 800c366:	429a      	cmp	r2, r3
 800c368:	d349      	bcc.n	800c3fe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c36a:	4b36      	ldr	r3, [pc, #216]	@ (800c444 <xTaskIncrementTick+0x150>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d104      	bne.n	800c37e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c374:	4b36      	ldr	r3, [pc, #216]	@ (800c450 <xTaskIncrementTick+0x15c>)
 800c376:	f04f 32ff 	mov.w	r2, #4294967295
 800c37a:	601a      	str	r2, [r3, #0]
					break;
 800c37c:	e03f      	b.n	800c3fe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c37e:	4b31      	ldr	r3, [pc, #196]	@ (800c444 <xTaskIncrementTick+0x150>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	68db      	ldr	r3, [r3, #12]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c38e:	693a      	ldr	r2, [r7, #16]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	429a      	cmp	r2, r3
 800c394:	d203      	bcs.n	800c39e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c396:	4a2e      	ldr	r2, [pc, #184]	@ (800c450 <xTaskIncrementTick+0x15c>)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c39c:	e02f      	b.n	800c3fe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	3304      	adds	r3, #4
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7fe fe6a 	bl	800b07c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d004      	beq.n	800c3ba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	3318      	adds	r3, #24
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7fe fe61 	bl	800b07c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3be:	4b25      	ldr	r3, [pc, #148]	@ (800c454 <xTaskIncrementTick+0x160>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d903      	bls.n	800c3ce <xTaskIncrementTick+0xda>
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ca:	4a22      	ldr	r2, [pc, #136]	@ (800c454 <xTaskIncrementTick+0x160>)
 800c3cc:	6013      	str	r3, [r2, #0]
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	4413      	add	r3, r2
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	4a1f      	ldr	r2, [pc, #124]	@ (800c458 <xTaskIncrementTick+0x164>)
 800c3dc:	441a      	add	r2, r3
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	3304      	adds	r3, #4
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	4610      	mov	r0, r2
 800c3e6:	f7fe fdec 	bl	800afc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3ee:	4b1b      	ldr	r3, [pc, #108]	@ (800c45c <xTaskIncrementTick+0x168>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d3b8      	bcc.n	800c36a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3fc:	e7b5      	b.n	800c36a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c3fe:	4b17      	ldr	r3, [pc, #92]	@ (800c45c <xTaskIncrementTick+0x168>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c404:	4914      	ldr	r1, [pc, #80]	@ (800c458 <xTaskIncrementTick+0x164>)
 800c406:	4613      	mov	r3, r2
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	4413      	add	r3, r2
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	440b      	add	r3, r1
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2b01      	cmp	r3, #1
 800c414:	d901      	bls.n	800c41a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c416:	2301      	movs	r3, #1
 800c418:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c41a:	4b11      	ldr	r3, [pc, #68]	@ (800c460 <xTaskIncrementTick+0x16c>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d007      	beq.n	800c432 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c422:	2301      	movs	r3, #1
 800c424:	617b      	str	r3, [r7, #20]
 800c426:	e004      	b.n	800c432 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c428:	4b0e      	ldr	r3, [pc, #56]	@ (800c464 <xTaskIncrementTick+0x170>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	3301      	adds	r3, #1
 800c42e:	4a0d      	ldr	r2, [pc, #52]	@ (800c464 <xTaskIncrementTick+0x170>)
 800c430:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c432:	697b      	ldr	r3, [r7, #20]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3718      	adds	r7, #24
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	20001114 	.word	0x20001114
 800c440:	200010f0 	.word	0x200010f0
 800c444:	200010a4 	.word	0x200010a4
 800c448:	200010a8 	.word	0x200010a8
 800c44c:	20001104 	.word	0x20001104
 800c450:	2000110c 	.word	0x2000110c
 800c454:	200010f4 	.word	0x200010f4
 800c458:	20000c1c 	.word	0x20000c1c
 800c45c:	20000c18 	.word	0x20000c18
 800c460:	20001100 	.word	0x20001100
 800c464:	200010fc 	.word	0x200010fc

0800c468 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c46e:	4b2b      	ldr	r3, [pc, #172]	@ (800c51c <vTaskSwitchContext+0xb4>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d003      	beq.n	800c47e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c476:	4b2a      	ldr	r3, [pc, #168]	@ (800c520 <vTaskSwitchContext+0xb8>)
 800c478:	2201      	movs	r2, #1
 800c47a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c47c:	e047      	b.n	800c50e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c47e:	4b28      	ldr	r3, [pc, #160]	@ (800c520 <vTaskSwitchContext+0xb8>)
 800c480:	2200      	movs	r2, #0
 800c482:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c484:	4b27      	ldr	r3, [pc, #156]	@ (800c524 <vTaskSwitchContext+0xbc>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	60fb      	str	r3, [r7, #12]
 800c48a:	e011      	b.n	800c4b0 <vTaskSwitchContext+0x48>
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d10b      	bne.n	800c4aa <vTaskSwitchContext+0x42>
	__asm volatile
 800c492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	607b      	str	r3, [r7, #4]
}
 800c4a4:	bf00      	nop
 800c4a6:	bf00      	nop
 800c4a8:	e7fd      	b.n	800c4a6 <vTaskSwitchContext+0x3e>
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	3b01      	subs	r3, #1
 800c4ae:	60fb      	str	r3, [r7, #12]
 800c4b0:	491d      	ldr	r1, [pc, #116]	@ (800c528 <vTaskSwitchContext+0xc0>)
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4413      	add	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	440b      	add	r3, r1
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d0e3      	beq.n	800c48c <vTaskSwitchContext+0x24>
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	4613      	mov	r3, r2
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	4413      	add	r3, r2
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	4a16      	ldr	r2, [pc, #88]	@ (800c528 <vTaskSwitchContext+0xc0>)
 800c4d0:	4413      	add	r3, r2
 800c4d2:	60bb      	str	r3, [r7, #8]
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	685a      	ldr	r2, [r3, #4]
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	605a      	str	r2, [r3, #4]
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	685a      	ldr	r2, [r3, #4]
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	3308      	adds	r3, #8
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d104      	bne.n	800c4f4 <vTaskSwitchContext+0x8c>
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	685a      	ldr	r2, [r3, #4]
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	605a      	str	r2, [r3, #4]
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	4a0c      	ldr	r2, [pc, #48]	@ (800c52c <vTaskSwitchContext+0xc4>)
 800c4fc:	6013      	str	r3, [r2, #0]
 800c4fe:	4a09      	ldr	r2, [pc, #36]	@ (800c524 <vTaskSwitchContext+0xbc>)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c504:	4b09      	ldr	r3, [pc, #36]	@ (800c52c <vTaskSwitchContext+0xc4>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	3354      	adds	r3, #84	@ 0x54
 800c50a:	4a09      	ldr	r2, [pc, #36]	@ (800c530 <vTaskSwitchContext+0xc8>)
 800c50c:	6013      	str	r3, [r2, #0]
}
 800c50e:	bf00      	nop
 800c510:	3714      	adds	r7, #20
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	20001114 	.word	0x20001114
 800c520:	20001100 	.word	0x20001100
 800c524:	200010f4 	.word	0x200010f4
 800c528:	20000c1c 	.word	0x20000c1c
 800c52c:	20000c18 	.word	0x20000c18
 800c530:	20000010 	.word	0x20000010

0800c534 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d10b      	bne.n	800c55c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c548:	f383 8811 	msr	BASEPRI, r3
 800c54c:	f3bf 8f6f 	isb	sy
 800c550:	f3bf 8f4f 	dsb	sy
 800c554:	60fb      	str	r3, [r7, #12]
}
 800c556:	bf00      	nop
 800c558:	bf00      	nop
 800c55a:	e7fd      	b.n	800c558 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c55c:	4b07      	ldr	r3, [pc, #28]	@ (800c57c <vTaskPlaceOnEventList+0x48>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	3318      	adds	r3, #24
 800c562:	4619      	mov	r1, r3
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f7fe fd50 	bl	800b00a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c56a:	2101      	movs	r1, #1
 800c56c:	6838      	ldr	r0, [r7, #0]
 800c56e:	f000 fa87 	bl	800ca80 <prvAddCurrentTaskToDelayedList>
}
 800c572:	bf00      	nop
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	20000c18 	.word	0x20000c18

0800c580 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c580:	b580      	push	{r7, lr}
 800c582:	b086      	sub	sp, #24
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d10b      	bne.n	800c5aa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c596:	f383 8811 	msr	BASEPRI, r3
 800c59a:	f3bf 8f6f 	isb	sy
 800c59e:	f3bf 8f4f 	dsb	sy
 800c5a2:	617b      	str	r3, [r7, #20]
}
 800c5a4:	bf00      	nop
 800c5a6:	bf00      	nop
 800c5a8:	e7fd      	b.n	800c5a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c5aa:	4b0a      	ldr	r3, [pc, #40]	@ (800c5d4 <vTaskPlaceOnEventListRestricted+0x54>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	3318      	adds	r3, #24
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	68f8      	ldr	r0, [r7, #12]
 800c5b4:	f7fe fd05 	bl	800afc2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d002      	beq.n	800c5c4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c5be:	f04f 33ff 	mov.w	r3, #4294967295
 800c5c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c5c4:	6879      	ldr	r1, [r7, #4]
 800c5c6:	68b8      	ldr	r0, [r7, #8]
 800c5c8:	f000 fa5a 	bl	800ca80 <prvAddCurrentTaskToDelayedList>
	}
 800c5cc:	bf00      	nop
 800c5ce:	3718      	adds	r7, #24
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	20000c18 	.word	0x20000c18

0800c5d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b086      	sub	sp, #24
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	68db      	ldr	r3, [r3, #12]
 800c5e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d10b      	bne.n	800c606 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5f2:	f383 8811 	msr	BASEPRI, r3
 800c5f6:	f3bf 8f6f 	isb	sy
 800c5fa:	f3bf 8f4f 	dsb	sy
 800c5fe:	60fb      	str	r3, [r7, #12]
}
 800c600:	bf00      	nop
 800c602:	bf00      	nop
 800c604:	e7fd      	b.n	800c602 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	3318      	adds	r3, #24
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7fe fd36 	bl	800b07c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c610:	4b1d      	ldr	r3, [pc, #116]	@ (800c688 <xTaskRemoveFromEventList+0xb0>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d11d      	bne.n	800c654 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	3304      	adds	r3, #4
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7fe fd2d 	bl	800b07c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c626:	4b19      	ldr	r3, [pc, #100]	@ (800c68c <xTaskRemoveFromEventList+0xb4>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d903      	bls.n	800c636 <xTaskRemoveFromEventList+0x5e>
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c632:	4a16      	ldr	r2, [pc, #88]	@ (800c68c <xTaskRemoveFromEventList+0xb4>)
 800c634:	6013      	str	r3, [r2, #0]
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c63a:	4613      	mov	r3, r2
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	4413      	add	r3, r2
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	4a13      	ldr	r2, [pc, #76]	@ (800c690 <xTaskRemoveFromEventList+0xb8>)
 800c644:	441a      	add	r2, r3
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	3304      	adds	r3, #4
 800c64a:	4619      	mov	r1, r3
 800c64c:	4610      	mov	r0, r2
 800c64e:	f7fe fcb8 	bl	800afc2 <vListInsertEnd>
 800c652:	e005      	b.n	800c660 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	3318      	adds	r3, #24
 800c658:	4619      	mov	r1, r3
 800c65a:	480e      	ldr	r0, [pc, #56]	@ (800c694 <xTaskRemoveFromEventList+0xbc>)
 800c65c:	f7fe fcb1 	bl	800afc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c664:	4b0c      	ldr	r3, [pc, #48]	@ (800c698 <xTaskRemoveFromEventList+0xc0>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d905      	bls.n	800c67a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c66e:	2301      	movs	r3, #1
 800c670:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c672:	4b0a      	ldr	r3, [pc, #40]	@ (800c69c <xTaskRemoveFromEventList+0xc4>)
 800c674:	2201      	movs	r2, #1
 800c676:	601a      	str	r2, [r3, #0]
 800c678:	e001      	b.n	800c67e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c67a:	2300      	movs	r3, #0
 800c67c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c67e:	697b      	ldr	r3, [r7, #20]
}
 800c680:	4618      	mov	r0, r3
 800c682:	3718      	adds	r7, #24
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	20001114 	.word	0x20001114
 800c68c:	200010f4 	.word	0x200010f4
 800c690:	20000c1c 	.word	0x20000c1c
 800c694:	200010ac 	.word	0x200010ac
 800c698:	20000c18 	.word	0x20000c18
 800c69c:	20001100 	.word	0x20001100

0800c6a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b083      	sub	sp, #12
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c6a8:	4b06      	ldr	r3, [pc, #24]	@ (800c6c4 <vTaskInternalSetTimeOutState+0x24>)
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c6b0:	4b05      	ldr	r3, [pc, #20]	@ (800c6c8 <vTaskInternalSetTimeOutState+0x28>)
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	605a      	str	r2, [r3, #4]
}
 800c6b8:	bf00      	nop
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr
 800c6c4:	20001104 	.word	0x20001104
 800c6c8:	200010f0 	.word	0x200010f0

0800c6cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b088      	sub	sp, #32
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d10b      	bne.n	800c6f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e0:	f383 8811 	msr	BASEPRI, r3
 800c6e4:	f3bf 8f6f 	isb	sy
 800c6e8:	f3bf 8f4f 	dsb	sy
 800c6ec:	613b      	str	r3, [r7, #16]
}
 800c6ee:	bf00      	nop
 800c6f0:	bf00      	nop
 800c6f2:	e7fd      	b.n	800c6f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d10b      	bne.n	800c712 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6fe:	f383 8811 	msr	BASEPRI, r3
 800c702:	f3bf 8f6f 	isb	sy
 800c706:	f3bf 8f4f 	dsb	sy
 800c70a:	60fb      	str	r3, [r7, #12]
}
 800c70c:	bf00      	nop
 800c70e:	bf00      	nop
 800c710:	e7fd      	b.n	800c70e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c712:	f000 fe91 	bl	800d438 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c716:	4b1d      	ldr	r3, [pc, #116]	@ (800c78c <xTaskCheckForTimeOut+0xc0>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	69ba      	ldr	r2, [r7, #24]
 800c722:	1ad3      	subs	r3, r2, r3
 800c724:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c72e:	d102      	bne.n	800c736 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c730:	2300      	movs	r3, #0
 800c732:	61fb      	str	r3, [r7, #28]
 800c734:	e023      	b.n	800c77e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	4b15      	ldr	r3, [pc, #84]	@ (800c790 <xTaskCheckForTimeOut+0xc4>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d007      	beq.n	800c752 <xTaskCheckForTimeOut+0x86>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	69ba      	ldr	r2, [r7, #24]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d302      	bcc.n	800c752 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c74c:	2301      	movs	r3, #1
 800c74e:	61fb      	str	r3, [r7, #28]
 800c750:	e015      	b.n	800c77e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	697a      	ldr	r2, [r7, #20]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d20b      	bcs.n	800c774 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	1ad2      	subs	r2, r2, r3
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f7ff ff99 	bl	800c6a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c76e:	2300      	movs	r3, #0
 800c770:	61fb      	str	r3, [r7, #28]
 800c772:	e004      	b.n	800c77e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	2200      	movs	r2, #0
 800c778:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c77a:	2301      	movs	r3, #1
 800c77c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c77e:	f000 fe8d 	bl	800d49c <vPortExitCritical>

	return xReturn;
 800c782:	69fb      	ldr	r3, [r7, #28]
}
 800c784:	4618      	mov	r0, r3
 800c786:	3720      	adds	r7, #32
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	200010f0 	.word	0x200010f0
 800c790:	20001104 	.word	0x20001104

0800c794 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c794:	b480      	push	{r7}
 800c796:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c798:	4b03      	ldr	r3, [pc, #12]	@ (800c7a8 <vTaskMissedYield+0x14>)
 800c79a:	2201      	movs	r2, #1
 800c79c:	601a      	str	r2, [r3, #0]
}
 800c79e:	bf00      	nop
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr
 800c7a8:	20001100 	.word	0x20001100

0800c7ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c7b4:	f000 f852 	bl	800c85c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c7b8:	4b06      	ldr	r3, [pc, #24]	@ (800c7d4 <prvIdleTask+0x28>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d9f9      	bls.n	800c7b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c7c0:	4b05      	ldr	r3, [pc, #20]	@ (800c7d8 <prvIdleTask+0x2c>)
 800c7c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7c6:	601a      	str	r2, [r3, #0]
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c7d0:	e7f0      	b.n	800c7b4 <prvIdleTask+0x8>
 800c7d2:	bf00      	nop
 800c7d4:	20000c1c 	.word	0x20000c1c
 800c7d8:	e000ed04 	.word	0xe000ed04

0800c7dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b082      	sub	sp, #8
 800c7e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	607b      	str	r3, [r7, #4]
 800c7e6:	e00c      	b.n	800c802 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	4613      	mov	r3, r2
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	4413      	add	r3, r2
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	4a12      	ldr	r2, [pc, #72]	@ (800c83c <prvInitialiseTaskLists+0x60>)
 800c7f4:	4413      	add	r3, r2
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7fe fbb6 	bl	800af68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	3301      	adds	r3, #1
 800c800:	607b      	str	r3, [r7, #4]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2b37      	cmp	r3, #55	@ 0x37
 800c806:	d9ef      	bls.n	800c7e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c808:	480d      	ldr	r0, [pc, #52]	@ (800c840 <prvInitialiseTaskLists+0x64>)
 800c80a:	f7fe fbad 	bl	800af68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c80e:	480d      	ldr	r0, [pc, #52]	@ (800c844 <prvInitialiseTaskLists+0x68>)
 800c810:	f7fe fbaa 	bl	800af68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c814:	480c      	ldr	r0, [pc, #48]	@ (800c848 <prvInitialiseTaskLists+0x6c>)
 800c816:	f7fe fba7 	bl	800af68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c81a:	480c      	ldr	r0, [pc, #48]	@ (800c84c <prvInitialiseTaskLists+0x70>)
 800c81c:	f7fe fba4 	bl	800af68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c820:	480b      	ldr	r0, [pc, #44]	@ (800c850 <prvInitialiseTaskLists+0x74>)
 800c822:	f7fe fba1 	bl	800af68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c826:	4b0b      	ldr	r3, [pc, #44]	@ (800c854 <prvInitialiseTaskLists+0x78>)
 800c828:	4a05      	ldr	r2, [pc, #20]	@ (800c840 <prvInitialiseTaskLists+0x64>)
 800c82a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c82c:	4b0a      	ldr	r3, [pc, #40]	@ (800c858 <prvInitialiseTaskLists+0x7c>)
 800c82e:	4a05      	ldr	r2, [pc, #20]	@ (800c844 <prvInitialiseTaskLists+0x68>)
 800c830:	601a      	str	r2, [r3, #0]
}
 800c832:	bf00      	nop
 800c834:	3708      	adds	r7, #8
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	20000c1c 	.word	0x20000c1c
 800c840:	2000107c 	.word	0x2000107c
 800c844:	20001090 	.word	0x20001090
 800c848:	200010ac 	.word	0x200010ac
 800c84c:	200010c0 	.word	0x200010c0
 800c850:	200010d8 	.word	0x200010d8
 800c854:	200010a4 	.word	0x200010a4
 800c858:	200010a8 	.word	0x200010a8

0800c85c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c862:	e019      	b.n	800c898 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c864:	f000 fde8 	bl	800d438 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c868:	4b10      	ldr	r3, [pc, #64]	@ (800c8ac <prvCheckTasksWaitingTermination+0x50>)
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	68db      	ldr	r3, [r3, #12]
 800c86e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	3304      	adds	r3, #4
 800c874:	4618      	mov	r0, r3
 800c876:	f7fe fc01 	bl	800b07c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c87a:	4b0d      	ldr	r3, [pc, #52]	@ (800c8b0 <prvCheckTasksWaitingTermination+0x54>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	3b01      	subs	r3, #1
 800c880:	4a0b      	ldr	r2, [pc, #44]	@ (800c8b0 <prvCheckTasksWaitingTermination+0x54>)
 800c882:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c884:	4b0b      	ldr	r3, [pc, #44]	@ (800c8b4 <prvCheckTasksWaitingTermination+0x58>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	3b01      	subs	r3, #1
 800c88a:	4a0a      	ldr	r2, [pc, #40]	@ (800c8b4 <prvCheckTasksWaitingTermination+0x58>)
 800c88c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c88e:	f000 fe05 	bl	800d49c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 f810 	bl	800c8b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c898:	4b06      	ldr	r3, [pc, #24]	@ (800c8b4 <prvCheckTasksWaitingTermination+0x58>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d1e1      	bne.n	800c864 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c8a0:	bf00      	nop
 800c8a2:	bf00      	nop
 800c8a4:	3708      	adds	r7, #8
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	200010c0 	.word	0x200010c0
 800c8b0:	200010ec 	.word	0x200010ec
 800c8b4:	200010d4 	.word	0x200010d4

0800c8b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b084      	sub	sp, #16
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	3354      	adds	r3, #84	@ 0x54
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f001 f8e7 	bl	800da98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d108      	bne.n	800c8e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f000 ff9d 	bl	800d818 <vPortFree>
				vPortFree( pxTCB );
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 ff9a 	bl	800d818 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c8e4:	e019      	b.n	800c91a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d103      	bne.n	800c8f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 ff91 	bl	800d818 <vPortFree>
	}
 800c8f6:	e010      	b.n	800c91a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c8fe:	2b02      	cmp	r3, #2
 800c900:	d00b      	beq.n	800c91a <prvDeleteTCB+0x62>
	__asm volatile
 800c902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c906:	f383 8811 	msr	BASEPRI, r3
 800c90a:	f3bf 8f6f 	isb	sy
 800c90e:	f3bf 8f4f 	dsb	sy
 800c912:	60fb      	str	r3, [r7, #12]
}
 800c914:	bf00      	nop
 800c916:	bf00      	nop
 800c918:	e7fd      	b.n	800c916 <prvDeleteTCB+0x5e>
	}
 800c91a:	bf00      	nop
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
	...

0800c924 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c92a:	4b0c      	ldr	r3, [pc, #48]	@ (800c95c <prvResetNextTaskUnblockTime+0x38>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d104      	bne.n	800c93e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c934:	4b0a      	ldr	r3, [pc, #40]	@ (800c960 <prvResetNextTaskUnblockTime+0x3c>)
 800c936:	f04f 32ff 	mov.w	r2, #4294967295
 800c93a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c93c:	e008      	b.n	800c950 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c93e:	4b07      	ldr	r3, [pc, #28]	@ (800c95c <prvResetNextTaskUnblockTime+0x38>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	68db      	ldr	r3, [r3, #12]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	4a04      	ldr	r2, [pc, #16]	@ (800c960 <prvResetNextTaskUnblockTime+0x3c>)
 800c94e:	6013      	str	r3, [r2, #0]
}
 800c950:	bf00      	nop
 800c952:	370c      	adds	r7, #12
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr
 800c95c:	200010a4 	.word	0x200010a4
 800c960:	2000110c 	.word	0x2000110c

0800c964 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c96a:	4b0b      	ldr	r3, [pc, #44]	@ (800c998 <xTaskGetSchedulerState+0x34>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d102      	bne.n	800c978 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c972:	2301      	movs	r3, #1
 800c974:	607b      	str	r3, [r7, #4]
 800c976:	e008      	b.n	800c98a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c978:	4b08      	ldr	r3, [pc, #32]	@ (800c99c <xTaskGetSchedulerState+0x38>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d102      	bne.n	800c986 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c980:	2302      	movs	r3, #2
 800c982:	607b      	str	r3, [r7, #4]
 800c984:	e001      	b.n	800c98a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c986:	2300      	movs	r3, #0
 800c988:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c98a:	687b      	ldr	r3, [r7, #4]
	}
 800c98c:	4618      	mov	r0, r3
 800c98e:	370c      	adds	r7, #12
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr
 800c998:	200010f8 	.word	0x200010f8
 800c99c:	20001114 	.word	0x20001114

0800c9a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b086      	sub	sp, #24
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d058      	beq.n	800ca68 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c9b6:	4b2f      	ldr	r3, [pc, #188]	@ (800ca74 <xTaskPriorityDisinherit+0xd4>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	693a      	ldr	r2, [r7, #16]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d00b      	beq.n	800c9d8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c9c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9c4:	f383 8811 	msr	BASEPRI, r3
 800c9c8:	f3bf 8f6f 	isb	sy
 800c9cc:	f3bf 8f4f 	dsb	sy
 800c9d0:	60fb      	str	r3, [r7, #12]
}
 800c9d2:	bf00      	nop
 800c9d4:	bf00      	nop
 800c9d6:	e7fd      	b.n	800c9d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d10b      	bne.n	800c9f8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9e4:	f383 8811 	msr	BASEPRI, r3
 800c9e8:	f3bf 8f6f 	isb	sy
 800c9ec:	f3bf 8f4f 	dsb	sy
 800c9f0:	60bb      	str	r3, [r7, #8]
}
 800c9f2:	bf00      	nop
 800c9f4:	bf00      	nop
 800c9f6:	e7fd      	b.n	800c9f4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9fc:	1e5a      	subs	r2, r3, #1
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d02c      	beq.n	800ca68 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d128      	bne.n	800ca68 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	3304      	adds	r3, #4
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7fe fb2e 	bl	800b07c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca2c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca38:	4b0f      	ldr	r3, [pc, #60]	@ (800ca78 <xTaskPriorityDisinherit+0xd8>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d903      	bls.n	800ca48 <xTaskPriorityDisinherit+0xa8>
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca44:	4a0c      	ldr	r2, [pc, #48]	@ (800ca78 <xTaskPriorityDisinherit+0xd8>)
 800ca46:	6013      	str	r3, [r2, #0]
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca4c:	4613      	mov	r3, r2
 800ca4e:	009b      	lsls	r3, r3, #2
 800ca50:	4413      	add	r3, r2
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	4a09      	ldr	r2, [pc, #36]	@ (800ca7c <xTaskPriorityDisinherit+0xdc>)
 800ca56:	441a      	add	r2, r3
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	3304      	adds	r3, #4
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	4610      	mov	r0, r2
 800ca60:	f7fe faaf 	bl	800afc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ca64:	2301      	movs	r3, #1
 800ca66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ca68:	697b      	ldr	r3, [r7, #20]
	}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3718      	adds	r7, #24
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}
 800ca72:	bf00      	nop
 800ca74:	20000c18 	.word	0x20000c18
 800ca78:	200010f4 	.word	0x200010f4
 800ca7c:	20000c1c 	.word	0x20000c1c

0800ca80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ca8a:	4b21      	ldr	r3, [pc, #132]	@ (800cb10 <prvAddCurrentTaskToDelayedList+0x90>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca90:	4b20      	ldr	r3, [pc, #128]	@ (800cb14 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	3304      	adds	r3, #4
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7fe faf0 	bl	800b07c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa2:	d10a      	bne.n	800caba <prvAddCurrentTaskToDelayedList+0x3a>
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d007      	beq.n	800caba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800caaa:	4b1a      	ldr	r3, [pc, #104]	@ (800cb14 <prvAddCurrentTaskToDelayedList+0x94>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	3304      	adds	r3, #4
 800cab0:	4619      	mov	r1, r3
 800cab2:	4819      	ldr	r0, [pc, #100]	@ (800cb18 <prvAddCurrentTaskToDelayedList+0x98>)
 800cab4:	f7fe fa85 	bl	800afc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cab8:	e026      	b.n	800cb08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800caba:	68fa      	ldr	r2, [r7, #12]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4413      	add	r3, r2
 800cac0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cac2:	4b14      	ldr	r3, [pc, #80]	@ (800cb14 <prvAddCurrentTaskToDelayedList+0x94>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	68ba      	ldr	r2, [r7, #8]
 800cac8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800caca:	68ba      	ldr	r2, [r7, #8]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	429a      	cmp	r2, r3
 800cad0:	d209      	bcs.n	800cae6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cad2:	4b12      	ldr	r3, [pc, #72]	@ (800cb1c <prvAddCurrentTaskToDelayedList+0x9c>)
 800cad4:	681a      	ldr	r2, [r3, #0]
 800cad6:	4b0f      	ldr	r3, [pc, #60]	@ (800cb14 <prvAddCurrentTaskToDelayedList+0x94>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	3304      	adds	r3, #4
 800cadc:	4619      	mov	r1, r3
 800cade:	4610      	mov	r0, r2
 800cae0:	f7fe fa93 	bl	800b00a <vListInsert>
}
 800cae4:	e010      	b.n	800cb08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cae6:	4b0e      	ldr	r3, [pc, #56]	@ (800cb20 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cae8:	681a      	ldr	r2, [r3, #0]
 800caea:	4b0a      	ldr	r3, [pc, #40]	@ (800cb14 <prvAddCurrentTaskToDelayedList+0x94>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	3304      	adds	r3, #4
 800caf0:	4619      	mov	r1, r3
 800caf2:	4610      	mov	r0, r2
 800caf4:	f7fe fa89 	bl	800b00a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800caf8:	4b0a      	ldr	r3, [pc, #40]	@ (800cb24 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	68ba      	ldr	r2, [r7, #8]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d202      	bcs.n	800cb08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cb02:	4a08      	ldr	r2, [pc, #32]	@ (800cb24 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	6013      	str	r3, [r2, #0]
}
 800cb08:	bf00      	nop
 800cb0a:	3710      	adds	r7, #16
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	200010f0 	.word	0x200010f0
 800cb14:	20000c18 	.word	0x20000c18
 800cb18:	200010d8 	.word	0x200010d8
 800cb1c:	200010a8 	.word	0x200010a8
 800cb20:	200010a4 	.word	0x200010a4
 800cb24:	2000110c 	.word	0x2000110c

0800cb28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b08a      	sub	sp, #40	@ 0x28
 800cb2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cb32:	f000 fb13 	bl	800d15c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cb36:	4b1d      	ldr	r3, [pc, #116]	@ (800cbac <xTimerCreateTimerTask+0x84>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d021      	beq.n	800cb82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cb42:	2300      	movs	r3, #0
 800cb44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cb46:	1d3a      	adds	r2, r7, #4
 800cb48:	f107 0108 	add.w	r1, r7, #8
 800cb4c:	f107 030c 	add.w	r3, r7, #12
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7fe f9ef 	bl	800af34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cb56:	6879      	ldr	r1, [r7, #4]
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	68fa      	ldr	r2, [r7, #12]
 800cb5c:	9202      	str	r2, [sp, #8]
 800cb5e:	9301      	str	r3, [sp, #4]
 800cb60:	2302      	movs	r3, #2
 800cb62:	9300      	str	r3, [sp, #0]
 800cb64:	2300      	movs	r3, #0
 800cb66:	460a      	mov	r2, r1
 800cb68:	4911      	ldr	r1, [pc, #68]	@ (800cbb0 <xTimerCreateTimerTask+0x88>)
 800cb6a:	4812      	ldr	r0, [pc, #72]	@ (800cbb4 <xTimerCreateTimerTask+0x8c>)
 800cb6c:	f7ff f8a2 	bl	800bcb4 <xTaskCreateStatic>
 800cb70:	4603      	mov	r3, r0
 800cb72:	4a11      	ldr	r2, [pc, #68]	@ (800cbb8 <xTimerCreateTimerTask+0x90>)
 800cb74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cb76:	4b10      	ldr	r3, [pc, #64]	@ (800cbb8 <xTimerCreateTimerTask+0x90>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d001      	beq.n	800cb82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d10b      	bne.n	800cba0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800cb88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb8c:	f383 8811 	msr	BASEPRI, r3
 800cb90:	f3bf 8f6f 	isb	sy
 800cb94:	f3bf 8f4f 	dsb	sy
 800cb98:	613b      	str	r3, [r7, #16]
}
 800cb9a:	bf00      	nop
 800cb9c:	bf00      	nop
 800cb9e:	e7fd      	b.n	800cb9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cba0:	697b      	ldr	r3, [r7, #20]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3718      	adds	r7, #24
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	20001148 	.word	0x20001148
 800cbb0:	0800dce0 	.word	0x0800dce0
 800cbb4:	0800ccf5 	.word	0x0800ccf5
 800cbb8:	2000114c 	.word	0x2000114c

0800cbbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b08a      	sub	sp, #40	@ 0x28
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
 800cbc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d10b      	bne.n	800cbec <xTimerGenericCommand+0x30>
	__asm volatile
 800cbd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbd8:	f383 8811 	msr	BASEPRI, r3
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	623b      	str	r3, [r7, #32]
}
 800cbe6:	bf00      	nop
 800cbe8:	bf00      	nop
 800cbea:	e7fd      	b.n	800cbe8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cbec:	4b19      	ldr	r3, [pc, #100]	@ (800cc54 <xTimerGenericCommand+0x98>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d02a      	beq.n	800cc4a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	2b05      	cmp	r3, #5
 800cc04:	dc18      	bgt.n	800cc38 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cc06:	f7ff fead 	bl	800c964 <xTaskGetSchedulerState>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b02      	cmp	r3, #2
 800cc0e:	d109      	bne.n	800cc24 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cc10:	4b10      	ldr	r3, [pc, #64]	@ (800cc54 <xTimerGenericCommand+0x98>)
 800cc12:	6818      	ldr	r0, [r3, #0]
 800cc14:	f107 0110 	add.w	r1, r7, #16
 800cc18:	2300      	movs	r3, #0
 800cc1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc1c:	f7fe fc0c 	bl	800b438 <xQueueGenericSend>
 800cc20:	6278      	str	r0, [r7, #36]	@ 0x24
 800cc22:	e012      	b.n	800cc4a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cc24:	4b0b      	ldr	r3, [pc, #44]	@ (800cc54 <xTimerGenericCommand+0x98>)
 800cc26:	6818      	ldr	r0, [r3, #0]
 800cc28:	f107 0110 	add.w	r1, r7, #16
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f7fe fc02 	bl	800b438 <xQueueGenericSend>
 800cc34:	6278      	str	r0, [r7, #36]	@ 0x24
 800cc36:	e008      	b.n	800cc4a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cc38:	4b06      	ldr	r3, [pc, #24]	@ (800cc54 <xTimerGenericCommand+0x98>)
 800cc3a:	6818      	ldr	r0, [r3, #0]
 800cc3c:	f107 0110 	add.w	r1, r7, #16
 800cc40:	2300      	movs	r3, #0
 800cc42:	683a      	ldr	r2, [r7, #0]
 800cc44:	f7fe fcfa 	bl	800b63c <xQueueGenericSendFromISR>
 800cc48:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3728      	adds	r7, #40	@ 0x28
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}
 800cc54:	20001148 	.word	0x20001148

0800cc58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b088      	sub	sp, #32
 800cc5c:	af02      	add	r7, sp, #8
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc62:	4b23      	ldr	r3, [pc, #140]	@ (800ccf0 <prvProcessExpiredTimer+0x98>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	68db      	ldr	r3, [r3, #12]
 800cc6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	3304      	adds	r3, #4
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7fe fa03 	bl	800b07c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc7c:	f003 0304 	and.w	r3, r3, #4
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d023      	beq.n	800cccc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	699a      	ldr	r2, [r3, #24]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	18d1      	adds	r1, r2, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	683a      	ldr	r2, [r7, #0]
 800cc90:	6978      	ldr	r0, [r7, #20]
 800cc92:	f000 f8d5 	bl	800ce40 <prvInsertTimerInActiveList>
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d020      	beq.n	800ccde <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	9300      	str	r3, [sp, #0]
 800cca0:	2300      	movs	r3, #0
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	2100      	movs	r1, #0
 800cca6:	6978      	ldr	r0, [r7, #20]
 800cca8:	f7ff ff88 	bl	800cbbc <xTimerGenericCommand>
 800ccac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d114      	bne.n	800ccde <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ccb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccb8:	f383 8811 	msr	BASEPRI, r3
 800ccbc:	f3bf 8f6f 	isb	sy
 800ccc0:	f3bf 8f4f 	dsb	sy
 800ccc4:	60fb      	str	r3, [r7, #12]
}
 800ccc6:	bf00      	nop
 800ccc8:	bf00      	nop
 800ccca:	e7fd      	b.n	800ccc8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ccd2:	f023 0301 	bic.w	r3, r3, #1
 800ccd6:	b2da      	uxtb	r2, r3
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	6a1b      	ldr	r3, [r3, #32]
 800cce2:	6978      	ldr	r0, [r7, #20]
 800cce4:	4798      	blx	r3
}
 800cce6:	bf00      	nop
 800cce8:	3718      	adds	r7, #24
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	20001140 	.word	0x20001140

0800ccf4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ccfc:	f107 0308 	add.w	r3, r7, #8
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 f859 	bl	800cdb8 <prvGetNextExpireTime>
 800cd06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	68f8      	ldr	r0, [r7, #12]
 800cd0e:	f000 f805 	bl	800cd1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cd12:	f000 f8d7 	bl	800cec4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd16:	bf00      	nop
 800cd18:	e7f0      	b.n	800ccfc <prvTimerTask+0x8>
	...

0800cd1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cd26:	f7ff fa29 	bl	800c17c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd2a:	f107 0308 	add.w	r3, r7, #8
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f000 f866 	bl	800ce00 <prvSampleTimeNow>
 800cd34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d130      	bne.n	800cd9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d10a      	bne.n	800cd58 <prvProcessTimerOrBlockTask+0x3c>
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d806      	bhi.n	800cd58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cd4a:	f7ff fa25 	bl	800c198 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cd4e:	68f9      	ldr	r1, [r7, #12]
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f7ff ff81 	bl	800cc58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cd56:	e024      	b.n	800cda2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d008      	beq.n	800cd70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cd5e:	4b13      	ldr	r3, [pc, #76]	@ (800cdac <prvProcessTimerOrBlockTask+0x90>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d101      	bne.n	800cd6c <prvProcessTimerOrBlockTask+0x50>
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e000      	b.n	800cd6e <prvProcessTimerOrBlockTask+0x52>
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cd70:	4b0f      	ldr	r3, [pc, #60]	@ (800cdb0 <prvProcessTimerOrBlockTask+0x94>)
 800cd72:	6818      	ldr	r0, [r3, #0]
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	1ad3      	subs	r3, r2, r3
 800cd7a:	683a      	ldr	r2, [r7, #0]
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	f7fe ff65 	bl	800bc4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cd82:	f7ff fa09 	bl	800c198 <xTaskResumeAll>
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d10a      	bne.n	800cda2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cd8c:	4b09      	ldr	r3, [pc, #36]	@ (800cdb4 <prvProcessTimerOrBlockTask+0x98>)
 800cd8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd92:	601a      	str	r2, [r3, #0]
 800cd94:	f3bf 8f4f 	dsb	sy
 800cd98:	f3bf 8f6f 	isb	sy
}
 800cd9c:	e001      	b.n	800cda2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cd9e:	f7ff f9fb 	bl	800c198 <xTaskResumeAll>
}
 800cda2:	bf00      	nop
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	20001144 	.word	0x20001144
 800cdb0:	20001148 	.word	0x20001148
 800cdb4:	e000ed04 	.word	0xe000ed04

0800cdb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cdc0:	4b0e      	ldr	r3, [pc, #56]	@ (800cdfc <prvGetNextExpireTime+0x44>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d101      	bne.n	800cdce <prvGetNextExpireTime+0x16>
 800cdca:	2201      	movs	r2, #1
 800cdcc:	e000      	b.n	800cdd0 <prvGetNextExpireTime+0x18>
 800cdce:	2200      	movs	r2, #0
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d105      	bne.n	800cde8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cddc:	4b07      	ldr	r3, [pc, #28]	@ (800cdfc <prvGetNextExpireTime+0x44>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	60fb      	str	r3, [r7, #12]
 800cde6:	e001      	b.n	800cdec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cde8:	2300      	movs	r3, #0
 800cdea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cdec:	68fb      	ldr	r3, [r7, #12]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3714      	adds	r7, #20
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop
 800cdfc:	20001140 	.word	0x20001140

0800ce00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ce08:	f7ff fa64 	bl	800c2d4 <xTaskGetTickCount>
 800ce0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ce0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ce3c <prvSampleTimeNow+0x3c>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	68fa      	ldr	r2, [r7, #12]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d205      	bcs.n	800ce24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ce18:	f000 f93a 	bl	800d090 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	601a      	str	r2, [r3, #0]
 800ce22:	e002      	b.n	800ce2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2200      	movs	r2, #0
 800ce28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ce2a:	4a04      	ldr	r2, [pc, #16]	@ (800ce3c <prvSampleTimeNow+0x3c>)
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ce30:	68fb      	ldr	r3, [r7, #12]
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3710      	adds	r7, #16
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	20001150 	.word	0x20001150

0800ce40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b086      	sub	sp, #24
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
 800ce4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	68ba      	ldr	r2, [r7, #8]
 800ce56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ce5e:	68ba      	ldr	r2, [r7, #8]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d812      	bhi.n	800ce8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	1ad2      	subs	r2, r2, r3
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	699b      	ldr	r3, [r3, #24]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d302      	bcc.n	800ce7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ce74:	2301      	movs	r3, #1
 800ce76:	617b      	str	r3, [r7, #20]
 800ce78:	e01b      	b.n	800ceb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ce7a:	4b10      	ldr	r3, [pc, #64]	@ (800cebc <prvInsertTimerInActiveList+0x7c>)
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	3304      	adds	r3, #4
 800ce82:	4619      	mov	r1, r3
 800ce84:	4610      	mov	r0, r2
 800ce86:	f7fe f8c0 	bl	800b00a <vListInsert>
 800ce8a:	e012      	b.n	800ceb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ce8c:	687a      	ldr	r2, [r7, #4]
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d206      	bcs.n	800cea2 <prvInsertTimerInActiveList+0x62>
 800ce94:	68ba      	ldr	r2, [r7, #8]
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d302      	bcc.n	800cea2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	617b      	str	r3, [r7, #20]
 800cea0:	e007      	b.n	800ceb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cea2:	4b07      	ldr	r3, [pc, #28]	@ (800cec0 <prvInsertTimerInActiveList+0x80>)
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	3304      	adds	r3, #4
 800ceaa:	4619      	mov	r1, r3
 800ceac:	4610      	mov	r0, r2
 800ceae:	f7fe f8ac 	bl	800b00a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ceb2:	697b      	ldr	r3, [r7, #20]
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3718      	adds	r7, #24
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	20001144 	.word	0x20001144
 800cec0:	20001140 	.word	0x20001140

0800cec4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b08e      	sub	sp, #56	@ 0x38
 800cec8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ceca:	e0ce      	b.n	800d06a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	da19      	bge.n	800cf06 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ced2:	1d3b      	adds	r3, r7, #4
 800ced4:	3304      	adds	r3, #4
 800ced6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ced8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d10b      	bne.n	800cef6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cee2:	f383 8811 	msr	BASEPRI, r3
 800cee6:	f3bf 8f6f 	isb	sy
 800ceea:	f3bf 8f4f 	dsb	sy
 800ceee:	61fb      	str	r3, [r7, #28]
}
 800cef0:	bf00      	nop
 800cef2:	bf00      	nop
 800cef4:	e7fd      	b.n	800cef2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cefc:	6850      	ldr	r0, [r2, #4]
 800cefe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf00:	6892      	ldr	r2, [r2, #8]
 800cf02:	4611      	mov	r1, r2
 800cf04:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	f2c0 80ae 	blt.w	800d06a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cf12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf14:	695b      	ldr	r3, [r3, #20]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d004      	beq.n	800cf24 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf1c:	3304      	adds	r3, #4
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fe f8ac 	bl	800b07c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf24:	463b      	mov	r3, r7
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7ff ff6a 	bl	800ce00 <prvSampleTimeNow>
 800cf2c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2b09      	cmp	r3, #9
 800cf32:	f200 8097 	bhi.w	800d064 <prvProcessReceivedCommands+0x1a0>
 800cf36:	a201      	add	r2, pc, #4	@ (adr r2, 800cf3c <prvProcessReceivedCommands+0x78>)
 800cf38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf3c:	0800cf65 	.word	0x0800cf65
 800cf40:	0800cf65 	.word	0x0800cf65
 800cf44:	0800cf65 	.word	0x0800cf65
 800cf48:	0800cfdb 	.word	0x0800cfdb
 800cf4c:	0800cfef 	.word	0x0800cfef
 800cf50:	0800d03b 	.word	0x0800d03b
 800cf54:	0800cf65 	.word	0x0800cf65
 800cf58:	0800cf65 	.word	0x0800cf65
 800cf5c:	0800cfdb 	.word	0x0800cfdb
 800cf60:	0800cfef 	.word	0x0800cfef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cf64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf6a:	f043 0301 	orr.w	r3, r3, #1
 800cf6e:	b2da      	uxtb	r2, r3
 800cf70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cf76:	68ba      	ldr	r2, [r7, #8]
 800cf78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf7a:	699b      	ldr	r3, [r3, #24]
 800cf7c:	18d1      	adds	r1, r2, r3
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf84:	f7ff ff5c 	bl	800ce40 <prvInsertTimerInActiveList>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d06c      	beq.n	800d068 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf90:	6a1b      	ldr	r3, [r3, #32]
 800cf92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf9c:	f003 0304 	and.w	r3, r3, #4
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d061      	beq.n	800d068 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cfa4:	68ba      	ldr	r2, [r7, #8]
 800cfa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa8:	699b      	ldr	r3, [r3, #24]
 800cfaa:	441a      	add	r2, r3
 800cfac:	2300      	movs	r3, #0
 800cfae:	9300      	str	r3, [sp, #0]
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfb6:	f7ff fe01 	bl	800cbbc <xTimerGenericCommand>
 800cfba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cfbc:	6a3b      	ldr	r3, [r7, #32]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d152      	bne.n	800d068 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800cfc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfc6:	f383 8811 	msr	BASEPRI, r3
 800cfca:	f3bf 8f6f 	isb	sy
 800cfce:	f3bf 8f4f 	dsb	sy
 800cfd2:	61bb      	str	r3, [r7, #24]
}
 800cfd4:	bf00      	nop
 800cfd6:	bf00      	nop
 800cfd8:	e7fd      	b.n	800cfd6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cfda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cfe0:	f023 0301 	bic.w	r3, r3, #1
 800cfe4:	b2da      	uxtb	r2, r3
 800cfe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cfec:	e03d      	b.n	800d06a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cfee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cff0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cff4:	f043 0301 	orr.w	r3, r3, #1
 800cff8:	b2da      	uxtb	r2, r3
 800cffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cffc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d000:	68ba      	ldr	r2, [r7, #8]
 800d002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d004:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d008:	699b      	ldr	r3, [r3, #24]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d10b      	bne.n	800d026 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d012:	f383 8811 	msr	BASEPRI, r3
 800d016:	f3bf 8f6f 	isb	sy
 800d01a:	f3bf 8f4f 	dsb	sy
 800d01e:	617b      	str	r3, [r7, #20]
}
 800d020:	bf00      	nop
 800d022:	bf00      	nop
 800d024:	e7fd      	b.n	800d022 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d028:	699a      	ldr	r2, [r3, #24]
 800d02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d02c:	18d1      	adds	r1, r2, r3
 800d02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d032:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d034:	f7ff ff04 	bl	800ce40 <prvInsertTimerInActiveList>
					break;
 800d038:	e017      	b.n	800d06a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d03c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d040:	f003 0302 	and.w	r3, r3, #2
 800d044:	2b00      	cmp	r3, #0
 800d046:	d103      	bne.n	800d050 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d048:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d04a:	f000 fbe5 	bl	800d818 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d04e:	e00c      	b.n	800d06a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d052:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d056:	f023 0301 	bic.w	r3, r3, #1
 800d05a:	b2da      	uxtb	r2, r3
 800d05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d05e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d062:	e002      	b.n	800d06a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d064:	bf00      	nop
 800d066:	e000      	b.n	800d06a <prvProcessReceivedCommands+0x1a6>
					break;
 800d068:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d06a:	4b08      	ldr	r3, [pc, #32]	@ (800d08c <prvProcessReceivedCommands+0x1c8>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	1d39      	adds	r1, r7, #4
 800d070:	2200      	movs	r2, #0
 800d072:	4618      	mov	r0, r3
 800d074:	f7fe fb80 	bl	800b778 <xQueueReceive>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	f47f af26 	bne.w	800cecc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d080:	bf00      	nop
 800d082:	bf00      	nop
 800d084:	3730      	adds	r7, #48	@ 0x30
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	20001148 	.word	0x20001148

0800d090 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b088      	sub	sp, #32
 800d094:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d096:	e049      	b.n	800d12c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d098:	4b2e      	ldr	r3, [pc, #184]	@ (800d154 <prvSwitchTimerLists+0xc4>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0a2:	4b2c      	ldr	r3, [pc, #176]	@ (800d154 <prvSwitchTimerLists+0xc4>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	68db      	ldr	r3, [r3, #12]
 800d0aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	3304      	adds	r3, #4
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7fd ffe3 	bl	800b07c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	6a1b      	ldr	r3, [r3, #32]
 800d0ba:	68f8      	ldr	r0, [r7, #12]
 800d0bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d0c4:	f003 0304 	and.w	r3, r3, #4
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d02f      	beq.n	800d12c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	699b      	ldr	r3, [r3, #24]
 800d0d0:	693a      	ldr	r2, [r7, #16]
 800d0d2:	4413      	add	r3, r2
 800d0d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d0d6:	68ba      	ldr	r2, [r7, #8]
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d90e      	bls.n	800d0fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	68ba      	ldr	r2, [r7, #8]
 800d0e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	68fa      	ldr	r2, [r7, #12]
 800d0e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d0ea:	4b1a      	ldr	r3, [pc, #104]	@ (800d154 <prvSwitchTimerLists+0xc4>)
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	3304      	adds	r3, #4
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	4610      	mov	r0, r2
 800d0f6:	f7fd ff88 	bl	800b00a <vListInsert>
 800d0fa:	e017      	b.n	800d12c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	9300      	str	r3, [sp, #0]
 800d100:	2300      	movs	r3, #0
 800d102:	693a      	ldr	r2, [r7, #16]
 800d104:	2100      	movs	r1, #0
 800d106:	68f8      	ldr	r0, [r7, #12]
 800d108:	f7ff fd58 	bl	800cbbc <xTimerGenericCommand>
 800d10c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d10b      	bne.n	800d12c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d118:	f383 8811 	msr	BASEPRI, r3
 800d11c:	f3bf 8f6f 	isb	sy
 800d120:	f3bf 8f4f 	dsb	sy
 800d124:	603b      	str	r3, [r7, #0]
}
 800d126:	bf00      	nop
 800d128:	bf00      	nop
 800d12a:	e7fd      	b.n	800d128 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d12c:	4b09      	ldr	r3, [pc, #36]	@ (800d154 <prvSwitchTimerLists+0xc4>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d1b0      	bne.n	800d098 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d136:	4b07      	ldr	r3, [pc, #28]	@ (800d154 <prvSwitchTimerLists+0xc4>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d13c:	4b06      	ldr	r3, [pc, #24]	@ (800d158 <prvSwitchTimerLists+0xc8>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4a04      	ldr	r2, [pc, #16]	@ (800d154 <prvSwitchTimerLists+0xc4>)
 800d142:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d144:	4a04      	ldr	r2, [pc, #16]	@ (800d158 <prvSwitchTimerLists+0xc8>)
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	6013      	str	r3, [r2, #0]
}
 800d14a:	bf00      	nop
 800d14c:	3718      	adds	r7, #24
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
 800d152:	bf00      	nop
 800d154:	20001140 	.word	0x20001140
 800d158:	20001144 	.word	0x20001144

0800d15c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b082      	sub	sp, #8
 800d160:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d162:	f000 f969 	bl	800d438 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d166:	4b15      	ldr	r3, [pc, #84]	@ (800d1bc <prvCheckForValidListAndQueue+0x60>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d120      	bne.n	800d1b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d16e:	4814      	ldr	r0, [pc, #80]	@ (800d1c0 <prvCheckForValidListAndQueue+0x64>)
 800d170:	f7fd fefa 	bl	800af68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d174:	4813      	ldr	r0, [pc, #76]	@ (800d1c4 <prvCheckForValidListAndQueue+0x68>)
 800d176:	f7fd fef7 	bl	800af68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d17a:	4b13      	ldr	r3, [pc, #76]	@ (800d1c8 <prvCheckForValidListAndQueue+0x6c>)
 800d17c:	4a10      	ldr	r2, [pc, #64]	@ (800d1c0 <prvCheckForValidListAndQueue+0x64>)
 800d17e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d180:	4b12      	ldr	r3, [pc, #72]	@ (800d1cc <prvCheckForValidListAndQueue+0x70>)
 800d182:	4a10      	ldr	r2, [pc, #64]	@ (800d1c4 <prvCheckForValidListAndQueue+0x68>)
 800d184:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d186:	2300      	movs	r3, #0
 800d188:	9300      	str	r3, [sp, #0]
 800d18a:	4b11      	ldr	r3, [pc, #68]	@ (800d1d0 <prvCheckForValidListAndQueue+0x74>)
 800d18c:	4a11      	ldr	r2, [pc, #68]	@ (800d1d4 <prvCheckForValidListAndQueue+0x78>)
 800d18e:	2110      	movs	r1, #16
 800d190:	200a      	movs	r0, #10
 800d192:	f7fe f807 	bl	800b1a4 <xQueueGenericCreateStatic>
 800d196:	4603      	mov	r3, r0
 800d198:	4a08      	ldr	r2, [pc, #32]	@ (800d1bc <prvCheckForValidListAndQueue+0x60>)
 800d19a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d19c:	4b07      	ldr	r3, [pc, #28]	@ (800d1bc <prvCheckForValidListAndQueue+0x60>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d005      	beq.n	800d1b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d1a4:	4b05      	ldr	r3, [pc, #20]	@ (800d1bc <prvCheckForValidListAndQueue+0x60>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	490b      	ldr	r1, [pc, #44]	@ (800d1d8 <prvCheckForValidListAndQueue+0x7c>)
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7fe fcfa 	bl	800bba4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d1b0:	f000 f974 	bl	800d49c <vPortExitCritical>
}
 800d1b4:	bf00      	nop
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	20001148 	.word	0x20001148
 800d1c0:	20001118 	.word	0x20001118
 800d1c4:	2000112c 	.word	0x2000112c
 800d1c8:	20001140 	.word	0x20001140
 800d1cc:	20001144 	.word	0x20001144
 800d1d0:	200011f4 	.word	0x200011f4
 800d1d4:	20001154 	.word	0x20001154
 800d1d8:	0800dce8 	.word	0x0800dce8

0800d1dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b085      	sub	sp, #20
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	60f8      	str	r0, [r7, #12]
 800d1e4:	60b9      	str	r1, [r7, #8]
 800d1e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	3b04      	subs	r3, #4
 800d1ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d1f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	3b04      	subs	r3, #4
 800d1fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	f023 0201 	bic.w	r2, r3, #1
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	3b04      	subs	r3, #4
 800d20a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d20c:	4a0c      	ldr	r2, [pc, #48]	@ (800d240 <pxPortInitialiseStack+0x64>)
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	3b14      	subs	r3, #20
 800d216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d218:	687a      	ldr	r2, [r7, #4]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	3b04      	subs	r3, #4
 800d222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f06f 0202 	mvn.w	r2, #2
 800d22a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	3b20      	subs	r3, #32
 800d230:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d232:	68fb      	ldr	r3, [r7, #12]
}
 800d234:	4618      	mov	r0, r3
 800d236:	3714      	adds	r7, #20
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr
 800d240:	0800d245 	.word	0x0800d245

0800d244 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d244:	b480      	push	{r7}
 800d246:	b085      	sub	sp, #20
 800d248:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d24a:	2300      	movs	r3, #0
 800d24c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d24e:	4b13      	ldr	r3, [pc, #76]	@ (800d29c <prvTaskExitError+0x58>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d256:	d00b      	beq.n	800d270 <prvTaskExitError+0x2c>
	__asm volatile
 800d258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d25c:	f383 8811 	msr	BASEPRI, r3
 800d260:	f3bf 8f6f 	isb	sy
 800d264:	f3bf 8f4f 	dsb	sy
 800d268:	60fb      	str	r3, [r7, #12]
}
 800d26a:	bf00      	nop
 800d26c:	bf00      	nop
 800d26e:	e7fd      	b.n	800d26c <prvTaskExitError+0x28>
	__asm volatile
 800d270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d274:	f383 8811 	msr	BASEPRI, r3
 800d278:	f3bf 8f6f 	isb	sy
 800d27c:	f3bf 8f4f 	dsb	sy
 800d280:	60bb      	str	r3, [r7, #8]
}
 800d282:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d284:	bf00      	nop
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d0fc      	beq.n	800d286 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d28c:	bf00      	nop
 800d28e:	bf00      	nop
 800d290:	3714      	adds	r7, #20
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	2000000c 	.word	0x2000000c

0800d2a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d2a0:	4b07      	ldr	r3, [pc, #28]	@ (800d2c0 <pxCurrentTCBConst2>)
 800d2a2:	6819      	ldr	r1, [r3, #0]
 800d2a4:	6808      	ldr	r0, [r1, #0]
 800d2a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2aa:	f380 8809 	msr	PSP, r0
 800d2ae:	f3bf 8f6f 	isb	sy
 800d2b2:	f04f 0000 	mov.w	r0, #0
 800d2b6:	f380 8811 	msr	BASEPRI, r0
 800d2ba:	4770      	bx	lr
 800d2bc:	f3af 8000 	nop.w

0800d2c0 <pxCurrentTCBConst2>:
 800d2c0:	20000c18 	.word	0x20000c18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d2c4:	bf00      	nop
 800d2c6:	bf00      	nop

0800d2c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d2c8:	4808      	ldr	r0, [pc, #32]	@ (800d2ec <prvPortStartFirstTask+0x24>)
 800d2ca:	6800      	ldr	r0, [r0, #0]
 800d2cc:	6800      	ldr	r0, [r0, #0]
 800d2ce:	f380 8808 	msr	MSP, r0
 800d2d2:	f04f 0000 	mov.w	r0, #0
 800d2d6:	f380 8814 	msr	CONTROL, r0
 800d2da:	b662      	cpsie	i
 800d2dc:	b661      	cpsie	f
 800d2de:	f3bf 8f4f 	dsb	sy
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	df00      	svc	0
 800d2e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d2ea:	bf00      	nop
 800d2ec:	e000ed08 	.word	0xe000ed08

0800d2f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b086      	sub	sp, #24
 800d2f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d2f6:	4b47      	ldr	r3, [pc, #284]	@ (800d414 <xPortStartScheduler+0x124>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4a47      	ldr	r2, [pc, #284]	@ (800d418 <xPortStartScheduler+0x128>)
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d10b      	bne.n	800d318 <xPortStartScheduler+0x28>
	__asm volatile
 800d300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d304:	f383 8811 	msr	BASEPRI, r3
 800d308:	f3bf 8f6f 	isb	sy
 800d30c:	f3bf 8f4f 	dsb	sy
 800d310:	613b      	str	r3, [r7, #16]
}
 800d312:	bf00      	nop
 800d314:	bf00      	nop
 800d316:	e7fd      	b.n	800d314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d318:	4b3e      	ldr	r3, [pc, #248]	@ (800d414 <xPortStartScheduler+0x124>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4a3f      	ldr	r2, [pc, #252]	@ (800d41c <xPortStartScheduler+0x12c>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d10b      	bne.n	800d33a <xPortStartScheduler+0x4a>
	__asm volatile
 800d322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d326:	f383 8811 	msr	BASEPRI, r3
 800d32a:	f3bf 8f6f 	isb	sy
 800d32e:	f3bf 8f4f 	dsb	sy
 800d332:	60fb      	str	r3, [r7, #12]
}
 800d334:	bf00      	nop
 800d336:	bf00      	nop
 800d338:	e7fd      	b.n	800d336 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d33a:	4b39      	ldr	r3, [pc, #228]	@ (800d420 <xPortStartScheduler+0x130>)
 800d33c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	b2db      	uxtb	r3, r3
 800d344:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	22ff      	movs	r2, #255	@ 0xff
 800d34a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	b2db      	uxtb	r3, r3
 800d352:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d354:	78fb      	ldrb	r3, [r7, #3]
 800d356:	b2db      	uxtb	r3, r3
 800d358:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d35c:	b2da      	uxtb	r2, r3
 800d35e:	4b31      	ldr	r3, [pc, #196]	@ (800d424 <xPortStartScheduler+0x134>)
 800d360:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d362:	4b31      	ldr	r3, [pc, #196]	@ (800d428 <xPortStartScheduler+0x138>)
 800d364:	2207      	movs	r2, #7
 800d366:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d368:	e009      	b.n	800d37e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d36a:	4b2f      	ldr	r3, [pc, #188]	@ (800d428 <xPortStartScheduler+0x138>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	3b01      	subs	r3, #1
 800d370:	4a2d      	ldr	r2, [pc, #180]	@ (800d428 <xPortStartScheduler+0x138>)
 800d372:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d374:	78fb      	ldrb	r3, [r7, #3]
 800d376:	b2db      	uxtb	r3, r3
 800d378:	005b      	lsls	r3, r3, #1
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d37e:	78fb      	ldrb	r3, [r7, #3]
 800d380:	b2db      	uxtb	r3, r3
 800d382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d386:	2b80      	cmp	r3, #128	@ 0x80
 800d388:	d0ef      	beq.n	800d36a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d38a:	4b27      	ldr	r3, [pc, #156]	@ (800d428 <xPortStartScheduler+0x138>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f1c3 0307 	rsb	r3, r3, #7
 800d392:	2b04      	cmp	r3, #4
 800d394:	d00b      	beq.n	800d3ae <xPortStartScheduler+0xbe>
	__asm volatile
 800d396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d39a:	f383 8811 	msr	BASEPRI, r3
 800d39e:	f3bf 8f6f 	isb	sy
 800d3a2:	f3bf 8f4f 	dsb	sy
 800d3a6:	60bb      	str	r3, [r7, #8]
}
 800d3a8:	bf00      	nop
 800d3aa:	bf00      	nop
 800d3ac:	e7fd      	b.n	800d3aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d3ae:	4b1e      	ldr	r3, [pc, #120]	@ (800d428 <xPortStartScheduler+0x138>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	021b      	lsls	r3, r3, #8
 800d3b4:	4a1c      	ldr	r2, [pc, #112]	@ (800d428 <xPortStartScheduler+0x138>)
 800d3b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d3b8:	4b1b      	ldr	r3, [pc, #108]	@ (800d428 <xPortStartScheduler+0x138>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d3c0:	4a19      	ldr	r2, [pc, #100]	@ (800d428 <xPortStartScheduler+0x138>)
 800d3c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	b2da      	uxtb	r2, r3
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d3cc:	4b17      	ldr	r3, [pc, #92]	@ (800d42c <xPortStartScheduler+0x13c>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a16      	ldr	r2, [pc, #88]	@ (800d42c <xPortStartScheduler+0x13c>)
 800d3d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d3d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d3d8:	4b14      	ldr	r3, [pc, #80]	@ (800d42c <xPortStartScheduler+0x13c>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	4a13      	ldr	r2, [pc, #76]	@ (800d42c <xPortStartScheduler+0x13c>)
 800d3de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d3e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d3e4:	f000 f8da 	bl	800d59c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d3e8:	4b11      	ldr	r3, [pc, #68]	@ (800d430 <xPortStartScheduler+0x140>)
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d3ee:	f000 f8f9 	bl	800d5e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d3f2:	4b10      	ldr	r3, [pc, #64]	@ (800d434 <xPortStartScheduler+0x144>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4a0f      	ldr	r2, [pc, #60]	@ (800d434 <xPortStartScheduler+0x144>)
 800d3f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d3fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d3fe:	f7ff ff63 	bl	800d2c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d402:	f7ff f831 	bl	800c468 <vTaskSwitchContext>
	prvTaskExitError();
 800d406:	f7ff ff1d 	bl	800d244 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d40a:	2300      	movs	r3, #0
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3718      	adds	r7, #24
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	e000ed00 	.word	0xe000ed00
 800d418:	410fc271 	.word	0x410fc271
 800d41c:	410fc270 	.word	0x410fc270
 800d420:	e000e400 	.word	0xe000e400
 800d424:	20001244 	.word	0x20001244
 800d428:	20001248 	.word	0x20001248
 800d42c:	e000ed20 	.word	0xe000ed20
 800d430:	2000000c 	.word	0x2000000c
 800d434:	e000ef34 	.word	0xe000ef34

0800d438 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d438:	b480      	push	{r7}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
	__asm volatile
 800d43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d442:	f383 8811 	msr	BASEPRI, r3
 800d446:	f3bf 8f6f 	isb	sy
 800d44a:	f3bf 8f4f 	dsb	sy
 800d44e:	607b      	str	r3, [r7, #4]
}
 800d450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d452:	4b10      	ldr	r3, [pc, #64]	@ (800d494 <vPortEnterCritical+0x5c>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	3301      	adds	r3, #1
 800d458:	4a0e      	ldr	r2, [pc, #56]	@ (800d494 <vPortEnterCritical+0x5c>)
 800d45a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d45c:	4b0d      	ldr	r3, [pc, #52]	@ (800d494 <vPortEnterCritical+0x5c>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b01      	cmp	r3, #1
 800d462:	d110      	bne.n	800d486 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d464:	4b0c      	ldr	r3, [pc, #48]	@ (800d498 <vPortEnterCritical+0x60>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d00b      	beq.n	800d486 <vPortEnterCritical+0x4e>
	__asm volatile
 800d46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d472:	f383 8811 	msr	BASEPRI, r3
 800d476:	f3bf 8f6f 	isb	sy
 800d47a:	f3bf 8f4f 	dsb	sy
 800d47e:	603b      	str	r3, [r7, #0]
}
 800d480:	bf00      	nop
 800d482:	bf00      	nop
 800d484:	e7fd      	b.n	800d482 <vPortEnterCritical+0x4a>
	}
}
 800d486:	bf00      	nop
 800d488:	370c      	adds	r7, #12
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr
 800d492:	bf00      	nop
 800d494:	2000000c 	.word	0x2000000c
 800d498:	e000ed04 	.word	0xe000ed04

0800d49c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d4a2:	4b12      	ldr	r3, [pc, #72]	@ (800d4ec <vPortExitCritical+0x50>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d10b      	bne.n	800d4c2 <vPortExitCritical+0x26>
	__asm volatile
 800d4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ae:	f383 8811 	msr	BASEPRI, r3
 800d4b2:	f3bf 8f6f 	isb	sy
 800d4b6:	f3bf 8f4f 	dsb	sy
 800d4ba:	607b      	str	r3, [r7, #4]
}
 800d4bc:	bf00      	nop
 800d4be:	bf00      	nop
 800d4c0:	e7fd      	b.n	800d4be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d4c2:	4b0a      	ldr	r3, [pc, #40]	@ (800d4ec <vPortExitCritical+0x50>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	3b01      	subs	r3, #1
 800d4c8:	4a08      	ldr	r2, [pc, #32]	@ (800d4ec <vPortExitCritical+0x50>)
 800d4ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d4cc:	4b07      	ldr	r3, [pc, #28]	@ (800d4ec <vPortExitCritical+0x50>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d105      	bne.n	800d4e0 <vPortExitCritical+0x44>
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	f383 8811 	msr	BASEPRI, r3
}
 800d4de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d4e0:	bf00      	nop
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr
 800d4ec:	2000000c 	.word	0x2000000c

0800d4f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d4f0:	f3ef 8009 	mrs	r0, PSP
 800d4f4:	f3bf 8f6f 	isb	sy
 800d4f8:	4b15      	ldr	r3, [pc, #84]	@ (800d550 <pxCurrentTCBConst>)
 800d4fa:	681a      	ldr	r2, [r3, #0]
 800d4fc:	f01e 0f10 	tst.w	lr, #16
 800d500:	bf08      	it	eq
 800d502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d50a:	6010      	str	r0, [r2, #0]
 800d50c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d510:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d514:	f380 8811 	msr	BASEPRI, r0
 800d518:	f3bf 8f4f 	dsb	sy
 800d51c:	f3bf 8f6f 	isb	sy
 800d520:	f7fe ffa2 	bl	800c468 <vTaskSwitchContext>
 800d524:	f04f 0000 	mov.w	r0, #0
 800d528:	f380 8811 	msr	BASEPRI, r0
 800d52c:	bc09      	pop	{r0, r3}
 800d52e:	6819      	ldr	r1, [r3, #0]
 800d530:	6808      	ldr	r0, [r1, #0]
 800d532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d536:	f01e 0f10 	tst.w	lr, #16
 800d53a:	bf08      	it	eq
 800d53c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d540:	f380 8809 	msr	PSP, r0
 800d544:	f3bf 8f6f 	isb	sy
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop
 800d54c:	f3af 8000 	nop.w

0800d550 <pxCurrentTCBConst>:
 800d550:	20000c18 	.word	0x20000c18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d554:	bf00      	nop
 800d556:	bf00      	nop

0800d558 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
	__asm volatile
 800d55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d562:	f383 8811 	msr	BASEPRI, r3
 800d566:	f3bf 8f6f 	isb	sy
 800d56a:	f3bf 8f4f 	dsb	sy
 800d56e:	607b      	str	r3, [r7, #4]
}
 800d570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d572:	f7fe febf 	bl	800c2f4 <xTaskIncrementTick>
 800d576:	4603      	mov	r3, r0
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d003      	beq.n	800d584 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d57c:	4b06      	ldr	r3, [pc, #24]	@ (800d598 <xPortSysTickHandler+0x40>)
 800d57e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d582:	601a      	str	r2, [r3, #0]
 800d584:	2300      	movs	r3, #0
 800d586:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	f383 8811 	msr	BASEPRI, r3
}
 800d58e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d590:	bf00      	nop
 800d592:	3708      	adds	r7, #8
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}
 800d598:	e000ed04 	.word	0xe000ed04

0800d59c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d59c:	b480      	push	{r7}
 800d59e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d5a0:	4b0b      	ldr	r3, [pc, #44]	@ (800d5d0 <vPortSetupTimerInterrupt+0x34>)
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d5a6:	4b0b      	ldr	r3, [pc, #44]	@ (800d5d4 <vPortSetupTimerInterrupt+0x38>)
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d5ac:	4b0a      	ldr	r3, [pc, #40]	@ (800d5d8 <vPortSetupTimerInterrupt+0x3c>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4a0a      	ldr	r2, [pc, #40]	@ (800d5dc <vPortSetupTimerInterrupt+0x40>)
 800d5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5b6:	099b      	lsrs	r3, r3, #6
 800d5b8:	4a09      	ldr	r2, [pc, #36]	@ (800d5e0 <vPortSetupTimerInterrupt+0x44>)
 800d5ba:	3b01      	subs	r3, #1
 800d5bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d5be:	4b04      	ldr	r3, [pc, #16]	@ (800d5d0 <vPortSetupTimerInterrupt+0x34>)
 800d5c0:	2207      	movs	r2, #7
 800d5c2:	601a      	str	r2, [r3, #0]
}
 800d5c4:	bf00      	nop
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5cc:	4770      	bx	lr
 800d5ce:	bf00      	nop
 800d5d0:	e000e010 	.word	0xe000e010
 800d5d4:	e000e018 	.word	0xe000e018
 800d5d8:	20000000 	.word	0x20000000
 800d5dc:	10624dd3 	.word	0x10624dd3
 800d5e0:	e000e014 	.word	0xe000e014

0800d5e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d5e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d5f4 <vPortEnableVFP+0x10>
 800d5e8:	6801      	ldr	r1, [r0, #0]
 800d5ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d5ee:	6001      	str	r1, [r0, #0]
 800d5f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d5f2:	bf00      	nop
 800d5f4:	e000ed88 	.word	0xe000ed88

0800d5f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b085      	sub	sp, #20
 800d5fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d5fe:	f3ef 8305 	mrs	r3, IPSR
 800d602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2b0f      	cmp	r3, #15
 800d608:	d915      	bls.n	800d636 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d60a:	4a18      	ldr	r2, [pc, #96]	@ (800d66c <vPortValidateInterruptPriority+0x74>)
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	4413      	add	r3, r2
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d614:	4b16      	ldr	r3, [pc, #88]	@ (800d670 <vPortValidateInterruptPriority+0x78>)
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	7afa      	ldrb	r2, [r7, #11]
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d20b      	bcs.n	800d636 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d622:	f383 8811 	msr	BASEPRI, r3
 800d626:	f3bf 8f6f 	isb	sy
 800d62a:	f3bf 8f4f 	dsb	sy
 800d62e:	607b      	str	r3, [r7, #4]
}
 800d630:	bf00      	nop
 800d632:	bf00      	nop
 800d634:	e7fd      	b.n	800d632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d636:	4b0f      	ldr	r3, [pc, #60]	@ (800d674 <vPortValidateInterruptPriority+0x7c>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d63e:	4b0e      	ldr	r3, [pc, #56]	@ (800d678 <vPortValidateInterruptPriority+0x80>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	429a      	cmp	r2, r3
 800d644:	d90b      	bls.n	800d65e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d64a:	f383 8811 	msr	BASEPRI, r3
 800d64e:	f3bf 8f6f 	isb	sy
 800d652:	f3bf 8f4f 	dsb	sy
 800d656:	603b      	str	r3, [r7, #0]
}
 800d658:	bf00      	nop
 800d65a:	bf00      	nop
 800d65c:	e7fd      	b.n	800d65a <vPortValidateInterruptPriority+0x62>
	}
 800d65e:	bf00      	nop
 800d660:	3714      	adds	r7, #20
 800d662:	46bd      	mov	sp, r7
 800d664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d668:	4770      	bx	lr
 800d66a:	bf00      	nop
 800d66c:	e000e3f0 	.word	0xe000e3f0
 800d670:	20001244 	.word	0x20001244
 800d674:	e000ed0c 	.word	0xe000ed0c
 800d678:	20001248 	.word	0x20001248

0800d67c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b08a      	sub	sp, #40	@ 0x28
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d684:	2300      	movs	r3, #0
 800d686:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d688:	f7fe fd78 	bl	800c17c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d68c:	4b5c      	ldr	r3, [pc, #368]	@ (800d800 <pvPortMalloc+0x184>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d101      	bne.n	800d698 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d694:	f000 f924 	bl	800d8e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d698:	4b5a      	ldr	r3, [pc, #360]	@ (800d804 <pvPortMalloc+0x188>)
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	4013      	ands	r3, r2
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	f040 8095 	bne.w	800d7d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d01e      	beq.n	800d6ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d6ac:	2208      	movs	r2, #8
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	4413      	add	r3, r2
 800d6b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f003 0307 	and.w	r3, r3, #7
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d015      	beq.n	800d6ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f023 0307 	bic.w	r3, r3, #7
 800d6c4:	3308      	adds	r3, #8
 800d6c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f003 0307 	and.w	r3, r3, #7
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d00b      	beq.n	800d6ea <pvPortMalloc+0x6e>
	__asm volatile
 800d6d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d6:	f383 8811 	msr	BASEPRI, r3
 800d6da:	f3bf 8f6f 	isb	sy
 800d6de:	f3bf 8f4f 	dsb	sy
 800d6e2:	617b      	str	r3, [r7, #20]
}
 800d6e4:	bf00      	nop
 800d6e6:	bf00      	nop
 800d6e8:	e7fd      	b.n	800d6e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d06f      	beq.n	800d7d0 <pvPortMalloc+0x154>
 800d6f0:	4b45      	ldr	r3, [pc, #276]	@ (800d808 <pvPortMalloc+0x18c>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d86a      	bhi.n	800d7d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d6fa:	4b44      	ldr	r3, [pc, #272]	@ (800d80c <pvPortMalloc+0x190>)
 800d6fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d6fe:	4b43      	ldr	r3, [pc, #268]	@ (800d80c <pvPortMalloc+0x190>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d704:	e004      	b.n	800d710 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d708:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	429a      	cmp	r2, r3
 800d718:	d903      	bls.n	800d722 <pvPortMalloc+0xa6>
 800d71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d1f1      	bne.n	800d706 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d722:	4b37      	ldr	r3, [pc, #220]	@ (800d800 <pvPortMalloc+0x184>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d728:	429a      	cmp	r2, r3
 800d72a:	d051      	beq.n	800d7d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d72c:	6a3b      	ldr	r3, [r7, #32]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	2208      	movs	r2, #8
 800d732:	4413      	add	r3, r2
 800d734:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	6a3b      	ldr	r3, [r7, #32]
 800d73c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d740:	685a      	ldr	r2, [r3, #4]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	1ad2      	subs	r2, r2, r3
 800d746:	2308      	movs	r3, #8
 800d748:	005b      	lsls	r3, r3, #1
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d920      	bls.n	800d790 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d74e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	4413      	add	r3, r2
 800d754:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	f003 0307 	and.w	r3, r3, #7
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d00b      	beq.n	800d778 <pvPortMalloc+0xfc>
	__asm volatile
 800d760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d764:	f383 8811 	msr	BASEPRI, r3
 800d768:	f3bf 8f6f 	isb	sy
 800d76c:	f3bf 8f4f 	dsb	sy
 800d770:	613b      	str	r3, [r7, #16]
}
 800d772:	bf00      	nop
 800d774:	bf00      	nop
 800d776:	e7fd      	b.n	800d774 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77a:	685a      	ldr	r2, [r3, #4]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	1ad2      	subs	r2, r2, r3
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d78a:	69b8      	ldr	r0, [r7, #24]
 800d78c:	f000 f90a 	bl	800d9a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d790:	4b1d      	ldr	r3, [pc, #116]	@ (800d808 <pvPortMalloc+0x18c>)
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	1ad3      	subs	r3, r2, r3
 800d79a:	4a1b      	ldr	r2, [pc, #108]	@ (800d808 <pvPortMalloc+0x18c>)
 800d79c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d79e:	4b1a      	ldr	r3, [pc, #104]	@ (800d808 <pvPortMalloc+0x18c>)
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	4b1b      	ldr	r3, [pc, #108]	@ (800d810 <pvPortMalloc+0x194>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d203      	bcs.n	800d7b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d7aa:	4b17      	ldr	r3, [pc, #92]	@ (800d808 <pvPortMalloc+0x18c>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4a18      	ldr	r2, [pc, #96]	@ (800d810 <pvPortMalloc+0x194>)
 800d7b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7b4:	685a      	ldr	r2, [r3, #4]
 800d7b6:	4b13      	ldr	r3, [pc, #76]	@ (800d804 <pvPortMalloc+0x188>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	431a      	orrs	r2, r3
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d7c6:	4b13      	ldr	r3, [pc, #76]	@ (800d814 <pvPortMalloc+0x198>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	4a11      	ldr	r2, [pc, #68]	@ (800d814 <pvPortMalloc+0x198>)
 800d7ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d7d0:	f7fe fce2 	bl	800c198 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	f003 0307 	and.w	r3, r3, #7
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d00b      	beq.n	800d7f6 <pvPortMalloc+0x17a>
	__asm volatile
 800d7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7e2:	f383 8811 	msr	BASEPRI, r3
 800d7e6:	f3bf 8f6f 	isb	sy
 800d7ea:	f3bf 8f4f 	dsb	sy
 800d7ee:	60fb      	str	r3, [r7, #12]
}
 800d7f0:	bf00      	nop
 800d7f2:	bf00      	nop
 800d7f4:	e7fd      	b.n	800d7f2 <pvPortMalloc+0x176>
	return pvReturn;
 800d7f6:	69fb      	ldr	r3, [r7, #28]
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3728      	adds	r7, #40	@ 0x28
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	200029c4 	.word	0x200029c4
 800d804:	200029d8 	.word	0x200029d8
 800d808:	200029c8 	.word	0x200029c8
 800d80c:	200029bc 	.word	0x200029bc
 800d810:	200029cc 	.word	0x200029cc
 800d814:	200029d0 	.word	0x200029d0

0800d818 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b086      	sub	sp, #24
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d04f      	beq.n	800d8ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d82a:	2308      	movs	r3, #8
 800d82c:	425b      	negs	r3, r3
 800d82e:	697a      	ldr	r2, [r7, #20]
 800d830:	4413      	add	r3, r2
 800d832:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	685a      	ldr	r2, [r3, #4]
 800d83c:	4b25      	ldr	r3, [pc, #148]	@ (800d8d4 <vPortFree+0xbc>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4013      	ands	r3, r2
 800d842:	2b00      	cmp	r3, #0
 800d844:	d10b      	bne.n	800d85e <vPortFree+0x46>
	__asm volatile
 800d846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d84a:	f383 8811 	msr	BASEPRI, r3
 800d84e:	f3bf 8f6f 	isb	sy
 800d852:	f3bf 8f4f 	dsb	sy
 800d856:	60fb      	str	r3, [r7, #12]
}
 800d858:	bf00      	nop
 800d85a:	bf00      	nop
 800d85c:	e7fd      	b.n	800d85a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d00b      	beq.n	800d87e <vPortFree+0x66>
	__asm volatile
 800d866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d86a:	f383 8811 	msr	BASEPRI, r3
 800d86e:	f3bf 8f6f 	isb	sy
 800d872:	f3bf 8f4f 	dsb	sy
 800d876:	60bb      	str	r3, [r7, #8]
}
 800d878:	bf00      	nop
 800d87a:	bf00      	nop
 800d87c:	e7fd      	b.n	800d87a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	685a      	ldr	r2, [r3, #4]
 800d882:	4b14      	ldr	r3, [pc, #80]	@ (800d8d4 <vPortFree+0xbc>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4013      	ands	r3, r2
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d01e      	beq.n	800d8ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d11a      	bne.n	800d8ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	685a      	ldr	r2, [r3, #4]
 800d898:	4b0e      	ldr	r3, [pc, #56]	@ (800d8d4 <vPortFree+0xbc>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	43db      	mvns	r3, r3
 800d89e:	401a      	ands	r2, r3
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d8a4:	f7fe fc6a 	bl	800c17c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	685a      	ldr	r2, [r3, #4]
 800d8ac:	4b0a      	ldr	r3, [pc, #40]	@ (800d8d8 <vPortFree+0xc0>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4413      	add	r3, r2
 800d8b2:	4a09      	ldr	r2, [pc, #36]	@ (800d8d8 <vPortFree+0xc0>)
 800d8b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d8b6:	6938      	ldr	r0, [r7, #16]
 800d8b8:	f000 f874 	bl	800d9a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d8bc:	4b07      	ldr	r3, [pc, #28]	@ (800d8dc <vPortFree+0xc4>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	4a06      	ldr	r2, [pc, #24]	@ (800d8dc <vPortFree+0xc4>)
 800d8c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d8c6:	f7fe fc67 	bl	800c198 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d8ca:	bf00      	nop
 800d8cc:	3718      	adds	r7, #24
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	200029d8 	.word	0x200029d8
 800d8d8:	200029c8 	.word	0x200029c8
 800d8dc:	200029d4 	.word	0x200029d4

0800d8e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b085      	sub	sp, #20
 800d8e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d8e6:	f241 7370 	movw	r3, #6000	@ 0x1770
 800d8ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d8ec:	4b27      	ldr	r3, [pc, #156]	@ (800d98c <prvHeapInit+0xac>)
 800d8ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	f003 0307 	and.w	r3, r3, #7
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d00c      	beq.n	800d914 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	3307      	adds	r3, #7
 800d8fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f023 0307 	bic.w	r3, r3, #7
 800d906:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d908:	68ba      	ldr	r2, [r7, #8]
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	1ad3      	subs	r3, r2, r3
 800d90e:	4a1f      	ldr	r2, [pc, #124]	@ (800d98c <prvHeapInit+0xac>)
 800d910:	4413      	add	r3, r2
 800d912:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d918:	4a1d      	ldr	r2, [pc, #116]	@ (800d990 <prvHeapInit+0xb0>)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d91e:	4b1c      	ldr	r3, [pc, #112]	@ (800d990 <prvHeapInit+0xb0>)
 800d920:	2200      	movs	r2, #0
 800d922:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	68ba      	ldr	r2, [r7, #8]
 800d928:	4413      	add	r3, r2
 800d92a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d92c:	2208      	movs	r2, #8
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	1a9b      	subs	r3, r3, r2
 800d932:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f023 0307 	bic.w	r3, r3, #7
 800d93a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	4a15      	ldr	r2, [pc, #84]	@ (800d994 <prvHeapInit+0xb4>)
 800d940:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d942:	4b14      	ldr	r3, [pc, #80]	@ (800d994 <prvHeapInit+0xb4>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2200      	movs	r2, #0
 800d948:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d94a:	4b12      	ldr	r3, [pc, #72]	@ (800d994 <prvHeapInit+0xb4>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	2200      	movs	r2, #0
 800d950:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	68fa      	ldr	r2, [r7, #12]
 800d95a:	1ad2      	subs	r2, r2, r3
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d960:	4b0c      	ldr	r3, [pc, #48]	@ (800d994 <prvHeapInit+0xb4>)
 800d962:	681a      	ldr	r2, [r3, #0]
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	4a0a      	ldr	r2, [pc, #40]	@ (800d998 <prvHeapInit+0xb8>)
 800d96e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	685b      	ldr	r3, [r3, #4]
 800d974:	4a09      	ldr	r2, [pc, #36]	@ (800d99c <prvHeapInit+0xbc>)
 800d976:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d978:	4b09      	ldr	r3, [pc, #36]	@ (800d9a0 <prvHeapInit+0xc0>)
 800d97a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d97e:	601a      	str	r2, [r3, #0]
}
 800d980:	bf00      	nop
 800d982:	3714      	adds	r7, #20
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr
 800d98c:	2000124c 	.word	0x2000124c
 800d990:	200029bc 	.word	0x200029bc
 800d994:	200029c4 	.word	0x200029c4
 800d998:	200029cc 	.word	0x200029cc
 800d99c:	200029c8 	.word	0x200029c8
 800d9a0:	200029d8 	.word	0x200029d8

0800d9a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b085      	sub	sp, #20
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d9ac:	4b28      	ldr	r3, [pc, #160]	@ (800da50 <prvInsertBlockIntoFreeList+0xac>)
 800d9ae:	60fb      	str	r3, [r7, #12]
 800d9b0:	e002      	b.n	800d9b8 <prvInsertBlockIntoFreeList+0x14>
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	60fb      	str	r3, [r7, #12]
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	687a      	ldr	r2, [r7, #4]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d8f7      	bhi.n	800d9b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	68ba      	ldr	r2, [r7, #8]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d108      	bne.n	800d9e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	685a      	ldr	r2, [r3, #4]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	441a      	add	r2, r3
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	68ba      	ldr	r2, [r7, #8]
 800d9f0:	441a      	add	r2, r3
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d118      	bne.n	800da2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681a      	ldr	r2, [r3, #0]
 800d9fe:	4b15      	ldr	r3, [pc, #84]	@ (800da54 <prvInsertBlockIntoFreeList+0xb0>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	429a      	cmp	r2, r3
 800da04:	d00d      	beq.n	800da22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	685a      	ldr	r2, [r3, #4]
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	685b      	ldr	r3, [r3, #4]
 800da10:	441a      	add	r2, r3
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	681a      	ldr	r2, [r3, #0]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	601a      	str	r2, [r3, #0]
 800da20:	e008      	b.n	800da34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800da22:	4b0c      	ldr	r3, [pc, #48]	@ (800da54 <prvInsertBlockIntoFreeList+0xb0>)
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	601a      	str	r2, [r3, #0]
 800da2a:	e003      	b.n	800da34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681a      	ldr	r2, [r3, #0]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800da34:	68fa      	ldr	r2, [r7, #12]
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	429a      	cmp	r2, r3
 800da3a:	d002      	beq.n	800da42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da42:	bf00      	nop
 800da44:	3714      	adds	r7, #20
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr
 800da4e:	bf00      	nop
 800da50:	200029bc 	.word	0x200029bc
 800da54:	200029c4 	.word	0x200029c4

0800da58 <_ZdlPvj>:
 800da58:	f000 b800 	b.w	800da5c <_ZdlPv>

0800da5c <_ZdlPv>:
 800da5c:	f000 b800 	b.w	800da60 <free>

0800da60 <free>:
 800da60:	4b02      	ldr	r3, [pc, #8]	@ (800da6c <free+0xc>)
 800da62:	4601      	mov	r1, r0
 800da64:	6818      	ldr	r0, [r3, #0]
 800da66:	f000 b8a1 	b.w	800dbac <_free_r>
 800da6a:	bf00      	nop
 800da6c:	20000010 	.word	0x20000010

0800da70 <__malloc_lock>:
 800da70:	4801      	ldr	r0, [pc, #4]	@ (800da78 <__malloc_lock+0x8>)
 800da72:	f000 b88b 	b.w	800db8c <__retarget_lock_acquire_recursive>
 800da76:	bf00      	nop
 800da78:	20002b18 	.word	0x20002b18

0800da7c <__malloc_unlock>:
 800da7c:	4801      	ldr	r0, [pc, #4]	@ (800da84 <__malloc_unlock+0x8>)
 800da7e:	f000 b886 	b.w	800db8e <__retarget_lock_release_recursive>
 800da82:	bf00      	nop
 800da84:	20002b18 	.word	0x20002b18

0800da88 <memset>:
 800da88:	4402      	add	r2, r0
 800da8a:	4603      	mov	r3, r0
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d100      	bne.n	800da92 <memset+0xa>
 800da90:	4770      	bx	lr
 800da92:	f803 1b01 	strb.w	r1, [r3], #1
 800da96:	e7f9      	b.n	800da8c <memset+0x4>

0800da98 <_reclaim_reent>:
 800da98:	4b29      	ldr	r3, [pc, #164]	@ (800db40 <_reclaim_reent+0xa8>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4283      	cmp	r3, r0
 800da9e:	b570      	push	{r4, r5, r6, lr}
 800daa0:	4604      	mov	r4, r0
 800daa2:	d04b      	beq.n	800db3c <_reclaim_reent+0xa4>
 800daa4:	69c3      	ldr	r3, [r0, #28]
 800daa6:	b1ab      	cbz	r3, 800dad4 <_reclaim_reent+0x3c>
 800daa8:	68db      	ldr	r3, [r3, #12]
 800daaa:	b16b      	cbz	r3, 800dac8 <_reclaim_reent+0x30>
 800daac:	2500      	movs	r5, #0
 800daae:	69e3      	ldr	r3, [r4, #28]
 800dab0:	68db      	ldr	r3, [r3, #12]
 800dab2:	5959      	ldr	r1, [r3, r5]
 800dab4:	2900      	cmp	r1, #0
 800dab6:	d13b      	bne.n	800db30 <_reclaim_reent+0x98>
 800dab8:	3504      	adds	r5, #4
 800daba:	2d80      	cmp	r5, #128	@ 0x80
 800dabc:	d1f7      	bne.n	800daae <_reclaim_reent+0x16>
 800dabe:	69e3      	ldr	r3, [r4, #28]
 800dac0:	4620      	mov	r0, r4
 800dac2:	68d9      	ldr	r1, [r3, #12]
 800dac4:	f000 f872 	bl	800dbac <_free_r>
 800dac8:	69e3      	ldr	r3, [r4, #28]
 800daca:	6819      	ldr	r1, [r3, #0]
 800dacc:	b111      	cbz	r1, 800dad4 <_reclaim_reent+0x3c>
 800dace:	4620      	mov	r0, r4
 800dad0:	f000 f86c 	bl	800dbac <_free_r>
 800dad4:	6961      	ldr	r1, [r4, #20]
 800dad6:	b111      	cbz	r1, 800dade <_reclaim_reent+0x46>
 800dad8:	4620      	mov	r0, r4
 800dada:	f000 f867 	bl	800dbac <_free_r>
 800dade:	69e1      	ldr	r1, [r4, #28]
 800dae0:	b111      	cbz	r1, 800dae8 <_reclaim_reent+0x50>
 800dae2:	4620      	mov	r0, r4
 800dae4:	f000 f862 	bl	800dbac <_free_r>
 800dae8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800daea:	b111      	cbz	r1, 800daf2 <_reclaim_reent+0x5a>
 800daec:	4620      	mov	r0, r4
 800daee:	f000 f85d 	bl	800dbac <_free_r>
 800daf2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800daf4:	b111      	cbz	r1, 800dafc <_reclaim_reent+0x64>
 800daf6:	4620      	mov	r0, r4
 800daf8:	f000 f858 	bl	800dbac <_free_r>
 800dafc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800dafe:	b111      	cbz	r1, 800db06 <_reclaim_reent+0x6e>
 800db00:	4620      	mov	r0, r4
 800db02:	f000 f853 	bl	800dbac <_free_r>
 800db06:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800db08:	b111      	cbz	r1, 800db10 <_reclaim_reent+0x78>
 800db0a:	4620      	mov	r0, r4
 800db0c:	f000 f84e 	bl	800dbac <_free_r>
 800db10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800db12:	b111      	cbz	r1, 800db1a <_reclaim_reent+0x82>
 800db14:	4620      	mov	r0, r4
 800db16:	f000 f849 	bl	800dbac <_free_r>
 800db1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800db1c:	b111      	cbz	r1, 800db24 <_reclaim_reent+0x8c>
 800db1e:	4620      	mov	r0, r4
 800db20:	f000 f844 	bl	800dbac <_free_r>
 800db24:	6a23      	ldr	r3, [r4, #32]
 800db26:	b14b      	cbz	r3, 800db3c <_reclaim_reent+0xa4>
 800db28:	4620      	mov	r0, r4
 800db2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db2e:	4718      	bx	r3
 800db30:	680e      	ldr	r6, [r1, #0]
 800db32:	4620      	mov	r0, r4
 800db34:	f000 f83a 	bl	800dbac <_free_r>
 800db38:	4631      	mov	r1, r6
 800db3a:	e7bb      	b.n	800dab4 <_reclaim_reent+0x1c>
 800db3c:	bd70      	pop	{r4, r5, r6, pc}
 800db3e:	bf00      	nop
 800db40:	20000010 	.word	0x20000010

0800db44 <__libc_init_array>:
 800db44:	b570      	push	{r4, r5, r6, lr}
 800db46:	4d0d      	ldr	r5, [pc, #52]	@ (800db7c <__libc_init_array+0x38>)
 800db48:	4c0d      	ldr	r4, [pc, #52]	@ (800db80 <__libc_init_array+0x3c>)
 800db4a:	1b64      	subs	r4, r4, r5
 800db4c:	10a4      	asrs	r4, r4, #2
 800db4e:	2600      	movs	r6, #0
 800db50:	42a6      	cmp	r6, r4
 800db52:	d109      	bne.n	800db68 <__libc_init_array+0x24>
 800db54:	4d0b      	ldr	r5, [pc, #44]	@ (800db84 <__libc_init_array+0x40>)
 800db56:	4c0c      	ldr	r4, [pc, #48]	@ (800db88 <__libc_init_array+0x44>)
 800db58:	f000 f872 	bl	800dc40 <_init>
 800db5c:	1b64      	subs	r4, r4, r5
 800db5e:	10a4      	asrs	r4, r4, #2
 800db60:	2600      	movs	r6, #0
 800db62:	42a6      	cmp	r6, r4
 800db64:	d105      	bne.n	800db72 <__libc_init_array+0x2e>
 800db66:	bd70      	pop	{r4, r5, r6, pc}
 800db68:	f855 3b04 	ldr.w	r3, [r5], #4
 800db6c:	4798      	blx	r3
 800db6e:	3601      	adds	r6, #1
 800db70:	e7ee      	b.n	800db50 <__libc_init_array+0xc>
 800db72:	f855 3b04 	ldr.w	r3, [r5], #4
 800db76:	4798      	blx	r3
 800db78:	3601      	adds	r6, #1
 800db7a:	e7f2      	b.n	800db62 <__libc_init_array+0x1e>
 800db7c:	0800e338 	.word	0x0800e338
 800db80:	0800e338 	.word	0x0800e338
 800db84:	0800e338 	.word	0x0800e338
 800db88:	0800e340 	.word	0x0800e340

0800db8c <__retarget_lock_acquire_recursive>:
 800db8c:	4770      	bx	lr

0800db8e <__retarget_lock_release_recursive>:
 800db8e:	4770      	bx	lr

0800db90 <memcpy>:
 800db90:	440a      	add	r2, r1
 800db92:	4291      	cmp	r1, r2
 800db94:	f100 33ff 	add.w	r3, r0, #4294967295
 800db98:	d100      	bne.n	800db9c <memcpy+0xc>
 800db9a:	4770      	bx	lr
 800db9c:	b510      	push	{r4, lr}
 800db9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dba2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dba6:	4291      	cmp	r1, r2
 800dba8:	d1f9      	bne.n	800db9e <memcpy+0xe>
 800dbaa:	bd10      	pop	{r4, pc}

0800dbac <_free_r>:
 800dbac:	b538      	push	{r3, r4, r5, lr}
 800dbae:	4605      	mov	r5, r0
 800dbb0:	2900      	cmp	r1, #0
 800dbb2:	d041      	beq.n	800dc38 <_free_r+0x8c>
 800dbb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbb8:	1f0c      	subs	r4, r1, #4
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	bfb8      	it	lt
 800dbbe:	18e4      	addlt	r4, r4, r3
 800dbc0:	f7ff ff56 	bl	800da70 <__malloc_lock>
 800dbc4:	4a1d      	ldr	r2, [pc, #116]	@ (800dc3c <_free_r+0x90>)
 800dbc6:	6813      	ldr	r3, [r2, #0]
 800dbc8:	b933      	cbnz	r3, 800dbd8 <_free_r+0x2c>
 800dbca:	6063      	str	r3, [r4, #4]
 800dbcc:	6014      	str	r4, [r2, #0]
 800dbce:	4628      	mov	r0, r5
 800dbd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbd4:	f7ff bf52 	b.w	800da7c <__malloc_unlock>
 800dbd8:	42a3      	cmp	r3, r4
 800dbda:	d908      	bls.n	800dbee <_free_r+0x42>
 800dbdc:	6820      	ldr	r0, [r4, #0]
 800dbde:	1821      	adds	r1, r4, r0
 800dbe0:	428b      	cmp	r3, r1
 800dbe2:	bf01      	itttt	eq
 800dbe4:	6819      	ldreq	r1, [r3, #0]
 800dbe6:	685b      	ldreq	r3, [r3, #4]
 800dbe8:	1809      	addeq	r1, r1, r0
 800dbea:	6021      	streq	r1, [r4, #0]
 800dbec:	e7ed      	b.n	800dbca <_free_r+0x1e>
 800dbee:	461a      	mov	r2, r3
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	b10b      	cbz	r3, 800dbf8 <_free_r+0x4c>
 800dbf4:	42a3      	cmp	r3, r4
 800dbf6:	d9fa      	bls.n	800dbee <_free_r+0x42>
 800dbf8:	6811      	ldr	r1, [r2, #0]
 800dbfa:	1850      	adds	r0, r2, r1
 800dbfc:	42a0      	cmp	r0, r4
 800dbfe:	d10b      	bne.n	800dc18 <_free_r+0x6c>
 800dc00:	6820      	ldr	r0, [r4, #0]
 800dc02:	4401      	add	r1, r0
 800dc04:	1850      	adds	r0, r2, r1
 800dc06:	4283      	cmp	r3, r0
 800dc08:	6011      	str	r1, [r2, #0]
 800dc0a:	d1e0      	bne.n	800dbce <_free_r+0x22>
 800dc0c:	6818      	ldr	r0, [r3, #0]
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	6053      	str	r3, [r2, #4]
 800dc12:	4408      	add	r0, r1
 800dc14:	6010      	str	r0, [r2, #0]
 800dc16:	e7da      	b.n	800dbce <_free_r+0x22>
 800dc18:	d902      	bls.n	800dc20 <_free_r+0x74>
 800dc1a:	230c      	movs	r3, #12
 800dc1c:	602b      	str	r3, [r5, #0]
 800dc1e:	e7d6      	b.n	800dbce <_free_r+0x22>
 800dc20:	6820      	ldr	r0, [r4, #0]
 800dc22:	1821      	adds	r1, r4, r0
 800dc24:	428b      	cmp	r3, r1
 800dc26:	bf04      	itt	eq
 800dc28:	6819      	ldreq	r1, [r3, #0]
 800dc2a:	685b      	ldreq	r3, [r3, #4]
 800dc2c:	6063      	str	r3, [r4, #4]
 800dc2e:	bf04      	itt	eq
 800dc30:	1809      	addeq	r1, r1, r0
 800dc32:	6021      	streq	r1, [r4, #0]
 800dc34:	6054      	str	r4, [r2, #4]
 800dc36:	e7ca      	b.n	800dbce <_free_r+0x22>
 800dc38:	bd38      	pop	{r3, r4, r5, pc}
 800dc3a:	bf00      	nop
 800dc3c:	200029dc 	.word	0x200029dc

0800dc40 <_init>:
 800dc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc42:	bf00      	nop
 800dc44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc46:	bc08      	pop	{r3}
 800dc48:	469e      	mov	lr, r3
 800dc4a:	4770      	bx	lr

0800dc4c <_fini>:
 800dc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc4e:	bf00      	nop
 800dc50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc52:	bc08      	pop	{r3}
 800dc54:	469e      	mov	lr, r3
 800dc56:	4770      	bx	lr
