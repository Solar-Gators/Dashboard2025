
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ea0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800a050  0800a050  0000b050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a174  0800a174  0000c064  2**0
                  CONTENTS
  4 .ARM          00000008  0800a174  0800a174  0000b174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a17c  0800a17c  0000c064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a17c  0800a17c  0000b17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a180  0800a180  0000b180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800a184  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d20  20000064  0800a1e8  0000c064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d84  0800a1e8  0000cd84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026563  00000000  00000000  0000c094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000497f  00000000  00000000  000325f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002078  00000000  00000000  00036f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000196d  00000000  00000000  00038ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd6f  00000000  00000000  0003a95d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000258bc  00000000  00000000  000686cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012437f  00000000  00000000  0008df88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b2307  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f00  00000000  00000000  001b234c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001bb24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a038 	.word	0x0800a038

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	0800a038 	.word	0x0800a038

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <TCAL9538RSVR_INIT>:
*/



uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	4611      	mov	r1, r2
 80004ec:	461a      	mov	r2, r3
 80004ee:	460b      	mov	r3, r1
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	4613      	mov	r3, r2
 80004f4:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;
	dev->input = direction_bitMask;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	79ba      	ldrb	r2, [r7, #6]
 80004fe:	719a      	strb	r2, [r3, #6]


    dev->i2cHandle = i2cHandle;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	601a      	str	r2, [r3, #0]
    dev->portValues = 0;
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	2200      	movs	r2, #0
 800050a:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	f003 0303 	and.w	r3, r3, #3
 8000512:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress<<1);
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	b25b      	sxtb	r3, r3
 800051a:	f063 031f 	orn	r3, r3, #31
 800051e:	b25b      	sxtb	r3, r3
 8000520:	b2da      	uxtb	r2, r3
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	711a      	strb	r2, [r3, #4]
    uint8_t hold_bitMask = direction_bitMask;
 8000526:	79bb      	ldrb	r3, [r7, #6]
 8000528:	757b      	strb	r3, [r7, #21]

    status = TCAL9538RSVR_SetDirection(dev, &hold_bitMask);
 800052a:	f107 0315 	add.w	r3, r7, #21
 800052e:	4619      	mov	r1, r3
 8000530:	68f8      	ldr	r0, [r7, #12]
 8000532:	f000 f838 	bl	80005a6 <TCAL9538RSVR_SetDirection>
 8000536:	4603      	mov	r3, r0
 8000538:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 800053a:	7dbb      	ldrb	r3, [r7, #22]
 800053c:	2b00      	cmp	r3, #0
 800053e:	bf14      	ite	ne
 8000540:	2301      	movne	r3, #1
 8000542:	2300      	moveq	r3, #0
 8000544:	b2db      	uxtb	r3, r3
 8000546:	461a      	mov	r2, r3
 8000548:	7dfb      	ldrb	r3, [r7, #23]
 800054a:	4413      	add	r3, r2
 800054c:	75fb      	strb	r3, [r7, #23]

//    TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, &hold_bitMask);

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 800054e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000552:	4619      	mov	r1, r3
 8000554:	68f8      	ldr	r0, [r7, #12]
 8000556:	f000 f835 	bl	80005c4 <TCAL9538RSVR_SetInterrupts>
 800055a:	4603      	mov	r3, r0
 800055c:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 800055e:	7dbb      	ldrb	r3, [r7, #22]
 8000560:	2b00      	cmp	r3, #0
 8000562:	bf14      	ite	ne
 8000564:	2301      	movne	r3, #1
 8000566:	2300      	moveq	r3, #0
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	7dfb      	ldrb	r3, [r7, #23]
 800056e:	4413      	add	r3, r2
 8000570:	75fb      	strb	r3, [r7, #23]

    uint8_t full = 0xFF;
 8000572:	23ff      	movs	r3, #255	@ 0xff
 8000574:	753b      	strb	r3, [r7, #20]
//    {
//    	status = TCAL9538RSVR_WriteRegister(dev, 0x42, &full);
//    	errNum += (status != HAL_OK);
//    }

    status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_INVERSION, &full);
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	461a      	mov	r2, r3
 800057c:	2102      	movs	r1, #2
 800057e:	68f8      	ldr	r0, [r7, #12]
 8000580:	f000 f894 	bl	80006ac <TCAL9538RSVR_WriteRegister>
 8000584:	4603      	mov	r3, r0
 8000586:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8000588:	7dbb      	ldrb	r3, [r7, #22]
 800058a:	2b00      	cmp	r3, #0
 800058c:	bf14      	ite	ne
 800058e:	2301      	movne	r3, #1
 8000590:	2300      	moveq	r3, #0
 8000592:	b2db      	uxtb	r3, r3
 8000594:	461a      	mov	r2, r3
 8000596:	7dfb      	ldrb	r3, [r7, #23]
 8000598:	4413      	add	r3, r2
 800059a:	75fb      	strb	r3, [r7, #23]

    return (errNum);
 800059c:	7dfb      	ldrb	r3, [r7, #23]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3718      	adds	r7, #24
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t* bitMask)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
 80005ae:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, bitMask);
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	2103      	movs	r1, #3
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f000 f879 	bl	80006ac <TCAL9538RSVR_WriteRegister>
 80005ba:	4603      	mov	r3, r0
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 80005d0:	1cfb      	adds	r3, r7, #3
 80005d2:	461a      	mov	r2, r3
 80005d4:	2145      	movs	r1, #69	@ 0x45
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 f868 	bl	80006ac <TCAL9538RSVR_WriteRegister>
 80005dc:	4603      	mov	r3, r0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b084      	sub	sp, #16
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    uint8_t triggeredInterrupts = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	737b      	strb	r3, [r7, #13]


    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 80005f6:	f107 030d 	add.w	r3, r7, #13
 80005fa:	461a      	mov	r2, r3
 80005fc:	2146      	movs	r1, #70	@ 0x46
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 f837 	bl	8000672 <TCAL9538RSVR_ReadRegister>
 8000604:	4603      	mov	r3, r0
 8000606:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	2b00      	cmp	r3, #0
 800060c:	bf14      	ite	ne
 800060e:	2301      	movne	r3, #1
 8000610:	2300      	moveq	r3, #0
 8000612:	b2db      	uxtb	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	4413      	add	r3, r2
 800061a:	73fb      	strb	r3, [r7, #15]

    // Read updated input values
    status = TCAL9538RSVR_ReadInput(dev, &dev->portValues);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3305      	adds	r3, #5
 8000620:	4619      	mov	r1, r3
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f000 f807 	bl	8000636 <TCAL9538RSVR_ReadInput>
 8000628:	4603      	mov	r3, r0
 800062a:	73bb      	strb	r3, [r7, #14]


    return (errNum);
 800062c:	7bfb      	ldrb	r3, [r7, #15]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <TCAL9538RSVR_ReadInput>:




HAL_StatusTypeDef TCAL9538RSVR_ReadInput(TCAL9538RSVR* dev, uint8_t *data)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
 800063e:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, data);
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	2100      	movs	r1, #0
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f000 f814 	bl	8000672 <TCAL9538RSVR_ReadRegister>
 800064a:	4603      	mov	r3, r0
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <TCAL9538RSVR_SetOutput>:
HAL_StatusTypeDef TCAL9538RSVR_SetOutput(TCAL9538RSVR* dev, uint8_t *data)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	2101      	movs	r1, #1
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f000 f822 	bl	80006ac <TCAL9538RSVR_WriteRegister>
 8000668:	4603      	mov	r3, r0
}
 800066a:	4618      	mov	r0, r3
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <TCAL9538RSVR_ReadRegister>:

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b088      	sub	sp, #32
 8000676:	af04      	add	r7, sp, #16
 8000678:	60f8      	str	r0, [r7, #12]
 800067a:	460b      	mov	r3, r1
 800067c:	607a      	str	r2, [r7, #4]
 800067e:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	6818      	ldr	r0, [r3, #0]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	791b      	ldrb	r3, [r3, #4]
 8000688:	4619      	mov	r1, r3
 800068a:	7afb      	ldrb	r3, [r7, #11]
 800068c:	b29a      	uxth	r2, r3
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	9302      	str	r3, [sp, #8]
 8000694:	2301      	movs	r3, #1
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2301      	movs	r3, #1
 800069e:	f002 fe3b 	bl	8003318 <HAL_I2C_Mem_Read>
 80006a2:	4603      	mov	r3, r0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af04      	add	r7, sp, #16
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	460b      	mov	r3, r1
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Write(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	6818      	ldr	r0, [r3, #0]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	791b      	ldrb	r3, [r3, #4]
 80006c2:	4619      	mov	r1, r3
 80006c4:	7afb      	ldrb	r3, [r7, #11]
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	f04f 33ff 	mov.w	r3, #4294967295
 80006cc:	9302      	str	r3, [sp, #8]
 80006ce:	2301      	movs	r3, #1
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2301      	movs	r3, #1
 80006d8:	f002 fd0a 	bl	80030f0 <HAL_I2C_Mem_Write>
 80006dc:	4603      	mov	r3, r0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <Update_CAN_Message1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Update_CAN_Message1(uint8_t flags[8], uint8_t* Input1, uint8_t* Input2)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b087      	sub	sp, #28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]

	static uint8_t prev_input1 = 0;
	static uint8_t prev_input2 = 0;


	flags[3] = 0;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	3303      	adds	r3, #3
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
	flags[4] = 0;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	3304      	adds	r3, #4
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]


	// Detect rising edges for each flag
	uint8_t risingEdges_flag1 = (~prev_input1) & *Input1;
 8000704:	4b77      	ldr	r3, [pc, #476]	@ (80008e4 <Update_CAN_Message1+0x1fc>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b25b      	sxtb	r3, r3
 800070a:	43db      	mvns	r3, r3
 800070c:	b25a      	sxtb	r2, r3
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b25b      	sxtb	r3, r3
 8000714:	4013      	ands	r3, r2
 8000716:	b25b      	sxtb	r3, r3
 8000718:	75fb      	strb	r3, [r7, #23]
	uint8_t risingEdges_flag2 = (~prev_input2) & *Input2;
 800071a:	4b73      	ldr	r3, [pc, #460]	@ (80008e8 <Update_CAN_Message1+0x200>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	b25b      	sxtb	r3, r3
 8000720:	43db      	mvns	r3, r3
 8000722:	b25a      	sxtb	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b25b      	sxtb	r3, r3
 800072a:	4013      	ands	r3, r2
 800072c:	b25b      	sxtb	r3, r3
 800072e:	75bb      	strb	r3, [r7, #22]


	flags[1] ^= CHECK_BIT(risingEdges_flag2, 4) << 0; // Main
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	3301      	adds	r3, #1
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b25a      	sxtb	r2, r3
 8000738:	7dbb      	ldrb	r3, [r7, #22]
 800073a:	f003 0310 	and.w	r3, r3, #16
 800073e:	2b00      	cmp	r3, #0
 8000740:	bf14      	ite	ne
 8000742:	2301      	movne	r3, #1
 8000744:	2300      	moveq	r3, #0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	b25b      	sxtb	r3, r3
 800074a:	4053      	eors	r3, r2
 800074c:	b25a      	sxtb	r2, r3
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	3301      	adds	r3, #1
 8000752:	b2d2      	uxtb	r2, r2
 8000754:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 5) << 1; // Break
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	3301      	adds	r3, #1
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b25a      	sxtb	r2, r3
 800075e:	7dbb      	ldrb	r3, [r7, #22]
 8000760:	111b      	asrs	r3, r3, #4
 8000762:	b25b      	sxtb	r3, r3
 8000764:	f003 0302 	and.w	r3, r3, #2
 8000768:	b25b      	sxtb	r3, r3
 800076a:	4053      	eors	r3, r2
 800076c:	b25a      	sxtb	r2, r3
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3301      	adds	r3, #1
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 0) << 2; // Mode
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	3301      	adds	r3, #1
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	b25a      	sxtb	r2, r3
 800077e:	7dbb      	ldrb	r3, [r7, #22]
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	b25b      	sxtb	r3, r3
 8000784:	f003 0304 	and.w	r3, r3, #4
 8000788:	b25b      	sxtb	r3, r3
 800078a:	4053      	eors	r3, r2
 800078c:	b25a      	sxtb	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3301      	adds	r3, #1
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 5) << 3; // MC
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	3301      	adds	r3, #1
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b25a      	sxtb	r2, r3
 800079e:	7dfb      	ldrb	r3, [r7, #23]
 80007a0:	109b      	asrs	r3, r3, #2
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	f003 0308 	and.w	r3, r3, #8
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	4053      	eors	r3, r2
 80007ac:	b25a      	sxtb	r2, r3
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3301      	adds	r3, #1
 80007b2:	b2d2      	uxtb	r2, r2
 80007b4:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 6) << 4; // Array
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	3301      	adds	r3, #1
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b25a      	sxtb	r2, r3
 80007be:	7dfb      	ldrb	r3, [r7, #23]
 80007c0:	109b      	asrs	r3, r3, #2
 80007c2:	b25b      	sxtb	r3, r3
 80007c4:	f003 0310 	and.w	r3, r3, #16
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	4053      	eors	r3, r2
 80007cc:	b25a      	sxtb	r2, r3
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	3301      	adds	r3, #1
 80007d2:	b2d2      	uxtb	r2, r2
 80007d4:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 4) << 5; // Extra 1
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	3301      	adds	r3, #1
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b25a      	sxtb	r2, r3
 80007de:	7dfb      	ldrb	r3, [r7, #23]
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	b25b      	sxtb	r3, r3
 80007e4:	f003 0320 	and.w	r3, r3, #32
 80007e8:	b25b      	sxtb	r3, r3
 80007ea:	4053      	eors	r3, r2
 80007ec:	b25a      	sxtb	r2, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	3301      	adds	r3, #1
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	701a      	strb	r2, [r3, #0]
	flags[1] |= CHECK_BIT(outputPortState, 5) << 6; // Horn
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	3301      	adds	r3, #1
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b25a      	sxtb	r2, r3
 80007fe:	4b3b      	ldr	r3, [pc, #236]	@ (80008ec <Update_CAN_Message1+0x204>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	b25b      	sxtb	r3, r3
 8000806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800080a:	b25b      	sxtb	r3, r3
 800080c:	4313      	orrs	r3, r2
 800080e:	b25a      	sxtb	r2, r3
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	3301      	adds	r3, #1
 8000814:	b2d2      	uxtb	r2, r2
 8000816:	701a      	strb	r2, [r3, #0]
	flags[1] |= CHECK_BIT(outputPortState, 6) << 7; // PTT
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	3301      	adds	r3, #1
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	b25a      	sxtb	r2, r3
 8000820:	4b32      	ldr	r3, [pc, #200]	@ (80008ec <Update_CAN_Message1+0x204>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	b25b      	sxtb	r3, r3
 8000828:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800082c:	b25b      	sxtb	r3, r3
 800082e:	4313      	orrs	r3, r2
 8000830:	b25a      	sxtb	r2, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	3301      	adds	r3, #1
 8000836:	b2d2      	uxtb	r2, r2
 8000838:	701a      	strb	r2, [r3, #0]


	flags[2] |= CHECK_BIT(outputPortState, 2) << 0; // Blinkers
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	3302      	adds	r3, #2
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b25a      	sxtb	r2, r3
 8000842:	4b2a      	ldr	r3, [pc, #168]	@ (80008ec <Update_CAN_Message1+0x204>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	2b00      	cmp	r3, #0
 800084c:	bf14      	ite	ne
 800084e:	2301      	movne	r3, #1
 8000850:	2300      	moveq	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	b25b      	sxtb	r3, r3
 8000856:	4313      	orrs	r3, r2
 8000858:	b25a      	sxtb	r2, r3
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	3302      	adds	r3, #2
 800085e:	b2d2      	uxtb	r2, r2
 8000860:	701a      	strb	r2, [r3, #0]
	flags[2] |= CHECK_BIT(outputPortState, 0) << 1; // Left Turn Signal
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	3302      	adds	r3, #2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b25a      	sxtb	r2, r3
 800086a:	4b20      	ldr	r3, [pc, #128]	@ (80008ec <Update_CAN_Message1+0x204>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	b25b      	sxtb	r3, r3
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	b25b      	sxtb	r3, r3
 8000878:	4313      	orrs	r3, r2
 800087a:	b25a      	sxtb	r2, r3
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	3302      	adds	r3, #2
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	701a      	strb	r2, [r3, #0]
	flags[2] |= CHECK_BIT(outputPortState, 1) << 2; // Right Turn Signal
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	3302      	adds	r3, #2
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	b25a      	sxtb	r2, r3
 800088c:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <Update_CAN_Message1+0x204>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	b25b      	sxtb	r3, r3
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	b25b      	sxtb	r3, r3
 800089a:	4313      	orrs	r3, r2
 800089c:	b25a      	sxtb	r2, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3302      	adds	r3, #2
 80008a2:	b2d2      	uxtb	r2, r2
 80008a4:	701a      	strb	r2, [r3, #0]
	flags[2] ^= CHECK_BIT(risingEdges_flag1, 7) << 3; //?
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	3302      	adds	r3, #2
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b25a      	sxtb	r2, r3
 80008ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80008b2:	111b      	asrs	r3, r3, #4
 80008b4:	b25b      	sxtb	r3, r3
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	b25b      	sxtb	r3, r3
 80008bc:	4053      	eors	r3, r2
 80008be:	b25a      	sxtb	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	3302      	adds	r3, #2
 80008c4:	b2d2      	uxtb	r2, r2
 80008c6:	701a      	strb	r2, [r3, #0]



	prev_input1 = *Input1;
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	4b05      	ldr	r3, [pc, #20]	@ (80008e4 <Update_CAN_Message1+0x1fc>)
 80008ce:	701a      	strb	r2, [r3, #0]
	prev_input2 = *Input2;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	4b04      	ldr	r3, [pc, #16]	@ (80008e8 <Update_CAN_Message1+0x200>)
 80008d6:	701a      	strb	r2, [r3, #0]

}
 80008d8:	bf00      	nop
 80008da:	371c      	adds	r7, #28
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	2000024b 	.word	0x2000024b
 80008e8:	2000024c 	.word	0x2000024c
 80008ec:	20000000 	.word	0x20000000

080008f0 <HAL_GPIO_EXTI_Callback>:
	 * */
}

// GPIO Expander Interrupt Handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	80fb      	strh	r3, [r7, #6]
	GPIO_Interrupt_Triggered = 1;
 80008fa:	4b04      	ldr	r3, [pc, #16]	@ (800090c <HAL_GPIO_EXTI_Callback+0x1c>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	701a      	strb	r2, [r3, #0]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	2000023c 	.word	0x2000023c

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000916:	f000 fec2 	bl	800169e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091a:	f000 f889 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091e:	f000 fa1b 	bl	8000d58 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000922:	f000 f8cb 	bl	8000abc <MX_ADC1_Init>
  MX_I2C4_Init();
 8000926:	f000 f9a7 	bl	8000c78 <MX_I2C4_Init>
  MX_CAN1_Init();
 800092a:	f000 f93d 	bl	8000ba8 <MX_CAN1_Init>
  MX_CAN2_Init();
 800092e:	f000 f96f 	bl	8000c10 <MX_CAN2_Init>
  MX_UART4_Init();
 8000932:	f000 f9e1 	bl	8000cf8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  if (TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0xFF, 0x00) != HAL_OK) { Error_Handler(); } // inputs
 8000936:	2300      	movs	r3, #0
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	23ff      	movs	r3, #255	@ 0xff
 800093c:	2202      	movs	r2, #2
 800093e:	492a      	ldr	r1, [pc, #168]	@ (80009e8 <main+0xd8>)
 8000940:	482a      	ldr	r0, [pc, #168]	@ (80009ec <main+0xdc>)
 8000942:	f7ff fdcd 	bl	80004e0 <TCAL9538RSVR_INIT>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <main+0x40>
 800094c:	f000 fbca 	bl	80010e4 <Error_Handler>
  uint8_t reg_read_hold;
  TCAL9538RSVR_ReadRegister(&U5, 0x45, &reg_read_hold);
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	461a      	mov	r2, r3
 8000954:	2145      	movs	r1, #69	@ 0x45
 8000956:	4825      	ldr	r0, [pc, #148]	@ (80009ec <main+0xdc>)
 8000958:	f7ff fe8b 	bl	8000672 <TCAL9538RSVR_ReadRegister>
  //if (TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b00111111, 0b11000000) != HAL_OK) { Error_Handler(); }
  if (TCAL9538RSVR_INIT(&U7, &hi2c4, 0x00, 0b00000000, 0b00000000) != HAL_OK) { Error_Handler(); } // output
 800095c:	2300      	movs	r3, #0
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	2300      	movs	r3, #0
 8000962:	2200      	movs	r2, #0
 8000964:	4920      	ldr	r1, [pc, #128]	@ (80009e8 <main+0xd8>)
 8000966:	4822      	ldr	r0, [pc, #136]	@ (80009f0 <main+0xe0>)
 8000968:	f7ff fdba 	bl	80004e0 <TCAL9538RSVR_INIT>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <main+0x66>
 8000972:	f000 fbb7 	bl	80010e4 <Error_Handler>

  // set outputs to low to start
  outputPortState &= ~OUTPUT_L_HEAD_CTRL;
 8000976:	4b1f      	ldr	r3, [pc, #124]	@ (80009f4 <main+0xe4>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	f023 0304 	bic.w	r3, r3, #4
 800097e:	b2da      	uxtb	r2, r3
 8000980:	4b1c      	ldr	r3, [pc, #112]	@ (80009f4 <main+0xe4>)
 8000982:	701a      	strb	r2, [r3, #0]
  TCAL9538RSVR_SetOutput(&U7, &outputPortState);
 8000984:	491b      	ldr	r1, [pc, #108]	@ (80009f4 <main+0xe4>)
 8000986:	481a      	ldr	r0, [pc, #104]	@ (80009f0 <main+0xe0>)
 8000988:	f7ff fe64 	bl	8000654 <TCAL9538RSVR_SetOutput>


  HAL_CAN_Start(&hcan1);
 800098c:	481a      	ldr	r0, [pc, #104]	@ (80009f8 <main+0xe8>)
 800098e:	f001 ff90 	bl	80028b2 <HAL_CAN_Start>


  HAL_UART_Receive_IT(&huart4, &uart_rx, 1); // enables uart interrupt, it will call the interrupt when one byte is recieved
 8000992:	2201      	movs	r2, #1
 8000994:	4919      	ldr	r1, [pc, #100]	@ (80009fc <main+0xec>)
 8000996:	481a      	ldr	r0, [pc, #104]	@ (8000a00 <main+0xf0>)
 8000998:	f004 ffe4 	bl	8005964 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800099c:	f006 fb38 	bl	8007010 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CAN_Mutex */
  CAN_MutexHandle = osSemaphoreNew(1, 1, &CAN_Mutex_attributes);
 80009a0:	4a18      	ldr	r2, [pc, #96]	@ (8000a04 <main+0xf4>)
 80009a2:	2101      	movs	r1, #1
 80009a4:	2001      	movs	r0, #1
 80009a6:	f006 fc2a 	bl	80071fe <osSemaphoreNew>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4a16      	ldr	r2, [pc, #88]	@ (8000a08 <main+0xf8>)
 80009ae:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartTask01, NULL, &HeartBeat_attributes);
 80009b0:	4a16      	ldr	r2, [pc, #88]	@ (8000a0c <main+0xfc>)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4816      	ldr	r0, [pc, #88]	@ (8000a10 <main+0x100>)
 80009b6:	f006 fb75 	bl	80070a4 <osThreadNew>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a15      	ldr	r2, [pc, #84]	@ (8000a14 <main+0x104>)
 80009be:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  //Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 80009c0:	4a15      	ldr	r2, [pc, #84]	@ (8000a18 <main+0x108>)
 80009c2:	2100      	movs	r1, #0
 80009c4:	4815      	ldr	r0, [pc, #84]	@ (8000a1c <main+0x10c>)
 80009c6:	f006 fb6d 	bl	80070a4 <osThreadNew>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4a14      	ldr	r2, [pc, #80]	@ (8000a20 <main+0x110>)
 80009ce:	6013      	str	r3, [r2, #0]

  /* creation of Outputs_Control */
  Outputs_ControlHandle = osThreadNew(StartTask04, NULL, &Outputs_Control_attributes);
 80009d0:	4a14      	ldr	r2, [pc, #80]	@ (8000a24 <main+0x114>)
 80009d2:	2100      	movs	r1, #0
 80009d4:	4814      	ldr	r0, [pc, #80]	@ (8000a28 <main+0x118>)
 80009d6:	f006 fb65 	bl	80070a4 <osThreadNew>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a13      	ldr	r2, [pc, #76]	@ (8000a2c <main+0x11c>)
 80009de:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009e0:	f006 fb3a 	bl	8007058 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <main+0xd4>
 80009e8:	20000138 	.word	0x20000138
 80009ec:	20000224 	.word	0x20000224
 80009f0:	20000234 	.word	0x20000234
 80009f4:	20000000 	.word	0x20000000
 80009f8:	200000e8 	.word	0x200000e8
 80009fc:	20000248 	.word	0x20000248
 8000a00:	2000018c 	.word	0x2000018c
 8000a04:	0800a11c 	.word	0x0800a11c
 8000a08:	20000220 	.word	0x20000220
 8000a0c:	0800a0b0 	.word	0x0800a0b0
 8000a10:	08000f51 	.word	0x08000f51
 8000a14:	20000214 	.word	0x20000214
 8000a18:	0800a0d4 	.word	0x0800a0d4
 8000a1c:	08000f81 	.word	0x08000f81
 8000a20:	20000218 	.word	0x20000218
 8000a24:	0800a0f8 	.word	0x0800a0f8
 8000a28:	08001011 	.word	0x08001011
 8000a2c:	2000021c 	.word	0x2000021c

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b096      	sub	sp, #88	@ 0x58
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	2244      	movs	r2, #68	@ 0x44
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f009 fa12 	bl	8009e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a52:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a56:	f003 f8e1 	bl	8003c1c <HAL_PWREx_ControlVoltageScaling>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a60:	f000 fb40 	bl	80010e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a64:	2310      	movs	r3, #16
 8000a66:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a70:	2360      	movs	r3, #96	@ 0x60
 8000a72:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f003 f923 	bl	8003cc8 <HAL_RCC_OscConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000a88:	f000 fb2c 	bl	80010e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f003 fd29 	bl	80044fc <HAL_RCC_ClockConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ab0:	f000 fb18 	bl	80010e4 <Error_Handler>
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3758      	adds	r7, #88	@ 0x58
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	@ 0x28
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
 8000adc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ade:	4b2f      	ldr	r3, [pc, #188]	@ (8000b9c <MX_ADC1_Init+0xe0>)
 8000ae0:	4a2f      	ldr	r2, [pc, #188]	@ (8000ba0 <MX_ADC1_Init+0xe4>)
 8000ae2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8000b9c <MX_ADC1_Init+0xe0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aea:	4b2c      	ldr	r3, [pc, #176]	@ (8000b9c <MX_ADC1_Init+0xe0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000af0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b9c <MX_ADC1_Init+0xe0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000af6:	4b29      	ldr	r3, [pc, #164]	@ (8000b9c <MX_ADC1_Init+0xe0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000afc:	4b27      	ldr	r3, [pc, #156]	@ (8000b9c <MX_ADC1_Init+0xe0>)
 8000afe:	2204      	movs	r2, #4
 8000b00:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b02:	4b26      	ldr	r3, [pc, #152]	@ (8000b9c <MX_ADC1_Init+0xe0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b08:	4b24      	ldr	r3, [pc, #144]	@ (8000b9c <MX_ADC1_Init+0xe0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000b0e:	4b23      	ldr	r3, [pc, #140]	@ (8000b9c <MX_ADC1_Init+0xe0>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b14:	4b21      	ldr	r3, [pc, #132]	@ (8000b9c <MX_ADC1_Init+0xe0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b9c <MX_ADC1_Init+0xe0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b22:	4b1e      	ldr	r3, [pc, #120]	@ (8000b9c <MX_ADC1_Init+0xe0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b28:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <MX_ADC1_Init+0xe0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <MX_ADC1_Init+0xe0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b36:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <MX_ADC1_Init+0xe0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b3e:	4817      	ldr	r0, [pc, #92]	@ (8000b9c <MX_ADC1_Init+0xe0>)
 8000b40:	f000 ff86 	bl	8001a50 <HAL_ADC_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000b4a:	f000 facb 	bl	80010e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4810      	ldr	r0, [pc, #64]	@ (8000b9c <MX_ADC1_Init+0xe0>)
 8000b5a:	f001 fcff 	bl	800255c <HAL_ADCEx_MultiModeConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b64:	f000 fabe 	bl	80010e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <MX_ADC1_Init+0xe8>)
 8000b6a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b6c:	2306      	movs	r3, #6
 8000b6e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b74:	237f      	movs	r3, #127	@ 0x7f
 8000b76:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <MX_ADC1_Init+0xe0>)
 8000b86:	f001 f8b7 	bl	8001cf8 <HAL_ADC_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000b90:	f000 faa8 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	@ 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000080 	.word	0x20000080
 8000ba0:	50040000 	.word	0x50040000
 8000ba4:	04300002 	.word	0x04300002

08000ba8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000bac:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <MX_CAN1_Init+0x60>)
 8000bae:	4a17      	ldr	r2, [pc, #92]	@ (8000c0c <MX_CAN1_Init+0x64>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <MX_CAN1_Init+0x60>)
 8000bb4:	2210      	movs	r2, #16
 8000bb6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <MX_CAN1_Init+0x60>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <MX_CAN1_Init+0x60>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000bc4:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <MX_CAN1_Init+0x60>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000bca:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <MX_CAN1_Init+0x60>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c08 <MX_CAN1_Init+0x60>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <MX_CAN1_Init+0x60>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <MX_CAN1_Init+0x60>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <MX_CAN1_Init+0x60>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000be8:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <MX_CAN1_Init+0x60>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000bee:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <MX_CAN1_Init+0x60>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	@ (8000c08 <MX_CAN1_Init+0x60>)
 8000bf6:	f001 fd61 	bl	80026bc <HAL_CAN_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000c00:	f000 fa70 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200000e8 	.word	0x200000e8
 8000c0c:	40006400 	.word	0x40006400

08000c10 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000c14:	4b16      	ldr	r3, [pc, #88]	@ (8000c70 <MX_CAN2_Init+0x60>)
 8000c16:	4a17      	ldr	r2, [pc, #92]	@ (8000c74 <MX_CAN2_Init+0x64>)
 8000c18:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <MX_CAN2_Init+0x60>)
 8000c1c:	2210      	movs	r2, #16
 8000c1e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000c20:	4b13      	ldr	r3, [pc, #76]	@ (8000c70 <MX_CAN2_Init+0x60>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c26:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <MX_CAN2_Init+0x60>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <MX_CAN2_Init+0x60>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c32:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <MX_CAN2_Init+0x60>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000c38:	4b0d      	ldr	r3, [pc, #52]	@ (8000c70 <MX_CAN2_Init+0x60>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <MX_CAN2_Init+0x60>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000c44:	4b0a      	ldr	r3, [pc, #40]	@ (8000c70 <MX_CAN2_Init+0x60>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <MX_CAN2_Init+0x60>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000c50:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <MX_CAN2_Init+0x60>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <MX_CAN2_Init+0x60>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	@ (8000c70 <MX_CAN2_Init+0x60>)
 8000c5e:	f001 fd2d 	bl	80026bc <HAL_CAN_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000c68:	f000 fa3c 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000110 	.word	0x20000110
 8000c74:	40006800 	.word	0x40006800

08000c78 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cec <MX_I2C4_Init+0x74>)
 8000c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf0 <MX_I2C4_Init+0x78>)
 8000c80:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	@ (8000cec <MX_I2C4_Init+0x74>)
 8000c84:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf4 <MX_I2C4_Init+0x7c>)
 8000c86:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000c88:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <MX_I2C4_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <MX_I2C4_Init+0x74>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c94:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <MX_I2C4_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <MX_I2C4_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <MX_I2C4_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <MX_I2C4_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <MX_I2C4_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000cb2:	480e      	ldr	r0, [pc, #56]	@ (8000cec <MX_I2C4_Init+0x74>)
 8000cb4:	f002 f980 	bl	8002fb8 <HAL_I2C_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000cbe:	f000 fa11 	bl	80010e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4809      	ldr	r0, [pc, #36]	@ (8000cec <MX_I2C4_Init+0x74>)
 8000cc6:	f002 ff03 	bl	8003ad0 <HAL_I2CEx_ConfigAnalogFilter>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000cd0:	f000 fa08 	bl	80010e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4805      	ldr	r0, [pc, #20]	@ (8000cec <MX_I2C4_Init+0x74>)
 8000cd8:	f002 ff45 	bl	8003b66 <HAL_I2CEx_ConfigDigitalFilter>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000ce2:	f000 f9ff 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000138 	.word	0x20000138
 8000cf0:	40008400 	.word	0x40008400
 8000cf4:	00100d14 	.word	0x00100d14

08000cf8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000cfc:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <MX_UART4_Init+0x58>)
 8000cfe:	4a15      	ldr	r2, [pc, #84]	@ (8000d54 <MX_UART4_Init+0x5c>)
 8000d00:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000d02:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <MX_UART4_Init+0x58>)
 8000d04:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d08:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <MX_UART4_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <MX_UART4_Init+0x58>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <MX_UART4_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <MX_UART4_Init+0x58>)
 8000d1e:	220c      	movs	r2, #12
 8000d20:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <MX_UART4_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d28:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <MX_UART4_Init+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <MX_UART4_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <MX_UART4_Init+0x58>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d3a:	4805      	ldr	r0, [pc, #20]	@ (8000d50 <MX_UART4_Init+0x58>)
 8000d3c:	f004 fdc4 	bl	80058c8 <HAL_UART_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000d46:	f000 f9cd 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2000018c 	.word	0x2000018c
 8000d54:	40004c00 	.word	0x40004c00

08000d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e18 <MX_GPIO_Init+0xc0>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d72:	4a29      	ldr	r2, [pc, #164]	@ (8000e18 <MX_GPIO_Init+0xc0>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7a:	4b27      	ldr	r3, [pc, #156]	@ (8000e18 <MX_GPIO_Init+0xc0>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	4b24      	ldr	r3, [pc, #144]	@ (8000e18 <MX_GPIO_Init+0xc0>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8a:	4a23      	ldr	r2, [pc, #140]	@ (8000e18 <MX_GPIO_Init+0xc0>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d92:	4b21      	ldr	r3, [pc, #132]	@ (8000e18 <MX_GPIO_Init+0xc0>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e18 <MX_GPIO_Init+0xc0>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e18 <MX_GPIO_Init+0xc0>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000daa:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <MX_GPIO_Init+0xc0>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OK_LED_GPIO_Port, OK_LED_Pin, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc0:	f002 f8b0 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Alert1_Pin */
  GPIO_InitStruct.Pin = Alert1_Pin;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dc8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Alert1_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4810      	ldr	r0, [pc, #64]	@ (8000e1c <MX_GPIO_Init+0xc4>)
 8000dda:	f001 ff11 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OK_LED_Pin */
  GPIO_InitStruct.Pin = OK_LED_Pin;
 8000dde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000de2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OK_LED_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	4619      	mov	r1, r3
 8000df6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfa:	f001 ff01 	bl	8002c00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2105      	movs	r1, #5
 8000e02:	2008      	movs	r0, #8
 8000e04:	f001 fe52 	bl	8002aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e08:	2008      	movs	r0, #8
 8000e0a:	f001 fe6b 	bl	8002ae4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e0e:	bf00      	nop
 8000e10:	3720      	adds	r7, #32
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	48000800 	.word	0x48000800

08000e20 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  if (huart->Instance == UART4)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a42      	ldr	r2, [pc, #264]	@ (8000f38 <HAL_UART_RxCpltCallback+0x118>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d179      	bne.n	8000f26 <HAL_UART_RxCpltCallback+0x106>
  {
    uint8_t new_presses = uart_rx & ~prev_uart_rx;
 8000e32:	4b42      	ldr	r3, [pc, #264]	@ (8000f3c <HAL_UART_RxCpltCallback+0x11c>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	b25a      	sxtb	r2, r3
 8000e3c:	4b40      	ldr	r3, [pc, #256]	@ (8000f40 <HAL_UART_RxCpltCallback+0x120>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b25b      	sxtb	r3, r3
 8000e42:	4013      	ands	r3, r2
 8000e44:	b25b      	sxtb	r3, r3
 8000e46:	73fb      	strb	r3, [r7, #15]

    // if left turn button was pressed
    if (new_presses & BUTTON_LEFT_TURN)
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00a      	beq.n	8000e68 <HAL_UART_RxCpltCallback+0x48>
    {
      if (lightState == LIGHTS_LEFT)
 8000e52:	4b3c      	ldr	r3, [pc, #240]	@ (8000f44 <HAL_UART_RxCpltCallback+0x124>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d103      	bne.n	8000e62 <HAL_UART_RxCpltCallback+0x42>
        lightState = LIGHTS_NONE;
 8000e5a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f44 <HAL_UART_RxCpltCallback+0x124>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
 8000e60:	e002      	b.n	8000e68 <HAL_UART_RxCpltCallback+0x48>
      else
        lightState = LIGHTS_LEFT;
 8000e62:	4b38      	ldr	r3, [pc, #224]	@ (8000f44 <HAL_UART_RxCpltCallback+0x124>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
    }

    // if right turn button was pressed
    if (new_presses & BUTTON_RIGHT_TURN)
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d00a      	beq.n	8000e88 <HAL_UART_RxCpltCallback+0x68>
    {
      if (lightState == LIGHTS_RIGHT)
 8000e72:	4b34      	ldr	r3, [pc, #208]	@ (8000f44 <HAL_UART_RxCpltCallback+0x124>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d103      	bne.n	8000e82 <HAL_UART_RxCpltCallback+0x62>
        lightState = LIGHTS_NONE;
 8000e7a:	4b32      	ldr	r3, [pc, #200]	@ (8000f44 <HAL_UART_RxCpltCallback+0x124>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
 8000e80:	e002      	b.n	8000e88 <HAL_UART_RxCpltCallback+0x68>
      else
        lightState = LIGHTS_RIGHT;
 8000e82:	4b30      	ldr	r3, [pc, #192]	@ (8000f44 <HAL_UART_RxCpltCallback+0x124>)
 8000e84:	2202      	movs	r2, #2
 8000e86:	701a      	strb	r2, [r3, #0]
    }

    // if hazard button was pressed
    if (new_presses & BUTTON_HAZARD)
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00a      	beq.n	8000ea8 <HAL_UART_RxCpltCallback+0x88>
    {
      if (lightState == LIGHTS_HAZARD)
 8000e92:	4b2c      	ldr	r3, [pc, #176]	@ (8000f44 <HAL_UART_RxCpltCallback+0x124>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d103      	bne.n	8000ea2 <HAL_UART_RxCpltCallback+0x82>
        lightState = LIGHTS_NONE;
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <HAL_UART_RxCpltCallback+0x124>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
 8000ea0:	e002      	b.n	8000ea8 <HAL_UART_RxCpltCallback+0x88>
      else
        lightState = LIGHTS_HAZARD;
 8000ea2:	4b28      	ldr	r3, [pc, #160]	@ (8000f44 <HAL_UART_RxCpltCallback+0x124>)
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	701a      	strb	r2, [r3, #0]
    }

    // if headlight button was pressed
    if (new_presses & BUTTON_HEADLIGHTS)
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00d      	beq.n	8000ece <HAL_UART_RxCpltCallback+0xae>
    {
      // toggle headlight state
      outputPortState ^= OUTPUT_R_HEAD_CTRL;
 8000eb2:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <HAL_UART_RxCpltCallback+0x128>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	f083 0308 	eor.w	r3, r3, #8
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b22      	ldr	r3, [pc, #136]	@ (8000f48 <HAL_UART_RxCpltCallback+0x128>)
 8000ebe:	701a      	strb	r2, [r3, #0]
      outputPortState ^= OUTPUT_L_HEAD_CTRL;
 8000ec0:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <HAL_UART_RxCpltCallback+0x128>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	f083 0304 	eor.w	r3, r3, #4
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <HAL_UART_RxCpltCallback+0x128>)
 8000ecc:	701a      	strb	r2, [r3, #0]
    }

    // if display button was pressed, (I think this is toggle)
    if (new_presses & BUTTON_DISPLAY)
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	f003 0310 	and.w	r3, r3, #16
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00d      	beq.n	8000ef4 <HAL_UART_RxCpltCallback+0xd4>
    {
      // toggle display state
      outputPortState ^= OUTPUT_FL_LIGHT_CTRL;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <HAL_UART_RxCpltCallback+0x128>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	f083 0310 	eor.w	r3, r3, #16
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <HAL_UART_RxCpltCallback+0x128>)
 8000ee4:	701a      	strb	r2, [r3, #0]
      outputPortState ^= OUTPUT_FR_LIGHT_CTRL;
 8000ee6:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <HAL_UART_RxCpltCallback+0x128>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	f083 0320 	eor.w	r3, r3, #32
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <HAL_UART_RxCpltCallback+0x128>)
 8000ef2:	701a      	strb	r2, [r3, #0]
    }

    // if horn button is being pressed currently
    if (uart_rx & BUTTON_HORN)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_UART_RxCpltCallback+0x120>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	f003 0320 	and.w	r3, r3, #32
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d007      	beq.n	8000f10 <HAL_UART_RxCpltCallback+0xf0>
      outputPortState |= OUTPUT_HORN_CTRL;
 8000f00:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <HAL_UART_RxCpltCallback+0x128>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <HAL_UART_RxCpltCallback+0x128>)
 8000f0c:	701a      	strb	r2, [r3, #0]
 8000f0e:	e006      	b.n	8000f1e <HAL_UART_RxCpltCallback+0xfe>
    else
      outputPortState &= ~OUTPUT_HORN_CTRL;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <HAL_UART_RxCpltCallback+0x128>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	f023 0301 	bic.w	r3, r3, #1
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_UART_RxCpltCallback+0x128>)
 8000f1c:	701a      	strb	r2, [r3, #0]
    TODO: Some code with PTT button (does this just go over can what even is PTT)
    TODO: Some code with Fan (where does fan come from) 
    */


    prev_uart_rx = uart_rx;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <HAL_UART_RxCpltCallback+0x120>)
 8000f20:	781a      	ldrb	r2, [r3, #0]
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <HAL_UART_RxCpltCallback+0x11c>)
 8000f24:	701a      	strb	r2, [r3, #0]
  }

  HAL_UART_Receive_IT(&huart4, &uart_rx, 1); // reenables uart interrupt
 8000f26:	2201      	movs	r2, #1
 8000f28:	4905      	ldr	r1, [pc, #20]	@ (8000f40 <HAL_UART_RxCpltCallback+0x120>)
 8000f2a:	4808      	ldr	r0, [pc, #32]	@ (8000f4c <HAL_UART_RxCpltCallback+0x12c>)
 8000f2c:	f004 fd1a 	bl	8005964 <HAL_UART_Receive_IT>
}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40004c00 	.word	0x40004c00
 8000f3c:	20000249 	.word	0x20000249
 8000f40:	20000248 	.word	0x20000248
 8000f44:	2000024a 	.word	0x2000024a
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	2000018c 	.word	0x2000018c

08000f50 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	//uint8_t var = 0b11111111;
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000f58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f60:	f001 fff8 	bl	8002f54 <HAL_GPIO_TogglePin>
	//var = ~var;
	//TCAL9538RSVR_SetOutput(&U7, &var);
	uint8_t val = TxData[1];
 8000f64:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <StartTask01+0x2c>)
 8000f66:	785b      	ldrb	r3, [r3, #1]
 8000f68:	73fb      	strb	r3, [r7, #15]
	uint8_t val2 = TxData[2];
 8000f6a:	4b04      	ldr	r3, [pc, #16]	@ (8000f7c <StartTask01+0x2c>)
 8000f6c:	789b      	ldrb	r3, [r3, #2]
 8000f6e:	73bb      	strb	r3, [r7, #14]
    osDelay(500);
 8000f70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f74:	f006 f928 	bl	80071c8 <osDelay>
  {
 8000f78:	bf00      	nop
 8000f7a:	e7ed      	b.n	8000f58 <StartTask01+0x8>
 8000f7c:	20000240 	.word	0x20000240

08000f80 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	@ 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */

	int debounce_count = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24

	CAN_TxHeaderTypeDef TxHeader;
	//uint8_t TxData[8] = { 0 };
	uint32_t TxMailbox;

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
	TxHeader.StdId = 0x3FF; // 11 bit Identifier !!Change!!
 8000f90:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8000f94:	60bb      	str	r3, [r7, #8]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	61bb      	str	r3, [r7, #24]

	Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000f9e:	4a17      	ldr	r2, [pc, #92]	@ (8000ffc <StartTask03+0x7c>)
 8000fa0:	4917      	ldr	r1, [pc, #92]	@ (8001000 <StartTask03+0x80>)
 8000fa2:	4818      	ldr	r0, [pc, #96]	@ (8001004 <StartTask03+0x84>)
 8000fa4:	f7ff fba0 	bl	80006e8 <Update_CAN_Message1>

	/* Infinite loop */
	for(;;)
	{
	  // Read TCAL Input and update flags
	  if (GPIO_Interrupt_Triggered)
 8000fa8:	4b17      	ldr	r3, [pc, #92]	@ (8001008 <StartTask03+0x88>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d01e      	beq.n	8000fee <StartTask03+0x6e>
	  {
		  if (debounce_count++ <= 2) {continue;}
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	dd1d      	ble.n	8000ff6 <StartTask03+0x76>
		  if (TCAL9538RSVR_HandleInterrupt(&U5) != HAL_OK){ Error_Handler(); }
 8000fba:	4814      	ldr	r0, [pc, #80]	@ (800100c <StartTask03+0x8c>)
 8000fbc:	f7ff fb13 	bl	80005e6 <TCAL9538RSVR_HandleInterrupt>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <StartTask03+0x4a>
 8000fc6:	f000 f88d 	bl	80010e4 <Error_Handler>
		  //if (TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK){ Error_Handler(); }


		  Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000fca:	4a0c      	ldr	r2, [pc, #48]	@ (8000ffc <StartTask03+0x7c>)
 8000fcc:	490c      	ldr	r1, [pc, #48]	@ (8001000 <StartTask03+0x80>)
 8000fce:	480d      	ldr	r0, [pc, #52]	@ (8001004 <StartTask03+0x84>)
 8000fd0:	f7ff fb8a 	bl	80006e8 <Update_CAN_Message1>
		  uint8_t val = TxData[1];
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <StartTask03+0x84>)
 8000fd6:	785b      	ldrb	r3, [r3, #1]
 8000fd8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  uint8_t val2 = TxData[2];
 8000fdc:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <StartTask03+0x84>)
 8000fde:	789b      	ldrb	r3, [r3, #2]
 8000fe0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		  GPIO_Interrupt_Triggered = 0;
 8000fe4:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <StartTask03+0x88>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
		  debounce_count = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
//	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
//	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
//	  {
//		  Error_Handler();
//	  }
	  osDelay(1);
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f006 f8ea 	bl	80071c8 <osDelay>
 8000ff4:	e7d8      	b.n	8000fa8 <StartTask03+0x28>
		  if (debounce_count++ <= 2) {continue;}
 8000ff6:	bf00      	nop
	  if (GPIO_Interrupt_Triggered)
 8000ff8:	e7d6      	b.n	8000fa8 <StartTask03+0x28>
 8000ffa:	bf00      	nop
 8000ffc:	20000231 	.word	0x20000231
 8001000:	20000229 	.word	0x20000229
 8001004:	20000240 	.word	0x20000240
 8001008:	2000023c 	.word	0x2000023c
 800100c:	20000224 	.word	0x20000224

08001010 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */

  uint32_t lastBlinkTime = HAL_GetTick();
 8001018:	f000 fb6e 	bl	80016f8 <HAL_GetTick>
 800101c:	6178      	str	r0, [r7, #20]
  const uint32_t blinkInterval = 500;
 800101e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001022:	613b      	str	r3, [r7, #16]

    // blinking logic needs to be done here now
    // use lightState variable to see what should be turned on and then 
    // update outputPortState

    uint32_t currentTick = HAL_GetTick();
 8001024:	f000 fb68 	bl	80016f8 <HAL_GetTick>
 8001028:	60f8      	str	r0, [r7, #12]

    if (currentTick - lastBlinkTime > blinkInterval)
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	429a      	cmp	r2, r3
 8001034:	d230      	bcs.n	8001098 <StartTask04+0x88>
    {
      lastBlinkTime = currentTick;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	617b      	str	r3, [r7, #20]
      if (lightState == LIGHTS_LEFT)
 800103a:	4b1e      	ldr	r3, [pc, #120]	@ (80010b4 <StartTask04+0xa4>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d107      	bne.n	8001052 <StartTask04+0x42>
        outputPortState ^= OUTPUT_FL_LIGHT_CTRL;
 8001042:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <StartTask04+0xa8>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	f083 0310 	eor.w	r3, r3, #16
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <StartTask04+0xa8>)
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	e022      	b.n	8001098 <StartTask04+0x88>
      else if (lightState == LIGHTS_RIGHT)
 8001052:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <StartTask04+0xa4>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b02      	cmp	r3, #2
 8001058:	d107      	bne.n	800106a <StartTask04+0x5a>
        outputPortState ^= OUTPUT_FR_LIGHT_CTRL;
 800105a:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <StartTask04+0xa8>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	f083 0320 	eor.w	r3, r3, #32
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <StartTask04+0xa8>)
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	e016      	b.n	8001098 <StartTask04+0x88>
      else if (lightState == LIGHTS_HAZARD)
 800106a:	4b12      	ldr	r3, [pc, #72]	@ (80010b4 <StartTask04+0xa4>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b03      	cmp	r3, #3
 8001070:	d107      	bne.n	8001082 <StartTask04+0x72>
        outputPortState ^= (OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <StartTask04+0xa8>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <StartTask04+0xa8>)
 800107e:	701a      	strb	r2, [r3, #0]
 8001080:	e00a      	b.n	8001098 <StartTask04+0x88>
      else if (lightState == LIGHTS_NONE)
 8001082:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <StartTask04+0xa4>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d106      	bne.n	8001098 <StartTask04+0x88>
        outputPortState &= ~(OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 800108a:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <StartTask04+0xa8>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001092:	b2da      	uxtb	r2, r3
 8001094:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <StartTask04+0xa8>)
 8001096:	701a      	strb	r2, [r3, #0]
    }

    if(TCAL9538RSVR_SetOutput(&U7, &outputPortState) != HAL_OK)
 8001098:	4907      	ldr	r1, [pc, #28]	@ (80010b8 <StartTask04+0xa8>)
 800109a:	4808      	ldr	r0, [pc, #32]	@ (80010bc <StartTask04+0xac>)
 800109c:	f7ff fada 	bl	8000654 <TCAL9538RSVR_SetOutput>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <StartTask04+0x9a>
    {
    	Error_Handler();
 80010a6:	f000 f81d 	bl	80010e4 <Error_Handler>
    }

    osDelay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f006 f88c 	bl	80071c8 <osDelay>
  {
 80010b0:	e7b8      	b.n	8001024 <StartTask04+0x14>
 80010b2:	bf00      	nop
 80010b4:	2000024a 	.word	0x2000024a
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000234 	.word	0x20000234

080010c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010d2:	f000 fafd 	bl	80016d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40000400 	.word	0x40000400

080010e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e8:	b672      	cpsid	i
}
 80010ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <Error_Handler+0x8>

080010f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	4b11      	ldr	r3, [pc, #68]	@ (800113c <HAL_MspInit+0x4c>)
 80010f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010fa:	4a10      	ldr	r2, [pc, #64]	@ (800113c <HAL_MspInit+0x4c>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6613      	str	r3, [r2, #96]	@ 0x60
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <HAL_MspInit+0x4c>)
 8001104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <HAL_MspInit+0x4c>)
 8001110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001112:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <HAL_MspInit+0x4c>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001118:	6593      	str	r3, [r2, #88]	@ 0x58
 800111a:	4b08      	ldr	r3, [pc, #32]	@ (800113c <HAL_MspInit+0x4c>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	210f      	movs	r1, #15
 800112a:	f06f 0001 	mvn.w	r0, #1
 800112e:	f001 fcbd 	bl	8002aac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000

08001140 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b0ac      	sub	sp, #176	@ 0xb0
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	228c      	movs	r2, #140	@ 0x8c
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f008 fe81 	bl	8009e68 <memset>
  if(hadc->Instance==ADC1)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a1f      	ldr	r2, [pc, #124]	@ (80011e8 <HAL_ADC_MspInit+0xa8>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d137      	bne.n	80011e0 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001170:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001174:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001176:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800117a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	4618      	mov	r0, r3
 8001184:	f003 fc10 	bl	80049a8 <HAL_RCCEx_PeriphCLKConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800118e:	f7ff ffa9 	bl	80010e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001192:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <HAL_ADC_MspInit+0xac>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	4a15      	ldr	r2, [pc, #84]	@ (80011ec <HAL_ADC_MspInit+0xac>)
 8001198:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800119c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119e:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <HAL_ADC_MspInit+0xac>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	4b10      	ldr	r3, [pc, #64]	@ (80011ec <HAL_ADC_MspInit+0xac>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	4a0f      	ldr	r2, [pc, #60]	@ (80011ec <HAL_ADC_MspInit+0xac>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b6:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <HAL_ADC_MspInit+0xac>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c2:	2301      	movs	r3, #1
 80011c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c8:	2303      	movs	r3, #3
 80011ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011d8:	4619      	mov	r1, r3
 80011da:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <HAL_ADC_MspInit+0xb0>)
 80011dc:	f001 fd10 	bl	8002c00 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80011e0:	bf00      	nop
 80011e2:	37b0      	adds	r7, #176	@ 0xb0
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	50040000 	.word	0x50040000
 80011ec:	40021000 	.word	0x40021000
 80011f0:	48000800 	.word	0x48000800

080011f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08c      	sub	sp, #48	@ 0x30
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a45      	ldr	r2, [pc, #276]	@ (8001328 <HAL_CAN_MspInit+0x134>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d132      	bne.n	800127c <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001216:	4b45      	ldr	r3, [pc, #276]	@ (800132c <HAL_CAN_MspInit+0x138>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	4a43      	ldr	r2, [pc, #268]	@ (800132c <HAL_CAN_MspInit+0x138>)
 800121e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001220:	4b42      	ldr	r3, [pc, #264]	@ (800132c <HAL_CAN_MspInit+0x138>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d10b      	bne.n	8001240 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001228:	4b41      	ldr	r3, [pc, #260]	@ (8001330 <HAL_CAN_MspInit+0x13c>)
 800122a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122c:	4a40      	ldr	r2, [pc, #256]	@ (8001330 <HAL_CAN_MspInit+0x13c>)
 800122e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001232:	6593      	str	r3, [r2, #88]	@ 0x58
 8001234:	4b3e      	ldr	r3, [pc, #248]	@ (8001330 <HAL_CAN_MspInit+0x13c>)
 8001236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001240:	4b3b      	ldr	r3, [pc, #236]	@ (8001330 <HAL_CAN_MspInit+0x13c>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001244:	4a3a      	ldr	r2, [pc, #232]	@ (8001330 <HAL_CAN_MspInit+0x13c>)
 8001246:	f043 0302 	orr.w	r3, r3, #2
 800124a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124c:	4b38      	ldr	r3, [pc, #224]	@ (8001330 <HAL_CAN_MspInit+0x13c>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001258:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800125c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800126a:	2309      	movs	r3, #9
 800126c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	4619      	mov	r1, r3
 8001274:	482f      	ldr	r0, [pc, #188]	@ (8001334 <HAL_CAN_MspInit+0x140>)
 8001276:	f001 fcc3 	bl	8002c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800127a:	e051      	b.n	8001320 <HAL_CAN_MspInit+0x12c>
  else if(hcan->Instance==CAN2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a2d      	ldr	r2, [pc, #180]	@ (8001338 <HAL_CAN_MspInit+0x144>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d14c      	bne.n	8001320 <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001286:	4b2a      	ldr	r3, [pc, #168]	@ (8001330 <HAL_CAN_MspInit+0x13c>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128a:	4a29      	ldr	r2, [pc, #164]	@ (8001330 <HAL_CAN_MspInit+0x13c>)
 800128c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001290:	6593      	str	r3, [r2, #88]	@ 0x58
 8001292:	4b27      	ldr	r3, [pc, #156]	@ (8001330 <HAL_CAN_MspInit+0x13c>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001296:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800129e:	4b23      	ldr	r3, [pc, #140]	@ (800132c <HAL_CAN_MspInit+0x138>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	3301      	adds	r3, #1
 80012a4:	4a21      	ldr	r2, [pc, #132]	@ (800132c <HAL_CAN_MspInit+0x138>)
 80012a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80012a8:	4b20      	ldr	r3, [pc, #128]	@ (800132c <HAL_CAN_MspInit+0x138>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d10b      	bne.n	80012c8 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80012b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <HAL_CAN_MspInit+0x13c>)
 80012b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001330 <HAL_CAN_MspInit+0x13c>)
 80012b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80012bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <HAL_CAN_MspInit+0x13c>)
 80012be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <HAL_CAN_MspInit+0x13c>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012cc:	4a18      	ldr	r2, [pc, #96]	@ (8001330 <HAL_CAN_MspInit+0x13c>)
 80012ce:	f043 0302 	orr.w	r3, r3, #2
 80012d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d4:	4b16      	ldr	r3, [pc, #88]	@ (8001330 <HAL_CAN_MspInit+0x13c>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012e0:	2320      	movs	r3, #32
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 80012f0:	2303      	movs	r3, #3
 80012f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	480e      	ldr	r0, [pc, #56]	@ (8001334 <HAL_CAN_MspInit+0x140>)
 80012fc:	f001 fc80 	bl	8002c00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001300:	2340      	movs	r3, #64	@ 0x40
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8001310:	2308      	movs	r3, #8
 8001312:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	4806      	ldr	r0, [pc, #24]	@ (8001334 <HAL_CAN_MspInit+0x140>)
 800131c:	f001 fc70 	bl	8002c00 <HAL_GPIO_Init>
}
 8001320:	bf00      	nop
 8001322:	3730      	adds	r7, #48	@ 0x30
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40006400 	.word	0x40006400
 800132c:	20000250 	.word	0x20000250
 8001330:	40021000 	.word	0x40021000
 8001334:	48000400 	.word	0x48000400
 8001338:	40006800 	.word	0x40006800

0800133c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b0ac      	sub	sp, #176	@ 0xb0
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	228c      	movs	r2, #140	@ 0x8c
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f008 fd83 	bl	8009e68 <memset>
  if(hi2c->Instance==I2C4)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a22      	ldr	r2, [pc, #136]	@ (80013f0 <HAL_I2C_MspInit+0xb4>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d13c      	bne.n	80013e6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800136c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001370:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001372:	2300      	movs	r3, #0
 8001374:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	4618      	mov	r0, r3
 800137c:	f003 fb14 	bl	80049a8 <HAL_RCCEx_PeriphCLKConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001386:	f7ff fead 	bl	80010e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <HAL_I2C_MspInit+0xb8>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	4a19      	ldr	r2, [pc, #100]	@ (80013f4 <HAL_I2C_MspInit+0xb8>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001396:	4b17      	ldr	r3, [pc, #92]	@ (80013f4 <HAL_I2C_MspInit+0xb8>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013a2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013aa:	2312      	movs	r3, #18
 80013ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 80013bc:	2303      	movs	r3, #3
 80013be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013c6:	4619      	mov	r1, r3
 80013c8:	480b      	ldr	r0, [pc, #44]	@ (80013f8 <HAL_I2C_MspInit+0xbc>)
 80013ca:	f001 fc19 	bl	8002c00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80013ce:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <HAL_I2C_MspInit+0xb8>)
 80013d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013d2:	4a08      	ldr	r2, [pc, #32]	@ (80013f4 <HAL_I2C_MspInit+0xb8>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_I2C_MspInit+0xb8>)
 80013dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 80013e6:	bf00      	nop
 80013e8:	37b0      	adds	r7, #176	@ 0xb0
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40008400 	.word	0x40008400
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48000400 	.word	0x48000400

080013fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b0ac      	sub	sp, #176	@ 0xb0
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	228c      	movs	r2, #140	@ 0x8c
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f008 fd23 	bl	8009e68 <memset>
  if(huart->Instance==UART4)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a25      	ldr	r2, [pc, #148]	@ (80014bc <HAL_UART_MspInit+0xc0>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d143      	bne.n	80014b4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800142c:	2308      	movs	r3, #8
 800142e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001430:	2300      	movs	r3, #0
 8001432:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	4618      	mov	r0, r3
 800143a:	f003 fab5 	bl	80049a8 <HAL_RCCEx_PeriphCLKConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001444:	f7ff fe4e 	bl	80010e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001448:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <HAL_UART_MspInit+0xc4>)
 800144a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144c:	4a1c      	ldr	r2, [pc, #112]	@ (80014c0 <HAL_UART_MspInit+0xc4>)
 800144e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001452:	6593      	str	r3, [r2, #88]	@ 0x58
 8001454:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <HAL_UART_MspInit+0xc4>)
 8001456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001458:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001460:	4b17      	ldr	r3, [pc, #92]	@ (80014c0 <HAL_UART_MspInit+0xc4>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001464:	4a16      	ldr	r2, [pc, #88]	@ (80014c0 <HAL_UART_MspInit+0xc4>)
 8001466:	f043 0304 	orr.w	r3, r3, #4
 800146a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146c:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <HAL_UART_MspInit+0xc4>)
 800146e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001478:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800147c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001492:	2308      	movs	r3, #8
 8001494:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001498:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800149c:	4619      	mov	r1, r3
 800149e:	4809      	ldr	r0, [pc, #36]	@ (80014c4 <HAL_UART_MspInit+0xc8>)
 80014a0:	f001 fbae 	bl	8002c00 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2105      	movs	r1, #5
 80014a8:	2034      	movs	r0, #52	@ 0x34
 80014aa:	f001 faff 	bl	8002aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80014ae:	2034      	movs	r0, #52	@ 0x34
 80014b0:	f001 fb18 	bl	8002ae4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80014b4:	bf00      	nop
 80014b6:	37b0      	adds	r7, #176	@ 0xb0
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40004c00 	.word	0x40004c00
 80014c0:	40021000 	.word	0x40021000
 80014c4:	48000800 	.word	0x48000800

080014c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08e      	sub	sp, #56	@ 0x38
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80014d6:	4b34      	ldr	r3, [pc, #208]	@ (80015a8 <HAL_InitTick+0xe0>)
 80014d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014da:	4a33      	ldr	r2, [pc, #204]	@ (80015a8 <HAL_InitTick+0xe0>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014e2:	4b31      	ldr	r3, [pc, #196]	@ (80015a8 <HAL_InitTick+0xe0>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014ee:	f107 0210 	add.w	r2, r7, #16
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f003 f9c3 	bl	8004884 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014fe:	6a3b      	ldr	r3, [r7, #32]
 8001500:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001504:	2b00      	cmp	r3, #0
 8001506:	d103      	bne.n	8001510 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001508:	f003 f990 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 800150c:	6378      	str	r0, [r7, #52]	@ 0x34
 800150e:	e004      	b.n	800151a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001510:	f003 f98c 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 8001514:	4603      	mov	r3, r0
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800151a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800151c:	4a23      	ldr	r2, [pc, #140]	@ (80015ac <HAL_InitTick+0xe4>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	0c9b      	lsrs	r3, r3, #18
 8001524:	3b01      	subs	r3, #1
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001528:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <HAL_InitTick+0xe8>)
 800152a:	4a22      	ldr	r2, [pc, #136]	@ (80015b4 <HAL_InitTick+0xec>)
 800152c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800152e:	4b20      	ldr	r3, [pc, #128]	@ (80015b0 <HAL_InitTick+0xe8>)
 8001530:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001534:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001536:	4a1e      	ldr	r2, [pc, #120]	@ (80015b0 <HAL_InitTick+0xe8>)
 8001538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800153a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800153c:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <HAL_InitTick+0xe8>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001542:	4b1b      	ldr	r3, [pc, #108]	@ (80015b0 <HAL_InitTick+0xe8>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001548:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <HAL_InitTick+0xe8>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800154e:	4818      	ldr	r0, [pc, #96]	@ (80015b0 <HAL_InitTick+0xe8>)
 8001550:	f003 fef4 	bl	800533c <HAL_TIM_Base_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800155a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800155e:	2b00      	cmp	r3, #0
 8001560:	d11b      	bne.n	800159a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001562:	4813      	ldr	r0, [pc, #76]	@ (80015b0 <HAL_InitTick+0xe8>)
 8001564:	f003 ff4c 	bl	8005400 <HAL_TIM_Base_Start_IT>
 8001568:	4603      	mov	r3, r0
 800156a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800156e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001572:	2b00      	cmp	r3, #0
 8001574:	d111      	bne.n	800159a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001576:	201d      	movs	r0, #29
 8001578:	f001 fab4 	bl	8002ae4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b0f      	cmp	r3, #15
 8001580:	d808      	bhi.n	8001594 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001582:	2200      	movs	r2, #0
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	201d      	movs	r0, #29
 8001588:	f001 fa90 	bl	8002aac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800158c:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <HAL_InitTick+0xf0>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e002      	b.n	800159a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800159a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3738      	adds	r7, #56	@ 0x38
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000
 80015ac:	431bde83 	.word	0x431bde83
 80015b0:	20000254 	.word	0x20000254
 80015b4:	40000400 	.word	0x40000400
 80015b8:	20000008 	.word	0x20000008

080015bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <NMI_Handler+0x4>

080015c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <MemManage_Handler+0x4>

080015d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alert1_Pin);
 80015f6:	2004      	movs	r0, #4
 80015f8:	f001 fcc6 	bl	8002f88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001604:	4802      	ldr	r0, [pc, #8]	@ (8001610 <TIM3_IRQHandler+0x10>)
 8001606:	f003 ff6b 	bl	80054e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000254 	.word	0x20000254

08001614 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <UART4_IRQHandler+0x10>)
 800161a:	f004 f9ef 	bl	80059fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000018c 	.word	0x2000018c

08001628 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <SystemInit+0x20>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001632:	4a05      	ldr	r2, [pc, #20]	@ (8001648 <SystemInit+0x20>)
 8001634:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001638:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800164c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001684 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001650:	f7ff ffea 	bl	8001628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001654:	480c      	ldr	r0, [pc, #48]	@ (8001688 <LoopForever+0x6>)
  ldr r1, =_edata
 8001656:	490d      	ldr	r1, [pc, #52]	@ (800168c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001658:	4a0d      	ldr	r2, [pc, #52]	@ (8001690 <LoopForever+0xe>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166a:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <LoopForever+0x12>)
  ldr r4, =_ebss
 800166c:	4c0a      	ldr	r4, [pc, #40]	@ (8001698 <LoopForever+0x16>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167a:	f008 fc53 	bl	8009f24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800167e:	f7ff f947 	bl	8000910 <main>

08001682 <LoopForever>:

LoopForever:
    b LoopForever
 8001682:	e7fe      	b.n	8001682 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001684:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800168c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001690:	0800a184 	.word	0x0800a184
  ldr r2, =_sbss
 8001694:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001698:	20001d84 	.word	0x20001d84

0800169c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC1_2_IRQHandler>

0800169e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f001 f9f4 	bl	8002a96 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ae:	200f      	movs	r0, #15
 80016b0:	f7ff ff0a 	bl	80014c8 <HAL_InitTick>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d002      	beq.n	80016c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	71fb      	strb	r3, [r7, #7]
 80016be:	e001      	b.n	80016c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016c0:	f7ff fd16 	bl	80010f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016c4:	79fb      	ldrb	r3, [r7, #7]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_IncTick+0x20>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <HAL_IncTick+0x24>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a04      	ldr	r2, [pc, #16]	@ (80016f4 <HAL_IncTick+0x24>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	2000000c 	.word	0x2000000c
 80016f4:	200002a0 	.word	0x200002a0

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b03      	ldr	r3, [pc, #12]	@ (800170c <HAL_GetTick+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	200002a0 	.word	0x200002a0

08001710 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	609a      	str	r2, [r3, #8]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	609a      	str	r2, [r3, #8]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001778:	b480      	push	{r7}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3360      	adds	r3, #96	@ 0x60
 800178a:	461a      	mov	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <LL_ADC_SetOffset+0x44>)
 800179a:	4013      	ands	r3, r2
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	4313      	orrs	r3, r2
 80017a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017b0:	bf00      	nop
 80017b2:	371c      	adds	r7, #28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	03fff000 	.word	0x03fff000

080017c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3360      	adds	r3, #96	@ 0x60
 80017ce:	461a      	mov	r2, r3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	3360      	adds	r3, #96	@ 0x60
 80017fc:	461a      	mov	r2, r3
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	431a      	orrs	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001816:	bf00      	nop
 8001818:	371c      	adds	r7, #28
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	615a      	str	r2, [r3, #20]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3330      	adds	r3, #48	@ 0x30
 8001858:	461a      	mov	r2, r3
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	4413      	add	r3, r2
 8001866:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f003 031f 	and.w	r3, r3, #31
 8001872:	211f      	movs	r1, #31
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	401a      	ands	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	0e9b      	lsrs	r3, r3, #26
 8001880:	f003 011f 	and.w	r1, r3, #31
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	431a      	orrs	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001894:	bf00      	nop
 8001896:	371c      	adds	r7, #28
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	3314      	adds	r3, #20
 80018b0:	461a      	mov	r2, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	0e5b      	lsrs	r3, r3, #25
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	4413      	add	r3, r2
 80018be:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	0d1b      	lsrs	r3, r3, #20
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	2107      	movs	r1, #7
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	401a      	ands	r2, r3
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	0d1b      	lsrs	r3, r3, #20
 80018da:	f003 031f 	and.w	r3, r3, #31
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	431a      	orrs	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018ea:	bf00      	nop
 80018ec:	371c      	adds	r7, #28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001910:	43db      	mvns	r3, r3
 8001912:	401a      	ands	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f003 0318 	and.w	r3, r3, #24
 800191a:	4908      	ldr	r1, [pc, #32]	@ (800193c <LL_ADC_SetChannelSingleDiff+0x44>)
 800191c:	40d9      	lsrs	r1, r3
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	400b      	ands	r3, r1
 8001922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001926:	431a      	orrs	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	0007ffff 	.word	0x0007ffff

08001940 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001950:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6093      	str	r3, [r2, #8]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001974:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001978:	d101      	bne.n	800197e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800199c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80019c8:	d101      	bne.n	80019ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <LL_ADC_IsEnabled+0x18>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <LL_ADC_IsEnabled+0x1a>
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d101      	bne.n	8001a1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d101      	bne.n	8001a40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b089      	sub	sp, #36	@ 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e133      	b.n	8001cd2 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d109      	bne.n	8001a8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff fb61 	bl	8001140 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff67 	bl	8001964 <LL_ADC_IsDeepPowerDownEnabled>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d004      	beq.n	8001aa6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff4d 	bl	8001940 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff82 	bl	80019b4 <LL_ADC_IsInternalRegulatorEnabled>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d115      	bne.n	8001ae2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ff66 	bl	800198c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ac0:	4b86      	ldr	r3, [pc, #536]	@ (8001cdc <HAL_ADC_Init+0x28c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	099b      	lsrs	r3, r3, #6
 8001ac6:	4a86      	ldr	r2, [pc, #536]	@ (8001ce0 <HAL_ADC_Init+0x290>)
 8001ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8001acc:	099b      	lsrs	r3, r3, #6
 8001ace:	3301      	adds	r3, #1
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ad4:	e002      	b.n	8001adc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f9      	bne.n	8001ad6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ff64 	bl	80019b4 <LL_ADC_IsInternalRegulatorEnabled>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10d      	bne.n	8001b0e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af6:	f043 0210 	orr.w	r2, r3, #16
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b02:	f043 0201 	orr.w	r2, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff75 	bl	8001a02 <LL_ADC_REG_IsConversionOngoing>
 8001b18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f040 80cc 	bne.w	8001cc0 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f040 80c8 	bne.w	8001cc0 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b34:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b38:	f043 0202 	orr.w	r2, r3, #2
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff49 	bl	80019dc <LL_ADC_IsEnabled>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d115      	bne.n	8001b7c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b50:	4864      	ldr	r0, [pc, #400]	@ (8001ce4 <HAL_ADC_Init+0x294>)
 8001b52:	f7ff ff43 	bl	80019dc <LL_ADC_IsEnabled>
 8001b56:	4604      	mov	r4, r0
 8001b58:	4863      	ldr	r0, [pc, #396]	@ (8001ce8 <HAL_ADC_Init+0x298>)
 8001b5a:	f7ff ff3f 	bl	80019dc <LL_ADC_IsEnabled>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	431c      	orrs	r4, r3
 8001b62:	4862      	ldr	r0, [pc, #392]	@ (8001cec <HAL_ADC_Init+0x29c>)
 8001b64:	f7ff ff3a 	bl	80019dc <LL_ADC_IsEnabled>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4323      	orrs	r3, r4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4619      	mov	r1, r3
 8001b76:	485e      	ldr	r0, [pc, #376]	@ (8001cf0 <HAL_ADC_Init+0x2a0>)
 8001b78:	f7ff fdca 	bl	8001710 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	7e5b      	ldrb	r3, [r3, #25]
 8001b80:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b86:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b8c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b92:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b9a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d106      	bne.n	8001bb8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	045b      	lsls	r3, r3, #17
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d009      	beq.n	8001bd4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bcc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	4b46      	ldr	r3, [pc, #280]	@ (8001cf4 <HAL_ADC_Init+0x2a4>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	69b9      	ldr	r1, [r7, #24]
 8001be4:	430b      	orrs	r3, r1
 8001be6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff1b 	bl	8001a28 <LL_ADC_INJ_IsConversionOngoing>
 8001bf2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d140      	bne.n	8001c7c <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d13d      	bne.n	8001c7c <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7e1b      	ldrb	r3, [r3, #24]
 8001c08:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c0a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c12:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c22:	f023 0306 	bic.w	r3, r3, #6
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	69b9      	ldr	r1, [r7, #24]
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d118      	bne.n	8001c6c <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c44:	f023 0304 	bic.w	r3, r3, #4
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c50:	4311      	orrs	r1, r2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001c56:	4311      	orrs	r1, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 0201 	orr.w	r2, r2, #1
 8001c68:	611a      	str	r2, [r3, #16]
 8001c6a:	e007      	b.n	8001c7c <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d10c      	bne.n	8001c9e <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	f023 010f 	bic.w	r1, r3, #15
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	1e5a      	subs	r2, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c9c:	e007      	b.n	8001cae <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 020f 	bic.w	r2, r2, #15
 8001cac:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb2:	f023 0303 	bic.w	r3, r3, #3
 8001cb6:	f043 0201 	orr.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cbe:	e007      	b.n	8001cd0 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc4:	f043 0210 	orr.w	r2, r3, #16
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	@ 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd90      	pop	{r4, r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000004 	.word	0x20000004
 8001ce0:	053e2d63 	.word	0x053e2d63
 8001ce4:	50040000 	.word	0x50040000
 8001ce8:	50040100 	.word	0x50040100
 8001cec:	50040200 	.word	0x50040200
 8001cf0:	50040300 	.word	0x50040300
 8001cf4:	fff0c007 	.word	0xfff0c007

08001cf8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b0b6      	sub	sp, #216	@ 0xd8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x22>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e3e3      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x7ea>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fe6b 	bl	8001a02 <LL_ADC_REG_IsConversionOngoing>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 83c4 	bne.w	80024bc <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b05      	cmp	r3, #5
 8001d42:	d824      	bhi.n	8001d8e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	3b02      	subs	r3, #2
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d81b      	bhi.n	8001d86 <HAL_ADC_ConfigChannel+0x8e>
 8001d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d54 <HAL_ADC_ConfigChannel+0x5c>)
 8001d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d54:	08001d65 	.word	0x08001d65
 8001d58:	08001d6d 	.word	0x08001d6d
 8001d5c:	08001d75 	.word	0x08001d75
 8001d60:	08001d7d 	.word	0x08001d7d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001d64:	230c      	movs	r3, #12
 8001d66:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d6a:	e010      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001d6c:	2312      	movs	r3, #18
 8001d6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d72:	e00c      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001d74:	2318      	movs	r3, #24
 8001d76:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d7a:	e008      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001d7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d84:	e003      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001d86:	2306      	movs	r3, #6
 8001d88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d8c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001d9c:	f7ff fd54 	bl	8001848 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fe2c 	bl	8001a02 <LL_ADC_REG_IsConversionOngoing>
 8001daa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fe38 	bl	8001a28 <LL_ADC_INJ_IsConversionOngoing>
 8001db8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f040 81bf 	bne.w	8002144 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f040 81ba 	bne.w	8002144 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001dd8:	d10f      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2200      	movs	r2, #0
 8001de4:	4619      	mov	r1, r3
 8001de6:	f7ff fd5b 	bl	80018a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fd15 	bl	8001822 <LL_ADC_SetSamplingTimeCommonConfig>
 8001df8:	e00e      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6819      	ldr	r1, [r3, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	461a      	mov	r2, r3
 8001e08:	f7ff fd4a 	bl	80018a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fd05 	bl	8001822 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	695a      	ldr	r2, [r3, #20]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	08db      	lsrs	r3, r3, #3
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d00a      	beq.n	8001e50 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	6919      	ldr	r1, [r3, #16]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e4a:	f7ff fc95 	bl	8001778 <LL_ADC_SetOffset>
 8001e4e:	e179      	b.n	8002144 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fcb2 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10a      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x184>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fca7 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	0e9b      	lsrs	r3, r3, #26
 8001e76:	f003 021f 	and.w	r2, r3, #31
 8001e7a:	e01e      	b.n	8001eba <HAL_ADC_ConfigChannel+0x1c2>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fc9c 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ea2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001eaa:	2320      	movs	r3, #32
 8001eac:	e004      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001eae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d105      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x1da>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	0e9b      	lsrs	r3, r3, #26
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	e018      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x20c>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001ee6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001eea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001eee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001ef6:	2320      	movs	r3, #32
 8001ef8:	e004      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001efa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d106      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fc6b 	bl	80017ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fc4f 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10a      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x24a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2101      	movs	r1, #1
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fc44 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	0e9b      	lsrs	r3, r3, #26
 8001f3c:	f003 021f 	and.w	r2, r3, #31
 8001f40:	e01e      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x288>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2101      	movs	r1, #1
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fc39 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001f68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001f70:	2320      	movs	r3, #32
 8001f72:	e004      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001f74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f78:	fab3 f383 	clz	r3, r3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d105      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x2a0>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	0e9b      	lsrs	r3, r3, #26
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	e018      	b.n	8001fca <HAL_ADC_ConfigChannel+0x2d2>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001fa4:	fa93 f3a3 	rbit	r3, r3
 8001fa8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001fac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001fb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001fbc:	2320      	movs	r3, #32
 8001fbe:	e004      	b.n	8001fca <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001fc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001fc4:	fab3 f383 	clz	r3, r3
 8001fc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d106      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fc08 	bl	80017ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2102      	movs	r1, #2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fbec 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10a      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x310>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fbe1 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 8001ffe:	4603      	mov	r3, r0
 8002000:	0e9b      	lsrs	r3, r3, #26
 8002002:	f003 021f 	and.w	r2, r3, #31
 8002006:	e01e      	b.n	8002046 <HAL_ADC_ConfigChannel+0x34e>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2102      	movs	r1, #2
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fbd6 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 8002014:	4603      	mov	r3, r0
 8002016:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800201e:	fa93 f3a3 	rbit	r3, r3
 8002022:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002026:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800202a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800202e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002036:	2320      	movs	r3, #32
 8002038:	e004      	b.n	8002044 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800203a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204e:	2b00      	cmp	r3, #0
 8002050:	d105      	bne.n	800205e <HAL_ADC_ConfigChannel+0x366>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	0e9b      	lsrs	r3, r3, #26
 8002058:	f003 031f 	and.w	r3, r3, #31
 800205c:	e014      	b.n	8002088 <HAL_ADC_ConfigChannel+0x390>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800206c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800206e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002072:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800207a:	2320      	movs	r3, #32
 800207c:	e004      	b.n	8002088 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800207e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002088:	429a      	cmp	r2, r3
 800208a:	d106      	bne.n	800209a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2200      	movs	r2, #0
 8002092:	2102      	movs	r1, #2
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fba9 	bl	80017ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2103      	movs	r1, #3
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fb8d 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10a      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x3ce>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2103      	movs	r1, #3
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fb82 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 80020bc:	4603      	mov	r3, r0
 80020be:	0e9b      	lsrs	r3, r3, #26
 80020c0:	f003 021f 	and.w	r2, r3, #31
 80020c4:	e017      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x3fe>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2103      	movs	r1, #3
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fb77 	bl	80017c0 <LL_ADC_GetOffsetChannel>
 80020d2:	4603      	mov	r3, r0
 80020d4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80020de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020e0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80020e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80020e8:	2320      	movs	r3, #32
 80020ea:	e003      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80020ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d105      	bne.n	800210e <HAL_ADC_ConfigChannel+0x416>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	0e9b      	lsrs	r3, r3, #26
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	e011      	b.n	8002132 <HAL_ADC_ConfigChannel+0x43a>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800211c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800211e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002120:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002126:	2320      	movs	r3, #32
 8002128:	e003      	b.n	8002132 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800212a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002132:	429a      	cmp	r2, r3
 8002134:	d106      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2200      	movs	r2, #0
 800213c:	2103      	movs	r1, #3
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fb54 	bl	80017ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fc47 	bl	80019dc <LL_ADC_IsEnabled>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	f040 813f 	bne.w	80023d4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	6819      	ldr	r1, [r3, #0]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	461a      	mov	r2, r3
 8002164:	f7ff fbc8 	bl	80018f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4a8e      	ldr	r2, [pc, #568]	@ (80023a8 <HAL_ADC_ConfigChannel+0x6b0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	f040 8130 	bne.w	80023d4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10b      	bne.n	800219c <HAL_ADC_ConfigChannel+0x4a4>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	0e9b      	lsrs	r3, r3, #26
 800218a:	3301      	adds	r3, #1
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	2b09      	cmp	r3, #9
 8002192:	bf94      	ite	ls
 8002194:	2301      	movls	r3, #1
 8002196:	2300      	movhi	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	e019      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x4d8>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80021aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80021ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80021b4:	2320      	movs	r3, #32
 80021b6:	e003      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80021b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	3301      	adds	r3, #1
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	2b09      	cmp	r3, #9
 80021c8:	bf94      	ite	ls
 80021ca:	2301      	movls	r3, #1
 80021cc:	2300      	movhi	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d079      	beq.n	80022c8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d107      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x4f8>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	0e9b      	lsrs	r3, r3, #26
 80021e6:	3301      	adds	r3, #1
 80021e8:	069b      	lsls	r3, r3, #26
 80021ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021ee:	e015      	b.n	800221c <HAL_ADC_ConfigChannel+0x524>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80021fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002200:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002202:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002208:	2320      	movs	r3, #32
 800220a:	e003      	b.n	8002214 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 800220c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	3301      	adds	r3, #1
 8002216:	069b      	lsls	r3, r3, #26
 8002218:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002224:	2b00      	cmp	r3, #0
 8002226:	d109      	bne.n	800223c <HAL_ADC_ConfigChannel+0x544>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0e9b      	lsrs	r3, r3, #26
 800222e:	3301      	adds	r3, #1
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	2101      	movs	r1, #1
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	e017      	b.n	800226c <HAL_ADC_ConfigChannel+0x574>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800224a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800224c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800224e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002254:	2320      	movs	r3, #32
 8002256:	e003      	b.n	8002260 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	3301      	adds	r3, #1
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	ea42 0103 	orr.w	r1, r2, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x59a>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	0e9b      	lsrs	r3, r3, #26
 8002282:	3301      	adds	r3, #1
 8002284:	f003 021f 	and.w	r2, r3, #31
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	051b      	lsls	r3, r3, #20
 8002290:	e018      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x5cc>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80022a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80022a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80022aa:	2320      	movs	r3, #32
 80022ac:	e003      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80022ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b0:	fab3 f383 	clz	r3, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	3301      	adds	r3, #1
 80022b8:	f003 021f 	and.w	r2, r3, #31
 80022bc:	4613      	mov	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4413      	add	r3, r2
 80022c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022c4:	430b      	orrs	r3, r1
 80022c6:	e080      	b.n	80023ca <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d107      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x5ec>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	0e9b      	lsrs	r3, r3, #26
 80022da:	3301      	adds	r3, #1
 80022dc:	069b      	lsls	r3, r3, #26
 80022de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022e2:	e015      	b.n	8002310 <HAL_ADC_ConfigChannel+0x618>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80022f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80022fc:	2320      	movs	r3, #32
 80022fe:	e003      	b.n	8002308 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	3301      	adds	r3, #1
 800230a:	069b      	lsls	r3, r3, #26
 800230c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002318:	2b00      	cmp	r3, #0
 800231a:	d109      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x638>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0e9b      	lsrs	r3, r3, #26
 8002322:	3301      	adds	r3, #1
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	2101      	movs	r1, #1
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	e017      	b.n	8002360 <HAL_ADC_ConfigChannel+0x668>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	61bb      	str	r3, [r7, #24]
  return result;
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002348:	2320      	movs	r3, #32
 800234a:	e003      	b.n	8002354 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	3301      	adds	r3, #1
 8002356:	f003 031f 	and.w	r3, r3, #31
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	ea42 0103 	orr.w	r1, r2, r3
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10d      	bne.n	800238c <HAL_ADC_ConfigChannel+0x694>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0e9b      	lsrs	r3, r3, #26
 8002376:	3301      	adds	r3, #1
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	3b1e      	subs	r3, #30
 8002384:	051b      	lsls	r3, r3, #20
 8002386:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800238a:	e01d      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x6d0>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	60fb      	str	r3, [r7, #12]
  return result;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d103      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80023a4:	2320      	movs	r3, #32
 80023a6:	e005      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x6bc>
 80023a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	3301      	adds	r3, #1
 80023b6:	f003 021f 	and.w	r2, r3, #31
 80023ba:	4613      	mov	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4413      	add	r3, r2
 80023c0:	3b1e      	subs	r3, #30
 80023c2:	051b      	lsls	r3, r3, #20
 80023c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ce:	4619      	mov	r1, r3
 80023d0:	f7ff fa66 	bl	80018a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b44      	ldr	r3, [pc, #272]	@ (80024ec <HAL_ADC_ConfigChannel+0x7f4>)
 80023da:	4013      	ands	r3, r2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d07a      	beq.n	80024d6 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023e0:	4843      	ldr	r0, [pc, #268]	@ (80024f0 <HAL_ADC_ConfigChannel+0x7f8>)
 80023e2:	f7ff f9bb 	bl	800175c <LL_ADC_GetCommonPathInternalCh>
 80023e6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a41      	ldr	r2, [pc, #260]	@ (80024f4 <HAL_ADC_ConfigChannel+0x7fc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d12c      	bne.n	800244e <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d126      	bne.n	800244e <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a3c      	ldr	r2, [pc, #240]	@ (80024f8 <HAL_ADC_ConfigChannel+0x800>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d004      	beq.n	8002414 <HAL_ADC_ConfigChannel+0x71c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a3b      	ldr	r2, [pc, #236]	@ (80024fc <HAL_ADC_ConfigChannel+0x804>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d15d      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002414:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002418:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800241c:	4619      	mov	r1, r3
 800241e:	4834      	ldr	r0, [pc, #208]	@ (80024f0 <HAL_ADC_ConfigChannel+0x7f8>)
 8002420:	f7ff f989 	bl	8001736 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002424:	4b36      	ldr	r3, [pc, #216]	@ (8002500 <HAL_ADC_ConfigChannel+0x808>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	099b      	lsrs	r3, r3, #6
 800242a:	4a36      	ldr	r2, [pc, #216]	@ (8002504 <HAL_ADC_ConfigChannel+0x80c>)
 800242c:	fba2 2303 	umull	r2, r3, r2, r3
 8002430:	099b      	lsrs	r3, r3, #6
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800243e:	e002      	b.n	8002446 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	3b01      	subs	r3, #1
 8002444:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1f9      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800244c:	e040      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a2d      	ldr	r2, [pc, #180]	@ (8002508 <HAL_ADC_ConfigChannel+0x810>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d118      	bne.n	800248a <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002458:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800245c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d112      	bne.n	800248a <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a23      	ldr	r2, [pc, #140]	@ (80024f8 <HAL_ADC_ConfigChannel+0x800>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d004      	beq.n	8002478 <HAL_ADC_ConfigChannel+0x780>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a22      	ldr	r2, [pc, #136]	@ (80024fc <HAL_ADC_ConfigChannel+0x804>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d12d      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002478:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800247c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002480:	4619      	mov	r1, r3
 8002482:	481b      	ldr	r0, [pc, #108]	@ (80024f0 <HAL_ADC_ConfigChannel+0x7f8>)
 8002484:	f7ff f957 	bl	8001736 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002488:	e024      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a1f      	ldr	r2, [pc, #124]	@ (800250c <HAL_ADC_ConfigChannel+0x814>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d120      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002494:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002498:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d11a      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a14      	ldr	r2, [pc, #80]	@ (80024f8 <HAL_ADC_ConfigChannel+0x800>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d115      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024b2:	4619      	mov	r1, r3
 80024b4:	480e      	ldr	r0, [pc, #56]	@ (80024f0 <HAL_ADC_ConfigChannel+0x7f8>)
 80024b6:	f7ff f93e 	bl	8001736 <LL_ADC_SetCommonPathInternalCh>
 80024ba:	e00c      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c0:	f043 0220 	orr.w	r2, r3, #32
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80024ce:	e002      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024d0:	bf00      	nop
 80024d2:	e000      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80024de:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	37d8      	adds	r7, #216	@ 0xd8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	80080000 	.word	0x80080000
 80024f0:	50040300 	.word	0x50040300
 80024f4:	c7520000 	.word	0xc7520000
 80024f8:	50040000 	.word	0x50040000
 80024fc:	50040200 	.word	0x50040200
 8002500:	20000004 	.word	0x20000004
 8002504:	053e2d63 	.word	0x053e2d63
 8002508:	cb840000 	.word	0xcb840000
 800250c:	80000001 	.word	0x80000001

08002510 <LL_ADC_IsEnabled>:
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <LL_ADC_IsEnabled+0x18>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <LL_ADC_IsEnabled+0x1a>
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <LL_ADC_REG_IsConversionOngoing>:
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	2b04      	cmp	r3, #4
 8002548:	d101      	bne.n	800254e <LL_ADC_REG_IsConversionOngoing+0x18>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b0a1      	sub	sp, #132	@ 0x84
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002576:	2302      	movs	r3, #2
 8002578:	e093      	b.n	80026a2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002582:	2300      	movs	r3, #0
 8002584:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002586:	2300      	movs	r3, #0
 8002588:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a47      	ldr	r2, [pc, #284]	@ (80026ac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d102      	bne.n	800259a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002594:	4b46      	ldr	r3, [pc, #280]	@ (80026b0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	e001      	b.n	800259e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10b      	bne.n	80025bc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a8:	f043 0220 	orr.w	r2, r3, #32
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e072      	b.n	80026a2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff ffb9 	bl	8002536 <LL_ADC_REG_IsConversionOngoing>
 80025c4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ffb3 	bl	8002536 <LL_ADC_REG_IsConversionOngoing>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d154      	bne.n	8002680 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80025d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d151      	bne.n	8002680 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025dc:	4b35      	ldr	r3, [pc, #212]	@ (80026b4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80025de:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d02c      	beq.n	8002642 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80025e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025fa:	035b      	lsls	r3, r3, #13
 80025fc:	430b      	orrs	r3, r1
 80025fe:	431a      	orrs	r2, r3
 8002600:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002602:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002604:	4829      	ldr	r0, [pc, #164]	@ (80026ac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002606:	f7ff ff83 	bl	8002510 <LL_ADC_IsEnabled>
 800260a:	4604      	mov	r4, r0
 800260c:	4828      	ldr	r0, [pc, #160]	@ (80026b0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800260e:	f7ff ff7f 	bl	8002510 <LL_ADC_IsEnabled>
 8002612:	4603      	mov	r3, r0
 8002614:	431c      	orrs	r4, r3
 8002616:	4828      	ldr	r0, [pc, #160]	@ (80026b8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002618:	f7ff ff7a 	bl	8002510 <LL_ADC_IsEnabled>
 800261c:	4603      	mov	r3, r0
 800261e:	4323      	orrs	r3, r4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d137      	bne.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002624:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800262c:	f023 030f 	bic.w	r3, r3, #15
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	6811      	ldr	r1, [r2, #0]
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	6892      	ldr	r2, [r2, #8]
 8002638:	430a      	orrs	r2, r1
 800263a:	431a      	orrs	r2, r3
 800263c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800263e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002640:	e028      	b.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002642:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800264a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800264c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800264e:	4817      	ldr	r0, [pc, #92]	@ (80026ac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002650:	f7ff ff5e 	bl	8002510 <LL_ADC_IsEnabled>
 8002654:	4604      	mov	r4, r0
 8002656:	4816      	ldr	r0, [pc, #88]	@ (80026b0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002658:	f7ff ff5a 	bl	8002510 <LL_ADC_IsEnabled>
 800265c:	4603      	mov	r3, r0
 800265e:	431c      	orrs	r4, r3
 8002660:	4815      	ldr	r0, [pc, #84]	@ (80026b8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002662:	f7ff ff55 	bl	8002510 <LL_ADC_IsEnabled>
 8002666:	4603      	mov	r3, r0
 8002668:	4323      	orrs	r3, r4
 800266a:	2b00      	cmp	r3, #0
 800266c:	d112      	bne.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800266e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002676:	f023 030f 	bic.w	r3, r3, #15
 800267a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800267c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800267e:	e009      	b.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002684:	f043 0220 	orr.w	r2, r3, #32
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002692:	e000      	b.n	8002696 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002694:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800269e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3784      	adds	r7, #132	@ 0x84
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd90      	pop	{r4, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	50040000 	.word	0x50040000
 80026b0:	50040100 	.word	0x50040100
 80026b4:	50040300 	.word	0x50040300
 80026b8:	50040200 	.word	0x50040200

080026bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e0ed      	b.n	80028aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d102      	bne.n	80026e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe fd8a 	bl	80011f4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026f0:	f7ff f802 	bl	80016f8 <HAL_GetTick>
 80026f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026f6:	e012      	b.n	800271e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026f8:	f7fe fffe 	bl	80016f8 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b0a      	cmp	r3, #10
 8002704:	d90b      	bls.n	800271e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2205      	movs	r2, #5
 8002716:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e0c5      	b.n	80028aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0e5      	beq.n	80026f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0202 	bic.w	r2, r2, #2
 800273a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800273c:	f7fe ffdc 	bl	80016f8 <HAL_GetTick>
 8002740:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002742:	e012      	b.n	800276a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002744:	f7fe ffd8 	bl	80016f8 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b0a      	cmp	r3, #10
 8002750:	d90b      	bls.n	800276a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2205      	movs	r2, #5
 8002762:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e09f      	b.n	80028aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1e5      	bne.n	8002744 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7e1b      	ldrb	r3, [r3, #24]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d108      	bne.n	8002792 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e007      	b.n	80027a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	7e5b      	ldrb	r3, [r3, #25]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d108      	bne.n	80027bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e007      	b.n	80027cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	7e9b      	ldrb	r3, [r3, #26]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d108      	bne.n	80027e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0220 	orr.w	r2, r2, #32
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	e007      	b.n	80027f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0220 	bic.w	r2, r2, #32
 80027f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	7edb      	ldrb	r3, [r3, #27]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d108      	bne.n	8002810 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0210 	bic.w	r2, r2, #16
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e007      	b.n	8002820 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0210 	orr.w	r2, r2, #16
 800281e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	7f1b      	ldrb	r3, [r3, #28]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d108      	bne.n	800283a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0208 	orr.w	r2, r2, #8
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	e007      	b.n	800284a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0208 	bic.w	r2, r2, #8
 8002848:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	7f5b      	ldrb	r3, [r3, #29]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d108      	bne.n	8002864 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0204 	orr.w	r2, r2, #4
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	e007      	b.n	8002874 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0204 	bic.w	r2, r2, #4
 8002872:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	ea42 0103 	orr.w	r1, r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	1e5a      	subs	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d12e      	bne.n	8002924 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028de:	f7fe ff0b 	bl	80016f8 <HAL_GetTick>
 80028e2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028e4:	e012      	b.n	800290c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028e6:	f7fe ff07 	bl	80016f8 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b0a      	cmp	r3, #10
 80028f2:	d90b      	bls.n	800290c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2205      	movs	r2, #5
 8002904:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e012      	b.n	8002932 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1e5      	bne.n	80028e6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	e006      	b.n	8002932 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002928:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
  }
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800294c:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002958:	4013      	ands	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800296c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800296e:	4a04      	ldr	r2, [pc, #16]	@ (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	60d3      	str	r3, [r2, #12]
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002988:	4b04      	ldr	r3, [pc, #16]	@ (800299c <__NVIC_GetPriorityGrouping+0x18>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	0a1b      	lsrs	r3, r3, #8
 800298e:	f003 0307 	and.w	r3, r3, #7
}
 8002992:	4618      	mov	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	db0b      	blt.n	80029ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	f003 021f 	and.w	r2, r3, #31
 80029b8:	4907      	ldr	r1, [pc, #28]	@ (80029d8 <__NVIC_EnableIRQ+0x38>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2001      	movs	r0, #1
 80029c2:	fa00 f202 	lsl.w	r2, r0, r2
 80029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	e000e100 	.word	0xe000e100

080029dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	db0a      	blt.n	8002a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	490c      	ldr	r1, [pc, #48]	@ (8002a28 <__NVIC_SetPriority+0x4c>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	0112      	lsls	r2, r2, #4
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	440b      	add	r3, r1
 8002a00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a04:	e00a      	b.n	8002a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	4908      	ldr	r1, [pc, #32]	@ (8002a2c <__NVIC_SetPriority+0x50>)
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	3b04      	subs	r3, #4
 8002a14:	0112      	lsls	r2, r2, #4
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	440b      	add	r3, r1
 8002a1a:	761a      	strb	r2, [r3, #24]
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000e100 	.word	0xe000e100
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b089      	sub	sp, #36	@ 0x24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f1c3 0307 	rsb	r3, r3, #7
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	bf28      	it	cs
 8002a4e:	2304      	movcs	r3, #4
 8002a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3304      	adds	r3, #4
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d902      	bls.n	8002a60 <NVIC_EncodePriority+0x30>
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3b03      	subs	r3, #3
 8002a5e:	e000      	b.n	8002a62 <NVIC_EncodePriority+0x32>
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a64:	f04f 32ff 	mov.w	r2, #4294967295
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	401a      	ands	r2, r3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a78:	f04f 31ff 	mov.w	r1, #4294967295
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	43d9      	mvns	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a88:	4313      	orrs	r3, r2
         );
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3724      	adds	r7, #36	@ 0x24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff ff4c 	bl	800293c <__NVIC_SetPriorityGrouping>
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002abe:	f7ff ff61 	bl	8002984 <__NVIC_GetPriorityGrouping>
 8002ac2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	6978      	ldr	r0, [r7, #20]
 8002aca:	f7ff ffb1 	bl	8002a30 <NVIC_EncodePriority>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff80 	bl	80029dc <__NVIC_SetPriority>
}
 8002adc:	bf00      	nop
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff ff54 	bl	80029a0 <__NVIC_EnableIRQ>
}
 8002af8:	bf00      	nop
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d008      	beq.n	8002b2a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e022      	b.n	8002b70 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 020e 	bic.w	r2, r2, #14
 8002b38:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0201 	bic.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4e:	f003 021c 	and.w	r2, r3, #28
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	2101      	movs	r1, #1
 8002b58:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d005      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2204      	movs	r2, #4
 8002b98:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
 8002b9e:	e029      	b.n	8002bf4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 020e 	bic.w	r2, r2, #14
 8002bae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc4:	f003 021c 	and.w	r2, r3, #28
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	2101      	movs	r1, #1
 8002bce:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	4798      	blx	r3
    }
  }
  return status;
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c0e:	e166      	b.n	8002ede <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	2101      	movs	r1, #1
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 8158 	beq.w	8002ed8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d005      	beq.n	8002c40 <HAL_GPIO_Init+0x40>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d130      	bne.n	8002ca2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4013      	ands	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c76:	2201      	movs	r2, #1
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4013      	ands	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	091b      	lsrs	r3, r3, #4
 8002c8c:	f003 0201 	and.w	r2, r3, #1
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d017      	beq.n	8002cde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	2203      	movs	r2, #3
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d123      	bne.n	8002d32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	08da      	lsrs	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3208      	adds	r2, #8
 8002cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	220f      	movs	r2, #15
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	691a      	ldr	r2, [r3, #16]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	08da      	lsrs	r2, r3, #3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3208      	adds	r2, #8
 8002d2c:	6939      	ldr	r1, [r7, #16]
 8002d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4013      	ands	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 0203 	and.w	r2, r3, #3
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80b2 	beq.w	8002ed8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d74:	4b61      	ldr	r3, [pc, #388]	@ (8002efc <HAL_GPIO_Init+0x2fc>)
 8002d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d78:	4a60      	ldr	r2, [pc, #384]	@ (8002efc <HAL_GPIO_Init+0x2fc>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d80:	4b5e      	ldr	r3, [pc, #376]	@ (8002efc <HAL_GPIO_Init+0x2fc>)
 8002d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d8c:	4a5c      	ldr	r2, [pc, #368]	@ (8002f00 <HAL_GPIO_Init+0x300>)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	089b      	lsrs	r3, r3, #2
 8002d92:	3302      	adds	r3, #2
 8002d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	220f      	movs	r2, #15
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4013      	ands	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002db6:	d02b      	beq.n	8002e10 <HAL_GPIO_Init+0x210>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a52      	ldr	r2, [pc, #328]	@ (8002f04 <HAL_GPIO_Init+0x304>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d025      	beq.n	8002e0c <HAL_GPIO_Init+0x20c>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a51      	ldr	r2, [pc, #324]	@ (8002f08 <HAL_GPIO_Init+0x308>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d01f      	beq.n	8002e08 <HAL_GPIO_Init+0x208>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a50      	ldr	r2, [pc, #320]	@ (8002f0c <HAL_GPIO_Init+0x30c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d019      	beq.n	8002e04 <HAL_GPIO_Init+0x204>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a4f      	ldr	r2, [pc, #316]	@ (8002f10 <HAL_GPIO_Init+0x310>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d013      	beq.n	8002e00 <HAL_GPIO_Init+0x200>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a4e      	ldr	r2, [pc, #312]	@ (8002f14 <HAL_GPIO_Init+0x314>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00d      	beq.n	8002dfc <HAL_GPIO_Init+0x1fc>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a4d      	ldr	r2, [pc, #308]	@ (8002f18 <HAL_GPIO_Init+0x318>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d007      	beq.n	8002df8 <HAL_GPIO_Init+0x1f8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a4c      	ldr	r2, [pc, #304]	@ (8002f1c <HAL_GPIO_Init+0x31c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d101      	bne.n	8002df4 <HAL_GPIO_Init+0x1f4>
 8002df0:	2307      	movs	r3, #7
 8002df2:	e00e      	b.n	8002e12 <HAL_GPIO_Init+0x212>
 8002df4:	2308      	movs	r3, #8
 8002df6:	e00c      	b.n	8002e12 <HAL_GPIO_Init+0x212>
 8002df8:	2306      	movs	r3, #6
 8002dfa:	e00a      	b.n	8002e12 <HAL_GPIO_Init+0x212>
 8002dfc:	2305      	movs	r3, #5
 8002dfe:	e008      	b.n	8002e12 <HAL_GPIO_Init+0x212>
 8002e00:	2304      	movs	r3, #4
 8002e02:	e006      	b.n	8002e12 <HAL_GPIO_Init+0x212>
 8002e04:	2303      	movs	r3, #3
 8002e06:	e004      	b.n	8002e12 <HAL_GPIO_Init+0x212>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e002      	b.n	8002e12 <HAL_GPIO_Init+0x212>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <HAL_GPIO_Init+0x212>
 8002e10:	2300      	movs	r3, #0
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	f002 0203 	and.w	r2, r2, #3
 8002e18:	0092      	lsls	r2, r2, #2
 8002e1a:	4093      	lsls	r3, r2
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e22:	4937      	ldr	r1, [pc, #220]	@ (8002f00 <HAL_GPIO_Init+0x300>)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	3302      	adds	r3, #2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e30:	4b3b      	ldr	r3, [pc, #236]	@ (8002f20 <HAL_GPIO_Init+0x320>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <HAL_GPIO_Init+0x320>)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e5a:	4b31      	ldr	r3, [pc, #196]	@ (8002f20 <HAL_GPIO_Init+0x320>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e7e:	4a28      	ldr	r2, [pc, #160]	@ (8002f20 <HAL_GPIO_Init+0x320>)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e84:	4b26      	ldr	r3, [pc, #152]	@ (8002f20 <HAL_GPIO_Init+0x320>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8002f20 <HAL_GPIO_Init+0x320>)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002eae:	4b1c      	ldr	r3, [pc, #112]	@ (8002f20 <HAL_GPIO_Init+0x320>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ed2:	4a13      	ldr	r2, [pc, #76]	@ (8002f20 <HAL_GPIO_Init+0x320>)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3301      	adds	r3, #1
 8002edc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f47f ae91 	bne.w	8002c10 <HAL_GPIO_Init+0x10>
  }
}
 8002eee:	bf00      	nop
 8002ef0:	bf00      	nop
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40010000 	.word	0x40010000
 8002f04:	48000400 	.word	0x48000400
 8002f08:	48000800 	.word	0x48000800
 8002f0c:	48000c00 	.word	0x48000c00
 8002f10:	48001000 	.word	0x48001000
 8002f14:	48001400 	.word	0x48001400
 8002f18:	48001800 	.word	0x48001800
 8002f1c:	48001c00 	.word	0x48001c00
 8002f20:	40010400 	.word	0x40010400

08002f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	807b      	strh	r3, [r7, #2]
 8002f30:	4613      	mov	r3, r2
 8002f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f34:	787b      	ldrb	r3, [r7, #1]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f3a:	887a      	ldrh	r2, [r7, #2]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f40:	e002      	b.n	8002f48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f66:	887a      	ldrh	r2, [r7, #2]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	041a      	lsls	r2, r3, #16
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	43d9      	mvns	r1, r3
 8002f72:	887b      	ldrh	r3, [r7, #2]
 8002f74:	400b      	ands	r3, r1
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	619a      	str	r2, [r3, #24]
}
 8002f7c:	bf00      	nop
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f92:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	88fb      	ldrh	r3, [r7, #6]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d006      	beq.n	8002fac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f9e:	4a05      	ldr	r2, [pc, #20]	@ (8002fb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd fca2 	bl	80008f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40010400 	.word	0x40010400

08002fb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e08d      	b.n	80030e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fe f9ac 	bl	800133c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2224      	movs	r2, #36	@ 0x24
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0201 	bic.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003008:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003018:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d107      	bne.n	8003032 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	e006      	b.n	8003040 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800303e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d108      	bne.n	800305a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	e007      	b.n	800306a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003068:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003078:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800307c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800308c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69d9      	ldr	r1, [r3, #28]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1a      	ldr	r2, [r3, #32]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	4608      	mov	r0, r1
 80030fa:	4611      	mov	r1, r2
 80030fc:	461a      	mov	r2, r3
 80030fe:	4603      	mov	r3, r0
 8003100:	817b      	strh	r3, [r7, #10]
 8003102:	460b      	mov	r3, r1
 8003104:	813b      	strh	r3, [r7, #8]
 8003106:	4613      	mov	r3, r2
 8003108:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b20      	cmp	r3, #32
 8003114:	f040 80f9 	bne.w	800330a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_I2C_Mem_Write+0x34>
 800311e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003120:	2b00      	cmp	r3, #0
 8003122:	d105      	bne.n	8003130 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800312a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0ed      	b.n	800330c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_I2C_Mem_Write+0x4e>
 800313a:	2302      	movs	r3, #2
 800313c:	e0e6      	b.n	800330c <HAL_I2C_Mem_Write+0x21c>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003146:	f7fe fad7 	bl	80016f8 <HAL_GetTick>
 800314a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	2319      	movs	r3, #25
 8003152:	2201      	movs	r2, #1
 8003154:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 fac3 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0d1      	b.n	800330c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2221      	movs	r2, #33	@ 0x21
 800316c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2240      	movs	r2, #64	@ 0x40
 8003174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a3a      	ldr	r2, [r7, #32]
 8003182:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003188:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003190:	88f8      	ldrh	r0, [r7, #6]
 8003192:	893a      	ldrh	r2, [r7, #8]
 8003194:	8979      	ldrh	r1, [r7, #10]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	9301      	str	r3, [sp, #4]
 800319a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	4603      	mov	r3, r0
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f9d3 	bl	800354c <I2C_RequestMemoryWrite>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0a9      	b.n	800330c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2bff      	cmp	r3, #255	@ 0xff
 80031c0:	d90e      	bls.n	80031e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	22ff      	movs	r2, #255	@ 0xff
 80031c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	8979      	ldrh	r1, [r7, #10]
 80031d0:	2300      	movs	r3, #0
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fc47 	bl	8003a6c <I2C_TransferConfig>
 80031de:	e00f      	b.n	8003200 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	8979      	ldrh	r1, [r7, #10]
 80031f2:	2300      	movs	r3, #0
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 fc36 	bl	8003a6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 fac6 	bl	8003796 <I2C_WaitOnTXISFlagUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e07b      	b.n	800330c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	781a      	ldrb	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003248:	b29b      	uxth	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d034      	beq.n	80032b8 <HAL_I2C_Mem_Write+0x1c8>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003252:	2b00      	cmp	r3, #0
 8003254:	d130      	bne.n	80032b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325c:	2200      	movs	r2, #0
 800325e:	2180      	movs	r1, #128	@ 0x80
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 fa3f 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e04d      	b.n	800330c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	2bff      	cmp	r3, #255	@ 0xff
 8003278:	d90e      	bls.n	8003298 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	22ff      	movs	r2, #255	@ 0xff
 800327e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003284:	b2da      	uxtb	r2, r3
 8003286:	8979      	ldrh	r1, [r7, #10]
 8003288:	2300      	movs	r3, #0
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 fbeb 	bl	8003a6c <I2C_TransferConfig>
 8003296:	e00f      	b.n	80032b8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	8979      	ldrh	r1, [r7, #10]
 80032aa:	2300      	movs	r3, #0
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 fbda 	bl	8003a6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d19e      	bne.n	8003200 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 faac 	bl	8003824 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e01a      	b.n	800330c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2220      	movs	r2, #32
 80032dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <HAL_I2C_Mem_Write+0x224>)
 80032ea:	400b      	ands	r3, r1
 80032ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	e000      	b.n	800330c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800330a:	2302      	movs	r3, #2
  }
}
 800330c:	4618      	mov	r0, r3
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	fe00e800 	.word	0xfe00e800

08003318 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	4608      	mov	r0, r1
 8003322:	4611      	mov	r1, r2
 8003324:	461a      	mov	r2, r3
 8003326:	4603      	mov	r3, r0
 8003328:	817b      	strh	r3, [r7, #10]
 800332a:	460b      	mov	r3, r1
 800332c:	813b      	strh	r3, [r7, #8]
 800332e:	4613      	mov	r3, r2
 8003330:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b20      	cmp	r3, #32
 800333c:	f040 80fd 	bne.w	800353a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <HAL_I2C_Mem_Read+0x34>
 8003346:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003348:	2b00      	cmp	r3, #0
 800334a:	d105      	bne.n	8003358 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003352:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0f1      	b.n	800353c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_I2C_Mem_Read+0x4e>
 8003362:	2302      	movs	r3, #2
 8003364:	e0ea      	b.n	800353c <HAL_I2C_Mem_Read+0x224>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800336e:	f7fe f9c3 	bl	80016f8 <HAL_GetTick>
 8003372:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	2319      	movs	r3, #25
 800337a:	2201      	movs	r2, #1
 800337c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f9af 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0d5      	b.n	800353c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2222      	movs	r2, #34	@ 0x22
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2240      	movs	r2, #64	@ 0x40
 800339c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a3a      	ldr	r2, [r7, #32]
 80033aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80033b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033b8:	88f8      	ldrh	r0, [r7, #6]
 80033ba:	893a      	ldrh	r2, [r7, #8]
 80033bc:	8979      	ldrh	r1, [r7, #10]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	9301      	str	r3, [sp, #4]
 80033c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	4603      	mov	r3, r0
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f913 	bl	80035f4 <I2C_RequestMemoryRead>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0ad      	b.n	800353c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2bff      	cmp	r3, #255	@ 0xff
 80033e8:	d90e      	bls.n	8003408 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	8979      	ldrh	r1, [r7, #10]
 80033f8:	4b52      	ldr	r3, [pc, #328]	@ (8003544 <HAL_I2C_Mem_Read+0x22c>)
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 fb33 	bl	8003a6c <I2C_TransferConfig>
 8003406:	e00f      	b.n	8003428 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003416:	b2da      	uxtb	r2, r3
 8003418:	8979      	ldrh	r1, [r7, #10]
 800341a:	4b4a      	ldr	r3, [pc, #296]	@ (8003544 <HAL_I2C_Mem_Read+0x22c>)
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 fb22 	bl	8003a6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342e:	2200      	movs	r2, #0
 8003430:	2104      	movs	r1, #4
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f956 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e07c      	b.n	800353c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d034      	beq.n	80034e8 <HAL_I2C_Mem_Read+0x1d0>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003482:	2b00      	cmp	r3, #0
 8003484:	d130      	bne.n	80034e8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800348c:	2200      	movs	r2, #0
 800348e:	2180      	movs	r1, #128	@ 0x80
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f927 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e04d      	b.n	800353c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2bff      	cmp	r3, #255	@ 0xff
 80034a8:	d90e      	bls.n	80034c8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	8979      	ldrh	r1, [r7, #10]
 80034b8:	2300      	movs	r3, #0
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 fad3 	bl	8003a6c <I2C_TransferConfig>
 80034c6:	e00f      	b.n	80034e8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	8979      	ldrh	r1, [r7, #10]
 80034da:	2300      	movs	r3, #0
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 fac2 	bl	8003a6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d19a      	bne.n	8003428 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f994 	bl	8003824 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e01a      	b.n	800353c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2220      	movs	r2, #32
 800350c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6859      	ldr	r1, [r3, #4]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4b0b      	ldr	r3, [pc, #44]	@ (8003548 <HAL_I2C_Mem_Read+0x230>)
 800351a:	400b      	ands	r3, r1
 800351c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	e000      	b.n	800353c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800353a:	2302      	movs	r3, #2
  }
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	80002400 	.word	0x80002400
 8003548:	fe00e800 	.word	0xfe00e800

0800354c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af02      	add	r7, sp, #8
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	4608      	mov	r0, r1
 8003556:	4611      	mov	r1, r2
 8003558:	461a      	mov	r2, r3
 800355a:	4603      	mov	r3, r0
 800355c:	817b      	strh	r3, [r7, #10]
 800355e:	460b      	mov	r3, r1
 8003560:	813b      	strh	r3, [r7, #8]
 8003562:	4613      	mov	r3, r2
 8003564:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	b2da      	uxtb	r2, r3
 800356a:	8979      	ldrh	r1, [r7, #10]
 800356c:	4b20      	ldr	r3, [pc, #128]	@ (80035f0 <I2C_RequestMemoryWrite+0xa4>)
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 fa79 	bl	8003a6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800357a:	69fa      	ldr	r2, [r7, #28]
 800357c:	69b9      	ldr	r1, [r7, #24]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f909 	bl	8003796 <I2C_WaitOnTXISFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e02c      	b.n	80035e8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d105      	bne.n	80035a0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003594:	893b      	ldrh	r3, [r7, #8]
 8003596:	b2da      	uxtb	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	629a      	str	r2, [r3, #40]	@ 0x28
 800359e:	e015      	b.n	80035cc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035a0:	893b      	ldrh	r3, [r7, #8]
 80035a2:	0a1b      	lsrs	r3, r3, #8
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ae:	69fa      	ldr	r2, [r7, #28]
 80035b0:	69b9      	ldr	r1, [r7, #24]
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f8ef 	bl	8003796 <I2C_WaitOnTXISFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e012      	b.n	80035e8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035c2:	893b      	ldrh	r3, [r7, #8]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2200      	movs	r2, #0
 80035d4:	2180      	movs	r1, #128	@ 0x80
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f884 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	80002000 	.word	0x80002000

080035f4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	4608      	mov	r0, r1
 80035fe:	4611      	mov	r1, r2
 8003600:	461a      	mov	r2, r3
 8003602:	4603      	mov	r3, r0
 8003604:	817b      	strh	r3, [r7, #10]
 8003606:	460b      	mov	r3, r1
 8003608:	813b      	strh	r3, [r7, #8]
 800360a:	4613      	mov	r3, r2
 800360c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	b2da      	uxtb	r2, r3
 8003612:	8979      	ldrh	r1, [r7, #10]
 8003614:	4b20      	ldr	r3, [pc, #128]	@ (8003698 <I2C_RequestMemoryRead+0xa4>)
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	2300      	movs	r3, #0
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fa26 	bl	8003a6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	69b9      	ldr	r1, [r7, #24]
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 f8b6 	bl	8003796 <I2C_WaitOnTXISFlagUntilTimeout>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e02c      	b.n	800368e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d105      	bne.n	8003646 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800363a:	893b      	ldrh	r3, [r7, #8]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	629a      	str	r2, [r3, #40]	@ 0x28
 8003644:	e015      	b.n	8003672 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003646:	893b      	ldrh	r3, [r7, #8]
 8003648:	0a1b      	lsrs	r3, r3, #8
 800364a:	b29b      	uxth	r3, r3
 800364c:	b2da      	uxtb	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003654:	69fa      	ldr	r2, [r7, #28]
 8003656:	69b9      	ldr	r1, [r7, #24]
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f89c 	bl	8003796 <I2C_WaitOnTXISFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e012      	b.n	800368e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003668:	893b      	ldrh	r3, [r7, #8]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2200      	movs	r2, #0
 800367a:	2140      	movs	r1, #64	@ 0x40
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f831 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	80002000 	.word	0x80002000

0800369c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d103      	bne.n	80036ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2200      	movs	r2, #0
 80036b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d007      	beq.n	80036d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	619a      	str	r2, [r3, #24]
  }
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f4:	e03b      	b.n	800376e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	6839      	ldr	r1, [r7, #0]
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f8d6 	bl	80038ac <I2C_IsErrorOccurred>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e041      	b.n	800378e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003710:	d02d      	beq.n	800376e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003712:	f7fd fff1 	bl	80016f8 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d302      	bcc.n	8003728 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d122      	bne.n	800376e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4013      	ands	r3, r2
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	429a      	cmp	r2, r3
 8003736:	bf0c      	ite	eq
 8003738:	2301      	moveq	r3, #1
 800373a:	2300      	movne	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	429a      	cmp	r2, r3
 8003744:	d113      	bne.n	800376e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	f043 0220 	orr.w	r2, r3, #32
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e00f      	b.n	800378e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	699a      	ldr	r2, [r3, #24]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4013      	ands	r3, r2
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	429a      	cmp	r2, r3
 800377c:	bf0c      	ite	eq
 800377e:	2301      	moveq	r3, #1
 8003780:	2300      	movne	r3, #0
 8003782:	b2db      	uxtb	r3, r3
 8003784:	461a      	mov	r2, r3
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	429a      	cmp	r2, r3
 800378a:	d0b4      	beq.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037a2:	e033      	b.n	800380c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	68b9      	ldr	r1, [r7, #8]
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f87f 	bl	80038ac <I2C_IsErrorOccurred>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e031      	b.n	800381c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	d025      	beq.n	800380c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c0:	f7fd ff9a 	bl	80016f8 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d302      	bcc.n	80037d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d11a      	bne.n	800380c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d013      	beq.n	800380c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e8:	f043 0220 	orr.w	r2, r3, #32
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e007      	b.n	800381c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b02      	cmp	r3, #2
 8003818:	d1c4      	bne.n	80037a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003830:	e02f      	b.n	8003892 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f838 	bl	80038ac <I2C_IsErrorOccurred>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e02d      	b.n	80038a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003846:	f7fd ff57 	bl	80016f8 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	429a      	cmp	r2, r3
 8003854:	d302      	bcc.n	800385c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d11a      	bne.n	8003892 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b20      	cmp	r3, #32
 8003868:	d013      	beq.n	8003892 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386e:	f043 0220 	orr.w	r2, r3, #32
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e007      	b.n	80038a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b20      	cmp	r3, #32
 800389e:	d1c8      	bne.n	8003832 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	@ 0x28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d068      	beq.n	80039aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2210      	movs	r2, #16
 80038de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038e0:	e049      	b.n	8003976 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e8:	d045      	beq.n	8003976 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038ea:	f7fd ff05 	bl	80016f8 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d302      	bcc.n	8003900 <I2C_IsErrorOccurred+0x54>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d13a      	bne.n	8003976 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800390a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003912:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800391e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003922:	d121      	bne.n	8003968 <I2C_IsErrorOccurred+0xbc>
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800392a:	d01d      	beq.n	8003968 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800392c:	7cfb      	ldrb	r3, [r7, #19]
 800392e:	2b20      	cmp	r3, #32
 8003930:	d01a      	beq.n	8003968 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003940:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003942:	f7fd fed9 	bl	80016f8 <HAL_GetTick>
 8003946:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003948:	e00e      	b.n	8003968 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800394a:	f7fd fed5 	bl	80016f8 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b19      	cmp	r3, #25
 8003956:	d907      	bls.n	8003968 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	f043 0320 	orr.w	r3, r3, #32
 800395e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003966:	e006      	b.n	8003976 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b20      	cmp	r3, #32
 8003974:	d1e9      	bne.n	800394a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b20      	cmp	r3, #32
 8003982:	d003      	beq.n	800398c <I2C_IsErrorOccurred+0xe0>
 8003984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0aa      	beq.n	80038e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800398c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003990:	2b00      	cmp	r3, #0
 8003992:	d103      	bne.n	800399c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2220      	movs	r2, #32
 800399a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	f043 0304 	orr.w	r3, r3, #4
 80039a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00b      	beq.n	80039d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	f043 0308 	orr.w	r3, r3, #8
 80039e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00b      	beq.n	8003a18 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	f043 0302 	orr.w	r3, r3, #2
 8003a06:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003a18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d01c      	beq.n	8003a5a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f7ff fe3b 	bl	800369c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6859      	ldr	r1, [r3, #4]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4b0d      	ldr	r3, [pc, #52]	@ (8003a68 <I2C_IsErrorOccurred+0x1bc>)
 8003a32:	400b      	ands	r3, r1
 8003a34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3728      	adds	r7, #40	@ 0x28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	fe00e800 	.word	0xfe00e800

08003a6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	460b      	mov	r3, r1
 8003a78:	817b      	strh	r3, [r7, #10]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a7e:	897b      	ldrh	r3, [r7, #10]
 8003a80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a84:	7a7b      	ldrb	r3, [r7, #9]
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a8c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a9a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	0d5b      	lsrs	r3, r3, #21
 8003aa6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003aaa:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <I2C_TransferConfig+0x60>)
 8003aac:	430b      	orrs	r3, r1
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	ea02 0103 	and.w	r1, r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003abe:	bf00      	nop
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	03ff63ff 	.word	0x03ff63ff

08003ad0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	d138      	bne.n	8003b58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e032      	b.n	8003b5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2224      	movs	r2, #36	@ 0x24
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0201 	bic.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6819      	ldr	r1, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	e000      	b.n	8003b5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b58:	2302      	movs	r3, #2
  }
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b085      	sub	sp, #20
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d139      	bne.n	8003bf0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e033      	b.n	8003bf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2224      	movs	r2, #36	@ 0x24
 8003b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0201 	bic.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003bb8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	e000      	b.n	8003bf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bf0:	2302      	movs	r3, #2
  }
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c04:	4b04      	ldr	r3, [pc, #16]	@ (8003c18 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40007000 	.word	0x40007000

08003c1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c2a:	d130      	bne.n	8003c8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c2c:	4b23      	ldr	r3, [pc, #140]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c38:	d038      	beq.n	8003cac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c3a:	4b20      	ldr	r3, [pc, #128]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c42:	4a1e      	ldr	r2, [pc, #120]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2232      	movs	r2, #50	@ 0x32
 8003c50:	fb02 f303 	mul.w	r3, r2, r3
 8003c54:	4a1b      	ldr	r2, [pc, #108]	@ (8003cc4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	0c9b      	lsrs	r3, r3, #18
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c60:	e002      	b.n	8003c68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3b01      	subs	r3, #1
 8003c66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c68:	4b14      	ldr	r3, [pc, #80]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c74:	d102      	bne.n	8003c7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f2      	bne.n	8003c62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c88:	d110      	bne.n	8003cac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e00f      	b.n	8003cae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c9a:	d007      	beq.n	8003cac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c9c:	4b07      	ldr	r3, [pc, #28]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ca4:	4a05      	ldr	r2, [pc, #20]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ca6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003caa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40007000 	.word	0x40007000
 8003cc0:	20000004 	.word	0x20000004
 8003cc4:	431bde83 	.word	0x431bde83

08003cc8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d102      	bne.n	8003cdc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f000 bc08 	b.w	80044ec <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cdc:	4b96      	ldr	r3, [pc, #600]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 030c 	and.w	r3, r3, #12
 8003ce4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ce6:	4b94      	ldr	r3, [pc, #592]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0310 	and.w	r3, r3, #16
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80e4 	beq.w	8003ec6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d007      	beq.n	8003d14 <HAL_RCC_OscConfig+0x4c>
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2b0c      	cmp	r3, #12
 8003d08:	f040 808b 	bne.w	8003e22 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	f040 8087 	bne.w	8003e22 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d14:	4b88      	ldr	r3, [pc, #544]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_RCC_OscConfig+0x64>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e3df      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1a      	ldr	r2, [r3, #32]
 8003d30:	4b81      	ldr	r3, [pc, #516]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d004      	beq.n	8003d46 <HAL_RCC_OscConfig+0x7e>
 8003d3c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d44:	e005      	b.n	8003d52 <HAL_RCC_OscConfig+0x8a>
 8003d46:	4b7c      	ldr	r3, [pc, #496]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d4c:	091b      	lsrs	r3, r3, #4
 8003d4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d223      	bcs.n	8003d9e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fdc4 	bl	80048e8 <RCC_SetFlashLatencyFromMSIRange>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e3c0      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d6a:	4b73      	ldr	r3, [pc, #460]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a72      	ldr	r2, [pc, #456]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d70:	f043 0308 	orr.w	r3, r3, #8
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	4b70      	ldr	r3, [pc, #448]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	496d      	ldr	r1, [pc, #436]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d88:	4b6b      	ldr	r3, [pc, #428]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	021b      	lsls	r3, r3, #8
 8003d96:	4968      	ldr	r1, [pc, #416]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
 8003d9c:	e025      	b.n	8003dea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d9e:	4b66      	ldr	r3, [pc, #408]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a65      	ldr	r2, [pc, #404]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003da4:	f043 0308 	orr.w	r3, r3, #8
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	4b63      	ldr	r3, [pc, #396]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	4960      	ldr	r1, [pc, #384]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dbc:	4b5e      	ldr	r3, [pc, #376]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	021b      	lsls	r3, r3, #8
 8003dca:	495b      	ldr	r1, [pc, #364]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fd84 	bl	80048e8 <RCC_SetFlashLatencyFromMSIRange>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e380      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dea:	f000 fc87 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 8003dee:	4602      	mov	r2, r0
 8003df0:	4b51      	ldr	r3, [pc, #324]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	091b      	lsrs	r3, r3, #4
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	4950      	ldr	r1, [pc, #320]	@ (8003f3c <HAL_RCC_OscConfig+0x274>)
 8003dfc:	5ccb      	ldrb	r3, [r1, r3]
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	fa22 f303 	lsr.w	r3, r2, r3
 8003e06:	4a4e      	ldr	r2, [pc, #312]	@ (8003f40 <HAL_RCC_OscConfig+0x278>)
 8003e08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e0a:	4b4e      	ldr	r3, [pc, #312]	@ (8003f44 <HAL_RCC_OscConfig+0x27c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fd fb5a 	bl	80014c8 <HAL_InitTick>
 8003e14:	4603      	mov	r3, r0
 8003e16:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d052      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	e364      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d032      	beq.n	8003e90 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e2a:	4b43      	ldr	r3, [pc, #268]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a42      	ldr	r2, [pc, #264]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e36:	f7fd fc5f 	bl	80016f8 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e3e:	f7fd fc5b 	bl	80016f8 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e34d      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e50:	4b39      	ldr	r3, [pc, #228]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e5c:	4b36      	ldr	r3, [pc, #216]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a35      	ldr	r2, [pc, #212]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e62:	f043 0308 	orr.w	r3, r3, #8
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	4b33      	ldr	r3, [pc, #204]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	4930      	ldr	r1, [pc, #192]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	492b      	ldr	r1, [pc, #172]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	604b      	str	r3, [r1, #4]
 8003e8e:	e01a      	b.n	8003ec6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e90:	4b29      	ldr	r3, [pc, #164]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a28      	ldr	r2, [pc, #160]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e96:	f023 0301 	bic.w	r3, r3, #1
 8003e9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e9c:	f7fd fc2c 	bl	80016f8 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ea4:	f7fd fc28 	bl	80016f8 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e31a      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003eb6:	4b20      	ldr	r3, [pc, #128]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f0      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x1dc>
 8003ec2:	e000      	b.n	8003ec6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ec4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d073      	beq.n	8003fba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d005      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x21c>
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	2b0c      	cmp	r3, #12
 8003edc:	d10e      	bne.n	8003efc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d10b      	bne.n	8003efc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee4:	4b14      	ldr	r3, [pc, #80]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d063      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x2f0>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d15f      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e2f7      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f04:	d106      	bne.n	8003f14 <HAL_RCC_OscConfig+0x24c>
 8003f06:	4b0c      	ldr	r3, [pc, #48]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a0b      	ldr	r2, [pc, #44]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	e025      	b.n	8003f60 <HAL_RCC_OscConfig+0x298>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f1c:	d114      	bne.n	8003f48 <HAL_RCC_OscConfig+0x280>
 8003f1e:	4b06      	ldr	r3, [pc, #24]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a05      	ldr	r2, [pc, #20]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003f24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	4b03      	ldr	r3, [pc, #12]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a02      	ldr	r2, [pc, #8]	@ (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	e013      	b.n	8003f60 <HAL_RCC_OscConfig+0x298>
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	0800a12c 	.word	0x0800a12c
 8003f40:	20000004 	.word	0x20000004
 8003f44:	20000008 	.word	0x20000008
 8003f48:	4ba0      	ldr	r3, [pc, #640]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a9f      	ldr	r2, [pc, #636]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 8003f4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	4b9d      	ldr	r3, [pc, #628]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a9c      	ldr	r2, [pc, #624]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 8003f5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d013      	beq.n	8003f90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f68:	f7fd fbc6 	bl	80016f8 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f70:	f7fd fbc2 	bl	80016f8 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b64      	cmp	r3, #100	@ 0x64
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e2b4      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f82:	4b92      	ldr	r3, [pc, #584]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0x2a8>
 8003f8e:	e014      	b.n	8003fba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7fd fbb2 	bl	80016f8 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f98:	f7fd fbae 	bl	80016f8 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b64      	cmp	r3, #100	@ 0x64
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e2a0      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003faa:	4b88      	ldr	r3, [pc, #544]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0x2d0>
 8003fb6:	e000      	b.n	8003fba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d060      	beq.n	8004088 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x310>
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	2b0c      	cmp	r3, #12
 8003fd0:	d119      	bne.n	8004006 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d116      	bne.n	8004006 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd8:	4b7c      	ldr	r3, [pc, #496]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x328>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e27d      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff0:	4b76      	ldr	r3, [pc, #472]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	061b      	lsls	r3, r3, #24
 8003ffe:	4973      	ldr	r1, [pc, #460]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 8004000:	4313      	orrs	r3, r2
 8004002:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004004:	e040      	b.n	8004088 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d023      	beq.n	8004056 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800400e:	4b6f      	ldr	r3, [pc, #444]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a6e      	ldr	r2, [pc, #440]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 8004014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401a:	f7fd fb6d 	bl	80016f8 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004022:	f7fd fb69 	bl	80016f8 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e25b      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004034:	4b65      	ldr	r3, [pc, #404]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004040:	4b62      	ldr	r3, [pc, #392]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	061b      	lsls	r3, r3, #24
 800404e:	495f      	ldr	r1, [pc, #380]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 8004050:	4313      	orrs	r3, r2
 8004052:	604b      	str	r3, [r1, #4]
 8004054:	e018      	b.n	8004088 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004056:	4b5d      	ldr	r3, [pc, #372]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a5c      	ldr	r2, [pc, #368]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 800405c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004062:	f7fd fb49 	bl	80016f8 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800406a:	f7fd fb45 	bl	80016f8 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e237      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800407c:	4b53      	ldr	r3, [pc, #332]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1f0      	bne.n	800406a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b00      	cmp	r3, #0
 8004092:	d03c      	beq.n	800410e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01c      	beq.n	80040d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800409c:	4b4b      	ldr	r3, [pc, #300]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 800409e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040a2:	4a4a      	ldr	r2, [pc, #296]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ac:	f7fd fb24 	bl	80016f8 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040b4:	f7fd fb20 	bl	80016f8 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e212      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040c6:	4b41      	ldr	r3, [pc, #260]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 80040c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0ef      	beq.n	80040b4 <HAL_RCC_OscConfig+0x3ec>
 80040d4:	e01b      	b.n	800410e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040d6:	4b3d      	ldr	r3, [pc, #244]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 80040d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040dc:	4a3b      	ldr	r2, [pc, #236]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 80040de:	f023 0301 	bic.w	r3, r3, #1
 80040e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e6:	f7fd fb07 	bl	80016f8 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ee:	f7fd fb03 	bl	80016f8 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e1f5      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004100:	4b32      	ldr	r3, [pc, #200]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 8004102:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1ef      	bne.n	80040ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 80a6 	beq.w	8004268 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800411c:	2300      	movs	r3, #0
 800411e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004120:	4b2a      	ldr	r3, [pc, #168]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 8004122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10d      	bne.n	8004148 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800412c:	4b27      	ldr	r3, [pc, #156]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 800412e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004130:	4a26      	ldr	r2, [pc, #152]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 8004132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004136:	6593      	str	r3, [r2, #88]	@ 0x58
 8004138:	4b24      	ldr	r3, [pc, #144]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 800413a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004144:	2301      	movs	r3, #1
 8004146:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004148:	4b21      	ldr	r3, [pc, #132]	@ (80041d0 <HAL_RCC_OscConfig+0x508>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d118      	bne.n	8004186 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004154:	4b1e      	ldr	r3, [pc, #120]	@ (80041d0 <HAL_RCC_OscConfig+0x508>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1d      	ldr	r2, [pc, #116]	@ (80041d0 <HAL_RCC_OscConfig+0x508>)
 800415a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800415e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004160:	f7fd faca 	bl	80016f8 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004168:	f7fd fac6 	bl	80016f8 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e1b8      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800417a:	4b15      	ldr	r3, [pc, #84]	@ (80041d0 <HAL_RCC_OscConfig+0x508>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0f0      	beq.n	8004168 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d108      	bne.n	80041a0 <HAL_RCC_OscConfig+0x4d8>
 800418e:	4b0f      	ldr	r3, [pc, #60]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 8004190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004194:	4a0d      	ldr	r2, [pc, #52]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 8004196:	f043 0301 	orr.w	r3, r3, #1
 800419a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800419e:	e029      	b.n	80041f4 <HAL_RCC_OscConfig+0x52c>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	2b05      	cmp	r3, #5
 80041a6:	d115      	bne.n	80041d4 <HAL_RCC_OscConfig+0x50c>
 80041a8:	4b08      	ldr	r3, [pc, #32]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ae:	4a07      	ldr	r2, [pc, #28]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 80041b0:	f043 0304 	orr.w	r3, r3, #4
 80041b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041b8:	4b04      	ldr	r3, [pc, #16]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041be:	4a03      	ldr	r2, [pc, #12]	@ (80041cc <HAL_RCC_OscConfig+0x504>)
 80041c0:	f043 0301 	orr.w	r3, r3, #1
 80041c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041c8:	e014      	b.n	80041f4 <HAL_RCC_OscConfig+0x52c>
 80041ca:	bf00      	nop
 80041cc:	40021000 	.word	0x40021000
 80041d0:	40007000 	.word	0x40007000
 80041d4:	4b9d      	ldr	r3, [pc, #628]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 80041d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041da:	4a9c      	ldr	r2, [pc, #624]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 80041dc:	f023 0301 	bic.w	r3, r3, #1
 80041e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041e4:	4b99      	ldr	r3, [pc, #612]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ea:	4a98      	ldr	r2, [pc, #608]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 80041ec:	f023 0304 	bic.w	r3, r3, #4
 80041f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d016      	beq.n	800422a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fc:	f7fd fa7c 	bl	80016f8 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004202:	e00a      	b.n	800421a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004204:	f7fd fa78 	bl	80016f8 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e168      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800421a:	4b8c      	ldr	r3, [pc, #560]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0ed      	beq.n	8004204 <HAL_RCC_OscConfig+0x53c>
 8004228:	e015      	b.n	8004256 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422a:	f7fd fa65 	bl	80016f8 <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004230:	e00a      	b.n	8004248 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004232:	f7fd fa61 	bl	80016f8 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004240:	4293      	cmp	r3, r2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e151      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004248:	4b80      	ldr	r3, [pc, #512]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1ed      	bne.n	8004232 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004256:	7ffb      	ldrb	r3, [r7, #31]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d105      	bne.n	8004268 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800425c:	4b7b      	ldr	r3, [pc, #492]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 800425e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004260:	4a7a      	ldr	r2, [pc, #488]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 8004262:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004266:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b00      	cmp	r3, #0
 8004272:	d03c      	beq.n	80042ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01c      	beq.n	80042b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800427c:	4b73      	ldr	r3, [pc, #460]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 800427e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004282:	4a72      	ldr	r2, [pc, #456]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fd fa34 	bl	80016f8 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004294:	f7fd fa30 	bl	80016f8 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e122      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042a6:	4b69      	ldr	r3, [pc, #420]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 80042a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0ef      	beq.n	8004294 <HAL_RCC_OscConfig+0x5cc>
 80042b4:	e01b      	b.n	80042ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042b6:	4b65      	ldr	r3, [pc, #404]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 80042b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042bc:	4a63      	ldr	r2, [pc, #396]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 80042be:	f023 0301 	bic.w	r3, r3, #1
 80042c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c6:	f7fd fa17 	bl	80016f8 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042ce:	f7fd fa13 	bl	80016f8 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e105      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042e0:	4b5a      	ldr	r3, [pc, #360]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 80042e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1ef      	bne.n	80042ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 80f9 	beq.w	80044ea <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	f040 80cf 	bne.w	80044a0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004302:	4b52      	ldr	r3, [pc, #328]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f003 0203 	and.w	r2, r3, #3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004312:	429a      	cmp	r2, r3
 8004314:	d12c      	bne.n	8004370 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004320:	3b01      	subs	r3, #1
 8004322:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004324:	429a      	cmp	r2, r3
 8004326:	d123      	bne.n	8004370 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004332:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004334:	429a      	cmp	r2, r3
 8004336:	d11b      	bne.n	8004370 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004342:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004344:	429a      	cmp	r2, r3
 8004346:	d113      	bne.n	8004370 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004352:	085b      	lsrs	r3, r3, #1
 8004354:	3b01      	subs	r3, #1
 8004356:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004358:	429a      	cmp	r2, r3
 800435a:	d109      	bne.n	8004370 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	085b      	lsrs	r3, r3, #1
 8004368:	3b01      	subs	r3, #1
 800436a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800436c:	429a      	cmp	r2, r3
 800436e:	d071      	beq.n	8004454 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	2b0c      	cmp	r3, #12
 8004374:	d068      	beq.n	8004448 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004376:	4b35      	ldr	r3, [pc, #212]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d105      	bne.n	800438e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004382:	4b32      	ldr	r3, [pc, #200]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e0ac      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004392:	4b2e      	ldr	r3, [pc, #184]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a2d      	ldr	r2, [pc, #180]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 8004398:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800439c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800439e:	f7fd f9ab 	bl	80016f8 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a6:	f7fd f9a7 	bl	80016f8 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e099      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b8:	4b24      	ldr	r3, [pc, #144]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1f0      	bne.n	80043a6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043c4:	4b21      	ldr	r3, [pc, #132]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	4b21      	ldr	r3, [pc, #132]	@ (8004450 <HAL_RCC_OscConfig+0x788>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80043d4:	3a01      	subs	r2, #1
 80043d6:	0112      	lsls	r2, r2, #4
 80043d8:	4311      	orrs	r1, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80043de:	0212      	lsls	r2, r2, #8
 80043e0:	4311      	orrs	r1, r2
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80043e6:	0852      	lsrs	r2, r2, #1
 80043e8:	3a01      	subs	r2, #1
 80043ea:	0552      	lsls	r2, r2, #21
 80043ec:	4311      	orrs	r1, r2
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80043f2:	0852      	lsrs	r2, r2, #1
 80043f4:	3a01      	subs	r2, #1
 80043f6:	0652      	lsls	r2, r2, #25
 80043f8:	4311      	orrs	r1, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043fe:	06d2      	lsls	r2, r2, #27
 8004400:	430a      	orrs	r2, r1
 8004402:	4912      	ldr	r1, [pc, #72]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 8004404:	4313      	orrs	r3, r2
 8004406:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004408:	4b10      	ldr	r3, [pc, #64]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a0f      	ldr	r2, [pc, #60]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 800440e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004412:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004414:	4b0d      	ldr	r3, [pc, #52]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4a0c      	ldr	r2, [pc, #48]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 800441a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800441e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004420:	f7fd f96a 	bl	80016f8 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004428:	f7fd f966 	bl	80016f8 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e058      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800443a:	4b04      	ldr	r3, [pc, #16]	@ (800444c <HAL_RCC_OscConfig+0x784>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f0      	beq.n	8004428 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004446:	e050      	b.n	80044ea <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e04f      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
 800444c:	40021000 	.word	0x40021000
 8004450:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004454:	4b27      	ldr	r3, [pc, #156]	@ (80044f4 <HAL_RCC_OscConfig+0x82c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d144      	bne.n	80044ea <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004460:	4b24      	ldr	r3, [pc, #144]	@ (80044f4 <HAL_RCC_OscConfig+0x82c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a23      	ldr	r2, [pc, #140]	@ (80044f4 <HAL_RCC_OscConfig+0x82c>)
 8004466:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800446a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800446c:	4b21      	ldr	r3, [pc, #132]	@ (80044f4 <HAL_RCC_OscConfig+0x82c>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	4a20      	ldr	r2, [pc, #128]	@ (80044f4 <HAL_RCC_OscConfig+0x82c>)
 8004472:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004476:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004478:	f7fd f93e 	bl	80016f8 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004480:	f7fd f93a 	bl	80016f8 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e02c      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004492:	4b18      	ldr	r3, [pc, #96]	@ (80044f4 <HAL_RCC_OscConfig+0x82c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f0      	beq.n	8004480 <HAL_RCC_OscConfig+0x7b8>
 800449e:	e024      	b.n	80044ea <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	2b0c      	cmp	r3, #12
 80044a4:	d01f      	beq.n	80044e6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a6:	4b13      	ldr	r3, [pc, #76]	@ (80044f4 <HAL_RCC_OscConfig+0x82c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a12      	ldr	r2, [pc, #72]	@ (80044f4 <HAL_RCC_OscConfig+0x82c>)
 80044ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b2:	f7fd f921 	bl	80016f8 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ba:	f7fd f91d 	bl	80016f8 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e00f      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044cc:	4b09      	ldr	r3, [pc, #36]	@ (80044f4 <HAL_RCC_OscConfig+0x82c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1f0      	bne.n	80044ba <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80044d8:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <HAL_RCC_OscConfig+0x82c>)
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	4905      	ldr	r1, [pc, #20]	@ (80044f4 <HAL_RCC_OscConfig+0x82c>)
 80044de:	4b06      	ldr	r3, [pc, #24]	@ (80044f8 <HAL_RCC_OscConfig+0x830>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	60cb      	str	r3, [r1, #12]
 80044e4:	e001      	b.n	80044ea <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3720      	adds	r7, #32
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40021000 	.word	0x40021000
 80044f8:	feeefffc 	.word	0xfeeefffc

080044fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e0e7      	b.n	80046e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004510:	4b75      	ldr	r3, [pc, #468]	@ (80046e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d910      	bls.n	8004540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451e:	4b72      	ldr	r3, [pc, #456]	@ (80046e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f023 0207 	bic.w	r2, r3, #7
 8004526:	4970      	ldr	r1, [pc, #448]	@ (80046e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	4313      	orrs	r3, r2
 800452c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452e:	4b6e      	ldr	r3, [pc, #440]	@ (80046e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d001      	beq.n	8004540 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0cf      	b.n	80046e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d010      	beq.n	800456e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	4b66      	ldr	r3, [pc, #408]	@ (80046ec <HAL_RCC_ClockConfig+0x1f0>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004558:	429a      	cmp	r2, r3
 800455a:	d908      	bls.n	800456e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800455c:	4b63      	ldr	r3, [pc, #396]	@ (80046ec <HAL_RCC_ClockConfig+0x1f0>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	4960      	ldr	r1, [pc, #384]	@ (80046ec <HAL_RCC_ClockConfig+0x1f0>)
 800456a:	4313      	orrs	r3, r2
 800456c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d04c      	beq.n	8004614 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b03      	cmp	r3, #3
 8004580:	d107      	bne.n	8004592 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004582:	4b5a      	ldr	r3, [pc, #360]	@ (80046ec <HAL_RCC_ClockConfig+0x1f0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d121      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e0a6      	b.n	80046e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d107      	bne.n	80045aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800459a:	4b54      	ldr	r3, [pc, #336]	@ (80046ec <HAL_RCC_ClockConfig+0x1f0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d115      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e09a      	b.n	80046e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d107      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045b2:	4b4e      	ldr	r3, [pc, #312]	@ (80046ec <HAL_RCC_ClockConfig+0x1f0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d109      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e08e      	b.n	80046e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c2:	4b4a      	ldr	r3, [pc, #296]	@ (80046ec <HAL_RCC_ClockConfig+0x1f0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e086      	b.n	80046e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045d2:	4b46      	ldr	r3, [pc, #280]	@ (80046ec <HAL_RCC_ClockConfig+0x1f0>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f023 0203 	bic.w	r2, r3, #3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4943      	ldr	r1, [pc, #268]	@ (80046ec <HAL_RCC_ClockConfig+0x1f0>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e4:	f7fd f888 	bl	80016f8 <HAL_GetTick>
 80045e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ec:	f7fd f884 	bl	80016f8 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e06e      	b.n	80046e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004602:	4b3a      	ldr	r3, [pc, #232]	@ (80046ec <HAL_RCC_ClockConfig+0x1f0>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 020c 	and.w	r2, r3, #12
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	429a      	cmp	r2, r3
 8004612:	d1eb      	bne.n	80045ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d010      	beq.n	8004642 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	4b31      	ldr	r3, [pc, #196]	@ (80046ec <HAL_RCC_ClockConfig+0x1f0>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800462c:	429a      	cmp	r2, r3
 800462e:	d208      	bcs.n	8004642 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004630:	4b2e      	ldr	r3, [pc, #184]	@ (80046ec <HAL_RCC_ClockConfig+0x1f0>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	492b      	ldr	r1, [pc, #172]	@ (80046ec <HAL_RCC_ClockConfig+0x1f0>)
 800463e:	4313      	orrs	r3, r2
 8004640:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004642:	4b29      	ldr	r3, [pc, #164]	@ (80046e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d210      	bcs.n	8004672 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004650:	4b25      	ldr	r3, [pc, #148]	@ (80046e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f023 0207 	bic.w	r2, r3, #7
 8004658:	4923      	ldr	r1, [pc, #140]	@ (80046e8 <HAL_RCC_ClockConfig+0x1ec>)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	4313      	orrs	r3, r2
 800465e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004660:	4b21      	ldr	r3, [pc, #132]	@ (80046e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d001      	beq.n	8004672 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e036      	b.n	80046e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d008      	beq.n	8004690 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800467e:	4b1b      	ldr	r3, [pc, #108]	@ (80046ec <HAL_RCC_ClockConfig+0x1f0>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	4918      	ldr	r1, [pc, #96]	@ (80046ec <HAL_RCC_ClockConfig+0x1f0>)
 800468c:	4313      	orrs	r3, r2
 800468e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0308 	and.w	r3, r3, #8
 8004698:	2b00      	cmp	r3, #0
 800469a:	d009      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800469c:	4b13      	ldr	r3, [pc, #76]	@ (80046ec <HAL_RCC_ClockConfig+0x1f0>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	4910      	ldr	r1, [pc, #64]	@ (80046ec <HAL_RCC_ClockConfig+0x1f0>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046b0:	f000 f824 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 80046b4:	4602      	mov	r2, r0
 80046b6:	4b0d      	ldr	r3, [pc, #52]	@ (80046ec <HAL_RCC_ClockConfig+0x1f0>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	091b      	lsrs	r3, r3, #4
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	490b      	ldr	r1, [pc, #44]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f4>)
 80046c2:	5ccb      	ldrb	r3, [r1, r3]
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
 80046cc:	4a09      	ldr	r2, [pc, #36]	@ (80046f4 <HAL_RCC_ClockConfig+0x1f8>)
 80046ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046d0:	4b09      	ldr	r3, [pc, #36]	@ (80046f8 <HAL_RCC_ClockConfig+0x1fc>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fc fef7 	bl	80014c8 <HAL_InitTick>
 80046da:	4603      	mov	r3, r0
 80046dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80046de:	7afb      	ldrb	r3, [r7, #11]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40022000 	.word	0x40022000
 80046ec:	40021000 	.word	0x40021000
 80046f0:	0800a12c 	.word	0x0800a12c
 80046f4:	20000004 	.word	0x20000004
 80046f8:	20000008 	.word	0x20000008

080046fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b089      	sub	sp, #36	@ 0x24
 8004700:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	61fb      	str	r3, [r7, #28]
 8004706:	2300      	movs	r3, #0
 8004708:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800470a:	4b3e      	ldr	r3, [pc, #248]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x108>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 030c 	and.w	r3, r3, #12
 8004712:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004714:	4b3b      	ldr	r3, [pc, #236]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x108>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0x34>
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	2b0c      	cmp	r3, #12
 8004728:	d121      	bne.n	800476e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d11e      	bne.n	800476e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004730:	4b34      	ldr	r3, [pc, #208]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x108>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b00      	cmp	r3, #0
 800473a:	d107      	bne.n	800474c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800473c:	4b31      	ldr	r3, [pc, #196]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x108>)
 800473e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004742:	0a1b      	lsrs	r3, r3, #8
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	e005      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800474c:	4b2d      	ldr	r3, [pc, #180]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x108>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004758:	4a2b      	ldr	r2, [pc, #172]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x10c>)
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004760:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10d      	bne.n	8004784 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800476c:	e00a      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	2b04      	cmp	r3, #4
 8004772:	d102      	bne.n	800477a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004774:	4b25      	ldr	r3, [pc, #148]	@ (800480c <HAL_RCC_GetSysClockFreq+0x110>)
 8004776:	61bb      	str	r3, [r7, #24]
 8004778:	e004      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b08      	cmp	r3, #8
 800477e:	d101      	bne.n	8004784 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004780:	4b23      	ldr	r3, [pc, #140]	@ (8004810 <HAL_RCC_GetSysClockFreq+0x114>)
 8004782:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2b0c      	cmp	r3, #12
 8004788:	d134      	bne.n	80047f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800478a:	4b1e      	ldr	r3, [pc, #120]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x108>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d003      	beq.n	80047a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b03      	cmp	r3, #3
 800479e:	d003      	beq.n	80047a8 <HAL_RCC_GetSysClockFreq+0xac>
 80047a0:	e005      	b.n	80047ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047a2:	4b1a      	ldr	r3, [pc, #104]	@ (800480c <HAL_RCC_GetSysClockFreq+0x110>)
 80047a4:	617b      	str	r3, [r7, #20]
      break;
 80047a6:	e005      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047a8:	4b19      	ldr	r3, [pc, #100]	@ (8004810 <HAL_RCC_GetSysClockFreq+0x114>)
 80047aa:	617b      	str	r3, [r7, #20]
      break;
 80047ac:	e002      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	617b      	str	r3, [r7, #20]
      break;
 80047b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047b4:	4b13      	ldr	r3, [pc, #76]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x108>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	091b      	lsrs	r3, r3, #4
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	3301      	adds	r3, #1
 80047c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047c2:	4b10      	ldr	r3, [pc, #64]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x108>)
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	fb03 f202 	mul.w	r2, r3, r2
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047da:	4b0a      	ldr	r3, [pc, #40]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x108>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	0e5b      	lsrs	r3, r3, #25
 80047e0:	f003 0303 	and.w	r3, r3, #3
 80047e4:	3301      	adds	r3, #1
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047f4:	69bb      	ldr	r3, [r7, #24]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3724      	adds	r7, #36	@ 0x24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40021000 	.word	0x40021000
 8004808:	0800a144 	.word	0x0800a144
 800480c:	00f42400 	.word	0x00f42400
 8004810:	007a1200 	.word	0x007a1200

08004814 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004818:	4b03      	ldr	r3, [pc, #12]	@ (8004828 <HAL_RCC_GetHCLKFreq+0x14>)
 800481a:	681b      	ldr	r3, [r3, #0]
}
 800481c:	4618      	mov	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	20000004 	.word	0x20000004

0800482c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004830:	f7ff fff0 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 8004834:	4602      	mov	r2, r0
 8004836:	4b06      	ldr	r3, [pc, #24]	@ (8004850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	0a1b      	lsrs	r3, r3, #8
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	4904      	ldr	r1, [pc, #16]	@ (8004854 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004842:	5ccb      	ldrb	r3, [r1, r3]
 8004844:	f003 031f 	and.w	r3, r3, #31
 8004848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800484c:	4618      	mov	r0, r3
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40021000 	.word	0x40021000
 8004854:	0800a13c 	.word	0x0800a13c

08004858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800485c:	f7ff ffda 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 8004860:	4602      	mov	r2, r0
 8004862:	4b06      	ldr	r3, [pc, #24]	@ (800487c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	0adb      	lsrs	r3, r3, #11
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	4904      	ldr	r1, [pc, #16]	@ (8004880 <HAL_RCC_GetPCLK2Freq+0x28>)
 800486e:	5ccb      	ldrb	r3, [r1, r3]
 8004870:	f003 031f 	and.w	r3, r3, #31
 8004874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004878:	4618      	mov	r0, r3
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40021000 	.word	0x40021000
 8004880:	0800a13c 	.word	0x0800a13c

08004884 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	220f      	movs	r2, #15
 8004892:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004894:	4b12      	ldr	r3, [pc, #72]	@ (80048e0 <HAL_RCC_GetClockConfig+0x5c>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 0203 	and.w	r2, r3, #3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80048a0:	4b0f      	ldr	r3, [pc, #60]	@ (80048e0 <HAL_RCC_GetClockConfig+0x5c>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80048ac:	4b0c      	ldr	r3, [pc, #48]	@ (80048e0 <HAL_RCC_GetClockConfig+0x5c>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80048b8:	4b09      	ldr	r3, [pc, #36]	@ (80048e0 <HAL_RCC_GetClockConfig+0x5c>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	08db      	lsrs	r3, r3, #3
 80048be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80048c6:	4b07      	ldr	r3, [pc, #28]	@ (80048e4 <HAL_RCC_GetClockConfig+0x60>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0207 	and.w	r2, r3, #7
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	601a      	str	r2, [r3, #0]
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40021000 	.word	0x40021000
 80048e4:	40022000 	.word	0x40022000

080048e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048f0:	2300      	movs	r3, #0
 80048f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048f4:	4b2a      	ldr	r3, [pc, #168]	@ (80049a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004900:	f7ff f97e 	bl	8003c00 <HAL_PWREx_GetVoltageRange>
 8004904:	6178      	str	r0, [r7, #20]
 8004906:	e014      	b.n	8004932 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004908:	4b25      	ldr	r3, [pc, #148]	@ (80049a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490c:	4a24      	ldr	r2, [pc, #144]	@ (80049a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800490e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004912:	6593      	str	r3, [r2, #88]	@ 0x58
 8004914:	4b22      	ldr	r3, [pc, #136]	@ (80049a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004920:	f7ff f96e 	bl	8003c00 <HAL_PWREx_GetVoltageRange>
 8004924:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004926:	4b1e      	ldr	r3, [pc, #120]	@ (80049a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800492a:	4a1d      	ldr	r2, [pc, #116]	@ (80049a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800492c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004930:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004938:	d10b      	bne.n	8004952 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b80      	cmp	r3, #128	@ 0x80
 800493e:	d919      	bls.n	8004974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2ba0      	cmp	r3, #160	@ 0xa0
 8004944:	d902      	bls.n	800494c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004946:	2302      	movs	r3, #2
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	e013      	b.n	8004974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800494c:	2301      	movs	r3, #1
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	e010      	b.n	8004974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b80      	cmp	r3, #128	@ 0x80
 8004956:	d902      	bls.n	800495e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004958:	2303      	movs	r3, #3
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	e00a      	b.n	8004974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b80      	cmp	r3, #128	@ 0x80
 8004962:	d102      	bne.n	800496a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004964:	2302      	movs	r3, #2
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	e004      	b.n	8004974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b70      	cmp	r3, #112	@ 0x70
 800496e:	d101      	bne.n	8004974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004970:	2301      	movs	r3, #1
 8004972:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004974:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f023 0207 	bic.w	r2, r3, #7
 800497c:	4909      	ldr	r1, [pc, #36]	@ (80049a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004984:	4b07      	ldr	r3, [pc, #28]	@ (80049a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	429a      	cmp	r2, r3
 8004990:	d001      	beq.n	8004996 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40022000 	.word	0x40022000

080049a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049b0:	2300      	movs	r3, #0
 80049b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049b4:	2300      	movs	r3, #0
 80049b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d041      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049cc:	d02a      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80049ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049d2:	d824      	bhi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049d8:	d008      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049de:	d81e      	bhi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80049e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049e8:	d010      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049ea:	e018      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049ec:	4b86      	ldr	r3, [pc, #536]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	4a85      	ldr	r2, [pc, #532]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049f8:	e015      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3304      	adds	r3, #4
 80049fe:	2100      	movs	r1, #0
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 facd 	bl	8004fa0 <RCCEx_PLLSAI1_Config>
 8004a06:	4603      	mov	r3, r0
 8004a08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a0a:	e00c      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3320      	adds	r3, #32
 8004a10:	2100      	movs	r1, #0
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fbb6 	bl	8005184 <RCCEx_PLLSAI2_Config>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a1c:	e003      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	74fb      	strb	r3, [r7, #19]
      break;
 8004a22:	e000      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a26:	7cfb      	ldrb	r3, [r7, #19]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10b      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a2c:	4b76      	ldr	r3, [pc, #472]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a32:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a3a:	4973      	ldr	r1, [pc, #460]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004a42:	e001      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a44:	7cfb      	ldrb	r3, [r7, #19]
 8004a46:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d041      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a5c:	d02a      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a5e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a62:	d824      	bhi.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a68:	d008      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a6e:	d81e      	bhi.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a78:	d010      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a7a:	e018      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a7c:	4b62      	ldr	r3, [pc, #392]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4a61      	ldr	r2, [pc, #388]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a86:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a88:	e015      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	2100      	movs	r1, #0
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fa85 	bl	8004fa0 <RCCEx_PLLSAI1_Config>
 8004a96:	4603      	mov	r3, r0
 8004a98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a9a:	e00c      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3320      	adds	r3, #32
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fb6e 	bl	8005184 <RCCEx_PLLSAI2_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aac:	e003      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	74fb      	strb	r3, [r7, #19]
      break;
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004ab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ab6:	7cfb      	ldrb	r3, [r7, #19]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10b      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004abc:	4b52      	ldr	r3, [pc, #328]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004aca:	494f      	ldr	r1, [pc, #316]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004ad2:	e001      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad4:	7cfb      	ldrb	r3, [r7, #19]
 8004ad6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 80a0 	beq.w	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004aea:	4b47      	ldr	r3, [pc, #284]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004af6:	2301      	movs	r3, #1
 8004af8:	e000      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004afa:	2300      	movs	r3, #0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00d      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b00:	4b41      	ldr	r3, [pc, #260]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b04:	4a40      	ldr	r2, [pc, #256]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b0c:	4b3e      	ldr	r3, [pc, #248]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a3a      	ldr	r2, [pc, #232]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b28:	f7fc fde6 	bl	80016f8 <HAL_GetTick>
 8004b2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b2e:	e009      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b30:	f7fc fde2 	bl	80016f8 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d902      	bls.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	74fb      	strb	r3, [r7, #19]
        break;
 8004b42:	e005      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b44:	4b31      	ldr	r3, [pc, #196]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0ef      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b50:	7cfb      	ldrb	r3, [r7, #19]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d15c      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b56:	4b2c      	ldr	r3, [pc, #176]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d01f      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d019      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b74:	4b24      	ldr	r3, [pc, #144]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b80:	4b21      	ldr	r3, [pc, #132]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b86:	4a20      	ldr	r2, [pc, #128]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b90:	4b1d      	ldr	r3, [pc, #116]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b96:	4a1c      	ldr	r2, [pc, #112]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ba0:	4a19      	ldr	r2, [pc, #100]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d016      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb2:	f7fc fda1 	bl	80016f8 <HAL_GetTick>
 8004bb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bb8:	e00b      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bba:	f7fc fd9d 	bl	80016f8 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d902      	bls.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	74fb      	strb	r3, [r7, #19]
            break;
 8004bd0:	e006      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0ec      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004be0:	7cfb      	ldrb	r3, [r7, #19]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10c      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004be6:	4b08      	ldr	r3, [pc, #32]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf6:	4904      	ldr	r1, [pc, #16]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004bfe:	e009      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c00:	7cfb      	ldrb	r3, [r7, #19]
 8004c02:	74bb      	strb	r3, [r7, #18]
 8004c04:	e006      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c06:	bf00      	nop
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c10:	7cfb      	ldrb	r3, [r7, #19]
 8004c12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c14:	7c7b      	ldrb	r3, [r7, #17]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d105      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c1a:	4ba6      	ldr	r3, [pc, #664]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1e:	4aa5      	ldr	r2, [pc, #660]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c24:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c32:	4ba0      	ldr	r3, [pc, #640]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c38:	f023 0203 	bic.w	r2, r3, #3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c40:	499c      	ldr	r1, [pc, #624]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c54:	4b97      	ldr	r3, [pc, #604]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c5a:	f023 020c 	bic.w	r2, r3, #12
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c62:	4994      	ldr	r1, [pc, #592]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0304 	and.w	r3, r3, #4
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c76:	4b8f      	ldr	r3, [pc, #572]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c7c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c84:	498b      	ldr	r1, [pc, #556]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c98:	4b86      	ldr	r3, [pc, #536]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca6:	4983      	ldr	r1, [pc, #524]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0310 	and.w	r3, r3, #16
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cba:	4b7e      	ldr	r3, [pc, #504]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cc8:	497a      	ldr	r1, [pc, #488]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cdc:	4b75      	ldr	r3, [pc, #468]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cea:	4972      	ldr	r1, [pc, #456]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cfe:	4b6d      	ldr	r3, [pc, #436]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d0c:	4969      	ldr	r1, [pc, #420]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d20:	4b64      	ldr	r3, [pc, #400]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d2e:	4961      	ldr	r1, [pc, #388]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d42:	4b5c      	ldr	r3, [pc, #368]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d48:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d50:	4958      	ldr	r1, [pc, #352]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d64:	4b53      	ldr	r3, [pc, #332]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d6a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d72:	4950      	ldr	r1, [pc, #320]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d86:	4b4b      	ldr	r3, [pc, #300]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d94:	4947      	ldr	r1, [pc, #284]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004da8:	4b42      	ldr	r3, [pc, #264]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004daa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dae:	f023 0203 	bic.w	r2, r3, #3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db6:	493f      	ldr	r1, [pc, #252]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d028      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dca:	4b3a      	ldr	r3, [pc, #232]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd8:	4936      	ldr	r1, [pc, #216]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004de8:	d106      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dea:	4b32      	ldr	r3, [pc, #200]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	4a31      	ldr	r2, [pc, #196]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004df0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004df4:	60d3      	str	r3, [r2, #12]
 8004df6:	e011      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dfc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e00:	d10c      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	3304      	adds	r3, #4
 8004e06:	2101      	movs	r1, #1
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 f8c9 	bl	8004fa0 <RCCEx_PLLSAI1_Config>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e12:	7cfb      	ldrb	r3, [r7, #19]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004e18:	7cfb      	ldrb	r3, [r7, #19]
 8004e1a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d028      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e28:	4b22      	ldr	r3, [pc, #136]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e36:	491f      	ldr	r1, [pc, #124]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e46:	d106      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e48:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	4a19      	ldr	r2, [pc, #100]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e52:	60d3      	str	r3, [r2, #12]
 8004e54:	e011      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e5e:	d10c      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3304      	adds	r3, #4
 8004e64:	2101      	movs	r1, #1
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 f89a 	bl	8004fa0 <RCCEx_PLLSAI1_Config>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e70:	7cfb      	ldrb	r3, [r7, #19]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004e76:	7cfb      	ldrb	r3, [r7, #19]
 8004e78:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d02a      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e86:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e94:	4907      	ldr	r1, [pc, #28]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ea0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ea4:	d108      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ea6:	4b03      	ldr	r3, [pc, #12]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	4a02      	ldr	r2, [pc, #8]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004eac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eb0:	60d3      	str	r3, [r2, #12]
 8004eb2:	e013      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004eb4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ebc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ec0:	d10c      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 f869 	bl	8004fa0 <RCCEx_PLLSAI1_Config>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ed2:	7cfb      	ldrb	r3, [r7, #19]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d02f      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ee8:	4b2c      	ldr	r3, [pc, #176]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ef6:	4929      	ldr	r1, [pc, #164]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f06:	d10d      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	2102      	movs	r1, #2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 f846 	bl	8004fa0 <RCCEx_PLLSAI1_Config>
 8004f14:	4603      	mov	r3, r0
 8004f16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f18:	7cfb      	ldrb	r3, [r7, #19]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d014      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004f1e:	7cfb      	ldrb	r3, [r7, #19]
 8004f20:	74bb      	strb	r3, [r7, #18]
 8004f22:	e011      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f2c:	d10c      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3320      	adds	r3, #32
 8004f32:	2102      	movs	r1, #2
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 f925 	bl	8005184 <RCCEx_PLLSAI2_Config>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f3e:	7cfb      	ldrb	r3, [r7, #19]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004f44:	7cfb      	ldrb	r3, [r7, #19]
 8004f46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00b      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f54:	4b11      	ldr	r3, [pc, #68]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f64:	490d      	ldr	r1, [pc, #52]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00b      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f78:	4b08      	ldr	r3, [pc, #32]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f88:	4904      	ldr	r1, [pc, #16]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f90:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40021000 	.word	0x40021000

08004fa0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fae:	4b74      	ldr	r3, [pc, #464]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d018      	beq.n	8004fec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004fba:	4b71      	ldr	r3, [pc, #452]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f003 0203 	and.w	r2, r3, #3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d10d      	bne.n	8004fe6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
       ||
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d009      	beq.n	8004fe6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004fd2:	4b6b      	ldr	r3, [pc, #428]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	091b      	lsrs	r3, r3, #4
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
       ||
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d047      	beq.n	8005076 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	73fb      	strb	r3, [r7, #15]
 8004fea:	e044      	b.n	8005076 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	d018      	beq.n	8005026 <RCCEx_PLLSAI1_Config+0x86>
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	d825      	bhi.n	8005044 <RCCEx_PLLSAI1_Config+0xa4>
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d002      	beq.n	8005002 <RCCEx_PLLSAI1_Config+0x62>
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d009      	beq.n	8005014 <RCCEx_PLLSAI1_Config+0x74>
 8005000:	e020      	b.n	8005044 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005002:	4b5f      	ldr	r3, [pc, #380]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d11d      	bne.n	800504a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005012:	e01a      	b.n	800504a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005014:	4b5a      	ldr	r3, [pc, #360]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800501c:	2b00      	cmp	r3, #0
 800501e:	d116      	bne.n	800504e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005024:	e013      	b.n	800504e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005026:	4b56      	ldr	r3, [pc, #344]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10f      	bne.n	8005052 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005032:	4b53      	ldr	r3, [pc, #332]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d109      	bne.n	8005052 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005042:	e006      	b.n	8005052 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
      break;
 8005048:	e004      	b.n	8005054 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800504a:	bf00      	nop
 800504c:	e002      	b.n	8005054 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800504e:	bf00      	nop
 8005050:	e000      	b.n	8005054 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005052:	bf00      	nop
    }

    if(status == HAL_OK)
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10d      	bne.n	8005076 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800505a:	4b49      	ldr	r3, [pc, #292]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6819      	ldr	r1, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	3b01      	subs	r3, #1
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	430b      	orrs	r3, r1
 8005070:	4943      	ldr	r1, [pc, #268]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005072:	4313      	orrs	r3, r2
 8005074:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d17c      	bne.n	8005176 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800507c:	4b40      	ldr	r3, [pc, #256]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a3f      	ldr	r2, [pc, #252]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005082:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005086:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005088:	f7fc fb36 	bl	80016f8 <HAL_GetTick>
 800508c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800508e:	e009      	b.n	80050a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005090:	f7fc fb32 	bl	80016f8 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d902      	bls.n	80050a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	73fb      	strb	r3, [r7, #15]
        break;
 80050a2:	e005      	b.n	80050b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050a4:	4b36      	ldr	r3, [pc, #216]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1ef      	bne.n	8005090 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d15f      	bne.n	8005176 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d110      	bne.n	80050de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050bc:	4b30      	ldr	r3, [pc, #192]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80050c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6892      	ldr	r2, [r2, #8]
 80050cc:	0211      	lsls	r1, r2, #8
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	68d2      	ldr	r2, [r2, #12]
 80050d2:	06d2      	lsls	r2, r2, #27
 80050d4:	430a      	orrs	r2, r1
 80050d6:	492a      	ldr	r1, [pc, #168]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	610b      	str	r3, [r1, #16]
 80050dc:	e027      	b.n	800512e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d112      	bne.n	800510a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050e4:	4b26      	ldr	r3, [pc, #152]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80050ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6892      	ldr	r2, [r2, #8]
 80050f4:	0211      	lsls	r1, r2, #8
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6912      	ldr	r2, [r2, #16]
 80050fa:	0852      	lsrs	r2, r2, #1
 80050fc:	3a01      	subs	r2, #1
 80050fe:	0552      	lsls	r2, r2, #21
 8005100:	430a      	orrs	r2, r1
 8005102:	491f      	ldr	r1, [pc, #124]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005104:	4313      	orrs	r3, r2
 8005106:	610b      	str	r3, [r1, #16]
 8005108:	e011      	b.n	800512e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800510a:	4b1d      	ldr	r3, [pc, #116]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005112:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6892      	ldr	r2, [r2, #8]
 800511a:	0211      	lsls	r1, r2, #8
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6952      	ldr	r2, [r2, #20]
 8005120:	0852      	lsrs	r2, r2, #1
 8005122:	3a01      	subs	r2, #1
 8005124:	0652      	lsls	r2, r2, #25
 8005126:	430a      	orrs	r2, r1
 8005128:	4915      	ldr	r1, [pc, #84]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 800512a:	4313      	orrs	r3, r2
 800512c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800512e:	4b14      	ldr	r3, [pc, #80]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a13      	ldr	r2, [pc, #76]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005134:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005138:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800513a:	f7fc fadd 	bl	80016f8 <HAL_GetTick>
 800513e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005140:	e009      	b.n	8005156 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005142:	f7fc fad9 	bl	80016f8 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d902      	bls.n	8005156 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	73fb      	strb	r3, [r7, #15]
          break;
 8005154:	e005      	b.n	8005162 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005156:	4b0a      	ldr	r3, [pc, #40]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0ef      	beq.n	8005142 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005162:	7bfb      	ldrb	r3, [r7, #15]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d106      	bne.n	8005176 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005168:	4b05      	ldr	r3, [pc, #20]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	4903      	ldr	r1, [pc, #12]	@ (8005180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005172:	4313      	orrs	r3, r2
 8005174:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005176:	7bfb      	ldrb	r3, [r7, #15]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40021000 	.word	0x40021000

08005184 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005192:	4b69      	ldr	r3, [pc, #420]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d018      	beq.n	80051d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800519e:	4b66      	ldr	r3, [pc, #408]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f003 0203 	and.w	r2, r3, #3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d10d      	bne.n	80051ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
       ||
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d009      	beq.n	80051ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80051b6:	4b60      	ldr	r3, [pc, #384]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	091b      	lsrs	r3, r3, #4
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
       ||
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d047      	beq.n	800525a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	73fb      	strb	r3, [r7, #15]
 80051ce:	e044      	b.n	800525a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d018      	beq.n	800520a <RCCEx_PLLSAI2_Config+0x86>
 80051d8:	2b03      	cmp	r3, #3
 80051da:	d825      	bhi.n	8005228 <RCCEx_PLLSAI2_Config+0xa4>
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d002      	beq.n	80051e6 <RCCEx_PLLSAI2_Config+0x62>
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d009      	beq.n	80051f8 <RCCEx_PLLSAI2_Config+0x74>
 80051e4:	e020      	b.n	8005228 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051e6:	4b54      	ldr	r3, [pc, #336]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d11d      	bne.n	800522e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051f6:	e01a      	b.n	800522e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051f8:	4b4f      	ldr	r3, [pc, #316]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005200:	2b00      	cmp	r3, #0
 8005202:	d116      	bne.n	8005232 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005208:	e013      	b.n	8005232 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800520a:	4b4b      	ldr	r3, [pc, #300]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10f      	bne.n	8005236 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005216:	4b48      	ldr	r3, [pc, #288]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d109      	bne.n	8005236 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005226:	e006      	b.n	8005236 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	73fb      	strb	r3, [r7, #15]
      break;
 800522c:	e004      	b.n	8005238 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800522e:	bf00      	nop
 8005230:	e002      	b.n	8005238 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005232:	bf00      	nop
 8005234:	e000      	b.n	8005238 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005236:	bf00      	nop
    }

    if(status == HAL_OK)
 8005238:	7bfb      	ldrb	r3, [r7, #15]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10d      	bne.n	800525a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800523e:	4b3e      	ldr	r3, [pc, #248]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6819      	ldr	r1, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	3b01      	subs	r3, #1
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	430b      	orrs	r3, r1
 8005254:	4938      	ldr	r1, [pc, #224]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005256:	4313      	orrs	r3, r2
 8005258:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800525a:	7bfb      	ldrb	r3, [r7, #15]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d166      	bne.n	800532e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005260:	4b35      	ldr	r3, [pc, #212]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a34      	ldr	r2, [pc, #208]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005266:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800526a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800526c:	f7fc fa44 	bl	80016f8 <HAL_GetTick>
 8005270:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005272:	e009      	b.n	8005288 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005274:	f7fc fa40 	bl	80016f8 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d902      	bls.n	8005288 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	73fb      	strb	r3, [r7, #15]
        break;
 8005286:	e005      	b.n	8005294 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005288:	4b2b      	ldr	r3, [pc, #172]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1ef      	bne.n	8005274 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d149      	bne.n	800532e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d110      	bne.n	80052c2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052a0:	4b25      	ldr	r3, [pc, #148]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80052a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6892      	ldr	r2, [r2, #8]
 80052b0:	0211      	lsls	r1, r2, #8
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	68d2      	ldr	r2, [r2, #12]
 80052b6:	06d2      	lsls	r2, r2, #27
 80052b8:	430a      	orrs	r2, r1
 80052ba:	491f      	ldr	r1, [pc, #124]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	614b      	str	r3, [r1, #20]
 80052c0:	e011      	b.n	80052e6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80052ca:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6892      	ldr	r2, [r2, #8]
 80052d2:	0211      	lsls	r1, r2, #8
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6912      	ldr	r2, [r2, #16]
 80052d8:	0852      	lsrs	r2, r2, #1
 80052da:	3a01      	subs	r2, #1
 80052dc:	0652      	lsls	r2, r2, #25
 80052de:	430a      	orrs	r2, r1
 80052e0:	4915      	ldr	r1, [pc, #84]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80052e6:	4b14      	ldr	r3, [pc, #80]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a13      	ldr	r2, [pc, #76]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 80052ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f2:	f7fc fa01 	bl	80016f8 <HAL_GetTick>
 80052f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052f8:	e009      	b.n	800530e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052fa:	f7fc f9fd 	bl	80016f8 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d902      	bls.n	800530e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	73fb      	strb	r3, [r7, #15]
          break;
 800530c:	e005      	b.n	800531a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800530e:	4b0a      	ldr	r3, [pc, #40]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0ef      	beq.n	80052fa <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d106      	bne.n	800532e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005320:	4b05      	ldr	r3, [pc, #20]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005322:	695a      	ldr	r2, [r3, #20]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	4903      	ldr	r1, [pc, #12]	@ (8005338 <RCCEx_PLLSAI2_Config+0x1b4>)
 800532a:	4313      	orrs	r3, r2
 800532c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800532e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40021000 	.word	0x40021000

0800533c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e049      	b.n	80053e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f841 	bl	80053ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3304      	adds	r3, #4
 8005378:	4619      	mov	r1, r3
 800537a:	4610      	mov	r0, r2
 800537c:	f000 f9e0 	bl	8005740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
	...

08005400 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b01      	cmp	r3, #1
 8005412:	d001      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e04f      	b.n	80054b8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0201 	orr.w	r2, r2, #1
 800542e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a23      	ldr	r2, [pc, #140]	@ (80054c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01d      	beq.n	8005476 <HAL_TIM_Base_Start_IT+0x76>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005442:	d018      	beq.n	8005476 <HAL_TIM_Base_Start_IT+0x76>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a1f      	ldr	r2, [pc, #124]	@ (80054c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d013      	beq.n	8005476 <HAL_TIM_Base_Start_IT+0x76>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a1e      	ldr	r2, [pc, #120]	@ (80054cc <HAL_TIM_Base_Start_IT+0xcc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00e      	beq.n	8005476 <HAL_TIM_Base_Start_IT+0x76>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a1c      	ldr	r2, [pc, #112]	@ (80054d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d009      	beq.n	8005476 <HAL_TIM_Base_Start_IT+0x76>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a1b      	ldr	r2, [pc, #108]	@ (80054d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d004      	beq.n	8005476 <HAL_TIM_Base_Start_IT+0x76>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a19      	ldr	r2, [pc, #100]	@ (80054d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d115      	bne.n	80054a2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	4b17      	ldr	r3, [pc, #92]	@ (80054dc <HAL_TIM_Base_Start_IT+0xdc>)
 800547e:	4013      	ands	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2b06      	cmp	r3, #6
 8005486:	d015      	beq.n	80054b4 <HAL_TIM_Base_Start_IT+0xb4>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800548e:	d011      	beq.n	80054b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a0:	e008      	b.n	80054b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0201 	orr.w	r2, r2, #1
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	e000      	b.n	80054b6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40000800 	.word	0x40000800
 80054d0:	40000c00 	.word	0x40000c00
 80054d4:	40013400 	.word	0x40013400
 80054d8:	40014000 	.word	0x40014000
 80054dc:	00010007 	.word	0x00010007

080054e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d020      	beq.n	8005544 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01b      	beq.n	8005544 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0202 	mvn.w	r2, #2
 8005514:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f8e9 	bl	8005702 <HAL_TIM_IC_CaptureCallback>
 8005530:	e005      	b.n	800553e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f8db 	bl	80056ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f8ec 	bl	8005716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b00      	cmp	r3, #0
 800554c:	d020      	beq.n	8005590 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d01b      	beq.n	8005590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f06f 0204 	mvn.w	r2, #4
 8005560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2202      	movs	r2, #2
 8005566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f8c3 	bl	8005702 <HAL_TIM_IC_CaptureCallback>
 800557c:	e005      	b.n	800558a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f8b5 	bl	80056ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f8c6 	bl	8005716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	2b00      	cmp	r3, #0
 8005598:	d020      	beq.n	80055dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01b      	beq.n	80055dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0208 	mvn.w	r2, #8
 80055ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2204      	movs	r2, #4
 80055b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f89d 	bl	8005702 <HAL_TIM_IC_CaptureCallback>
 80055c8:	e005      	b.n	80055d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f88f 	bl	80056ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f8a0 	bl	8005716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f003 0310 	and.w	r3, r3, #16
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d020      	beq.n	8005628 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01b      	beq.n	8005628 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0210 	mvn.w	r2, #16
 80055f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2208      	movs	r2, #8
 80055fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f877 	bl	8005702 <HAL_TIM_IC_CaptureCallback>
 8005614:	e005      	b.n	8005622 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f869 	bl	80056ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f87a 	bl	8005716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00c      	beq.n	800564c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d007      	beq.n	800564c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f06f 0201 	mvn.w	r2, #1
 8005644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7fb fd3a 	bl	80010c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005652:	2b00      	cmp	r3, #0
 8005654:	d104      	bne.n	8005660 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00c      	beq.n	800567a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005666:	2b00      	cmp	r3, #0
 8005668:	d007      	beq.n	800567a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f913 	bl	80058a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00c      	beq.n	800569e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800568a:	2b00      	cmp	r3, #0
 800568c:	d007      	beq.n	800569e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f90b 	bl	80058b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00c      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d007      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80056ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f834 	bl	800572a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00c      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f06f 0220 	mvn.w	r2, #32
 80056de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f8d3 	bl	800588c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056e6:	bf00      	nop
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
	...

08005740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a46      	ldr	r2, [pc, #280]	@ (800586c <TIM_Base_SetConfig+0x12c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d013      	beq.n	8005780 <TIM_Base_SetConfig+0x40>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800575e:	d00f      	beq.n	8005780 <TIM_Base_SetConfig+0x40>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a43      	ldr	r2, [pc, #268]	@ (8005870 <TIM_Base_SetConfig+0x130>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00b      	beq.n	8005780 <TIM_Base_SetConfig+0x40>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a42      	ldr	r2, [pc, #264]	@ (8005874 <TIM_Base_SetConfig+0x134>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d007      	beq.n	8005780 <TIM_Base_SetConfig+0x40>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a41      	ldr	r2, [pc, #260]	@ (8005878 <TIM_Base_SetConfig+0x138>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d003      	beq.n	8005780 <TIM_Base_SetConfig+0x40>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a40      	ldr	r2, [pc, #256]	@ (800587c <TIM_Base_SetConfig+0x13c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d108      	bne.n	8005792 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a35      	ldr	r2, [pc, #212]	@ (800586c <TIM_Base_SetConfig+0x12c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d01f      	beq.n	80057da <TIM_Base_SetConfig+0x9a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057a0:	d01b      	beq.n	80057da <TIM_Base_SetConfig+0x9a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a32      	ldr	r2, [pc, #200]	@ (8005870 <TIM_Base_SetConfig+0x130>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d017      	beq.n	80057da <TIM_Base_SetConfig+0x9a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a31      	ldr	r2, [pc, #196]	@ (8005874 <TIM_Base_SetConfig+0x134>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d013      	beq.n	80057da <TIM_Base_SetConfig+0x9a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a30      	ldr	r2, [pc, #192]	@ (8005878 <TIM_Base_SetConfig+0x138>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00f      	beq.n	80057da <TIM_Base_SetConfig+0x9a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a2f      	ldr	r2, [pc, #188]	@ (800587c <TIM_Base_SetConfig+0x13c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00b      	beq.n	80057da <TIM_Base_SetConfig+0x9a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a2e      	ldr	r2, [pc, #184]	@ (8005880 <TIM_Base_SetConfig+0x140>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d007      	beq.n	80057da <TIM_Base_SetConfig+0x9a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a2d      	ldr	r2, [pc, #180]	@ (8005884 <TIM_Base_SetConfig+0x144>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d003      	beq.n	80057da <TIM_Base_SetConfig+0x9a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a2c      	ldr	r2, [pc, #176]	@ (8005888 <TIM_Base_SetConfig+0x148>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d108      	bne.n	80057ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a16      	ldr	r2, [pc, #88]	@ (800586c <TIM_Base_SetConfig+0x12c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00f      	beq.n	8005838 <TIM_Base_SetConfig+0xf8>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a18      	ldr	r2, [pc, #96]	@ (800587c <TIM_Base_SetConfig+0x13c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d00b      	beq.n	8005838 <TIM_Base_SetConfig+0xf8>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a17      	ldr	r2, [pc, #92]	@ (8005880 <TIM_Base_SetConfig+0x140>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d007      	beq.n	8005838 <TIM_Base_SetConfig+0xf8>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a16      	ldr	r2, [pc, #88]	@ (8005884 <TIM_Base_SetConfig+0x144>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d003      	beq.n	8005838 <TIM_Base_SetConfig+0xf8>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a15      	ldr	r2, [pc, #84]	@ (8005888 <TIM_Base_SetConfig+0x148>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d103      	bne.n	8005840 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	691a      	ldr	r2, [r3, #16]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b01      	cmp	r3, #1
 8005850:	d105      	bne.n	800585e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f023 0201 	bic.w	r2, r3, #1
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	611a      	str	r2, [r3, #16]
  }
}
 800585e:	bf00      	nop
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	40012c00 	.word	0x40012c00
 8005870:	40000400 	.word	0x40000400
 8005874:	40000800 	.word	0x40000800
 8005878:	40000c00 	.word	0x40000c00
 800587c:	40013400 	.word	0x40013400
 8005880:	40014000 	.word	0x40014000
 8005884:	40014400 	.word	0x40014400
 8005888:	40014800 	.word	0x40014800

0800588c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e040      	b.n	800595c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d106      	bne.n	80058f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fb fd86 	bl	80013fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2224      	movs	r2, #36	@ 0x24
 80058f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0201 	bic.w	r2, r2, #1
 8005904:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 fe52 	bl	80065b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fb97 	bl	8006048 <UART_SetConfig>
 800591a:	4603      	mov	r3, r0
 800591c:	2b01      	cmp	r3, #1
 800591e:	d101      	bne.n	8005924 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e01b      	b.n	800595c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005932:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005942:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0201 	orr.w	r2, r2, #1
 8005952:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fed1 	bl	80066fc <UART_CheckIdleState>
 800595a:	4603      	mov	r3, r0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08a      	sub	sp, #40	@ 0x28
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	4613      	mov	r3, r2
 8005970:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005978:	2b20      	cmp	r3, #32
 800597a:	d137      	bne.n	80059ec <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <HAL_UART_Receive_IT+0x24>
 8005982:	88fb      	ldrh	r3, [r7, #6]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e030      	b.n	80059ee <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a18      	ldr	r2, [pc, #96]	@ (80059f8 <HAL_UART_Receive_IT+0x94>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d01f      	beq.n	80059dc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d018      	beq.n	80059dc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	613b      	str	r3, [r7, #16]
   return(result);
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80059be:	627b      	str	r3, [r7, #36]	@ 0x24
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	623b      	str	r3, [r7, #32]
 80059ca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	69f9      	ldr	r1, [r7, #28]
 80059ce:	6a3a      	ldr	r2, [r7, #32]
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e6      	bne.n	80059aa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80059dc:	88fb      	ldrh	r3, [r7, #6]
 80059de:	461a      	mov	r2, r3
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 ffa0 	bl	8006928 <UART_Start_Receive_IT>
 80059e8:	4603      	mov	r3, r0
 80059ea:	e000      	b.n	80059ee <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80059ec:	2302      	movs	r3, #2
  }
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3728      	adds	r7, #40	@ 0x28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	40008000 	.word	0x40008000

080059fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b0ba      	sub	sp, #232	@ 0xe8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005a26:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005a30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d115      	bne.n	8005a64 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a3c:	f003 0320 	and.w	r3, r3, #32
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00f      	beq.n	8005a64 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d009      	beq.n	8005a64 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 82ca 	beq.w	8005fee <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	4798      	blx	r3
      }
      return;
 8005a62:	e2c4      	b.n	8005fee <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 8117 	beq.w	8005c9c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005a7e:	4b85      	ldr	r3, [pc, #532]	@ (8005c94 <HAL_UART_IRQHandler+0x298>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 810a 	beq.w	8005c9c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d011      	beq.n	8005ab8 <HAL_UART_IRQHandler+0xbc>
 8005a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00b      	beq.n	8005ab8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aae:	f043 0201 	orr.w	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d011      	beq.n	8005ae8 <HAL_UART_IRQHandler+0xec>
 8005ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00b      	beq.n	8005ae8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ade:	f043 0204 	orr.w	r2, r3, #4
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d011      	beq.n	8005b18 <HAL_UART_IRQHandler+0x11c>
 8005af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00b      	beq.n	8005b18 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2204      	movs	r2, #4
 8005b06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b0e:	f043 0202 	orr.w	r2, r3, #2
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b1c:	f003 0308 	and.w	r3, r3, #8
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d017      	beq.n	8005b54 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b28:	f003 0320 	and.w	r3, r3, #32
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d105      	bne.n	8005b3c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b34:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00b      	beq.n	8005b54 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2208      	movs	r2, #8
 8005b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b4a:	f043 0208 	orr.w	r2, r3, #8
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d012      	beq.n	8005b86 <HAL_UART_IRQHandler+0x18a>
 8005b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00c      	beq.n	8005b86 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b7c:	f043 0220 	orr.w	r2, r3, #32
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 8230 	beq.w	8005ff2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b96:	f003 0320 	and.w	r3, r3, #32
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00d      	beq.n	8005bba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d007      	beq.n	8005bba <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bc0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bce:	2b40      	cmp	r3, #64	@ 0x40
 8005bd0:	d005      	beq.n	8005bde <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bd6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d04f      	beq.n	8005c7e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 ff68 	bl	8006ab4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bee:	2b40      	cmp	r3, #64	@ 0x40
 8005bf0:	d141      	bne.n	8005c76 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3308      	adds	r3, #8
 8005c1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1d9      	bne.n	8005bf2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d013      	beq.n	8005c6e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c4a:	4a13      	ldr	r2, [pc, #76]	@ (8005c98 <HAL_UART_IRQHandler+0x29c>)
 8005c4c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fc ff92 	bl	8002b7c <HAL_DMA_Abort_IT>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d017      	beq.n	8005c8e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005c68:	4610      	mov	r0, r2
 8005c6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6c:	e00f      	b.n	8005c8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f9d4 	bl	800601c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c74:	e00b      	b.n	8005c8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f9d0 	bl	800601c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c7c:	e007      	b.n	8005c8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f9cc 	bl	800601c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005c8c:	e1b1      	b.n	8005ff2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c8e:	bf00      	nop
    return;
 8005c90:	e1af      	b.n	8005ff2 <HAL_UART_IRQHandler+0x5f6>
 8005c92:	bf00      	nop
 8005c94:	04000120 	.word	0x04000120
 8005c98:	08006b7d 	.word	0x08006b7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	f040 816a 	bne.w	8005f7a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005caa:	f003 0310 	and.w	r3, r3, #16
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 8163 	beq.w	8005f7a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cb8:	f003 0310 	and.w	r3, r3, #16
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 815c 	beq.w	8005f7a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2210      	movs	r2, #16
 8005cc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd4:	2b40      	cmp	r3, #64	@ 0x40
 8005cd6:	f040 80d4 	bne.w	8005e82 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ce6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 80ad 	beq.w	8005e4a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	f080 80a5 	bcs.w	8005e4a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d06:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0320 	and.w	r3, r3, #32
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f040 8086 	bne.w	8005e28 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	461a      	mov	r2, r3
 8005d42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d4a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1da      	bne.n	8005d1c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3308      	adds	r3, #8
 8005d6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d70:	e853 3f00 	ldrex	r3, [r3]
 8005d74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d78:	f023 0301 	bic.w	r3, r3, #1
 8005d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3308      	adds	r3, #8
 8005d86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e1      	bne.n	8005d66 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3308      	adds	r3, #8
 8005da8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005daa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dac:	e853 3f00 	ldrex	r3, [r3]
 8005db0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005db2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005db4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005db8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005dc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005dc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005dcc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005dce:	e841 2300 	strex	r3, r2, [r1]
 8005dd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005dd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1e3      	bne.n	8005da2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005df0:	e853 3f00 	ldrex	r3, [r3]
 8005df4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005df6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005df8:	f023 0310 	bic.w	r3, r3, #16
 8005dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	461a      	mov	r2, r3
 8005e06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e12:	e841 2300 	strex	r3, r2, [r1]
 8005e16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1e4      	bne.n	8005de8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fc fe6c 	bl	8002b00 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	4619      	mov	r1, r3
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f8f4 	bl	8006030 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005e48:	e0d5      	b.n	8005ff6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005e50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e54:	429a      	cmp	r2, r3
 8005e56:	f040 80ce 	bne.w	8005ff6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b20      	cmp	r3, #32
 8005e68:	f040 80c5 	bne.w	8005ff6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005e78:	4619      	mov	r1, r3
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f8d8 	bl	8006030 <HAL_UARTEx_RxEventCallback>
      return;
 8005e80:	e0b9      	b.n	8005ff6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 80ab 	beq.w	8005ffa <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005ea4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 80a6 	beq.w	8005ffa <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ebe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ec2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ed0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ed2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ed6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ed8:	e841 2300 	strex	r3, r2, [r1]
 8005edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e4      	bne.n	8005eae <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3308      	adds	r3, #8
 8005eea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eee:	e853 3f00 	ldrex	r3, [r3]
 8005ef2:	623b      	str	r3, [r7, #32]
   return(result);
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	f023 0301 	bic.w	r3, r3, #1
 8005efa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3308      	adds	r3, #8
 8005f04:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f08:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f10:	e841 2300 	strex	r3, r2, [r1]
 8005f14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e3      	bne.n	8005ee4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f023 0310 	bic.w	r3, r3, #16
 8005f44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005f52:	61fb      	str	r3, [r7, #28]
 8005f54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	69b9      	ldr	r1, [r7, #24]
 8005f58:	69fa      	ldr	r2, [r7, #28]
 8005f5a:	e841 2300 	strex	r3, r2, [r1]
 8005f5e:	617b      	str	r3, [r7, #20]
   return(result);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1e4      	bne.n	8005f30 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2202      	movs	r2, #2
 8005f6a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f70:	4619      	mov	r1, r3
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f85c 	bl	8006030 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f78:	e03f      	b.n	8005ffa <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00e      	beq.n	8005fa4 <HAL_UART_IRQHandler+0x5a8>
 8005f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d008      	beq.n	8005fa4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005f9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 ffe9 	bl	8006f74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fa2:	e02d      	b.n	8006000 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00e      	beq.n	8005fce <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d008      	beq.n	8005fce <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01c      	beq.n	8005ffe <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4798      	blx	r3
    }
    return;
 8005fcc:	e017      	b.n	8005ffe <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d012      	beq.n	8006000 <HAL_UART_IRQHandler+0x604>
 8005fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00c      	beq.n	8006000 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fdde 	bl	8006ba8 <UART_EndTransmit_IT>
    return;
 8005fec:	e008      	b.n	8006000 <HAL_UART_IRQHandler+0x604>
      return;
 8005fee:	bf00      	nop
 8005ff0:	e006      	b.n	8006000 <HAL_UART_IRQHandler+0x604>
    return;
 8005ff2:	bf00      	nop
 8005ff4:	e004      	b.n	8006000 <HAL_UART_IRQHandler+0x604>
      return;
 8005ff6:	bf00      	nop
 8005ff8:	e002      	b.n	8006000 <HAL_UART_IRQHandler+0x604>
      return;
 8005ffa:	bf00      	nop
 8005ffc:	e000      	b.n	8006000 <HAL_UART_IRQHandler+0x604>
    return;
 8005ffe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006000:	37e8      	adds	r7, #232	@ 0xe8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop

08006008 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800604c:	b08a      	sub	sp, #40	@ 0x28
 800604e:	af00      	add	r7, sp, #0
 8006050:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	431a      	orrs	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	431a      	orrs	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	4313      	orrs	r3, r2
 800606e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	4ba4      	ldr	r3, [pc, #656]	@ (8006308 <UART_SetConfig+0x2c0>)
 8006078:	4013      	ands	r3, r2
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	6812      	ldr	r2, [r2, #0]
 800607e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006080:	430b      	orrs	r3, r1
 8006082:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	68da      	ldr	r2, [r3, #12]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a99      	ldr	r2, [pc, #612]	@ (800630c <UART_SetConfig+0x2c4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d004      	beq.n	80060b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060b0:	4313      	orrs	r3, r2
 80060b2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060c4:	430a      	orrs	r2, r1
 80060c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a90      	ldr	r2, [pc, #576]	@ (8006310 <UART_SetConfig+0x2c8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d126      	bne.n	8006120 <UART_SetConfig+0xd8>
 80060d2:	4b90      	ldr	r3, [pc, #576]	@ (8006314 <UART_SetConfig+0x2cc>)
 80060d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d8:	f003 0303 	and.w	r3, r3, #3
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d81b      	bhi.n	8006118 <UART_SetConfig+0xd0>
 80060e0:	a201      	add	r2, pc, #4	@ (adr r2, 80060e8 <UART_SetConfig+0xa0>)
 80060e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e6:	bf00      	nop
 80060e8:	080060f9 	.word	0x080060f9
 80060ec:	08006109 	.word	0x08006109
 80060f0:	08006101 	.word	0x08006101
 80060f4:	08006111 	.word	0x08006111
 80060f8:	2301      	movs	r3, #1
 80060fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060fe:	e116      	b.n	800632e <UART_SetConfig+0x2e6>
 8006100:	2302      	movs	r3, #2
 8006102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006106:	e112      	b.n	800632e <UART_SetConfig+0x2e6>
 8006108:	2304      	movs	r3, #4
 800610a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800610e:	e10e      	b.n	800632e <UART_SetConfig+0x2e6>
 8006110:	2308      	movs	r3, #8
 8006112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006116:	e10a      	b.n	800632e <UART_SetConfig+0x2e6>
 8006118:	2310      	movs	r3, #16
 800611a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800611e:	e106      	b.n	800632e <UART_SetConfig+0x2e6>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a7c      	ldr	r2, [pc, #496]	@ (8006318 <UART_SetConfig+0x2d0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d138      	bne.n	800619c <UART_SetConfig+0x154>
 800612a:	4b7a      	ldr	r3, [pc, #488]	@ (8006314 <UART_SetConfig+0x2cc>)
 800612c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006130:	f003 030c 	and.w	r3, r3, #12
 8006134:	2b0c      	cmp	r3, #12
 8006136:	d82d      	bhi.n	8006194 <UART_SetConfig+0x14c>
 8006138:	a201      	add	r2, pc, #4	@ (adr r2, 8006140 <UART_SetConfig+0xf8>)
 800613a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613e:	bf00      	nop
 8006140:	08006175 	.word	0x08006175
 8006144:	08006195 	.word	0x08006195
 8006148:	08006195 	.word	0x08006195
 800614c:	08006195 	.word	0x08006195
 8006150:	08006185 	.word	0x08006185
 8006154:	08006195 	.word	0x08006195
 8006158:	08006195 	.word	0x08006195
 800615c:	08006195 	.word	0x08006195
 8006160:	0800617d 	.word	0x0800617d
 8006164:	08006195 	.word	0x08006195
 8006168:	08006195 	.word	0x08006195
 800616c:	08006195 	.word	0x08006195
 8006170:	0800618d 	.word	0x0800618d
 8006174:	2300      	movs	r3, #0
 8006176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800617a:	e0d8      	b.n	800632e <UART_SetConfig+0x2e6>
 800617c:	2302      	movs	r3, #2
 800617e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006182:	e0d4      	b.n	800632e <UART_SetConfig+0x2e6>
 8006184:	2304      	movs	r3, #4
 8006186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800618a:	e0d0      	b.n	800632e <UART_SetConfig+0x2e6>
 800618c:	2308      	movs	r3, #8
 800618e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006192:	e0cc      	b.n	800632e <UART_SetConfig+0x2e6>
 8006194:	2310      	movs	r3, #16
 8006196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800619a:	e0c8      	b.n	800632e <UART_SetConfig+0x2e6>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a5e      	ldr	r2, [pc, #376]	@ (800631c <UART_SetConfig+0x2d4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d125      	bne.n	80061f2 <UART_SetConfig+0x1aa>
 80061a6:	4b5b      	ldr	r3, [pc, #364]	@ (8006314 <UART_SetConfig+0x2cc>)
 80061a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80061b0:	2b30      	cmp	r3, #48	@ 0x30
 80061b2:	d016      	beq.n	80061e2 <UART_SetConfig+0x19a>
 80061b4:	2b30      	cmp	r3, #48	@ 0x30
 80061b6:	d818      	bhi.n	80061ea <UART_SetConfig+0x1a2>
 80061b8:	2b20      	cmp	r3, #32
 80061ba:	d00a      	beq.n	80061d2 <UART_SetConfig+0x18a>
 80061bc:	2b20      	cmp	r3, #32
 80061be:	d814      	bhi.n	80061ea <UART_SetConfig+0x1a2>
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <UART_SetConfig+0x182>
 80061c4:	2b10      	cmp	r3, #16
 80061c6:	d008      	beq.n	80061da <UART_SetConfig+0x192>
 80061c8:	e00f      	b.n	80061ea <UART_SetConfig+0x1a2>
 80061ca:	2300      	movs	r3, #0
 80061cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061d0:	e0ad      	b.n	800632e <UART_SetConfig+0x2e6>
 80061d2:	2302      	movs	r3, #2
 80061d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061d8:	e0a9      	b.n	800632e <UART_SetConfig+0x2e6>
 80061da:	2304      	movs	r3, #4
 80061dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061e0:	e0a5      	b.n	800632e <UART_SetConfig+0x2e6>
 80061e2:	2308      	movs	r3, #8
 80061e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061e8:	e0a1      	b.n	800632e <UART_SetConfig+0x2e6>
 80061ea:	2310      	movs	r3, #16
 80061ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061f0:	e09d      	b.n	800632e <UART_SetConfig+0x2e6>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a4a      	ldr	r2, [pc, #296]	@ (8006320 <UART_SetConfig+0x2d8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d125      	bne.n	8006248 <UART_SetConfig+0x200>
 80061fc:	4b45      	ldr	r3, [pc, #276]	@ (8006314 <UART_SetConfig+0x2cc>)
 80061fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006202:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006206:	2bc0      	cmp	r3, #192	@ 0xc0
 8006208:	d016      	beq.n	8006238 <UART_SetConfig+0x1f0>
 800620a:	2bc0      	cmp	r3, #192	@ 0xc0
 800620c:	d818      	bhi.n	8006240 <UART_SetConfig+0x1f8>
 800620e:	2b80      	cmp	r3, #128	@ 0x80
 8006210:	d00a      	beq.n	8006228 <UART_SetConfig+0x1e0>
 8006212:	2b80      	cmp	r3, #128	@ 0x80
 8006214:	d814      	bhi.n	8006240 <UART_SetConfig+0x1f8>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <UART_SetConfig+0x1d8>
 800621a:	2b40      	cmp	r3, #64	@ 0x40
 800621c:	d008      	beq.n	8006230 <UART_SetConfig+0x1e8>
 800621e:	e00f      	b.n	8006240 <UART_SetConfig+0x1f8>
 8006220:	2300      	movs	r3, #0
 8006222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006226:	e082      	b.n	800632e <UART_SetConfig+0x2e6>
 8006228:	2302      	movs	r3, #2
 800622a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800622e:	e07e      	b.n	800632e <UART_SetConfig+0x2e6>
 8006230:	2304      	movs	r3, #4
 8006232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006236:	e07a      	b.n	800632e <UART_SetConfig+0x2e6>
 8006238:	2308      	movs	r3, #8
 800623a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800623e:	e076      	b.n	800632e <UART_SetConfig+0x2e6>
 8006240:	2310      	movs	r3, #16
 8006242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006246:	e072      	b.n	800632e <UART_SetConfig+0x2e6>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a35      	ldr	r2, [pc, #212]	@ (8006324 <UART_SetConfig+0x2dc>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d12a      	bne.n	80062a8 <UART_SetConfig+0x260>
 8006252:	4b30      	ldr	r3, [pc, #192]	@ (8006314 <UART_SetConfig+0x2cc>)
 8006254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006258:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800625c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006260:	d01a      	beq.n	8006298 <UART_SetConfig+0x250>
 8006262:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006266:	d81b      	bhi.n	80062a0 <UART_SetConfig+0x258>
 8006268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800626c:	d00c      	beq.n	8006288 <UART_SetConfig+0x240>
 800626e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006272:	d815      	bhi.n	80062a0 <UART_SetConfig+0x258>
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <UART_SetConfig+0x238>
 8006278:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800627c:	d008      	beq.n	8006290 <UART_SetConfig+0x248>
 800627e:	e00f      	b.n	80062a0 <UART_SetConfig+0x258>
 8006280:	2300      	movs	r3, #0
 8006282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006286:	e052      	b.n	800632e <UART_SetConfig+0x2e6>
 8006288:	2302      	movs	r3, #2
 800628a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800628e:	e04e      	b.n	800632e <UART_SetConfig+0x2e6>
 8006290:	2304      	movs	r3, #4
 8006292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006296:	e04a      	b.n	800632e <UART_SetConfig+0x2e6>
 8006298:	2308      	movs	r3, #8
 800629a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800629e:	e046      	b.n	800632e <UART_SetConfig+0x2e6>
 80062a0:	2310      	movs	r3, #16
 80062a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062a6:	e042      	b.n	800632e <UART_SetConfig+0x2e6>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a17      	ldr	r2, [pc, #92]	@ (800630c <UART_SetConfig+0x2c4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d13a      	bne.n	8006328 <UART_SetConfig+0x2e0>
 80062b2:	4b18      	ldr	r3, [pc, #96]	@ (8006314 <UART_SetConfig+0x2cc>)
 80062b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80062bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062c0:	d01a      	beq.n	80062f8 <UART_SetConfig+0x2b0>
 80062c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062c6:	d81b      	bhi.n	8006300 <UART_SetConfig+0x2b8>
 80062c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062cc:	d00c      	beq.n	80062e8 <UART_SetConfig+0x2a0>
 80062ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062d2:	d815      	bhi.n	8006300 <UART_SetConfig+0x2b8>
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <UART_SetConfig+0x298>
 80062d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062dc:	d008      	beq.n	80062f0 <UART_SetConfig+0x2a8>
 80062de:	e00f      	b.n	8006300 <UART_SetConfig+0x2b8>
 80062e0:	2300      	movs	r3, #0
 80062e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062e6:	e022      	b.n	800632e <UART_SetConfig+0x2e6>
 80062e8:	2302      	movs	r3, #2
 80062ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ee:	e01e      	b.n	800632e <UART_SetConfig+0x2e6>
 80062f0:	2304      	movs	r3, #4
 80062f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062f6:	e01a      	b.n	800632e <UART_SetConfig+0x2e6>
 80062f8:	2308      	movs	r3, #8
 80062fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062fe:	e016      	b.n	800632e <UART_SetConfig+0x2e6>
 8006300:	2310      	movs	r3, #16
 8006302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006306:	e012      	b.n	800632e <UART_SetConfig+0x2e6>
 8006308:	efff69f3 	.word	0xefff69f3
 800630c:	40008000 	.word	0x40008000
 8006310:	40013800 	.word	0x40013800
 8006314:	40021000 	.word	0x40021000
 8006318:	40004400 	.word	0x40004400
 800631c:	40004800 	.word	0x40004800
 8006320:	40004c00 	.word	0x40004c00
 8006324:	40005000 	.word	0x40005000
 8006328:	2310      	movs	r3, #16
 800632a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a9f      	ldr	r2, [pc, #636]	@ (80065b0 <UART_SetConfig+0x568>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d17a      	bne.n	800642e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006338:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800633c:	2b08      	cmp	r3, #8
 800633e:	d824      	bhi.n	800638a <UART_SetConfig+0x342>
 8006340:	a201      	add	r2, pc, #4	@ (adr r2, 8006348 <UART_SetConfig+0x300>)
 8006342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006346:	bf00      	nop
 8006348:	0800636d 	.word	0x0800636d
 800634c:	0800638b 	.word	0x0800638b
 8006350:	08006375 	.word	0x08006375
 8006354:	0800638b 	.word	0x0800638b
 8006358:	0800637b 	.word	0x0800637b
 800635c:	0800638b 	.word	0x0800638b
 8006360:	0800638b 	.word	0x0800638b
 8006364:	0800638b 	.word	0x0800638b
 8006368:	08006383 	.word	0x08006383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800636c:	f7fe fa5e 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 8006370:	61f8      	str	r0, [r7, #28]
        break;
 8006372:	e010      	b.n	8006396 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006374:	4b8f      	ldr	r3, [pc, #572]	@ (80065b4 <UART_SetConfig+0x56c>)
 8006376:	61fb      	str	r3, [r7, #28]
        break;
 8006378:	e00d      	b.n	8006396 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800637a:	f7fe f9bf 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 800637e:	61f8      	str	r0, [r7, #28]
        break;
 8006380:	e009      	b.n	8006396 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006386:	61fb      	str	r3, [r7, #28]
        break;
 8006388:	e005      	b.n	8006396 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006394:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 80fb 	beq.w	8006594 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	4413      	add	r3, r2
 80063a8:	69fa      	ldr	r2, [r7, #28]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d305      	bcc.n	80063ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063b4:	69fa      	ldr	r2, [r7, #28]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d903      	bls.n	80063c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80063c0:	e0e8      	b.n	8006594 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	2200      	movs	r2, #0
 80063c6:	461c      	mov	r4, r3
 80063c8:	4615      	mov	r5, r2
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	f04f 0300 	mov.w	r3, #0
 80063d2:	022b      	lsls	r3, r5, #8
 80063d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80063d8:	0222      	lsls	r2, r4, #8
 80063da:	68f9      	ldr	r1, [r7, #12]
 80063dc:	6849      	ldr	r1, [r1, #4]
 80063de:	0849      	lsrs	r1, r1, #1
 80063e0:	2000      	movs	r0, #0
 80063e2:	4688      	mov	r8, r1
 80063e4:	4681      	mov	r9, r0
 80063e6:	eb12 0a08 	adds.w	sl, r2, r8
 80063ea:	eb43 0b09 	adc.w	fp, r3, r9
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	603b      	str	r3, [r7, #0]
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063fc:	4650      	mov	r0, sl
 80063fe:	4659      	mov	r1, fp
 8006400:	f7f9 fef6 	bl	80001f0 <__aeabi_uldivmod>
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	4613      	mov	r3, r2
 800640a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006412:	d308      	bcc.n	8006426 <UART_SetConfig+0x3de>
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800641a:	d204      	bcs.n	8006426 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	60da      	str	r2, [r3, #12]
 8006424:	e0b6      	b.n	8006594 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800642c:	e0b2      	b.n	8006594 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006436:	d15e      	bne.n	80064f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006438:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800643c:	2b08      	cmp	r3, #8
 800643e:	d828      	bhi.n	8006492 <UART_SetConfig+0x44a>
 8006440:	a201      	add	r2, pc, #4	@ (adr r2, 8006448 <UART_SetConfig+0x400>)
 8006442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006446:	bf00      	nop
 8006448:	0800646d 	.word	0x0800646d
 800644c:	08006475 	.word	0x08006475
 8006450:	0800647d 	.word	0x0800647d
 8006454:	08006493 	.word	0x08006493
 8006458:	08006483 	.word	0x08006483
 800645c:	08006493 	.word	0x08006493
 8006460:	08006493 	.word	0x08006493
 8006464:	08006493 	.word	0x08006493
 8006468:	0800648b 	.word	0x0800648b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800646c:	f7fe f9de 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 8006470:	61f8      	str	r0, [r7, #28]
        break;
 8006472:	e014      	b.n	800649e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006474:	f7fe f9f0 	bl	8004858 <HAL_RCC_GetPCLK2Freq>
 8006478:	61f8      	str	r0, [r7, #28]
        break;
 800647a:	e010      	b.n	800649e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800647c:	4b4d      	ldr	r3, [pc, #308]	@ (80065b4 <UART_SetConfig+0x56c>)
 800647e:	61fb      	str	r3, [r7, #28]
        break;
 8006480:	e00d      	b.n	800649e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006482:	f7fe f93b 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 8006486:	61f8      	str	r0, [r7, #28]
        break;
 8006488:	e009      	b.n	800649e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800648a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800648e:	61fb      	str	r3, [r7, #28]
        break;
 8006490:	e005      	b.n	800649e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800649c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d077      	beq.n	8006594 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	005a      	lsls	r2, r3, #1
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	085b      	lsrs	r3, r3, #1
 80064ae:	441a      	add	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	2b0f      	cmp	r3, #15
 80064be:	d916      	bls.n	80064ee <UART_SetConfig+0x4a6>
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064c6:	d212      	bcs.n	80064ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	f023 030f 	bic.w	r3, r3, #15
 80064d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	085b      	lsrs	r3, r3, #1
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	b29a      	uxth	r2, r3
 80064de:	8afb      	ldrh	r3, [r7, #22]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	8afa      	ldrh	r2, [r7, #22]
 80064ea:	60da      	str	r2, [r3, #12]
 80064ec:	e052      	b.n	8006594 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80064f4:	e04e      	b.n	8006594 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80064fa:	2b08      	cmp	r3, #8
 80064fc:	d827      	bhi.n	800654e <UART_SetConfig+0x506>
 80064fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006504 <UART_SetConfig+0x4bc>)
 8006500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006504:	08006529 	.word	0x08006529
 8006508:	08006531 	.word	0x08006531
 800650c:	08006539 	.word	0x08006539
 8006510:	0800654f 	.word	0x0800654f
 8006514:	0800653f 	.word	0x0800653f
 8006518:	0800654f 	.word	0x0800654f
 800651c:	0800654f 	.word	0x0800654f
 8006520:	0800654f 	.word	0x0800654f
 8006524:	08006547 	.word	0x08006547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006528:	f7fe f980 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 800652c:	61f8      	str	r0, [r7, #28]
        break;
 800652e:	e014      	b.n	800655a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006530:	f7fe f992 	bl	8004858 <HAL_RCC_GetPCLK2Freq>
 8006534:	61f8      	str	r0, [r7, #28]
        break;
 8006536:	e010      	b.n	800655a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006538:	4b1e      	ldr	r3, [pc, #120]	@ (80065b4 <UART_SetConfig+0x56c>)
 800653a:	61fb      	str	r3, [r7, #28]
        break;
 800653c:	e00d      	b.n	800655a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800653e:	f7fe f8dd 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 8006542:	61f8      	str	r0, [r7, #28]
        break;
 8006544:	e009      	b.n	800655a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006546:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800654a:	61fb      	str	r3, [r7, #28]
        break;
 800654c:	e005      	b.n	800655a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006558:	bf00      	nop
    }

    if (pclk != 0U)
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d019      	beq.n	8006594 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	085a      	lsrs	r2, r3, #1
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	441a      	add	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006572:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	2b0f      	cmp	r3, #15
 8006578:	d909      	bls.n	800658e <UART_SetConfig+0x546>
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006580:	d205      	bcs.n	800658e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	b29a      	uxth	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60da      	str	r2, [r3, #12]
 800658c:	e002      	b.n	8006594 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80065a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3728      	adds	r7, #40	@ 0x28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065ae:	bf00      	nop
 80065b0:	40008000 	.word	0x40008000
 80065b4:	00f42400 	.word	0x00f42400

080065b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c4:	f003 0308 	and.w	r3, r3, #8
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00a      	beq.n	80065e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00a      	beq.n	8006604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00a      	beq.n	8006626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662a:	f003 0304 	and.w	r3, r3, #4
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00a      	beq.n	8006648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664c:	f003 0310 	and.w	r3, r3, #16
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666e:	f003 0320 	and.w	r3, r3, #32
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00a      	beq.n	800668c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01a      	beq.n	80066ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066b6:	d10a      	bne.n	80066ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	605a      	str	r2, [r3, #4]
  }
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b098      	sub	sp, #96	@ 0x60
 8006700:	af02      	add	r7, sp, #8
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800670c:	f7fa fff4 	bl	80016f8 <HAL_GetTick>
 8006710:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b08      	cmp	r3, #8
 800671e:	d12e      	bne.n	800677e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006720:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006728:	2200      	movs	r2, #0
 800672a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f88c 	bl	800684c <UART_WaitOnFlagUntilTimeout>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d021      	beq.n	800677e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006742:	e853 3f00 	ldrex	r3, [r3]
 8006746:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800674a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800674e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006758:	647b      	str	r3, [r7, #68]	@ 0x44
 800675a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800675e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006760:	e841 2300 	strex	r3, r2, [r1]
 8006764:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e6      	bne.n	800673a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2220      	movs	r2, #32
 8006770:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e062      	b.n	8006844 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b04      	cmp	r3, #4
 800678a:	d149      	bne.n	8006820 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800678c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006794:	2200      	movs	r2, #0
 8006796:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f856 	bl	800684c <UART_WaitOnFlagUntilTimeout>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d03c      	beq.n	8006820 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ae:	e853 3f00 	ldrex	r3, [r3]
 80067b2:	623b      	str	r3, [r7, #32]
   return(result);
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	461a      	mov	r2, r3
 80067c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80067c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067cc:	e841 2300 	strex	r3, r2, [r1]
 80067d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1e6      	bne.n	80067a6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3308      	adds	r3, #8
 80067de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	e853 3f00 	ldrex	r3, [r3]
 80067e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f023 0301 	bic.w	r3, r3, #1
 80067ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3308      	adds	r3, #8
 80067f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067f8:	61fa      	str	r2, [r7, #28]
 80067fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fc:	69b9      	ldr	r1, [r7, #24]
 80067fe:	69fa      	ldr	r2, [r7, #28]
 8006800:	e841 2300 	strex	r3, r2, [r1]
 8006804:	617b      	str	r3, [r7, #20]
   return(result);
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e5      	bne.n	80067d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2220      	movs	r2, #32
 8006810:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e011      	b.n	8006844 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3758      	adds	r7, #88	@ 0x58
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	603b      	str	r3, [r7, #0]
 8006858:	4613      	mov	r3, r2
 800685a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800685c:	e04f      	b.n	80068fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006864:	d04b      	beq.n	80068fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006866:	f7fa ff47 	bl	80016f8 <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	429a      	cmp	r2, r3
 8006874:	d302      	bcc.n	800687c <UART_WaitOnFlagUntilTimeout+0x30>
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e04e      	b.n	800691e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0304 	and.w	r3, r3, #4
 800688a:	2b00      	cmp	r3, #0
 800688c:	d037      	beq.n	80068fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b80      	cmp	r3, #128	@ 0x80
 8006892:	d034      	beq.n	80068fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2b40      	cmp	r3, #64	@ 0x40
 8006898:	d031      	beq.n	80068fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	69db      	ldr	r3, [r3, #28]
 80068a0:	f003 0308 	and.w	r3, r3, #8
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d110      	bne.n	80068ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2208      	movs	r2, #8
 80068ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 f8ff 	bl	8006ab4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2208      	movs	r2, #8
 80068ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e029      	b.n	800691e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068d8:	d111      	bne.n	80068fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 f8e5 	bl	8006ab4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2220      	movs	r2, #32
 80068ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e00f      	b.n	800691e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	69da      	ldr	r2, [r3, #28]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	4013      	ands	r3, r2
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	429a      	cmp	r2, r3
 800690c:	bf0c      	ite	eq
 800690e:	2301      	moveq	r3, #1
 8006910:	2300      	movne	r3, #0
 8006912:	b2db      	uxtb	r3, r3
 8006914:	461a      	mov	r2, r3
 8006916:	79fb      	ldrb	r3, [r7, #7]
 8006918:	429a      	cmp	r2, r3
 800691a:	d0a0      	beq.n	800685e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
	...

08006928 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006928:	b480      	push	{r7}
 800692a:	b097      	sub	sp, #92	@ 0x5c
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	4613      	mov	r3, r2
 8006934:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	88fa      	ldrh	r2, [r7, #6]
 8006940:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	88fa      	ldrh	r2, [r7, #6]
 8006948:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800695a:	d10e      	bne.n	800697a <UART_Start_Receive_IT+0x52>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d105      	bne.n	8006970 <UART_Start_Receive_IT+0x48>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800696a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800696e:	e02d      	b.n	80069cc <UART_Start_Receive_IT+0xa4>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	22ff      	movs	r2, #255	@ 0xff
 8006974:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006978:	e028      	b.n	80069cc <UART_Start_Receive_IT+0xa4>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10d      	bne.n	800699e <UART_Start_Receive_IT+0x76>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d104      	bne.n	8006994 <UART_Start_Receive_IT+0x6c>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	22ff      	movs	r2, #255	@ 0xff
 800698e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006992:	e01b      	b.n	80069cc <UART_Start_Receive_IT+0xa4>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	227f      	movs	r2, #127	@ 0x7f
 8006998:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800699c:	e016      	b.n	80069cc <UART_Start_Receive_IT+0xa4>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069a6:	d10d      	bne.n	80069c4 <UART_Start_Receive_IT+0x9c>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d104      	bne.n	80069ba <UART_Start_Receive_IT+0x92>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	227f      	movs	r2, #127	@ 0x7f
 80069b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80069b8:	e008      	b.n	80069cc <UART_Start_Receive_IT+0xa4>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	223f      	movs	r2, #63	@ 0x3f
 80069be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80069c2:	e003      	b.n	80069cc <UART_Start_Receive_IT+0xa4>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2222      	movs	r2, #34	@ 0x22
 80069d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3308      	adds	r3, #8
 80069e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069e6:	e853 3f00 	ldrex	r3, [r3]
 80069ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ee:	f043 0301 	orr.w	r3, r3, #1
 80069f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3308      	adds	r3, #8
 80069fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80069fc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80069fe:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a00:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a04:	e841 2300 	strex	r3, r2, [r1]
 8006a08:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006a0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e5      	bne.n	80069dc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a18:	d107      	bne.n	8006a2a <UART_Start_Receive_IT+0x102>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d103      	bne.n	8006a2a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4a21      	ldr	r2, [pc, #132]	@ (8006aac <UART_Start_Receive_IT+0x184>)
 8006a26:	669a      	str	r2, [r3, #104]	@ 0x68
 8006a28:	e002      	b.n	8006a30 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	4a20      	ldr	r2, [pc, #128]	@ (8006ab0 <UART_Start_Receive_IT+0x188>)
 8006a2e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d019      	beq.n	8006a6c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a48:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a58:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e6      	bne.n	8006a38 <UART_Start_Receive_IT+0x110>
 8006a6a:	e018      	b.n	8006a9e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	e853 3f00 	ldrex	r3, [r3]
 8006a78:	613b      	str	r3, [r7, #16]
   return(result);
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f043 0320 	orr.w	r3, r3, #32
 8006a80:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a8a:	623b      	str	r3, [r7, #32]
 8006a8c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	69f9      	ldr	r1, [r7, #28]
 8006a90:	6a3a      	ldr	r2, [r7, #32]
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e6      	bne.n	8006a6c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	375c      	adds	r7, #92	@ 0x5c
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	08006db9 	.word	0x08006db9
 8006ab0:	08006bfd 	.word	0x08006bfd

08006ab4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b095      	sub	sp, #84	@ 0x54
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ada:	643b      	str	r3, [r7, #64]	@ 0x40
 8006adc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ae0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e6      	bne.n	8006abc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3308      	adds	r3, #8
 8006af4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	f023 0301 	bic.w	r3, r3, #1
 8006b04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e5      	bne.n	8006aee <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d118      	bne.n	8006b5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	e853 3f00 	ldrex	r3, [r3]
 8006b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f023 0310 	bic.w	r3, r3, #16
 8006b3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	461a      	mov	r2, r3
 8006b46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b48:	61bb      	str	r3, [r7, #24]
 8006b4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4c:	6979      	ldr	r1, [r7, #20]
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	e841 2300 	strex	r3, r2, [r1]
 8006b54:	613b      	str	r3, [r7, #16]
   return(result);
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e6      	bne.n	8006b2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006b70:	bf00      	nop
 8006b72:	3754      	adds	r7, #84	@ 0x54
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f7ff fa3e 	bl	800601c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ba0:	bf00      	nop
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	e853 3f00 	ldrex	r3, [r3]
 8006bbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bc4:	61fb      	str	r3, [r7, #28]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	61bb      	str	r3, [r7, #24]
 8006bd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd2:	6979      	ldr	r1, [r7, #20]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	e841 2300 	strex	r3, r2, [r1]
 8006bda:	613b      	str	r3, [r7, #16]
   return(result);
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1e6      	bne.n	8006bb0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2220      	movs	r2, #32
 8006be6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7ff fa0a 	bl	8006008 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bf4:	bf00      	nop
 8006bf6:	3720      	adds	r7, #32
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b09c      	sub	sp, #112	@ 0x70
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c0a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c14:	2b22      	cmp	r3, #34	@ 0x22
 8006c16:	f040 80be 	bne.w	8006d96 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006c20:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c24:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006c28:	b2d9      	uxtb	r1, r3
 8006c2a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c34:	400a      	ands	r2, r1
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f040 80a3 	bne.w	8006daa <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c6c:	e853 3f00 	ldrex	r3, [r3]
 8006c70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e6      	bne.n	8006c64 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca0:	e853 3f00 	ldrex	r3, [r3]
 8006ca4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca8:	f023 0301 	bic.w	r3, r3, #1
 8006cac:	667b      	str	r3, [r7, #100]	@ 0x64
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3308      	adds	r3, #8
 8006cb4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006cb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006cb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cbe:	e841 2300 	strex	r3, r2, [r1]
 8006cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1e5      	bne.n	8006c96 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a34      	ldr	r2, [pc, #208]	@ (8006db4 <UART_RxISR_8BIT+0x1b8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d01f      	beq.n	8006d28 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d018      	beq.n	8006d28 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfe:	e853 3f00 	ldrex	r3, [r3]
 8006d02:	623b      	str	r3, [r7, #32]
   return(result);
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	461a      	mov	r2, r3
 8006d12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d14:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d16:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d1c:	e841 2300 	strex	r3, r2, [r1]
 8006d20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e6      	bne.n	8006cf6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d12e      	bne.n	8006d8e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	e853 3f00 	ldrex	r3, [r3]
 8006d42:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0310 	bic.w	r3, r3, #16
 8006d4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	461a      	mov	r2, r3
 8006d52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d54:	61fb      	str	r3, [r7, #28]
 8006d56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d58:	69b9      	ldr	r1, [r7, #24]
 8006d5a:	69fa      	ldr	r2, [r7, #28]
 8006d5c:	e841 2300 	strex	r3, r2, [r1]
 8006d60:	617b      	str	r3, [r7, #20]
   return(result);
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e6      	bne.n	8006d36 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	f003 0310 	and.w	r3, r3, #16
 8006d72:	2b10      	cmp	r3, #16
 8006d74:	d103      	bne.n	8006d7e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2210      	movs	r2, #16
 8006d7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7ff f952 	bl	8006030 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d8c:	e00d      	b.n	8006daa <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7fa f846 	bl	8000e20 <HAL_UART_RxCpltCallback>
}
 8006d94:	e009      	b.n	8006daa <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	8b1b      	ldrh	r3, [r3, #24]
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f042 0208 	orr.w	r2, r2, #8
 8006da6:	b292      	uxth	r2, r2
 8006da8:	831a      	strh	r2, [r3, #24]
}
 8006daa:	bf00      	nop
 8006dac:	3770      	adds	r7, #112	@ 0x70
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	40008000 	.word	0x40008000

08006db8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b09c      	sub	sp, #112	@ 0x70
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006dc6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dd0:	2b22      	cmp	r3, #34	@ 0x22
 8006dd2:	f040 80be 	bne.w	8006f52 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006ddc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006de4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006de6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006dea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006dee:	4013      	ands	r3, r2
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006df4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dfa:	1c9a      	adds	r2, r3, #2
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f040 80a3 	bne.w	8006f66 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006e2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e34:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e40:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e42:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006e44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e46:	e841 2300 	strex	r3, r2, [r1]
 8006e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006e4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1e6      	bne.n	8006e20 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3308      	adds	r3, #8
 8006e58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e64:	f023 0301 	bic.w	r3, r3, #1
 8006e68:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	3308      	adds	r3, #8
 8006e70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006e72:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e7a:	e841 2300 	strex	r3, r2, [r1]
 8006e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1e5      	bne.n	8006e52 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a34      	ldr	r2, [pc, #208]	@ (8006f70 <UART_RxISR_16BIT+0x1b8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d01f      	beq.n	8006ee4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d018      	beq.n	8006ee4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	e853 3f00 	ldrex	r3, [r3]
 8006ebe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ec6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ed2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ed6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ed8:	e841 2300 	strex	r3, r2, [r1]
 8006edc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e6      	bne.n	8006eb2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d12e      	bne.n	8006f4a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	e853 3f00 	ldrex	r3, [r3]
 8006efe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	f023 0310 	bic.w	r3, r3, #16
 8006f06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f10:	61bb      	str	r3, [r7, #24]
 8006f12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f14:	6979      	ldr	r1, [r7, #20]
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	e841 2300 	strex	r3, r2, [r1]
 8006f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1e6      	bne.n	8006ef2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	f003 0310 	and.w	r3, r3, #16
 8006f2e:	2b10      	cmp	r3, #16
 8006f30:	d103      	bne.n	8006f3a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2210      	movs	r2, #16
 8006f38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7ff f874 	bl	8006030 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f48:	e00d      	b.n	8006f66 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7f9 ff68 	bl	8000e20 <HAL_UART_RxCpltCallback>
}
 8006f50:	e009      	b.n	8006f66 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	8b1b      	ldrh	r3, [r3, #24]
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f042 0208 	orr.w	r2, r2, #8
 8006f62:	b292      	uxth	r2, r2
 8006f64:	831a      	strh	r2, [r3, #24]
}
 8006f66:	bf00      	nop
 8006f68:	3770      	adds	r7, #112	@ 0x70
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	40008000 	.word	0x40008000

08006f74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <__NVIC_SetPriority>:
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	4603      	mov	r3, r0
 8006f90:	6039      	str	r1, [r7, #0]
 8006f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	db0a      	blt.n	8006fb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	b2da      	uxtb	r2, r3
 8006fa0:	490c      	ldr	r1, [pc, #48]	@ (8006fd4 <__NVIC_SetPriority+0x4c>)
 8006fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fa6:	0112      	lsls	r2, r2, #4
 8006fa8:	b2d2      	uxtb	r2, r2
 8006faa:	440b      	add	r3, r1
 8006fac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006fb0:	e00a      	b.n	8006fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	b2da      	uxtb	r2, r3
 8006fb6:	4908      	ldr	r1, [pc, #32]	@ (8006fd8 <__NVIC_SetPriority+0x50>)
 8006fb8:	79fb      	ldrb	r3, [r7, #7]
 8006fba:	f003 030f 	and.w	r3, r3, #15
 8006fbe:	3b04      	subs	r3, #4
 8006fc0:	0112      	lsls	r2, r2, #4
 8006fc2:	b2d2      	uxtb	r2, r2
 8006fc4:	440b      	add	r3, r1
 8006fc6:	761a      	strb	r2, [r3, #24]
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	e000e100 	.word	0xe000e100
 8006fd8:	e000ed00 	.word	0xe000ed00

08006fdc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006fe0:	4b05      	ldr	r3, [pc, #20]	@ (8006ff8 <SysTick_Handler+0x1c>)
 8006fe2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006fe4:	f001 fec6 	bl	8008d74 <xTaskGetSchedulerState>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d001      	beq.n	8006ff2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006fee:	f002 fcbb 	bl	8009968 <xPortSysTickHandler>
  }
}
 8006ff2:	bf00      	nop
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	e000e010 	.word	0xe000e010

08006ffc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007000:	2100      	movs	r1, #0
 8007002:	f06f 0004 	mvn.w	r0, #4
 8007006:	f7ff ffbf 	bl	8006f88 <__NVIC_SetPriority>
#endif
}
 800700a:	bf00      	nop
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007016:	f3ef 8305 	mrs	r3, IPSR
 800701a:	603b      	str	r3, [r7, #0]
  return(result);
 800701c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007022:	f06f 0305 	mvn.w	r3, #5
 8007026:	607b      	str	r3, [r7, #4]
 8007028:	e00c      	b.n	8007044 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800702a:	4b0a      	ldr	r3, [pc, #40]	@ (8007054 <osKernelInitialize+0x44>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d105      	bne.n	800703e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007032:	4b08      	ldr	r3, [pc, #32]	@ (8007054 <osKernelInitialize+0x44>)
 8007034:	2201      	movs	r2, #1
 8007036:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007038:	2300      	movs	r3, #0
 800703a:	607b      	str	r3, [r7, #4]
 800703c:	e002      	b.n	8007044 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800703e:	f04f 33ff 	mov.w	r3, #4294967295
 8007042:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007044:	687b      	ldr	r3, [r7, #4]
}
 8007046:	4618      	mov	r0, r3
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	200002a4 	.word	0x200002a4

08007058 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800705e:	f3ef 8305 	mrs	r3, IPSR
 8007062:	603b      	str	r3, [r7, #0]
  return(result);
 8007064:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <osKernelStart+0x1a>
    stat = osErrorISR;
 800706a:	f06f 0305 	mvn.w	r3, #5
 800706e:	607b      	str	r3, [r7, #4]
 8007070:	e010      	b.n	8007094 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007072:	4b0b      	ldr	r3, [pc, #44]	@ (80070a0 <osKernelStart+0x48>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d109      	bne.n	800708e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800707a:	f7ff ffbf 	bl	8006ffc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800707e:	4b08      	ldr	r3, [pc, #32]	@ (80070a0 <osKernelStart+0x48>)
 8007080:	2202      	movs	r2, #2
 8007082:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007084:	f001 fa12 	bl	80084ac <vTaskStartScheduler>
      stat = osOK;
 8007088:	2300      	movs	r3, #0
 800708a:	607b      	str	r3, [r7, #4]
 800708c:	e002      	b.n	8007094 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800708e:	f04f 33ff 	mov.w	r3, #4294967295
 8007092:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007094:	687b      	ldr	r3, [r7, #4]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	200002a4 	.word	0x200002a4

080070a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b08e      	sub	sp, #56	@ 0x38
 80070a8:	af04      	add	r7, sp, #16
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80070b0:	2300      	movs	r3, #0
 80070b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070b4:	f3ef 8305 	mrs	r3, IPSR
 80070b8:	617b      	str	r3, [r7, #20]
  return(result);
 80070ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d17e      	bne.n	80071be <osThreadNew+0x11a>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d07b      	beq.n	80071be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80070c6:	2380      	movs	r3, #128	@ 0x80
 80070c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80070ca:	2318      	movs	r3, #24
 80070cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80070ce:	2300      	movs	r3, #0
 80070d0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80070d2:	f04f 33ff 	mov.w	r3, #4294967295
 80070d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d045      	beq.n	800716a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <osThreadNew+0x48>
        name = attr->name;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d008      	beq.n	8007112 <osThreadNew+0x6e>
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	2b38      	cmp	r3, #56	@ 0x38
 8007104:	d805      	bhi.n	8007112 <osThreadNew+0x6e>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <osThreadNew+0x72>
        return (NULL);
 8007112:	2300      	movs	r3, #0
 8007114:	e054      	b.n	80071c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	089b      	lsrs	r3, r3, #2
 8007124:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00e      	beq.n	800714c <osThreadNew+0xa8>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	2ba7      	cmp	r3, #167	@ 0xa7
 8007134:	d90a      	bls.n	800714c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800713a:	2b00      	cmp	r3, #0
 800713c:	d006      	beq.n	800714c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <osThreadNew+0xa8>
        mem = 1;
 8007146:	2301      	movs	r3, #1
 8007148:	61bb      	str	r3, [r7, #24]
 800714a:	e010      	b.n	800716e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10c      	bne.n	800716e <osThreadNew+0xca>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d108      	bne.n	800716e <osThreadNew+0xca>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d104      	bne.n	800716e <osThreadNew+0xca>
          mem = 0;
 8007164:	2300      	movs	r3, #0
 8007166:	61bb      	str	r3, [r7, #24]
 8007168:	e001      	b.n	800716e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800716a:	2300      	movs	r3, #0
 800716c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d110      	bne.n	8007196 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800717c:	9202      	str	r2, [sp, #8]
 800717e:	9301      	str	r3, [sp, #4]
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	6a3a      	ldr	r2, [r7, #32]
 8007188:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 ff9a 	bl	80080c4 <xTaskCreateStatic>
 8007190:	4603      	mov	r3, r0
 8007192:	613b      	str	r3, [r7, #16]
 8007194:	e013      	b.n	80071be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d110      	bne.n	80071be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	b29a      	uxth	r2, r3
 80071a0:	f107 0310 	add.w	r3, r7, #16
 80071a4:	9301      	str	r3, [sp, #4]
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f000 ffe8 	bl	8008184 <xTaskCreate>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d001      	beq.n	80071be <osThreadNew+0x11a>
            hTask = NULL;
 80071ba:	2300      	movs	r3, #0
 80071bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80071be:	693b      	ldr	r3, [r7, #16]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3728      	adds	r7, #40	@ 0x28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071d0:	f3ef 8305 	mrs	r3, IPSR
 80071d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80071d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <osDelay+0x1c>
    stat = osErrorISR;
 80071dc:	f06f 0305 	mvn.w	r3, #5
 80071e0:	60fb      	str	r3, [r7, #12]
 80071e2:	e007      	b.n	80071f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d002      	beq.n	80071f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f001 f926 	bl	8008440 <vTaskDelay>
    }
  }

  return (stat);
 80071f4:	68fb      	ldr	r3, [r7, #12]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80071fe:	b580      	push	{r7, lr}
 8007200:	b08a      	sub	sp, #40	@ 0x28
 8007202:	af02      	add	r7, sp, #8
 8007204:	60f8      	str	r0, [r7, #12]
 8007206:	60b9      	str	r1, [r7, #8]
 8007208:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800720a:	2300      	movs	r3, #0
 800720c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800720e:	f3ef 8305 	mrs	r3, IPSR
 8007212:	613b      	str	r3, [r7, #16]
  return(result);
 8007214:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007216:	2b00      	cmp	r3, #0
 8007218:	d175      	bne.n	8007306 <osSemaphoreNew+0x108>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d072      	beq.n	8007306 <osSemaphoreNew+0x108>
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	429a      	cmp	r2, r3
 8007226:	d86e      	bhi.n	8007306 <osSemaphoreNew+0x108>
    mem = -1;
 8007228:	f04f 33ff 	mov.w	r3, #4294967295
 800722c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d015      	beq.n	8007260 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d006      	beq.n	800724a <osSemaphoreNew+0x4c>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	2b4f      	cmp	r3, #79	@ 0x4f
 8007242:	d902      	bls.n	800724a <osSemaphoreNew+0x4c>
        mem = 1;
 8007244:	2301      	movs	r3, #1
 8007246:	61bb      	str	r3, [r7, #24]
 8007248:	e00c      	b.n	8007264 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d108      	bne.n	8007264 <osSemaphoreNew+0x66>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d104      	bne.n	8007264 <osSemaphoreNew+0x66>
          mem = 0;
 800725a:	2300      	movs	r3, #0
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	e001      	b.n	8007264 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007260:	2300      	movs	r3, #0
 8007262:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726a:	d04c      	beq.n	8007306 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d128      	bne.n	80072c4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d10a      	bne.n	800728e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	2203      	movs	r2, #3
 800727e:	9200      	str	r2, [sp, #0]
 8007280:	2200      	movs	r2, #0
 8007282:	2100      	movs	r1, #0
 8007284:	2001      	movs	r0, #1
 8007286:	f000 f995 	bl	80075b4 <xQueueGenericCreateStatic>
 800728a:	61f8      	str	r0, [r7, #28]
 800728c:	e005      	b.n	800729a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800728e:	2203      	movs	r2, #3
 8007290:	2100      	movs	r1, #0
 8007292:	2001      	movs	r0, #1
 8007294:	f000 fa0b 	bl	80076ae <xQueueGenericCreate>
 8007298:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d022      	beq.n	80072e6 <osSemaphoreNew+0xe8>
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d01f      	beq.n	80072e6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80072a6:	2300      	movs	r3, #0
 80072a8:	2200      	movs	r2, #0
 80072aa:	2100      	movs	r1, #0
 80072ac:	69f8      	ldr	r0, [r7, #28]
 80072ae:	f000 facb 	bl	8007848 <xQueueGenericSend>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d016      	beq.n	80072e6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80072b8:	69f8      	ldr	r0, [r7, #28]
 80072ba:	f000 fd47 	bl	8007d4c <vQueueDelete>
            hSemaphore = NULL;
 80072be:	2300      	movs	r3, #0
 80072c0:	61fb      	str	r3, [r7, #28]
 80072c2:	e010      	b.n	80072e6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d108      	bne.n	80072dc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	461a      	mov	r2, r3
 80072d0:	68b9      	ldr	r1, [r7, #8]
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 fa49 	bl	800776a <xQueueCreateCountingSemaphoreStatic>
 80072d8:	61f8      	str	r0, [r7, #28]
 80072da:	e004      	b.n	80072e6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80072dc:	68b9      	ldr	r1, [r7, #8]
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f000 fa7c 	bl	80077dc <xQueueCreateCountingSemaphore>
 80072e4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00c      	beq.n	8007306 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <osSemaphoreNew+0xfc>
          name = attr->name;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	617b      	str	r3, [r7, #20]
 80072f8:	e001      	b.n	80072fe <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80072fa:	2300      	movs	r3, #0
 80072fc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80072fe:	6979      	ldr	r1, [r7, #20]
 8007300:	69f8      	ldr	r0, [r7, #28]
 8007302:	f000 fe57 	bl	8007fb4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007306:	69fb      	ldr	r3, [r7, #28]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3720      	adds	r7, #32
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4a07      	ldr	r2, [pc, #28]	@ (800733c <vApplicationGetIdleTaskMemory+0x2c>)
 8007320:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	4a06      	ldr	r2, [pc, #24]	@ (8007340 <vApplicationGetIdleTaskMemory+0x30>)
 8007326:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2280      	movs	r2, #128	@ 0x80
 800732c:	601a      	str	r2, [r3, #0]
}
 800732e:	bf00      	nop
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	200002a8 	.word	0x200002a8
 8007340:	20000350 	.word	0x20000350

08007344 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	4a07      	ldr	r2, [pc, #28]	@ (8007370 <vApplicationGetTimerTaskMemory+0x2c>)
 8007354:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	4a06      	ldr	r2, [pc, #24]	@ (8007374 <vApplicationGetTimerTaskMemory+0x30>)
 800735a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007362:	601a      	str	r2, [r3, #0]
}
 8007364:	bf00      	nop
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	20000550 	.word	0x20000550
 8007374:	200005f8 	.word	0x200005f8

08007378 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f103 0208 	add.w	r2, r3, #8
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f04f 32ff 	mov.w	r2, #4294967295
 8007390:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f103 0208 	add.w	r2, r3, #8
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f103 0208 	add.w	r2, r3, #8
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073c6:	bf00      	nop
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073d2:	b480      	push	{r7}
 80073d4:	b085      	sub	sp, #20
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	683a      	ldr	r2, [r7, #0]
 80073f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	1c5a      	adds	r2, r3, #1
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	601a      	str	r2, [r3, #0]
}
 800740e:	bf00      	nop
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800741a:	b480      	push	{r7}
 800741c:	b085      	sub	sp, #20
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007430:	d103      	bne.n	800743a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	e00c      	b.n	8007454 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	3308      	adds	r3, #8
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	e002      	b.n	8007448 <vListInsert+0x2e>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	429a      	cmp	r2, r3
 8007452:	d2f6      	bcs.n	8007442 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	601a      	str	r2, [r3, #0]
}
 8007480:	bf00      	nop
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	6892      	ldr	r2, [r2, #8]
 80074a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	6852      	ldr	r2, [r2, #4]
 80074ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d103      	bne.n	80074c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689a      	ldr	r2, [r3, #8]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	1e5a      	subs	r2, r3, #1
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10b      	bne.n	800750c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80074f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007506:	bf00      	nop
 8007508:	bf00      	nop
 800750a:	e7fd      	b.n	8007508 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800750c:	f002 f99c 	bl	8009848 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007518:	68f9      	ldr	r1, [r7, #12]
 800751a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800751c:	fb01 f303 	mul.w	r3, r1, r3
 8007520:	441a      	add	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800753c:	3b01      	subs	r3, #1
 800753e:	68f9      	ldr	r1, [r7, #12]
 8007540:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007542:	fb01 f303 	mul.w	r3, r1, r3
 8007546:	441a      	add	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	22ff      	movs	r2, #255	@ 0xff
 8007550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	22ff      	movs	r2, #255	@ 0xff
 8007558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d114      	bne.n	800758c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d01a      	beq.n	80075a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	3310      	adds	r3, #16
 800756e:	4618      	mov	r0, r3
 8007570:	f001 fa3a 	bl	80089e8 <xTaskRemoveFromEventList>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d012      	beq.n	80075a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800757a:	4b0d      	ldr	r3, [pc, #52]	@ (80075b0 <xQueueGenericReset+0xd0>)
 800757c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	e009      	b.n	80075a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	3310      	adds	r3, #16
 8007590:	4618      	mov	r0, r3
 8007592:	f7ff fef1 	bl	8007378 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	3324      	adds	r3, #36	@ 0x24
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff feec 	bl	8007378 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80075a0:	f002 f984 	bl	80098ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80075a4:	2301      	movs	r3, #1
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	e000ed04 	.word	0xe000ed04

080075b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b08e      	sub	sp, #56	@ 0x38
 80075b8:	af02      	add	r7, sp, #8
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
 80075c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10b      	bne.n	80075e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80075da:	bf00      	nop
 80075dc:	bf00      	nop
 80075de:	e7fd      	b.n	80075dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10b      	bne.n	80075fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80075e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80075f8:	bf00      	nop
 80075fa:	bf00      	nop
 80075fc:	e7fd      	b.n	80075fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <xQueueGenericCreateStatic+0x56>
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <xQueueGenericCreateStatic+0x5a>
 800760a:	2301      	movs	r3, #1
 800760c:	e000      	b.n	8007610 <xQueueGenericCreateStatic+0x5c>
 800760e:	2300      	movs	r3, #0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10b      	bne.n	800762c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	623b      	str	r3, [r7, #32]
}
 8007626:	bf00      	nop
 8007628:	bf00      	nop
 800762a:	e7fd      	b.n	8007628 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d102      	bne.n	8007638 <xQueueGenericCreateStatic+0x84>
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <xQueueGenericCreateStatic+0x88>
 8007638:	2301      	movs	r3, #1
 800763a:	e000      	b.n	800763e <xQueueGenericCreateStatic+0x8a>
 800763c:	2300      	movs	r3, #0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10b      	bne.n	800765a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	61fb      	str	r3, [r7, #28]
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop
 8007658:	e7fd      	b.n	8007656 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800765a:	2350      	movs	r3, #80	@ 0x50
 800765c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b50      	cmp	r3, #80	@ 0x50
 8007662:	d00b      	beq.n	800767c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007668:	f383 8811 	msr	BASEPRI, r3
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	61bb      	str	r3, [r7, #24]
}
 8007676:	bf00      	nop
 8007678:	bf00      	nop
 800767a:	e7fd      	b.n	8007678 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800767c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00d      	beq.n	80076a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007690:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	4613      	mov	r3, r2
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	68b9      	ldr	r1, [r7, #8]
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 f840 	bl	8007724 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3730      	adds	r7, #48	@ 0x30
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b08a      	sub	sp, #40	@ 0x28
 80076b2:	af02      	add	r7, sp, #8
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	4613      	mov	r3, r2
 80076ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10b      	bne.n	80076da <xQueueGenericCreate+0x2c>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	613b      	str	r3, [r7, #16]
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop
 80076d8:	e7fd      	b.n	80076d6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	fb02 f303 	mul.w	r3, r2, r3
 80076e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	3350      	adds	r3, #80	@ 0x50
 80076e8:	4618      	mov	r0, r3
 80076ea:	f002 f9cf 	bl	8009a8c <pvPortMalloc>
 80076ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d011      	beq.n	800771a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	3350      	adds	r3, #80	@ 0x50
 80076fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007708:	79fa      	ldrb	r2, [r7, #7]
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	4613      	mov	r3, r2
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	68b9      	ldr	r1, [r7, #8]
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 f805 	bl	8007724 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800771a:	69bb      	ldr	r3, [r7, #24]
	}
 800771c:	4618      	mov	r0, r3
 800771e:	3720      	adds	r7, #32
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d103      	bne.n	8007740 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	69ba      	ldr	r2, [r7, #24]
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	e002      	b.n	8007746 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007752:	2101      	movs	r1, #1
 8007754:	69b8      	ldr	r0, [r7, #24]
 8007756:	f7ff fec3 	bl	80074e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	78fa      	ldrb	r2, [r7, #3]
 800775e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007762:	bf00      	nop
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800776a:	b580      	push	{r7, lr}
 800776c:	b08a      	sub	sp, #40	@ 0x28
 800776e:	af02      	add	r7, sp, #8
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10b      	bne.n	8007794 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800777c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007780:	f383 8811 	msr	BASEPRI, r3
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	61bb      	str	r3, [r7, #24]
}
 800778e:	bf00      	nop
 8007790:	bf00      	nop
 8007792:	e7fd      	b.n	8007790 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	429a      	cmp	r2, r3
 800779a:	d90b      	bls.n	80077b4 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	617b      	str	r3, [r7, #20]
}
 80077ae:	bf00      	nop
 80077b0:	bf00      	nop
 80077b2:	e7fd      	b.n	80077b0 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80077b4:	2302      	movs	r3, #2
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	2100      	movs	r1, #0
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f7ff fef8 	bl	80075b4 <xQueueGenericCreateStatic>
 80077c4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80077d2:	69fb      	ldr	r3, [r7, #28]
	}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3720      	adds	r7, #32
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10b      	bne.n	8007804 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	613b      	str	r3, [r7, #16]
}
 80077fe:	bf00      	nop
 8007800:	bf00      	nop
 8007802:	e7fd      	b.n	8007800 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	429a      	cmp	r2, r3
 800780a:	d90b      	bls.n	8007824 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	60fb      	str	r3, [r7, #12]
}
 800781e:	bf00      	nop
 8007820:	bf00      	nop
 8007822:	e7fd      	b.n	8007820 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007824:	2202      	movs	r2, #2
 8007826:	2100      	movs	r1, #0
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7ff ff40 	bl	80076ae <xQueueGenericCreate>
 800782e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d002      	beq.n	800783c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800783c:	697b      	ldr	r3, [r7, #20]
	}
 800783e:	4618      	mov	r0, r3
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
	...

08007848 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b08e      	sub	sp, #56	@ 0x38
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
 8007854:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007856:	2300      	movs	r3, #0
 8007858:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800785e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10b      	bne.n	800787c <xQueueGenericSend+0x34>
	__asm volatile
 8007864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007876:	bf00      	nop
 8007878:	bf00      	nop
 800787a:	e7fd      	b.n	8007878 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d103      	bne.n	800788a <xQueueGenericSend+0x42>
 8007882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007886:	2b00      	cmp	r3, #0
 8007888:	d101      	bne.n	800788e <xQueueGenericSend+0x46>
 800788a:	2301      	movs	r3, #1
 800788c:	e000      	b.n	8007890 <xQueueGenericSend+0x48>
 800788e:	2300      	movs	r3, #0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10b      	bne.n	80078ac <xQueueGenericSend+0x64>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80078a6:	bf00      	nop
 80078a8:	bf00      	nop
 80078aa:	e7fd      	b.n	80078a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d103      	bne.n	80078ba <xQueueGenericSend+0x72>
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d101      	bne.n	80078be <xQueueGenericSend+0x76>
 80078ba:	2301      	movs	r3, #1
 80078bc:	e000      	b.n	80078c0 <xQueueGenericSend+0x78>
 80078be:	2300      	movs	r3, #0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10b      	bne.n	80078dc <xQueueGenericSend+0x94>
	__asm volatile
 80078c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c8:	f383 8811 	msr	BASEPRI, r3
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	623b      	str	r3, [r7, #32]
}
 80078d6:	bf00      	nop
 80078d8:	bf00      	nop
 80078da:	e7fd      	b.n	80078d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078dc:	f001 fa4a 	bl	8008d74 <xTaskGetSchedulerState>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d102      	bne.n	80078ec <xQueueGenericSend+0xa4>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d101      	bne.n	80078f0 <xQueueGenericSend+0xa8>
 80078ec:	2301      	movs	r3, #1
 80078ee:	e000      	b.n	80078f2 <xQueueGenericSend+0xaa>
 80078f0:	2300      	movs	r3, #0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10b      	bne.n	800790e <xQueueGenericSend+0xc6>
	__asm volatile
 80078f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fa:	f383 8811 	msr	BASEPRI, r3
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	61fb      	str	r3, [r7, #28]
}
 8007908:	bf00      	nop
 800790a:	bf00      	nop
 800790c:	e7fd      	b.n	800790a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800790e:	f001 ff9b 	bl	8009848 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007914:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800791a:	429a      	cmp	r2, r3
 800791c:	d302      	bcc.n	8007924 <xQueueGenericSend+0xdc>
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	2b02      	cmp	r3, #2
 8007922:	d129      	bne.n	8007978 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	68b9      	ldr	r1, [r7, #8]
 8007928:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800792a:	f000 fa33 	bl	8007d94 <prvCopyDataToQueue>
 800792e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007934:	2b00      	cmp	r3, #0
 8007936:	d010      	beq.n	800795a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793a:	3324      	adds	r3, #36	@ 0x24
 800793c:	4618      	mov	r0, r3
 800793e:	f001 f853 	bl	80089e8 <xTaskRemoveFromEventList>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d013      	beq.n	8007970 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007948:	4b3f      	ldr	r3, [pc, #252]	@ (8007a48 <xQueueGenericSend+0x200>)
 800794a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	e00a      	b.n	8007970 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800795a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800795c:	2b00      	cmp	r3, #0
 800795e:	d007      	beq.n	8007970 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007960:	4b39      	ldr	r3, [pc, #228]	@ (8007a48 <xQueueGenericSend+0x200>)
 8007962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007970:	f001 ff9c 	bl	80098ac <vPortExitCritical>
				return pdPASS;
 8007974:	2301      	movs	r3, #1
 8007976:	e063      	b.n	8007a40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d103      	bne.n	8007986 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800797e:	f001 ff95 	bl	80098ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007982:	2300      	movs	r3, #0
 8007984:	e05c      	b.n	8007a40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007988:	2b00      	cmp	r3, #0
 800798a:	d106      	bne.n	800799a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800798c:	f107 0314 	add.w	r3, r7, #20
 8007990:	4618      	mov	r0, r3
 8007992:	f001 f88d 	bl	8008ab0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007996:	2301      	movs	r3, #1
 8007998:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800799a:	f001 ff87 	bl	80098ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800799e:	f000 fdf5 	bl	800858c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079a2:	f001 ff51 	bl	8009848 <vPortEnterCritical>
 80079a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079ac:	b25b      	sxtb	r3, r3
 80079ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b2:	d103      	bne.n	80079bc <xQueueGenericSend+0x174>
 80079b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079c2:	b25b      	sxtb	r3, r3
 80079c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c8:	d103      	bne.n	80079d2 <xQueueGenericSend+0x18a>
 80079ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079d2:	f001 ff6b 	bl	80098ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079d6:	1d3a      	adds	r2, r7, #4
 80079d8:	f107 0314 	add.w	r3, r7, #20
 80079dc:	4611      	mov	r1, r2
 80079de:	4618      	mov	r0, r3
 80079e0:	f001 f87c 	bl	8008adc <xTaskCheckForTimeOut>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d124      	bne.n	8007a34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079ec:	f000 faca 	bl	8007f84 <prvIsQueueFull>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d018      	beq.n	8007a28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f8:	3310      	adds	r3, #16
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	4611      	mov	r1, r2
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 ffa0 	bl	8008944 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007a04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a06:	f000 fa55 	bl	8007eb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007a0a:	f000 fdcd 	bl	80085a8 <xTaskResumeAll>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f47f af7c 	bne.w	800790e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007a16:	4b0c      	ldr	r3, [pc, #48]	@ (8007a48 <xQueueGenericSend+0x200>)
 8007a18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	e772      	b.n	800790e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007a28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a2a:	f000 fa43 	bl	8007eb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a2e:	f000 fdbb 	bl	80085a8 <xTaskResumeAll>
 8007a32:	e76c      	b.n	800790e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007a34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a36:	f000 fa3d 	bl	8007eb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a3a:	f000 fdb5 	bl	80085a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3738      	adds	r7, #56	@ 0x38
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	e000ed04 	.word	0xe000ed04

08007a4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b090      	sub	sp, #64	@ 0x40
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
 8007a58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10b      	bne.n	8007a7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a76:	bf00      	nop
 8007a78:	bf00      	nop
 8007a7a:	e7fd      	b.n	8007a78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d103      	bne.n	8007a8a <xQueueGenericSendFromISR+0x3e>
 8007a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <xQueueGenericSendFromISR+0x42>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e000      	b.n	8007a90 <xQueueGenericSendFromISR+0x44>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10b      	bne.n	8007aac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007aa6:	bf00      	nop
 8007aa8:	bf00      	nop
 8007aaa:	e7fd      	b.n	8007aa8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d103      	bne.n	8007aba <xQueueGenericSendFromISR+0x6e>
 8007ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d101      	bne.n	8007abe <xQueueGenericSendFromISR+0x72>
 8007aba:	2301      	movs	r3, #1
 8007abc:	e000      	b.n	8007ac0 <xQueueGenericSendFromISR+0x74>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10b      	bne.n	8007adc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	623b      	str	r3, [r7, #32]
}
 8007ad6:	bf00      	nop
 8007ad8:	bf00      	nop
 8007ada:	e7fd      	b.n	8007ad8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007adc:	f001 ff94 	bl	8009a08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ae0:	f3ef 8211 	mrs	r2, BASEPRI
 8007ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	61fa      	str	r2, [r7, #28]
 8007af6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007af8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007afa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007afe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d302      	bcc.n	8007b0e <xQueueGenericSendFromISR+0xc2>
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d12f      	bne.n	8007b6e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b1e:	683a      	ldr	r2, [r7, #0]
 8007b20:	68b9      	ldr	r1, [r7, #8]
 8007b22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007b24:	f000 f936 	bl	8007d94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b28:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b30:	d112      	bne.n	8007b58 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d016      	beq.n	8007b68 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3c:	3324      	adds	r3, #36	@ 0x24
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 ff52 	bl	80089e8 <xTaskRemoveFromEventList>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00e      	beq.n	8007b68 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00b      	beq.n	8007b68 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	601a      	str	r2, [r3, #0]
 8007b56:	e007      	b.n	8007b68 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	b25a      	sxtb	r2, r3
 8007b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007b6c:	e001      	b.n	8007b72 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b74:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3740      	adds	r7, #64	@ 0x40
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b08c      	sub	sp, #48	@ 0x30
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b94:	2300      	movs	r3, #0
 8007b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10b      	bne.n	8007bba <xQueueReceive+0x32>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	623b      	str	r3, [r7, #32]
}
 8007bb4:	bf00      	nop
 8007bb6:	bf00      	nop
 8007bb8:	e7fd      	b.n	8007bb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d103      	bne.n	8007bc8 <xQueueReceive+0x40>
 8007bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <xQueueReceive+0x44>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e000      	b.n	8007bce <xQueueReceive+0x46>
 8007bcc:	2300      	movs	r3, #0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10b      	bne.n	8007bea <xQueueReceive+0x62>
	__asm volatile
 8007bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	61fb      	str	r3, [r7, #28]
}
 8007be4:	bf00      	nop
 8007be6:	bf00      	nop
 8007be8:	e7fd      	b.n	8007be6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bea:	f001 f8c3 	bl	8008d74 <xTaskGetSchedulerState>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d102      	bne.n	8007bfa <xQueueReceive+0x72>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <xQueueReceive+0x76>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e000      	b.n	8007c00 <xQueueReceive+0x78>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10b      	bne.n	8007c1c <xQueueReceive+0x94>
	__asm volatile
 8007c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	61bb      	str	r3, [r7, #24]
}
 8007c16:	bf00      	nop
 8007c18:	bf00      	nop
 8007c1a:	e7fd      	b.n	8007c18 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c1c:	f001 fe14 	bl	8009848 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c24:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01f      	beq.n	8007c6c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c2c:	68b9      	ldr	r1, [r7, #8]
 8007c2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c30:	f000 f91a 	bl	8007e68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c36:	1e5a      	subs	r2, r3, #1
 8007c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00f      	beq.n	8007c64 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c46:	3310      	adds	r3, #16
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 fecd 	bl	80089e8 <xTaskRemoveFromEventList>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d007      	beq.n	8007c64 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c54:	4b3c      	ldr	r3, [pc, #240]	@ (8007d48 <xQueueReceive+0x1c0>)
 8007c56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c5a:	601a      	str	r2, [r3, #0]
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c64:	f001 fe22 	bl	80098ac <vPortExitCritical>
				return pdPASS;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e069      	b.n	8007d40 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d103      	bne.n	8007c7a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c72:	f001 fe1b 	bl	80098ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c76:	2300      	movs	r3, #0
 8007c78:	e062      	b.n	8007d40 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d106      	bne.n	8007c8e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c80:	f107 0310 	add.w	r3, r7, #16
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 ff13 	bl	8008ab0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c8e:	f001 fe0d 	bl	80098ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c92:	f000 fc7b 	bl	800858c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c96:	f001 fdd7 	bl	8009848 <vPortEnterCritical>
 8007c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ca0:	b25b      	sxtb	r3, r3
 8007ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca6:	d103      	bne.n	8007cb0 <xQueueReceive+0x128>
 8007ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cb6:	b25b      	sxtb	r3, r3
 8007cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbc:	d103      	bne.n	8007cc6 <xQueueReceive+0x13e>
 8007cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cc6:	f001 fdf1 	bl	80098ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cca:	1d3a      	adds	r2, r7, #4
 8007ccc:	f107 0310 	add.w	r3, r7, #16
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 ff02 	bl	8008adc <xTaskCheckForTimeOut>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d123      	bne.n	8007d26 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ce0:	f000 f93a 	bl	8007f58 <prvIsQueueEmpty>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d017      	beq.n	8007d1a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cec:	3324      	adds	r3, #36	@ 0x24
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 fe26 	bl	8008944 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cfa:	f000 f8db 	bl	8007eb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cfe:	f000 fc53 	bl	80085a8 <xTaskResumeAll>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d189      	bne.n	8007c1c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007d08:	4b0f      	ldr	r3, [pc, #60]	@ (8007d48 <xQueueReceive+0x1c0>)
 8007d0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	e780      	b.n	8007c1c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d1c:	f000 f8ca 	bl	8007eb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d20:	f000 fc42 	bl	80085a8 <xTaskResumeAll>
 8007d24:	e77a      	b.n	8007c1c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d28:	f000 f8c4 	bl	8007eb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d2c:	f000 fc3c 	bl	80085a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d32:	f000 f911 	bl	8007f58 <prvIsQueueEmpty>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f43f af6f 	beq.w	8007c1c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3730      	adds	r7, #48	@ 0x30
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	e000ed04 	.word	0xe000ed04

08007d4c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10b      	bne.n	8007d76 <vQueueDelete+0x2a>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	60bb      	str	r3, [r7, #8]
}
 8007d70:	bf00      	nop
 8007d72:	bf00      	nop
 8007d74:	e7fd      	b.n	8007d72 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 f946 	bl	8008008 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d102      	bne.n	8007d8c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f001 ff4e 	bl	8009c28 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007d8c:	bf00      	nop
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007da0:	2300      	movs	r3, #0
 8007da2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10d      	bne.n	8007dce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d14d      	bne.n	8007e56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 fff6 	bl	8008db0 <xTaskPriorityDisinherit>
 8007dc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	609a      	str	r2, [r3, #8]
 8007dcc:	e043      	b.n	8007e56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d119      	bne.n	8007e08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6858      	ldr	r0, [r3, #4]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ddc:	461a      	mov	r2, r3
 8007dde:	68b9      	ldr	r1, [r7, #8]
 8007de0:	f002 f8c6 	bl	8009f70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dec:	441a      	add	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d32b      	bcc.n	8007e56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	605a      	str	r2, [r3, #4]
 8007e06:	e026      	b.n	8007e56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	68d8      	ldr	r0, [r3, #12]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e10:	461a      	mov	r2, r3
 8007e12:	68b9      	ldr	r1, [r7, #8]
 8007e14:	f002 f8ac 	bl	8009f70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	68da      	ldr	r2, [r3, #12]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e20:	425b      	negs	r3, r3
 8007e22:	441a      	add	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	68da      	ldr	r2, [r3, #12]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d207      	bcs.n	8007e44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	689a      	ldr	r2, [r3, #8]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e3c:	425b      	negs	r3, r3
 8007e3e:	441a      	add	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d105      	bne.n	8007e56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d002      	beq.n	8007e56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	3b01      	subs	r3, #1
 8007e54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007e5e:	697b      	ldr	r3, [r7, #20]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3718      	adds	r7, #24
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d018      	beq.n	8007eac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68da      	ldr	r2, [r3, #12]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e82:	441a      	add	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68da      	ldr	r2, [r3, #12]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d303      	bcc.n	8007e9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68d9      	ldr	r1, [r3, #12]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	6838      	ldr	r0, [r7, #0]
 8007ea8:	f002 f862 	bl	8009f70 <memcpy>
	}
}
 8007eac:	bf00      	nop
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ebc:	f001 fcc4 	bl	8009848 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ec6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ec8:	e011      	b.n	8007eee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d012      	beq.n	8007ef8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	3324      	adds	r3, #36	@ 0x24
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 fd86 	bl	80089e8 <xTaskRemoveFromEventList>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007ee2:	f000 fe5f 	bl	8008ba4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	dce9      	bgt.n	8007eca <prvUnlockQueue+0x16>
 8007ef6:	e000      	b.n	8007efa <prvUnlockQueue+0x46>
					break;
 8007ef8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	22ff      	movs	r2, #255	@ 0xff
 8007efe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007f02:	f001 fcd3 	bl	80098ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f06:	f001 fc9f 	bl	8009848 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f12:	e011      	b.n	8007f38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d012      	beq.n	8007f42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3310      	adds	r3, #16
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 fd61 	bl	80089e8 <xTaskRemoveFromEventList>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f2c:	f000 fe3a 	bl	8008ba4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	dce9      	bgt.n	8007f14 <prvUnlockQueue+0x60>
 8007f40:	e000      	b.n	8007f44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	22ff      	movs	r2, #255	@ 0xff
 8007f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007f4c:	f001 fcae 	bl	80098ac <vPortExitCritical>
}
 8007f50:	bf00      	nop
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f60:	f001 fc72 	bl	8009848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d102      	bne.n	8007f72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	e001      	b.n	8007f76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f72:	2300      	movs	r3, #0
 8007f74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f76:	f001 fc99 	bl	80098ac <vPortExitCritical>

	return xReturn;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f8c:	f001 fc5c 	bl	8009848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d102      	bne.n	8007fa2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	e001      	b.n	8007fa6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fa6:	f001 fc81 	bl	80098ac <vPortExitCritical>

	return xReturn;
 8007faa:	68fb      	ldr	r3, [r7, #12]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	e014      	b.n	8007fee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007fc4:	4a0f      	ldr	r2, [pc, #60]	@ (8008004 <vQueueAddToRegistry+0x50>)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10b      	bne.n	8007fe8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007fd0:	490c      	ldr	r1, [pc, #48]	@ (8008004 <vQueueAddToRegistry+0x50>)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007fda:	4a0a      	ldr	r2, [pc, #40]	@ (8008004 <vQueueAddToRegistry+0x50>)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	00db      	lsls	r3, r3, #3
 8007fe0:	4413      	add	r3, r2
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007fe6:	e006      	b.n	8007ff6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	3301      	adds	r3, #1
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2b07      	cmp	r3, #7
 8007ff2:	d9e7      	bls.n	8007fc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ff4:	bf00      	nop
 8007ff6:	bf00      	nop
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	200009f8 	.word	0x200009f8

08008008 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008010:	2300      	movs	r3, #0
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	e016      	b.n	8008044 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008016:	4a10      	ldr	r2, [pc, #64]	@ (8008058 <vQueueUnregisterQueue+0x50>)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	4413      	add	r3, r2
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	429a      	cmp	r2, r3
 8008024:	d10b      	bne.n	800803e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008026:	4a0c      	ldr	r2, [pc, #48]	@ (8008058 <vQueueUnregisterQueue+0x50>)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2100      	movs	r1, #0
 800802c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008030:	4a09      	ldr	r2, [pc, #36]	@ (8008058 <vQueueUnregisterQueue+0x50>)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	00db      	lsls	r3, r3, #3
 8008036:	4413      	add	r3, r2
 8008038:	2200      	movs	r2, #0
 800803a:	605a      	str	r2, [r3, #4]
				break;
 800803c:	e006      	b.n	800804c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3301      	adds	r3, #1
 8008042:	60fb      	str	r3, [r7, #12]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2b07      	cmp	r3, #7
 8008048:	d9e5      	bls.n	8008016 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800804a:	bf00      	nop
 800804c:	bf00      	nop
 800804e:	3714      	adds	r7, #20
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	200009f8 	.word	0x200009f8

0800805c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800806c:	f001 fbec 	bl	8009848 <vPortEnterCritical>
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008076:	b25b      	sxtb	r3, r3
 8008078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807c:	d103      	bne.n	8008086 <vQueueWaitForMessageRestricted+0x2a>
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800808c:	b25b      	sxtb	r3, r3
 800808e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008092:	d103      	bne.n	800809c <vQueueWaitForMessageRestricted+0x40>
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800809c:	f001 fc06 	bl	80098ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d106      	bne.n	80080b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	3324      	adds	r3, #36	@ 0x24
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	68b9      	ldr	r1, [r7, #8]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 fc6d 	bl	8008990 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80080b6:	6978      	ldr	r0, [r7, #20]
 80080b8:	f7ff fefc 	bl	8007eb4 <prvUnlockQueue>
	}
 80080bc:	bf00      	nop
 80080be:	3718      	adds	r7, #24
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b08e      	sub	sp, #56	@ 0x38
 80080c8:	af04      	add	r7, sp, #16
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
 80080d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10b      	bne.n	80080f0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	623b      	str	r3, [r7, #32]
}
 80080ea:	bf00      	nop
 80080ec:	bf00      	nop
 80080ee:	e7fd      	b.n	80080ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80080f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10b      	bne.n	800810e <xTaskCreateStatic+0x4a>
	__asm volatile
 80080f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	61fb      	str	r3, [r7, #28]
}
 8008108:	bf00      	nop
 800810a:	bf00      	nop
 800810c:	e7fd      	b.n	800810a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800810e:	23a8      	movs	r3, #168	@ 0xa8
 8008110:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	2ba8      	cmp	r3, #168	@ 0xa8
 8008116:	d00b      	beq.n	8008130 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	61bb      	str	r3, [r7, #24]
}
 800812a:	bf00      	nop
 800812c:	bf00      	nop
 800812e:	e7fd      	b.n	800812c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008130:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008134:	2b00      	cmp	r3, #0
 8008136:	d01e      	beq.n	8008176 <xTaskCreateStatic+0xb2>
 8008138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800813a:	2b00      	cmp	r3, #0
 800813c:	d01b      	beq.n	8008176 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800813e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008140:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008144:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008146:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814a:	2202      	movs	r2, #2
 800814c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008150:	2300      	movs	r3, #0
 8008152:	9303      	str	r3, [sp, #12]
 8008154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008156:	9302      	str	r3, [sp, #8]
 8008158:	f107 0314 	add.w	r3, r7, #20
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	68b9      	ldr	r1, [r7, #8]
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 f851 	bl	8008210 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800816e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008170:	f000 f8f6 	bl	8008360 <prvAddNewTaskToReadyList>
 8008174:	e001      	b.n	800817a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008176:	2300      	movs	r3, #0
 8008178:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800817a:	697b      	ldr	r3, [r7, #20]
	}
 800817c:	4618      	mov	r0, r3
 800817e:	3728      	adds	r7, #40	@ 0x28
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008184:	b580      	push	{r7, lr}
 8008186:	b08c      	sub	sp, #48	@ 0x30
 8008188:	af04      	add	r7, sp, #16
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	603b      	str	r3, [r7, #0]
 8008190:	4613      	mov	r3, r2
 8008192:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008194:	88fb      	ldrh	r3, [r7, #6]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4618      	mov	r0, r3
 800819a:	f001 fc77 	bl	8009a8c <pvPortMalloc>
 800819e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00e      	beq.n	80081c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80081a6:	20a8      	movs	r0, #168	@ 0xa8
 80081a8:	f001 fc70 	bl	8009a8c <pvPortMalloc>
 80081ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80081ba:	e005      	b.n	80081c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081bc:	6978      	ldr	r0, [r7, #20]
 80081be:	f001 fd33 	bl	8009c28 <vPortFree>
 80081c2:	e001      	b.n	80081c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081c4:	2300      	movs	r3, #0
 80081c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d017      	beq.n	80081fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081d6:	88fa      	ldrh	r2, [r7, #6]
 80081d8:	2300      	movs	r3, #0
 80081da:	9303      	str	r3, [sp, #12]
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	9302      	str	r3, [sp, #8]
 80081e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e2:	9301      	str	r3, [sp, #4]
 80081e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	68b9      	ldr	r1, [r7, #8]
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 f80f 	bl	8008210 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081f2:	69f8      	ldr	r0, [r7, #28]
 80081f4:	f000 f8b4 	bl	8008360 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081f8:	2301      	movs	r3, #1
 80081fa:	61bb      	str	r3, [r7, #24]
 80081fc:	e002      	b.n	8008204 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008202:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008204:	69bb      	ldr	r3, [r7, #24]
	}
 8008206:	4618      	mov	r0, r3
 8008208:	3720      	adds	r7, #32
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b088      	sub	sp, #32
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800821e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008220:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	461a      	mov	r2, r3
 8008228:	21a5      	movs	r1, #165	@ 0xa5
 800822a:	f001 fe1d 	bl	8009e68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800822e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008230:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008238:	3b01      	subs	r3, #1
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	f023 0307 	bic.w	r3, r3, #7
 8008246:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	f003 0307 	and.w	r3, r3, #7
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00b      	beq.n	800826a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	617b      	str	r3, [r7, #20]
}
 8008264:	bf00      	nop
 8008266:	bf00      	nop
 8008268:	e7fd      	b.n	8008266 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d01f      	beq.n	80082b0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008270:	2300      	movs	r3, #0
 8008272:	61fb      	str	r3, [r7, #28]
 8008274:	e012      	b.n	800829c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	4413      	add	r3, r2
 800827c:	7819      	ldrb	r1, [r3, #0]
 800827e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	4413      	add	r3, r2
 8008284:	3334      	adds	r3, #52	@ 0x34
 8008286:	460a      	mov	r2, r1
 8008288:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	4413      	add	r3, r2
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d006      	beq.n	80082a4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	3301      	adds	r3, #1
 800829a:	61fb      	str	r3, [r7, #28]
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	2b0f      	cmp	r3, #15
 80082a0:	d9e9      	bls.n	8008276 <prvInitialiseNewTask+0x66>
 80082a2:	e000      	b.n	80082a6 <prvInitialiseNewTask+0x96>
			{
				break;
 80082a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80082a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80082ae:	e003      	b.n	80082b8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ba:	2b37      	cmp	r3, #55	@ 0x37
 80082bc:	d901      	bls.n	80082c2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80082be:	2337      	movs	r3, #55	@ 0x37
 80082c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80082c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80082c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082cc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80082ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d0:	2200      	movs	r2, #0
 80082d2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d6:	3304      	adds	r3, #4
 80082d8:	4618      	mov	r0, r3
 80082da:	f7ff f86d 	bl	80073b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e0:	3318      	adds	r3, #24
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7ff f868 	bl	80073b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80082f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082fc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80082fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008300:	2200      	movs	r2, #0
 8008302:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008308:	2200      	movs	r2, #0
 800830a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800830e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008310:	3354      	adds	r3, #84	@ 0x54
 8008312:	224c      	movs	r2, #76	@ 0x4c
 8008314:	2100      	movs	r1, #0
 8008316:	4618      	mov	r0, r3
 8008318:	f001 fda6 	bl	8009e68 <memset>
 800831c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831e:	4a0d      	ldr	r2, [pc, #52]	@ (8008354 <prvInitialiseNewTask+0x144>)
 8008320:	659a      	str	r2, [r3, #88]	@ 0x58
 8008322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008324:	4a0c      	ldr	r2, [pc, #48]	@ (8008358 <prvInitialiseNewTask+0x148>)
 8008326:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832a:	4a0c      	ldr	r2, [pc, #48]	@ (800835c <prvInitialiseNewTask+0x14c>)
 800832c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800832e:	683a      	ldr	r2, [r7, #0]
 8008330:	68f9      	ldr	r1, [r7, #12]
 8008332:	69b8      	ldr	r0, [r7, #24]
 8008334:	f001 f95a 	bl	80095ec <pxPortInitialiseStack>
 8008338:	4602      	mov	r2, r0
 800833a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800833e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008340:	2b00      	cmp	r3, #0
 8008342:	d002      	beq.n	800834a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008348:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800834a:	bf00      	nop
 800834c:	3720      	adds	r7, #32
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	20001c44 	.word	0x20001c44
 8008358:	20001cac 	.word	0x20001cac
 800835c:	20001d14 	.word	0x20001d14

08008360 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008368:	f001 fa6e 	bl	8009848 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800836c:	4b2d      	ldr	r3, [pc, #180]	@ (8008424 <prvAddNewTaskToReadyList+0xc4>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	3301      	adds	r3, #1
 8008372:	4a2c      	ldr	r2, [pc, #176]	@ (8008424 <prvAddNewTaskToReadyList+0xc4>)
 8008374:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008376:	4b2c      	ldr	r3, [pc, #176]	@ (8008428 <prvAddNewTaskToReadyList+0xc8>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d109      	bne.n	8008392 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800837e:	4a2a      	ldr	r2, [pc, #168]	@ (8008428 <prvAddNewTaskToReadyList+0xc8>)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008384:	4b27      	ldr	r3, [pc, #156]	@ (8008424 <prvAddNewTaskToReadyList+0xc4>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d110      	bne.n	80083ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800838c:	f000 fc2e 	bl	8008bec <prvInitialiseTaskLists>
 8008390:	e00d      	b.n	80083ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008392:	4b26      	ldr	r3, [pc, #152]	@ (800842c <prvAddNewTaskToReadyList+0xcc>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d109      	bne.n	80083ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800839a:	4b23      	ldr	r3, [pc, #140]	@ (8008428 <prvAddNewTaskToReadyList+0xc8>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d802      	bhi.n	80083ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80083a8:	4a1f      	ldr	r2, [pc, #124]	@ (8008428 <prvAddNewTaskToReadyList+0xc8>)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80083ae:	4b20      	ldr	r3, [pc, #128]	@ (8008430 <prvAddNewTaskToReadyList+0xd0>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	3301      	adds	r3, #1
 80083b4:	4a1e      	ldr	r2, [pc, #120]	@ (8008430 <prvAddNewTaskToReadyList+0xd0>)
 80083b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80083b8:	4b1d      	ldr	r3, [pc, #116]	@ (8008430 <prvAddNewTaskToReadyList+0xd0>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c4:	4b1b      	ldr	r3, [pc, #108]	@ (8008434 <prvAddNewTaskToReadyList+0xd4>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d903      	bls.n	80083d4 <prvAddNewTaskToReadyList+0x74>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d0:	4a18      	ldr	r2, [pc, #96]	@ (8008434 <prvAddNewTaskToReadyList+0xd4>)
 80083d2:	6013      	str	r3, [r2, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083d8:	4613      	mov	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4413      	add	r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4a15      	ldr	r2, [pc, #84]	@ (8008438 <prvAddNewTaskToReadyList+0xd8>)
 80083e2:	441a      	add	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	3304      	adds	r3, #4
 80083e8:	4619      	mov	r1, r3
 80083ea:	4610      	mov	r0, r2
 80083ec:	f7fe fff1 	bl	80073d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083f0:	f001 fa5c 	bl	80098ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80083f4:	4b0d      	ldr	r3, [pc, #52]	@ (800842c <prvAddNewTaskToReadyList+0xcc>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00e      	beq.n	800841a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008428 <prvAddNewTaskToReadyList+0xc8>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008406:	429a      	cmp	r2, r3
 8008408:	d207      	bcs.n	800841a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800840a:	4b0c      	ldr	r3, [pc, #48]	@ (800843c <prvAddNewTaskToReadyList+0xdc>)
 800840c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800841a:	bf00      	nop
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	20000f0c 	.word	0x20000f0c
 8008428:	20000a38 	.word	0x20000a38
 800842c:	20000f18 	.word	0x20000f18
 8008430:	20000f28 	.word	0x20000f28
 8008434:	20000f14 	.word	0x20000f14
 8008438:	20000a3c 	.word	0x20000a3c
 800843c:	e000ed04 	.word	0xe000ed04

08008440 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008448:	2300      	movs	r3, #0
 800844a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d018      	beq.n	8008484 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008452:	4b14      	ldr	r3, [pc, #80]	@ (80084a4 <vTaskDelay+0x64>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00b      	beq.n	8008472 <vTaskDelay+0x32>
	__asm volatile
 800845a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	60bb      	str	r3, [r7, #8]
}
 800846c:	bf00      	nop
 800846e:	bf00      	nop
 8008470:	e7fd      	b.n	800846e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008472:	f000 f88b 	bl	800858c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008476:	2100      	movs	r1, #0
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fd09 	bl	8008e90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800847e:	f000 f893 	bl	80085a8 <xTaskResumeAll>
 8008482:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d107      	bne.n	800849a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800848a:	4b07      	ldr	r3, [pc, #28]	@ (80084a8 <vTaskDelay+0x68>)
 800848c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800849a:	bf00      	nop
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20000f34 	.word	0x20000f34
 80084a8:	e000ed04 	.word	0xe000ed04

080084ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b08a      	sub	sp, #40	@ 0x28
 80084b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80084b2:	2300      	movs	r3, #0
 80084b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80084b6:	2300      	movs	r3, #0
 80084b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80084ba:	463a      	mov	r2, r7
 80084bc:	1d39      	adds	r1, r7, #4
 80084be:	f107 0308 	add.w	r3, r7, #8
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fe ff24 	bl	8007310 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	9202      	str	r2, [sp, #8]
 80084d0:	9301      	str	r3, [sp, #4]
 80084d2:	2300      	movs	r3, #0
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	2300      	movs	r3, #0
 80084d8:	460a      	mov	r2, r1
 80084da:	4924      	ldr	r1, [pc, #144]	@ (800856c <vTaskStartScheduler+0xc0>)
 80084dc:	4824      	ldr	r0, [pc, #144]	@ (8008570 <vTaskStartScheduler+0xc4>)
 80084de:	f7ff fdf1 	bl	80080c4 <xTaskCreateStatic>
 80084e2:	4603      	mov	r3, r0
 80084e4:	4a23      	ldr	r2, [pc, #140]	@ (8008574 <vTaskStartScheduler+0xc8>)
 80084e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084e8:	4b22      	ldr	r3, [pc, #136]	@ (8008574 <vTaskStartScheduler+0xc8>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d002      	beq.n	80084f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80084f0:	2301      	movs	r3, #1
 80084f2:	617b      	str	r3, [r7, #20]
 80084f4:	e001      	b.n	80084fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80084f6:	2300      	movs	r3, #0
 80084f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d102      	bne.n	8008506 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008500:	f000 fd1a 	bl	8008f38 <xTimerCreateTimerTask>
 8008504:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d11b      	bne.n	8008544 <vTaskStartScheduler+0x98>
	__asm volatile
 800850c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008510:	f383 8811 	msr	BASEPRI, r3
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	613b      	str	r3, [r7, #16]
}
 800851e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008520:	4b15      	ldr	r3, [pc, #84]	@ (8008578 <vTaskStartScheduler+0xcc>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3354      	adds	r3, #84	@ 0x54
 8008526:	4a15      	ldr	r2, [pc, #84]	@ (800857c <vTaskStartScheduler+0xd0>)
 8008528:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800852a:	4b15      	ldr	r3, [pc, #84]	@ (8008580 <vTaskStartScheduler+0xd4>)
 800852c:	f04f 32ff 	mov.w	r2, #4294967295
 8008530:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008532:	4b14      	ldr	r3, [pc, #80]	@ (8008584 <vTaskStartScheduler+0xd8>)
 8008534:	2201      	movs	r2, #1
 8008536:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008538:	4b13      	ldr	r3, [pc, #76]	@ (8008588 <vTaskStartScheduler+0xdc>)
 800853a:	2200      	movs	r2, #0
 800853c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800853e:	f001 f8df 	bl	8009700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008542:	e00f      	b.n	8008564 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854a:	d10b      	bne.n	8008564 <vTaskStartScheduler+0xb8>
	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	60fb      	str	r3, [r7, #12]
}
 800855e:	bf00      	nop
 8008560:	bf00      	nop
 8008562:	e7fd      	b.n	8008560 <vTaskStartScheduler+0xb4>
}
 8008564:	bf00      	nop
 8008566:	3718      	adds	r7, #24
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	0800a098 	.word	0x0800a098
 8008570:	08008bbd 	.word	0x08008bbd
 8008574:	20000f30 	.word	0x20000f30
 8008578:	20000a38 	.word	0x20000a38
 800857c:	20000014 	.word	0x20000014
 8008580:	20000f2c 	.word	0x20000f2c
 8008584:	20000f18 	.word	0x20000f18
 8008588:	20000f10 	.word	0x20000f10

0800858c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800858c:	b480      	push	{r7}
 800858e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008590:	4b04      	ldr	r3, [pc, #16]	@ (80085a4 <vTaskSuspendAll+0x18>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3301      	adds	r3, #1
 8008596:	4a03      	ldr	r2, [pc, #12]	@ (80085a4 <vTaskSuspendAll+0x18>)
 8008598:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800859a:	bf00      	nop
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr
 80085a4:	20000f34 	.word	0x20000f34

080085a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80085ae:	2300      	movs	r3, #0
 80085b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80085b2:	2300      	movs	r3, #0
 80085b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80085b6:	4b42      	ldr	r3, [pc, #264]	@ (80086c0 <xTaskResumeAll+0x118>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10b      	bne.n	80085d6 <xTaskResumeAll+0x2e>
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	603b      	str	r3, [r7, #0]
}
 80085d0:	bf00      	nop
 80085d2:	bf00      	nop
 80085d4:	e7fd      	b.n	80085d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085d6:	f001 f937 	bl	8009848 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80085da:	4b39      	ldr	r3, [pc, #228]	@ (80086c0 <xTaskResumeAll+0x118>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3b01      	subs	r3, #1
 80085e0:	4a37      	ldr	r2, [pc, #220]	@ (80086c0 <xTaskResumeAll+0x118>)
 80085e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085e4:	4b36      	ldr	r3, [pc, #216]	@ (80086c0 <xTaskResumeAll+0x118>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d162      	bne.n	80086b2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085ec:	4b35      	ldr	r3, [pc, #212]	@ (80086c4 <xTaskResumeAll+0x11c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d05e      	beq.n	80086b2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085f4:	e02f      	b.n	8008656 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085f6:	4b34      	ldr	r3, [pc, #208]	@ (80086c8 <xTaskResumeAll+0x120>)
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3318      	adds	r3, #24
 8008602:	4618      	mov	r0, r3
 8008604:	f7fe ff42 	bl	800748c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	3304      	adds	r3, #4
 800860c:	4618      	mov	r0, r3
 800860e:	f7fe ff3d 	bl	800748c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008616:	4b2d      	ldr	r3, [pc, #180]	@ (80086cc <xTaskResumeAll+0x124>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	429a      	cmp	r2, r3
 800861c:	d903      	bls.n	8008626 <xTaskResumeAll+0x7e>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008622:	4a2a      	ldr	r2, [pc, #168]	@ (80086cc <xTaskResumeAll+0x124>)
 8008624:	6013      	str	r3, [r2, #0]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800862a:	4613      	mov	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4413      	add	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4a27      	ldr	r2, [pc, #156]	@ (80086d0 <xTaskResumeAll+0x128>)
 8008634:	441a      	add	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3304      	adds	r3, #4
 800863a:	4619      	mov	r1, r3
 800863c:	4610      	mov	r0, r2
 800863e:	f7fe fec8 	bl	80073d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008646:	4b23      	ldr	r3, [pc, #140]	@ (80086d4 <xTaskResumeAll+0x12c>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800864c:	429a      	cmp	r2, r3
 800864e:	d302      	bcc.n	8008656 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008650:	4b21      	ldr	r3, [pc, #132]	@ (80086d8 <xTaskResumeAll+0x130>)
 8008652:	2201      	movs	r2, #1
 8008654:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008656:	4b1c      	ldr	r3, [pc, #112]	@ (80086c8 <xTaskResumeAll+0x120>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1cb      	bne.n	80085f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008664:	f000 fb66 	bl	8008d34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008668:	4b1c      	ldr	r3, [pc, #112]	@ (80086dc <xTaskResumeAll+0x134>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d010      	beq.n	8008696 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008674:	f000 f846 	bl	8008704 <xTaskIncrementTick>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d002      	beq.n	8008684 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800867e:	4b16      	ldr	r3, [pc, #88]	@ (80086d8 <xTaskResumeAll+0x130>)
 8008680:	2201      	movs	r2, #1
 8008682:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	3b01      	subs	r3, #1
 8008688:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1f1      	bne.n	8008674 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008690:	4b12      	ldr	r3, [pc, #72]	@ (80086dc <xTaskResumeAll+0x134>)
 8008692:	2200      	movs	r2, #0
 8008694:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008696:	4b10      	ldr	r3, [pc, #64]	@ (80086d8 <xTaskResumeAll+0x130>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d009      	beq.n	80086b2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800869e:	2301      	movs	r3, #1
 80086a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80086a2:	4b0f      	ldr	r3, [pc, #60]	@ (80086e0 <xTaskResumeAll+0x138>)
 80086a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086a8:	601a      	str	r2, [r3, #0]
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086b2:	f001 f8fb 	bl	80098ac <vPortExitCritical>

	return xAlreadyYielded;
 80086b6:	68bb      	ldr	r3, [r7, #8]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	20000f34 	.word	0x20000f34
 80086c4:	20000f0c 	.word	0x20000f0c
 80086c8:	20000ecc 	.word	0x20000ecc
 80086cc:	20000f14 	.word	0x20000f14
 80086d0:	20000a3c 	.word	0x20000a3c
 80086d4:	20000a38 	.word	0x20000a38
 80086d8:	20000f20 	.word	0x20000f20
 80086dc:	20000f1c 	.word	0x20000f1c
 80086e0:	e000ed04 	.word	0xe000ed04

080086e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086ea:	4b05      	ldr	r3, [pc, #20]	@ (8008700 <xTaskGetTickCount+0x1c>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086f0:	687b      	ldr	r3, [r7, #4]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	20000f10 	.word	0x20000f10

08008704 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800870a:	2300      	movs	r3, #0
 800870c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800870e:	4b4f      	ldr	r3, [pc, #316]	@ (800884c <xTaskIncrementTick+0x148>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	f040 8090 	bne.w	8008838 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008718:	4b4d      	ldr	r3, [pc, #308]	@ (8008850 <xTaskIncrementTick+0x14c>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3301      	adds	r3, #1
 800871e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008720:	4a4b      	ldr	r2, [pc, #300]	@ (8008850 <xTaskIncrementTick+0x14c>)
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d121      	bne.n	8008770 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800872c:	4b49      	ldr	r3, [pc, #292]	@ (8008854 <xTaskIncrementTick+0x150>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00b      	beq.n	800874e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	603b      	str	r3, [r7, #0]
}
 8008748:	bf00      	nop
 800874a:	bf00      	nop
 800874c:	e7fd      	b.n	800874a <xTaskIncrementTick+0x46>
 800874e:	4b41      	ldr	r3, [pc, #260]	@ (8008854 <xTaskIncrementTick+0x150>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	60fb      	str	r3, [r7, #12]
 8008754:	4b40      	ldr	r3, [pc, #256]	@ (8008858 <xTaskIncrementTick+0x154>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a3e      	ldr	r2, [pc, #248]	@ (8008854 <xTaskIncrementTick+0x150>)
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	4a3e      	ldr	r2, [pc, #248]	@ (8008858 <xTaskIncrementTick+0x154>)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6013      	str	r3, [r2, #0]
 8008762:	4b3e      	ldr	r3, [pc, #248]	@ (800885c <xTaskIncrementTick+0x158>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	3301      	adds	r3, #1
 8008768:	4a3c      	ldr	r2, [pc, #240]	@ (800885c <xTaskIncrementTick+0x158>)
 800876a:	6013      	str	r3, [r2, #0]
 800876c:	f000 fae2 	bl	8008d34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008770:	4b3b      	ldr	r3, [pc, #236]	@ (8008860 <xTaskIncrementTick+0x15c>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	429a      	cmp	r2, r3
 8008778:	d349      	bcc.n	800880e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800877a:	4b36      	ldr	r3, [pc, #216]	@ (8008854 <xTaskIncrementTick+0x150>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d104      	bne.n	800878e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008784:	4b36      	ldr	r3, [pc, #216]	@ (8008860 <xTaskIncrementTick+0x15c>)
 8008786:	f04f 32ff 	mov.w	r2, #4294967295
 800878a:	601a      	str	r2, [r3, #0]
					break;
 800878c:	e03f      	b.n	800880e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800878e:	4b31      	ldr	r3, [pc, #196]	@ (8008854 <xTaskIncrementTick+0x150>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d203      	bcs.n	80087ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80087a6:	4a2e      	ldr	r2, [pc, #184]	@ (8008860 <xTaskIncrementTick+0x15c>)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087ac:	e02f      	b.n	800880e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	3304      	adds	r3, #4
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fe fe6a 	bl	800748c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d004      	beq.n	80087ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	3318      	adds	r3, #24
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fe fe61 	bl	800748c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ce:	4b25      	ldr	r3, [pc, #148]	@ (8008864 <xTaskIncrementTick+0x160>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d903      	bls.n	80087de <xTaskIncrementTick+0xda>
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087da:	4a22      	ldr	r2, [pc, #136]	@ (8008864 <xTaskIncrementTick+0x160>)
 80087dc:	6013      	str	r3, [r2, #0]
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087e2:	4613      	mov	r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4a1f      	ldr	r2, [pc, #124]	@ (8008868 <xTaskIncrementTick+0x164>)
 80087ec:	441a      	add	r2, r3
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	3304      	adds	r3, #4
 80087f2:	4619      	mov	r1, r3
 80087f4:	4610      	mov	r0, r2
 80087f6:	f7fe fdec 	bl	80073d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087fe:	4b1b      	ldr	r3, [pc, #108]	@ (800886c <xTaskIncrementTick+0x168>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008804:	429a      	cmp	r2, r3
 8008806:	d3b8      	bcc.n	800877a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008808:	2301      	movs	r3, #1
 800880a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800880c:	e7b5      	b.n	800877a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800880e:	4b17      	ldr	r3, [pc, #92]	@ (800886c <xTaskIncrementTick+0x168>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008814:	4914      	ldr	r1, [pc, #80]	@ (8008868 <xTaskIncrementTick+0x164>)
 8008816:	4613      	mov	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	440b      	add	r3, r1
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d901      	bls.n	800882a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008826:	2301      	movs	r3, #1
 8008828:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800882a:	4b11      	ldr	r3, [pc, #68]	@ (8008870 <xTaskIncrementTick+0x16c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d007      	beq.n	8008842 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008832:	2301      	movs	r3, #1
 8008834:	617b      	str	r3, [r7, #20]
 8008836:	e004      	b.n	8008842 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008838:	4b0e      	ldr	r3, [pc, #56]	@ (8008874 <xTaskIncrementTick+0x170>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	3301      	adds	r3, #1
 800883e:	4a0d      	ldr	r2, [pc, #52]	@ (8008874 <xTaskIncrementTick+0x170>)
 8008840:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008842:	697b      	ldr	r3, [r7, #20]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3718      	adds	r7, #24
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	20000f34 	.word	0x20000f34
 8008850:	20000f10 	.word	0x20000f10
 8008854:	20000ec4 	.word	0x20000ec4
 8008858:	20000ec8 	.word	0x20000ec8
 800885c:	20000f24 	.word	0x20000f24
 8008860:	20000f2c 	.word	0x20000f2c
 8008864:	20000f14 	.word	0x20000f14
 8008868:	20000a3c 	.word	0x20000a3c
 800886c:	20000a38 	.word	0x20000a38
 8008870:	20000f20 	.word	0x20000f20
 8008874:	20000f1c 	.word	0x20000f1c

08008878 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800887e:	4b2b      	ldr	r3, [pc, #172]	@ (800892c <vTaskSwitchContext+0xb4>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d003      	beq.n	800888e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008886:	4b2a      	ldr	r3, [pc, #168]	@ (8008930 <vTaskSwitchContext+0xb8>)
 8008888:	2201      	movs	r2, #1
 800888a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800888c:	e047      	b.n	800891e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800888e:	4b28      	ldr	r3, [pc, #160]	@ (8008930 <vTaskSwitchContext+0xb8>)
 8008890:	2200      	movs	r2, #0
 8008892:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008894:	4b27      	ldr	r3, [pc, #156]	@ (8008934 <vTaskSwitchContext+0xbc>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	60fb      	str	r3, [r7, #12]
 800889a:	e011      	b.n	80088c0 <vTaskSwitchContext+0x48>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10b      	bne.n	80088ba <vTaskSwitchContext+0x42>
	__asm volatile
 80088a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	607b      	str	r3, [r7, #4]
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop
 80088b8:	e7fd      	b.n	80088b6 <vTaskSwitchContext+0x3e>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3b01      	subs	r3, #1
 80088be:	60fb      	str	r3, [r7, #12]
 80088c0:	491d      	ldr	r1, [pc, #116]	@ (8008938 <vTaskSwitchContext+0xc0>)
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	4613      	mov	r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4413      	add	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	440b      	add	r3, r1
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d0e3      	beq.n	800889c <vTaskSwitchContext+0x24>
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	4613      	mov	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4a16      	ldr	r2, [pc, #88]	@ (8008938 <vTaskSwitchContext+0xc0>)
 80088e0:	4413      	add	r3, r2
 80088e2:	60bb      	str	r3, [r7, #8]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	685a      	ldr	r2, [r3, #4]
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	605a      	str	r2, [r3, #4]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	685a      	ldr	r2, [r3, #4]
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	3308      	adds	r3, #8
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d104      	bne.n	8008904 <vTaskSwitchContext+0x8c>
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	605a      	str	r2, [r3, #4]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	4a0c      	ldr	r2, [pc, #48]	@ (800893c <vTaskSwitchContext+0xc4>)
 800890c:	6013      	str	r3, [r2, #0]
 800890e:	4a09      	ldr	r2, [pc, #36]	@ (8008934 <vTaskSwitchContext+0xbc>)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008914:	4b09      	ldr	r3, [pc, #36]	@ (800893c <vTaskSwitchContext+0xc4>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3354      	adds	r3, #84	@ 0x54
 800891a:	4a09      	ldr	r2, [pc, #36]	@ (8008940 <vTaskSwitchContext+0xc8>)
 800891c:	6013      	str	r3, [r2, #0]
}
 800891e:	bf00      	nop
 8008920:	3714      	adds	r7, #20
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	20000f34 	.word	0x20000f34
 8008930:	20000f20 	.word	0x20000f20
 8008934:	20000f14 	.word	0x20000f14
 8008938:	20000a3c 	.word	0x20000a3c
 800893c:	20000a38 	.word	0x20000a38
 8008940:	20000014 	.word	0x20000014

08008944 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10b      	bne.n	800896c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	60fb      	str	r3, [r7, #12]
}
 8008966:	bf00      	nop
 8008968:	bf00      	nop
 800896a:	e7fd      	b.n	8008968 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800896c:	4b07      	ldr	r3, [pc, #28]	@ (800898c <vTaskPlaceOnEventList+0x48>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3318      	adds	r3, #24
 8008972:	4619      	mov	r1, r3
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7fe fd50 	bl	800741a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800897a:	2101      	movs	r1, #1
 800897c:	6838      	ldr	r0, [r7, #0]
 800897e:	f000 fa87 	bl	8008e90 <prvAddCurrentTaskToDelayedList>
}
 8008982:	bf00      	nop
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	20000a38 	.word	0x20000a38

08008990 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10b      	bne.n	80089ba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80089a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	617b      	str	r3, [r7, #20]
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop
 80089b8:	e7fd      	b.n	80089b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089ba:	4b0a      	ldr	r3, [pc, #40]	@ (80089e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3318      	adds	r3, #24
 80089c0:	4619      	mov	r1, r3
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f7fe fd05 	bl	80073d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d002      	beq.n	80089d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80089ce:	f04f 33ff 	mov.w	r3, #4294967295
 80089d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80089d4:	6879      	ldr	r1, [r7, #4]
 80089d6:	68b8      	ldr	r0, [r7, #8]
 80089d8:	f000 fa5a 	bl	8008e90 <prvAddCurrentTaskToDelayedList>
	}
 80089dc:	bf00      	nop
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	20000a38 	.word	0x20000a38

080089e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10b      	bne.n	8008a16 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	60fb      	str	r3, [r7, #12]
}
 8008a10:	bf00      	nop
 8008a12:	bf00      	nop
 8008a14:	e7fd      	b.n	8008a12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	3318      	adds	r3, #24
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fe fd36 	bl	800748c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a20:	4b1d      	ldr	r3, [pc, #116]	@ (8008a98 <xTaskRemoveFromEventList+0xb0>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d11d      	bne.n	8008a64 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7fe fd2d 	bl	800748c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a36:	4b19      	ldr	r3, [pc, #100]	@ (8008a9c <xTaskRemoveFromEventList+0xb4>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d903      	bls.n	8008a46 <xTaskRemoveFromEventList+0x5e>
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a42:	4a16      	ldr	r2, [pc, #88]	@ (8008a9c <xTaskRemoveFromEventList+0xb4>)
 8008a44:	6013      	str	r3, [r2, #0]
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4a13      	ldr	r2, [pc, #76]	@ (8008aa0 <xTaskRemoveFromEventList+0xb8>)
 8008a54:	441a      	add	r2, r3
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	3304      	adds	r3, #4
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	f7fe fcb8 	bl	80073d2 <vListInsertEnd>
 8008a62:	e005      	b.n	8008a70 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	3318      	adds	r3, #24
 8008a68:	4619      	mov	r1, r3
 8008a6a:	480e      	ldr	r0, [pc, #56]	@ (8008aa4 <xTaskRemoveFromEventList+0xbc>)
 8008a6c:	f7fe fcb1 	bl	80073d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a74:	4b0c      	ldr	r3, [pc, #48]	@ (8008aa8 <xTaskRemoveFromEventList+0xc0>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d905      	bls.n	8008a8a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a82:	4b0a      	ldr	r3, [pc, #40]	@ (8008aac <xTaskRemoveFromEventList+0xc4>)
 8008a84:	2201      	movs	r2, #1
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	e001      	b.n	8008a8e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a8e:	697b      	ldr	r3, [r7, #20]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3718      	adds	r7, #24
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	20000f34 	.word	0x20000f34
 8008a9c:	20000f14 	.word	0x20000f14
 8008aa0:	20000a3c 	.word	0x20000a3c
 8008aa4:	20000ecc 	.word	0x20000ecc
 8008aa8:	20000a38 	.word	0x20000a38
 8008aac:	20000f20 	.word	0x20000f20

08008ab0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ab8:	4b06      	ldr	r3, [pc, #24]	@ (8008ad4 <vTaskInternalSetTimeOutState+0x24>)
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ac0:	4b05      	ldr	r3, [pc, #20]	@ (8008ad8 <vTaskInternalSetTimeOutState+0x28>)
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	605a      	str	r2, [r3, #4]
}
 8008ac8:	bf00      	nop
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	20000f24 	.word	0x20000f24
 8008ad8:	20000f10 	.word	0x20000f10

08008adc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b088      	sub	sp, #32
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10b      	bne.n	8008b04 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af0:	f383 8811 	msr	BASEPRI, r3
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	613b      	str	r3, [r7, #16]
}
 8008afe:	bf00      	nop
 8008b00:	bf00      	nop
 8008b02:	e7fd      	b.n	8008b00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d10b      	bne.n	8008b22 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	60fb      	str	r3, [r7, #12]
}
 8008b1c:	bf00      	nop
 8008b1e:	bf00      	nop
 8008b20:	e7fd      	b.n	8008b1e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008b22:	f000 fe91 	bl	8009848 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b26:	4b1d      	ldr	r3, [pc, #116]	@ (8008b9c <xTaskCheckForTimeOut+0xc0>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b3e:	d102      	bne.n	8008b46 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b40:	2300      	movs	r3, #0
 8008b42:	61fb      	str	r3, [r7, #28]
 8008b44:	e023      	b.n	8008b8e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	4b15      	ldr	r3, [pc, #84]	@ (8008ba0 <xTaskCheckForTimeOut+0xc4>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d007      	beq.n	8008b62 <xTaskCheckForTimeOut+0x86>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d302      	bcc.n	8008b62 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	61fb      	str	r3, [r7, #28]
 8008b60:	e015      	b.n	8008b8e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d20b      	bcs.n	8008b84 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	1ad2      	subs	r2, r2, r3
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7ff ff99 	bl	8008ab0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	61fb      	str	r3, [r7, #28]
 8008b82:	e004      	b.n	8008b8e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	2200      	movs	r2, #0
 8008b88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b8e:	f000 fe8d 	bl	80098ac <vPortExitCritical>

	return xReturn;
 8008b92:	69fb      	ldr	r3, [r7, #28]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3720      	adds	r7, #32
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	20000f10 	.word	0x20000f10
 8008ba0:	20000f24 	.word	0x20000f24

08008ba4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ba8:	4b03      	ldr	r3, [pc, #12]	@ (8008bb8 <vTaskMissedYield+0x14>)
 8008baa:	2201      	movs	r2, #1
 8008bac:	601a      	str	r2, [r3, #0]
}
 8008bae:	bf00      	nop
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	20000f20 	.word	0x20000f20

08008bbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008bc4:	f000 f852 	bl	8008c6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bc8:	4b06      	ldr	r3, [pc, #24]	@ (8008be4 <prvIdleTask+0x28>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d9f9      	bls.n	8008bc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bd0:	4b05      	ldr	r3, [pc, #20]	@ (8008be8 <prvIdleTask+0x2c>)
 8008bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008be0:	e7f0      	b.n	8008bc4 <prvIdleTask+0x8>
 8008be2:	bf00      	nop
 8008be4:	20000a3c 	.word	0x20000a3c
 8008be8:	e000ed04 	.word	0xe000ed04

08008bec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	607b      	str	r3, [r7, #4]
 8008bf6:	e00c      	b.n	8008c12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4a12      	ldr	r2, [pc, #72]	@ (8008c4c <prvInitialiseTaskLists+0x60>)
 8008c04:	4413      	add	r3, r2
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fe fbb6 	bl	8007378 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	607b      	str	r3, [r7, #4]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2b37      	cmp	r3, #55	@ 0x37
 8008c16:	d9ef      	bls.n	8008bf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c18:	480d      	ldr	r0, [pc, #52]	@ (8008c50 <prvInitialiseTaskLists+0x64>)
 8008c1a:	f7fe fbad 	bl	8007378 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c1e:	480d      	ldr	r0, [pc, #52]	@ (8008c54 <prvInitialiseTaskLists+0x68>)
 8008c20:	f7fe fbaa 	bl	8007378 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c24:	480c      	ldr	r0, [pc, #48]	@ (8008c58 <prvInitialiseTaskLists+0x6c>)
 8008c26:	f7fe fba7 	bl	8007378 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c2a:	480c      	ldr	r0, [pc, #48]	@ (8008c5c <prvInitialiseTaskLists+0x70>)
 8008c2c:	f7fe fba4 	bl	8007378 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c30:	480b      	ldr	r0, [pc, #44]	@ (8008c60 <prvInitialiseTaskLists+0x74>)
 8008c32:	f7fe fba1 	bl	8007378 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c36:	4b0b      	ldr	r3, [pc, #44]	@ (8008c64 <prvInitialiseTaskLists+0x78>)
 8008c38:	4a05      	ldr	r2, [pc, #20]	@ (8008c50 <prvInitialiseTaskLists+0x64>)
 8008c3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c68 <prvInitialiseTaskLists+0x7c>)
 8008c3e:	4a05      	ldr	r2, [pc, #20]	@ (8008c54 <prvInitialiseTaskLists+0x68>)
 8008c40:	601a      	str	r2, [r3, #0]
}
 8008c42:	bf00      	nop
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20000a3c 	.word	0x20000a3c
 8008c50:	20000e9c 	.word	0x20000e9c
 8008c54:	20000eb0 	.word	0x20000eb0
 8008c58:	20000ecc 	.word	0x20000ecc
 8008c5c:	20000ee0 	.word	0x20000ee0
 8008c60:	20000ef8 	.word	0x20000ef8
 8008c64:	20000ec4 	.word	0x20000ec4
 8008c68:	20000ec8 	.word	0x20000ec8

08008c6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c72:	e019      	b.n	8008ca8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c74:	f000 fde8 	bl	8009848 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c78:	4b10      	ldr	r3, [pc, #64]	@ (8008cbc <prvCheckTasksWaitingTermination+0x50>)
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3304      	adds	r3, #4
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fe fc01 	bl	800748c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc0 <prvCheckTasksWaitingTermination+0x54>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	4a0b      	ldr	r2, [pc, #44]	@ (8008cc0 <prvCheckTasksWaitingTermination+0x54>)
 8008c92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c94:	4b0b      	ldr	r3, [pc, #44]	@ (8008cc4 <prvCheckTasksWaitingTermination+0x58>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8008cc4 <prvCheckTasksWaitingTermination+0x58>)
 8008c9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c9e:	f000 fe05 	bl	80098ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f810 	bl	8008cc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ca8:	4b06      	ldr	r3, [pc, #24]	@ (8008cc4 <prvCheckTasksWaitingTermination+0x58>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1e1      	bne.n	8008c74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008cb0:	bf00      	nop
 8008cb2:	bf00      	nop
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	20000ee0 	.word	0x20000ee0
 8008cc0:	20000f0c 	.word	0x20000f0c
 8008cc4:	20000ef4 	.word	0x20000ef4

08008cc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	3354      	adds	r3, #84	@ 0x54
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f001 f8cf 	bl	8009e78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d108      	bne.n	8008cf6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f000 ff9d 	bl	8009c28 <vPortFree>
				vPortFree( pxTCB );
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 ff9a 	bl	8009c28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008cf4:	e019      	b.n	8008d2a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d103      	bne.n	8008d08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 ff91 	bl	8009c28 <vPortFree>
	}
 8008d06:	e010      	b.n	8008d2a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d00b      	beq.n	8008d2a <prvDeleteTCB+0x62>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	60fb      	str	r3, [r7, #12]
}
 8008d24:	bf00      	nop
 8008d26:	bf00      	nop
 8008d28:	e7fd      	b.n	8008d26 <prvDeleteTCB+0x5e>
	}
 8008d2a:	bf00      	nop
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
	...

08008d34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8008d6c <prvResetNextTaskUnblockTime+0x38>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d104      	bne.n	8008d4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d44:	4b0a      	ldr	r3, [pc, #40]	@ (8008d70 <prvResetNextTaskUnblockTime+0x3c>)
 8008d46:	f04f 32ff 	mov.w	r2, #4294967295
 8008d4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d4c:	e008      	b.n	8008d60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d4e:	4b07      	ldr	r3, [pc, #28]	@ (8008d6c <prvResetNextTaskUnblockTime+0x38>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	4a04      	ldr	r2, [pc, #16]	@ (8008d70 <prvResetNextTaskUnblockTime+0x3c>)
 8008d5e:	6013      	str	r3, [r2, #0]
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	20000ec4 	.word	0x20000ec4
 8008d70:	20000f2c 	.word	0x20000f2c

08008d74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8008da8 <xTaskGetSchedulerState+0x34>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d102      	bne.n	8008d88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d82:	2301      	movs	r3, #1
 8008d84:	607b      	str	r3, [r7, #4]
 8008d86:	e008      	b.n	8008d9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d88:	4b08      	ldr	r3, [pc, #32]	@ (8008dac <xTaskGetSchedulerState+0x38>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d102      	bne.n	8008d96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d90:	2302      	movs	r3, #2
 8008d92:	607b      	str	r3, [r7, #4]
 8008d94:	e001      	b.n	8008d9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d96:	2300      	movs	r3, #0
 8008d98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d9a:	687b      	ldr	r3, [r7, #4]
	}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr
 8008da8:	20000f18 	.word	0x20000f18
 8008dac:	20000f34 	.word	0x20000f34

08008db0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d058      	beq.n	8008e78 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8008e84 <xTaskPriorityDisinherit+0xd4>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d00b      	beq.n	8008de8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	60fb      	str	r3, [r7, #12]
}
 8008de2:	bf00      	nop
 8008de4:	bf00      	nop
 8008de6:	e7fd      	b.n	8008de4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10b      	bne.n	8008e08 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	60bb      	str	r3, [r7, #8]
}
 8008e02:	bf00      	nop
 8008e04:	bf00      	nop
 8008e06:	e7fd      	b.n	8008e04 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e0c:	1e5a      	subs	r2, r3, #1
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d02c      	beq.n	8008e78 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d128      	bne.n	8008e78 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	3304      	adds	r3, #4
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fe fb2e 	bl	800748c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e48:	4b0f      	ldr	r3, [pc, #60]	@ (8008e88 <xTaskPriorityDisinherit+0xd8>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d903      	bls.n	8008e58 <xTaskPriorityDisinherit+0xa8>
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e54:	4a0c      	ldr	r2, [pc, #48]	@ (8008e88 <xTaskPriorityDisinherit+0xd8>)
 8008e56:	6013      	str	r3, [r2, #0]
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	4413      	add	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4a09      	ldr	r2, [pc, #36]	@ (8008e8c <xTaskPriorityDisinherit+0xdc>)
 8008e66:	441a      	add	r2, r3
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	4610      	mov	r0, r2
 8008e70:	f7fe faaf 	bl	80073d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e74:	2301      	movs	r3, #1
 8008e76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e78:	697b      	ldr	r3, [r7, #20]
	}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3718      	adds	r7, #24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	20000a38 	.word	0x20000a38
 8008e88:	20000f14 	.word	0x20000f14
 8008e8c:	20000a3c 	.word	0x20000a3c

08008e90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e9a:	4b21      	ldr	r3, [pc, #132]	@ (8008f20 <prvAddCurrentTaskToDelayedList+0x90>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ea0:	4b20      	ldr	r3, [pc, #128]	@ (8008f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fe faf0 	bl	800748c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb2:	d10a      	bne.n	8008eca <prvAddCurrentTaskToDelayedList+0x3a>
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d007      	beq.n	8008eca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008eba:	4b1a      	ldr	r3, [pc, #104]	@ (8008f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4819      	ldr	r0, [pc, #100]	@ (8008f28 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ec4:	f7fe fa85 	bl	80073d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ec8:	e026      	b.n	8008f18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4413      	add	r3, r2
 8008ed0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ed2:	4b14      	ldr	r3, [pc, #80]	@ (8008f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d209      	bcs.n	8008ef6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ee2:	4b12      	ldr	r3, [pc, #72]	@ (8008f2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8008f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	3304      	adds	r3, #4
 8008eec:	4619      	mov	r1, r3
 8008eee:	4610      	mov	r0, r2
 8008ef0:	f7fe fa93 	bl	800741a <vListInsert>
}
 8008ef4:	e010      	b.n	8008f18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8008f30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	4b0a      	ldr	r3, [pc, #40]	@ (8008f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3304      	adds	r3, #4
 8008f00:	4619      	mov	r1, r3
 8008f02:	4610      	mov	r0, r2
 8008f04:	f7fe fa89 	bl	800741a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f08:	4b0a      	ldr	r3, [pc, #40]	@ (8008f34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d202      	bcs.n	8008f18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f12:	4a08      	ldr	r2, [pc, #32]	@ (8008f34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	6013      	str	r3, [r2, #0]
}
 8008f18:	bf00      	nop
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	20000f10 	.word	0x20000f10
 8008f24:	20000a38 	.word	0x20000a38
 8008f28:	20000ef8 	.word	0x20000ef8
 8008f2c:	20000ec8 	.word	0x20000ec8
 8008f30:	20000ec4 	.word	0x20000ec4
 8008f34:	20000f2c 	.word	0x20000f2c

08008f38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b08a      	sub	sp, #40	@ 0x28
 8008f3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f42:	f000 fb13 	bl	800956c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f46:	4b1d      	ldr	r3, [pc, #116]	@ (8008fbc <xTimerCreateTimerTask+0x84>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d021      	beq.n	8008f92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f52:	2300      	movs	r3, #0
 8008f54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f56:	1d3a      	adds	r2, r7, #4
 8008f58:	f107 0108 	add.w	r1, r7, #8
 8008f5c:	f107 030c 	add.w	r3, r7, #12
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fe f9ef 	bl	8007344 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	9202      	str	r2, [sp, #8]
 8008f6e:	9301      	str	r3, [sp, #4]
 8008f70:	2302      	movs	r3, #2
 8008f72:	9300      	str	r3, [sp, #0]
 8008f74:	2300      	movs	r3, #0
 8008f76:	460a      	mov	r2, r1
 8008f78:	4911      	ldr	r1, [pc, #68]	@ (8008fc0 <xTimerCreateTimerTask+0x88>)
 8008f7a:	4812      	ldr	r0, [pc, #72]	@ (8008fc4 <xTimerCreateTimerTask+0x8c>)
 8008f7c:	f7ff f8a2 	bl	80080c4 <xTaskCreateStatic>
 8008f80:	4603      	mov	r3, r0
 8008f82:	4a11      	ldr	r2, [pc, #68]	@ (8008fc8 <xTimerCreateTimerTask+0x90>)
 8008f84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f86:	4b10      	ldr	r3, [pc, #64]	@ (8008fc8 <xTimerCreateTimerTask+0x90>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10b      	bne.n	8008fb0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f9c:	f383 8811 	msr	BASEPRI, r3
 8008fa0:	f3bf 8f6f 	isb	sy
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	613b      	str	r3, [r7, #16]
}
 8008faa:	bf00      	nop
 8008fac:	bf00      	nop
 8008fae:	e7fd      	b.n	8008fac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008fb0:	697b      	ldr	r3, [r7, #20]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	20000f68 	.word	0x20000f68
 8008fc0:	0800a0a0 	.word	0x0800a0a0
 8008fc4:	08009105 	.word	0x08009105
 8008fc8:	20000f6c 	.word	0x20000f6c

08008fcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b08a      	sub	sp, #40	@ 0x28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
 8008fd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10b      	bne.n	8008ffc <xTimerGenericCommand+0x30>
	__asm volatile
 8008fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe8:	f383 8811 	msr	BASEPRI, r3
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	623b      	str	r3, [r7, #32]
}
 8008ff6:	bf00      	nop
 8008ff8:	bf00      	nop
 8008ffa:	e7fd      	b.n	8008ff8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ffc:	4b19      	ldr	r3, [pc, #100]	@ (8009064 <xTimerGenericCommand+0x98>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d02a      	beq.n	800905a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2b05      	cmp	r3, #5
 8009014:	dc18      	bgt.n	8009048 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009016:	f7ff fead 	bl	8008d74 <xTaskGetSchedulerState>
 800901a:	4603      	mov	r3, r0
 800901c:	2b02      	cmp	r3, #2
 800901e:	d109      	bne.n	8009034 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009020:	4b10      	ldr	r3, [pc, #64]	@ (8009064 <xTimerGenericCommand+0x98>)
 8009022:	6818      	ldr	r0, [r3, #0]
 8009024:	f107 0110 	add.w	r1, r7, #16
 8009028:	2300      	movs	r3, #0
 800902a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800902c:	f7fe fc0c 	bl	8007848 <xQueueGenericSend>
 8009030:	6278      	str	r0, [r7, #36]	@ 0x24
 8009032:	e012      	b.n	800905a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009034:	4b0b      	ldr	r3, [pc, #44]	@ (8009064 <xTimerGenericCommand+0x98>)
 8009036:	6818      	ldr	r0, [r3, #0]
 8009038:	f107 0110 	add.w	r1, r7, #16
 800903c:	2300      	movs	r3, #0
 800903e:	2200      	movs	r2, #0
 8009040:	f7fe fc02 	bl	8007848 <xQueueGenericSend>
 8009044:	6278      	str	r0, [r7, #36]	@ 0x24
 8009046:	e008      	b.n	800905a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009048:	4b06      	ldr	r3, [pc, #24]	@ (8009064 <xTimerGenericCommand+0x98>)
 800904a:	6818      	ldr	r0, [r3, #0]
 800904c:	f107 0110 	add.w	r1, r7, #16
 8009050:	2300      	movs	r3, #0
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	f7fe fcfa 	bl	8007a4c <xQueueGenericSendFromISR>
 8009058:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800905a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800905c:	4618      	mov	r0, r3
 800905e:	3728      	adds	r7, #40	@ 0x28
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	20000f68 	.word	0x20000f68

08009068 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b088      	sub	sp, #32
 800906c:	af02      	add	r7, sp, #8
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009072:	4b23      	ldr	r3, [pc, #140]	@ (8009100 <prvProcessExpiredTimer+0x98>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	3304      	adds	r3, #4
 8009080:	4618      	mov	r0, r3
 8009082:	f7fe fa03 	bl	800748c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800908c:	f003 0304 	and.w	r3, r3, #4
 8009090:	2b00      	cmp	r3, #0
 8009092:	d023      	beq.n	80090dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	699a      	ldr	r2, [r3, #24]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	18d1      	adds	r1, r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	6978      	ldr	r0, [r7, #20]
 80090a2:	f000 f8d5 	bl	8009250 <prvInsertTimerInActiveList>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d020      	beq.n	80090ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090ac:	2300      	movs	r3, #0
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	2300      	movs	r3, #0
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	2100      	movs	r1, #0
 80090b6:	6978      	ldr	r0, [r7, #20]
 80090b8:	f7ff ff88 	bl	8008fcc <xTimerGenericCommand>
 80090bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d114      	bne.n	80090ee <prvProcessExpiredTimer+0x86>
	__asm volatile
 80090c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c8:	f383 8811 	msr	BASEPRI, r3
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	60fb      	str	r3, [r7, #12]
}
 80090d6:	bf00      	nop
 80090d8:	bf00      	nop
 80090da:	e7fd      	b.n	80090d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090e2:	f023 0301 	bic.w	r3, r3, #1
 80090e6:	b2da      	uxtb	r2, r3
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	6a1b      	ldr	r3, [r3, #32]
 80090f2:	6978      	ldr	r0, [r7, #20]
 80090f4:	4798      	blx	r3
}
 80090f6:	bf00      	nop
 80090f8:	3718      	adds	r7, #24
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	20000f60 	.word	0x20000f60

08009104 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800910c:	f107 0308 	add.w	r3, r7, #8
 8009110:	4618      	mov	r0, r3
 8009112:	f000 f859 	bl	80091c8 <prvGetNextExpireTime>
 8009116:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	4619      	mov	r1, r3
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f000 f805 	bl	800912c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009122:	f000 f8d7 	bl	80092d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009126:	bf00      	nop
 8009128:	e7f0      	b.n	800910c <prvTimerTask+0x8>
	...

0800912c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009136:	f7ff fa29 	bl	800858c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800913a:	f107 0308 	add.w	r3, r7, #8
 800913e:	4618      	mov	r0, r3
 8009140:	f000 f866 	bl	8009210 <prvSampleTimeNow>
 8009144:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d130      	bne.n	80091ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10a      	bne.n	8009168 <prvProcessTimerOrBlockTask+0x3c>
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	429a      	cmp	r2, r3
 8009158:	d806      	bhi.n	8009168 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800915a:	f7ff fa25 	bl	80085a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800915e:	68f9      	ldr	r1, [r7, #12]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7ff ff81 	bl	8009068 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009166:	e024      	b.n	80091b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d008      	beq.n	8009180 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800916e:	4b13      	ldr	r3, [pc, #76]	@ (80091bc <prvProcessTimerOrBlockTask+0x90>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <prvProcessTimerOrBlockTask+0x50>
 8009178:	2301      	movs	r3, #1
 800917a:	e000      	b.n	800917e <prvProcessTimerOrBlockTask+0x52>
 800917c:	2300      	movs	r3, #0
 800917e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009180:	4b0f      	ldr	r3, [pc, #60]	@ (80091c0 <prvProcessTimerOrBlockTask+0x94>)
 8009182:	6818      	ldr	r0, [r3, #0]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	683a      	ldr	r2, [r7, #0]
 800918c:	4619      	mov	r1, r3
 800918e:	f7fe ff65 	bl	800805c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009192:	f7ff fa09 	bl	80085a8 <xTaskResumeAll>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10a      	bne.n	80091b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800919c:	4b09      	ldr	r3, [pc, #36]	@ (80091c4 <prvProcessTimerOrBlockTask+0x98>)
 800919e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	f3bf 8f4f 	dsb	sy
 80091a8:	f3bf 8f6f 	isb	sy
}
 80091ac:	e001      	b.n	80091b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80091ae:	f7ff f9fb 	bl	80085a8 <xTaskResumeAll>
}
 80091b2:	bf00      	nop
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	20000f64 	.word	0x20000f64
 80091c0:	20000f68 	.word	0x20000f68
 80091c4:	e000ed04 	.word	0xe000ed04

080091c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091d0:	4b0e      	ldr	r3, [pc, #56]	@ (800920c <prvGetNextExpireTime+0x44>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d101      	bne.n	80091de <prvGetNextExpireTime+0x16>
 80091da:	2201      	movs	r2, #1
 80091dc:	e000      	b.n	80091e0 <prvGetNextExpireTime+0x18>
 80091de:	2200      	movs	r2, #0
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d105      	bne.n	80091f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091ec:	4b07      	ldr	r3, [pc, #28]	@ (800920c <prvGetNextExpireTime+0x44>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	60fb      	str	r3, [r7, #12]
 80091f6:	e001      	b.n	80091fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80091fc:	68fb      	ldr	r3, [r7, #12]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	20000f60 	.word	0x20000f60

08009210 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009218:	f7ff fa64 	bl	80086e4 <xTaskGetTickCount>
 800921c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800921e:	4b0b      	ldr	r3, [pc, #44]	@ (800924c <prvSampleTimeNow+0x3c>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	429a      	cmp	r2, r3
 8009226:	d205      	bcs.n	8009234 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009228:	f000 f93a 	bl	80094a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	e002      	b.n	800923a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800923a:	4a04      	ldr	r2, [pc, #16]	@ (800924c <prvSampleTimeNow+0x3c>)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009240:	68fb      	ldr	r3, [r7, #12]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	20000f70 	.word	0x20000f70

08009250 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800925e:	2300      	movs	r3, #0
 8009260:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	429a      	cmp	r2, r3
 8009274:	d812      	bhi.n	800929c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	1ad2      	subs	r2, r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	699b      	ldr	r3, [r3, #24]
 8009280:	429a      	cmp	r2, r3
 8009282:	d302      	bcc.n	800928a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009284:	2301      	movs	r3, #1
 8009286:	617b      	str	r3, [r7, #20]
 8009288:	e01b      	b.n	80092c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800928a:	4b10      	ldr	r3, [pc, #64]	@ (80092cc <prvInsertTimerInActiveList+0x7c>)
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	3304      	adds	r3, #4
 8009292:	4619      	mov	r1, r3
 8009294:	4610      	mov	r0, r2
 8009296:	f7fe f8c0 	bl	800741a <vListInsert>
 800929a:	e012      	b.n	80092c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d206      	bcs.n	80092b2 <prvInsertTimerInActiveList+0x62>
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d302      	bcc.n	80092b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80092ac:	2301      	movs	r3, #1
 80092ae:	617b      	str	r3, [r7, #20]
 80092b0:	e007      	b.n	80092c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092b2:	4b07      	ldr	r3, [pc, #28]	@ (80092d0 <prvInsertTimerInActiveList+0x80>)
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	3304      	adds	r3, #4
 80092ba:	4619      	mov	r1, r3
 80092bc:	4610      	mov	r0, r2
 80092be:	f7fe f8ac 	bl	800741a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80092c2:	697b      	ldr	r3, [r7, #20]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3718      	adds	r7, #24
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	20000f64 	.word	0x20000f64
 80092d0:	20000f60 	.word	0x20000f60

080092d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b08e      	sub	sp, #56	@ 0x38
 80092d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092da:	e0ce      	b.n	800947a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	da19      	bge.n	8009316 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80092e2:	1d3b      	adds	r3, r7, #4
 80092e4:	3304      	adds	r3, #4
 80092e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80092e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10b      	bne.n	8009306 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80092ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f2:	f383 8811 	msr	BASEPRI, r3
 80092f6:	f3bf 8f6f 	isb	sy
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	61fb      	str	r3, [r7, #28]
}
 8009300:	bf00      	nop
 8009302:	bf00      	nop
 8009304:	e7fd      	b.n	8009302 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800930c:	6850      	ldr	r0, [r2, #4]
 800930e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009310:	6892      	ldr	r2, [r2, #8]
 8009312:	4611      	mov	r1, r2
 8009314:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	f2c0 80ae 	blt.w	800947a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d004      	beq.n	8009334 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800932a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800932c:	3304      	adds	r3, #4
 800932e:	4618      	mov	r0, r3
 8009330:	f7fe f8ac 	bl	800748c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009334:	463b      	mov	r3, r7
 8009336:	4618      	mov	r0, r3
 8009338:	f7ff ff6a 	bl	8009210 <prvSampleTimeNow>
 800933c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2b09      	cmp	r3, #9
 8009342:	f200 8097 	bhi.w	8009474 <prvProcessReceivedCommands+0x1a0>
 8009346:	a201      	add	r2, pc, #4	@ (adr r2, 800934c <prvProcessReceivedCommands+0x78>)
 8009348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934c:	08009375 	.word	0x08009375
 8009350:	08009375 	.word	0x08009375
 8009354:	08009375 	.word	0x08009375
 8009358:	080093eb 	.word	0x080093eb
 800935c:	080093ff 	.word	0x080093ff
 8009360:	0800944b 	.word	0x0800944b
 8009364:	08009375 	.word	0x08009375
 8009368:	08009375 	.word	0x08009375
 800936c:	080093eb 	.word	0x080093eb
 8009370:	080093ff 	.word	0x080093ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009376:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800937a:	f043 0301 	orr.w	r3, r3, #1
 800937e:	b2da      	uxtb	r2, r3
 8009380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009382:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	18d1      	adds	r1, r2, r3
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009392:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009394:	f7ff ff5c 	bl	8009250 <prvInsertTimerInActiveList>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d06c      	beq.n	8009478 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800939e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093ac:	f003 0304 	and.w	r3, r3, #4
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d061      	beq.n	8009478 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	441a      	add	r2, r3
 80093bc:	2300      	movs	r3, #0
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	2300      	movs	r3, #0
 80093c2:	2100      	movs	r1, #0
 80093c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093c6:	f7ff fe01 	bl	8008fcc <xTimerGenericCommand>
 80093ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d152      	bne.n	8009478 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80093d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d6:	f383 8811 	msr	BASEPRI, r3
 80093da:	f3bf 8f6f 	isb	sy
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	61bb      	str	r3, [r7, #24]
}
 80093e4:	bf00      	nop
 80093e6:	bf00      	nop
 80093e8:	e7fd      	b.n	80093e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093f0:	f023 0301 	bic.w	r3, r3, #1
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80093fc:	e03d      	b.n	800947a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80093fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009400:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009404:	f043 0301 	orr.w	r3, r3, #1
 8009408:	b2da      	uxtb	r2, r3
 800940a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800940c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009414:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10b      	bne.n	8009436 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	617b      	str	r3, [r7, #20]
}
 8009430:	bf00      	nop
 8009432:	bf00      	nop
 8009434:	e7fd      	b.n	8009432 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009438:	699a      	ldr	r2, [r3, #24]
 800943a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943c:	18d1      	adds	r1, r2, r3
 800943e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009444:	f7ff ff04 	bl	8009250 <prvInsertTimerInActiveList>
					break;
 8009448:	e017      	b.n	800947a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800944a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009450:	f003 0302 	and.w	r3, r3, #2
 8009454:	2b00      	cmp	r3, #0
 8009456:	d103      	bne.n	8009460 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009458:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800945a:	f000 fbe5 	bl	8009c28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800945e:	e00c      	b.n	800947a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009462:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009466:	f023 0301 	bic.w	r3, r3, #1
 800946a:	b2da      	uxtb	r2, r3
 800946c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009472:	e002      	b.n	800947a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009474:	bf00      	nop
 8009476:	e000      	b.n	800947a <prvProcessReceivedCommands+0x1a6>
					break;
 8009478:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800947a:	4b08      	ldr	r3, [pc, #32]	@ (800949c <prvProcessReceivedCommands+0x1c8>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	1d39      	adds	r1, r7, #4
 8009480:	2200      	movs	r2, #0
 8009482:	4618      	mov	r0, r3
 8009484:	f7fe fb80 	bl	8007b88 <xQueueReceive>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	f47f af26 	bne.w	80092dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009490:	bf00      	nop
 8009492:	bf00      	nop
 8009494:	3730      	adds	r7, #48	@ 0x30
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	20000f68 	.word	0x20000f68

080094a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b088      	sub	sp, #32
 80094a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094a6:	e049      	b.n	800953c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094a8:	4b2e      	ldr	r3, [pc, #184]	@ (8009564 <prvSwitchTimerLists+0xc4>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094b2:	4b2c      	ldr	r3, [pc, #176]	@ (8009564 <prvSwitchTimerLists+0xc4>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	3304      	adds	r3, #4
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7fd ffe3 	bl	800748c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6a1b      	ldr	r3, [r3, #32]
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094d4:	f003 0304 	and.w	r3, r3, #4
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d02f      	beq.n	800953c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	4413      	add	r3, r2
 80094e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d90e      	bls.n	800950c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094fa:	4b1a      	ldr	r3, [pc, #104]	@ (8009564 <prvSwitchTimerLists+0xc4>)
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3304      	adds	r3, #4
 8009502:	4619      	mov	r1, r3
 8009504:	4610      	mov	r0, r2
 8009506:	f7fd ff88 	bl	800741a <vListInsert>
 800950a:	e017      	b.n	800953c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800950c:	2300      	movs	r3, #0
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	2300      	movs	r3, #0
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	2100      	movs	r1, #0
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f7ff fd58 	bl	8008fcc <xTimerGenericCommand>
 800951c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10b      	bne.n	800953c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009528:	f383 8811 	msr	BASEPRI, r3
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	603b      	str	r3, [r7, #0]
}
 8009536:	bf00      	nop
 8009538:	bf00      	nop
 800953a:	e7fd      	b.n	8009538 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800953c:	4b09      	ldr	r3, [pc, #36]	@ (8009564 <prvSwitchTimerLists+0xc4>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1b0      	bne.n	80094a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009546:	4b07      	ldr	r3, [pc, #28]	@ (8009564 <prvSwitchTimerLists+0xc4>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800954c:	4b06      	ldr	r3, [pc, #24]	@ (8009568 <prvSwitchTimerLists+0xc8>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a04      	ldr	r2, [pc, #16]	@ (8009564 <prvSwitchTimerLists+0xc4>)
 8009552:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009554:	4a04      	ldr	r2, [pc, #16]	@ (8009568 <prvSwitchTimerLists+0xc8>)
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	6013      	str	r3, [r2, #0]
}
 800955a:	bf00      	nop
 800955c:	3718      	adds	r7, #24
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	20000f60 	.word	0x20000f60
 8009568:	20000f64 	.word	0x20000f64

0800956c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009572:	f000 f969 	bl	8009848 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009576:	4b15      	ldr	r3, [pc, #84]	@ (80095cc <prvCheckForValidListAndQueue+0x60>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d120      	bne.n	80095c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800957e:	4814      	ldr	r0, [pc, #80]	@ (80095d0 <prvCheckForValidListAndQueue+0x64>)
 8009580:	f7fd fefa 	bl	8007378 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009584:	4813      	ldr	r0, [pc, #76]	@ (80095d4 <prvCheckForValidListAndQueue+0x68>)
 8009586:	f7fd fef7 	bl	8007378 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800958a:	4b13      	ldr	r3, [pc, #76]	@ (80095d8 <prvCheckForValidListAndQueue+0x6c>)
 800958c:	4a10      	ldr	r2, [pc, #64]	@ (80095d0 <prvCheckForValidListAndQueue+0x64>)
 800958e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009590:	4b12      	ldr	r3, [pc, #72]	@ (80095dc <prvCheckForValidListAndQueue+0x70>)
 8009592:	4a10      	ldr	r2, [pc, #64]	@ (80095d4 <prvCheckForValidListAndQueue+0x68>)
 8009594:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009596:	2300      	movs	r3, #0
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	4b11      	ldr	r3, [pc, #68]	@ (80095e0 <prvCheckForValidListAndQueue+0x74>)
 800959c:	4a11      	ldr	r2, [pc, #68]	@ (80095e4 <prvCheckForValidListAndQueue+0x78>)
 800959e:	2110      	movs	r1, #16
 80095a0:	200a      	movs	r0, #10
 80095a2:	f7fe f807 	bl	80075b4 <xQueueGenericCreateStatic>
 80095a6:	4603      	mov	r3, r0
 80095a8:	4a08      	ldr	r2, [pc, #32]	@ (80095cc <prvCheckForValidListAndQueue+0x60>)
 80095aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80095ac:	4b07      	ldr	r3, [pc, #28]	@ (80095cc <prvCheckForValidListAndQueue+0x60>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d005      	beq.n	80095c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80095b4:	4b05      	ldr	r3, [pc, #20]	@ (80095cc <prvCheckForValidListAndQueue+0x60>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	490b      	ldr	r1, [pc, #44]	@ (80095e8 <prvCheckForValidListAndQueue+0x7c>)
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7fe fcfa 	bl	8007fb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095c0:	f000 f974 	bl	80098ac <vPortExitCritical>
}
 80095c4:	bf00      	nop
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	20000f68 	.word	0x20000f68
 80095d0:	20000f38 	.word	0x20000f38
 80095d4:	20000f4c 	.word	0x20000f4c
 80095d8:	20000f60 	.word	0x20000f60
 80095dc:	20000f64 	.word	0x20000f64
 80095e0:	20001014 	.word	0x20001014
 80095e4:	20000f74 	.word	0x20000f74
 80095e8:	0800a0a8 	.word	0x0800a0a8

080095ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	3b04      	subs	r3, #4
 80095fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009604:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	3b04      	subs	r3, #4
 800960a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	f023 0201 	bic.w	r2, r3, #1
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	3b04      	subs	r3, #4
 800961a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800961c:	4a0c      	ldr	r2, [pc, #48]	@ (8009650 <pxPortInitialiseStack+0x64>)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	3b14      	subs	r3, #20
 8009626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	3b04      	subs	r3, #4
 8009632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f06f 0202 	mvn.w	r2, #2
 800963a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	3b20      	subs	r3, #32
 8009640:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009642:	68fb      	ldr	r3, [r7, #12]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3714      	adds	r7, #20
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr
 8009650:	08009655 	.word	0x08009655

08009654 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009654:	b480      	push	{r7}
 8009656:	b085      	sub	sp, #20
 8009658:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800965a:	2300      	movs	r3, #0
 800965c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800965e:	4b13      	ldr	r3, [pc, #76]	@ (80096ac <prvTaskExitError+0x58>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009666:	d00b      	beq.n	8009680 <prvTaskExitError+0x2c>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	60fb      	str	r3, [r7, #12]
}
 800967a:	bf00      	nop
 800967c:	bf00      	nop
 800967e:	e7fd      	b.n	800967c <prvTaskExitError+0x28>
	__asm volatile
 8009680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009684:	f383 8811 	msr	BASEPRI, r3
 8009688:	f3bf 8f6f 	isb	sy
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	60bb      	str	r3, [r7, #8]
}
 8009692:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009694:	bf00      	nop
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d0fc      	beq.n	8009696 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800969c:	bf00      	nop
 800969e:	bf00      	nop
 80096a0:	3714      	adds	r7, #20
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	20000010 	.word	0x20000010

080096b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80096b0:	4b07      	ldr	r3, [pc, #28]	@ (80096d0 <pxCurrentTCBConst2>)
 80096b2:	6819      	ldr	r1, [r3, #0]
 80096b4:	6808      	ldr	r0, [r1, #0]
 80096b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ba:	f380 8809 	msr	PSP, r0
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f04f 0000 	mov.w	r0, #0
 80096c6:	f380 8811 	msr	BASEPRI, r0
 80096ca:	4770      	bx	lr
 80096cc:	f3af 8000 	nop.w

080096d0 <pxCurrentTCBConst2>:
 80096d0:	20000a38 	.word	0x20000a38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096d4:	bf00      	nop
 80096d6:	bf00      	nop

080096d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80096d8:	4808      	ldr	r0, [pc, #32]	@ (80096fc <prvPortStartFirstTask+0x24>)
 80096da:	6800      	ldr	r0, [r0, #0]
 80096dc:	6800      	ldr	r0, [r0, #0]
 80096de:	f380 8808 	msr	MSP, r0
 80096e2:	f04f 0000 	mov.w	r0, #0
 80096e6:	f380 8814 	msr	CONTROL, r0
 80096ea:	b662      	cpsie	i
 80096ec:	b661      	cpsie	f
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	f3bf 8f6f 	isb	sy
 80096f6:	df00      	svc	0
 80096f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80096fa:	bf00      	nop
 80096fc:	e000ed08 	.word	0xe000ed08

08009700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009706:	4b47      	ldr	r3, [pc, #284]	@ (8009824 <xPortStartScheduler+0x124>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a47      	ldr	r2, [pc, #284]	@ (8009828 <xPortStartScheduler+0x128>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d10b      	bne.n	8009728 <xPortStartScheduler+0x28>
	__asm volatile
 8009710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009714:	f383 8811 	msr	BASEPRI, r3
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	613b      	str	r3, [r7, #16]
}
 8009722:	bf00      	nop
 8009724:	bf00      	nop
 8009726:	e7fd      	b.n	8009724 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009728:	4b3e      	ldr	r3, [pc, #248]	@ (8009824 <xPortStartScheduler+0x124>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a3f      	ldr	r2, [pc, #252]	@ (800982c <xPortStartScheduler+0x12c>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d10b      	bne.n	800974a <xPortStartScheduler+0x4a>
	__asm volatile
 8009732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	60fb      	str	r3, [r7, #12]
}
 8009744:	bf00      	nop
 8009746:	bf00      	nop
 8009748:	e7fd      	b.n	8009746 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800974a:	4b39      	ldr	r3, [pc, #228]	@ (8009830 <xPortStartScheduler+0x130>)
 800974c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	b2db      	uxtb	r3, r3
 8009754:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	22ff      	movs	r2, #255	@ 0xff
 800975a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	b2db      	uxtb	r3, r3
 8009762:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009764:	78fb      	ldrb	r3, [r7, #3]
 8009766:	b2db      	uxtb	r3, r3
 8009768:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800976c:	b2da      	uxtb	r2, r3
 800976e:	4b31      	ldr	r3, [pc, #196]	@ (8009834 <xPortStartScheduler+0x134>)
 8009770:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009772:	4b31      	ldr	r3, [pc, #196]	@ (8009838 <xPortStartScheduler+0x138>)
 8009774:	2207      	movs	r2, #7
 8009776:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009778:	e009      	b.n	800978e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800977a:	4b2f      	ldr	r3, [pc, #188]	@ (8009838 <xPortStartScheduler+0x138>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	3b01      	subs	r3, #1
 8009780:	4a2d      	ldr	r2, [pc, #180]	@ (8009838 <xPortStartScheduler+0x138>)
 8009782:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009784:	78fb      	ldrb	r3, [r7, #3]
 8009786:	b2db      	uxtb	r3, r3
 8009788:	005b      	lsls	r3, r3, #1
 800978a:	b2db      	uxtb	r3, r3
 800978c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800978e:	78fb      	ldrb	r3, [r7, #3]
 8009790:	b2db      	uxtb	r3, r3
 8009792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009796:	2b80      	cmp	r3, #128	@ 0x80
 8009798:	d0ef      	beq.n	800977a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800979a:	4b27      	ldr	r3, [pc, #156]	@ (8009838 <xPortStartScheduler+0x138>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f1c3 0307 	rsb	r3, r3, #7
 80097a2:	2b04      	cmp	r3, #4
 80097a4:	d00b      	beq.n	80097be <xPortStartScheduler+0xbe>
	__asm volatile
 80097a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097aa:	f383 8811 	msr	BASEPRI, r3
 80097ae:	f3bf 8f6f 	isb	sy
 80097b2:	f3bf 8f4f 	dsb	sy
 80097b6:	60bb      	str	r3, [r7, #8]
}
 80097b8:	bf00      	nop
 80097ba:	bf00      	nop
 80097bc:	e7fd      	b.n	80097ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097be:	4b1e      	ldr	r3, [pc, #120]	@ (8009838 <xPortStartScheduler+0x138>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	021b      	lsls	r3, r3, #8
 80097c4:	4a1c      	ldr	r2, [pc, #112]	@ (8009838 <xPortStartScheduler+0x138>)
 80097c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097c8:	4b1b      	ldr	r3, [pc, #108]	@ (8009838 <xPortStartScheduler+0x138>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80097d0:	4a19      	ldr	r2, [pc, #100]	@ (8009838 <xPortStartScheduler+0x138>)
 80097d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	b2da      	uxtb	r2, r3
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097dc:	4b17      	ldr	r3, [pc, #92]	@ (800983c <xPortStartScheduler+0x13c>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a16      	ldr	r2, [pc, #88]	@ (800983c <xPortStartScheduler+0x13c>)
 80097e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80097e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097e8:	4b14      	ldr	r3, [pc, #80]	@ (800983c <xPortStartScheduler+0x13c>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a13      	ldr	r2, [pc, #76]	@ (800983c <xPortStartScheduler+0x13c>)
 80097ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80097f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097f4:	f000 f8da 	bl	80099ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80097f8:	4b11      	ldr	r3, [pc, #68]	@ (8009840 <xPortStartScheduler+0x140>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80097fe:	f000 f8f9 	bl	80099f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009802:	4b10      	ldr	r3, [pc, #64]	@ (8009844 <xPortStartScheduler+0x144>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a0f      	ldr	r2, [pc, #60]	@ (8009844 <xPortStartScheduler+0x144>)
 8009808:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800980c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800980e:	f7ff ff63 	bl	80096d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009812:	f7ff f831 	bl	8008878 <vTaskSwitchContext>
	prvTaskExitError();
 8009816:	f7ff ff1d 	bl	8009654 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3718      	adds	r7, #24
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	e000ed00 	.word	0xe000ed00
 8009828:	410fc271 	.word	0x410fc271
 800982c:	410fc270 	.word	0x410fc270
 8009830:	e000e400 	.word	0xe000e400
 8009834:	20001064 	.word	0x20001064
 8009838:	20001068 	.word	0x20001068
 800983c:	e000ed20 	.word	0xe000ed20
 8009840:	20000010 	.word	0x20000010
 8009844:	e000ef34 	.word	0xe000ef34

08009848 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
	__asm volatile
 800984e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009852:	f383 8811 	msr	BASEPRI, r3
 8009856:	f3bf 8f6f 	isb	sy
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	607b      	str	r3, [r7, #4]
}
 8009860:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009862:	4b10      	ldr	r3, [pc, #64]	@ (80098a4 <vPortEnterCritical+0x5c>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	3301      	adds	r3, #1
 8009868:	4a0e      	ldr	r2, [pc, #56]	@ (80098a4 <vPortEnterCritical+0x5c>)
 800986a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800986c:	4b0d      	ldr	r3, [pc, #52]	@ (80098a4 <vPortEnterCritical+0x5c>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d110      	bne.n	8009896 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009874:	4b0c      	ldr	r3, [pc, #48]	@ (80098a8 <vPortEnterCritical+0x60>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	b2db      	uxtb	r3, r3
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00b      	beq.n	8009896 <vPortEnterCritical+0x4e>
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	603b      	str	r3, [r7, #0]
}
 8009890:	bf00      	nop
 8009892:	bf00      	nop
 8009894:	e7fd      	b.n	8009892 <vPortEnterCritical+0x4a>
	}
}
 8009896:	bf00      	nop
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	20000010 	.word	0x20000010
 80098a8:	e000ed04 	.word	0xe000ed04

080098ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098b2:	4b12      	ldr	r3, [pc, #72]	@ (80098fc <vPortExitCritical+0x50>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10b      	bne.n	80098d2 <vPortExitCritical+0x26>
	__asm volatile
 80098ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098be:	f383 8811 	msr	BASEPRI, r3
 80098c2:	f3bf 8f6f 	isb	sy
 80098c6:	f3bf 8f4f 	dsb	sy
 80098ca:	607b      	str	r3, [r7, #4]
}
 80098cc:	bf00      	nop
 80098ce:	bf00      	nop
 80098d0:	e7fd      	b.n	80098ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80098d2:	4b0a      	ldr	r3, [pc, #40]	@ (80098fc <vPortExitCritical+0x50>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	3b01      	subs	r3, #1
 80098d8:	4a08      	ldr	r2, [pc, #32]	@ (80098fc <vPortExitCritical+0x50>)
 80098da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098dc:	4b07      	ldr	r3, [pc, #28]	@ (80098fc <vPortExitCritical+0x50>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d105      	bne.n	80098f0 <vPortExitCritical+0x44>
 80098e4:	2300      	movs	r3, #0
 80098e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	f383 8811 	msr	BASEPRI, r3
}
 80098ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr
 80098fc:	20000010 	.word	0x20000010

08009900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009900:	f3ef 8009 	mrs	r0, PSP
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	4b15      	ldr	r3, [pc, #84]	@ (8009960 <pxCurrentTCBConst>)
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	f01e 0f10 	tst.w	lr, #16
 8009910:	bf08      	it	eq
 8009912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991a:	6010      	str	r0, [r2, #0]
 800991c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009920:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009924:	f380 8811 	msr	BASEPRI, r0
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	f3bf 8f6f 	isb	sy
 8009930:	f7fe ffa2 	bl	8008878 <vTaskSwitchContext>
 8009934:	f04f 0000 	mov.w	r0, #0
 8009938:	f380 8811 	msr	BASEPRI, r0
 800993c:	bc09      	pop	{r0, r3}
 800993e:	6819      	ldr	r1, [r3, #0]
 8009940:	6808      	ldr	r0, [r1, #0]
 8009942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009946:	f01e 0f10 	tst.w	lr, #16
 800994a:	bf08      	it	eq
 800994c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009950:	f380 8809 	msr	PSP, r0
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	f3af 8000 	nop.w

08009960 <pxCurrentTCBConst>:
 8009960:	20000a38 	.word	0x20000a38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009964:	bf00      	nop
 8009966:	bf00      	nop

08009968 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	607b      	str	r3, [r7, #4]
}
 8009980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009982:	f7fe febf 	bl	8008704 <xTaskIncrementTick>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d003      	beq.n	8009994 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800998c:	4b06      	ldr	r3, [pc, #24]	@ (80099a8 <xPortSysTickHandler+0x40>)
 800998e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	2300      	movs	r3, #0
 8009996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	f383 8811 	msr	BASEPRI, r3
}
 800999e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099a0:	bf00      	nop
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	e000ed04 	.word	0xe000ed04

080099ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80099ac:	b480      	push	{r7}
 80099ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099b0:	4b0b      	ldr	r3, [pc, #44]	@ (80099e0 <vPortSetupTimerInterrupt+0x34>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099b6:	4b0b      	ldr	r3, [pc, #44]	@ (80099e4 <vPortSetupTimerInterrupt+0x38>)
 80099b8:	2200      	movs	r2, #0
 80099ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099bc:	4b0a      	ldr	r3, [pc, #40]	@ (80099e8 <vPortSetupTimerInterrupt+0x3c>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a0a      	ldr	r2, [pc, #40]	@ (80099ec <vPortSetupTimerInterrupt+0x40>)
 80099c2:	fba2 2303 	umull	r2, r3, r2, r3
 80099c6:	099b      	lsrs	r3, r3, #6
 80099c8:	4a09      	ldr	r2, [pc, #36]	@ (80099f0 <vPortSetupTimerInterrupt+0x44>)
 80099ca:	3b01      	subs	r3, #1
 80099cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099ce:	4b04      	ldr	r3, [pc, #16]	@ (80099e0 <vPortSetupTimerInterrupt+0x34>)
 80099d0:	2207      	movs	r2, #7
 80099d2:	601a      	str	r2, [r3, #0]
}
 80099d4:	bf00      	nop
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	e000e010 	.word	0xe000e010
 80099e4:	e000e018 	.word	0xe000e018
 80099e8:	20000004 	.word	0x20000004
 80099ec:	10624dd3 	.word	0x10624dd3
 80099f0:	e000e014 	.word	0xe000e014

080099f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80099f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009a04 <vPortEnableVFP+0x10>
 80099f8:	6801      	ldr	r1, [r0, #0]
 80099fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80099fe:	6001      	str	r1, [r0, #0]
 8009a00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a02:	bf00      	nop
 8009a04:	e000ed88 	.word	0xe000ed88

08009a08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a0e:	f3ef 8305 	mrs	r3, IPSR
 8009a12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2b0f      	cmp	r3, #15
 8009a18:	d915      	bls.n	8009a46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a1a:	4a18      	ldr	r2, [pc, #96]	@ (8009a7c <vPortValidateInterruptPriority+0x74>)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	4413      	add	r3, r2
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a24:	4b16      	ldr	r3, [pc, #88]	@ (8009a80 <vPortValidateInterruptPriority+0x78>)
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	7afa      	ldrb	r2, [r7, #11]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d20b      	bcs.n	8009a46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	607b      	str	r3, [r7, #4]
}
 8009a40:	bf00      	nop
 8009a42:	bf00      	nop
 8009a44:	e7fd      	b.n	8009a42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a46:	4b0f      	ldr	r3, [pc, #60]	@ (8009a84 <vPortValidateInterruptPriority+0x7c>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a88 <vPortValidateInterruptPriority+0x80>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d90b      	bls.n	8009a6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a5a:	f383 8811 	msr	BASEPRI, r3
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f3bf 8f4f 	dsb	sy
 8009a66:	603b      	str	r3, [r7, #0]
}
 8009a68:	bf00      	nop
 8009a6a:	bf00      	nop
 8009a6c:	e7fd      	b.n	8009a6a <vPortValidateInterruptPriority+0x62>
	}
 8009a6e:	bf00      	nop
 8009a70:	3714      	adds	r7, #20
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	e000e3f0 	.word	0xe000e3f0
 8009a80:	20001064 	.word	0x20001064
 8009a84:	e000ed0c 	.word	0xe000ed0c
 8009a88:	20001068 	.word	0x20001068

08009a8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b08a      	sub	sp, #40	@ 0x28
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a94:	2300      	movs	r3, #0
 8009a96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a98:	f7fe fd78 	bl	800858c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a9c:	4b5c      	ldr	r3, [pc, #368]	@ (8009c10 <pvPortMalloc+0x184>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009aa4:	f000 f924 	bl	8009cf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009aa8:	4b5a      	ldr	r3, [pc, #360]	@ (8009c14 <pvPortMalloc+0x188>)
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4013      	ands	r3, r2
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f040 8095 	bne.w	8009be0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d01e      	beq.n	8009afa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009abc:	2208      	movs	r2, #8
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f003 0307 	and.w	r3, r3, #7
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d015      	beq.n	8009afa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f023 0307 	bic.w	r3, r3, #7
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f003 0307 	and.w	r3, r3, #7
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00b      	beq.n	8009afa <pvPortMalloc+0x6e>
	__asm volatile
 8009ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae6:	f383 8811 	msr	BASEPRI, r3
 8009aea:	f3bf 8f6f 	isb	sy
 8009aee:	f3bf 8f4f 	dsb	sy
 8009af2:	617b      	str	r3, [r7, #20]
}
 8009af4:	bf00      	nop
 8009af6:	bf00      	nop
 8009af8:	e7fd      	b.n	8009af6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d06f      	beq.n	8009be0 <pvPortMalloc+0x154>
 8009b00:	4b45      	ldr	r3, [pc, #276]	@ (8009c18 <pvPortMalloc+0x18c>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d86a      	bhi.n	8009be0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b0a:	4b44      	ldr	r3, [pc, #272]	@ (8009c1c <pvPortMalloc+0x190>)
 8009b0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b0e:	4b43      	ldr	r3, [pc, #268]	@ (8009c1c <pvPortMalloc+0x190>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b14:	e004      	b.n	8009b20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d903      	bls.n	8009b32 <pvPortMalloc+0xa6>
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1f1      	bne.n	8009b16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b32:	4b37      	ldr	r3, [pc, #220]	@ (8009c10 <pvPortMalloc+0x184>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d051      	beq.n	8009be0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2208      	movs	r2, #8
 8009b42:	4413      	add	r3, r2
 8009b44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	6a3b      	ldr	r3, [r7, #32]
 8009b4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b50:	685a      	ldr	r2, [r3, #4]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	1ad2      	subs	r2, r2, r3
 8009b56:	2308      	movs	r3, #8
 8009b58:	005b      	lsls	r3, r3, #1
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d920      	bls.n	8009ba0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4413      	add	r3, r2
 8009b64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	f003 0307 	and.w	r3, r3, #7
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00b      	beq.n	8009b88 <pvPortMalloc+0xfc>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	613b      	str	r3, [r7, #16]
}
 8009b82:	bf00      	nop
 8009b84:	bf00      	nop
 8009b86:	e7fd      	b.n	8009b84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8a:	685a      	ldr	r2, [r3, #4]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	1ad2      	subs	r2, r2, r3
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b9a:	69b8      	ldr	r0, [r7, #24]
 8009b9c:	f000 f90a 	bl	8009db4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8009c18 <pvPortMalloc+0x18c>)
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	4a1b      	ldr	r2, [pc, #108]	@ (8009c18 <pvPortMalloc+0x18c>)
 8009bac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bae:	4b1a      	ldr	r3, [pc, #104]	@ (8009c18 <pvPortMalloc+0x18c>)
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8009c20 <pvPortMalloc+0x194>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d203      	bcs.n	8009bc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009bba:	4b17      	ldr	r3, [pc, #92]	@ (8009c18 <pvPortMalloc+0x18c>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a18      	ldr	r2, [pc, #96]	@ (8009c20 <pvPortMalloc+0x194>)
 8009bc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc4:	685a      	ldr	r2, [r3, #4]
 8009bc6:	4b13      	ldr	r3, [pc, #76]	@ (8009c14 <pvPortMalloc+0x188>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	431a      	orrs	r2, r3
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009bd6:	4b13      	ldr	r3, [pc, #76]	@ (8009c24 <pvPortMalloc+0x198>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	4a11      	ldr	r2, [pc, #68]	@ (8009c24 <pvPortMalloc+0x198>)
 8009bde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009be0:	f7fe fce2 	bl	80085a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	f003 0307 	and.w	r3, r3, #7
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00b      	beq.n	8009c06 <pvPortMalloc+0x17a>
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	60fb      	str	r3, [r7, #12]
}
 8009c00:	bf00      	nop
 8009c02:	bf00      	nop
 8009c04:	e7fd      	b.n	8009c02 <pvPortMalloc+0x176>
	return pvReturn;
 8009c06:	69fb      	ldr	r3, [r7, #28]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3728      	adds	r7, #40	@ 0x28
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	20001c2c 	.word	0x20001c2c
 8009c14:	20001c40 	.word	0x20001c40
 8009c18:	20001c30 	.word	0x20001c30
 8009c1c:	20001c24 	.word	0x20001c24
 8009c20:	20001c34 	.word	0x20001c34
 8009c24:	20001c38 	.word	0x20001c38

08009c28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d04f      	beq.n	8009cda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c3a:	2308      	movs	r3, #8
 8009c3c:	425b      	negs	r3, r3
 8009c3e:	697a      	ldr	r2, [r7, #20]
 8009c40:	4413      	add	r3, r2
 8009c42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	4b25      	ldr	r3, [pc, #148]	@ (8009ce4 <vPortFree+0xbc>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4013      	ands	r3, r2
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10b      	bne.n	8009c6e <vPortFree+0x46>
	__asm volatile
 8009c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	60fb      	str	r3, [r7, #12]
}
 8009c68:	bf00      	nop
 8009c6a:	bf00      	nop
 8009c6c:	e7fd      	b.n	8009c6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00b      	beq.n	8009c8e <vPortFree+0x66>
	__asm volatile
 8009c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c7a:	f383 8811 	msr	BASEPRI, r3
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f3bf 8f4f 	dsb	sy
 8009c86:	60bb      	str	r3, [r7, #8]
}
 8009c88:	bf00      	nop
 8009c8a:	bf00      	nop
 8009c8c:	e7fd      	b.n	8009c8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	685a      	ldr	r2, [r3, #4]
 8009c92:	4b14      	ldr	r3, [pc, #80]	@ (8009ce4 <vPortFree+0xbc>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4013      	ands	r3, r2
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d01e      	beq.n	8009cda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d11a      	bne.n	8009cda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	685a      	ldr	r2, [r3, #4]
 8009ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8009ce4 <vPortFree+0xbc>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	43db      	mvns	r3, r3
 8009cae:	401a      	ands	r2, r3
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009cb4:	f7fe fc6a 	bl	800858c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	685a      	ldr	r2, [r3, #4]
 8009cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8009ce8 <vPortFree+0xc0>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	4a09      	ldr	r2, [pc, #36]	@ (8009ce8 <vPortFree+0xc0>)
 8009cc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cc6:	6938      	ldr	r0, [r7, #16]
 8009cc8:	f000 f874 	bl	8009db4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ccc:	4b07      	ldr	r3, [pc, #28]	@ (8009cec <vPortFree+0xc4>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	4a06      	ldr	r2, [pc, #24]	@ (8009cec <vPortFree+0xc4>)
 8009cd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009cd6:	f7fe fc67 	bl	80085a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cda:	bf00      	nop
 8009cdc:	3718      	adds	r7, #24
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20001c40 	.word	0x20001c40
 8009ce8:	20001c30 	.word	0x20001c30
 8009cec:	20001c3c 	.word	0x20001c3c

08009cf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b085      	sub	sp, #20
 8009cf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cf6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009cfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009cfc:	4b27      	ldr	r3, [pc, #156]	@ (8009d9c <prvHeapInit+0xac>)
 8009cfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f003 0307 	and.w	r3, r3, #7
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00c      	beq.n	8009d24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	3307      	adds	r3, #7
 8009d0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f023 0307 	bic.w	r3, r3, #7
 8009d16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	1ad3      	subs	r3, r2, r3
 8009d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8009d9c <prvHeapInit+0xac>)
 8009d20:	4413      	add	r3, r2
 8009d22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d28:	4a1d      	ldr	r2, [pc, #116]	@ (8009da0 <prvHeapInit+0xb0>)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8009da0 <prvHeapInit+0xb0>)
 8009d30:	2200      	movs	r2, #0
 8009d32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	68ba      	ldr	r2, [r7, #8]
 8009d38:	4413      	add	r3, r2
 8009d3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d3c:	2208      	movs	r2, #8
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	1a9b      	subs	r3, r3, r2
 8009d42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f023 0307 	bic.w	r3, r3, #7
 8009d4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	4a15      	ldr	r2, [pc, #84]	@ (8009da4 <prvHeapInit+0xb4>)
 8009d50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d52:	4b14      	ldr	r3, [pc, #80]	@ (8009da4 <prvHeapInit+0xb4>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2200      	movs	r2, #0
 8009d58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d5a:	4b12      	ldr	r3, [pc, #72]	@ (8009da4 <prvHeapInit+0xb4>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	1ad2      	subs	r2, r2, r3
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d70:	4b0c      	ldr	r3, [pc, #48]	@ (8009da4 <prvHeapInit+0xb4>)
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8009da8 <prvHeapInit+0xb8>)
 8009d7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	4a09      	ldr	r2, [pc, #36]	@ (8009dac <prvHeapInit+0xbc>)
 8009d86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d88:	4b09      	ldr	r3, [pc, #36]	@ (8009db0 <prvHeapInit+0xc0>)
 8009d8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009d8e:	601a      	str	r2, [r3, #0]
}
 8009d90:	bf00      	nop
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr
 8009d9c:	2000106c 	.word	0x2000106c
 8009da0:	20001c24 	.word	0x20001c24
 8009da4:	20001c2c 	.word	0x20001c2c
 8009da8:	20001c34 	.word	0x20001c34
 8009dac:	20001c30 	.word	0x20001c30
 8009db0:	20001c40 	.word	0x20001c40

08009db4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009dbc:	4b28      	ldr	r3, [pc, #160]	@ (8009e60 <prvInsertBlockIntoFreeList+0xac>)
 8009dbe:	60fb      	str	r3, [r7, #12]
 8009dc0:	e002      	b.n	8009dc8 <prvInsertBlockIntoFreeList+0x14>
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	60fb      	str	r3, [r7, #12]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d8f7      	bhi.n	8009dc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	4413      	add	r3, r2
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d108      	bne.n	8009df6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	685a      	ldr	r2, [r3, #4]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	441a      	add	r2, r3
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	441a      	add	r2, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d118      	bne.n	8009e3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	4b15      	ldr	r3, [pc, #84]	@ (8009e64 <prvInsertBlockIntoFreeList+0xb0>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d00d      	beq.n	8009e32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	685a      	ldr	r2, [r3, #4]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	441a      	add	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	601a      	str	r2, [r3, #0]
 8009e30:	e008      	b.n	8009e44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e32:	4b0c      	ldr	r3, [pc, #48]	@ (8009e64 <prvInsertBlockIntoFreeList+0xb0>)
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	601a      	str	r2, [r3, #0]
 8009e3a:	e003      	b.n	8009e44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d002      	beq.n	8009e52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e52:	bf00      	nop
 8009e54:	3714      	adds	r7, #20
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	20001c24 	.word	0x20001c24
 8009e64:	20001c2c 	.word	0x20001c2c

08009e68 <memset>:
 8009e68:	4402      	add	r2, r0
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d100      	bne.n	8009e72 <memset+0xa>
 8009e70:	4770      	bx	lr
 8009e72:	f803 1b01 	strb.w	r1, [r3], #1
 8009e76:	e7f9      	b.n	8009e6c <memset+0x4>

08009e78 <_reclaim_reent>:
 8009e78:	4b29      	ldr	r3, [pc, #164]	@ (8009f20 <_reclaim_reent+0xa8>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4283      	cmp	r3, r0
 8009e7e:	b570      	push	{r4, r5, r6, lr}
 8009e80:	4604      	mov	r4, r0
 8009e82:	d04b      	beq.n	8009f1c <_reclaim_reent+0xa4>
 8009e84:	69c3      	ldr	r3, [r0, #28]
 8009e86:	b1ab      	cbz	r3, 8009eb4 <_reclaim_reent+0x3c>
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	b16b      	cbz	r3, 8009ea8 <_reclaim_reent+0x30>
 8009e8c:	2500      	movs	r5, #0
 8009e8e:	69e3      	ldr	r3, [r4, #28]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	5959      	ldr	r1, [r3, r5]
 8009e94:	2900      	cmp	r1, #0
 8009e96:	d13b      	bne.n	8009f10 <_reclaim_reent+0x98>
 8009e98:	3504      	adds	r5, #4
 8009e9a:	2d80      	cmp	r5, #128	@ 0x80
 8009e9c:	d1f7      	bne.n	8009e8e <_reclaim_reent+0x16>
 8009e9e:	69e3      	ldr	r3, [r4, #28]
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	68d9      	ldr	r1, [r3, #12]
 8009ea4:	f000 f872 	bl	8009f8c <_free_r>
 8009ea8:	69e3      	ldr	r3, [r4, #28]
 8009eaa:	6819      	ldr	r1, [r3, #0]
 8009eac:	b111      	cbz	r1, 8009eb4 <_reclaim_reent+0x3c>
 8009eae:	4620      	mov	r0, r4
 8009eb0:	f000 f86c 	bl	8009f8c <_free_r>
 8009eb4:	6961      	ldr	r1, [r4, #20]
 8009eb6:	b111      	cbz	r1, 8009ebe <_reclaim_reent+0x46>
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f000 f867 	bl	8009f8c <_free_r>
 8009ebe:	69e1      	ldr	r1, [r4, #28]
 8009ec0:	b111      	cbz	r1, 8009ec8 <_reclaim_reent+0x50>
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f000 f862 	bl	8009f8c <_free_r>
 8009ec8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009eca:	b111      	cbz	r1, 8009ed2 <_reclaim_reent+0x5a>
 8009ecc:	4620      	mov	r0, r4
 8009ece:	f000 f85d 	bl	8009f8c <_free_r>
 8009ed2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ed4:	b111      	cbz	r1, 8009edc <_reclaim_reent+0x64>
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f000 f858 	bl	8009f8c <_free_r>
 8009edc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009ede:	b111      	cbz	r1, 8009ee6 <_reclaim_reent+0x6e>
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f000 f853 	bl	8009f8c <_free_r>
 8009ee6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009ee8:	b111      	cbz	r1, 8009ef0 <_reclaim_reent+0x78>
 8009eea:	4620      	mov	r0, r4
 8009eec:	f000 f84e 	bl	8009f8c <_free_r>
 8009ef0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009ef2:	b111      	cbz	r1, 8009efa <_reclaim_reent+0x82>
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f000 f849 	bl	8009f8c <_free_r>
 8009efa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009efc:	b111      	cbz	r1, 8009f04 <_reclaim_reent+0x8c>
 8009efe:	4620      	mov	r0, r4
 8009f00:	f000 f844 	bl	8009f8c <_free_r>
 8009f04:	6a23      	ldr	r3, [r4, #32]
 8009f06:	b14b      	cbz	r3, 8009f1c <_reclaim_reent+0xa4>
 8009f08:	4620      	mov	r0, r4
 8009f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f0e:	4718      	bx	r3
 8009f10:	680e      	ldr	r6, [r1, #0]
 8009f12:	4620      	mov	r0, r4
 8009f14:	f000 f83a 	bl	8009f8c <_free_r>
 8009f18:	4631      	mov	r1, r6
 8009f1a:	e7bb      	b.n	8009e94 <_reclaim_reent+0x1c>
 8009f1c:	bd70      	pop	{r4, r5, r6, pc}
 8009f1e:	bf00      	nop
 8009f20:	20000014 	.word	0x20000014

08009f24 <__libc_init_array>:
 8009f24:	b570      	push	{r4, r5, r6, lr}
 8009f26:	4d0d      	ldr	r5, [pc, #52]	@ (8009f5c <__libc_init_array+0x38>)
 8009f28:	4c0d      	ldr	r4, [pc, #52]	@ (8009f60 <__libc_init_array+0x3c>)
 8009f2a:	1b64      	subs	r4, r4, r5
 8009f2c:	10a4      	asrs	r4, r4, #2
 8009f2e:	2600      	movs	r6, #0
 8009f30:	42a6      	cmp	r6, r4
 8009f32:	d109      	bne.n	8009f48 <__libc_init_array+0x24>
 8009f34:	4d0b      	ldr	r5, [pc, #44]	@ (8009f64 <__libc_init_array+0x40>)
 8009f36:	4c0c      	ldr	r4, [pc, #48]	@ (8009f68 <__libc_init_array+0x44>)
 8009f38:	f000 f87e 	bl	800a038 <_init>
 8009f3c:	1b64      	subs	r4, r4, r5
 8009f3e:	10a4      	asrs	r4, r4, #2
 8009f40:	2600      	movs	r6, #0
 8009f42:	42a6      	cmp	r6, r4
 8009f44:	d105      	bne.n	8009f52 <__libc_init_array+0x2e>
 8009f46:	bd70      	pop	{r4, r5, r6, pc}
 8009f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f4c:	4798      	blx	r3
 8009f4e:	3601      	adds	r6, #1
 8009f50:	e7ee      	b.n	8009f30 <__libc_init_array+0xc>
 8009f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f56:	4798      	blx	r3
 8009f58:	3601      	adds	r6, #1
 8009f5a:	e7f2      	b.n	8009f42 <__libc_init_array+0x1e>
 8009f5c:	0800a17c 	.word	0x0800a17c
 8009f60:	0800a17c 	.word	0x0800a17c
 8009f64:	0800a17c 	.word	0x0800a17c
 8009f68:	0800a180 	.word	0x0800a180

08009f6c <__retarget_lock_acquire_recursive>:
 8009f6c:	4770      	bx	lr

08009f6e <__retarget_lock_release_recursive>:
 8009f6e:	4770      	bx	lr

08009f70 <memcpy>:
 8009f70:	440a      	add	r2, r1
 8009f72:	4291      	cmp	r1, r2
 8009f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f78:	d100      	bne.n	8009f7c <memcpy+0xc>
 8009f7a:	4770      	bx	lr
 8009f7c:	b510      	push	{r4, lr}
 8009f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f86:	4291      	cmp	r1, r2
 8009f88:	d1f9      	bne.n	8009f7e <memcpy+0xe>
 8009f8a:	bd10      	pop	{r4, pc}

08009f8c <_free_r>:
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	4605      	mov	r5, r0
 8009f90:	2900      	cmp	r1, #0
 8009f92:	d041      	beq.n	800a018 <_free_r+0x8c>
 8009f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f98:	1f0c      	subs	r4, r1, #4
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	bfb8      	it	lt
 8009f9e:	18e4      	addlt	r4, r4, r3
 8009fa0:	f000 f83e 	bl	800a020 <__malloc_lock>
 8009fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800a01c <_free_r+0x90>)
 8009fa6:	6813      	ldr	r3, [r2, #0]
 8009fa8:	b933      	cbnz	r3, 8009fb8 <_free_r+0x2c>
 8009faa:	6063      	str	r3, [r4, #4]
 8009fac:	6014      	str	r4, [r2, #0]
 8009fae:	4628      	mov	r0, r5
 8009fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fb4:	f000 b83a 	b.w	800a02c <__malloc_unlock>
 8009fb8:	42a3      	cmp	r3, r4
 8009fba:	d908      	bls.n	8009fce <_free_r+0x42>
 8009fbc:	6820      	ldr	r0, [r4, #0]
 8009fbe:	1821      	adds	r1, r4, r0
 8009fc0:	428b      	cmp	r3, r1
 8009fc2:	bf01      	itttt	eq
 8009fc4:	6819      	ldreq	r1, [r3, #0]
 8009fc6:	685b      	ldreq	r3, [r3, #4]
 8009fc8:	1809      	addeq	r1, r1, r0
 8009fca:	6021      	streq	r1, [r4, #0]
 8009fcc:	e7ed      	b.n	8009faa <_free_r+0x1e>
 8009fce:	461a      	mov	r2, r3
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	b10b      	cbz	r3, 8009fd8 <_free_r+0x4c>
 8009fd4:	42a3      	cmp	r3, r4
 8009fd6:	d9fa      	bls.n	8009fce <_free_r+0x42>
 8009fd8:	6811      	ldr	r1, [r2, #0]
 8009fda:	1850      	adds	r0, r2, r1
 8009fdc:	42a0      	cmp	r0, r4
 8009fde:	d10b      	bne.n	8009ff8 <_free_r+0x6c>
 8009fe0:	6820      	ldr	r0, [r4, #0]
 8009fe2:	4401      	add	r1, r0
 8009fe4:	1850      	adds	r0, r2, r1
 8009fe6:	4283      	cmp	r3, r0
 8009fe8:	6011      	str	r1, [r2, #0]
 8009fea:	d1e0      	bne.n	8009fae <_free_r+0x22>
 8009fec:	6818      	ldr	r0, [r3, #0]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	6053      	str	r3, [r2, #4]
 8009ff2:	4408      	add	r0, r1
 8009ff4:	6010      	str	r0, [r2, #0]
 8009ff6:	e7da      	b.n	8009fae <_free_r+0x22>
 8009ff8:	d902      	bls.n	800a000 <_free_r+0x74>
 8009ffa:	230c      	movs	r3, #12
 8009ffc:	602b      	str	r3, [r5, #0]
 8009ffe:	e7d6      	b.n	8009fae <_free_r+0x22>
 800a000:	6820      	ldr	r0, [r4, #0]
 800a002:	1821      	adds	r1, r4, r0
 800a004:	428b      	cmp	r3, r1
 800a006:	bf04      	itt	eq
 800a008:	6819      	ldreq	r1, [r3, #0]
 800a00a:	685b      	ldreq	r3, [r3, #4]
 800a00c:	6063      	str	r3, [r4, #4]
 800a00e:	bf04      	itt	eq
 800a010:	1809      	addeq	r1, r1, r0
 800a012:	6021      	streq	r1, [r4, #0]
 800a014:	6054      	str	r4, [r2, #4]
 800a016:	e7ca      	b.n	8009fae <_free_r+0x22>
 800a018:	bd38      	pop	{r3, r4, r5, pc}
 800a01a:	bf00      	nop
 800a01c:	20001d80 	.word	0x20001d80

0800a020 <__malloc_lock>:
 800a020:	4801      	ldr	r0, [pc, #4]	@ (800a028 <__malloc_lock+0x8>)
 800a022:	f7ff bfa3 	b.w	8009f6c <__retarget_lock_acquire_recursive>
 800a026:	bf00      	nop
 800a028:	20001d7c 	.word	0x20001d7c

0800a02c <__malloc_unlock>:
 800a02c:	4801      	ldr	r0, [pc, #4]	@ (800a034 <__malloc_unlock+0x8>)
 800a02e:	f7ff bf9e 	b.w	8009f6e <__retarget_lock_release_recursive>
 800a032:	bf00      	nop
 800a034:	20001d7c 	.word	0x20001d7c

0800a038 <_init>:
 800a038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03a:	bf00      	nop
 800a03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a03e:	bc08      	pop	{r3}
 800a040:	469e      	mov	lr, r3
 800a042:	4770      	bx	lr

0800a044 <_fini>:
 800a044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a046:	bf00      	nop
 800a048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a04a:	bc08      	pop	{r3}
 800a04c:	469e      	mov	lr, r3
 800a04e:	4770      	bx	lr
