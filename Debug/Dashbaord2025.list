
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cab8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ec  0800cc68  0800cc68  0000dc68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d354  0800d354  0000f060  2**0
                  CONTENTS
  4 .ARM          00000008  0800d354  0800d354  0000e354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d35c  0800d35c  0000f060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d35c  0800d35c  0000e35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800d364  0800d364  0000e364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800d36c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029c8  20000060  0800d3cc  0000f060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a28  0800d3cc  0000fa28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a0aa  00000000  00000000  0000f090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000533f  00000000  00000000  0003913a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021f0  00000000  00000000  0003e480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a7c  00000000  00000000  00040670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f131  00000000  00000000  000420ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028514  00000000  00000000  0007121d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00126977  00000000  00000000  00099731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c00a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000952c  00000000  00000000  001c00ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001c9618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cc50 	.word	0x0800cc50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	0800cc50 	.word	0x0800cc50

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <_ZN14DashboardState5resetEv>:
#include "DashboardState.hpp"

void DashboardState::reset() {
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
    lightState = LIGHTS_NONE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
    oldLightState = LIGHTS_NONE;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	709a      	strb	r2, [r3, #2]

    outputPortState = 0;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2200      	movs	r2, #0
 80004f8:	70da      	strb	r2, [r3, #3]
    hornState = 0;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	711a      	strb	r2, [r3, #4]
    fanState = 0;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2200      	movs	r2, #0
 8000504:	715a      	strb	r2, [r3, #5]
    headlightState = 0;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2200      	movs	r2, #0
 800050a:	719a      	strb	r2, [r3, #6]
    pttState = 0;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2200      	movs	r2, #0
 8000510:	71da      	strb	r2, [r3, #7]
    displayState = 0;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2200      	movs	r2, #0
 8000516:	721a      	strb	r2, [r3, #8]

    bmsStatus = 0;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2200      	movs	r2, #0
 800051c:	74da      	strb	r2, [r3, #19]
    mcStatus = 0;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2200      	movs	r2, #0
 8000522:	751a      	strb	r2, [r3, #20]
    arrayStatus = 0;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	755a      	strb	r2, [r3, #21]

    old_bmsStatus = 0;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2200      	movs	r2, #0
 800052e:	759a      	strb	r2, [r3, #22]
    old_mcStatus = 0;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	75da      	strb	r2, [r3, #23]
    old_arrayStatus = 0;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	761a      	strb	r2, [r3, #24]

    uart_rx = 0;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2200      	movs	r2, #0
 8000540:	765a      	strb	r2, [r3, #25]
    old_uart_rx = 0;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	769a      	strb	r2, [r3, #26]
    updateRequested = 0;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2200      	movs	r2, #0
 800054c:	76da      	strb	r2, [r3, #27]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <_ZN14DashboardState14updateFromUARTEv>:

// gets called only when something changes in the dashboard state
void DashboardState::updateFromUART() {
 800055a:	b580      	push	{r7, lr}
 800055c:	b082      	sub	sp, #8
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]

    // uart data for lights (blinkers)
    if (uart_rx & BUTTON_HAZARD) {
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	7e5b      	ldrb	r3, [r3, #25]
 8000566:	f003 0304 	and.w	r3, r3, #4
 800056a:	2b00      	cmp	r3, #0
 800056c:	d003      	beq.n	8000576 <_ZN14DashboardState14updateFromUARTEv+0x1c>
        lightState = LIGHTS_HAZARD;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2203      	movs	r2, #3
 8000572:	701a      	strb	r2, [r3, #0]
 8000574:	e015      	b.n	80005a2 <_ZN14DashboardState14updateFromUARTEv+0x48>
    }
    else if (uart_rx & BUTTON_LEFT_TURN) {
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	7e5b      	ldrb	r3, [r3, #25]
 800057a:	f003 0308 	and.w	r3, r3, #8
 800057e:	2b00      	cmp	r3, #0
 8000580:	d003      	beq.n	800058a <_ZN14DashboardState14updateFromUARTEv+0x30>
        lightState = LIGHTS_LEFT;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]
 8000588:	e00b      	b.n	80005a2 <_ZN14DashboardState14updateFromUARTEv+0x48>
    }
    else if (uart_rx & BUTTON_RIGHT_TURN) {
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	7e5b      	ldrb	r3, [r3, #25]
 800058e:	b25b      	sxtb	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	da03      	bge.n	800059c <_ZN14DashboardState14updateFromUARTEv+0x42>
        lightState = LIGHTS_RIGHT;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2202      	movs	r2, #2
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	e002      	b.n	80005a2 <_ZN14DashboardState14updateFromUARTEv+0x48>
    }
    else {
        lightState = LIGHTS_NONE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
    }

    // if the light state has changed, reset the blink time and update the output port state
    if (oldLightState != lightState) {
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	789a      	ldrb	r2, [r3, #2]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d041      	beq.n	8000632 <_ZN14DashboardState14updateFromUARTEv+0xd8>
        lastBlinkTime = HAL_GetTick(); // reset blink time if light state changes
 80005ae:	f002 fe79 	bl	80032a4 <HAL_GetTick>
 80005b2:	4602      	mov	r2, r0
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	60da      	str	r2, [r3, #12]
        oldLightState = lightState;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	781a      	ldrb	r2, [r3, #0]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	709a      	strb	r2, [r3, #2]
        if (lightState == LIGHTS_HAZARD) {
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	d107      	bne.n	80005d8 <_ZN14DashboardState14updateFromUARTEv+0x7e>
            outputPortState |= (OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	78db      	ldrb	r3, [r3, #3]
 80005cc:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	70da      	strb	r2, [r3, #3]
 80005d6:	e02c      	b.n	8000632 <_ZN14DashboardState14updateFromUARTEv+0xd8>
        }
        else if (lightState == LIGHTS_LEFT) {
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d10e      	bne.n	80005fe <_ZN14DashboardState14updateFromUARTEv+0xa4>
            outputPortState |= OUTPUT_FL_LIGHT_CTRL;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	78db      	ldrb	r3, [r3, #3]
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	70da      	strb	r2, [r3, #3]
            outputPortState &= ~OUTPUT_FR_LIGHT_CTRL;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	78db      	ldrb	r3, [r3, #3]
 80005f2:	f023 0310 	bic.w	r3, r3, #16
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	70da      	strb	r2, [r3, #3]
 80005fc:	e019      	b.n	8000632 <_ZN14DashboardState14updateFromUARTEv+0xd8>
        }
        else if (lightState == LIGHTS_RIGHT) {
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b02      	cmp	r3, #2
 8000604:	d10e      	bne.n	8000624 <_ZN14DashboardState14updateFromUARTEv+0xca>
            outputPortState |= OUTPUT_FR_LIGHT_CTRL;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	78db      	ldrb	r3, [r3, #3]
 800060a:	f043 0310 	orr.w	r3, r3, #16
 800060e:	b2da      	uxtb	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	70da      	strb	r2, [r3, #3]
            outputPortState &= ~OUTPUT_FL_LIGHT_CTRL;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	78db      	ldrb	r3, [r3, #3]
 8000618:	f023 0320 	bic.w	r3, r3, #32
 800061c:	b2da      	uxtb	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	70da      	strb	r2, [r3, #3]
 8000622:	e006      	b.n	8000632 <_ZN14DashboardState14updateFromUARTEv+0xd8>
        }
        else {
            outputPortState &= ~(OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	78db      	ldrb	r3, [r3, #3]
 8000628:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800062c:	b2da      	uxtb	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	70da      	strb	r2, [r3, #3]
        }
    }

    // if headlight should be on  
    if (uart_rx & BUTTON_HEADLIGHTS) {
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	7e5b      	ldrb	r3, [r3, #25]
 8000636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800063a:	2b00      	cmp	r3, #0
 800063c:	d00a      	beq.n	8000654 <_ZN14DashboardState14updateFromUARTEv+0xfa>
        outputPortState |= (OUTPUT_R_HEAD_CTRL | OUTPUT_L_HEAD_CTRL);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	78db      	ldrb	r3, [r3, #3]
 8000642:	f043 030c 	orr.w	r3, r3, #12
 8000646:	b2da      	uxtb	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	70da      	strb	r2, [r3, #3]
        headlightState = 1;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2201      	movs	r2, #1
 8000650:	719a      	strb	r2, [r3, #6]
 8000652:	e009      	b.n	8000668 <_ZN14DashboardState14updateFromUARTEv+0x10e>
    }
    else  {
        outputPortState &= ~(OUTPUT_R_HEAD_CTRL | OUTPUT_L_HEAD_CTRL);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	78db      	ldrb	r3, [r3, #3]
 8000658:	f023 030c 	bic.w	r3, r3, #12
 800065c:	b2da      	uxtb	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	70da      	strb	r2, [r3, #3]
        headlightState = 0;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	719a      	strb	r2, [r3, #6]
    }

    // if horn should be on
    if (uart_rx & BUTTON_HORN) {
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	7e5b      	ldrb	r3, [r3, #25]
 800066c:	f003 0320 	and.w	r3, r3, #32
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00a      	beq.n	800068a <_ZN14DashboardState14updateFromUARTEv+0x130>
        outputPortState |= OUTPUT_HORN_CTRL;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	78db      	ldrb	r3, [r3, #3]
 8000678:	f043 0302 	orr.w	r3, r3, #2
 800067c:	b2da      	uxtb	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	70da      	strb	r2, [r3, #3]
        hornState = 1;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2201      	movs	r2, #1
 8000686:	711a      	strb	r2, [r3, #4]
 8000688:	e009      	b.n	800069e <_ZN14DashboardState14updateFromUARTEv+0x144>
    }
    else {
        outputPortState &= ~OUTPUT_HORN_CTRL;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	78db      	ldrb	r3, [r3, #3]
 800068e:	f023 0302 	bic.w	r3, r3, #2
 8000692:	b2da      	uxtb	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	70da      	strb	r2, [r3, #3]
        hornState = 0;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2200      	movs	r2, #0
 800069c:	711a      	strb	r2, [r3, #4]
    }

    // if fan should be on
    if (uart_rx & BUTTON_FAN) {
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	7e5b      	ldrb	r3, [r3, #25]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d00a      	beq.n	80006c0 <_ZN14DashboardState14updateFromUARTEv+0x166>
        outputPortState |= OUTPUT_FAN_CTRL;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	78db      	ldrb	r3, [r3, #3]
 80006ae:	f043 0301 	orr.w	r3, r3, #1
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	70da      	strb	r2, [r3, #3]
        fanState = 1;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2201      	movs	r2, #1
 80006bc:	715a      	strb	r2, [r3, #5]
 80006be:	e009      	b.n	80006d4 <_ZN14DashboardState14updateFromUARTEv+0x17a>
    }
    else {
        outputPortState &= ~OUTPUT_FAN_CTRL;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	78db      	ldrb	r3, [r3, #3]
 80006c4:	f023 0301 	bic.w	r3, r3, #1
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	70da      	strb	r2, [r3, #3]
        fanState = 0;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	715a      	strb	r2, [r3, #5]
    }

    // if PTT should be on
    if (uart_rx & BUTTON_PTT) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	7e5b      	ldrb	r3, [r3, #25]
 80006d8:	f003 0310 	and.w	r3, r3, #16
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d003      	beq.n	80006e8 <_ZN14DashboardState14updateFromUARTEv+0x18e>
        pttState = 1;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2201      	movs	r2, #1
 80006e4:	71da      	strb	r2, [r3, #7]
 80006e6:	e002      	b.n	80006ee <_ZN14DashboardState14updateFromUARTEv+0x194>
    }
    else {
        pttState = 0;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	71da      	strb	r2, [r3, #7]
    }

    // TODO: do something with displayState cause this isn't setup to go anywhere
    if (uart_rx & BUTTON_DISPLAY) {
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	7e5b      	ldrb	r3, [r3, #25]
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d003      	beq.n	8000702 <_ZN14DashboardState14updateFromUARTEv+0x1a8>
        displayState = 1;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2201      	movs	r2, #1
 80006fe:	721a      	strb	r2, [r3, #8]
    }
    else {
        displayState = 0;
    }

}
 8000700:	e002      	b.n	8000708 <_ZN14DashboardState14updateFromUARTEv+0x1ae>
        displayState = 0;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	721a      	strb	r2, [r3, #8]
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>:

HAL_StatusTypeDef DashboardState::writeToPort(TCAL9538RSVR &U7) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	uint8_t inverted = ~outputPortState;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	78db      	ldrb	r3, [r3, #3]
 800071e:	43db      	mvns	r3, r3
 8000720:	b2db      	uxtb	r3, r3
 8000722:	73fb      	strb	r3, [r7, #15]
    return TCAL9538RSVR_SetOutput(&U7, &inverted); // write to output port
 8000724:	f107 030f 	add.w	r3, r7, #15
 8000728:	4619      	mov	r1, r3
 800072a:	6838      	ldr	r0, [r7, #0]
 800072c:	f002 fd1b 	bl	8003166 <TCAL9538RSVR_SetOutput>
 8000730:	4603      	mov	r3, r0
}
 8000732:	4618      	mov	r0, r3
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <_ZN14DashboardState11blinkLightsEv>:

void DashboardState::blinkLights() {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    switch (lightState) {
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b03      	cmp	r3, #3
 800074a:	d82b      	bhi.n	80007a4 <_ZN14DashboardState11blinkLightsEv+0x68>
 800074c:	a201      	add	r2, pc, #4	@ (adr r2, 8000754 <_ZN14DashboardState11blinkLightsEv+0x18>)
 800074e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000752:	bf00      	nop
 8000754:	08000795 	.word	0x08000795
 8000758:	08000775 	.word	0x08000775
 800075c:	08000785 	.word	0x08000785
 8000760:	08000765 	.word	0x08000765
        case LIGHTS_HAZARD:
            outputPortState ^= (OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	78db      	ldrb	r3, [r3, #3]
 8000768:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 800076c:	b2da      	uxtb	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	70da      	strb	r2, [r3, #3]
            break;
 8000772:	e017      	b.n	80007a4 <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_LEFT:
            outputPortState ^= OUTPUT_FL_LIGHT_CTRL;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	78db      	ldrb	r3, [r3, #3]
 8000778:	f083 0320 	eor.w	r3, r3, #32
 800077c:	b2da      	uxtb	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	70da      	strb	r2, [r3, #3]
            break;
 8000782:	e00f      	b.n	80007a4 <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_RIGHT:
            outputPortState ^= OUTPUT_FR_LIGHT_CTRL;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	78db      	ldrb	r3, [r3, #3]
 8000788:	f083 0310 	eor.w	r3, r3, #16
 800078c:	b2da      	uxtb	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	70da      	strb	r2, [r3, #3]
            break;
 8000792:	e007      	b.n	80007a4 <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_NONE:
            outputPortState &= ~(OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	78db      	ldrb	r3, [r3, #3]
 8000798:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800079c:	b2da      	uxtb	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	70da      	strb	r2, [r3, #3]
            break;
 80007a2:	bf00      	nop
    }
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <CPP_UserSetup>:

DashboardState dashboardState; // Dashboard state object

ILI9341 screen(320, 240);

void CPP_UserSetup(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af02      	add	r7, sp, #8
    // Make sure that timer priorities are configured correctly
    HAL_Delay(10);
 80007b6:	200a      	movs	r0, #10
 80007b8:	f002 fd80 	bl	80032bc <HAL_Delay>

	dashboardState.reset(); // reset dashboard state
 80007bc:	4860      	ldr	r0, [pc, #384]	@ (8000940 <CPP_UserSetup+0x190>)
 80007be:	f7ff fe8f 	bl	80004e0 <_ZN14DashboardState5resetEv>

    dma_flag = 0;
 80007c2:	4b60      	ldr	r3, [pc, #384]	@ (8000944 <CPP_UserSetup+0x194>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
    cc_enable = 0;
 80007c8:	4b5f      	ldr	r3, [pc, #380]	@ (8000948 <CPP_UserSetup+0x198>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]

	// -------------------------
	// CAN INIT
	// -------------------------
	Init_CAN_Filter1(hcan1); // set up CAN filter for CAN1
 80007ce:	485f      	ldr	r0, [pc, #380]	@ (800094c <CPP_UserSetup+0x19c>)
 80007d0:	f000 fd70 	bl	80012b4 <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef>
	HAL_CAN_Start(&hcan1); // start CAN1
 80007d4:	485d      	ldr	r0, [pc, #372]	@ (800094c <CPP_UserSetup+0x19c>)
 80007d6:	f004 fb45 	bl	8004e64 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // enable CAN1 RX interrupt
 80007da:	2102      	movs	r1, #2
 80007dc:	485b      	ldr	r0, [pc, #364]	@ (800094c <CPP_UserSetup+0x19c>)
 80007de:	f004 fc8a 	bl	80050f6 <HAL_CAN_ActivateNotification>

	// -------------------------
	// GPIO EXPANDERS INIT
	// -------------------------

    if (TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0xFF, 0x00) != HAL_OK) { Error_Handler(); } // inputs
 80007e2:	2300      	movs	r3, #0
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	23ff      	movs	r3, #255	@ 0xff
 80007e8:	2202      	movs	r2, #2
 80007ea:	4959      	ldr	r1, [pc, #356]	@ (8000950 <CPP_UserSetup+0x1a0>)
 80007ec:	4859      	ldr	r0, [pc, #356]	@ (8000954 <CPP_UserSetup+0x1a4>)
 80007ee:	f002 fbfd 	bl	8002fec <TCAL9538RSVR_INIT>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	bf14      	ite	ne
 80007f8:	2301      	movne	r3, #1
 80007fa:	2300      	moveq	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <CPP_UserSetup+0x56>
 8000802:	f001 f993 	bl	8001b2c <Error_Handler>
    //if (TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b00111111, 0b11000000) != HAL_OK) { Error_Handler(); }
    if (TCAL9538RSVR_INIT(&U7, &hi2c4, 0x00, 0b00000000, 0b00000000) != HAL_OK) { Error_Handler(); } // output
 8000806:	2300      	movs	r3, #0
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2300      	movs	r3, #0
 800080c:	2200      	movs	r2, #0
 800080e:	4950      	ldr	r1, [pc, #320]	@ (8000950 <CPP_UserSetup+0x1a0>)
 8000810:	4851      	ldr	r0, [pc, #324]	@ (8000958 <CPP_UserSetup+0x1a8>)
 8000812:	f002 fbeb 	bl	8002fec <TCAL9538RSVR_INIT>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	bf14      	ite	ne
 800081c:	2301      	movne	r3, #1
 800081e:	2300      	moveq	r3, #0
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <CPP_UserSetup+0x7a>
 8000826:	f001 f981 	bl	8001b2c <Error_Handler>

    // set outputs to low to start
	if (dashboardState.writeToPort(U7) != HAL_OK) { Error_Handler(); }
 800082a:	494b      	ldr	r1, [pc, #300]	@ (8000958 <CPP_UserSetup+0x1a8>)
 800082c:	4844      	ldr	r0, [pc, #272]	@ (8000940 <CPP_UserSetup+0x190>)
 800082e:	f7ff ff6f 	bl	8000710 <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	bf14      	ite	ne
 8000838:	2301      	movne	r3, #1
 800083a:	2300      	moveq	r3, #0
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <CPP_UserSetup+0x96>
 8000842:	f001 f973 	bl	8001b2c <Error_Handler>

	// Set up UART4 for receiving data from the steering wheel
	HAL_UART_Receive_IT(&huart4, &dashboardState.uart_rx, 1); // enable uart interrupt
 8000846:	2201      	movs	r2, #1
 8000848:	4944      	ldr	r1, [pc, #272]	@ (800095c <CPP_UserSetup+0x1ac>)
 800084a:	4845      	ldr	r0, [pc, #276]	@ (8000960 <CPP_UserSetup+0x1b0>)
 800084c:	f007 fe84 	bl	8008558 <HAL_UART_Receive_IT>

	// -------------------------
	// SCREEN INIT 
	// -------------------------
	
    screen.Init();
 8000850:	4844      	ldr	r0, [pc, #272]	@ (8000964 <CPP_UserSetup+0x1b4>)
 8000852:	f001 fd25 	bl	80022a0 <_ZN7ILI93414InitEv>
    screen.SetRotation(3);
 8000856:	2103      	movs	r1, #3
 8000858:	4842      	ldr	r0, [pc, #264]	@ (8000964 <CPP_UserSetup+0x1b4>)
 800085a:	f002 f8ab 	bl	80029b4 <_ZN7ILI934111SetRotationEh>
    screen.ClearScreen(RGB565_WHITE);
 800085e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000862:	4840      	ldr	r0, [pc, #256]	@ (8000964 <CPP_UserSetup+0x1b4>)
 8000864:	f001 ffdb 	bl	800281e <_ZN7ILI934111ClearScreenEt>

    uint16_t x_text = 70;
 8000868:	2346      	movs	r3, #70	@ 0x46
 800086a:	81fb      	strh	r3, [r7, #14]
    uint16_t y_text = 10;
 800086c:	230a      	movs	r3, #10
 800086e:	81bb      	strh	r3, [r7, #12]
    const char* str1 = "UF Solar Gators :)\0";
 8000870:	4b3d      	ldr	r3, [pc, #244]	@ (8000968 <CPP_UserSetup+0x1b8>)
 8000872:	60bb      	str	r3, [r7, #8]
    screen.SetTextSize(2);
 8000874:	2102      	movs	r1, #2
 8000876:	483b      	ldr	r0, [pc, #236]	@ (8000964 <CPP_UserSetup+0x1b4>)
 8000878:	f002 f908 	bl	8002a8c <_ZN7ILI934111SetTextSizeEh>
    screen.DrawText(x_text, y_text, str1, RGB565_BLACK);
 800087c:	89ba      	ldrh	r2, [r7, #12]
 800087e:	89f9      	ldrh	r1, [r7, #14]
 8000880:	2300      	movs	r3, #0
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	4837      	ldr	r0, [pc, #220]	@ (8000964 <CPP_UserSetup+0x1b4>)
 8000888:	f002 fa2c 	bl	8002ce4 <_ZN7ILI93418DrawTextEttPKct>

    x_text = 55;
 800088c:	2337      	movs	r3, #55	@ 0x37
 800088e:	81fb      	strh	r3, [r7, #14]
    y_text = 170;
 8000890:	23aa      	movs	r3, #170	@ 0xaa
 8000892:	81bb      	strh	r3, [r7, #12]
    const char* str2 = "BMS    MC    Array\0";
 8000894:	4b35      	ldr	r3, [pc, #212]	@ (800096c <CPP_UserSetup+0x1bc>)
 8000896:	607b      	str	r3, [r7, #4]

    screen.SetTextSize(2);
 8000898:	2102      	movs	r1, #2
 800089a:	4832      	ldr	r0, [pc, #200]	@ (8000964 <CPP_UserSetup+0x1b4>)
 800089c:	f002 f8f6 	bl	8002a8c <_ZN7ILI934111SetTextSizeEh>
    screen.DrawText(x_text, y_text, str2, RGB565_BLACK);
 80008a0:	89ba      	ldrh	r2, [r7, #12]
 80008a2:	89f9      	ldrh	r1, [r7, #14]
 80008a4:	2300      	movs	r3, #0
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	482e      	ldr	r0, [pc, #184]	@ (8000964 <CPP_UserSetup+0x1b4>)
 80008ac:	f002 fa1a 	bl	8002ce4 <_ZN7ILI93418DrawTextEttPKct>

    screen.FillCircle(70, 210, 10, RGB565_RED);
 80008b0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	230a      	movs	r3, #10
 80008b8:	22d2      	movs	r2, #210	@ 0xd2
 80008ba:	2146      	movs	r1, #70	@ 0x46
 80008bc:	4829      	ldr	r0, [pc, #164]	@ (8000964 <CPP_UserSetup+0x1b4>)
 80008be:	f002 faef 	bl	8002ea0 <_ZN7ILI934110FillCircleEtttt>
    screen.FillCircle(150, 210, 10, RGB565_RED);
 80008c2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	230a      	movs	r3, #10
 80008ca:	22d2      	movs	r2, #210	@ 0xd2
 80008cc:	2196      	movs	r1, #150	@ 0x96
 80008ce:	4825      	ldr	r0, [pc, #148]	@ (8000964 <CPP_UserSetup+0x1b4>)
 80008d0:	f002 fae6 	bl	8002ea0 <_ZN7ILI934110FillCircleEtttt>
    screen.FillCircle(235, 210, 10, RGB565_RED);
 80008d4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	230a      	movs	r3, #10
 80008dc:	22d2      	movs	r2, #210	@ 0xd2
 80008de:	21eb      	movs	r1, #235	@ 0xeb
 80008e0:	4820      	ldr	r0, [pc, #128]	@ (8000964 <CPP_UserSetup+0x1b4>)
 80008e2:	f002 fadd 	bl	8002ea0 <_ZN7ILI934110FillCircleEtttt>

	// temp to help debug  
	const char* str3 = "HedLit Horn  Fan\0";
 80008e6:	4b22      	ldr	r3, [pc, #136]	@ (8000970 <CPP_UserSetup+0x1c0>)
 80008e8:	603b      	str	r3, [r7, #0]
    screen.SetTextSize(2);
 80008ea:	2102      	movs	r1, #2
 80008ec:	481d      	ldr	r0, [pc, #116]	@ (8000964 <CPP_UserSetup+0x1b4>)
 80008ee:	f002 f8cd 	bl	8002a8c <_ZN7ILI934111SetTextSizeEh>
    screen.DrawText(55, 80, str3, RGB565_BLACK);  // Labels above the circles
 80008f2:	2300      	movs	r3, #0
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	2250      	movs	r2, #80	@ 0x50
 80008fa:	2137      	movs	r1, #55	@ 0x37
 80008fc:	4819      	ldr	r0, [pc, #100]	@ (8000964 <CPP_UserSetup+0x1b4>)
 80008fe:	f002 f9f1 	bl	8002ce4 <_ZN7ILI93418DrawTextEttPKct>

    screen.FillCircle(70, 120, 10, RGB565_RED);   // Headlights
 8000902:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	230a      	movs	r3, #10
 800090a:	2278      	movs	r2, #120	@ 0x78
 800090c:	2146      	movs	r1, #70	@ 0x46
 800090e:	4815      	ldr	r0, [pc, #84]	@ (8000964 <CPP_UserSetup+0x1b4>)
 8000910:	f002 fac6 	bl	8002ea0 <_ZN7ILI934110FillCircleEtttt>
    screen.FillCircle(150, 120, 10, RGB565_RED);  // Horn
 8000914:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	230a      	movs	r3, #10
 800091c:	2278      	movs	r2, #120	@ 0x78
 800091e:	2196      	movs	r1, #150	@ 0x96
 8000920:	4810      	ldr	r0, [pc, #64]	@ (8000964 <CPP_UserSetup+0x1b4>)
 8000922:	f002 fabd 	bl	8002ea0 <_ZN7ILI934110FillCircleEtttt>
    screen.FillCircle(235, 120, 10, RGB565_RED);  // Fan
 8000926:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	230a      	movs	r3, #10
 800092e:	2278      	movs	r2, #120	@ 0x78
 8000930:	21eb      	movs	r1, #235	@ 0xeb
 8000932:	480c      	ldr	r0, [pc, #48]	@ (8000964 <CPP_UserSetup+0x1b4>)
 8000934:	f002 fab4 	bl	8002ea0 <_ZN7ILI934110FillCircleEtttt>
}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200000ac 	.word	0x200000ac
 8000944:	200000a8 	.word	0x200000a8
 8000948:	200000a9 	.word	0x200000a9
 800094c:	200001f8 	.word	0x200001f8
 8000950:	20000248 	.word	0x20000248
 8000954:	2000007c 	.word	0x2000007c
 8000958:	2000008c 	.word	0x2000008c
 800095c:	200000c5 	.word	0x200000c5
 8000960:	2000029c 	.word	0x2000029c
 8000964:	200000d4 	.word	0x200000d4
 8000968:	0800cc68 	.word	0x0800cc68
 800096c:	0800cc7c 	.word	0x0800cc7c
 8000970:	0800cc90 	.word	0x0800cc90

08000974 <_Z11StartTask01Pv>:


void StartTask01(void *argument)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	@ 0x30
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	2300      	movs	r3, #0
 8000982:	613b      	str	r3, [r7, #16]
	uint32_t TxMailbox = { 0 };
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]

	TxHeader.IDE = CAN_ID_EXT;
 8000988:	2304      	movs	r3, #4
 800098a:	61fb      	str	r3, [r7, #28]
	TxHeader.ExtId = CAN_ID_MITSUBA_MOTOR_REQUEST;
 800098c:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <_Z11StartTask01Pv+0x64>)
 800098e:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 1;
 8000994:	2301      	movs	r3, #1
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
	TxData[0] = 1; // bit 0 = request for frame 0
 8000998:	2301      	movs	r3, #1
 800099a:	733b      	strb	r3, [r7, #12]

  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 800099c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a4:	f005 f8d0 	bl	8005b48 <HAL_GPIO_TogglePin>
	// also send can message to request frame 0 from mitsuba motor

	HAL_StatusTypeDef status;
	status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	f107 020c 	add.w	r2, r7, #12
 80009b0:	f107 0114 	add.w	r1, r7, #20
 80009b4:	4809      	ldr	r0, [pc, #36]	@ (80009dc <_Z11StartTask01Pv+0x68>)
 80009b6:	f004 fa99 	bl	8004eec <HAL_CAN_AddTxMessage>
 80009ba:	4603      	mov	r3, r0
 80009bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (status == HAL_ERROR)
 80009c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d101      	bne.n	80009cc <_Z11StartTask01Pv+0x58>
	{
		Error_Handler();
 80009c8:	f001 f8b0 	bl	8001b2c <Error_Handler>
	}

    osDelay(500);
 80009cc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009d0:	f009 f9f4 	bl	8009dbc <osDelay>
  }
 80009d4:	e7e2      	b.n	800099c <_Z11StartTask01Pv+0x28>
 80009d6:	bf00      	nop
 80009d8:	08f89540 	.word	0x08f89540
 80009dc:	200001f8 	.word	0x200001f8

080009e0 <_Z11StartTask02Pv>:
  /* USER CODE END 5 */
}

void StartTask02(void *argument)
{
 80009e0:	b5b0      	push	{r4, r5, r7, lr}
 80009e2:	b092      	sub	sp, #72	@ 0x48
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

	uint16_t adc_var_avg = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	int HAL_CAN_BUSY = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	643b      	str	r3, [r7, #64]	@ 0x40
	uint64_t messages_sent = 0;
 80009f2:	f04f 0200 	mov.w	r2, #0
 80009f6:	f04f 0300 	mov.w	r3, #0
 80009fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	static uint8_t update_cc = 0;

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = { 0 };
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x0; // 11 bit Identifier
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8000a16:	2308      	movs	r3, #8
 8000a18:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxData[0] = 1;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	743b      	strb	r3, [r7, #16]
	uint8_t adc_data[2];



  	  // Transmit over CAN
  	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	f107 0210 	add.w	r2, r7, #16
 8000a26:	f107 0118 	add.w	r1, r7, #24
 8000a2a:	4848      	ldr	r0, [pc, #288]	@ (8000b4c <_Z11StartTask02Pv+0x16c>)
 8000a2c:	f004 fa5e 	bl	8004eec <HAL_CAN_AddTxMessage>


  for (;;)
  {

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000a30:	220a      	movs	r2, #10
 8000a32:	4947      	ldr	r1, [pc, #284]	@ (8000b50 <_Z11StartTask02Pv+0x170>)
 8000a34:	4847      	ldr	r0, [pc, #284]	@ (8000b54 <_Z11StartTask02Pv+0x174>)
 8000a36:	f002 ffef 	bl	8003a18 <HAL_ADC_Start_DMA>
	// Start ADC with DMA
	while (!(dma_flag));
 8000a3a:	bf00      	nop
 8000a3c:	4b46      	ldr	r3, [pc, #280]	@ (8000b58 <_Z11StartTask02Pv+0x178>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	bf0c      	ite	eq
 8000a46:	2301      	moveq	r3, #1
 8000a48:	2300      	movne	r3, #0
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d1f5      	bne.n	8000a3c <_Z11StartTask02Pv+0x5c>

	// Stop ADC with DMA
	HAL_ADC_Stop_DMA(&hadc1);
 8000a50:	4840      	ldr	r0, [pc, #256]	@ (8000b54 <_Z11StartTask02Pv+0x174>)
 8000a52:	f003 f89d 	bl	8003b90 <HAL_ADC_Stop_DMA>
	dma_flag = 0;
 8000a56:	4b40      	ldr	r3, [pc, #256]	@ (8000b58 <_Z11StartTask02Pv+0x178>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
	adc_var_avg = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	// Copy ADC buffer and compute average
	for (int i = 0; i < ADC_BUF_LEN; i++)
 8000a62:	2300      	movs	r3, #0
 8000a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a66:	e00b      	b.n	8000a80 <_Z11StartTask02Pv+0xa0>
	{
		adc_var_avg += adc_buf[i];
 8000a68:	4a39      	ldr	r2, [pc, #228]	@ (8000b50 <_Z11StartTask02Pv+0x170>)
 8000a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a6c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a74:	4413      	add	r3, r2
 8000a76:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	for (int i = 0; i < ADC_BUF_LEN; i++)
 8000a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a82:	2b09      	cmp	r3, #9
 8000a84:	ddf0      	ble.n	8000a68 <_Z11StartTask02Pv+0x88>
	}
	adc_var_avg /= ADC_BUF_LEN;
 8000a86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a8a:	4a34      	ldr	r2, [pc, #208]	@ (8000b5c <_Z11StartTask02Pv+0x17c>)
 8000a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a90:	08db      	lsrs	r3, r3, #3
 8000a92:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46


	adc_data[0] = adc_var_avg & 0xFF;
 8000a96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	723b      	strb	r3, [r7, #8]
	adc_data[1] = (adc_var_avg >> 8) & 0x0F;
 8000a9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000aa2:	0a1b      	lsrs	r3, r3, #8
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	f003 030f 	and.w	r3, r3, #15
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	727b      	strb	r3, [r7, #9]

	if (cc_enable)
 8000ab0:	4b2b      	ldr	r3, [pc, #172]	@ (8000b60 <_Z11StartTask02Pv+0x180>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d00b      	beq.n	8000ad0 <_Z11StartTask02Pv+0xf0>
	{
		if (update_cc)
 8000ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b64 <_Z11StartTask02Pv+0x184>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00e      	beq.n	8000ade <_Z11StartTask02Pv+0xfe>
		{
			TxData[5] = adc_data[0];
 8000ac0:	7a3b      	ldrb	r3, [r7, #8]
 8000ac2:	757b      	strb	r3, [r7, #21]
			TxData[6] = adc_data[1];
 8000ac4:	7a7b      	ldrb	r3, [r7, #9]
 8000ac6:	75bb      	strb	r3, [r7, #22]
			update_cc = 0;
 8000ac8:	4b26      	ldr	r3, [pc, #152]	@ (8000b64 <_Z11StartTask02Pv+0x184>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
 8000ace:	e006      	b.n	8000ade <_Z11StartTask02Pv+0xfe>
		}
	}
	else
	{
		TxData[5] = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	757b      	strb	r3, [r7, #21]
		TxData[6] = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	75bb      	strb	r3, [r7, #22]
		update_cc = 1;
 8000ad8:	4b22      	ldr	r3, [pc, #136]	@ (8000b64 <_Z11StartTask02Pv+0x184>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
	}


	TxData[0] = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	743b      	strb	r3, [r7, #16]
	TxData[1] = adc_data[0];
 8000ae2:	7a3b      	ldrb	r3, [r7, #8]
 8000ae4:	747b      	strb	r3, [r7, #17]
	TxData[2] = adc_data[1];
 8000ae6:	7a7b      	ldrb	r3, [r7, #9]
 8000ae8:	74bb      	strb	r3, [r7, #18]
	//Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
    // Wait until the ADC DMA completes
	  // Send CAN messages
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8000aea:	bf00      	nop
 8000aec:	4817      	ldr	r0, [pc, #92]	@ (8000b4c <_Z11StartTask02Pv+0x16c>)
 8000aee:	f004 facd 	bl	800508c <HAL_CAN_GetTxMailboxesFreeLevel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	bf0c      	ite	eq
 8000af8:	2301      	moveq	r3, #1
 8000afa:	2300      	movne	r3, #0
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d1f4      	bne.n	8000aec <_Z11StartTask02Pv+0x10c>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	f107 0210 	add.w	r2, r7, #16
 8000b0a:	f107 0118 	add.w	r1, r7, #24
 8000b0e:	480f      	ldr	r0, [pc, #60]	@ (8000b4c <_Z11StartTask02Pv+0x16c>)
 8000b10:	f004 f9ec 	bl	8004eec <HAL_CAN_AddTxMessage>
 8000b14:	4603      	mov	r3, r0
 8000b16:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	  messages_sent++;
 8000b1a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000b1e:	1c54      	adds	r4, r2, #1
 8000b20:	f143 0500 	adc.w	r5, r3, #0
 8000b24:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
	  if (status == HAL_ERROR)
 8000b28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d102      	bne.n	8000b36 <_Z11StartTask02Pv+0x156>
	  {
		  Error_Handler();
 8000b30:	f000 fffc 	bl	8001b2c <Error_Handler>
 8000b34:	e006      	b.n	8000b44 <_Z11StartTask02Pv+0x164>
	  }
	  else if (status == HAL_BUSY)
 8000b36:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d102      	bne.n	8000b44 <_Z11StartTask02Pv+0x164>
	  {
		  HAL_CAN_BUSY++;
 8000b3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b40:	3301      	adds	r3, #1
 8000b42:	643b      	str	r3, [r7, #64]	@ 0x40
	  }
    osDelay(20);
 8000b44:	2014      	movs	r0, #20
 8000b46:	f009 f939 	bl	8009dbc <osDelay>
  }
 8000b4a:	e771      	b.n	8000a30 <_Z11StartTask02Pv+0x50>
 8000b4c:	200001f8 	.word	0x200001f8
 8000b50:	20000094 	.word	0x20000094
 8000b54:	20000148 	.word	0x20000148
 8000b58:	200000a8 	.word	0x200000a8
 8000b5c:	cccccccd 	.word	0xcccccccd
 8000b60:	200000a9 	.word	0x200000a9
 8000b64:	20000144 	.word	0x20000144

08000b68 <_Z11StartTask03Pv>:
  /* USER CODE END StartTask02 */
}

void StartTask03(void *argument)
{
 8000b68:	b5b0      	push	{r4, r5, r7, lr}
 8000b6a:	b090      	sub	sp, #64	@ 0x40
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */

	int debounce_count = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int HAL_CAN_BUSY = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint64_t messages_sent = 0;
 8000b78:	f04f 0200 	mov.w	r2, #0
 8000b7c:	f04f 0300 	mov.w	r3, #0
 8000b80:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	2300      	movs	r3, #0
 8000b8a:	613b      	str	r3, [r7, #16]
	uint32_t TxMailbox = { 0 };
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = 0x7FF; // 11 bit Identifier !!Change!!
 8000b94:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b98:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8000b9e:	2308      	movs	r3, #8
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
	TxData[0] = 1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	733b      	strb	r3, [r7, #12]

	Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	4a31      	ldr	r2, [pc, #196]	@ (8000c70 <_Z11StartTask03Pv+0x108>)
 8000bac:	4931      	ldr	r1, [pc, #196]	@ (8000c74 <_Z11StartTask03Pv+0x10c>)
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fa48 	bl	8001044 <_Z19Update_CAN_Message1PhS_S_>

	/* Infinite loop */
	for(;;)
	{
	  // Read TCAL Input and update flags
	  if (GPIO_Interrupt_Triggered)
 8000bb4:	4b30      	ldr	r3, [pc, #192]	@ (8000c78 <_Z11StartTask03Pv+0x110>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d026      	beq.n	8000c0a <_Z11StartTask03Pv+0xa2>
	  {
		  if (debounce_count++ <= 2) {continue;}
 8000bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	bfd4      	ite	le
 8000bc6:	2301      	movle	r3, #1
 8000bc8:	2300      	movgt	r3, #0
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d14d      	bne.n	8000c6c <_Z11StartTask03Pv+0x104>
		  DASHBOARD_CRITICAL(
 8000bd0:	f00b fc3a 	bl	800c448 <vPortEnterCritical>
 8000bd4:	4829      	ldr	r0, [pc, #164]	@ (8000c7c <_Z11StartTask03Pv+0x114>)
 8000bd6:	f002 fa8f 	bl	80030f8 <TCAL9538RSVR_HandleInterrupt>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	bf14      	ite	ne
 8000be0:	2301      	movne	r3, #1
 8000be2:	2300      	moveq	r3, #0
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <_Z11StartTask03Pv+0x86>
 8000bea:	f000 ff9f 	bl	8001b2c <Error_Handler>
 8000bee:	f00b fc5d 	bl	800c4ac <vPortExitCritical>
		  	if (TCAL9538RSVR_HandleInterrupt(&U5) != HAL_OK) { Error_Handler(); }
		  	//if (TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK){ Error_Handler(); }
		  );

		  Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000bf2:	f107 030c 	add.w	r3, r7, #12
 8000bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8000c70 <_Z11StartTask03Pv+0x108>)
 8000bf8:	491e      	ldr	r1, [pc, #120]	@ (8000c74 <_Z11StartTask03Pv+0x10c>)
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 fa22 	bl	8001044 <_Z19Update_CAN_Message1PhS_S_>
		  GPIO_Interrupt_Triggered = 0;
 8000c00:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <_Z11StartTask03Pv+0x110>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
		  debounce_count = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  }

	  // Send CAN messages
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8000c0a:	bf00      	nop
 8000c0c:	481c      	ldr	r0, [pc, #112]	@ (8000c80 <_Z11StartTask03Pv+0x118>)
 8000c0e:	f004 fa3d 	bl	800508c <HAL_CAN_GetTxMailboxesFreeLevel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	bf0c      	ite	eq
 8000c18:	2301      	moveq	r3, #1
 8000c1a:	2300      	movne	r3, #0
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d1f4      	bne.n	8000c0c <_Z11StartTask03Pv+0xa4>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000c22:	f107 0308 	add.w	r3, r7, #8
 8000c26:	f107 020c 	add.w	r2, r7, #12
 8000c2a:	f107 0114 	add.w	r1, r7, #20
 8000c2e:	4814      	ldr	r0, [pc, #80]	@ (8000c80 <_Z11StartTask03Pv+0x118>)
 8000c30:	f004 f95c 	bl	8004eec <HAL_CAN_AddTxMessage>
 8000c34:	4603      	mov	r3, r0
 8000c36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  messages_sent++;
 8000c3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000c3e:	1c54      	adds	r4, r2, #1
 8000c40:	f143 0500 	adc.w	r5, r3, #0
 8000c44:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	  if (status == HAL_ERROR)
 8000c48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d102      	bne.n	8000c56 <_Z11StartTask03Pv+0xee>
	  {
		  Error_Handler();
 8000c50:	f000 ff6c 	bl	8001b2c <Error_Handler>
 8000c54:	e006      	b.n	8000c64 <_Z11StartTask03Pv+0xfc>
	  }
	  else if (status == HAL_BUSY)
 8000c56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d102      	bne.n	8000c64 <_Z11StartTask03Pv+0xfc>
	  {
		  HAL_CAN_BUSY++;
 8000c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c60:	3301      	adds	r3, #1
 8000c62:	63bb      	str	r3, [r7, #56]	@ 0x38
	  }
	  osDelay(50);
 8000c64:	2032      	movs	r0, #50	@ 0x32
 8000c66:	f009 f8a9 	bl	8009dbc <osDelay>
 8000c6a:	e7a3      	b.n	8000bb4 <_Z11StartTask03Pv+0x4c>
		  if (debounce_count++ <= 2) {continue;}
 8000c6c:	bf00      	nop
  }
 8000c6e:	e7a1      	b.n	8000bb4 <_Z11StartTask03Pv+0x4c>
 8000c70:	20000089 	.word	0x20000089
 8000c74:	20000081 	.word	0x20000081
 8000c78:	200000aa 	.word	0x200000aa
 8000c7c:	2000007c 	.word	0x2000007c
 8000c80:	200001f8 	.word	0x200001f8

08000c84 <_Z11StartTask04Pv>:
  /* USER CODE END StartTask03 */
}


void StartTask04(void *argument)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */

  dashboardState.lastBlinkTime = HAL_GetTick(); // initialize last blink time
 8000c8c:	f002 fb0a 	bl	80032a4 <HAL_GetTick>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a1d      	ldr	r2, [pc, #116]	@ (8000d08 <_Z11StartTask04Pv+0x84>)
 8000c94:	60d3      	str	r3, [r2, #12]

  /* Infinite loop */
  for(;;)
  {

    uint32_t currentTick = HAL_GetTick();
 8000c96:	f002 fb05 	bl	80032a4 <HAL_GetTick>
 8000c9a:	60f8      	str	r0, [r7, #12]

    if (currentTick - dashboardState.lastBlinkTime > BLINK_INTERVAL_MS)
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <_Z11StartTask04Pv+0x84>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ca8:	d909      	bls.n	8000cbe <_Z11StartTask04Pv+0x3a>
    {
      	dashboardState.lastBlinkTime = currentTick;
 8000caa:	4a17      	ldr	r2, [pc, #92]	@ (8000d08 <_Z11StartTask04Pv+0x84>)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	60d3      	str	r3, [r2, #12]
		// enter critical section because we do read-modify-write operations in that function
		DASHBOARD_CRITICAL(
 8000cb0:	f00b fbca 	bl	800c448 <vPortEnterCritical>
 8000cb4:	4814      	ldr	r0, [pc, #80]	@ (8000d08 <_Z11StartTask04Pv+0x84>)
 8000cb6:	f7ff fd41 	bl	800073c <_ZN14DashboardState11blinkLightsEv>
 8000cba:	f00b fbf7 	bl	800c4ac <vPortExitCritical>
			dashboardState.blinkLights()
	  	);
	}

	if (dashboardState.updateRequested) {
 8000cbe:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <_Z11StartTask04Pv+0x84>)
 8000cc0:	7edb      	ldrb	r3, [r3, #27]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d009      	beq.n	8000cda <_Z11StartTask04Pv+0x56>
		// enter critical section because we do read-modify-write operations in that function
		DASHBOARD_CRITICAL(
 8000cc6:	f00b fbbf 	bl	800c448 <vPortEnterCritical>
 8000cca:	480f      	ldr	r0, [pc, #60]	@ (8000d08 <_Z11StartTask04Pv+0x84>)
 8000ccc:	f7ff fc45 	bl	800055a <_ZN14DashboardState14updateFromUARTEv>
 8000cd0:	f00b fbec 	bl	800c4ac <vPortExitCritical>
			dashboardState.updateFromUART()
		);
		dashboardState.updateRequested = 0; // reset update requested flag
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <_Z11StartTask04Pv+0x84>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	76da      	strb	r2, [r3, #27]
	}

	DASHBOARD_CRITICAL(
 8000cda:	f00b fbb5 	bl	800c448 <vPortEnterCritical>
 8000cde:	490b      	ldr	r1, [pc, #44]	@ (8000d0c <_Z11StartTask04Pv+0x88>)
 8000ce0:	4809      	ldr	r0, [pc, #36]	@ (8000d08 <_Z11StartTask04Pv+0x84>)
 8000ce2:	f7ff fd15 	bl	8000710 <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	bf14      	ite	ne
 8000cec:	2301      	movne	r3, #1
 8000cee:	2300      	moveq	r3, #0
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <_Z11StartTask04Pv+0x76>
 8000cf6:	f000 ff19 	bl	8001b2c <Error_Handler>
 8000cfa:	f00b fbd7 	bl	800c4ac <vPortExitCritical>
		if (dashboardState.writeToPort(U7) != HAL_OK) { Error_Handler(); } // write to output port
	);

    osDelay(50);
 8000cfe:	2032      	movs	r0, #50	@ 0x32
 8000d00:	f009 f85c 	bl	8009dbc <osDelay>
  }
 8000d04:	e7c7      	b.n	8000c96 <_Z11StartTask04Pv+0x12>
 8000d06:	bf00      	nop
 8000d08:	200000ac 	.word	0x200000ac
 8000d0c:	2000008c 	.word	0x2000008c

08000d10 <_Z11StartTask05Pv>:
  /* USER CODE END StartTask04 */
}


void StartTask05(void *argument)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	@ 0x28
 8000d14:	af02      	add	r7, sp, #8
 8000d16:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask05 */
	uint16_t color;
	bool lightStateChanged = false;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	777b      	strb	r3, [r7, #29]
	bool bmsStatusChanged = false;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	773b      	strb	r3, [r7, #28]
	bool mcStatusChanged = false;
 8000d20:	2300      	movs	r3, #0
 8000d22:	76fb      	strb	r3, [r7, #27]
	bool arrayStatusChanged = false;
 8000d24:	2300      	movs	r3, #0
 8000d26:	76bb      	strb	r3, [r7, #26]
	bool hornStateChanged = false;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	767b      	strb	r3, [r7, #25]
	bool fanStateChanged = false;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	763b      	strb	r3, [r7, #24]
	bool headlightStateChanged = false;
 8000d30:	2300      	movs	r3, #0
 8000d32:	75fb      	strb	r3, [r7, #23]
  /* Infinite loop */
  for(;;)
  {
	DASHBOARD_CRITICAL( // critical region for all of these read-read operations that are not atomic
 8000d34:	f00b fb88 	bl	800c448 <vPortEnterCritical>
 8000d38:	4b98      	ldr	r3, [pc, #608]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000d3a:	785a      	ldrb	r2, [r3, #1]
 8000d3c:	4b97      	ldr	r3, [pc, #604]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	bf14      	ite	ne
 8000d44:	2301      	movne	r3, #1
 8000d46:	2300      	moveq	r3, #0
 8000d48:	777b      	strb	r3, [r7, #29]
 8000d4a:	4b94      	ldr	r3, [pc, #592]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000d4c:	7d9a      	ldrb	r2, [r3, #22]
 8000d4e:	4b93      	ldr	r3, [pc, #588]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000d50:	7cdb      	ldrb	r3, [r3, #19]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	bf14      	ite	ne
 8000d56:	2301      	movne	r3, #1
 8000d58:	2300      	moveq	r3, #0
 8000d5a:	773b      	strb	r3, [r7, #28]
 8000d5c:	4b8f      	ldr	r3, [pc, #572]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000d5e:	7dda      	ldrb	r2, [r3, #23]
 8000d60:	4b8e      	ldr	r3, [pc, #568]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000d62:	7d1b      	ldrb	r3, [r3, #20]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	bf14      	ite	ne
 8000d68:	2301      	movne	r3, #1
 8000d6a:	2300      	moveq	r3, #0
 8000d6c:	76fb      	strb	r3, [r7, #27]
 8000d6e:	4b8b      	ldr	r3, [pc, #556]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000d70:	7e1a      	ldrb	r2, [r3, #24]
 8000d72:	4b8a      	ldr	r3, [pc, #552]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000d74:	7d5b      	ldrb	r3, [r3, #21]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	bf14      	ite	ne
 8000d7a:	2301      	movne	r3, #1
 8000d7c:	2300      	moveq	r3, #0
 8000d7e:	76bb      	strb	r3, [r7, #26]
 8000d80:	4b86      	ldr	r3, [pc, #536]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000d82:	7c1a      	ldrb	r2, [r3, #16]
 8000d84:	4b85      	ldr	r3, [pc, #532]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000d86:	791b      	ldrb	r3, [r3, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	bf14      	ite	ne
 8000d8c:	2301      	movne	r3, #1
 8000d8e:	2300      	moveq	r3, #0
 8000d90:	767b      	strb	r3, [r7, #25]
 8000d92:	4b82      	ldr	r3, [pc, #520]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000d94:	7c5a      	ldrb	r2, [r3, #17]
 8000d96:	4b81      	ldr	r3, [pc, #516]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000d98:	795b      	ldrb	r3, [r3, #5]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	bf14      	ite	ne
 8000d9e:	2301      	movne	r3, #1
 8000da0:	2300      	moveq	r3, #0
 8000da2:	763b      	strb	r3, [r7, #24]
 8000da4:	4b7d      	ldr	r3, [pc, #500]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000da6:	7c9a      	ldrb	r2, [r3, #18]
 8000da8:	4b7c      	ldr	r3, [pc, #496]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000daa:	799b      	ldrb	r3, [r3, #6]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	bf14      	ite	ne
 8000db0:	2301      	movne	r3, #1
 8000db2:	2300      	moveq	r3, #0
 8000db4:	75fb      	strb	r3, [r7, #23]
 8000db6:	4b79      	ldr	r3, [pc, #484]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000db8:	781a      	ldrb	r2, [r3, #0]
 8000dba:	4b78      	ldr	r3, [pc, #480]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000dbc:	705a      	strb	r2, [r3, #1]
 8000dbe:	4b77      	ldr	r3, [pc, #476]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000dc0:	7cda      	ldrb	r2, [r3, #19]
 8000dc2:	4b76      	ldr	r3, [pc, #472]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000dc4:	759a      	strb	r2, [r3, #22]
 8000dc6:	4b75      	ldr	r3, [pc, #468]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000dc8:	7d1a      	ldrb	r2, [r3, #20]
 8000dca:	4b74      	ldr	r3, [pc, #464]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000dcc:	75da      	strb	r2, [r3, #23]
 8000dce:	4b73      	ldr	r3, [pc, #460]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000dd0:	7d5a      	ldrb	r2, [r3, #21]
 8000dd2:	4b72      	ldr	r3, [pc, #456]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000dd4:	761a      	strb	r2, [r3, #24]
 8000dd6:	4b71      	ldr	r3, [pc, #452]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000dd8:	791a      	ldrb	r2, [r3, #4]
 8000dda:	4b70      	ldr	r3, [pc, #448]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000ddc:	741a      	strb	r2, [r3, #16]
 8000dde:	4b6f      	ldr	r3, [pc, #444]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000de0:	795a      	ldrb	r2, [r3, #5]
 8000de2:	4b6e      	ldr	r3, [pc, #440]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000de4:	745a      	strb	r2, [r3, #17]
 8000de6:	4b6d      	ldr	r3, [pc, #436]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000de8:	799a      	ldrb	r2, [r3, #6]
 8000dea:	4b6c      	ldr	r3, [pc, #432]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000dec:	749a      	strb	r2, [r3, #18]
 8000dee:	f00b fb5d 	bl	800c4ac <vPortExitCritical>
		dashboardState.oldHornState = dashboardState.hornState;
		dashboardState.oldFanState = dashboardState.fanState;
		dashboardState.oldHeadlightState = dashboardState.headlightState;
	); // end critical section

	if(lightStateChanged){
 8000df2:	7f7b      	ldrb	r3, [r7, #29]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d06e      	beq.n	8000ed6 <_Z11StartTask05Pv+0x1c6>
		HAL_Delay(1);
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f002 fa5f 	bl	80032bc <HAL_Delay>
		if(dashboardState.lightState == LIGHTS_LEFT){
 8000dfe:	4b67      	ldr	r3, [pc, #412]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d116      	bne.n	8000e34 <_Z11StartTask05Pv+0x124>
			color = RGB565_GREEN;
 8000e06:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e0a:	83fb      	strh	r3, [r7, #30]
			screen.FillCircle(20, 20, 10, color);
 8000e0c:	8bfb      	ldrh	r3, [r7, #30]
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	230a      	movs	r3, #10
 8000e12:	2214      	movs	r2, #20
 8000e14:	2114      	movs	r1, #20
 8000e16:	4862      	ldr	r0, [pc, #392]	@ (8000fa0 <_Z11StartTask05Pv+0x290>)
 8000e18:	f002 f842 	bl	8002ea0 <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_WHITE;
 8000e1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e20:	83fb      	strh	r3, [r7, #30]
			screen.FillCircle(300, 20, 10, color);
 8000e22:	8bfb      	ldrh	r3, [r7, #30]
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	230a      	movs	r3, #10
 8000e28:	2214      	movs	r2, #20
 8000e2a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000e2e:	485c      	ldr	r0, [pc, #368]	@ (8000fa0 <_Z11StartTask05Pv+0x290>)
 8000e30:	f002 f836 	bl	8002ea0 <_ZN7ILI934110FillCircleEtttt>
		}
		if(dashboardState.lightState == LIGHTS_RIGHT){
 8000e34:	4b59      	ldr	r3, [pc, #356]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d116      	bne.n	8000e6a <_Z11StartTask05Pv+0x15a>
			color = RGB565_WHITE;
 8000e3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e40:	83fb      	strh	r3, [r7, #30]
			screen.FillCircle(20, 20, 10, color);
 8000e42:	8bfb      	ldrh	r3, [r7, #30]
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	230a      	movs	r3, #10
 8000e48:	2214      	movs	r2, #20
 8000e4a:	2114      	movs	r1, #20
 8000e4c:	4854      	ldr	r0, [pc, #336]	@ (8000fa0 <_Z11StartTask05Pv+0x290>)
 8000e4e:	f002 f827 	bl	8002ea0 <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_GREEN;
 8000e52:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e56:	83fb      	strh	r3, [r7, #30]
			screen.FillCircle(300, 20, 10, color);
 8000e58:	8bfb      	ldrh	r3, [r7, #30]
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	230a      	movs	r3, #10
 8000e5e:	2214      	movs	r2, #20
 8000e60:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000e64:	484e      	ldr	r0, [pc, #312]	@ (8000fa0 <_Z11StartTask05Pv+0x290>)
 8000e66:	f002 f81b 	bl	8002ea0 <_ZN7ILI934110FillCircleEtttt>
		}
		if(dashboardState.lightState == LIGHTS_HAZARD){
 8000e6a:	4b4c      	ldr	r3, [pc, #304]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d116      	bne.n	8000ea0 <_Z11StartTask05Pv+0x190>
			color = RGB565_GREEN;
 8000e72:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e76:	83fb      	strh	r3, [r7, #30]
			screen.FillCircle(20, 20, 10, color);
 8000e78:	8bfb      	ldrh	r3, [r7, #30]
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	230a      	movs	r3, #10
 8000e7e:	2214      	movs	r2, #20
 8000e80:	2114      	movs	r1, #20
 8000e82:	4847      	ldr	r0, [pc, #284]	@ (8000fa0 <_Z11StartTask05Pv+0x290>)
 8000e84:	f002 f80c 	bl	8002ea0 <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_GREEN;
 8000e88:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e8c:	83fb      	strh	r3, [r7, #30]
			screen.FillCircle(300, 20, 10, color);
 8000e8e:	8bfb      	ldrh	r3, [r7, #30]
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	230a      	movs	r3, #10
 8000e94:	2214      	movs	r2, #20
 8000e96:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000e9a:	4841      	ldr	r0, [pc, #260]	@ (8000fa0 <_Z11StartTask05Pv+0x290>)
 8000e9c:	f002 f800 	bl	8002ea0 <_ZN7ILI934110FillCircleEtttt>
		}
		if(dashboardState.lightState == LIGHTS_NONE){
 8000ea0:	4b3e      	ldr	r3, [pc, #248]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d116      	bne.n	8000ed6 <_Z11StartTask05Pv+0x1c6>

			color = RGB565_WHITE;
 8000ea8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000eac:	83fb      	strh	r3, [r7, #30]
			screen.FillCircle(20, 20, 10, color);
 8000eae:	8bfb      	ldrh	r3, [r7, #30]
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	230a      	movs	r3, #10
 8000eb4:	2214      	movs	r2, #20
 8000eb6:	2114      	movs	r1, #20
 8000eb8:	4839      	ldr	r0, [pc, #228]	@ (8000fa0 <_Z11StartTask05Pv+0x290>)
 8000eba:	f001 fff1 	bl	8002ea0 <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_WHITE;
 8000ebe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ec2:	83fb      	strh	r3, [r7, #30]
			screen.FillCircle(300, 20, 10, color);
 8000ec4:	8bfb      	ldrh	r3, [r7, #30]
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	230a      	movs	r3, #10
 8000eca:	2214      	movs	r2, #20
 8000ecc:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000ed0:	4833      	ldr	r0, [pc, #204]	@ (8000fa0 <_Z11StartTask05Pv+0x290>)
 8000ed2:	f001 ffe5 	bl	8002ea0 <_ZN7ILI934110FillCircleEtttt>
		}
	}
	if(bmsStatusChanged){
 8000ed6:	7f3b      	ldrb	r3, [r7, #28]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d012      	beq.n	8000f02 <_Z11StartTask05Pv+0x1f2>
		if (dashboardState.bmsStatus) color = RGB565_GREEN;
 8000edc:	4b2f      	ldr	r3, [pc, #188]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000ede:	7cdb      	ldrb	r3, [r3, #19]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <_Z11StartTask05Pv+0x1dc>
 8000ee4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000ee8:	83fb      	strh	r3, [r7, #30]
 8000eea:	e002      	b.n	8000ef2 <_Z11StartTask05Pv+0x1e2>
		else color = RGB565_RED;
 8000eec:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000ef0:	83fb      	strh	r3, [r7, #30]
		screen.FillCircle(70, 210, 10, color);
 8000ef2:	8bfb      	ldrh	r3, [r7, #30]
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	230a      	movs	r3, #10
 8000ef8:	22d2      	movs	r2, #210	@ 0xd2
 8000efa:	2146      	movs	r1, #70	@ 0x46
 8000efc:	4828      	ldr	r0, [pc, #160]	@ (8000fa0 <_Z11StartTask05Pv+0x290>)
 8000efe:	f001 ffcf 	bl	8002ea0 <_ZN7ILI934110FillCircleEtttt>
	}
	if(mcStatusChanged){
 8000f02:	7efb      	ldrb	r3, [r7, #27]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d012      	beq.n	8000f2e <_Z11StartTask05Pv+0x21e>
		if (dashboardState.mcStatus) color = RGB565_GREEN;
 8000f08:	4b24      	ldr	r3, [pc, #144]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000f0a:	7d1b      	ldrb	r3, [r3, #20]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <_Z11StartTask05Pv+0x208>
 8000f10:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000f14:	83fb      	strh	r3, [r7, #30]
 8000f16:	e002      	b.n	8000f1e <_Z11StartTask05Pv+0x20e>
		else color = RGB565_RED;
 8000f18:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000f1c:	83fb      	strh	r3, [r7, #30]
		screen.FillCircle(150, 210, 10, color);
 8000f1e:	8bfb      	ldrh	r3, [r7, #30]
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	230a      	movs	r3, #10
 8000f24:	22d2      	movs	r2, #210	@ 0xd2
 8000f26:	2196      	movs	r1, #150	@ 0x96
 8000f28:	481d      	ldr	r0, [pc, #116]	@ (8000fa0 <_Z11StartTask05Pv+0x290>)
 8000f2a:	f001 ffb9 	bl	8002ea0 <_ZN7ILI934110FillCircleEtttt>
	}
	if(arrayStatusChanged){
 8000f2e:	7ebb      	ldrb	r3, [r7, #26]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d012      	beq.n	8000f5a <_Z11StartTask05Pv+0x24a>
		if (dashboardState.arrayStatus) color = RGB565_GREEN;
 8000f34:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000f36:	7d5b      	ldrb	r3, [r3, #21]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <_Z11StartTask05Pv+0x234>
 8000f3c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000f40:	83fb      	strh	r3, [r7, #30]
 8000f42:	e002      	b.n	8000f4a <_Z11StartTask05Pv+0x23a>
		else color = RGB565_RED;
 8000f44:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000f48:	83fb      	strh	r3, [r7, #30]
		screen.FillCircle(235, 210, 10, color);
 8000f4a:	8bfb      	ldrh	r3, [r7, #30]
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	230a      	movs	r3, #10
 8000f50:	22d2      	movs	r2, #210	@ 0xd2
 8000f52:	21eb      	movs	r1, #235	@ 0xeb
 8000f54:	4812      	ldr	r0, [pc, #72]	@ (8000fa0 <_Z11StartTask05Pv+0x290>)
 8000f56:	f001 ffa3 	bl	8002ea0 <_ZN7ILI934110FillCircleEtttt>
	}

	// temp debug stuff
	if (hornStateChanged) {
 8000f5a:	7e7b      	ldrb	r3, [r7, #25]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d012      	beq.n	8000f86 <_Z11StartTask05Pv+0x276>
		if (dashboardState.hornState) color = RGB565_GREEN;
 8000f60:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000f62:	791b      	ldrb	r3, [r3, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <_Z11StartTask05Pv+0x260>
 8000f68:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000f6c:	83fb      	strh	r3, [r7, #30]
 8000f6e:	e002      	b.n	8000f76 <_Z11StartTask05Pv+0x266>
		else color = RGB565_RED;
 8000f70:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000f74:	83fb      	strh	r3, [r7, #30]
		screen.FillCircle(150, 120, 10, color);
 8000f76:	8bfb      	ldrh	r3, [r7, #30]
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	230a      	movs	r3, #10
 8000f7c:	2278      	movs	r2, #120	@ 0x78
 8000f7e:	2196      	movs	r1, #150	@ 0x96
 8000f80:	4807      	ldr	r0, [pc, #28]	@ (8000fa0 <_Z11StartTask05Pv+0x290>)
 8000f82:	f001 ff8d 	bl	8002ea0 <_ZN7ILI934110FillCircleEtttt>
	}
	if (fanStateChanged) {
 8000f86:	7e3b      	ldrb	r3, [r7, #24]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d016      	beq.n	8000fba <_Z11StartTask05Pv+0x2aa>
		if (dashboardState.fanState) color = RGB565_GREEN;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <_Z11StartTask05Pv+0x28c>)
 8000f8e:	795b      	ldrb	r3, [r3, #5]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d007      	beq.n	8000fa4 <_Z11StartTask05Pv+0x294>
 8000f94:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000f98:	83fb      	strh	r3, [r7, #30]
 8000f9a:	e006      	b.n	8000faa <_Z11StartTask05Pv+0x29a>
 8000f9c:	200000ac 	.word	0x200000ac
 8000fa0:	200000d4 	.word	0x200000d4
		else color = RGB565_RED;
 8000fa4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000fa8:	83fb      	strh	r3, [r7, #30]
		screen.FillCircle(235, 120, 10, color);
 8000faa:	8bfb      	ldrh	r3, [r7, #30]
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	230a      	movs	r3, #10
 8000fb0:	2278      	movs	r2, #120	@ 0x78
 8000fb2:	21eb      	movs	r1, #235	@ 0xeb
 8000fb4:	4821      	ldr	r0, [pc, #132]	@ (800103c <_Z11StartTask05Pv+0x32c>)
 8000fb6:	f001 ff73 	bl	8002ea0 <_ZN7ILI934110FillCircleEtttt>
	}
	if (headlightStateChanged) {
 8000fba:	7dfb      	ldrb	r3, [r7, #23]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d012      	beq.n	8000fe6 <_Z11StartTask05Pv+0x2d6>
		if (dashboardState.headlightState) color = RGB565_GREEN;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001040 <_Z11StartTask05Pv+0x330>)
 8000fc2:	799b      	ldrb	r3, [r3, #6]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <_Z11StartTask05Pv+0x2c0>
 8000fc8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000fcc:	83fb      	strh	r3, [r7, #30]
 8000fce:	e002      	b.n	8000fd6 <_Z11StartTask05Pv+0x2c6>
		else color = RGB565_RED;
 8000fd0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000fd4:	83fb      	strh	r3, [r7, #30]
		screen.FillCircle(70, 120, 10, color);
 8000fd6:	8bfb      	ldrh	r3, [r7, #30]
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	230a      	movs	r3, #10
 8000fdc:	2278      	movs	r2, #120	@ 0x78
 8000fde:	2146      	movs	r1, #70	@ 0x46
 8000fe0:	4816      	ldr	r0, [pc, #88]	@ (800103c <_Z11StartTask05Pv+0x32c>)
 8000fe2:	f001 ff5d 	bl	8002ea0 <_ZN7ILI934110FillCircleEtttt>
	}

	// always display velocity, and power
	uint16_t motor_rpm = (dashboardState.motor_rpm_msb << 8) | dashboardState.motor_rpm_lsb;
 8000fe6:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <_Z11StartTask05Pv+0x330>)
 8000fe8:	7fdb      	ldrb	r3, [r3, #31]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	4b14      	ldr	r3, [pc, #80]	@ (8001040 <_Z11StartTask05Pv+0x330>)
 8000ff0:	7f9b      	ldrb	r3, [r3, #30]
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	82bb      	strh	r3, [r7, #20]
	uint16_t motor_voltage = (dashboardState.motor_voltage_msb << 8) | dashboardState.motor_voltage_lsb;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <_Z11StartTask05Pv+0x330>)
 8000ffc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	b21a      	sxth	r2, r3
 8001004:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <_Z11StartTask05Pv+0x330>)
 8001006:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800100a:	b21b      	sxth	r3, r3
 800100c:	4313      	orrs	r3, r2
 800100e:	b21b      	sxth	r3, r3
 8001010:	827b      	strh	r3, [r7, #18]
	uint16_t motor_current = (dashboardState.motor_current_msb << 8) | dashboardState.motor_current_lsb;
 8001012:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <_Z11StartTask05Pv+0x330>)
 8001014:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	b21a      	sxth	r2, r3
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <_Z11StartTask05Pv+0x330>)
 800101e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001022:	b21b      	sxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b21b      	sxth	r3, r3
 8001028:	823b      	strh	r3, [r7, #16]
	uint8_t motor_current_direction = dashboardState.motor_current_direction;
 800102a:	4b05      	ldr	r3, [pc, #20]	@ (8001040 <_Z11StartTask05Pv+0x330>)
 800102c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001030:	73fb      	strb	r3, [r7, #15]

    osDelay(100);
 8001032:	2064      	movs	r0, #100	@ 0x64
 8001034:	f008 fec2 	bl	8009dbc <osDelay>
  }
 8001038:	e67c      	b.n	8000d34 <_Z11StartTask05Pv+0x24>
 800103a:	bf00      	nop
 800103c:	200000d4 	.word	0x200000d4
 8001040:	200000ac 	.word	0x200000ac

08001044 <_Z19Update_CAN_Message1PhS_S_>:
  /* USER CODE END StartTask05 */
}


void Update_CAN_Message1(uint8_t flags[8], uint8_t* Input1, uint8_t* Input2)
{
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]

	static uint8_t prev_input1 = 0;
	static uint8_t prev_input2 = 0;


	flags[3] = 0;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	3303      	adds	r3, #3
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
	flags[4] = 0;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3304      	adds	r3, #4
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]


	// Detect rising edges for each flag
	uint8_t risingEdges_flag1 = (~prev_input1) & *Input1;
 8001060:	4b90      	ldr	r3, [pc, #576]	@ (80012a4 <_Z19Update_CAN_Message1PhS_S_+0x260>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b25b      	sxtb	r3, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	b25a      	sxtb	r2, r3
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b25b      	sxtb	r3, r3
 8001070:	4013      	ands	r3, r2
 8001072:	b25b      	sxtb	r3, r3
 8001074:	75fb      	strb	r3, [r7, #23]
	uint8_t risingEdges_flag2 = (~prev_input2) & *Input2;
 8001076:	4b8c      	ldr	r3, [pc, #560]	@ (80012a8 <_Z19Update_CAN_Message1PhS_S_+0x264>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b25b      	sxtb	r3, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	b25a      	sxtb	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b25b      	sxtb	r3, r3
 8001086:	4013      	ands	r3, r2
 8001088:	b25b      	sxtb	r3, r3
 800108a:	75bb      	strb	r3, [r7, #22]


	flags[1] ^= CHECK_BIT(risingEdges_flag2, 4) << 0; // Main
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3301      	adds	r3, #1
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b25a      	sxtb	r2, r3
 8001094:	7dbb      	ldrb	r3, [r7, #22]
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	bf14      	ite	ne
 800109e:	2301      	movne	r3, #1
 80010a0:	2300      	moveq	r3, #0
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	4053      	eors	r3, r2
 80010a8:	b25a      	sxtb	r2, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3301      	adds	r3, #1
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 5) << 1; // Break
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3301      	adds	r3, #1
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b25a      	sxtb	r2, r3
 80010ba:	7dbb      	ldrb	r3, [r7, #22]
 80010bc:	111b      	asrs	r3, r3, #4
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	4053      	eors	r3, r2
 80010c8:	b25a      	sxtb	r2, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3301      	adds	r3, #1
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 0) << 2; // Mode
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3301      	adds	r3, #1
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b25a      	sxtb	r2, r3
 80010da:	7dbb      	ldrb	r3, [r7, #22]
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	4053      	eors	r3, r2
 80010e8:	b25a      	sxtb	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3301      	adds	r3, #1
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 5) << 3; // MC
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3301      	adds	r3, #1
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b25a      	sxtb	r2, r3
 80010fa:	7dfb      	ldrb	r3, [r7, #23]
 80010fc:	109b      	asrs	r3, r3, #2
 80010fe:	b25b      	sxtb	r3, r3
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	b25b      	sxtb	r3, r3
 8001106:	4053      	eors	r3, r2
 8001108:	b25a      	sxtb	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3301      	adds	r3, #1
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 6) << 4; // Array
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b25a      	sxtb	r2, r3
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	109b      	asrs	r3, r3, #2
 800111e:	b25b      	sxtb	r3, r3
 8001120:	f003 0310 	and.w	r3, r3, #16
 8001124:	b25b      	sxtb	r3, r3
 8001126:	4053      	eors	r3, r2
 8001128:	b25a      	sxtb	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3301      	adds	r3, #1
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 4) << 5; // Extra 1
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	3301      	adds	r3, #1
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b25a      	sxtb	r2, r3
 800113a:	7dfb      	ldrb	r3, [r7, #23]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	b25b      	sxtb	r3, r3
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	b25b      	sxtb	r3, r3
 8001146:	4053      	eors	r3, r2
 8001148:	b25a      	sxtb	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3301      	adds	r3, #1
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]
	if (dashboardState.hornState) // Horn
 8001152:	4b56      	ldr	r3, [pc, #344]	@ (80012ac <_Z19Update_CAN_Message1PhS_S_+0x268>)
 8001154:	791b      	ldrb	r3, [r3, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d009      	beq.n	800116e <_Z19Update_CAN_Message1PhS_S_+0x12a>
		flags[1] |= (1 << 6);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3301      	adds	r3, #1
 800115e:	781a      	ldrb	r2, [r3, #0]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3301      	adds	r3, #1
 8001164:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	e008      	b.n	8001180 <_Z19Update_CAN_Message1PhS_S_+0x13c>
	else
		flags[1] &= ~(1 << 6);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3301      	adds	r3, #1
 8001172:	781a      	ldrb	r2, [r3, #0]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3301      	adds	r3, #1
 8001178:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	701a      	strb	r2, [r3, #0]
	if (dashboardState.pttState) // PTT (Push to Talk)
 8001180:	4b4a      	ldr	r3, [pc, #296]	@ (80012ac <_Z19Update_CAN_Message1PhS_S_+0x268>)
 8001182:	79db      	ldrb	r3, [r3, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d009      	beq.n	800119c <_Z19Update_CAN_Message1PhS_S_+0x158>
		flags[1] |= (1 << 7);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3301      	adds	r3, #1
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3301      	adds	r3, #1
 8001192:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	701a      	strb	r2, [r3, #0]
 800119a:	e008      	b.n	80011ae <_Z19Update_CAN_Message1PhS_S_+0x16a>
	else
		flags[1] &= ~(1 << 7);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3301      	adds	r3, #1
 80011a0:	781a      	ldrb	r2, [r3, #0]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	3301      	adds	r3, #1
 80011a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	701a      	strb	r2, [r3, #0]
	/*
		NOTE:
			currently sending state of turn signal, turn signal on or off
			if wanting to send actual control of turn signal light, need to send outputPortState variable instead of lightState	
	*/
	if (dashboardState.lightState == LIGHTS_HAZARD) // Blinkers
 80011ae:	4b3f      	ldr	r3, [pc, #252]	@ (80012ac <_Z19Update_CAN_Message1PhS_S_+0x268>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d109      	bne.n	80011ca <_Z19Update_CAN_Message1PhS_S_+0x186>
		flags[2] |= (1 << 0);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3302      	adds	r3, #2
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3302      	adds	r3, #2
 80011c0:	f042 0201 	orr.w	r2, r2, #1
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	701a      	strb	r2, [r3, #0]
 80011c8:	e008      	b.n	80011dc <_Z19Update_CAN_Message1PhS_S_+0x198>
	else
		flags[2] &= ~(1 << 0);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3302      	adds	r3, #2
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	3302      	adds	r3, #2
 80011d4:	f022 0201 	bic.w	r2, r2, #1
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	701a      	strb	r2, [r3, #0]
	if (dashboardState.lightState == LIGHTS_LEFT) // Left Turn
 80011dc:	4b33      	ldr	r3, [pc, #204]	@ (80012ac <_Z19Update_CAN_Message1PhS_S_+0x268>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d109      	bne.n	80011f8 <_Z19Update_CAN_Message1PhS_S_+0x1b4>
		flags[2] |= (1 << 1);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3302      	adds	r3, #2
 80011e8:	781a      	ldrb	r2, [r3, #0]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3302      	adds	r3, #2
 80011ee:	f042 0202 	orr.w	r2, r2, #2
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	701a      	strb	r2, [r3, #0]
 80011f6:	e008      	b.n	800120a <_Z19Update_CAN_Message1PhS_S_+0x1c6>
	else
		flags[2] &= ~(1 << 1);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3302      	adds	r3, #2
 80011fc:	781a      	ldrb	r2, [r3, #0]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	3302      	adds	r3, #2
 8001202:	f022 0202 	bic.w	r2, r2, #2
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	701a      	strb	r2, [r3, #0]
	if (dashboardState.lightState == LIGHTS_RIGHT) // Right Turn
 800120a:	4b28      	ldr	r3, [pc, #160]	@ (80012ac <_Z19Update_CAN_Message1PhS_S_+0x268>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d109      	bne.n	8001226 <_Z19Update_CAN_Message1PhS_S_+0x1e2>
		flags[2] |= (1 << 2);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3302      	adds	r3, #2
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3302      	adds	r3, #2
 800121c:	f042 0204 	orr.w	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	e008      	b.n	8001238 <_Z19Update_CAN_Message1PhS_S_+0x1f4>
	else
		flags[2] &= ~(1 << 2);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3302      	adds	r3, #2
 800122a:	781a      	ldrb	r2, [r3, #0]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	3302      	adds	r3, #2
 8001230:	f022 0204 	bic.w	r2, r2, #4
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	701a      	strb	r2, [r3, #0]
	if (dashboardState.headlightState) // Headlights
 8001238:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <_Z19Update_CAN_Message1PhS_S_+0x268>)
 800123a:	799b      	ldrb	r3, [r3, #6]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d009      	beq.n	8001254 <_Z19Update_CAN_Message1PhS_S_+0x210>
		flags[2] |= (1 << 3);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	3302      	adds	r3, #2
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	3302      	adds	r3, #2
 800124a:	f042 0208 	orr.w	r2, r2, #8
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	701a      	strb	r2, [r3, #0]
 8001252:	e008      	b.n	8001266 <_Z19Update_CAN_Message1PhS_S_+0x222>
	else
		flags[2] &= ~(1 << 3);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3302      	adds	r3, #2
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3302      	adds	r3, #2
 800125e:	f022 0208 	bic.w	r2, r2, #8
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	701a      	strb	r2, [r3, #0]

	cc_enable ^= CHECK_BIT(risingEdges_flag2, 1);
 8001266:	7dbb      	ldrb	r3, [r7, #22]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf14      	ite	ne
 8001270:	2301      	movne	r3, #1
 8001272:	2300      	moveq	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	b25a      	sxtb	r2, r3
 8001278:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b25b      	sxtb	r3, r3
 800127e:	4053      	eors	r3, r2
 8001280:	b25b      	sxtb	r3, r3
 8001282:	b2da      	uxtb	r2, r3
 8001284:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 8001286:	701a      	strb	r2, [r3, #0]

	prev_input1 = *Input1;
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	781a      	ldrb	r2, [r3, #0]
 800128c:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <_Z19Update_CAN_Message1PhS_S_+0x260>)
 800128e:	701a      	strb	r2, [r3, #0]
	prev_input2 = *Input2;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	781a      	ldrb	r2, [r3, #0]
 8001294:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <_Z19Update_CAN_Message1PhS_S_+0x264>)
 8001296:	701a      	strb	r2, [r3, #0]

}
 8001298:	bf00      	nop
 800129a:	371c      	adds	r7, #28
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	20000145 	.word	0x20000145
 80012a8:	20000146 	.word	0x20000146
 80012ac:	200000ac 	.word	0x200000ac
 80012b0:	200000a9 	.word	0x200000a9

080012b4 <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef>:
	 *
	 * */
}

void Init_CAN_Filter1(CAN_HandleTypeDef &hcan1)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08c      	sub	sp, #48	@ 0x30
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80012bc:	2301      	movs	r3, #1
 80012be:	62bb      	str	r3, [r7, #40]	@ 0x28
  canfilterconfig.FilterBank = 18;
 80012c0:	2312      	movs	r3, #18
 80012c2:	61fb      	str	r3, [r7, #28]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80012c8:	2301      	movs	r3, #1
 80012ca:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80012cc:	2301      	movs	r3, #1
 80012ce:	627b      	str	r3, [r7, #36]	@ 0x24
  canfilterconfig.SlaveStartFilterBank = 20;
 80012d0:	2314      	movs	r3, #20
 80012d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // CAN ID"S TO ACCEPT GO HERE, 4 ACCEPTED IN LIST MODE
  canfilterconfig.FilterIdHigh = CAN_ID_VCU_SENSORS << 5;
 80012d4:	2340      	movs	r3, #64	@ 0x40
 80012d6:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterIdLow = CAN_ID_POWERBOARD << 5;
 80012d8:	2360      	movs	r3, #96	@ 0x60
 80012da:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMaskIdHigh = CAN_ID_BMS_POWER_CONSUM_INFO << 5;
 80012dc:	23c0      	movs	r3, #192	@ 0xc0
 80012de:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterMaskIdLow = (uint32_t)CAN_ID_MITSUBA_MOTOR_FRAME_0 << 5;
 80012e0:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef+0x44>)
 80012e2:	617b      	str	r3, [r7, #20]

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	4619      	mov	r1, r3
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f003 fcda 	bl	8004ca4 <HAL_CAN_ConfigFilter>
}
 80012f0:	bf00      	nop
 80012f2:	3730      	adds	r7, #48	@ 0x30
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	10a044a0 	.word	0x10a044a0

080012fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0c      	ldr	r2, [pc, #48]	@ (800133c <HAL_UART_RxCpltCallback+0x40>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d10c      	bne.n	8001328 <HAL_UART_RxCpltCallback+0x2c>
  	{
		if (dashboardState.uart_rx != dashboardState.old_uart_rx)
 800130e:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <HAL_UART_RxCpltCallback+0x44>)
 8001310:	7e5a      	ldrb	r2, [r3, #25]
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <HAL_UART_RxCpltCallback+0x44>)
 8001314:	7e9b      	ldrb	r3, [r3, #26]
 8001316:	429a      	cmp	r2, r3
 8001318:	d006      	beq.n	8001328 <HAL_UART_RxCpltCallback+0x2c>
		{
			dashboardState.updateRequested = 1; // set flag to update dashboard state
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <HAL_UART_RxCpltCallback+0x44>)
 800131c:	2201      	movs	r2, #1
 800131e:	76da      	strb	r2, [r3, #27]
			dashboardState.old_uart_rx = dashboardState.uart_rx;
 8001320:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <HAL_UART_RxCpltCallback+0x44>)
 8001322:	7e5a      	ldrb	r2, [r3, #25]
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_UART_RxCpltCallback+0x44>)
 8001326:	769a      	strb	r2, [r3, #26]
		}
	}
	HAL_UART_Receive_IT(&huart4, &dashboardState.uart_rx, 1);
 8001328:	2201      	movs	r2, #1
 800132a:	4906      	ldr	r1, [pc, #24]	@ (8001344 <HAL_UART_RxCpltCallback+0x48>)
 800132c:	4806      	ldr	r0, [pc, #24]	@ (8001348 <HAL_UART_RxCpltCallback+0x4c>)
 800132e:	f007 f913 	bl	8008558 <HAL_UART_Receive_IT>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40004c00 	.word	0x40004c00
 8001340:	200000ac 	.word	0x200000ac
 8001344:	200000c5 	.word	0x200000c5
 8001348:	2000029c 	.word	0x2000029c

0800134c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	dma_flag = 1;
 8001354:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	200000a8 	.word	0x200000a8

0800136c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	80fb      	strh	r3, [r7, #6]
	GPIO_Interrupt_Triggered = 1;
 8001376:	4b04      	ldr	r3, [pc, #16]	@ (8001388 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	200000aa 	.word	0x200000aa

0800138c <_Z41__static_initialization_and_destruction_0ii>:
		dashboardState.motor_voltage_msb = (motor_voltage >> 8) & 0xFF;
		dashboardState.motor_current_lsb = motor_current & 0xFF;
		dashboardState.motor_current_msb = (motor_current >> 8) & 0xFF;
		dashboardState.motor_current_direction = motor_current_direction;
	}
}
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d10a      	bne.n	80013b2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d105      	bne.n	80013b2 <_Z41__static_initialization_and_destruction_0ii+0x26>
ILI9341 screen(320, 240);
 80013a6:	22f0      	movs	r2, #240	@ 0xf0
 80013a8:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80013ac:	4808      	ldr	r0, [pc, #32]	@ (80013d0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80013ae:	f000 febd 	bl	800212c <_ZN7ILI9341C1Ess>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d107      	bne.n	80013c8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013be:	4293      	cmp	r3, r2
 80013c0:	d102      	bne.n	80013c8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80013c2:	4803      	ldr	r0, [pc, #12]	@ (80013d0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80013c4:	f000 ff4c 	bl	8002260 <_ZN7ILI9341D1Ev>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200000d4 	.word	0x200000d4

080013d4 <_GLOBAL__sub_I_U5>:
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80013dc:	2001      	movs	r0, #1
 80013de:	f7ff ffd5 	bl	800138c <_Z41__static_initialization_and_destruction_0ii>
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <_GLOBAL__sub_D_U5>:
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80013ec:	2000      	movs	r0, #0
 80013ee:	f7ff ffcd 	bl	800138c <_Z41__static_initialization_and_destruction_0ii>
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f8:	f001 ff27 	bl	800324a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fc:	f000 f868 	bl	80014d0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001400:	f000 faf4 	bl	80019ec <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001404:	f000 fad4 	bl	80019b0 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8001408:	f000 f8b8 	bl	800157c <_ZL12MX_ADC1_Initv>
  MX_I2C4_Init();
 800140c:	f000 fa4e 	bl	80018ac <_ZL12MX_I2C4_Initv>
  MX_CAN1_Init();
 8001410:	f000 f9d8 	bl	80017c4 <_ZL12MX_CAN1_Initv>
  MX_CAN2_Init();
 8001414:	f000 fa10 	bl	8001838 <_ZL12MX_CAN2_Initv>
  MX_UART4_Init();
 8001418:	f000 fa96 	bl	8001948 <_ZL13MX_UART4_Initv>
  /* USER CODE BEGIN 2 */
  
  CPP_UserSetup();
 800141c:	f7ff f9c8 	bl	80007b0 <CPP_UserSetup>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001420:	f008 fbf0 	bl	8009c04 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CAN_Mutex */
  CAN_MutexHandle = osSemaphoreNew(1, 1, &CAN_Mutex_attributes);
 8001424:	4a19      	ldr	r2, [pc, #100]	@ (800148c <main+0x98>)
 8001426:	2101      	movs	r1, #1
 8001428:	2001      	movs	r0, #1
 800142a:	f008 fce2 	bl	8009df2 <osSemaphoreNew>
 800142e:	4603      	mov	r3, r0
 8001430:	4a17      	ldr	r2, [pc, #92]	@ (8001490 <main+0x9c>)
 8001432:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartTask01, NULL, &HeartBeat_attributes);
 8001434:	4a17      	ldr	r2, [pc, #92]	@ (8001494 <main+0xa0>)
 8001436:	2100      	movs	r1, #0
 8001438:	4817      	ldr	r0, [pc, #92]	@ (8001498 <main+0xa4>)
 800143a:	f008 fc2d 	bl	8009c98 <osThreadNew>
 800143e:	4603      	mov	r3, r0
 8001440:	4a16      	ldr	r2, [pc, #88]	@ (800149c <main+0xa8>)
 8001442:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);
 8001444:	4a16      	ldr	r2, [pc, #88]	@ (80014a0 <main+0xac>)
 8001446:	2100      	movs	r1, #0
 8001448:	4816      	ldr	r0, [pc, #88]	@ (80014a4 <main+0xb0>)
 800144a:	f008 fc25 	bl	8009c98 <osThreadNew>
 800144e:	4603      	mov	r3, r0
 8001450:	4a15      	ldr	r2, [pc, #84]	@ (80014a8 <main+0xb4>)
 8001452:	6013      	str	r3, [r2, #0]

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 8001454:	4a15      	ldr	r2, [pc, #84]	@ (80014ac <main+0xb8>)
 8001456:	2100      	movs	r1, #0
 8001458:	4815      	ldr	r0, [pc, #84]	@ (80014b0 <main+0xbc>)
 800145a:	f008 fc1d 	bl	8009c98 <osThreadNew>
 800145e:	4603      	mov	r3, r0
 8001460:	4a14      	ldr	r2, [pc, #80]	@ (80014b4 <main+0xc0>)
 8001462:	6013      	str	r3, [r2, #0]

  /* creation of Outputs_Control */
  Outputs_ControlHandle = osThreadNew(StartTask04, NULL, &Outputs_Control_attributes);
 8001464:	4a14      	ldr	r2, [pc, #80]	@ (80014b8 <main+0xc4>)
 8001466:	2100      	movs	r1, #0
 8001468:	4814      	ldr	r0, [pc, #80]	@ (80014bc <main+0xc8>)
 800146a:	f008 fc15 	bl	8009c98 <osThreadNew>
 800146e:	4603      	mov	r3, r0
 8001470:	4a13      	ldr	r2, [pc, #76]	@ (80014c0 <main+0xcc>)
 8001472:	6013      	str	r3, [r2, #0]


  ScreenControlHandle = osThreadNew(StartTask05, NULL, &ScreenControl_attributes);
 8001474:	4a13      	ldr	r2, [pc, #76]	@ (80014c4 <main+0xd0>)
 8001476:	2100      	movs	r1, #0
 8001478:	4813      	ldr	r0, [pc, #76]	@ (80014c8 <main+0xd4>)
 800147a:	f008 fc0d 	bl	8009c98 <osThreadNew>
 800147e:	4603      	mov	r3, r0
 8001480:	4a12      	ldr	r2, [pc, #72]	@ (80014cc <main+0xd8>)
 8001482:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001484:	f008 fbe2 	bl	8009c4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <main+0x94>
 800148c:	0800cdc8 	.word	0x0800cdc8
 8001490:	20000338 	.word	0x20000338
 8001494:	0800cd14 	.word	0x0800cd14
 8001498:	08000975 	.word	0x08000975
 800149c:	20000324 	.word	0x20000324
 80014a0:	0800cd38 	.word	0x0800cd38
 80014a4:	080009e1 	.word	0x080009e1
 80014a8:	20000328 	.word	0x20000328
 80014ac:	0800cd5c 	.word	0x0800cd5c
 80014b0:	08000b69 	.word	0x08000b69
 80014b4:	2000032c 	.word	0x2000032c
 80014b8:	0800cd80 	.word	0x0800cd80
 80014bc:	08000c85 	.word	0x08000c85
 80014c0:	20000330 	.word	0x20000330
 80014c4:	0800cda4 	.word	0x0800cda4
 80014c8:	08000d11 	.word	0x08000d11
 80014cc:	20000334 	.word	0x20000334

080014d0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b096      	sub	sp, #88	@ 0x58
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	2244      	movs	r2, #68	@ 0x44
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f00b fada 	bl	800ca98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	463b      	mov	r3, r7
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014f6:	f005 f98b 	bl	8006810 <HAL_PWREx_ControlVoltageScaling>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	bf14      	ite	ne
 8001500:	2301      	movne	r3, #1
 8001502:	2300      	moveq	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800150a:	f000 fb0f 	bl	8001b2c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800150e:	2310      	movs	r3, #16
 8001510:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001512:	2301      	movs	r3, #1
 8001514:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800151a:	2360      	movs	r3, #96	@ 0x60
 800151c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800151e:	2300      	movs	r3, #0
 8001520:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4618      	mov	r0, r3
 8001528:	f005 f9c8 	bl	80068bc <HAL_RCC_OscConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	bf14      	ite	ne
 8001532:	2301      	movne	r3, #1
 8001534:	2300      	moveq	r3, #0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 800153c:	f000 faf6 	bl	8001b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001540:	230f      	movs	r3, #15
 8001542:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001554:	463b      	mov	r3, r7
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f005 fdc9 	bl	80070f0 <HAL_RCC_ClockConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf14      	ite	ne
 8001564:	2301      	movne	r3, #1
 8001566:	2300      	moveq	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800156e:	f000 fadd 	bl	8001b2c <Error_Handler>
  }
}
 8001572:	bf00      	nop
 8001574:	3758      	adds	r7, #88	@ 0x58
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	@ 0x28
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001582:	f107 031c 	add.w	r3, r7, #28
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
 800159c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800159e:	4b86      	ldr	r3, [pc, #536]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 80015a0:	4a86      	ldr	r2, [pc, #536]	@ (80017bc <_ZL12MX_ADC1_Initv+0x240>)
 80015a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015a4:	4b84      	ldr	r3, [pc, #528]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015aa:	4b83      	ldr	r3, [pc, #524]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015b0:	4b81      	ldr	r3, [pc, #516]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015b6:	4b80      	ldr	r3, [pc, #512]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80015bc:	4b7e      	ldr	r3, [pc, #504]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 80015be:	2208      	movs	r2, #8
 80015c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015c2:	4b7d      	ldr	r3, [pc, #500]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015c8:	4b7b      	ldr	r3, [pc, #492]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 80015ce:	4b7a      	ldr	r3, [pc, #488]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 80015d0:	220a      	movs	r2, #10
 80015d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015d4:	4b78      	ldr	r3, [pc, #480]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015dc:	4b76      	ldr	r3, [pc, #472]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015e2:	4b75      	ldr	r3, [pc, #468]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015e8:	4b73      	ldr	r3, [pc, #460]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015f0:	4b71      	ldr	r3, [pc, #452]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80015f6:	4b70      	ldr	r3, [pc, #448]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015fe:	486e      	ldr	r0, [pc, #440]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 8001600:	f002 f8b6 	bl	8003770 <HAL_ADC_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	bf14      	ite	ne
 800160a:	2301      	movne	r3, #1
 800160c:	2300      	moveq	r3, #0
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 8001614:	f000 fa8a 	bl	8001b2c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	4619      	mov	r1, r3
 8001622:	4865      	ldr	r0, [pc, #404]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 8001624:	f003 f992 	bl	800494c <HAL_ADCEx_MultiModeConfigChannel>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	bf14      	ite	ne
 800162e:	2301      	movne	r3, #1
 8001630:	2300      	moveq	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 8001638:	f000 fa78 	bl	8001b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800163c:	4b60      	ldr	r3, [pc, #384]	@ (80017c0 <_ZL12MX_ADC1_Initv+0x244>)
 800163e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001640:	2306      	movs	r3, #6
 8001642:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001648:	237f      	movs	r3, #127	@ 0x7f
 800164a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800164c:	2304      	movs	r3, #4
 800164e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	4619      	mov	r1, r3
 8001658:	4857      	ldr	r0, [pc, #348]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 800165a:	f002 fb0f 	bl	8003c7c <HAL_ADC_ConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf14      	ite	ne
 8001664:	2301      	movne	r3, #1
 8001666:	2300      	moveq	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 800166e:	f000 fa5d 	bl	8001b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001672:	230c      	movs	r3, #12
 8001674:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	4619      	mov	r1, r3
 800167a:	484f      	ldr	r0, [pc, #316]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 800167c:	f002 fafe 	bl	8003c7c <HAL_ADC_ConfigChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	bf14      	ite	ne
 8001686:	2301      	movne	r3, #1
 8001688:	2300      	moveq	r3, #0
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <_ZL12MX_ADC1_Initv+0x118>
  {
    Error_Handler();
 8001690:	f000 fa4c 	bl	8001b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001694:	2312      	movs	r3, #18
 8001696:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	4619      	mov	r1, r3
 800169c:	4846      	ldr	r0, [pc, #280]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 800169e:	f002 faed 	bl	8003c7c <HAL_ADC_ConfigChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	bf14      	ite	ne
 80016a8:	2301      	movne	r3, #1
 80016aa:	2300      	moveq	r3, #0
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <_ZL12MX_ADC1_Initv+0x13a>
  {
    Error_Handler();
 80016b2:	f000 fa3b 	bl	8001b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80016b6:	2318      	movs	r3, #24
 80016b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	4619      	mov	r1, r3
 80016be:	483e      	ldr	r0, [pc, #248]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 80016c0:	f002 fadc 	bl	8003c7c <HAL_ADC_ConfigChannel>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	bf14      	ite	ne
 80016ca:	2301      	movne	r3, #1
 80016cc:	2300      	moveq	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <_ZL12MX_ADC1_Initv+0x15c>
  {
    Error_Handler();
 80016d4:	f000 fa2a 	bl	8001b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80016d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	4619      	mov	r1, r3
 80016e2:	4835      	ldr	r0, [pc, #212]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 80016e4:	f002 faca 	bl	8003c7c <HAL_ADC_ConfigChannel>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	bf14      	ite	ne
 80016ee:	2301      	movne	r3, #1
 80016f0:	2300      	moveq	r3, #0
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <_ZL12MX_ADC1_Initv+0x180>
  {
    Error_Handler();
 80016f8:	f000 fa18 	bl	8001b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80016fc:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001700:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	4619      	mov	r1, r3
 8001706:	482c      	ldr	r0, [pc, #176]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 8001708:	f002 fab8 	bl	8003c7c <HAL_ADC_ConfigChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	bf14      	ite	ne
 8001712:	2301      	movne	r3, #1
 8001714:	2300      	moveq	r3, #0
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <_ZL12MX_ADC1_Initv+0x1a4>
  {
    Error_Handler();
 800171c:	f000 fa06 	bl	8001b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001720:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8001724:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	4619      	mov	r1, r3
 800172a:	4823      	ldr	r0, [pc, #140]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 800172c:	f002 faa6 	bl	8003c7c <HAL_ADC_ConfigChannel>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	bf14      	ite	ne
 8001736:	2301      	movne	r3, #1
 8001738:	2300      	moveq	r3, #0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <_ZL12MX_ADC1_Initv+0x1c8>
  {
    Error_Handler();
 8001740:	f000 f9f4 	bl	8001b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001744:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001748:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	4619      	mov	r1, r3
 800174e:	481a      	ldr	r0, [pc, #104]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 8001750:	f002 fa94 	bl	8003c7c <HAL_ADC_ConfigChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	bf14      	ite	ne
 800175a:	2301      	movne	r3, #1
 800175c:	2300      	moveq	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <_ZL12MX_ADC1_Initv+0x1ec>
  {
    Error_Handler();
 8001764:	f000 f9e2 	bl	8001b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001768:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800176c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	4619      	mov	r1, r3
 8001772:	4811      	ldr	r0, [pc, #68]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 8001774:	f002 fa82 	bl	8003c7c <HAL_ADC_ConfigChannel>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	bf14      	ite	ne
 800177e:	2301      	movne	r3, #1
 8001780:	2300      	moveq	r3, #0
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <_ZL12MX_ADC1_Initv+0x210>
  {
    Error_Handler();
 8001788:	f000 f9d0 	bl	8001b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800178c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001790:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	4619      	mov	r1, r3
 8001796:	4808      	ldr	r0, [pc, #32]	@ (80017b8 <_ZL12MX_ADC1_Initv+0x23c>)
 8001798:	f002 fa70 	bl	8003c7c <HAL_ADC_ConfigChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf14      	ite	ne
 80017a2:	2301      	movne	r3, #1
 80017a4:	2300      	moveq	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <_ZL12MX_ADC1_Initv+0x234>
  {
    Error_Handler();
 80017ac:	f000 f9be 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017b0:	bf00      	nop
 80017b2:	3728      	adds	r7, #40	@ 0x28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000148 	.word	0x20000148
 80017bc:	50040000 	.word	0x50040000
 80017c0:	04300002 	.word	0x04300002

080017c4 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80017c8:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <_ZL12MX_CAN1_Initv+0x6c>)
 80017ca:	4a1a      	ldr	r2, [pc, #104]	@ (8001834 <_ZL12MX_CAN1_Initv+0x70>)
 80017cc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80017ce:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <_ZL12MX_CAN1_Initv+0x6c>)
 80017d0:	2202      	movs	r2, #2
 80017d2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80017d4:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <_ZL12MX_CAN1_Initv+0x6c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017da:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <_ZL12MX_CAN1_Initv+0x6c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80017e0:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <_ZL12MX_CAN1_Initv+0x6c>)
 80017e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017e6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <_ZL12MX_CAN1_Initv+0x6c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <_ZL12MX_CAN1_Initv+0x6c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80017f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <_ZL12MX_CAN1_Initv+0x6c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80017fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <_ZL12MX_CAN1_Initv+0x6c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001800:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <_ZL12MX_CAN1_Initv+0x6c>)
 8001802:	2200      	movs	r2, #0
 8001804:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001806:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <_ZL12MX_CAN1_Initv+0x6c>)
 8001808:	2200      	movs	r2, #0
 800180a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800180c:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <_ZL12MX_CAN1_Initv+0x6c>)
 800180e:	2200      	movs	r2, #0
 8001810:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001812:	4807      	ldr	r0, [pc, #28]	@ (8001830 <_ZL12MX_CAN1_Initv+0x6c>)
 8001814:	f003 f94a 	bl	8004aac <HAL_CAN_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	bf14      	ite	ne
 800181e:	2301      	movne	r3, #1
 8001820:	2300      	moveq	r3, #0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <_ZL12MX_CAN1_Initv+0x68>
  {
    Error_Handler();
 8001828:	f000 f980 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200001f8 	.word	0x200001f8
 8001834:	40006400 	.word	0x40006400

08001838 <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800183c:	4b19      	ldr	r3, [pc, #100]	@ (80018a4 <_ZL12MX_CAN2_Initv+0x6c>)
 800183e:	4a1a      	ldr	r2, [pc, #104]	@ (80018a8 <_ZL12MX_CAN2_Initv+0x70>)
 8001840:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 8001842:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <_ZL12MX_CAN2_Initv+0x6c>)
 8001844:	2202      	movs	r2, #2
 8001846:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001848:	4b16      	ldr	r3, [pc, #88]	@ (80018a4 <_ZL12MX_CAN2_Initv+0x6c>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <_ZL12MX_CAN2_Initv+0x6c>)
 8001850:	2200      	movs	r2, #0
 8001852:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001854:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <_ZL12MX_CAN2_Initv+0x6c>)
 8001856:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800185a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <_ZL12MX_CAN2_Initv+0x6c>)
 800185e:	2200      	movs	r2, #0
 8001860:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001862:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <_ZL12MX_CAN2_Initv+0x6c>)
 8001864:	2200      	movs	r2, #0
 8001866:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001868:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <_ZL12MX_CAN2_Initv+0x6c>)
 800186a:	2200      	movs	r2, #0
 800186c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800186e:	4b0d      	ldr	r3, [pc, #52]	@ (80018a4 <_ZL12MX_CAN2_Initv+0x6c>)
 8001870:	2200      	movs	r2, #0
 8001872:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001874:	4b0b      	ldr	r3, [pc, #44]	@ (80018a4 <_ZL12MX_CAN2_Initv+0x6c>)
 8001876:	2200      	movs	r2, #0
 8001878:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800187a:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <_ZL12MX_CAN2_Initv+0x6c>)
 800187c:	2200      	movs	r2, #0
 800187e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001880:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <_ZL12MX_CAN2_Initv+0x6c>)
 8001882:	2200      	movs	r2, #0
 8001884:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001886:	4807      	ldr	r0, [pc, #28]	@ (80018a4 <_ZL12MX_CAN2_Initv+0x6c>)
 8001888:	f003 f910 	bl	8004aac <HAL_CAN_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	bf14      	ite	ne
 8001892:	2301      	movne	r3, #1
 8001894:	2300      	moveq	r3, #0
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <_ZL12MX_CAN2_Initv+0x68>
  {
    Error_Handler();
 800189c:	f000 f946 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000220 	.word	0x20000220
 80018a8:	40006800 	.word	0x40006800

080018ac <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80018b0:	4b22      	ldr	r3, [pc, #136]	@ (800193c <_ZL12MX_I2C4_Initv+0x90>)
 80018b2:	4a23      	ldr	r2, [pc, #140]	@ (8001940 <_ZL12MX_I2C4_Initv+0x94>)
 80018b4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 80018b6:	4b21      	ldr	r3, [pc, #132]	@ (800193c <_ZL12MX_I2C4_Initv+0x90>)
 80018b8:	4a22      	ldr	r2, [pc, #136]	@ (8001944 <_ZL12MX_I2C4_Initv+0x98>)
 80018ba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80018bc:	4b1f      	ldr	r3, [pc, #124]	@ (800193c <_ZL12MX_I2C4_Initv+0x90>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c2:	4b1e      	ldr	r3, [pc, #120]	@ (800193c <_ZL12MX_I2C4_Initv+0x90>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c8:	4b1c      	ldr	r3, [pc, #112]	@ (800193c <_ZL12MX_I2C4_Initv+0x90>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80018ce:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <_ZL12MX_I2C4_Initv+0x90>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018d4:	4b19      	ldr	r3, [pc, #100]	@ (800193c <_ZL12MX_I2C4_Initv+0x90>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018da:	4b18      	ldr	r3, [pc, #96]	@ (800193c <_ZL12MX_I2C4_Initv+0x90>)
 80018dc:	2200      	movs	r2, #0
 80018de:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018e0:	4b16      	ldr	r3, [pc, #88]	@ (800193c <_ZL12MX_I2C4_Initv+0x90>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80018e6:	4815      	ldr	r0, [pc, #84]	@ (800193c <_ZL12MX_I2C4_Initv+0x90>)
 80018e8:	f004 f960 	bl	8005bac <HAL_I2C_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	bf14      	ite	ne
 80018f2:	2301      	movne	r3, #1
 80018f4:	2300      	moveq	r3, #0
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 80018fc:	f000 f916 	bl	8001b2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001900:	2100      	movs	r1, #0
 8001902:	480e      	ldr	r0, [pc, #56]	@ (800193c <_ZL12MX_I2C4_Initv+0x90>)
 8001904:	f004 fede 	bl	80066c4 <HAL_I2CEx_ConfigAnalogFilter>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	bf14      	ite	ne
 800190e:	2301      	movne	r3, #1
 8001910:	2300      	moveq	r3, #0
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 8001918:	f000 f908 	bl	8001b2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800191c:	2100      	movs	r1, #0
 800191e:	4807      	ldr	r0, [pc, #28]	@ (800193c <_ZL12MX_I2C4_Initv+0x90>)
 8001920:	f004 ff1b 	bl	800675a <HAL_I2CEx_ConfigDigitalFilter>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	bf14      	ite	ne
 800192a:	2301      	movne	r3, #1
 800192c:	2300      	moveq	r3, #0
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 8001934:	f000 f8fa 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000248 	.word	0x20000248
 8001940:	40008400 	.word	0x40008400
 8001944:	00100d14 	.word	0x00100d14

08001948 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800194c:	4b16      	ldr	r3, [pc, #88]	@ (80019a8 <_ZL13MX_UART4_Initv+0x60>)
 800194e:	4a17      	ldr	r2, [pc, #92]	@ (80019ac <_ZL13MX_UART4_Initv+0x64>)
 8001950:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <_ZL13MX_UART4_Initv+0x60>)
 8001954:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001958:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800195a:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <_ZL13MX_UART4_Initv+0x60>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001960:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <_ZL13MX_UART4_Initv+0x60>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001966:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <_ZL13MX_UART4_Initv+0x60>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800196c:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <_ZL13MX_UART4_Initv+0x60>)
 800196e:	220c      	movs	r2, #12
 8001970:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001972:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <_ZL13MX_UART4_Initv+0x60>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001978:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <_ZL13MX_UART4_Initv+0x60>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800197e:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <_ZL13MX_UART4_Initv+0x60>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001984:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <_ZL13MX_UART4_Initv+0x60>)
 8001986:	2200      	movs	r2, #0
 8001988:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800198a:	4807      	ldr	r0, [pc, #28]	@ (80019a8 <_ZL13MX_UART4_Initv+0x60>)
 800198c:	f006 fd96 	bl	80084bc <HAL_UART_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	bf14      	ite	ne
 8001996:	2301      	movne	r3, #1
 8001998:	2300      	moveq	r3, #0
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 80019a0:	f000 f8c4 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2000029c 	.word	0x2000029c
 80019ac:	40004c00 	.word	0x40004c00

080019b0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019b6:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <_ZL11MX_DMA_Initv+0x38>)
 80019b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ba:	4a0b      	ldr	r2, [pc, #44]	@ (80019e8 <_ZL11MX_DMA_Initv+0x38>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80019c2:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <_ZL11MX_DMA_Initv+0x38>)
 80019c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2105      	movs	r1, #5
 80019d2:	200b      	movs	r0, #11
 80019d4:	f003 fc6e 	bl	80052b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019d8:	200b      	movs	r0, #11
 80019da:	f003 fc87 	bl	80052ec <HAL_NVIC_EnableIRQ>

}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000

080019ec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a02:	4b3e      	ldr	r3, [pc, #248]	@ (8001afc <_ZL12MX_GPIO_Initv+0x110>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a06:	4a3d      	ldr	r2, [pc, #244]	@ (8001afc <_ZL12MX_GPIO_Initv+0x110>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001afc <_ZL12MX_GPIO_Initv+0x110>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	4b38      	ldr	r3, [pc, #224]	@ (8001afc <_ZL12MX_GPIO_Initv+0x110>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1e:	4a37      	ldr	r2, [pc, #220]	@ (8001afc <_ZL12MX_GPIO_Initv+0x110>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a26:	4b35      	ldr	r3, [pc, #212]	@ (8001afc <_ZL12MX_GPIO_Initv+0x110>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a32:	4b32      	ldr	r3, [pc, #200]	@ (8001afc <_ZL12MX_GPIO_Initv+0x110>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a36:	4a31      	ldr	r2, [pc, #196]	@ (8001afc <_ZL12MX_GPIO_Initv+0x110>)
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001afc <_ZL12MX_GPIO_Initv+0x110>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001a50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a54:	f004 f860 	bl	8005b18 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |OK_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Backlight_PWM_GPIO_Port, Backlight_PWM_Pin, GPIO_PIN_RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2110      	movs	r1, #16
 8001a5c:	4828      	ldr	r0, [pc, #160]	@ (8001b00 <_ZL12MX_GPIO_Initv+0x114>)
 8001a5e:	f004 f85b 	bl	8005b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C_D_Pin|WR_Pin|RD_Pin|Parallel_CS_Pin
 8001a62:	2200      	movs	r2, #0
 8001a64:	f241 0117 	movw	r1, #4119	@ 0x1017
 8001a68:	4826      	ldr	r0, [pc, #152]	@ (8001b04 <_ZL12MX_GPIO_Initv+0x118>)
 8001a6a:	f004 f855 	bl	8005b18 <HAL_GPIO_WritePin>
                          |D_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Alert1_Pin */
  GPIO_InitStruct.Pin = Alert1_Pin;
 8001a6e:	2304      	movs	r3, #4
 8001a70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a72:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Alert1_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	4619      	mov	r1, r3
 8001a82:	481f      	ldr	r0, [pc, #124]	@ (8001b00 <_ZL12MX_GPIO_Initv+0x114>)
 8001a84:	f003 feb6 	bl	80057f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin
                           OK_LED_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001a88:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8001a8c:	60fb      	str	r3, [r7, #12]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |OK_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aa4:	f003 fea6 	bl	80057f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Backlight_PWM_Pin */
  GPIO_InitStruct.Pin = Backlight_PWM_Pin;
 8001aa8:	2310      	movs	r3, #16
 8001aaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Backlight_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	4619      	mov	r1, r3
 8001abe:	4810      	ldr	r0, [pc, #64]	@ (8001b00 <_ZL12MX_GPIO_Initv+0x114>)
 8001ac0:	f003 fe98 	bl	80057f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_D_Pin WR_Pin RD_Pin Parallel_CS_Pin
                           D_C_Pin */
  GPIO_InitStruct.Pin = C_D_Pin|WR_Pin|RD_Pin|Parallel_CS_Pin
 8001ac4:	f241 0317 	movw	r3, #4119	@ 0x1017
 8001ac8:	60fb      	str	r3, [r7, #12]
                          |D_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	4619      	mov	r1, r3
 8001adc:	4809      	ldr	r0, [pc, #36]	@ (8001b04 <_ZL12MX_GPIO_Initv+0x118>)
 8001ade:	f003 fe89 	bl	80057f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2105      	movs	r1, #5
 8001ae6:	2008      	movs	r0, #8
 8001ae8:	f003 fbe4 	bl	80052b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001aec:	2008      	movs	r0, #8
 8001aee:	f003 fbfd 	bl	80052ec <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001af2:	bf00      	nop
 8001af4:	3720      	adds	r7, #32
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
 8001b00:	48000800 	.word	0x48000800
 8001b04:	48000400 	.word	0x48000400

08001b08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a04      	ldr	r2, [pc, #16]	@ (8001b28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d101      	bne.n	8001b1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b1a:	f001 fbaf 	bl	800327c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40000400 	.word	0x40000400

08001b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b30:	b672      	cpsid	i
}
 8001b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <Error_Handler+0x8>

08001b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3e:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <HAL_MspInit+0x4c>)
 8001b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b42:	4a10      	ldr	r2, [pc, #64]	@ (8001b84 <HAL_MspInit+0x4c>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <HAL_MspInit+0x4c>)
 8001b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <HAL_MspInit+0x4c>)
 8001b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b84 <HAL_MspInit+0x4c>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b60:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b62:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <HAL_MspInit+0x4c>)
 8001b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	210f      	movs	r1, #15
 8001b72:	f06f 0001 	mvn.w	r0, #1
 8001b76:	f003 fb9d 	bl	80052b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000

08001b88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b0ac      	sub	sp, #176	@ 0xb0
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	228c      	movs	r2, #140	@ 0x8c
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f00a ff75 	bl	800ca98 <memset>
  if(hadc->Instance==ADC1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a35      	ldr	r2, [pc, #212]	@ (8001c88 <HAL_ADC_MspInit+0x100>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d163      	bne.n	8001c80 <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bbc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001bbe:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001bc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc6:	f107 0310 	add.w	r3, r7, #16
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f005 fce6 	bl	800759c <HAL_RCCEx_PeriphCLKConfig>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001bd6:	f7ff ffa9 	bl	8001b2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001bda:	4b2c      	ldr	r3, [pc, #176]	@ (8001c8c <HAL_ADC_MspInit+0x104>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bde:	4a2b      	ldr	r2, [pc, #172]	@ (8001c8c <HAL_ADC_MspInit+0x104>)
 8001be0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001be6:	4b29      	ldr	r3, [pc, #164]	@ (8001c8c <HAL_ADC_MspInit+0x104>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf2:	4b26      	ldr	r3, [pc, #152]	@ (8001c8c <HAL_ADC_MspInit+0x104>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf6:	4a25      	ldr	r2, [pc, #148]	@ (8001c8c <HAL_ADC_MspInit+0x104>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bfe:	4b23      	ldr	r3, [pc, #140]	@ (8001c8c <HAL_ADC_MspInit+0x104>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c10:	2303      	movs	r3, #3
 8001c12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c20:	4619      	mov	r1, r3
 8001c22:	481b      	ldr	r0, [pc, #108]	@ (8001c90 <HAL_ADC_MspInit+0x108>)
 8001c24:	f003 fde6 	bl	80057f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001c28:	4b1a      	ldr	r3, [pc, #104]	@ (8001c94 <HAL_ADC_MspInit+0x10c>)
 8001c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001c98 <HAL_ADC_MspInit+0x110>)
 8001c2c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001c2e:	4b19      	ldr	r3, [pc, #100]	@ (8001c94 <HAL_ADC_MspInit+0x10c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c34:	4b17      	ldr	r3, [pc, #92]	@ (8001c94 <HAL_ADC_MspInit+0x10c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c3a:	4b16      	ldr	r3, [pc, #88]	@ (8001c94 <HAL_ADC_MspInit+0x10c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c40:	4b14      	ldr	r3, [pc, #80]	@ (8001c94 <HAL_ADC_MspInit+0x10c>)
 8001c42:	2280      	movs	r2, #128	@ 0x80
 8001c44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c46:	4b13      	ldr	r3, [pc, #76]	@ (8001c94 <HAL_ADC_MspInit+0x10c>)
 8001c48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c4e:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <HAL_ADC_MspInit+0x10c>)
 8001c50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c56:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <HAL_ADC_MspInit+0x10c>)
 8001c58:	2220      	movs	r2, #32
 8001c5a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <HAL_ADC_MspInit+0x10c>)
 8001c5e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c62:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c64:	480b      	ldr	r0, [pc, #44]	@ (8001c94 <HAL_ADC_MspInit+0x10c>)
 8001c66:	f003 fb4f 	bl	8005308 <HAL_DMA_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 8001c70:	f7ff ff5c 	bl	8001b2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a07      	ldr	r2, [pc, #28]	@ (8001c94 <HAL_ADC_MspInit+0x10c>)
 8001c78:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c7a:	4a06      	ldr	r2, [pc, #24]	@ (8001c94 <HAL_ADC_MspInit+0x10c>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c80:	bf00      	nop
 8001c82:	37b0      	adds	r7, #176	@ 0xb0
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	50040000 	.word	0x50040000
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	48000800 	.word	0x48000800
 8001c94:	200001b0 	.word	0x200001b0
 8001c98:	40020008 	.word	0x40020008

08001c9c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08c      	sub	sp, #48	@ 0x30
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a4e      	ldr	r2, [pc, #312]	@ (8001df4 <HAL_CAN_MspInit+0x158>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d143      	bne.n	8001d46 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001cbe:	4b4e      	ldr	r3, [pc, #312]	@ (8001df8 <HAL_CAN_MspInit+0x15c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	4a4c      	ldr	r2, [pc, #304]	@ (8001df8 <HAL_CAN_MspInit+0x15c>)
 8001cc6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8001df8 <HAL_CAN_MspInit+0x15c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d10b      	bne.n	8001ce8 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001cd0:	4b4a      	ldr	r3, [pc, #296]	@ (8001dfc <HAL_CAN_MspInit+0x160>)
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd4:	4a49      	ldr	r2, [pc, #292]	@ (8001dfc <HAL_CAN_MspInit+0x160>)
 8001cd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cda:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cdc:	4b47      	ldr	r3, [pc, #284]	@ (8001dfc <HAL_CAN_MspInit+0x160>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce8:	4b44      	ldr	r3, [pc, #272]	@ (8001dfc <HAL_CAN_MspInit+0x160>)
 8001cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cec:	4a43      	ldr	r2, [pc, #268]	@ (8001dfc <HAL_CAN_MspInit+0x160>)
 8001cee:	f043 0302 	orr.w	r3, r3, #2
 8001cf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf4:	4b41      	ldr	r3, [pc, #260]	@ (8001dfc <HAL_CAN_MspInit+0x160>)
 8001cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d12:	2309      	movs	r3, #9
 8001d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d16:	f107 031c 	add.w	r3, r7, #28
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4838      	ldr	r0, [pc, #224]	@ (8001e00 <HAL_CAN_MspInit+0x164>)
 8001d1e:	f003 fd69 	bl	80057f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d30:	2303      	movs	r3, #3
 8001d32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d34:	2309      	movs	r3, #9
 8001d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4830      	ldr	r0, [pc, #192]	@ (8001e00 <HAL_CAN_MspInit+0x164>)
 8001d40:	f003 fd58 	bl	80057f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001d44:	e051      	b.n	8001dea <HAL_CAN_MspInit+0x14e>
  else if(hcan->Instance==CAN2)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a2e      	ldr	r2, [pc, #184]	@ (8001e04 <HAL_CAN_MspInit+0x168>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d14c      	bne.n	8001dea <HAL_CAN_MspInit+0x14e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001d50:	4b2a      	ldr	r3, [pc, #168]	@ (8001dfc <HAL_CAN_MspInit+0x160>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d54:	4a29      	ldr	r2, [pc, #164]	@ (8001dfc <HAL_CAN_MspInit+0x160>)
 8001d56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d5c:	4b27      	ldr	r3, [pc, #156]	@ (8001dfc <HAL_CAN_MspInit+0x160>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001d68:	4b23      	ldr	r3, [pc, #140]	@ (8001df8 <HAL_CAN_MspInit+0x15c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	4a22      	ldr	r2, [pc, #136]	@ (8001df8 <HAL_CAN_MspInit+0x15c>)
 8001d70:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001d72:	4b21      	ldr	r3, [pc, #132]	@ (8001df8 <HAL_CAN_MspInit+0x15c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d10b      	bne.n	8001d92 <HAL_CAN_MspInit+0xf6>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001d7a:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <HAL_CAN_MspInit+0x160>)
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8001dfc <HAL_CAN_MspInit+0x160>)
 8001d80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d84:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d86:	4b1d      	ldr	r3, [pc, #116]	@ (8001dfc <HAL_CAN_MspInit+0x160>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <HAL_CAN_MspInit+0x160>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d96:	4a19      	ldr	r2, [pc, #100]	@ (8001dfc <HAL_CAN_MspInit+0x160>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d9e:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <HAL_CAN_MspInit+0x160>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001daa:	2320      	movs	r3, #32
 8001dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001db2:	2301      	movs	r3, #1
 8001db4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db6:	2303      	movs	r3, #3
 8001db8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbe:	f107 031c 	add.w	r3, r7, #28
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	480e      	ldr	r0, [pc, #56]	@ (8001e00 <HAL_CAN_MspInit+0x164>)
 8001dc6:	f003 fd15 	bl	80057f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dca:	2340      	movs	r3, #64	@ 0x40
 8001dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8001dda:	2308      	movs	r3, #8
 8001ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dde:	f107 031c 	add.w	r3, r7, #28
 8001de2:	4619      	mov	r1, r3
 8001de4:	4806      	ldr	r0, [pc, #24]	@ (8001e00 <HAL_CAN_MspInit+0x164>)
 8001de6:	f003 fd05 	bl	80057f4 <HAL_GPIO_Init>
}
 8001dea:	bf00      	nop
 8001dec:	3730      	adds	r7, #48	@ 0x30
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40006400 	.word	0x40006400
 8001df8:	2000033c 	.word	0x2000033c
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	48000400 	.word	0x48000400
 8001e04:	40006800 	.word	0x40006800

08001e08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b0ac      	sub	sp, #176	@ 0xb0
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e20:	f107 0310 	add.w	r3, r7, #16
 8001e24:	228c      	movs	r2, #140	@ 0x8c
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f00a fe35 	bl	800ca98 <memset>
  if(hi2c->Instance==I2C4)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a22      	ldr	r2, [pc, #136]	@ (8001ebc <HAL_I2C_MspInit+0xb4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d13c      	bne.n	8001eb2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001e38:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e3c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e42:	f107 0310 	add.w	r3, r7, #16
 8001e46:	4618      	mov	r0, r3
 8001e48:	f005 fba8 	bl	800759c <HAL_RCCEx_PeriphCLKConfig>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e52:	f7ff fe6b 	bl	8001b2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec0 <HAL_I2C_MspInit+0xb8>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5a:	4a19      	ldr	r2, [pc, #100]	@ (8001ec0 <HAL_I2C_MspInit+0xb8>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e62:	4b17      	ldr	r3, [pc, #92]	@ (8001ec0 <HAL_I2C_MspInit+0xb8>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e6e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e76:	2312      	movs	r3, #18
 8001e78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e82:	2303      	movs	r3, #3
 8001e84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e92:	4619      	mov	r1, r3
 8001e94:	480b      	ldr	r0, [pc, #44]	@ (8001ec4 <HAL_I2C_MspInit+0xbc>)
 8001e96:	f003 fcad 	bl	80057f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001e9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <HAL_I2C_MspInit+0xb8>)
 8001e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e9e:	4a08      	ldr	r2, [pc, #32]	@ (8001ec0 <HAL_I2C_MspInit+0xb8>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001ea6:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <HAL_I2C_MspInit+0xb8>)
 8001ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8001eb2:	bf00      	nop
 8001eb4:	37b0      	adds	r7, #176	@ 0xb0
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40008400 	.word	0x40008400
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	48000400 	.word	0x48000400

08001ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b0ac      	sub	sp, #176	@ 0xb0
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ee0:	f107 0310 	add.w	r3, r7, #16
 8001ee4:	228c      	movs	r2, #140	@ 0x8c
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f00a fdd5 	bl	800ca98 <memset>
  if(huart->Instance==UART4)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a25      	ldr	r2, [pc, #148]	@ (8001f88 <HAL_UART_MspInit+0xc0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d143      	bne.n	8001f80 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001ef8:	2308      	movs	r3, #8
 8001efa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001efc:	2300      	movs	r3, #0
 8001efe:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f00:	f107 0310 	add.w	r3, r7, #16
 8001f04:	4618      	mov	r0, r3
 8001f06:	f005 fb49 	bl	800759c <HAL_RCCEx_PeriphCLKConfig>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f10:	f7ff fe0c 	bl	8001b2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f14:	4b1d      	ldr	r3, [pc, #116]	@ (8001f8c <HAL_UART_MspInit+0xc4>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f18:	4a1c      	ldr	r2, [pc, #112]	@ (8001f8c <HAL_UART_MspInit+0xc4>)
 8001f1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f20:	4b1a      	ldr	r3, [pc, #104]	@ (8001f8c <HAL_UART_MspInit+0xc4>)
 8001f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2c:	4b17      	ldr	r3, [pc, #92]	@ (8001f8c <HAL_UART_MspInit+0xc4>)
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f30:	4a16      	ldr	r2, [pc, #88]	@ (8001f8c <HAL_UART_MspInit+0xc4>)
 8001f32:	f043 0304 	orr.w	r3, r3, #4
 8001f36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f38:	4b14      	ldr	r3, [pc, #80]	@ (8001f8c <HAL_UART_MspInit+0xc4>)
 8001f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f44:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f5e:	2308      	movs	r3, #8
 8001f60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4809      	ldr	r0, [pc, #36]	@ (8001f90 <HAL_UART_MspInit+0xc8>)
 8001f6c:	f003 fc42 	bl	80057f4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001f70:	2200      	movs	r2, #0
 8001f72:	2105      	movs	r1, #5
 8001f74:	2034      	movs	r0, #52	@ 0x34
 8001f76:	f003 f99d 	bl	80052b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f7a:	2034      	movs	r0, #52	@ 0x34
 8001f7c:	f003 f9b6 	bl	80052ec <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8001f80:	bf00      	nop
 8001f82:	37b0      	adds	r7, #176	@ 0xb0
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40004c00 	.word	0x40004c00
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	48000800 	.word	0x48000800

08001f94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08e      	sub	sp, #56	@ 0x38
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001fa2:	4b34      	ldr	r3, [pc, #208]	@ (8002074 <HAL_InitTick+0xe0>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa6:	4a33      	ldr	r2, [pc, #204]	@ (8002074 <HAL_InitTick+0xe0>)
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fae:	4b31      	ldr	r3, [pc, #196]	@ (8002074 <HAL_InitTick+0xe0>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fba:	f107 0210 	add.w	r2, r7, #16
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f005 fa57 	bl	8007478 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d103      	bne.n	8001fdc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fd4:	f005 fa24 	bl	8007420 <HAL_RCC_GetPCLK1Freq>
 8001fd8:	6378      	str	r0, [r7, #52]	@ 0x34
 8001fda:	e004      	b.n	8001fe6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001fdc:	f005 fa20 	bl	8007420 <HAL_RCC_GetPCLK1Freq>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fe8:	4a23      	ldr	r2, [pc, #140]	@ (8002078 <HAL_InitTick+0xe4>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	0c9b      	lsrs	r3, r3, #18
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001ff4:	4b21      	ldr	r3, [pc, #132]	@ (800207c <HAL_InitTick+0xe8>)
 8001ff6:	4a22      	ldr	r2, [pc, #136]	@ (8002080 <HAL_InitTick+0xec>)
 8001ff8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001ffa:	4b20      	ldr	r3, [pc, #128]	@ (800207c <HAL_InitTick+0xe8>)
 8001ffc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002000:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002002:	4a1e      	ldr	r2, [pc, #120]	@ (800207c <HAL_InitTick+0xe8>)
 8002004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002006:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002008:	4b1c      	ldr	r3, [pc, #112]	@ (800207c <HAL_InitTick+0xe8>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200e:	4b1b      	ldr	r3, [pc, #108]	@ (800207c <HAL_InitTick+0xe8>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002014:	4b19      	ldr	r3, [pc, #100]	@ (800207c <HAL_InitTick+0xe8>)
 8002016:	2200      	movs	r2, #0
 8002018:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800201a:	4818      	ldr	r0, [pc, #96]	@ (800207c <HAL_InitTick+0xe8>)
 800201c:	f005 ff88 	bl	8007f30 <HAL_TIM_Base_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002026:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800202a:	2b00      	cmp	r3, #0
 800202c:	d11b      	bne.n	8002066 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800202e:	4813      	ldr	r0, [pc, #76]	@ (800207c <HAL_InitTick+0xe8>)
 8002030:	f005 ffe0 	bl	8007ff4 <HAL_TIM_Base_Start_IT>
 8002034:	4603      	mov	r3, r0
 8002036:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800203a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800203e:	2b00      	cmp	r3, #0
 8002040:	d111      	bne.n	8002066 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002042:	201d      	movs	r0, #29
 8002044:	f003 f952 	bl	80052ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b0f      	cmp	r3, #15
 800204c:	d808      	bhi.n	8002060 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800204e:	2200      	movs	r2, #0
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	201d      	movs	r0, #29
 8002054:	f003 f92e 	bl	80052b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002058:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <HAL_InitTick+0xf0>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e002      	b.n	8002066 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002066:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800206a:	4618      	mov	r0, r3
 800206c:	3738      	adds	r7, #56	@ 0x38
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	431bde83 	.word	0x431bde83
 800207c:	20000340 	.word	0x20000340
 8002080:	40000400 	.word	0x40000400
 8002084:	20000004 	.word	0x20000004

08002088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <NMI_Handler+0x4>

08002090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <HardFault_Handler+0x4>

08002098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <MemManage_Handler+0x4>

080020a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <BusFault_Handler+0x4>

080020a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <UsageFault_Handler+0x4>

080020b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alert1_Pin);
 80020c2:	2004      	movs	r0, #4
 80020c4:	f003 fd5a 	bl	8005b7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}

080020cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020d0:	4802      	ldr	r0, [pc, #8]	@ (80020dc <DMA1_Channel1_IRQHandler+0x10>)
 80020d2:	f003 fab0 	bl	8005636 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200001b0 	.word	0x200001b0

080020e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020e4:	4802      	ldr	r0, [pc, #8]	@ (80020f0 <TIM3_IRQHandler+0x10>)
 80020e6:	f005 fff5 	bl	80080d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000340 	.word	0x20000340

080020f4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80020f8:	4802      	ldr	r0, [pc, #8]	@ (8002104 <UART4_IRQHandler+0x10>)
 80020fa:	f006 fa79 	bl	80085f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	2000029c 	.word	0x2000029c

08002108 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <SystemInit+0x20>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002112:	4a05      	ldr	r2, [pc, #20]	@ (8002128 <SystemInit+0x20>)
 8002114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <_ZN7ILI9341C1Ess>:
/**
  * @brief   Constructor for ILI9341 class
  * @param   w: width of LCD
  * @param   h: height of LCD
  */
ILI9341::ILI9341(int16_t w, int16_t h):WIDTH(w),HEIGHT(h)
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
 8002138:	4613      	mov	r3, r2
 800213a:	803b      	strh	r3, [r7, #0]
 800213c:	4a45      	ldr	r2, [pc, #276]	@ (8002254 <_ZN7ILI9341C1Ess+0x128>)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	887a      	ldrh	r2, [r7, #2]
 8002146:	809a      	strh	r2, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	883a      	ldrh	r2, [r7, #0]
 800214c:	80da      	strh	r2, [r3, #6]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	81da      	strh	r2, [r3, #14]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	821a      	strh	r2, [r3, #16]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002160:	621a      	str	r2, [r3, #32]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002168:	625a      	str	r2, [r3, #36]	@ 0x24
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002170:	629a      	str	r2, [r3, #40]	@ 0x28
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002178:	62da      	str	r2, [r3, #44]	@ 0x2c
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002180:	631a      	str	r2, [r3, #48]	@ 0x30
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002188:	635a      	str	r2, [r3, #52]	@ 0x34
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002190:	639a      	str	r2, [r3, #56]	@ 0x38
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002198:	63da      	str	r2, [r3, #60]	@ 0x3c
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2204      	movs	r2, #4
 800219e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002258 <_ZN7ILI9341C1Ess+0x12c>)
 80021a6:	645a      	str	r2, [r3, #68]	@ 0x44
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a29      	ldr	r2, [pc, #164]	@ (8002258 <_ZN7ILI9341C1Ess+0x12c>)
 80021b4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a25      	ldr	r2, [pc, #148]	@ (8002258 <_ZN7ILI9341C1Ess+0x12c>)
 80021c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021ca:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a21      	ldr	r2, [pc, #132]	@ (8002258 <_ZN7ILI9341C1Ess+0x12c>)
 80021d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a1f      	ldr	r2, [pc, #124]	@ (800225c <_ZN7ILI9341C1Ess+0x130>)
 80021e0:	665a      	str	r2, [r3, #100]	@ 0x64
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2210      	movs	r2, #16
 80021e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a1b      	ldr	r2, [pc, #108]	@ (800225c <_ZN7ILI9341C1Ess+0x130>)
 80021ee:	66da      	str	r2, [r3, #108]	@ 0x6c
{
  text_size_ = 1;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	819a      	strh	r2, [r3, #12]
  width_ = WIDTH;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	811a      	strh	r2, [r3, #8]
  height_ = HEIGHT;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	815a      	strh	r2, [r3, #10]
  rotation = 0;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	771a      	strb	r2, [r3, #28]
  cursor_y = cursor_x = 0;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	825a      	strh	r2, [r3, #18]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	829a      	strh	r2, [r3, #20]
  textsize_x = textsize_y = 1;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	76da      	strb	r2, [r3, #27]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	7eda      	ldrb	r2, [r3, #27]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	769a      	strb	r2, [r3, #26]
  textcolor = textbgcolor = 0xFFFF;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002234:	831a      	strh	r2, [r3, #24]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	8b1a      	ldrh	r2, [r3, #24]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	82da      	strh	r2, [r3, #22]
  wrap = true;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	775a      	strb	r2, [r3, #29]
}
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	0800d34c 	.word	0x0800d34c
 8002258:	48000400 	.word	0x48000400
 800225c:	48000800 	.word	0x48000800

08002260 <_ZN7ILI9341D1Ev>:

ILI9341::~ILI9341()
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	4a04      	ldr	r2, [pc, #16]	@ (800227c <_ZN7ILI9341D1Ev+0x1c>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	601a      	str	r2, [r3, #0]
{
  // TODO Auto-generated destructor stub
}
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	0800d34c 	.word	0x0800d34c

08002280 <_ZN7ILI9341D0Ev>:
ILI9341::~ILI9341()
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
}
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ffe9 	bl	8002260 <_ZN7ILI9341D1Ev>
 800228e:	2170      	movs	r1, #112	@ 0x70
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f00a fbe9 	bl	800ca68 <_ZdlPvj>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <_ZN7ILI93414InitEv>:

/**
  * @brief  Initialize the LCD.
  */
void ILI9341::Init()
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	6078      	str	r0, [r7, #4]
  // Write all control signals high
  HAL_GPIO_WritePin(Backlight_PWM_GPIO_Port_, Backlight_PWM_Pin_, GPIO_PIN_SET);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80022b2:	2201      	movs	r2, #1
 80022b4:	4619      	mov	r1, r3
 80022b6:	f003 fc2f 	bl	8005b18 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80022c4:	2201      	movs	r2, #1
 80022c6:	4619      	mov	r1, r3
 80022c8:	f003 fc26 	bl	8005b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022d6:	2201      	movs	r2, #1
 80022d8:	4619      	mov	r1, r3
 80022da:	f003 fc1d 	bl	8005b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80022e8:	2201      	movs	r2, #1
 80022ea:	4619      	mov	r1, r3
 80022ec:	f003 fc14 	bl	8005b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_READ_GPIO_Port_, LCD_READ_Pin_, GPIO_PIN_SET);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80022fa:	2201      	movs	r2, #1
 80022fc:	4619      	mov	r1, r3
 80022fe:	f003 fc0b 	bl	8005b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_SET);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800230c:	2201      	movs	r2, #1
 800230e:	4619      	mov	r1, r3
 8002310:	f003 fc02 	bl	8005b18 <HAL_GPIO_WritePin>

  // Hold reset pin
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_RESET);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800231e:	2200      	movs	r2, #0
 8002320:	4619      	mov	r1, r3
 8002322:	f003 fbf9 	bl	8005b18 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8002326:	200a      	movs	r0, #10
 8002328:	f000 ffc8 	bl	80032bc <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_SET);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002336:	2201      	movs	r2, #1
 8002338:	4619      	mov	r1, r3
 800233a:	f003 fbed 	bl	8005b18 <HAL_GPIO_WritePin>

  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002348:	2200      	movs	r2, #0
 800234a:	4619      	mov	r1, r3
 800234c:	f003 fbe4 	bl	8005b18 <HAL_GPIO_WritePin>

  // Soft reset the LCD
  TransmitCmd(ILI9341_SWRESET);
 8002350:	2101      	movs	r1, #1
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f8c4 	bl	80024e0 <_ZN7ILI934111TransmitCmdEh>
  Transmit8bitData(0x00);
 8002358:	2100      	movs	r1, #0
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f8d8 	bl	8002510 <_ZN7ILI934116Transmit8bitDataEh>
  HAL_Delay(50);
 8002360:	2032      	movs	r0, #50	@ 0x32
 8002362:	f000 ffab 	bl	80032bc <HAL_Delay>


  uint8_t cmd, x, numArgs;
  const uint8_t *addr = initcmd;
 8002366:	4b27      	ldr	r3, [pc, #156]	@ (8002404 <_ZN7ILI93414InitEv+0x164>)
 8002368:	613b      	str	r3, [r7, #16]
  while((cmd = *(addr++)) > 0)
 800236a:	e027      	b.n	80023bc <_ZN7ILI93414InitEv+0x11c>
  {
    x = *(addr++);
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	613a      	str	r2, [r7, #16]
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	73bb      	strb	r3, [r7, #14]
    numArgs = x & 0x7F;
 8002376:	7bbb      	ldrb	r3, [r7, #14]
 8002378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800237c:	75fb      	strb	r3, [r7, #23]
    TransmitCmd(cmd);
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	4619      	mov	r1, r3
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f8ac 	bl	80024e0 <_ZN7ILI934111TransmitCmdEh>
    while(numArgs--)
 8002388:	e007      	b.n	800239a <_ZN7ILI93414InitEv+0xfa>
    {
      Transmit8bitData(*(addr++));
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	613a      	str	r2, [r7, #16]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	4619      	mov	r1, r3
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f8bb 	bl	8002510 <_ZN7ILI934116Transmit8bitDataEh>
    while(numArgs--)
 800239a:	7dfb      	ldrb	r3, [r7, #23]
 800239c:	1e5a      	subs	r2, r3, #1
 800239e:	75fa      	strb	r2, [r7, #23]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	bf14      	ite	ne
 80023a4:	2301      	movne	r3, #1
 80023a6:	2300      	moveq	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1ed      	bne.n	800238a <_ZN7ILI93414InitEv+0xea>
    }
    if(x & 0x80)
 80023ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	da02      	bge.n	80023bc <_ZN7ILI93414InitEv+0x11c>
    {
      HAL_Delay(150);
 80023b6:	2096      	movs	r0, #150	@ 0x96
 80023b8:	f000 ff80 	bl	80032bc <HAL_Delay>
  while((cmd = *(addr++)) > 0)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	613a      	str	r2, [r7, #16]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	73fb      	strb	r3, [r7, #15]
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf14      	ite	ne
 80023cc:	2301      	movne	r3, #1
 80023ce:	2300      	moveq	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1ca      	bne.n	800236c <_ZN7ILI93414InitEv+0xcc>
    }
  }

  SetWindow(0, 0, width_-1, height_-1);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	2200      	movs	r2, #0
 80023f4:	2100      	movs	r1, #0
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f8f0 	bl	80025dc <_ZN7ILI93419SetWindowEtttt>
}
 80023fc:	bf00      	nop
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	0800d320 	.word	0x0800d320

08002408 <_ZN7ILI93415WriteEh>:

/**
  * @brief  Write data to LCD bus.
  */
inline void ILI9341::Write(uint8_t data)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	70fb      	strb	r3, [r7, #3]
  // Put data on Bus
#if UI_USE_HAL
  HAL_GPIO_WritePin(LCD_DATA0_GPIO_Port_, LCD_DATA0_Pin_, static_cast<GPIO_PinState>(data & 0x01U) );
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	b2db      	uxtb	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	2101      	movs	r1, #1
 8002424:	f003 fb78 	bl	8005b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA1_GPIO_Port_, LCD_DATA1_Pin_, static_cast<GPIO_PinState>(data & 0x02U) );
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	b2db      	uxtb	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	2102      	movs	r1, #2
 8002438:	f003 fb6e 	bl	8005b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA2_GPIO_Port_, LCD_DATA2_Pin_, static_cast<GPIO_PinState>(data & 0x04U) );
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	b2db      	uxtb	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	2104      	movs	r1, #4
 800244c:	f003 fb64 	bl	8005b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA3_GPIO_Port_, LCD_DATA3_Pin_, static_cast<GPIO_PinState>(data & 0x08U) );
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	b2db      	uxtb	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	2108      	movs	r1, #8
 8002460:	f003 fb5a 	bl	8005b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA4_GPIO_Port_, LCD_DATA4_Pin_, static_cast<GPIO_PinState>(data & 0x10U) );
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	b2db      	uxtb	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	2110      	movs	r1, #16
 8002474:	f003 fb50 	bl	8005b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA5_GPIO_Port_, LCD_DATA5_Pin_, static_cast<GPIO_PinState>(data & 0x20U) );
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	2120      	movs	r1, #32
 8002488:	f003 fb46 	bl	8005b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA6_GPIO_Port_, LCD_DATA6_Pin_, static_cast<GPIO_PinState>(data & 0x40U) );
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	2140      	movs	r1, #64	@ 0x40
 800249c:	f003 fb3c 	bl	8005b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA7_GPIO_Port_, LCD_DATA7_Pin_, static_cast<GPIO_PinState>(data & 0x80U) );
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a18      	ldr	r0, [r3, #32]
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	2180      	movs	r1, #128	@ 0x80
 80024b0:	f003 fb32 	bl	8005b18 <HAL_GPIO_WritePin>
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80024be:	2200      	movs	r2, #0
 80024c0:	4619      	mov	r1, r3
 80024c2:	f003 fb29 	bl	8005b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80024d0:	2201      	movs	r2, #1
 80024d2:	4619      	mov	r1, r3
 80024d4:	f003 fb20 	bl	8005b18 <HAL_GPIO_WritePin>
  // Pulse Write
  LCD_WRITE_GPIO_Port_->BSRR = LCD_WRITE_Pin_; // changed from brr to bsrr... ok?
  LCD_WRITE_GPIO_Port_->BSRR = (uint32_t)LCD_WRITE_Pin_ << 16U;
#endif

}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <_ZN7ILI934111TransmitCmdEh>:
/**
  * @brief  Sends 8-bit command to LCD.
  * @param  cmd: 8-bit command to be sent.
  */
void ILI9341::TransmitCmd(uint8_t cmd)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	70fb      	strb	r3, [r7, #3]
  // D/C -> LOW
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_RESET);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024f6:	2200      	movs	r2, #0
 80024f8:	4619      	mov	r1, r3
 80024fa:	f003 fb0d 	bl	8005b18 <HAL_GPIO_WritePin>

  Write(cmd);
 80024fe:	78fb      	ldrb	r3, [r7, #3]
 8002500:	4619      	mov	r1, r3
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ff80 	bl	8002408 <_ZN7ILI93415WriteEh>

  // TODO: Can this line be removed?
  // D/C -> HIGH
  // HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <_ZN7ILI934116Transmit8bitDataEh>:
/**
  * @brief  Sends 8-bit data to LCD.
  * @param  data: 8-bit data to be sent.
  */
void ILI9341::Transmit8bitData(uint8_t data)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	70fb      	strb	r3, [r7, #3]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002526:	2201      	movs	r2, #1
 8002528:	4619      	mov	r1, r3
 800252a:	f003 faf5 	bl	8005b18 <HAL_GPIO_WritePin>

  Write(data);
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	4619      	mov	r1, r3
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff ff68 	bl	8002408 <_ZN7ILI93415WriteEh>
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <_ZN7ILI934117Transmit16bitDataEt>:
/**
  * @brief  Sends 16-bit data to LCD.
  * @param  data: 16-bit data to be sent to LCD.
  */
void ILI9341::Transmit16bitData(uint16_t data)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002556:	2201      	movs	r2, #1
 8002558:	4619      	mov	r1, r3
 800255a:	f003 fadd 	bl	8005b18 <HAL_GPIO_WritePin>

  Write(static_cast<uint8_t>(data >> 8));
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	b29b      	uxth	r3, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	4619      	mov	r1, r3
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ff4d 	bl	8002408 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 0));
 800256e:	887b      	ldrh	r3, [r7, #2]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	4619      	mov	r1, r3
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff ff47 	bl	8002408 <_ZN7ILI93415WriteEh>

}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <_ZN7ILI934117Transmit32bitDataEm>:
/**
  * @brief  Sends 32-bit data to LCD.
  * @param  data: 32-bit data to be sent to LCD.
  */
void ILI9341::Transmit32bitData(uint32_t data)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002596:	2201      	movs	r2, #1
 8002598:	4619      	mov	r1, r3
 800259a:	f003 fabd 	bl	8005b18 <HAL_GPIO_WritePin>

  Write(static_cast<uint8_t>(data >> 24));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	0e1b      	lsrs	r3, r3, #24
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	4619      	mov	r1, r3
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff ff2e 	bl	8002408 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 16));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	0c1b      	lsrs	r3, r3, #16
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	4619      	mov	r1, r3
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ff27 	bl	8002408 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 8 ));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	0a1b      	lsrs	r3, r3, #8
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	4619      	mov	r1, r3
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff ff20 	bl	8002408 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 0 ));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	4619      	mov	r1, r3
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ff1a 	bl	8002408 <_ZN7ILI93415WriteEh>

}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <_ZN7ILI93419SetWindowEtttt>:
  * @param  xe: x end coordinate. xe > xs.
  * @param  ye: y end coordinate. ye > ys.
  * @retval ILI9341_SUCCESS or ILI9341_ERROR.
  */
char ILI9341::SetWindow (uint16_t xs, uint16_t ys, uint16_t xe, uint16_t ye)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	4608      	mov	r0, r1
 80025e6:	4611      	mov	r1, r2
 80025e8:	461a      	mov	r2, r3
 80025ea:	4603      	mov	r3, r0
 80025ec:	817b      	strh	r3, [r7, #10]
 80025ee:	460b      	mov	r3, r1
 80025f0:	813b      	strh	r3, [r7, #8]
 80025f2:	4613      	mov	r3, r2
 80025f4:	80fb      	strh	r3, [r7, #6]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002600:	2200      	movs	r2, #0
 8002602:	4619      	mov	r1, r3
 8002604:	f003 fa88 	bl	8005b18 <HAL_GPIO_WritePin>

  // check if coordinates is out of range
  // TODO: Use >=, <= instead of >, < for width_ and height_?
  if ((xs > xe) || (xe > width_) ||
 8002608:	897a      	ldrh	r2, [r7, #10]
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	429a      	cmp	r2, r3
 800260e:	d80f      	bhi.n	8002630 <_ZN7ILI93419SetWindowEtttt+0x54>
 8002610:	88fb      	ldrh	r3, [r7, #6]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002618:	4293      	cmp	r3, r2
 800261a:	dc09      	bgt.n	8002630 <_ZN7ILI93419SetWindowEtttt+0x54>
 800261c:	893a      	ldrh	r2, [r7, #8]
 800261e:	8b3b      	ldrh	r3, [r7, #24]
 8002620:	429a      	cmp	r2, r3
 8002622:	d805      	bhi.n	8002630 <_ZN7ILI93419SetWindowEtttt+0x54>
      (ys > ye) || (ye > height_))
 8002624:	8b3b      	ldrh	r3, [r7, #24]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800262c:	4293      	cmp	r3, r2
 800262e:	dd01      	ble.n	8002634 <_ZN7ILI93419SetWindowEtttt+0x58>
  {
    // out of range
    return ILI9341_ERROR;
 8002630:	2300      	movs	r3, #0
 8002632:	e021      	b.n	8002678 <_ZN7ILI93419SetWindowEtttt+0x9c>
  }

  // set column
  TransmitCmd(ILI9341_CASET);
 8002634:	212a      	movs	r1, #42	@ 0x2a
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f7ff ff52 	bl	80024e0 <_ZN7ILI934111TransmitCmdEh>
  // set column -> set column
  Transmit32bitData(((uint32_t) xs << 16) | xe);
 800263c:	897b      	ldrh	r3, [r7, #10]
 800263e:	041a      	lsls	r2, r3, #16
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	4313      	orrs	r3, r2
 8002644:	4619      	mov	r1, r3
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f7ff ff9b 	bl	8002582 <_ZN7ILI934117Transmit32bitDataEm>
  // set page
  TransmitCmd(ILI9341_PASET);
 800264c:	212b      	movs	r1, #43	@ 0x2b
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f7ff ff46 	bl	80024e0 <_ZN7ILI934111TransmitCmdEh>
  // set page -> high byte first
  Transmit32bitData(((uint32_t) ys << 16) | ye);
 8002654:	893b      	ldrh	r3, [r7, #8]
 8002656:	041a      	lsls	r2, r3, #16
 8002658:	8b3b      	ldrh	r3, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	4619      	mov	r1, r3
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f7ff ff8f 	bl	8002582 <_ZN7ILI934117Transmit32bitDataEm>

  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800266e:	2201      	movs	r2, #1
 8002670:	4619      	mov	r1, r3
 8002672:	f003 fa51 	bl	8005b18 <HAL_GPIO_WritePin>
  // success
  return ILI9341_SUCCESS;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <_ZN7ILI93419DrawPixelEttt>:
  * @param  y: y coordinate.
  * @param  color: 16-bit color.
  * @retval ILI9341_SUCCESS or ILI9341_ERROR.
  */
char ILI9341::DrawPixel (uint16_t x, uint16_t y, uint16_t color)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	4608      	mov	r0, r1
 800268a:	4611      	mov	r1, r2
 800268c:	461a      	mov	r2, r3
 800268e:	4603      	mov	r3, r0
 8002690:	817b      	strh	r3, [r7, #10]
 8002692:	460b      	mov	r3, r1
 8002694:	813b      	strh	r3, [r7, #8]
 8002696:	4613      	mov	r3, r2
 8002698:	80fb      	strh	r3, [r7, #6]
  // check dimension
  if ((x > width_) || (y > height_)) {
 800269a:	897b      	ldrh	r3, [r7, #10]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80026a2:	4293      	cmp	r3, r2
 80026a4:	dc05      	bgt.n	80026b2 <_ZN7ILI93419DrawPixelEttt+0x32>
 80026a6:	893b      	ldrh	r3, [r7, #8]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80026ae:	4293      	cmp	r3, r2
 80026b0:	dd01      	ble.n	80026b6 <_ZN7ILI93419DrawPixelEttt+0x36>
    // error
    return ILI9341_ERROR;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e00f      	b.n	80026d6 <_ZN7ILI93419DrawPixelEttt+0x56>
  }
  // set window
  SetWindow(x, y, x, y);
 80026b6:	8978      	ldrh	r0, [r7, #10]
 80026b8:	893a      	ldrh	r2, [r7, #8]
 80026ba:	8979      	ldrh	r1, [r7, #10]
 80026bc:	893b      	ldrh	r3, [r7, #8]
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	4603      	mov	r3, r0
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f7ff ff8a 	bl	80025dc <_ZN7ILI93419SetWindowEtttt>
  // draw pixel by 565 mode
  SendColor565(color, 1);
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	2201      	movs	r2, #1
 80026cc:	4619      	mov	r1, r3
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f805 	bl	80026de <_ZN7ILI934112SendColor565Etm>
  // success
  return ILI9341_SUCCESS;
 80026d4:	2301      	movs	r3, #1
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <_ZN7ILI934112SendColor565Etm>:

void ILI9341::SendColor565(uint16_t color, uint32_t count)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	460b      	mov	r3, r1
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	817b      	strh	r3, [r7, #10]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80026f6:	2200      	movs	r2, #0
 80026f8:	4619      	mov	r1, r3
 80026fa:	f003 fa0d 	bl	8005b18 <HAL_GPIO_WritePin>
  // access to RAM
  TransmitCmd(ILI9341_RAMWR);
 80026fe:	212c      	movs	r1, #44	@ 0x2c
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f7ff feed 	bl	80024e0 <_ZN7ILI934111TransmitCmdEh>
  // counter
  while (count--) {
 8002706:	e004      	b.n	8002712 <_ZN7ILI934112SendColor565Etm+0x34>
    // write color - first colors byte
    Transmit16bitData(color);
 8002708:	897b      	ldrh	r3, [r7, #10]
 800270a:	4619      	mov	r1, r3
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f7ff ff17 	bl	8002540 <_ZN7ILI934117Transmit16bitDataEt>
  while (count--) {
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	1e5a      	subs	r2, r3, #1
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	bf14      	ite	ne
 800271c:	2301      	movne	r3, #1
 800271e:	2300      	moveq	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <_ZN7ILI934112SendColor565Etm+0x2a>
  }
  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002730:	2201      	movs	r2, #1
 8002732:	4619      	mov	r1, r3
 8002734:	f003 f9f0 	bl	8005b18 <HAL_GPIO_WritePin>
}
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <_ZN7ILI93415FloodEtm>:

void ILI9341::Flood(uint16_t color, uint32_t count)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	460b      	mov	r3, r1
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	817b      	strh	r3, [r7, #10]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002758:	2200      	movs	r2, #0
 800275a:	4619      	mov	r1, r3
 800275c:	f003 f9dc 	bl	8005b18 <HAL_GPIO_WritePin>
  // access to RAM
  TransmitCmd(ILI9341_RAMWR);
 8002760:	212c      	movs	r1, #44	@ 0x2c
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f7ff febc 	bl	80024e0 <_ZN7ILI934111TransmitCmdEh>
  // counter
  // Upper and lower are the same
  if( (color & 0xFF) == (color >> 8))
 8002768:	897b      	ldrh	r3, [r7, #10]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	897a      	ldrh	r2, [r7, #10]
 800276e:	0a12      	lsrs	r2, r2, #8
 8002770:	b292      	uxth	r2, r2
 8002772:	4293      	cmp	r3, r2
 8002774:	d13c      	bne.n	80027f0 <_ZN7ILI93415FloodEtm+0xb0>
  {
    count--;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3b01      	subs	r3, #1
 800277a:	607b      	str	r3, [r7, #4]
    Transmit16bitData(color);
 800277c:	897b      	ldrh	r3, [r7, #10]
 800277e:	4619      	mov	r1, r3
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f7ff fedd 	bl	8002540 <_ZN7ILI934117Transmit16bitDataEt>
    while(count--)
 8002786:	e023      	b.n	80027d0 <_ZN7ILI93415FloodEtm+0x90>
    {
#if UI_USE_HAL
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002792:	2200      	movs	r2, #0
 8002794:	4619      	mov	r1, r3
 8002796:	f003 f9bf 	bl	8005b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80027a4:	2201      	movs	r2, #1
 80027a6:	4619      	mov	r1, r3
 80027a8:	f003 f9b6 	bl	8005b18 <HAL_GPIO_WritePin>
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80027b6:	2200      	movs	r2, #0
 80027b8:	4619      	mov	r1, r3
 80027ba:	f003 f9ad 	bl	8005b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80027c8:	2201      	movs	r2, #1
 80027ca:	4619      	mov	r1, r3
 80027cc:	f003 f9a4 	bl	8005b18 <HAL_GPIO_WritePin>
    while(count--)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	1e5a      	subs	r2, r3, #1
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	bf14      	ite	ne
 80027da:	2301      	movne	r3, #1
 80027dc:	2300      	moveq	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1d1      	bne.n	8002788 <_ZN7ILI93415FloodEtm+0x48>
 80027e4:	e00e      	b.n	8002804 <_ZN7ILI93415FloodEtm+0xc4>
  }
  else
  {
    while (count--)
    {
      Transmit16bitData(color);
 80027e6:	897b      	ldrh	r3, [r7, #10]
 80027e8:	4619      	mov	r1, r3
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f7ff fea8 	bl	8002540 <_ZN7ILI934117Transmit16bitDataEt>
    while (count--)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	1e5a      	subs	r2, r3, #1
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	bf14      	ite	ne
 80027fa:	2301      	movne	r3, #1
 80027fc:	2300      	moveq	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f0      	bne.n	80027e6 <_ZN7ILI93415FloodEtm+0xa6>
    }
  }
  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800280e:	2201      	movs	r2, #1
 8002810:	4619      	mov	r1, r3
 8002812:	f003 f981 	bl	8005b18 <HAL_GPIO_WritePin>
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <_ZN7ILI934111ClearScreenEt>:

void ILI9341::ClearScreen(uint16_t color)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af02      	add	r7, sp, #8
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	460b      	mov	r3, r1
 8002828:	807b      	strh	r3, [r7, #2]
  // set whole window
  SetWindow(0, 0, width_, height_);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002830:	b29a      	uxth	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002838:	b29b      	uxth	r3, r3
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	4613      	mov	r3, r2
 800283e:	2200      	movs	r2, #0
 8002840:	2100      	movs	r1, #0
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff feca 	bl	80025dc <_ZN7ILI93419SetWindowEtttt>
  // draw individual pixels
  Flood(color, ILI9341_CACHE_MEM);
 8002848:	887b      	ldrh	r3, [r7, #2]
 800284a:	f44f 3296 	mov.w	r2, #76800	@ 0x12c00
 800284e:	4619      	mov	r1, r3
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff ff75 	bl	8002740 <_ZN7ILI93415FloodEtm>
  // Update background color
  textbgcolor = color;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	887a      	ldrh	r2, [r7, #2]
 800285a:	831a      	strh	r2, [r3, #24]
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <_ZN7ILI934113DrawFastHLineEtttt>:

void ILI9341::DrawFastHLine(uint16_t x, uint16_t y, uint16_t length,
                                    uint16_t color) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af02      	add	r7, sp, #8
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	4608      	mov	r0, r1
 800286e:	4611      	mov	r1, r2
 8002870:	461a      	mov	r2, r3
 8002872:	4603      	mov	r3, r0
 8002874:	817b      	strh	r3, [r7, #10]
 8002876:	460b      	mov	r3, r1
 8002878:	813b      	strh	r3, [r7, #8]
 800287a:	4613      	mov	r3, r2
 800287c:	80fb      	strh	r3, [r7, #6]
  int16_t x2;

  // Initial off-screen clipping
  if ((length <= 0) || (y < 0) || (y >= height_) || (x >= width_) ||
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d016      	beq.n	80028b2 <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
 8002884:	893b      	ldrh	r3, [r7, #8]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800288c:	4293      	cmp	r3, r2
 800288e:	da10      	bge.n	80028b2 <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
 8002890:	897b      	ldrh	r3, [r7, #10]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002898:	4293      	cmp	r3, r2
 800289a:	da0a      	bge.n	80028b2 <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
      ((x2 = (x + length - 1)) < 0))
 800289c:	897a      	ldrh	r2, [r7, #10]
 800289e:	88fb      	ldrh	r3, [r7, #6]
 80028a0:	4413      	add	r3, r2
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	82fb      	strh	r3, [r7, #22]
  if ((length <= 0) || (y < 0) || (y >= height_) || (x >= width_) ||
 80028aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	da01      	bge.n	80028b6 <_ZN7ILI934113DrawFastHLineEtttt+0x52>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <_ZN7ILI934113DrawFastHLineEtttt+0x54>
 80028b6:	2300      	movs	r3, #0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d123      	bne.n	8002904 <_ZN7ILI934113DrawFastHLineEtttt+0xa0>

  if (x < 0) { // Clip left
    length += x;
    x = 0;
  }
  if (x2 >= width_) { // Clip right
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	db0c      	blt.n	80028e4 <_ZN7ILI934113DrawFastHLineEtttt+0x80>
    x2 = width_ - 1;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	82fb      	strh	r3, [r7, #22]
    length = x2 - x + 1;
 80028d8:	8afa      	ldrh	r2, [r7, #22]
 80028da:	897b      	ldrh	r3, [r7, #10]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3301      	adds	r3, #1
 80028e2:	80fb      	strh	r3, [r7, #6]
  }

  SetWindow(x, y, x2, y);
 80028e4:	8af8      	ldrh	r0, [r7, #22]
 80028e6:	893a      	ldrh	r2, [r7, #8]
 80028e8:	8979      	ldrh	r1, [r7, #10]
 80028ea:	893b      	ldrh	r3, [r7, #8]
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	4603      	mov	r3, r0
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f7ff fe73 	bl	80025dc <_ZN7ILI93419SetWindowEtttt>
  Flood(color, length);
 80028f6:	88fa      	ldrh	r2, [r7, #6]
 80028f8:	8c3b      	ldrh	r3, [r7, #32]
 80028fa:	4619      	mov	r1, r3
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f7ff ff1f 	bl	8002740 <_ZN7ILI93415FloodEtm>
 8002902:	e000      	b.n	8002906 <_ZN7ILI934113DrawFastHLineEtttt+0xa2>
    return;
 8002904:	bf00      	nop
}
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <_ZN7ILI934113DrawFastVLineEtttt>:

void ILI9341::DrawFastVLine(uint16_t x, uint16_t y, uint16_t length,
                                    uint16_t color) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af02      	add	r7, sp, #8
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	4608      	mov	r0, r1
 8002916:	4611      	mov	r1, r2
 8002918:	461a      	mov	r2, r3
 800291a:	4603      	mov	r3, r0
 800291c:	817b      	strh	r3, [r7, #10]
 800291e:	460b      	mov	r3, r1
 8002920:	813b      	strh	r3, [r7, #8]
 8002922:	4613      	mov	r3, r2
 8002924:	80fb      	strh	r3, [r7, #6]
  int16_t y2;

  // Initial off-screen clipping
  if ((length <= 0) || (x < 0) || (x >= width_) || (y >= height_) ||
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d016      	beq.n	800295a <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
 800292c:	897b      	ldrh	r3, [r7, #10]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002934:	4293      	cmp	r3, r2
 8002936:	da10      	bge.n	800295a <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
 8002938:	893b      	ldrh	r3, [r7, #8]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002940:	4293      	cmp	r3, r2
 8002942:	da0a      	bge.n	800295a <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
      ((y2 = (y + length - 1)) < 0))
 8002944:	893a      	ldrh	r2, [r7, #8]
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	4413      	add	r3, r2
 800294a:	b29b      	uxth	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	b29b      	uxth	r3, r3
 8002950:	82fb      	strh	r3, [r7, #22]
  if ((length <= 0) || (x < 0) || (x >= width_) || (y >= height_) ||
 8002952:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002956:	2b00      	cmp	r3, #0
 8002958:	da01      	bge.n	800295e <_ZN7ILI934113DrawFastVLineEtttt+0x52>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <_ZN7ILI934113DrawFastVLineEtttt+0x54>
 800295e:	2300      	movs	r3, #0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d123      	bne.n	80029ac <_ZN7ILI934113DrawFastVLineEtttt+0xa0>
    return;
  if (y < 0) { // Clip top
    length += y;
    y = 0;
  }
  if (y2 >= height_) { // Clip bottom
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800296a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800296e:	429a      	cmp	r2, r3
 8002970:	db0c      	blt.n	800298c <_ZN7ILI934113DrawFastVLineEtttt+0x80>
    y2 = height_ - 1;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b29b      	uxth	r3, r3
 800297e:	82fb      	strh	r3, [r7, #22]
    length = y2 - y + 1;
 8002980:	8afa      	ldrh	r2, [r7, #22]
 8002982:	893b      	ldrh	r3, [r7, #8]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	b29b      	uxth	r3, r3
 8002988:	3301      	adds	r3, #1
 800298a:	80fb      	strh	r3, [r7, #6]
  }

  SetWindow(x, y, x, y2);
 800298c:	8afb      	ldrh	r3, [r7, #22]
 800298e:	8978      	ldrh	r0, [r7, #10]
 8002990:	893a      	ldrh	r2, [r7, #8]
 8002992:	8979      	ldrh	r1, [r7, #10]
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	4603      	mov	r3, r0
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f7ff fe1f 	bl	80025dc <_ZN7ILI93419SetWindowEtttt>
  Flood(color, length);
 800299e:	88fa      	ldrh	r2, [r7, #6]
 80029a0:	8c3b      	ldrh	r3, [r7, #32]
 80029a2:	4619      	mov	r1, r3
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f7ff fecb 	bl	8002740 <_ZN7ILI93415FloodEtm>
 80029aa:	e000      	b.n	80029ae <_ZN7ILI934113DrawFastVLineEtttt+0xa2>
    return;
 80029ac:	bf00      	nop
}
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <_ZN7ILI934111SetRotationEh>:

void ILI9341::SetRotation(uint8_t x) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80029ca:	2200      	movs	r2, #0
 80029cc:	4619      	mov	r1, r3
 80029ce:	f003 f8a3 	bl	8005b18 <HAL_GPIO_WritePin>
  rotation = x % 4; // can't be higher than 3
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	771a      	strb	r2, [r3, #28]
  switch (rotation) {
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7f1b      	ldrb	r3, [r3, #28]
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d832      	bhi.n	8002a4c <_ZN7ILI934111SetRotationEh+0x98>
 80029e6:	a201      	add	r2, pc, #4	@ (adr r2, 80029ec <_ZN7ILI934111SetRotationEh+0x38>)
 80029e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ec:	080029fd 	.word	0x080029fd
 80029f0:	08002a11 	.word	0x08002a11
 80029f4:	08002a25 	.word	0x08002a25
 80029f8:	08002a39 	.word	0x08002a39
  case 0:
    x = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 80029fc:	2348      	movs	r3, #72	@ 0x48
 80029fe:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTWIDTH;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	22f0      	movs	r2, #240	@ 0xf0
 8002a04:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTHEIGHT;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002a0c:	815a      	strh	r2, [r3, #10]
    break;
 8002a0e:	e01d      	b.n	8002a4c <_ZN7ILI934111SetRotationEh+0x98>
  case 1:
    x = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8002a10:	2328      	movs	r3, #40	@ 0x28
 8002a12:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTHEIGHT;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002a1a:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTWIDTH;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	22f0      	movs	r2, #240	@ 0xf0
 8002a20:	815a      	strh	r2, [r3, #10]
    break;
 8002a22:	e013      	b.n	8002a4c <_ZN7ILI934111SetRotationEh+0x98>
  case 2:
    x = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8002a24:	2388      	movs	r3, #136	@ 0x88
 8002a26:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTWIDTH;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	22f0      	movs	r2, #240	@ 0xf0
 8002a2c:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTHEIGHT;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002a34:	815a      	strh	r2, [r3, #10]
    break;
 8002a36:	e009      	b.n	8002a4c <_ZN7ILI934111SetRotationEh+0x98>
  case 3:
    x = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8002a38:	23e8      	movs	r3, #232	@ 0xe8
 8002a3a:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTHEIGHT;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002a42:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTWIDTH;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	22f0      	movs	r2, #240	@ 0xf0
 8002a48:	815a      	strh	r2, [r3, #10]
    break;
 8002a4a:	bf00      	nop
  }
  TransmitCmd(ILI9341_MADCTL); // MADCTL
 8002a4c:	2136      	movs	r1, #54	@ 0x36
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff fd46 	bl	80024e0 <_ZN7ILI934111TransmitCmdEh>
  Transmit8bitData(x);
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	4619      	mov	r1, r3
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff fd59 	bl	8002510 <_ZN7ILI934116Transmit8bitDataEh>
  // For 9341, init default full-screen address window:
  SetWindow(0, 0, width_ - 1, height_ - 1); // CS_IDLE happens here
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff fdac 	bl	80025dc <_ZN7ILI93419SetWindowEtttt>
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <_ZN7ILI934111SetTextSizeEh>:

void ILI9341::SetTextSize(uint8_t size)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	70fb      	strb	r3, [r7, #3]
  text_size_ = size;
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	b21a      	sxth	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	819a      	strh	r2, [r3, #12]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <_ZN7ILI93418DrawCharEsshth>:

void ILI9341::DrawChar(int16_t x, int16_t y, unsigned char c,
    uint16_t color, uint8_t size)
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b089      	sub	sp, #36	@ 0x24
 8002ab0:	af04      	add	r7, sp, #16
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	4608      	mov	r0, r1
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4603      	mov	r3, r0
 8002abc:	817b      	strh	r3, [r7, #10]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	813b      	strh	r3, [r7, #8]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	71fb      	strb	r3, [r7, #7]
  DrawChar(x, y, c, color, textbgcolor, size, size);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8b1b      	ldrh	r3, [r3, #24]
 8002aca:	79fc      	ldrb	r4, [r7, #7]
 8002acc:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8002ad0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002ad4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002ad8:	9203      	str	r2, [sp, #12]
 8002ada:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002ade:	9202      	str	r2, [sp, #8]
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	8c3b      	ldrh	r3, [r7, #32]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	4623      	mov	r3, r4
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f804 	bl	8002af8 <_ZN7ILI93418DrawCharEsshtthh>
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd90      	pop	{r4, r7, pc}

08002af8 <_ZN7ILI93418DrawCharEsshtthh>:

void ILI9341::DrawChar(int16_t x, int16_t y, unsigned char c,
    uint16_t color, uint16_t bg, uint8_t size_x,
    uint8_t size_y)
{
 8002af8:	b590      	push	{r4, r7, lr}
 8002afa:	b089      	sub	sp, #36	@ 0x24
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	4608      	mov	r0, r1
 8002b02:	4611      	mov	r1, r2
 8002b04:	461a      	mov	r2, r3
 8002b06:	4603      	mov	r3, r0
 8002b08:	817b      	strh	r3, [r7, #10]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	813b      	strh	r3, [r7, #8]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	71fb      	strb	r3, [r7, #7]
  for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8002b12:	2300      	movs	r3, #0
 8002b14:	75fb      	strb	r3, [r7, #23]
 8002b16:	e0a8      	b.n	8002c6a <_ZN7ILI93418DrawCharEsshtthh+0x172>
      uint8_t line = font[c * 5 + i];
 8002b18:	79fa      	ldrb	r2, [r7, #7]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	441a      	add	r2, r3
 8002b20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b24:	4413      	add	r3, r2
 8002b26:	4a6e      	ldr	r2, [pc, #440]	@ (8002ce0 <_ZN7ILI93418DrawCharEsshtthh+0x1e8>)
 8002b28:	5cd3      	ldrb	r3, [r2, r3]
 8002b2a:	75bb      	strb	r3, [r7, #22]
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	757b      	strb	r3, [r7, #21]
 8002b30:	e090      	b.n	8002c54 <_ZN7ILI93418DrawCharEsshtthh+0x15c>
        if (line & 1) {
 8002b32:	7dbb      	ldrb	r3, [r7, #22]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d03f      	beq.n	8002bbc <_ZN7ILI93418DrawCharEsshtthh+0xc4>
          if (size_x == 1 && size_y == 1)
 8002b3c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d114      	bne.n	8002b6e <_ZN7ILI93418DrawCharEsshtthh+0x76>
 8002b44:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d110      	bne.n	8002b6e <_ZN7ILI93418DrawCharEsshtthh+0x76>
            DrawPixel(x + i, y + j, color);
 8002b4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	897b      	ldrh	r3, [r7, #10]
 8002b54:	4413      	add	r3, r2
 8002b56:	b299      	uxth	r1, r3
 8002b58:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	893b      	ldrh	r3, [r7, #8]
 8002b60:	4413      	add	r3, r2
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f7ff fd8a 	bl	8002680 <_ZN7ILI93419DrawPixelEttt>
 8002b6c:	e069      	b.n	8002c42 <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          else
            FillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 8002b6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	fb12 f303 	smulbb	r3, r2, r3
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	897b      	ldrh	r3, [r7, #10]
 8002b82:	4413      	add	r3, r2
 8002b84:	b299      	uxth	r1, r3
 8002b86:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	fb12 f303 	smulbb	r3, r2, r3
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	893b      	ldrh	r3, [r7, #8]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	b298      	uxth	r0, r3
 8002b9e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002ba2:	b29c      	uxth	r4, r3
 8002ba4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002bac:	9201      	str	r2, [sp, #4]
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	4623      	mov	r3, r4
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 f8fa 	bl	8002dae <_ZN7ILI93418FillRectEttttt>
 8002bba:	e042      	b.n	8002c42 <_ZN7ILI93418DrawCharEsshtthh+0x14a>
                          color);
        } else if (bg != color) {
 8002bbc:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002bbe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d03e      	beq.n	8002c42 <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          if (size_x == 1 && size_y == 1)
 8002bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d114      	bne.n	8002bf6 <_ZN7ILI93418DrawCharEsshtthh+0xfe>
 8002bcc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d110      	bne.n	8002bf6 <_ZN7ILI93418DrawCharEsshtthh+0xfe>
            DrawPixel(x + i, y + j, bg);
 8002bd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	897b      	ldrh	r3, [r7, #10]
 8002bdc:	4413      	add	r3, r2
 8002bde:	b299      	uxth	r1, r3
 8002be0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	893b      	ldrh	r3, [r7, #8]
 8002be8:	4413      	add	r3, r2
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f7ff fd46 	bl	8002680 <_ZN7ILI93419DrawPixelEttt>
 8002bf4:	e025      	b.n	8002c42 <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          else
            FillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8002bf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	fb12 f303 	smulbb	r3, r2, r3
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	897b      	ldrh	r3, [r7, #10]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	b299      	uxth	r1, r3
 8002c0e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	fb12 f303 	smulbb	r3, r2, r3
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	893b      	ldrh	r3, [r7, #8]
 8002c22:	4413      	add	r3, r2
 8002c24:	b298      	uxth	r0, r3
 8002c26:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002c2a:	b29c      	uxth	r4, r3
 8002c2c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002c34:	9201      	str	r2, [sp, #4]
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	4623      	mov	r3, r4
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f8b6 	bl	8002dae <_ZN7ILI93418FillRectEttttt>
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8002c42:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	3301      	adds	r3, #1
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	757b      	strb	r3, [r7, #21]
 8002c4e:	7dbb      	ldrb	r3, [r7, #22]
 8002c50:	085b      	lsrs	r3, r3, #1
 8002c52:	75bb      	strb	r3, [r7, #22]
 8002c54:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002c58:	2b07      	cmp	r3, #7
 8002c5a:	f77f af6a 	ble.w	8002b32 <_ZN7ILI93418DrawCharEsshtthh+0x3a>
  for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8002c5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	3301      	adds	r3, #1
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	75fb      	strb	r3, [r7, #23]
 8002c6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	f77f af52 	ble.w	8002b18 <_ZN7ILI93418DrawCharEsshtthh+0x20>
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
 8002c74:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002c76:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d02d      	beq.n	8002cd8 <_ZN7ILI93418DrawCharEsshtthh+0x1e0>
      if (size_x == 1 && size_y == 1)
 8002c7c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d10e      	bne.n	8002ca2 <_ZN7ILI93418DrawCharEsshtthh+0x1aa>
 8002c84:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d10a      	bne.n	8002ca2 <_ZN7ILI93418DrawCharEsshtthh+0x1aa>
        DrawFastVLine(x + 5, y, 8, bg);
 8002c8c:	897b      	ldrh	r3, [r7, #10]
 8002c8e:	3305      	adds	r3, #5
 8002c90:	b299      	uxth	r1, r3
 8002c92:	893a      	ldrh	r2, [r7, #8]
 8002c94:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	2308      	movs	r3, #8
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f7ff fe36 	bl	800290c <_ZN7ILI934113DrawFastVLineEtttt>
      else
        FillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    }
}
 8002ca0:	e01a      	b.n	8002cd8 <_ZN7ILI93418DrawCharEsshtthh+0x1e0>
        FillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8002ca2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	0092      	lsls	r2, r2, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	897b      	ldrh	r3, [r7, #10]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	b299      	uxth	r1, r3
 8002cb6:	8938      	ldrh	r0, [r7, #8]
 8002cb8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002cbc:	b29c      	uxth	r4, r3
 8002cbe:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002cca:	9201      	str	r2, [sp, #4]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	4623      	mov	r3, r4
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f86b 	bl	8002dae <_ZN7ILI93418FillRectEttttt>
}
 8002cd8:	bf00      	nop
 8002cda:	371c      	adds	r7, #28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd90      	pop	{r4, r7, pc}
 8002ce0:	0800ce20 	.word	0x0800ce20

08002ce4 <_ZN7ILI93418DrawTextEttPKct>:

void ILI9341::DrawText(uint16_t x, uint16_t y, const char *str, uint16_t color)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	607b      	str	r3, [r7, #4]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	817b      	strh	r3, [r7, #10]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	813b      	strh	r3, [r7, #8]
  // NOTE: Characters are 6x8 (wxh)
    uint8_t TempChar;

    /* Set area back to span the entire LCD */
    SetWindow(0, 0, width_ - 1, height_ - 1);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	4613      	mov	r3, r2
 8002d12:	2200      	movs	r2, #0
 8002d14:	2100      	movs	r1, #0
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f7ff fc60 	bl	80025dc <_ZN7ILI93419SetWindowEtttt>
    do
    {
        TempChar = *str++;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	75fb      	strb	r3, [r7, #23]
        DrawChar( x, y, TempChar, color, text_size_);
 8002d26:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002d2a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	7df8      	ldrb	r0, [r7, #23]
 8002d38:	9301      	str	r3, [sp, #4]
 8002d3a:	8c3b      	ldrh	r3, [r7, #32]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	4603      	mov	r3, r0
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7ff feb3 	bl	8002aac <_ZN7ILI93418DrawCharEsshth>
        if( x < width_ - 1 - 8)
 8002d46:	897a      	ldrh	r2, [r7, #10]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d4e:	3b09      	subs	r3, #9
 8002d50:	429a      	cmp	r2, r3
 8002d52:	da0c      	bge.n	8002d6e <_ZN7ILI93418DrawTextEttPKct+0x8a>
        {
            x += (6 * text_size_);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	0052      	lsls	r2, r2, #1
 8002d60:	4413      	add	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	897b      	ldrh	r3, [r7, #10]
 8002d68:	4413      	add	r3, r2
 8002d6a:	817b      	strh	r3, [r7, #10]
 8002d6c:	e016      	b.n	8002d9c <_ZN7ILI93418DrawTextEttPKct+0xb8>
        }
        else if ( y < height_ - 1 - 16)
 8002d6e:	893a      	ldrh	r2, [r7, #8]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d76:	3b11      	subs	r3, #17
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	da0b      	bge.n	8002d94 <_ZN7ILI93418DrawTextEttPKct+0xb0>
        {
            x = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	817b      	strh	r3, [r7, #10]
            y += (8 * text_size_);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	893b      	ldrh	r3, [r7, #8]
 8002d8e:	4413      	add	r3, r2
 8002d90:	813b      	strh	r3, [r7, #8]
 8002d92:	e003      	b.n	8002d9c <_ZN7ILI93418DrawTextEttPKct+0xb8>
        }
        else
        {
            x = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	817b      	strh	r3, [r7, #10]
            y = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	813b      	strh	r3, [r7, #8]
        }
    }
    while ( *str != 0 );
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1bb      	bne.n	8002d1c <_ZN7ILI93418DrawTextEttPKct+0x38>
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <_ZN7ILI93418FillRectEttttt>:
  DrawFastVLine(x, y, h, color);
  DrawFastVLine(x + w - 1, y, h, color);
}

void ILI9341::FillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b088      	sub	sp, #32
 8002db2:	af02      	add	r7, sp, #8
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	4608      	mov	r0, r1
 8002db8:	4611      	mov	r1, r2
 8002dba:	461a      	mov	r2, r3
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	817b      	strh	r3, [r7, #10]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	813b      	strh	r3, [r7, #8]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	80fb      	strh	r3, [r7, #6]
  int16_t x2, y2;

  // Initial off-screen clipping
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8002dc8:	88fb      	ldrh	r3, [r7, #6]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d024      	beq.n	8002e18 <_ZN7ILI93418FillRectEttttt+0x6a>
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 8002dce:	8c3b      	ldrh	r3, [r7, #32]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d021      	beq.n	8002e18 <_ZN7ILI93418FillRectEttttt+0x6a>
 8002dd4:	897b      	ldrh	r3, [r7, #10]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	da1b      	bge.n	8002e18 <_ZN7ILI93418FillRectEttttt+0x6a>
 8002de0:	893b      	ldrh	r3, [r7, #8]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002de8:	4293      	cmp	r3, r2
 8002dea:	da15      	bge.n	8002e18 <_ZN7ILI93418FillRectEttttt+0x6a>
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8002dec:	897a      	ldrh	r2, [r7, #10]
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	4413      	add	r3, r2
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	82fb      	strh	r3, [r7, #22]
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 8002dfa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	db0a      	blt.n	8002e18 <_ZN7ILI93418FillRectEttttt+0x6a>
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8002e02:	893a      	ldrh	r2, [r7, #8]
 8002e04:	8c3b      	ldrh	r3, [r7, #32]
 8002e06:	4413      	add	r3, r2
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	82bb      	strh	r3, [r7, #20]
 8002e10:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	da01      	bge.n	8002e1c <_ZN7ILI93418FillRectEttttt+0x6e>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <_ZN7ILI93418FillRectEttttt+0x70>
 8002e1c:	2300      	movs	r3, #0
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d13a      	bne.n	8002e98 <_ZN7ILI93418FillRectEttttt+0xea>
  }
  if (y1 < 0) { // Clip top
    h += y1;
    y1 = 0;
  }
  if (x2 >= width_) { // Clip right
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	db0c      	blt.n	8002e4a <_ZN7ILI93418FillRectEttttt+0x9c>
    x2 = width_ - 1;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	82fb      	strh	r3, [r7, #22]
    w = x2 - x1 + 1;
 8002e3e:	8afa      	ldrh	r2, [r7, #22]
 8002e40:	897b      	ldrh	r3, [r7, #10]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	3301      	adds	r3, #1
 8002e48:	80fb      	strh	r3, [r7, #6]
  }
  if (y2 >= height_) { // Clip bottom
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002e50:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	db0c      	blt.n	8002e72 <_ZN7ILI93418FillRectEttttt+0xc4>
    y2 = height_ - 1;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	82bb      	strh	r3, [r7, #20]
    h = y2 - y1 + 1;
 8002e66:	8aba      	ldrh	r2, [r7, #20]
 8002e68:	893b      	ldrh	r3, [r7, #8]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3301      	adds	r3, #1
 8002e70:	843b      	strh	r3, [r7, #32]
  }

  SetWindow(x1, y1, x2, y2);
 8002e72:	8af8      	ldrh	r0, [r7, #22]
 8002e74:	8abb      	ldrh	r3, [r7, #20]
 8002e76:	893a      	ldrh	r2, [r7, #8]
 8002e78:	8979      	ldrh	r1, [r7, #10]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f7ff fbac 	bl	80025dc <_ZN7ILI93419SetWindowEtttt>
  Flood(color, (uint32_t)w * (uint32_t)h);
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	8c3a      	ldrh	r2, [r7, #32]
 8002e88:	fb03 f202 	mul.w	r2, r3, r2
 8002e8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e8e:	4619      	mov	r1, r3
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f7ff fc55 	bl	8002740 <_ZN7ILI93415FloodEtm>
 8002e96:	e000      	b.n	8002e9a <_ZN7ILI93418FillRectEttttt+0xec>
    return;
 8002e98:	bf00      	nop
}
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <_ZN7ILI934110FillCircleEtttt>:
void ILI9341::FillCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	4608      	mov	r0, r1
 8002eaa:	4611      	mov	r1, r2
 8002eac:	461a      	mov	r2, r3
 8002eae:	4603      	mov	r3, r0
 8002eb0:	817b      	strh	r3, [r7, #10]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	813b      	strh	r3, [r7, #8]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	80fb      	strh	r3, [r7, #6]
    int16_t x = 0, y = r;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	82fb      	strh	r3, [r7, #22]
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	82bb      	strh	r3, [r7, #20]
    int16_t d = 1 - r;
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	f1c3 0301 	rsb	r3, r3, #1
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	827b      	strh	r3, [r7, #18]

    // Draw initial center line
    DrawFastHLine(x0 - r, y0, 2 * r + 1, color);
 8002ecc:	897a      	ldrh	r2, [r7, #10]
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	b299      	uxth	r1, r3
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3301      	adds	r3, #1
 8002edc:	b298      	uxth	r0, r3
 8002ede:	893a      	ldrh	r2, [r7, #8]
 8002ee0:	8c3b      	ldrh	r3, [r7, #32]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f7ff fcbc 	bl	8002864 <_ZN7ILI934113DrawFastHLineEtttt>

    while (y >= x) {
 8002eec:	e073      	b.n	8002fd6 <_ZN7ILI934110FillCircleEtttt+0x136>
        // Draw horizontal spans
        DrawFastHLine(x0 - x, y0 + y, 2 * x + 1, color);
 8002eee:	8afb      	ldrh	r3, [r7, #22]
 8002ef0:	897a      	ldrh	r2, [r7, #10]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	b299      	uxth	r1, r3
 8002ef6:	8aba      	ldrh	r2, [r7, #20]
 8002ef8:	893b      	ldrh	r3, [r7, #8]
 8002efa:	4413      	add	r3, r2
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	8afb      	ldrh	r3, [r7, #22]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3301      	adds	r3, #1
 8002f06:	b298      	uxth	r0, r3
 8002f08:	8c3b      	ldrh	r3, [r7, #32]
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f7ff fca8 	bl	8002864 <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - x, y0 - y, 2 * x + 1, color);
 8002f14:	8afb      	ldrh	r3, [r7, #22]
 8002f16:	897a      	ldrh	r2, [r7, #10]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	b299      	uxth	r1, r3
 8002f1c:	8abb      	ldrh	r3, [r7, #20]
 8002f1e:	893a      	ldrh	r2, [r7, #8]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	8afb      	ldrh	r3, [r7, #22]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	b298      	uxth	r0, r3
 8002f2e:	8c3b      	ldrh	r3, [r7, #32]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	4603      	mov	r3, r0
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f7ff fc95 	bl	8002864 <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - y, y0 + x, 2 * y + 1, color);
 8002f3a:	8abb      	ldrh	r3, [r7, #20]
 8002f3c:	897a      	ldrh	r2, [r7, #10]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	b299      	uxth	r1, r3
 8002f42:	8afa      	ldrh	r2, [r7, #22]
 8002f44:	893b      	ldrh	r3, [r7, #8]
 8002f46:	4413      	add	r3, r2
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	8abb      	ldrh	r3, [r7, #20]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3301      	adds	r3, #1
 8002f52:	b298      	uxth	r0, r3
 8002f54:	8c3b      	ldrh	r3, [r7, #32]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	4603      	mov	r3, r0
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f7ff fc82 	bl	8002864 <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - y, y0 - x, 2 * y + 1, color);
 8002f60:	8abb      	ldrh	r3, [r7, #20]
 8002f62:	897a      	ldrh	r2, [r7, #10]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	b299      	uxth	r1, r3
 8002f68:	8afb      	ldrh	r3, [r7, #22]
 8002f6a:	893a      	ldrh	r2, [r7, #8]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	8abb      	ldrh	r3, [r7, #20]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3301      	adds	r3, #1
 8002f78:	b298      	uxth	r0, r3
 8002f7a:	8c3b      	ldrh	r3, [r7, #32]
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	4603      	mov	r3, r0
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f7ff fc6f 	bl	8002864 <_ZN7ILI934113DrawFastHLineEtttt>

        x++;
 8002f86:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	82fb      	strh	r3, [r7, #22]
        if (d < 0) {
 8002f92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	da09      	bge.n	8002fae <_ZN7ILI934110FillCircleEtttt+0x10e>
            d += 2 * x + 1;
 8002f9a:	8afb      	ldrh	r3, [r7, #22]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	8a7b      	ldrh	r3, [r7, #18]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	827b      	strh	r3, [r7, #18]
 8002fac:	e013      	b.n	8002fd6 <_ZN7ILI934110FillCircleEtttt+0x136>
        } else {
            y--;
 8002fae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	82bb      	strh	r3, [r7, #20]
            d += 2 * (x - y) + 1;
 8002fba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002fbe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	8a7b      	ldrh	r3, [r7, #18]
 8002fcc:	4413      	add	r3, r2
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	827b      	strh	r3, [r7, #18]
    while (y >= x) {
 8002fd6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002fda:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	da85      	bge.n	8002eee <_ZN7ILI934110FillCircleEtttt+0x4e>
        }
    }
}
 8002fe2:	bf00      	nop
 8002fe4:	bf00      	nop
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <TCAL9538RSVR_INIT>:
*/



uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	71fb      	strb	r3, [r7, #7]
 8002ffe:	4613      	mov	r3, r2
 8003000:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;
	dev->input = direction_bitMask;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	79ba      	ldrb	r2, [r7, #6]
 800300a:	719a      	strb	r2, [r3, #6]


    dev->i2cHandle = i2cHandle;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	601a      	str	r2, [r3, #0]
    dev->portValues = 0;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress<<1);
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	b25b      	sxtb	r3, r3
 8003026:	f063 031f 	orn	r3, r3, #31
 800302a:	b25b      	sxtb	r3, r3
 800302c:	b2da      	uxtb	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	711a      	strb	r2, [r3, #4]
    uint8_t hold_bitMask = direction_bitMask;
 8003032:	79bb      	ldrb	r3, [r7, #6]
 8003034:	757b      	strb	r3, [r7, #21]

    status = TCAL9538RSVR_SetDirection(dev, &hold_bitMask);
 8003036:	f107 0315 	add.w	r3, r7, #21
 800303a:	4619      	mov	r1, r3
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 f83b 	bl	80030b8 <TCAL9538RSVR_SetDirection>
 8003042:	4603      	mov	r3, r0
 8003044:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8003046:	7dbb      	ldrb	r3, [r7, #22]
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf14      	ite	ne
 800304c:	2301      	movne	r3, #1
 800304e:	2300      	moveq	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	7dfb      	ldrb	r3, [r7, #23]
 8003056:	4413      	add	r3, r2
 8003058:	75fb      	strb	r3, [r7, #23]

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 800305a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800305e:	4619      	mov	r1, r3
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f838 	bl	80030d6 <TCAL9538RSVR_SetInterrupts>
 8003066:	4603      	mov	r3, r0
 8003068:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 800306a:	7dbb      	ldrb	r3, [r7, #22]
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf14      	ite	ne
 8003070:	2301      	movne	r3, #1
 8003072:	2300      	moveq	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	7dfb      	ldrb	r3, [r7, #23]
 800307a:	4413      	add	r3, r2
 800307c:	75fb      	strb	r3, [r7, #23]

    // if all pins are inputs, invert all pins
    if (direction_bitMask == 0xFF) {
 800307e:	79bb      	ldrb	r3, [r7, #6]
 8003080:	2bff      	cmp	r3, #255	@ 0xff
 8003082:	d114      	bne.n	80030ae <TCAL9538RSVR_INIT+0xc2>
        uint8_t full = 0xFF;
 8003084:	23ff      	movs	r3, #255	@ 0xff
 8003086:	753b      	strb	r3, [r7, #20]
        status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_INVERSION, &full);
 8003088:	f107 0314 	add.w	r3, r7, #20
 800308c:	461a      	mov	r2, r3
 800308e:	2102      	movs	r1, #2
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f894 	bl	80031be <TCAL9538RSVR_WriteRegister>
 8003096:	4603      	mov	r3, r0
 8003098:	75bb      	strb	r3, [r7, #22]
        errNum += (status != HAL_OK);
 800309a:	7dbb      	ldrb	r3, [r7, #22]
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf14      	ite	ne
 80030a0:	2301      	movne	r3, #1
 80030a2:	2300      	moveq	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
 80030aa:	4413      	add	r3, r2
 80030ac:	75fb      	strb	r3, [r7, #23]
    }
    

    return (errNum);
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t* bitMask)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, bitMask);
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	2103      	movs	r1, #3
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f879 	bl	80031be <TCAL9538RSVR_WriteRegister>
 80030cc:	4603      	mov	r3, r0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	460b      	mov	r3, r1
 80030e0:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 80030e2:	1cfb      	adds	r3, r7, #3
 80030e4:	461a      	mov	r2, r3
 80030e6:	2145      	movs	r1, #69	@ 0x45
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f868 	bl	80031be <TCAL9538RSVR_WriteRegister>
 80030ee:	4603      	mov	r3, r0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    uint8_t triggeredInterrupts = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	737b      	strb	r3, [r7, #13]


    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 8003108:	f107 030d 	add.w	r3, r7, #13
 800310c:	461a      	mov	r2, r3
 800310e:	2146      	movs	r1, #70	@ 0x46
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f837 	bl	8003184 <TCAL9538RSVR_ReadRegister>
 8003116:	4603      	mov	r3, r0
 8003118:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 800311a:	7bbb      	ldrb	r3, [r7, #14]
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	7bfb      	ldrb	r3, [r7, #15]
 800312a:	4413      	add	r3, r2
 800312c:	73fb      	strb	r3, [r7, #15]

    // Read updated input values
    status = TCAL9538RSVR_ReadInput(dev, &dev->portValues);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3305      	adds	r3, #5
 8003132:	4619      	mov	r1, r3
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f807 	bl	8003148 <TCAL9538RSVR_ReadInput>
 800313a:	4603      	mov	r3, r0
 800313c:	73bb      	strb	r3, [r7, #14]


    return (errNum);
 800313e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <TCAL9538RSVR_ReadInput>:




HAL_StatusTypeDef TCAL9538RSVR_ReadInput(TCAL9538RSVR* dev, uint8_t *data)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, data);
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	2100      	movs	r1, #0
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f814 	bl	8003184 <TCAL9538RSVR_ReadRegister>
 800315c:	4603      	mov	r3, r0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <TCAL9538RSVR_SetOutput>:
HAL_StatusTypeDef TCAL9538RSVR_SetOutput(TCAL9538RSVR* dev, uint8_t *data)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	2101      	movs	r1, #1
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f822 	bl	80031be <TCAL9538RSVR_WriteRegister>
 800317a:	4603      	mov	r3, r0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <TCAL9538RSVR_ReadRegister>:

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af04      	add	r7, sp, #16
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	460b      	mov	r3, r1
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	791b      	ldrb	r3, [r3, #4]
 800319a:	4619      	mov	r1, r3
 800319c:	7afb      	ldrb	r3, [r7, #11]
 800319e:	b29a      	uxth	r2, r3
 80031a0:	f04f 33ff 	mov.w	r3, #4294967295
 80031a4:	9302      	str	r3, [sp, #8]
 80031a6:	2301      	movs	r3, #1
 80031a8:	9301      	str	r3, [sp, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	2301      	movs	r3, #1
 80031b0:	f002 feac 	bl	8005f0c <HAL_I2C_Mem_Read>
 80031b4:	4603      	mov	r3, r0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b088      	sub	sp, #32
 80031c2:	af04      	add	r7, sp, #16
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	460b      	mov	r3, r1
 80031c8:	607a      	str	r2, [r7, #4]
 80031ca:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Write(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	791b      	ldrb	r3, [r3, #4]
 80031d4:	4619      	mov	r1, r3
 80031d6:	7afb      	ldrb	r3, [r7, #11]
 80031d8:	b29a      	uxth	r2, r3
 80031da:	f04f 33ff 	mov.w	r3, #4294967295
 80031de:	9302      	str	r3, [sp, #8]
 80031e0:	2301      	movs	r3, #1
 80031e2:	9301      	str	r3, [sp, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	2301      	movs	r3, #1
 80031ea:	f002 fd7b 	bl	8005ce4 <HAL_I2C_Mem_Write>
 80031ee:	4603      	mov	r3, r0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80031f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003230 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031fc:	f7fe ff84 	bl	8002108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003200:	480c      	ldr	r0, [pc, #48]	@ (8003234 <LoopForever+0x6>)
  ldr r1, =_edata
 8003202:	490d      	ldr	r1, [pc, #52]	@ (8003238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003204:	4a0d      	ldr	r2, [pc, #52]	@ (800323c <LoopForever+0xe>)
  movs r3, #0
 8003206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003208:	e002      	b.n	8003210 <LoopCopyDataInit>

0800320a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800320a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800320c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800320e:	3304      	adds	r3, #4

08003210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003214:	d3f9      	bcc.n	800320a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003216:	4a0a      	ldr	r2, [pc, #40]	@ (8003240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003218:	4c0a      	ldr	r4, [pc, #40]	@ (8003244 <LoopForever+0x16>)
  movs r3, #0
 800321a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800321c:	e001      	b.n	8003222 <LoopFillZerobss>

0800321e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800321e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003220:	3204      	adds	r2, #4

08003222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003224:	d3fb      	bcc.n	800321e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003226:	f009 fc95 	bl	800cb54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800322a:	f7fe f8e3 	bl	80013f4 <main>

0800322e <LoopForever>:

LoopForever:
    b LoopForever
 800322e:	e7fe      	b.n	800322e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003230:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003238:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800323c:	0800d36c 	.word	0x0800d36c
  ldr r2, =_sbss
 8003240:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003244:	20002a28 	.word	0x20002a28

08003248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003248:	e7fe      	b.n	8003248 <ADC1_2_IRQHandler>

0800324a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003254:	2003      	movs	r0, #3
 8003256:	f002 f822 	bl	800529e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800325a:	200f      	movs	r0, #15
 800325c:	f7fe fe9a 	bl	8001f94 <HAL_InitTick>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	71fb      	strb	r3, [r7, #7]
 800326a:	e001      	b.n	8003270 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800326c:	f7fe fc64 	bl	8001b38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003270:	79fb      	ldrb	r3, [r7, #7]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003280:	4b06      	ldr	r3, [pc, #24]	@ (800329c <HAL_IncTick+0x20>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	4b06      	ldr	r3, [pc, #24]	@ (80032a0 <HAL_IncTick+0x24>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4413      	add	r3, r2
 800328c:	4a04      	ldr	r2, [pc, #16]	@ (80032a0 <HAL_IncTick+0x24>)
 800328e:	6013      	str	r3, [r2, #0]
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000008 	.word	0x20000008
 80032a0:	2000038c 	.word	0x2000038c

080032a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return uwTick;
 80032a8:	4b03      	ldr	r3, [pc, #12]	@ (80032b8 <HAL_GetTick+0x14>)
 80032aa:	681b      	ldr	r3, [r3, #0]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	2000038c 	.word	0x2000038c

080032bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032c4:	f7ff ffee 	bl	80032a4 <HAL_GetTick>
 80032c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d005      	beq.n	80032e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80032d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003300 <HAL_Delay+0x44>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4413      	add	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032e2:	bf00      	nop
 80032e4:	f7ff ffde 	bl	80032a4 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d8f7      	bhi.n	80032e4 <HAL_Delay+0x28>
  {
  }
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000008 	.word	0x20000008

08003304 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	609a      	str	r2, [r3, #8]
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	609a      	str	r2, [r3, #8]
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	3360      	adds	r3, #96	@ 0x60
 800337e:	461a      	mov	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4b08      	ldr	r3, [pc, #32]	@ (80033b0 <LL_ADC_SetOffset+0x44>)
 800338e:	4013      	ands	r3, r2
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	4313      	orrs	r3, r2
 800339c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	03fff000 	.word	0x03fff000

080033b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3360      	adds	r3, #96	@ 0x60
 80033c2:	461a      	mov	r2, r3
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	3360      	adds	r3, #96	@ 0x60
 80033f0:	461a      	mov	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	431a      	orrs	r2, r3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800340a:	bf00      	nop
 800340c:	371c      	adds	r7, #28
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	615a      	str	r2, [r3, #20]
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003462:	b480      	push	{r7}
 8003464:	b087      	sub	sp, #28
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	3330      	adds	r3, #48	@ 0x30
 8003472:	461a      	mov	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	0a1b      	lsrs	r3, r3, #8
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	4413      	add	r3, r2
 8003480:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f003 031f 	and.w	r3, r3, #31
 800348c:	211f      	movs	r1, #31
 800348e:	fa01 f303 	lsl.w	r3, r1, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	401a      	ands	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	0e9b      	lsrs	r3, r3, #26
 800349a:	f003 011f 	and.w	r1, r3, #31
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	fa01 f303 	lsl.w	r3, r1, r3
 80034a8:	431a      	orrs	r2, r3
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b087      	sub	sp, #28
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3314      	adds	r3, #20
 80034ca:	461a      	mov	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	0e5b      	lsrs	r3, r3, #25
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	4413      	add	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	0d1b      	lsrs	r3, r3, #20
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	2107      	movs	r1, #7
 80034e8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	401a      	ands	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	0d1b      	lsrs	r3, r3, #20
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	fa01 f303 	lsl.w	r3, r1, r3
 80034fe:	431a      	orrs	r2, r3
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003504:	bf00      	nop
 8003506:	371c      	adds	r7, #28
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003528:	43db      	mvns	r3, r3
 800352a:	401a      	ands	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f003 0318 	and.w	r3, r3, #24
 8003532:	4908      	ldr	r1, [pc, #32]	@ (8003554 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003534:	40d9      	lsrs	r1, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	400b      	ands	r3, r1
 800353a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353e:	431a      	orrs	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003546:	bf00      	nop
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	0007ffff 	.word	0x0007ffff

08003558 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 031f 	and.w	r3, r3, #31
}
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003584:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6093      	str	r3, [r2, #8]
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035ac:	d101      	bne.n	80035b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80035d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035fc:	d101      	bne.n	8003602 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003620:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003624:	f043 0201 	orr.w	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003648:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800364c:	f043 0202 	orr.w	r2, r3, #2
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <LL_ADC_IsEnabled+0x18>
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <LL_ADC_IsEnabled+0x1a>
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b02      	cmp	r3, #2
 8003698:	d101      	bne.n	800369e <LL_ADC_IsDisableOngoing+0x18>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <LL_ADC_IsDisableOngoing+0x1a>
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036c0:	f043 0204 	orr.w	r2, r3, #4
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036e8:	f043 0210 	orr.w	r2, r3, #16
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b04      	cmp	r3, #4
 800370e:	d101      	bne.n	8003714 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003732:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003736:	f043 0220 	orr.w	r2, r3, #32
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b08      	cmp	r3, #8
 800375c:	d101      	bne.n	8003762 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b089      	sub	sp, #36	@ 0x24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e133      	b.n	80039f2 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003794:	2b00      	cmp	r3, #0
 8003796:	d109      	bne.n	80037ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7fe f9f5 	bl	8001b88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fef1 	bl	8003598 <LL_ADC_IsDeepPowerDownEnabled>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d004      	beq.n	80037c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff fed7 	bl	8003574 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff ff0c 	bl	80035e8 <LL_ADC_IsInternalRegulatorEnabled>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d115      	bne.n	8003802 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff fef0 	bl	80035c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037e0:	4b86      	ldr	r3, [pc, #536]	@ (80039fc <HAL_ADC_Init+0x28c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	099b      	lsrs	r3, r3, #6
 80037e6:	4a86      	ldr	r2, [pc, #536]	@ (8003a00 <HAL_ADC_Init+0x290>)
 80037e8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ec:	099b      	lsrs	r3, r3, #6
 80037ee:	3301      	adds	r3, #1
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80037f4:	e002      	b.n	80037fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f9      	bne.n	80037f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff feee 	bl	80035e8 <LL_ADC_IsInternalRegulatorEnabled>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10d      	bne.n	800382e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003816:	f043 0210 	orr.w	r2, r3, #16
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003822:	f043 0201 	orr.w	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff ff62 	bl	80036fc <LL_ADC_REG_IsConversionOngoing>
 8003838:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b00      	cmp	r3, #0
 8003844:	f040 80cc 	bne.w	80039e0 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 80c8 	bne.w	80039e0 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003854:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003858:	f043 0202 	orr.w	r2, r3, #2
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff fefb 	bl	8003660 <LL_ADC_IsEnabled>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d115      	bne.n	800389c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003870:	4864      	ldr	r0, [pc, #400]	@ (8003a04 <HAL_ADC_Init+0x294>)
 8003872:	f7ff fef5 	bl	8003660 <LL_ADC_IsEnabled>
 8003876:	4604      	mov	r4, r0
 8003878:	4863      	ldr	r0, [pc, #396]	@ (8003a08 <HAL_ADC_Init+0x298>)
 800387a:	f7ff fef1 	bl	8003660 <LL_ADC_IsEnabled>
 800387e:	4603      	mov	r3, r0
 8003880:	431c      	orrs	r4, r3
 8003882:	4862      	ldr	r0, [pc, #392]	@ (8003a0c <HAL_ADC_Init+0x29c>)
 8003884:	f7ff feec 	bl	8003660 <LL_ADC_IsEnabled>
 8003888:	4603      	mov	r3, r0
 800388a:	4323      	orrs	r3, r4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d105      	bne.n	800389c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4619      	mov	r1, r3
 8003896:	485e      	ldr	r0, [pc, #376]	@ (8003a10 <HAL_ADC_Init+0x2a0>)
 8003898:	f7ff fd34 	bl	8003304 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	7e5b      	ldrb	r3, [r3, #25]
 80038a0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038a6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80038ac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80038b2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038bc:	4313      	orrs	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d106      	bne.n	80038d8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ce:	3b01      	subs	r3, #1
 80038d0:	045b      	lsls	r3, r3, #17
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d009      	beq.n	80038f4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	4b46      	ldr	r3, [pc, #280]	@ (8003a14 <HAL_ADC_Init+0x2a4>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	69b9      	ldr	r1, [r7, #24]
 8003904:	430b      	orrs	r3, r1
 8003906:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff ff1c 	bl	800374a <LL_ADC_INJ_IsConversionOngoing>
 8003912:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d140      	bne.n	800399c <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d13d      	bne.n	800399c <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	7e1b      	ldrb	r3, [r3, #24]
 8003928:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800392a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003932:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003934:	4313      	orrs	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003942:	f023 0306 	bic.w	r3, r3, #6
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6812      	ldr	r2, [r2, #0]
 800394a:	69b9      	ldr	r1, [r7, #24]
 800394c:	430b      	orrs	r3, r1
 800394e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003956:	2b01      	cmp	r3, #1
 8003958:	d118      	bne.n	800398c <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003964:	f023 0304 	bic.w	r3, r3, #4
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003970:	4311      	orrs	r1, r2
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003976:	4311      	orrs	r1, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800397c:	430a      	orrs	r2, r1
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0201 	orr.w	r2, r2, #1
 8003988:	611a      	str	r2, [r3, #16]
 800398a:	e007      	b.n	800399c <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691a      	ldr	r2, [r3, #16]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0201 	bic.w	r2, r2, #1
 800399a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d10c      	bne.n	80039be <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	f023 010f 	bic.w	r1, r3, #15
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	1e5a      	subs	r2, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80039bc:	e007      	b.n	80039ce <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 020f 	bic.w	r2, r2, #15
 80039cc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	f043 0201 	orr.w	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80039de:	e007      	b.n	80039f0 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e4:	f043 0210 	orr.w	r2, r3, #16
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80039f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3724      	adds	r7, #36	@ 0x24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd90      	pop	{r4, r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000000 	.word	0x20000000
 8003a00:	053e2d63 	.word	0x053e2d63
 8003a04:	50040000 	.word	0x50040000
 8003a08:	50040100 	.word	0x50040100
 8003a0c:	50040200 	.word	0x50040200
 8003a10:	50040300 	.word	0x50040300
 8003a14:	fff0c007 	.word	0xfff0c007

08003a18 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a24:	4853      	ldr	r0, [pc, #332]	@ (8003b74 <HAL_ADC_Start_DMA+0x15c>)
 8003a26:	f7ff fd97 	bl	8003558 <LL_ADC_GetMultimode>
 8003a2a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff fe63 	bl	80036fc <LL_ADC_REG_IsConversionOngoing>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f040 8093 	bne.w	8003b64 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_ADC_Start_DMA+0x34>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e08e      	b.n	8003b6a <HAL_ADC_Start_DMA+0x152>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a47      	ldr	r2, [pc, #284]	@ (8003b78 <HAL_ADC_Start_DMA+0x160>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d008      	beq.n	8003a70 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b05      	cmp	r3, #5
 8003a68:	d002      	beq.n	8003a70 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b09      	cmp	r3, #9
 8003a6e:	d172      	bne.n	8003b56 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 fdcb 	bl	800460c <ADC_Enable>
 8003a76:	4603      	mov	r3, r0
 8003a78:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003a7a:	7dfb      	ldrb	r3, [r7, #23]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d165      	bne.n	8003b4c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a84:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a88:	f023 0301 	bic.w	r3, r3, #1
 8003a8c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a38      	ldr	r2, [pc, #224]	@ (8003b7c <HAL_ADC_Start_DMA+0x164>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d002      	beq.n	8003aa4 <HAL_ADC_Start_DMA+0x8c>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	e000      	b.n	8003aa6 <HAL_ADC_Start_DMA+0x8e>
 8003aa4:	4b36      	ldr	r3, [pc, #216]	@ (8003b80 <HAL_ADC_Start_DMA+0x168>)
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	6812      	ldr	r2, [r2, #0]
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d002      	beq.n	8003ab4 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d105      	bne.n	8003ac0 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d006      	beq.n	8003ada <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad0:	f023 0206 	bic.w	r2, r3, #6
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ad8:	e002      	b.n	8003ae0 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae4:	4a27      	ldr	r2, [pc, #156]	@ (8003b84 <HAL_ADC_Start_DMA+0x16c>)
 8003ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aec:	4a26      	ldr	r2, [pc, #152]	@ (8003b88 <HAL_ADC_Start_DMA+0x170>)
 8003aee:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af4:	4a25      	ldr	r2, [pc, #148]	@ (8003b8c <HAL_ADC_Start_DMA+0x174>)
 8003af6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	221c      	movs	r2, #28
 8003afe:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0210 	orr.w	r2, r2, #16
 8003b16:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3340      	adds	r3, #64	@ 0x40
 8003b32:	4619      	mov	r1, r3
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f001 fc9e 	bl	8005478 <HAL_DMA_Start_IT>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff fdb1 	bl	80036ac <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003b4a:	e00d      	b.n	8003b68 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8003b54:	e008      	b.n	8003b68 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003b62:	e001      	b.n	8003b68 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b64:	2302      	movs	r3, #2
 8003b66:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	50040300 	.word	0x50040300
 8003b78:	50040200 	.word	0x50040200
 8003b7c:	50040100 	.word	0x50040100
 8003b80:	50040000 	.word	0x50040000
 8003b84:	080047d7 	.word	0x080047d7
 8003b88:	080048af 	.word	0x080048af
 8003b8c:	080048cb 	.word	0x080048cb

08003b90 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_ADC_Stop_DMA+0x16>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e051      	b.n	8003c4a <HAL_ADC_Stop_DMA+0xba>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003bae:	2103      	movs	r1, #3
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fc6f 	bl	8004494 <ADC_ConversionStop>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d13f      	bne.n	8003c40 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d10f      	bne.n	8003bfe <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be2:	4618      	mov	r0, r3
 8003be4:	f001 fca8 	bl	8005538 <HAL_DMA_Abort>
 8003be8:	4603      	mov	r3, r0
 8003bea:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d005      	beq.n	8003bfe <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0210 	bic.w	r2, r2, #16
 8003c0c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d105      	bne.n	8003c20 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fd7f 	bl	8004718 <ADC_Disable>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	73fb      	strb	r3, [r7, #15]
 8003c1e:	e002      	b.n	8003c26 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fd79 	bl	8004718 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d109      	bne.n	8003c40 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c30:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c34:	f023 0301 	bic.w	r3, r3, #1
 8003c38:	f043 0201 	orr.w	r2, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
	...

08003c7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b0b6      	sub	sp, #216	@ 0xd8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x22>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e3e3      	b.n	8004466 <HAL_ADC_ConfigChannel+0x7ea>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fd26 	bl	80036fc <LL_ADC_REG_IsConversionOngoing>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f040 83c4 	bne.w	8004440 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b05      	cmp	r3, #5
 8003cc6:	d824      	bhi.n	8003d12 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	3b02      	subs	r3, #2
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d81b      	bhi.n	8003d0a <HAL_ADC_ConfigChannel+0x8e>
 8003cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd8 <HAL_ADC_ConfigChannel+0x5c>)
 8003cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd8:	08003ce9 	.word	0x08003ce9
 8003cdc:	08003cf1 	.word	0x08003cf1
 8003ce0:	08003cf9 	.word	0x08003cf9
 8003ce4:	08003d01 	.word	0x08003d01
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003ce8:	230c      	movs	r3, #12
 8003cea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003cee:	e010      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003cf0:	2312      	movs	r3, #18
 8003cf2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003cf6:	e00c      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003cf8:	2318      	movs	r3, #24
 8003cfa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003cfe:	e008      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003d00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003d08:	e003      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003d0a:	2306      	movs	r3, #6
 8003d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003d10:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003d20:	f7ff fb9f 	bl	8003462 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff fce7 	bl	80036fc <LL_ADC_REG_IsConversionOngoing>
 8003d2e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff fd07 	bl	800374a <LL_ADC_INJ_IsConversionOngoing>
 8003d3c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f040 81bf 	bne.w	80040c8 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f040 81ba 	bne.w	80040c8 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d5c:	d10f      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2200      	movs	r2, #0
 8003d68:	4619      	mov	r1, r3
 8003d6a:	f7ff fba6 	bl	80034ba <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff fb4d 	bl	8003416 <LL_ADC_SetSamplingTimeCommonConfig>
 8003d7c:	e00e      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	6819      	ldr	r1, [r3, #0]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f7ff fb95 	bl	80034ba <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff fb3d 	bl	8003416 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	695a      	ldr	r2, [r3, #20]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	08db      	lsrs	r3, r3, #3
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d00a      	beq.n	8003dd4 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	6919      	ldr	r1, [r3, #16]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003dce:	f7ff facd 	bl	800336c <LL_ADC_SetOffset>
 8003dd2:	e179      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff faea 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <HAL_ADC_ConfigChannel+0x184>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2100      	movs	r1, #0
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fadf 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003df6:	4603      	mov	r3, r0
 8003df8:	0e9b      	lsrs	r3, r3, #26
 8003dfa:	f003 021f 	and.w	r2, r3, #31
 8003dfe:	e01e      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x1c2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2100      	movs	r1, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff fad4 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e16:	fa93 f3a3 	rbit	r3, r3
 8003e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003e22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003e2e:	2320      	movs	r3, #32
 8003e30:	e004      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003e32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003e36:	fab3 f383 	clz	r3, r3
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d105      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x1da>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	0e9b      	lsrs	r3, r3, #26
 8003e50:	f003 031f 	and.w	r3, r3, #31
 8003e54:	e018      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x20c>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e62:	fa93 f3a3 	rbit	r3, r3
 8003e66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003e6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003e72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003e7a:	2320      	movs	r3, #32
 8003e7c:	e004      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003e7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003e82:	fab3 f383 	clz	r3, r3
 8003e86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d106      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2200      	movs	r2, #0
 8003e92:	2100      	movs	r1, #0
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff faa3 	bl	80033e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff fa87 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10a      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x24a>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff fa7c 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	0e9b      	lsrs	r3, r3, #26
 8003ec0:	f003 021f 	and.w	r2, r3, #31
 8003ec4:	e01e      	b.n	8003f04 <HAL_ADC_ConfigChannel+0x288>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2101      	movs	r1, #1
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff fa71 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003edc:	fa93 f3a3 	rbit	r3, r3
 8003ee0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003ee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003eec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003ef4:	2320      	movs	r3, #32
 8003ef6:	e004      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003ef8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003efc:	fab3 f383 	clz	r3, r3
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d105      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x2a0>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	0e9b      	lsrs	r3, r3, #26
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	e018      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x2d2>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f28:	fa93 f3a3 	rbit	r3, r3
 8003f2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003f30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003f40:	2320      	movs	r3, #32
 8003f42:	e004      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003f44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f48:	fab3 f383 	clz	r3, r3
 8003f4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d106      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2200      	movs	r2, #0
 8003f58:	2101      	movs	r1, #1
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff fa40 	bl	80033e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2102      	movs	r1, #2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff fa24 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10a      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x310>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2102      	movs	r1, #2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff fa19 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003f82:	4603      	mov	r3, r0
 8003f84:	0e9b      	lsrs	r3, r3, #26
 8003f86:	f003 021f 	and.w	r2, r3, #31
 8003f8a:	e01e      	b.n	8003fca <HAL_ADC_ConfigChannel+0x34e>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2102      	movs	r1, #2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff fa0e 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fa2:	fa93 f3a3 	rbit	r3, r3
 8003fa6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003faa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003fae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003fba:	2320      	movs	r3, #32
 8003fbc:	e004      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003fbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fc2:	fab3 f383 	clz	r3, r3
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d105      	bne.n	8003fe2 <HAL_ADC_ConfigChannel+0x366>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	0e9b      	lsrs	r3, r3, #26
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	e014      	b.n	800400c <HAL_ADC_ConfigChannel+0x390>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fea:	fa93 f3a3 	rbit	r3, r3
 8003fee:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003ff0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ff2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003ff6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003ffe:	2320      	movs	r3, #32
 8004000:	e004      	b.n	800400c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8004002:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004006:	fab3 f383 	clz	r3, r3
 800400a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800400c:	429a      	cmp	r2, r3
 800400e:	d106      	bne.n	800401e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2200      	movs	r2, #0
 8004016:	2102      	movs	r1, #2
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff f9e1 	bl	80033e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2103      	movs	r1, #3
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff f9c5 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 800402a:	4603      	mov	r3, r0
 800402c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10a      	bne.n	800404a <HAL_ADC_ConfigChannel+0x3ce>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2103      	movs	r1, #3
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff f9ba 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8004040:	4603      	mov	r3, r0
 8004042:	0e9b      	lsrs	r3, r3, #26
 8004044:	f003 021f 	and.w	r2, r3, #31
 8004048:	e017      	b.n	800407a <HAL_ADC_ConfigChannel+0x3fe>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2103      	movs	r1, #3
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff f9af 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8004056:	4603      	mov	r3, r0
 8004058:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800405c:	fa93 f3a3 	rbit	r3, r3
 8004060:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004062:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004064:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004066:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800406c:	2320      	movs	r3, #32
 800406e:	e003      	b.n	8004078 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8004070:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004072:	fab3 f383 	clz	r3, r3
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004082:	2b00      	cmp	r3, #0
 8004084:	d105      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x416>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	0e9b      	lsrs	r3, r3, #26
 800408c:	f003 031f 	and.w	r3, r3, #31
 8004090:	e011      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x43a>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004098:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800409a:	fa93 f3a3 	rbit	r3, r3
 800409e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80040a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040a2:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80040a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80040aa:	2320      	movs	r3, #32
 80040ac:	e003      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80040ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040b0:	fab3 f383 	clz	r3, r3
 80040b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d106      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2200      	movs	r2, #0
 80040c0:	2103      	movs	r1, #3
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff f98c 	bl	80033e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff fac7 	bl	8003660 <LL_ADC_IsEnabled>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f040 813f 	bne.w	8004358 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6819      	ldr	r1, [r3, #0]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f7ff fa12 	bl	8003510 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	4a8e      	ldr	r2, [pc, #568]	@ (800432c <HAL_ADC_ConfigChannel+0x6b0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	f040 8130 	bne.w	8004358 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10b      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x4a4>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	0e9b      	lsrs	r3, r3, #26
 800410e:	3301      	adds	r3, #1
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	2b09      	cmp	r3, #9
 8004116:	bf94      	ite	ls
 8004118:	2301      	movls	r3, #1
 800411a:	2300      	movhi	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	e019      	b.n	8004154 <HAL_ADC_ConfigChannel+0x4d8>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004126:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004128:	fa93 f3a3 	rbit	r3, r3
 800412c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800412e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004130:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004132:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8004138:	2320      	movs	r3, #32
 800413a:	e003      	b.n	8004144 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800413c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800413e:	fab3 f383 	clz	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	3301      	adds	r3, #1
 8004146:	f003 031f 	and.w	r3, r3, #31
 800414a:	2b09      	cmp	r3, #9
 800414c:	bf94      	ite	ls
 800414e:	2301      	movls	r3, #1
 8004150:	2300      	movhi	r3, #0
 8004152:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004154:	2b00      	cmp	r3, #0
 8004156:	d079      	beq.n	800424c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004160:	2b00      	cmp	r3, #0
 8004162:	d107      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x4f8>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	0e9b      	lsrs	r3, r3, #26
 800416a:	3301      	adds	r3, #1
 800416c:	069b      	lsls	r3, r3, #26
 800416e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004172:	e015      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x524>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800417c:	fa93 f3a3 	rbit	r3, r3
 8004180:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004182:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004184:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800418c:	2320      	movs	r3, #32
 800418e:	e003      	b.n	8004198 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8004190:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004192:	fab3 f383 	clz	r3, r3
 8004196:	b2db      	uxtb	r3, r3
 8004198:	3301      	adds	r3, #1
 800419a:	069b      	lsls	r3, r3, #26
 800419c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d109      	bne.n	80041c0 <HAL_ADC_ConfigChannel+0x544>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	0e9b      	lsrs	r3, r3, #26
 80041b2:	3301      	adds	r3, #1
 80041b4:	f003 031f 	and.w	r3, r3, #31
 80041b8:	2101      	movs	r1, #1
 80041ba:	fa01 f303 	lsl.w	r3, r1, r3
 80041be:	e017      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x574>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041c8:	fa93 f3a3 	rbit	r3, r3
 80041cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80041ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041d0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80041d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80041d8:	2320      	movs	r3, #32
 80041da:	e003      	b.n	80041e4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80041dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041de:	fab3 f383 	clz	r3, r3
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	3301      	adds	r3, #1
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	2101      	movs	r1, #1
 80041ec:	fa01 f303 	lsl.w	r3, r1, r3
 80041f0:	ea42 0103 	orr.w	r1, r2, r3
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10a      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x59a>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	0e9b      	lsrs	r3, r3, #26
 8004206:	3301      	adds	r3, #1
 8004208:	f003 021f 	and.w	r2, r3, #31
 800420c:	4613      	mov	r3, r2
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	4413      	add	r3, r2
 8004212:	051b      	lsls	r3, r3, #20
 8004214:	e018      	b.n	8004248 <HAL_ADC_ConfigChannel+0x5cc>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421e:	fa93 f3a3 	rbit	r3, r3
 8004222:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004226:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800422e:	2320      	movs	r3, #32
 8004230:	e003      	b.n	800423a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8004232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004234:	fab3 f383 	clz	r3, r3
 8004238:	b2db      	uxtb	r3, r3
 800423a:	3301      	adds	r3, #1
 800423c:	f003 021f 	and.w	r2, r3, #31
 8004240:	4613      	mov	r3, r2
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	4413      	add	r3, r2
 8004246:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004248:	430b      	orrs	r3, r1
 800424a:	e080      	b.n	800434e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004254:	2b00      	cmp	r3, #0
 8004256:	d107      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x5ec>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	0e9b      	lsrs	r3, r3, #26
 800425e:	3301      	adds	r3, #1
 8004260:	069b      	lsls	r3, r3, #26
 8004262:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004266:	e015      	b.n	8004294 <HAL_ADC_ConfigChannel+0x618>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004270:	fa93 f3a3 	rbit	r3, r3
 8004274:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800427a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8004280:	2320      	movs	r3, #32
 8004282:	e003      	b.n	800428c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8004284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004286:	fab3 f383 	clz	r3, r3
 800428a:	b2db      	uxtb	r3, r3
 800428c:	3301      	adds	r3, #1
 800428e:	069b      	lsls	r3, r3, #26
 8004290:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800429c:	2b00      	cmp	r3, #0
 800429e:	d109      	bne.n	80042b4 <HAL_ADC_ConfigChannel+0x638>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	0e9b      	lsrs	r3, r3, #26
 80042a6:	3301      	adds	r3, #1
 80042a8:	f003 031f 	and.w	r3, r3, #31
 80042ac:	2101      	movs	r1, #1
 80042ae:	fa01 f303 	lsl.w	r3, r1, r3
 80042b2:	e017      	b.n	80042e4 <HAL_ADC_ConfigChannel+0x668>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	fa93 f3a3 	rbit	r3, r3
 80042c0:	61bb      	str	r3, [r7, #24]
  return result;
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80042cc:	2320      	movs	r3, #32
 80042ce:	e003      	b.n	80042d8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	fab3 f383 	clz	r3, r3
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	3301      	adds	r3, #1
 80042da:	f003 031f 	and.w	r3, r3, #31
 80042de:	2101      	movs	r1, #1
 80042e0:	fa01 f303 	lsl.w	r3, r1, r3
 80042e4:	ea42 0103 	orr.w	r1, r2, r3
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10d      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x694>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	0e9b      	lsrs	r3, r3, #26
 80042fa:	3301      	adds	r3, #1
 80042fc:	f003 021f 	and.w	r2, r3, #31
 8004300:	4613      	mov	r3, r2
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	4413      	add	r3, r2
 8004306:	3b1e      	subs	r3, #30
 8004308:	051b      	lsls	r3, r3, #20
 800430a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800430e:	e01d      	b.n	800434c <HAL_ADC_ConfigChannel+0x6d0>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	fa93 f3a3 	rbit	r3, r3
 800431c:	60fb      	str	r3, [r7, #12]
  return result;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d103      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004328:	2320      	movs	r3, #32
 800432a:	e005      	b.n	8004338 <HAL_ADC_ConfigChannel+0x6bc>
 800432c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	fab3 f383 	clz	r3, r3
 8004336:	b2db      	uxtb	r3, r3
 8004338:	3301      	adds	r3, #1
 800433a:	f003 021f 	and.w	r2, r3, #31
 800433e:	4613      	mov	r3, r2
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	4413      	add	r3, r2
 8004344:	3b1e      	subs	r3, #30
 8004346:	051b      	lsls	r3, r3, #20
 8004348:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800434c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004352:	4619      	mov	r1, r3
 8004354:	f7ff f8b1 	bl	80034ba <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	4b44      	ldr	r3, [pc, #272]	@ (8004470 <HAL_ADC_ConfigChannel+0x7f4>)
 800435e:	4013      	ands	r3, r2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d07a      	beq.n	800445a <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004364:	4843      	ldr	r0, [pc, #268]	@ (8004474 <HAL_ADC_ConfigChannel+0x7f8>)
 8004366:	f7fe fff3 	bl	8003350 <LL_ADC_GetCommonPathInternalCh>
 800436a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a41      	ldr	r2, [pc, #260]	@ (8004478 <HAL_ADC_ConfigChannel+0x7fc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d12c      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004378:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800437c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d126      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a3c      	ldr	r2, [pc, #240]	@ (800447c <HAL_ADC_ConfigChannel+0x800>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d004      	beq.n	8004398 <HAL_ADC_ConfigChannel+0x71c>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a3b      	ldr	r2, [pc, #236]	@ (8004480 <HAL_ADC_ConfigChannel+0x804>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d15d      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004398:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800439c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043a0:	4619      	mov	r1, r3
 80043a2:	4834      	ldr	r0, [pc, #208]	@ (8004474 <HAL_ADC_ConfigChannel+0x7f8>)
 80043a4:	f7fe ffc1 	bl	800332a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043a8:	4b36      	ldr	r3, [pc, #216]	@ (8004484 <HAL_ADC_ConfigChannel+0x808>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	099b      	lsrs	r3, r3, #6
 80043ae:	4a36      	ldr	r2, [pc, #216]	@ (8004488 <HAL_ADC_ConfigChannel+0x80c>)
 80043b0:	fba2 2303 	umull	r2, r3, r2, r3
 80043b4:	099b      	lsrs	r3, r3, #6
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	4613      	mov	r3, r2
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80043c2:	e002      	b.n	80043ca <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1f9      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043d0:	e040      	b.n	8004454 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a2d      	ldr	r2, [pc, #180]	@ (800448c <HAL_ADC_ConfigChannel+0x810>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d118      	bne.n	800440e <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80043e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d112      	bne.n	800440e <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a23      	ldr	r2, [pc, #140]	@ (800447c <HAL_ADC_ConfigChannel+0x800>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d004      	beq.n	80043fc <HAL_ADC_ConfigChannel+0x780>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a22      	ldr	r2, [pc, #136]	@ (8004480 <HAL_ADC_ConfigChannel+0x804>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d12d      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004400:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004404:	4619      	mov	r1, r3
 8004406:	481b      	ldr	r0, [pc, #108]	@ (8004474 <HAL_ADC_ConfigChannel+0x7f8>)
 8004408:	f7fe ff8f 	bl	800332a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800440c:	e024      	b.n	8004458 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a1f      	ldr	r2, [pc, #124]	@ (8004490 <HAL_ADC_ConfigChannel+0x814>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d120      	bne.n	800445a <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004418:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800441c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d11a      	bne.n	800445a <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a14      	ldr	r2, [pc, #80]	@ (800447c <HAL_ADC_ConfigChannel+0x800>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d115      	bne.n	800445a <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800442e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004432:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004436:	4619      	mov	r1, r3
 8004438:	480e      	ldr	r0, [pc, #56]	@ (8004474 <HAL_ADC_ConfigChannel+0x7f8>)
 800443a:	f7fe ff76 	bl	800332a <LL_ADC_SetCommonPathInternalCh>
 800443e:	e00c      	b.n	800445a <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004444:	f043 0220 	orr.w	r2, r3, #32
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004452:	e002      	b.n	800445a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004454:	bf00      	nop
 8004456:	e000      	b.n	800445a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004458:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004462:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004466:	4618      	mov	r0, r3
 8004468:	37d8      	adds	r7, #216	@ 0xd8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	80080000 	.word	0x80080000
 8004474:	50040300 	.word	0x50040300
 8004478:	c7520000 	.word	0xc7520000
 800447c:	50040000 	.word	0x50040000
 8004480:	50040200 	.word	0x50040200
 8004484:	20000000 	.word	0x20000000
 8004488:	053e2d63 	.word	0x053e2d63
 800448c:	cb840000 	.word	0xcb840000
 8004490:	80000001 	.word	0x80000001

08004494 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800449e:	2300      	movs	r3, #0
 80044a0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff f926 	bl	80036fc <LL_ADC_REG_IsConversionOngoing>
 80044b0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff f947 	bl	800374a <LL_ADC_INJ_IsConversionOngoing>
 80044bc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d103      	bne.n	80044cc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 8098 	beq.w	80045fc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d02a      	beq.n	8004530 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	7e5b      	ldrb	r3, [r3, #25]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d126      	bne.n	8004530 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	7e1b      	ldrb	r3, [r3, #24]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d122      	bne.n	8004530 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80044ea:	2301      	movs	r3, #1
 80044ec:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80044ee:	e014      	b.n	800451a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	4a45      	ldr	r2, [pc, #276]	@ (8004608 <ADC_ConversionStop+0x174>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d90d      	bls.n	8004514 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044fc:	f043 0210 	orr.w	r2, r3, #16
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004508:	f043 0201 	orr.w	r2, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e074      	b.n	80045fe <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	3301      	adds	r3, #1
 8004518:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004524:	2b40      	cmp	r3, #64	@ 0x40
 8004526:	d1e3      	bne.n	80044f0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2240      	movs	r2, #64	@ 0x40
 800452e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d014      	beq.n	8004560 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff f8de 	bl	80036fc <LL_ADC_REG_IsConversionOngoing>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00c      	beq.n	8004560 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff f89b 	bl	8003686 <LL_ADC_IsDisableOngoing>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d104      	bne.n	8004560 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff f8ba 	bl	80036d4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d014      	beq.n	8004590 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff f8ed 	bl	800374a <LL_ADC_INJ_IsConversionOngoing>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00c      	beq.n	8004590 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff f883 	bl	8003686 <LL_ADC_IsDisableOngoing>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d104      	bne.n	8004590 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff f8c9 	bl	8003722 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d005      	beq.n	80045a2 <ADC_ConversionStop+0x10e>
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d105      	bne.n	80045a8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800459c:	230c      	movs	r3, #12
 800459e:	617b      	str	r3, [r7, #20]
        break;
 80045a0:	e005      	b.n	80045ae <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80045a2:	2308      	movs	r3, #8
 80045a4:	617b      	str	r3, [r7, #20]
        break;
 80045a6:	e002      	b.n	80045ae <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80045a8:	2304      	movs	r3, #4
 80045aa:	617b      	str	r3, [r7, #20]
        break;
 80045ac:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80045ae:	f7fe fe79 	bl	80032a4 <HAL_GetTick>
 80045b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80045b4:	e01b      	b.n	80045ee <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80045b6:	f7fe fe75 	bl	80032a4 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b05      	cmp	r3, #5
 80045c2:	d914      	bls.n	80045ee <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00d      	beq.n	80045ee <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d6:	f043 0210 	orr.w	r2, r3, #16
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e2:	f043 0201 	orr.w	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e007      	b.n	80045fe <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1dc      	bne.n	80045b6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3720      	adds	r7, #32
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	a33fffff 	.word	0xa33fffff

0800460c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004614:	2300      	movs	r3, #0
 8004616:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff f81f 	bl	8003660 <LL_ADC_IsEnabled>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d169      	bne.n	80046fc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	4b36      	ldr	r3, [pc, #216]	@ (8004708 <ADC_Enable+0xfc>)
 8004630:	4013      	ands	r3, r2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00d      	beq.n	8004652 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463a:	f043 0210 	orr.w	r2, r3, #16
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004646:	f043 0201 	orr.w	r2, r3, #1
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e055      	b.n	80046fe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7fe ffda 	bl	8003610 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800465c:	482b      	ldr	r0, [pc, #172]	@ (800470c <ADC_Enable+0x100>)
 800465e:	f7fe fe77 	bl	8003350 <LL_ADC_GetCommonPathInternalCh>
 8004662:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004664:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004668:	2b00      	cmp	r3, #0
 800466a:	d013      	beq.n	8004694 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800466c:	4b28      	ldr	r3, [pc, #160]	@ (8004710 <ADC_Enable+0x104>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	099b      	lsrs	r3, r3, #6
 8004672:	4a28      	ldr	r2, [pc, #160]	@ (8004714 <ADC_Enable+0x108>)
 8004674:	fba2 2303 	umull	r2, r3, r2, r3
 8004678:	099b      	lsrs	r3, r3, #6
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	4613      	mov	r3, r2
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	4413      	add	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004686:	e002      	b.n	800468e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	3b01      	subs	r3, #1
 800468c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1f9      	bne.n	8004688 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004694:	f7fe fe06 	bl	80032a4 <HAL_GetTick>
 8004698:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800469a:	e028      	b.n	80046ee <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fe ffdd 	bl	8003660 <LL_ADC_IsEnabled>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d104      	bne.n	80046b6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fe ffad 	bl	8003610 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80046b6:	f7fe fdf5 	bl	80032a4 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d914      	bls.n	80046ee <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d00d      	beq.n	80046ee <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d6:	f043 0210 	orr.w	r2, r3, #16
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e2:	f043 0201 	orr.w	r2, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e007      	b.n	80046fe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d1cf      	bne.n	800469c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	8000003f 	.word	0x8000003f
 800470c:	50040300 	.word	0x50040300
 8004710:	20000000 	.word	0x20000000
 8004714:	053e2d63 	.word	0x053e2d63

08004718 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f7fe ffae 	bl	8003686 <LL_ADC_IsDisableOngoing>
 800472a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4618      	mov	r0, r3
 8004732:	f7fe ff95 	bl	8003660 <LL_ADC_IsEnabled>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d047      	beq.n	80047cc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d144      	bne.n	80047cc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 030d 	and.w	r3, r3, #13
 800474c:	2b01      	cmp	r3, #1
 800474e:	d10c      	bne.n	800476a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f7fe ff6f 	bl	8003638 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2203      	movs	r2, #3
 8004760:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004762:	f7fe fd9f 	bl	80032a4 <HAL_GetTick>
 8004766:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004768:	e029      	b.n	80047be <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476e:	f043 0210 	orr.w	r2, r3, #16
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800477a:	f043 0201 	orr.w	r2, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e023      	b.n	80047ce <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004786:	f7fe fd8d 	bl	80032a4 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d914      	bls.n	80047be <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00d      	beq.n	80047be <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a6:	f043 0210 	orr.w	r2, r3, #16
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b2:	f043 0201 	orr.w	r2, r3, #1
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e007      	b.n	80047ce <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1dc      	bne.n	8004786 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d14b      	bne.n	8004888 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	2b00      	cmp	r3, #0
 8004808:	d021      	beq.n	800484e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f7fe fe14 	bl	800343c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d032      	beq.n	8004880 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d12b      	bne.n	8004880 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800482c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004838:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d11f      	bne.n	8004880 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004844:	f043 0201 	orr.w	r2, r3, #1
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	659a      	str	r2, [r3, #88]	@ 0x58
 800484c:	e018      	b.n	8004880 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d111      	bne.n	8004880 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004860:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d105      	bne.n	8004880 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004878:	f043 0201 	orr.w	r2, r3, #1
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f7fc fd63 	bl	800134c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004886:	e00e      	b.n	80048a6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488c:	f003 0310 	and.w	r3, r3, #16
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f7ff f9e6 	bl	8003c66 <HAL_ADC_ErrorCallback>
}
 800489a:	e004      	b.n	80048a6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	4798      	blx	r3
}
 80048a6:	bf00      	nop
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b084      	sub	sp, #16
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f7ff f9c8 	bl	8003c52 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048c2:	bf00      	nop
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e8:	f043 0204 	orr.w	r2, r3, #4
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f7ff f9b8 	bl	8003c66 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048f6:	bf00      	nop
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <LL_ADC_IsEnabled>:
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <LL_ADC_IsEnabled+0x18>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <LL_ADC_IsEnabled+0x1a>
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <LL_ADC_REG_IsConversionOngoing>:
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b04      	cmp	r3, #4
 8004936:	d101      	bne.n	800493c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004938:	2301      	movs	r3, #1
 800493a:	e000      	b.n	800493e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800494c:	b590      	push	{r4, r7, lr}
 800494e:	b0a1      	sub	sp, #132	@ 0x84
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004966:	2302      	movs	r3, #2
 8004968:	e093      	b.n	8004a92 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004972:	2300      	movs	r3, #0
 8004974:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004976:	2300      	movs	r3, #0
 8004978:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a47      	ldr	r2, [pc, #284]	@ (8004a9c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d102      	bne.n	800498a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004984:	4b46      	ldr	r3, [pc, #280]	@ (8004aa0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	e001      	b.n	800498e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800498a:	2300      	movs	r3, #0
 800498c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10b      	bne.n	80049ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004998:	f043 0220 	orr.w	r2, r3, #32
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e072      	b.n	8004a92 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff ffb8 	bl	8004924 <LL_ADC_REG_IsConversionOngoing>
 80049b4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff ffb2 	bl	8004924 <LL_ADC_REG_IsConversionOngoing>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d154      	bne.n	8004a70 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80049c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d151      	bne.n	8004a70 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80049cc:	4b35      	ldr	r3, [pc, #212]	@ (8004aa4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80049ce:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d02c      	beq.n	8004a32 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80049d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	6859      	ldr	r1, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80049ea:	035b      	lsls	r3, r3, #13
 80049ec:	430b      	orrs	r3, r1
 80049ee:	431a      	orrs	r2, r3
 80049f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049f4:	4829      	ldr	r0, [pc, #164]	@ (8004a9c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80049f6:	f7ff ff82 	bl	80048fe <LL_ADC_IsEnabled>
 80049fa:	4604      	mov	r4, r0
 80049fc:	4828      	ldr	r0, [pc, #160]	@ (8004aa0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80049fe:	f7ff ff7e 	bl	80048fe <LL_ADC_IsEnabled>
 8004a02:	4603      	mov	r3, r0
 8004a04:	431c      	orrs	r4, r3
 8004a06:	4828      	ldr	r0, [pc, #160]	@ (8004aa8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004a08:	f7ff ff79 	bl	80048fe <LL_ADC_IsEnabled>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	4323      	orrs	r3, r4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d137      	bne.n	8004a84 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004a1c:	f023 030f 	bic.w	r3, r3, #15
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	6811      	ldr	r1, [r2, #0]
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	6892      	ldr	r2, [r2, #8]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a2e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a30:	e028      	b.n	8004a84 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004a32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a3c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a3e:	4817      	ldr	r0, [pc, #92]	@ (8004a9c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004a40:	f7ff ff5d 	bl	80048fe <LL_ADC_IsEnabled>
 8004a44:	4604      	mov	r4, r0
 8004a46:	4816      	ldr	r0, [pc, #88]	@ (8004aa0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004a48:	f7ff ff59 	bl	80048fe <LL_ADC_IsEnabled>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	431c      	orrs	r4, r3
 8004a50:	4815      	ldr	r0, [pc, #84]	@ (8004aa8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004a52:	f7ff ff54 	bl	80048fe <LL_ADC_IsEnabled>
 8004a56:	4603      	mov	r3, r0
 8004a58:	4323      	orrs	r3, r4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d112      	bne.n	8004a84 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004a66:	f023 030f 	bic.w	r3, r3, #15
 8004a6a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004a6c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a6e:	e009      	b.n	8004a84 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a74:	f043 0220 	orr.w	r2, r3, #32
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004a82:	e000      	b.n	8004a86 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a84:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004a8e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3784      	adds	r7, #132	@ 0x84
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd90      	pop	{r4, r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	50040000 	.word	0x50040000
 8004aa0:	50040100 	.word	0x50040100
 8004aa4:	50040300 	.word	0x50040300
 8004aa8:	50040200 	.word	0x50040200

08004aac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e0ed      	b.n	8004c9a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d102      	bne.n	8004ad0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fd f8e6 	bl	8001c9c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ae0:	f7fe fbe0 	bl	80032a4 <HAL_GetTick>
 8004ae4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004ae6:	e012      	b.n	8004b0e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ae8:	f7fe fbdc 	bl	80032a4 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b0a      	cmp	r3, #10
 8004af4:	d90b      	bls.n	8004b0e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2205      	movs	r2, #5
 8004b06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e0c5      	b.n	8004c9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0e5      	beq.n	8004ae8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0202 	bic.w	r2, r2, #2
 8004b2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b2c:	f7fe fbba 	bl	80032a4 <HAL_GetTick>
 8004b30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b32:	e012      	b.n	8004b5a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b34:	f7fe fbb6 	bl	80032a4 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b0a      	cmp	r3, #10
 8004b40:	d90b      	bls.n	8004b5a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b46:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2205      	movs	r2, #5
 8004b52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e09f      	b.n	8004c9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e5      	bne.n	8004b34 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	7e1b      	ldrb	r3, [r3, #24]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d108      	bne.n	8004b82 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	e007      	b.n	8004b92 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	7e5b      	ldrb	r3, [r3, #25]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d108      	bne.n	8004bac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	e007      	b.n	8004bbc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	7e9b      	ldrb	r3, [r3, #26]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d108      	bne.n	8004bd6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0220 	orr.w	r2, r2, #32
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	e007      	b.n	8004be6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0220 	bic.w	r2, r2, #32
 8004be4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	7edb      	ldrb	r3, [r3, #27]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d108      	bne.n	8004c00 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0210 	bic.w	r2, r2, #16
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	e007      	b.n	8004c10 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0210 	orr.w	r2, r2, #16
 8004c0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	7f1b      	ldrb	r3, [r3, #28]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d108      	bne.n	8004c2a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0208 	orr.w	r2, r2, #8
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	e007      	b.n	8004c3a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0208 	bic.w	r2, r2, #8
 8004c38:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	7f5b      	ldrb	r3, [r3, #29]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d108      	bne.n	8004c54 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0204 	orr.w	r2, r2, #4
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	e007      	b.n	8004c64 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0204 	bic.w	r2, r2, #4
 8004c62:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	ea42 0103 	orr.w	r1, r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	1e5a      	subs	r2, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004cbc:	7cfb      	ldrb	r3, [r7, #19]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d003      	beq.n	8004cca <HAL_CAN_ConfigFilter+0x26>
 8004cc2:	7cfb      	ldrb	r3, [r7, #19]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	f040 80be 	bne.w	8004e46 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004cca:	4b65      	ldr	r3, [pc, #404]	@ (8004e60 <HAL_CAN_ConfigFilter+0x1bc>)
 8004ccc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004cd4:	f043 0201 	orr.w	r2, r3, #1
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004ce4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf8:	021b      	lsls	r3, r3, #8
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f003 031f 	and.w	r3, r3, #31
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	401a      	ands	r2, r3
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d123      	bne.n	8004d74 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	43db      	mvns	r3, r3
 8004d36:	401a      	ands	r2, r3
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004d4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	3248      	adds	r2, #72	@ 0x48
 8004d54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d6a:	6979      	ldr	r1, [r7, #20]
 8004d6c:	3348      	adds	r3, #72	@ 0x48
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	440b      	add	r3, r1
 8004d72:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d122      	bne.n	8004dc2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	431a      	orrs	r2, r3
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004d9c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	3248      	adds	r2, #72	@ 0x48
 8004da2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004db6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004db8:	6979      	ldr	r1, [r7, #20]
 8004dba:	3348      	adds	r3, #72	@ 0x48
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	440b      	add	r3, r1
 8004dc0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	401a      	ands	r2, r3
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004ddc:	e007      	b.n	8004dee <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	401a      	ands	r2, r3
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004e08:	e007      	b.n	8004e1a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d107      	bne.n	8004e32 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004e38:	f023 0201 	bic.w	r2, r3, #1
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	e006      	b.n	8004e54 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
  }
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	371c      	adds	r7, #28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	40006400 	.word	0x40006400

08004e64 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d12e      	bne.n	8004ed6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0201 	bic.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e90:	f7fe fa08 	bl	80032a4 <HAL_GetTick>
 8004e94:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004e96:	e012      	b.n	8004ebe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e98:	f7fe fa04 	bl	80032a4 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b0a      	cmp	r3, #10
 8004ea4:	d90b      	bls.n	8004ebe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eaa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2205      	movs	r2, #5
 8004eb6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e012      	b.n	8004ee4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e5      	bne.n	8004e98 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e006      	b.n	8004ee4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eda:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
  }
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b089      	sub	sp, #36	@ 0x24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f00:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f0a:	7ffb      	ldrb	r3, [r7, #31]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d003      	beq.n	8004f18 <HAL_CAN_AddTxMessage+0x2c>
 8004f10:	7ffb      	ldrb	r3, [r7, #31]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	f040 80ad 	bne.w	8005072 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10a      	bne.n	8004f38 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d105      	bne.n	8004f38 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 8095 	beq.w	8005062 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	0e1b      	lsrs	r3, r3, #24
 8004f3c:	f003 0303 	and.w	r3, r3, #3
 8004f40:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004f42:	2201      	movs	r2, #1
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	409a      	lsls	r2, r3
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10d      	bne.n	8004f70 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004f5e:	68f9      	ldr	r1, [r7, #12]
 8004f60:	6809      	ldr	r1, [r1, #0]
 8004f62:	431a      	orrs	r2, r3
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	3318      	adds	r3, #24
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	440b      	add	r3, r1
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	e00f      	b.n	8004f90 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f7a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f80:	68f9      	ldr	r1, [r7, #12]
 8004f82:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004f84:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	3318      	adds	r3, #24
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	440b      	add	r3, r1
 8004f8e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6819      	ldr	r1, [r3, #0]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	3318      	adds	r3, #24
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	440b      	add	r3, r1
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	7d1b      	ldrb	r3, [r3, #20]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d111      	bne.n	8004fd0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	3318      	adds	r3, #24
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3304      	adds	r3, #4
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	6811      	ldr	r1, [r2, #0]
 8004fc0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	3318      	adds	r3, #24
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	440b      	add	r3, r1
 8004fcc:	3304      	adds	r3, #4
 8004fce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3307      	adds	r3, #7
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	061a      	lsls	r2, r3, #24
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3306      	adds	r3, #6
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	041b      	lsls	r3, r3, #16
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3305      	adds	r3, #5
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	021b      	lsls	r3, r3, #8
 8004fea:	4313      	orrs	r3, r2
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	3204      	adds	r2, #4
 8004ff0:	7812      	ldrb	r2, [r2, #0]
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	6811      	ldr	r1, [r2, #0]
 8004ff8:	ea43 0200 	orr.w	r2, r3, r0
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	440b      	add	r3, r1
 8005002:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8005006:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3303      	adds	r3, #3
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	061a      	lsls	r2, r3, #24
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3302      	adds	r3, #2
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	041b      	lsls	r3, r3, #16
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3301      	adds	r3, #1
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	4313      	orrs	r3, r2
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	7812      	ldrb	r2, [r2, #0]
 8005028:	4610      	mov	r0, r2
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	6811      	ldr	r1, [r2, #0]
 800502e:	ea43 0200 	orr.w	r2, r3, r0
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	440b      	add	r3, r1
 8005038:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800503c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	3318      	adds	r3, #24
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	4413      	add	r3, r2
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	6811      	ldr	r1, [r2, #0]
 8005050:	f043 0201 	orr.w	r2, r3, #1
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	3318      	adds	r3, #24
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	440b      	add	r3, r1
 800505c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	e00e      	b.n	8005080 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005066:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e006      	b.n	8005080 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005076:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
  }
}
 8005080:	4618      	mov	r0, r3
 8005082:	3724      	adds	r7, #36	@ 0x24
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800509e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80050a0:	7afb      	ldrb	r3, [r7, #11]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d002      	beq.n	80050ac <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80050a6:	7afb      	ldrb	r3, [r7, #11]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d11d      	bne.n	80050e8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	3301      	adds	r3, #1
 80050be:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3301      	adds	r3, #1
 80050d2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	3301      	adds	r3, #1
 80050e6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80050e8:	68fb      	ldr	r3, [r7, #12]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b085      	sub	sp, #20
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005106:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d002      	beq.n	8005114 <HAL_CAN_ActivateNotification+0x1e>
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	2b02      	cmp	r3, #2
 8005112:	d109      	bne.n	8005128 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6959      	ldr	r1, [r3, #20]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	e006      	b.n	8005136 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
  }
}
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
	...

08005144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005154:	4b0c      	ldr	r3, [pc, #48]	@ (8005188 <__NVIC_SetPriorityGrouping+0x44>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005160:	4013      	ands	r3, r2
 8005162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800516c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005176:	4a04      	ldr	r2, [pc, #16]	@ (8005188 <__NVIC_SetPriorityGrouping+0x44>)
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	60d3      	str	r3, [r2, #12]
}
 800517c:	bf00      	nop
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	e000ed00 	.word	0xe000ed00

0800518c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005190:	4b04      	ldr	r3, [pc, #16]	@ (80051a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	0a1b      	lsrs	r3, r3, #8
 8005196:	f003 0307 	and.w	r3, r3, #7
}
 800519a:	4618      	mov	r0, r3
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	e000ed00 	.word	0xe000ed00

080051a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	db0b      	blt.n	80051d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	f003 021f 	and.w	r2, r3, #31
 80051c0:	4907      	ldr	r1, [pc, #28]	@ (80051e0 <__NVIC_EnableIRQ+0x38>)
 80051c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	2001      	movs	r0, #1
 80051ca:	fa00 f202 	lsl.w	r2, r0, r2
 80051ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	e000e100 	.word	0xe000e100

080051e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	4603      	mov	r3, r0
 80051ec:	6039      	str	r1, [r7, #0]
 80051ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	db0a      	blt.n	800520e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	490c      	ldr	r1, [pc, #48]	@ (8005230 <__NVIC_SetPriority+0x4c>)
 80051fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005202:	0112      	lsls	r2, r2, #4
 8005204:	b2d2      	uxtb	r2, r2
 8005206:	440b      	add	r3, r1
 8005208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800520c:	e00a      	b.n	8005224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	b2da      	uxtb	r2, r3
 8005212:	4908      	ldr	r1, [pc, #32]	@ (8005234 <__NVIC_SetPriority+0x50>)
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	3b04      	subs	r3, #4
 800521c:	0112      	lsls	r2, r2, #4
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	440b      	add	r3, r1
 8005222:	761a      	strb	r2, [r3, #24]
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	e000e100 	.word	0xe000e100
 8005234:	e000ed00 	.word	0xe000ed00

08005238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005238:	b480      	push	{r7}
 800523a:	b089      	sub	sp, #36	@ 0x24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f1c3 0307 	rsb	r3, r3, #7
 8005252:	2b04      	cmp	r3, #4
 8005254:	bf28      	it	cs
 8005256:	2304      	movcs	r3, #4
 8005258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	3304      	adds	r3, #4
 800525e:	2b06      	cmp	r3, #6
 8005260:	d902      	bls.n	8005268 <NVIC_EncodePriority+0x30>
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	3b03      	subs	r3, #3
 8005266:	e000      	b.n	800526a <NVIC_EncodePriority+0x32>
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800526c:	f04f 32ff 	mov.w	r2, #4294967295
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	fa02 f303 	lsl.w	r3, r2, r3
 8005276:	43da      	mvns	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	401a      	ands	r2, r3
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005280:	f04f 31ff 	mov.w	r1, #4294967295
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	fa01 f303 	lsl.w	r3, r1, r3
 800528a:	43d9      	mvns	r1, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005290:	4313      	orrs	r3, r2
         );
}
 8005292:	4618      	mov	r0, r3
 8005294:	3724      	adds	r7, #36	@ 0x24
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff ff4c 	bl	8005144 <__NVIC_SetPriorityGrouping>
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	4603      	mov	r3, r0
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80052c2:	2300      	movs	r3, #0
 80052c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052c6:	f7ff ff61 	bl	800518c <__NVIC_GetPriorityGrouping>
 80052ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	68b9      	ldr	r1, [r7, #8]
 80052d0:	6978      	ldr	r0, [r7, #20]
 80052d2:	f7ff ffb1 	bl	8005238 <NVIC_EncodePriority>
 80052d6:	4602      	mov	r2, r0
 80052d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052dc:	4611      	mov	r1, r2
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff ff80 	bl	80051e4 <__NVIC_SetPriority>
}
 80052e4:	bf00      	nop
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	4603      	mov	r3, r0
 80052f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff ff54 	bl	80051a8 <__NVIC_EnableIRQ>
}
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e098      	b.n	800544c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	4b4d      	ldr	r3, [pc, #308]	@ (8005458 <HAL_DMA_Init+0x150>)
 8005322:	429a      	cmp	r2, r3
 8005324:	d80f      	bhi.n	8005346 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	4b4b      	ldr	r3, [pc, #300]	@ (800545c <HAL_DMA_Init+0x154>)
 800532e:	4413      	add	r3, r2
 8005330:	4a4b      	ldr	r2, [pc, #300]	@ (8005460 <HAL_DMA_Init+0x158>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	091b      	lsrs	r3, r3, #4
 8005338:	009a      	lsls	r2, r3, #2
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a48      	ldr	r2, [pc, #288]	@ (8005464 <HAL_DMA_Init+0x15c>)
 8005342:	641a      	str	r2, [r3, #64]	@ 0x40
 8005344:	e00e      	b.n	8005364 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	4b46      	ldr	r3, [pc, #280]	@ (8005468 <HAL_DMA_Init+0x160>)
 800534e:	4413      	add	r3, r2
 8005350:	4a43      	ldr	r2, [pc, #268]	@ (8005460 <HAL_DMA_Init+0x158>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	091b      	lsrs	r3, r3, #4
 8005358:	009a      	lsls	r2, r3, #2
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a42      	ldr	r2, [pc, #264]	@ (800546c <HAL_DMA_Init+0x164>)
 8005362:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800537a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800537e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005388:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005394:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053be:	d039      	beq.n	8005434 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c4:	4a27      	ldr	r2, [pc, #156]	@ (8005464 <HAL_DMA_Init+0x15c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d11a      	bne.n	8005400 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80053ca:	4b29      	ldr	r3, [pc, #164]	@ (8005470 <HAL_DMA_Init+0x168>)
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d2:	f003 031c 	and.w	r3, r3, #28
 80053d6:	210f      	movs	r1, #15
 80053d8:	fa01 f303 	lsl.w	r3, r1, r3
 80053dc:	43db      	mvns	r3, r3
 80053de:	4924      	ldr	r1, [pc, #144]	@ (8005470 <HAL_DMA_Init+0x168>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80053e4:	4b22      	ldr	r3, [pc, #136]	@ (8005470 <HAL_DMA_Init+0x168>)
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6859      	ldr	r1, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f0:	f003 031c 	and.w	r3, r3, #28
 80053f4:	fa01 f303 	lsl.w	r3, r1, r3
 80053f8:	491d      	ldr	r1, [pc, #116]	@ (8005470 <HAL_DMA_Init+0x168>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	600b      	str	r3, [r1, #0]
 80053fe:	e019      	b.n	8005434 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005400:	4b1c      	ldr	r3, [pc, #112]	@ (8005474 <HAL_DMA_Init+0x16c>)
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005408:	f003 031c 	and.w	r3, r3, #28
 800540c:	210f      	movs	r1, #15
 800540e:	fa01 f303 	lsl.w	r3, r1, r3
 8005412:	43db      	mvns	r3, r3
 8005414:	4917      	ldr	r1, [pc, #92]	@ (8005474 <HAL_DMA_Init+0x16c>)
 8005416:	4013      	ands	r3, r2
 8005418:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800541a:	4b16      	ldr	r3, [pc, #88]	@ (8005474 <HAL_DMA_Init+0x16c>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6859      	ldr	r1, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005426:	f003 031c 	and.w	r3, r3, #28
 800542a:	fa01 f303 	lsl.w	r3, r1, r3
 800542e:	4911      	ldr	r1, [pc, #68]	@ (8005474 <HAL_DMA_Init+0x16c>)
 8005430:	4313      	orrs	r3, r2
 8005432:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	40020407 	.word	0x40020407
 800545c:	bffdfff8 	.word	0xbffdfff8
 8005460:	cccccccd 	.word	0xcccccccd
 8005464:	40020000 	.word	0x40020000
 8005468:	bffdfbf8 	.word	0xbffdfbf8
 800546c:	40020400 	.word	0x40020400
 8005470:	400200a8 	.word	0x400200a8
 8005474:	400204a8 	.word	0x400204a8

08005478 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_DMA_Start_IT+0x20>
 8005494:	2302      	movs	r3, #2
 8005496:	e04b      	b.n	8005530 <HAL_DMA_Start_IT+0xb8>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d13a      	bne.n	8005522 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0201 	bic.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f95f 	bl	8005794 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d008      	beq.n	80054f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 020e 	orr.w	r2, r2, #14
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e00f      	b.n	8005510 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0204 	bic.w	r2, r2, #4
 80054fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 020a 	orr.w	r2, r2, #10
 800550e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	e005      	b.n	800552e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800552a:	2302      	movs	r3, #2
 800552c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800552e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d008      	beq.n	8005562 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2204      	movs	r2, #4
 8005554:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e022      	b.n	80055a8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 020e 	bic.w	r2, r2, #14
 8005570:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0201 	bic.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005586:	f003 021c 	and.w	r2, r3, #28
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558e:	2101      	movs	r1, #1
 8005590:	fa01 f202 	lsl.w	r2, r1, r2
 8005594:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055bc:	2300      	movs	r3, #0
 80055be:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d005      	beq.n	80055d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2204      	movs	r2, #4
 80055d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	73fb      	strb	r3, [r7, #15]
 80055d6:	e029      	b.n	800562c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 020e 	bic.w	r2, r2, #14
 80055e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0201 	bic.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fc:	f003 021c 	and.w	r2, r3, #28
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005604:	2101      	movs	r1, #1
 8005606:	fa01 f202 	lsl.w	r2, r1, r2
 800560a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	4798      	blx	r3
    }
  }
  return status;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005652:	f003 031c 	and.w	r3, r3, #28
 8005656:	2204      	movs	r2, #4
 8005658:	409a      	lsls	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4013      	ands	r3, r2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d026      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x7a>
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b00      	cmp	r3, #0
 800566a:	d021      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0320 	and.w	r3, r3, #32
 8005676:	2b00      	cmp	r3, #0
 8005678:	d107      	bne.n	800568a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0204 	bic.w	r2, r2, #4
 8005688:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800568e:	f003 021c 	and.w	r2, r3, #28
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005696:	2104      	movs	r1, #4
 8005698:	fa01 f202 	lsl.w	r2, r1, r2
 800569c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d071      	beq.n	800578a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80056ae:	e06c      	b.n	800578a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b4:	f003 031c 	and.w	r3, r3, #28
 80056b8:	2202      	movs	r2, #2
 80056ba:	409a      	lsls	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4013      	ands	r3, r2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d02e      	beq.n	8005722 <HAL_DMA_IRQHandler+0xec>
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d029      	beq.n	8005722 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0320 	and.w	r3, r3, #32
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10b      	bne.n	80056f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 020a 	bic.w	r2, r2, #10
 80056ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f8:	f003 021c 	and.w	r2, r3, #28
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005700:	2102      	movs	r1, #2
 8005702:	fa01 f202 	lsl.w	r2, r1, r2
 8005706:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005714:	2b00      	cmp	r3, #0
 8005716:	d038      	beq.n	800578a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005720:	e033      	b.n	800578a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005726:	f003 031c 	and.w	r3, r3, #28
 800572a:	2208      	movs	r2, #8
 800572c:	409a      	lsls	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4013      	ands	r3, r2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d02a      	beq.n	800578c <HAL_DMA_IRQHandler+0x156>
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f003 0308 	and.w	r3, r3, #8
 800573c:	2b00      	cmp	r3, #0
 800573e:	d025      	beq.n	800578c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 020e 	bic.w	r2, r2, #14
 800574e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005754:	f003 021c 	and.w	r2, r3, #28
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575c:	2101      	movs	r1, #1
 800575e:	fa01 f202 	lsl.w	r2, r1, r2
 8005762:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800577e:	2b00      	cmp	r3, #0
 8005780:	d004      	beq.n	800578c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800578a:	bf00      	nop
 800578c:	bf00      	nop
}
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a6:	f003 021c 	and.w	r2, r3, #28
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ae:	2101      	movs	r1, #1
 80057b0:	fa01 f202 	lsl.w	r2, r1, r2
 80057b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	2b10      	cmp	r3, #16
 80057c4:	d108      	bne.n	80057d8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80057d6:	e007      	b.n	80057e8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	60da      	str	r2, [r3, #12]
}
 80057e8:	bf00      	nop
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005802:	e166      	b.n	8005ad2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	2101      	movs	r1, #1
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	fa01 f303 	lsl.w	r3, r1, r3
 8005810:	4013      	ands	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 8158 	beq.w	8005acc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	2b01      	cmp	r3, #1
 8005826:	d005      	beq.n	8005834 <HAL_GPIO_Init+0x40>
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f003 0303 	and.w	r3, r3, #3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d130      	bne.n	8005896 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	2203      	movs	r2, #3
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	43db      	mvns	r3, r3
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4013      	ands	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800586a:	2201      	movs	r2, #1
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	43db      	mvns	r3, r3
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4013      	ands	r3, r2
 8005878:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	091b      	lsrs	r3, r3, #4
 8005880:	f003 0201 	and.w	r2, r3, #1
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	fa02 f303 	lsl.w	r3, r2, r3
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d017      	beq.n	80058d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	2203      	movs	r2, #3
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	43db      	mvns	r3, r3
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4013      	ands	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	005b      	lsls	r3, r3, #1
 80058c2:	fa02 f303 	lsl.w	r3, r2, r3
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d123      	bne.n	8005926 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	08da      	lsrs	r2, r3, #3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3208      	adds	r2, #8
 80058e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	220f      	movs	r2, #15
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	43db      	mvns	r3, r3
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4013      	ands	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	691a      	ldr	r2, [r3, #16]
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	08da      	lsrs	r2, r3, #3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3208      	adds	r2, #8
 8005920:	6939      	ldr	r1, [r7, #16]
 8005922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	2203      	movs	r2, #3
 8005932:	fa02 f303 	lsl.w	r3, r2, r3
 8005936:	43db      	mvns	r3, r3
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4013      	ands	r3, r2
 800593c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f003 0203 	and.w	r2, r3, #3
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 80b2 	beq.w	8005acc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005968:	4b61      	ldr	r3, [pc, #388]	@ (8005af0 <HAL_GPIO_Init+0x2fc>)
 800596a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800596c:	4a60      	ldr	r2, [pc, #384]	@ (8005af0 <HAL_GPIO_Init+0x2fc>)
 800596e:	f043 0301 	orr.w	r3, r3, #1
 8005972:	6613      	str	r3, [r2, #96]	@ 0x60
 8005974:	4b5e      	ldr	r3, [pc, #376]	@ (8005af0 <HAL_GPIO_Init+0x2fc>)
 8005976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	60bb      	str	r3, [r7, #8]
 800597e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005980:	4a5c      	ldr	r2, [pc, #368]	@ (8005af4 <HAL_GPIO_Init+0x300>)
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	089b      	lsrs	r3, r3, #2
 8005986:	3302      	adds	r3, #2
 8005988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800598c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f003 0303 	and.w	r3, r3, #3
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	220f      	movs	r2, #15
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	43db      	mvns	r3, r3
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4013      	ands	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80059aa:	d02b      	beq.n	8005a04 <HAL_GPIO_Init+0x210>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a52      	ldr	r2, [pc, #328]	@ (8005af8 <HAL_GPIO_Init+0x304>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d025      	beq.n	8005a00 <HAL_GPIO_Init+0x20c>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a51      	ldr	r2, [pc, #324]	@ (8005afc <HAL_GPIO_Init+0x308>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d01f      	beq.n	80059fc <HAL_GPIO_Init+0x208>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a50      	ldr	r2, [pc, #320]	@ (8005b00 <HAL_GPIO_Init+0x30c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d019      	beq.n	80059f8 <HAL_GPIO_Init+0x204>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a4f      	ldr	r2, [pc, #316]	@ (8005b04 <HAL_GPIO_Init+0x310>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d013      	beq.n	80059f4 <HAL_GPIO_Init+0x200>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a4e      	ldr	r2, [pc, #312]	@ (8005b08 <HAL_GPIO_Init+0x314>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00d      	beq.n	80059f0 <HAL_GPIO_Init+0x1fc>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a4d      	ldr	r2, [pc, #308]	@ (8005b0c <HAL_GPIO_Init+0x318>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d007      	beq.n	80059ec <HAL_GPIO_Init+0x1f8>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a4c      	ldr	r2, [pc, #304]	@ (8005b10 <HAL_GPIO_Init+0x31c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d101      	bne.n	80059e8 <HAL_GPIO_Init+0x1f4>
 80059e4:	2307      	movs	r3, #7
 80059e6:	e00e      	b.n	8005a06 <HAL_GPIO_Init+0x212>
 80059e8:	2308      	movs	r3, #8
 80059ea:	e00c      	b.n	8005a06 <HAL_GPIO_Init+0x212>
 80059ec:	2306      	movs	r3, #6
 80059ee:	e00a      	b.n	8005a06 <HAL_GPIO_Init+0x212>
 80059f0:	2305      	movs	r3, #5
 80059f2:	e008      	b.n	8005a06 <HAL_GPIO_Init+0x212>
 80059f4:	2304      	movs	r3, #4
 80059f6:	e006      	b.n	8005a06 <HAL_GPIO_Init+0x212>
 80059f8:	2303      	movs	r3, #3
 80059fa:	e004      	b.n	8005a06 <HAL_GPIO_Init+0x212>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e002      	b.n	8005a06 <HAL_GPIO_Init+0x212>
 8005a00:	2301      	movs	r3, #1
 8005a02:	e000      	b.n	8005a06 <HAL_GPIO_Init+0x212>
 8005a04:	2300      	movs	r3, #0
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	f002 0203 	and.w	r2, r2, #3
 8005a0c:	0092      	lsls	r2, r2, #2
 8005a0e:	4093      	lsls	r3, r2
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005a16:	4937      	ldr	r1, [pc, #220]	@ (8005af4 <HAL_GPIO_Init+0x300>)
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	089b      	lsrs	r3, r3, #2
 8005a1c:	3302      	adds	r3, #2
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a24:	4b3b      	ldr	r3, [pc, #236]	@ (8005b14 <HAL_GPIO_Init+0x320>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	4013      	ands	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005a48:	4a32      	ldr	r2, [pc, #200]	@ (8005b14 <HAL_GPIO_Init+0x320>)
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005a4e:	4b31      	ldr	r3, [pc, #196]	@ (8005b14 <HAL_GPIO_Init+0x320>)
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	43db      	mvns	r3, r3
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005a72:	4a28      	ldr	r2, [pc, #160]	@ (8005b14 <HAL_GPIO_Init+0x320>)
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005a78:	4b26      	ldr	r3, [pc, #152]	@ (8005b14 <HAL_GPIO_Init+0x320>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	43db      	mvns	r3, r3
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4013      	ands	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005b14 <HAL_GPIO_Init+0x320>)
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8005b14 <HAL_GPIO_Init+0x320>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	43db      	mvns	r3, r3
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005ac6:	4a13      	ldr	r2, [pc, #76]	@ (8005b14 <HAL_GPIO_Init+0x320>)
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f47f ae91 	bne.w	8005804 <HAL_GPIO_Init+0x10>
  }
}
 8005ae2:	bf00      	nop
 8005ae4:	bf00      	nop
 8005ae6:	371c      	adds	r7, #28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	40021000 	.word	0x40021000
 8005af4:	40010000 	.word	0x40010000
 8005af8:	48000400 	.word	0x48000400
 8005afc:	48000800 	.word	0x48000800
 8005b00:	48000c00 	.word	0x48000c00
 8005b04:	48001000 	.word	0x48001000
 8005b08:	48001400 	.word	0x48001400
 8005b0c:	48001800 	.word	0x48001800
 8005b10:	48001c00 	.word	0x48001c00
 8005b14:	40010400 	.word	0x40010400

08005b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	807b      	strh	r3, [r7, #2]
 8005b24:	4613      	mov	r3, r2
 8005b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b28:	787b      	ldrb	r3, [r7, #1]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b2e:	887a      	ldrh	r2, [r7, #2]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b34:	e002      	b.n	8005b3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b36:	887a      	ldrh	r2, [r7, #2]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b5a:	887a      	ldrh	r2, [r7, #2]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	041a      	lsls	r2, r3, #16
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	43d9      	mvns	r1, r3
 8005b66:	887b      	ldrh	r3, [r7, #2]
 8005b68:	400b      	ands	r3, r1
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	619a      	str	r2, [r3, #24]
}
 8005b70:	bf00      	nop
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005b86:	4b08      	ldr	r3, [pc, #32]	@ (8005ba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b88:	695a      	ldr	r2, [r3, #20]
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d006      	beq.n	8005ba0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b92:	4a05      	ldr	r2, [pc, #20]	@ (8005ba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b94:	88fb      	ldrh	r3, [r7, #6]
 8005b96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b98:	88fb      	ldrh	r3, [r7, #6]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fb fbe6 	bl	800136c <HAL_GPIO_EXTI_Callback>
  }
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	40010400 	.word	0x40010400

08005bac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e08d      	b.n	8005cda <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d106      	bne.n	8005bd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7fc f918 	bl	8001e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2224      	movs	r2, #36	@ 0x24
 8005bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0201 	bic.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005bfc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d107      	bne.n	8005c26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c22:	609a      	str	r2, [r3, #8]
 8005c24:	e006      	b.n	8005c34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005c32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d108      	bne.n	8005c4e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c4a:	605a      	str	r2, [r3, #4]
 8005c4c:	e007      	b.n	8005c5e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6812      	ldr	r2, [r2, #0]
 8005c68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005c6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691a      	ldr	r2, [r3, #16]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	69d9      	ldr	r1, [r3, #28]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a1a      	ldr	r2, [r3, #32]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b088      	sub	sp, #32
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	4608      	mov	r0, r1
 8005cee:	4611      	mov	r1, r2
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	817b      	strh	r3, [r7, #10]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	813b      	strh	r3, [r7, #8]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b20      	cmp	r3, #32
 8005d08:	f040 80f9 	bne.w	8005efe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <HAL_I2C_Mem_Write+0x34>
 8005d12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d105      	bne.n	8005d24 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d1e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e0ed      	b.n	8005f00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d101      	bne.n	8005d32 <HAL_I2C_Mem_Write+0x4e>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e0e6      	b.n	8005f00 <HAL_I2C_Mem_Write+0x21c>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d3a:	f7fd fab3 	bl	80032a4 <HAL_GetTick>
 8005d3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	2319      	movs	r3, #25
 8005d46:	2201      	movs	r2, #1
 8005d48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 fac3 	bl	80062d8 <I2C_WaitOnFlagUntilTimeout>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e0d1      	b.n	8005f00 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2221      	movs	r2, #33	@ 0x21
 8005d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2240      	movs	r2, #64	@ 0x40
 8005d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a3a      	ldr	r2, [r7, #32]
 8005d76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d84:	88f8      	ldrh	r0, [r7, #6]
 8005d86:	893a      	ldrh	r2, [r7, #8]
 8005d88:	8979      	ldrh	r1, [r7, #10]
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	9301      	str	r3, [sp, #4]
 8005d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	4603      	mov	r3, r0
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 f9d3 	bl	8006140 <I2C_RequestMemoryWrite>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d005      	beq.n	8005dac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e0a9      	b.n	8005f00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2bff      	cmp	r3, #255	@ 0xff
 8005db4:	d90e      	bls.n	8005dd4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	22ff      	movs	r2, #255	@ 0xff
 8005dba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	8979      	ldrh	r1, [r7, #10]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 fc47 	bl	8006660 <I2C_TransferConfig>
 8005dd2:	e00f      	b.n	8005df4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	8979      	ldrh	r1, [r7, #10]
 8005de6:	2300      	movs	r3, #0
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 fc36 	bl	8006660 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fac6 	bl	800638a <I2C_WaitOnTXISFlagUntilTimeout>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e07b      	b.n	8005f00 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0c:	781a      	ldrb	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d034      	beq.n	8005eac <HAL_I2C_Mem_Write+0x1c8>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d130      	bne.n	8005eac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e50:	2200      	movs	r2, #0
 8005e52:	2180      	movs	r1, #128	@ 0x80
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 fa3f 	bl	80062d8 <I2C_WaitOnFlagUntilTimeout>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e04d      	b.n	8005f00 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	2bff      	cmp	r3, #255	@ 0xff
 8005e6c:	d90e      	bls.n	8005e8c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	22ff      	movs	r2, #255	@ 0xff
 8005e72:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	8979      	ldrh	r1, [r7, #10]
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 fbeb 	bl	8006660 <I2C_TransferConfig>
 8005e8a:	e00f      	b.n	8005eac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	8979      	ldrh	r1, [r7, #10]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f000 fbda 	bl	8006660 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d19e      	bne.n	8005df4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 faac 	bl	8006418 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e01a      	b.n	8005f00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6859      	ldr	r1, [r3, #4]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	4b0a      	ldr	r3, [pc, #40]	@ (8005f08 <HAL_I2C_Mem_Write+0x224>)
 8005ede:	400b      	ands	r3, r1
 8005ee0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	e000      	b.n	8005f00 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005efe:	2302      	movs	r3, #2
  }
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	fe00e800 	.word	0xfe00e800

08005f0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af02      	add	r7, sp, #8
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	4608      	mov	r0, r1
 8005f16:	4611      	mov	r1, r2
 8005f18:	461a      	mov	r2, r3
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	817b      	strh	r3, [r7, #10]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	813b      	strh	r3, [r7, #8]
 8005f22:	4613      	mov	r3, r2
 8005f24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b20      	cmp	r3, #32
 8005f30:	f040 80fd 	bne.w	800612e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <HAL_I2C_Mem_Read+0x34>
 8005f3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d105      	bne.n	8005f4c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f46:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0f1      	b.n	8006130 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d101      	bne.n	8005f5a <HAL_I2C_Mem_Read+0x4e>
 8005f56:	2302      	movs	r3, #2
 8005f58:	e0ea      	b.n	8006130 <HAL_I2C_Mem_Read+0x224>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f62:	f7fd f99f 	bl	80032a4 <HAL_GetTick>
 8005f66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	2319      	movs	r3, #25
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f9af 	bl	80062d8 <I2C_WaitOnFlagUntilTimeout>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e0d5      	b.n	8006130 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2222      	movs	r2, #34	@ 0x22
 8005f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2240      	movs	r2, #64	@ 0x40
 8005f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a3a      	ldr	r2, [r7, #32]
 8005f9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fac:	88f8      	ldrh	r0, [r7, #6]
 8005fae:	893a      	ldrh	r2, [r7, #8]
 8005fb0:	8979      	ldrh	r1, [r7, #10]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	9301      	str	r3, [sp, #4]
 8005fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	4603      	mov	r3, r0
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 f913 	bl	80061e8 <I2C_RequestMemoryRead>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d005      	beq.n	8005fd4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0ad      	b.n	8006130 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2bff      	cmp	r3, #255	@ 0xff
 8005fdc:	d90e      	bls.n	8005ffc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	8979      	ldrh	r1, [r7, #10]
 8005fec:	4b52      	ldr	r3, [pc, #328]	@ (8006138 <HAL_I2C_Mem_Read+0x22c>)
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fb33 	bl	8006660 <I2C_TransferConfig>
 8005ffa:	e00f      	b.n	800601c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006000:	b29a      	uxth	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800600a:	b2da      	uxtb	r2, r3
 800600c:	8979      	ldrh	r1, [r7, #10]
 800600e:	4b4a      	ldr	r3, [pc, #296]	@ (8006138 <HAL_I2C_Mem_Read+0x22c>)
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 fb22 	bl	8006660 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006022:	2200      	movs	r2, #0
 8006024:	2104      	movs	r1, #4
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 f956 	bl	80062d8 <I2C_WaitOnFlagUntilTimeout>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e07c      	b.n	8006130 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006052:	3b01      	subs	r3, #1
 8006054:	b29a      	uxth	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800605e:	b29b      	uxth	r3, r3
 8006060:	3b01      	subs	r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800606c:	b29b      	uxth	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d034      	beq.n	80060dc <HAL_I2C_Mem_Read+0x1d0>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006076:	2b00      	cmp	r3, #0
 8006078:	d130      	bne.n	80060dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006080:	2200      	movs	r2, #0
 8006082:	2180      	movs	r1, #128	@ 0x80
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f927 	bl	80062d8 <I2C_WaitOnFlagUntilTimeout>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e04d      	b.n	8006130 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006098:	b29b      	uxth	r3, r3
 800609a:	2bff      	cmp	r3, #255	@ 0xff
 800609c:	d90e      	bls.n	80060bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2201      	movs	r2, #1
 80060a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	8979      	ldrh	r1, [r7, #10]
 80060ac:	2300      	movs	r3, #0
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 fad3 	bl	8006660 <I2C_TransferConfig>
 80060ba:	e00f      	b.n	80060dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	8979      	ldrh	r1, [r7, #10]
 80060ce:	2300      	movs	r3, #0
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f000 fac2 	bl	8006660 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d19a      	bne.n	800601c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 f994 	bl	8006418 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e01a      	b.n	8006130 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2220      	movs	r2, #32
 8006100:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6859      	ldr	r1, [r3, #4]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	4b0b      	ldr	r3, [pc, #44]	@ (800613c <HAL_I2C_Mem_Read+0x230>)
 800610e:	400b      	ands	r3, r1
 8006110:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2220      	movs	r2, #32
 8006116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	e000      	b.n	8006130 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800612e:	2302      	movs	r3, #2
  }
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	80002400 	.word	0x80002400
 800613c:	fe00e800 	.word	0xfe00e800

08006140 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af02      	add	r7, sp, #8
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	4608      	mov	r0, r1
 800614a:	4611      	mov	r1, r2
 800614c:	461a      	mov	r2, r3
 800614e:	4603      	mov	r3, r0
 8006150:	817b      	strh	r3, [r7, #10]
 8006152:	460b      	mov	r3, r1
 8006154:	813b      	strh	r3, [r7, #8]
 8006156:	4613      	mov	r3, r2
 8006158:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	b2da      	uxtb	r2, r3
 800615e:	8979      	ldrh	r1, [r7, #10]
 8006160:	4b20      	ldr	r3, [pc, #128]	@ (80061e4 <I2C_RequestMemoryWrite+0xa4>)
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 fa79 	bl	8006660 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	69b9      	ldr	r1, [r7, #24]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 f909 	bl	800638a <I2C_WaitOnTXISFlagUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e02c      	b.n	80061dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006182:	88fb      	ldrh	r3, [r7, #6]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d105      	bne.n	8006194 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006188:	893b      	ldrh	r3, [r7, #8]
 800618a:	b2da      	uxtb	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	629a      	str	r2, [r3, #40]	@ 0x28
 8006192:	e015      	b.n	80061c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006194:	893b      	ldrh	r3, [r7, #8]
 8006196:	0a1b      	lsrs	r3, r3, #8
 8006198:	b29b      	uxth	r3, r3
 800619a:	b2da      	uxtb	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	69b9      	ldr	r1, [r7, #24]
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 f8ef 	bl	800638a <I2C_WaitOnTXISFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e012      	b.n	80061dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061b6:	893b      	ldrh	r3, [r7, #8]
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	2200      	movs	r2, #0
 80061c8:	2180      	movs	r1, #128	@ 0x80
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 f884 	bl	80062d8 <I2C_WaitOnFlagUntilTimeout>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e000      	b.n	80061dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	80002000 	.word	0x80002000

080061e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	4608      	mov	r0, r1
 80061f2:	4611      	mov	r1, r2
 80061f4:	461a      	mov	r2, r3
 80061f6:	4603      	mov	r3, r0
 80061f8:	817b      	strh	r3, [r7, #10]
 80061fa:	460b      	mov	r3, r1
 80061fc:	813b      	strh	r3, [r7, #8]
 80061fe:	4613      	mov	r3, r2
 8006200:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006202:	88fb      	ldrh	r3, [r7, #6]
 8006204:	b2da      	uxtb	r2, r3
 8006206:	8979      	ldrh	r1, [r7, #10]
 8006208:	4b20      	ldr	r3, [pc, #128]	@ (800628c <I2C_RequestMemoryRead+0xa4>)
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	2300      	movs	r3, #0
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 fa26 	bl	8006660 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006214:	69fa      	ldr	r2, [r7, #28]
 8006216:	69b9      	ldr	r1, [r7, #24]
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f8b6 	bl	800638a <I2C_WaitOnTXISFlagUntilTimeout>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e02c      	b.n	8006282 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006228:	88fb      	ldrh	r3, [r7, #6]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d105      	bne.n	800623a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800622e:	893b      	ldrh	r3, [r7, #8]
 8006230:	b2da      	uxtb	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	629a      	str	r2, [r3, #40]	@ 0x28
 8006238:	e015      	b.n	8006266 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800623a:	893b      	ldrh	r3, [r7, #8]
 800623c:	0a1b      	lsrs	r3, r3, #8
 800623e:	b29b      	uxth	r3, r3
 8006240:	b2da      	uxtb	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006248:	69fa      	ldr	r2, [r7, #28]
 800624a:	69b9      	ldr	r1, [r7, #24]
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 f89c 	bl	800638a <I2C_WaitOnTXISFlagUntilTimeout>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e012      	b.n	8006282 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800625c:	893b      	ldrh	r3, [r7, #8]
 800625e:	b2da      	uxtb	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	2200      	movs	r2, #0
 800626e:	2140      	movs	r1, #64	@ 0x40
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 f831 	bl	80062d8 <I2C_WaitOnFlagUntilTimeout>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e000      	b.n	8006282 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	80002000 	.word	0x80002000

08006290 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d103      	bne.n	80062ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2200      	movs	r2, #0
 80062ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d007      	beq.n	80062cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0201 	orr.w	r2, r2, #1
 80062ca:	619a      	str	r2, [r3, #24]
  }
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	603b      	str	r3, [r7, #0]
 80062e4:	4613      	mov	r3, r2
 80062e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062e8:	e03b      	b.n	8006362 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 f8d6 	bl	80064a0 <I2C_IsErrorOccurred>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e041      	b.n	8006382 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006304:	d02d      	beq.n	8006362 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006306:	f7fc ffcd 	bl	80032a4 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	429a      	cmp	r2, r3
 8006314:	d302      	bcc.n	800631c <I2C_WaitOnFlagUntilTimeout+0x44>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d122      	bne.n	8006362 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699a      	ldr	r2, [r3, #24]
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	4013      	ands	r3, r2
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	429a      	cmp	r2, r3
 800632a:	bf0c      	ite	eq
 800632c:	2301      	moveq	r3, #1
 800632e:	2300      	movne	r3, #0
 8006330:	b2db      	uxtb	r3, r3
 8006332:	461a      	mov	r2, r3
 8006334:	79fb      	ldrb	r3, [r7, #7]
 8006336:	429a      	cmp	r2, r3
 8006338:	d113      	bne.n	8006362 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800633e:	f043 0220 	orr.w	r2, r3, #32
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2220      	movs	r2, #32
 800634a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e00f      	b.n	8006382 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	699a      	ldr	r2, [r3, #24]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4013      	ands	r3, r2
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	429a      	cmp	r2, r3
 8006370:	bf0c      	ite	eq
 8006372:	2301      	moveq	r3, #1
 8006374:	2300      	movne	r3, #0
 8006376:	b2db      	uxtb	r3, r3
 8006378:	461a      	mov	r2, r3
 800637a:	79fb      	ldrb	r3, [r7, #7]
 800637c:	429a      	cmp	r2, r3
 800637e:	d0b4      	beq.n	80062ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006396:	e033      	b.n	8006400 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	68b9      	ldr	r1, [r7, #8]
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 f87f 	bl	80064a0 <I2C_IsErrorOccurred>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e031      	b.n	8006410 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b2:	d025      	beq.n	8006400 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b4:	f7fc ff76 	bl	80032a4 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d302      	bcc.n	80063ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d11a      	bne.n	8006400 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d013      	beq.n	8006400 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063dc:	f043 0220 	orr.w	r2, r3, #32
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e007      	b.n	8006410 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b02      	cmp	r3, #2
 800640c:	d1c4      	bne.n	8006398 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006424:	e02f      	b.n	8006486 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	68b9      	ldr	r1, [r7, #8]
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 f838 	bl	80064a0 <I2C_IsErrorOccurred>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e02d      	b.n	8006496 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800643a:	f7fc ff33 	bl	80032a4 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	429a      	cmp	r2, r3
 8006448:	d302      	bcc.n	8006450 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d11a      	bne.n	8006486 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b20      	cmp	r3, #32
 800645c:	d013      	beq.n	8006486 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006462:	f043 0220 	orr.w	r2, r3, #32
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2220      	movs	r2, #32
 800646e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e007      	b.n	8006496 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	f003 0320 	and.w	r3, r3, #32
 8006490:	2b20      	cmp	r3, #32
 8006492:	d1c8      	bne.n	8006426 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08a      	sub	sp, #40	@ 0x28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80064ba:	2300      	movs	r3, #0
 80064bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	f003 0310 	and.w	r3, r3, #16
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d068      	beq.n	800659e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2210      	movs	r2, #16
 80064d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80064d4:	e049      	b.n	800656a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064dc:	d045      	beq.n	800656a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064de:	f7fc fee1 	bl	80032a4 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d302      	bcc.n	80064f4 <I2C_IsErrorOccurred+0x54>
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d13a      	bne.n	800656a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006506:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006512:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006516:	d121      	bne.n	800655c <I2C_IsErrorOccurred+0xbc>
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800651e:	d01d      	beq.n	800655c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006520:	7cfb      	ldrb	r3, [r7, #19]
 8006522:	2b20      	cmp	r3, #32
 8006524:	d01a      	beq.n	800655c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006534:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006536:	f7fc feb5 	bl	80032a4 <HAL_GetTick>
 800653a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800653c:	e00e      	b.n	800655c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800653e:	f7fc feb1 	bl	80032a4 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	2b19      	cmp	r3, #25
 800654a:	d907      	bls.n	800655c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	f043 0320 	orr.w	r3, r3, #32
 8006552:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800655a:	e006      	b.n	800656a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	f003 0320 	and.w	r3, r3, #32
 8006566:	2b20      	cmp	r3, #32
 8006568:	d1e9      	bne.n	800653e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	f003 0320 	and.w	r3, r3, #32
 8006574:	2b20      	cmp	r3, #32
 8006576:	d003      	beq.n	8006580 <I2C_IsErrorOccurred+0xe0>
 8006578:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0aa      	beq.n	80064d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006584:	2b00      	cmp	r3, #0
 8006586:	d103      	bne.n	8006590 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2220      	movs	r2, #32
 800658e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	f043 0304 	orr.w	r3, r3, #4
 8006596:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00b      	beq.n	80065c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	f043 0301 	orr.w	r3, r3, #1
 80065b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80065c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	f043 0308 	orr.w	r3, r3, #8
 80065d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80065e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00b      	beq.n	800660c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	f043 0302 	orr.w	r3, r3, #2
 80065fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006604:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800660c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006610:	2b00      	cmp	r3, #0
 8006612:	d01c      	beq.n	800664e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f7ff fe3b 	bl	8006290 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6859      	ldr	r1, [r3, #4]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	4b0d      	ldr	r3, [pc, #52]	@ (800665c <I2C_IsErrorOccurred+0x1bc>)
 8006626:	400b      	ands	r3, r1
 8006628:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	431a      	orrs	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2220      	movs	r2, #32
 800663a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800664e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006652:	4618      	mov	r0, r3
 8006654:	3728      	adds	r7, #40	@ 0x28
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	fe00e800 	.word	0xfe00e800

08006660 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006660:	b480      	push	{r7}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	607b      	str	r3, [r7, #4]
 800666a:	460b      	mov	r3, r1
 800666c:	817b      	strh	r3, [r7, #10]
 800666e:	4613      	mov	r3, r2
 8006670:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006672:	897b      	ldrh	r3, [r7, #10]
 8006674:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006678:	7a7b      	ldrb	r3, [r7, #9]
 800667a:	041b      	lsls	r3, r3, #16
 800667c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006680:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	4313      	orrs	r3, r2
 800668a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800668e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	0d5b      	lsrs	r3, r3, #21
 800669a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800669e:	4b08      	ldr	r3, [pc, #32]	@ (80066c0 <I2C_TransferConfig+0x60>)
 80066a0:	430b      	orrs	r3, r1
 80066a2:	43db      	mvns	r3, r3
 80066a4:	ea02 0103 	and.w	r1, r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80066b2:	bf00      	nop
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	03ff63ff 	.word	0x03ff63ff

080066c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b20      	cmp	r3, #32
 80066d8:	d138      	bne.n	800674c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d101      	bne.n	80066e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80066e4:	2302      	movs	r3, #2
 80066e6:	e032      	b.n	800674e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2224      	movs	r2, #36	@ 0x24
 80066f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0201 	bic.w	r2, r2, #1
 8006706:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006716:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6819      	ldr	r1, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	430a      	orrs	r2, r1
 8006726:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0201 	orr.w	r2, r2, #1
 8006736:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	e000      	b.n	800674e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800674c:	2302      	movs	r3, #2
  }
}
 800674e:	4618      	mov	r0, r3
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800675a:	b480      	push	{r7}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b20      	cmp	r3, #32
 800676e:	d139      	bne.n	80067e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006776:	2b01      	cmp	r3, #1
 8006778:	d101      	bne.n	800677e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800677a:	2302      	movs	r3, #2
 800677c:	e033      	b.n	80067e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2224      	movs	r2, #36	@ 0x24
 800678a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0201 	bic.w	r2, r2, #1
 800679c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80067ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	021b      	lsls	r3, r3, #8
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f042 0201 	orr.w	r2, r2, #1
 80067ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80067e0:	2300      	movs	r3, #0
 80067e2:	e000      	b.n	80067e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80067e4:	2302      	movs	r3, #2
  }
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
	...

080067f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80067f4:	b480      	push	{r7}
 80067f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80067f8:	4b04      	ldr	r3, [pc, #16]	@ (800680c <HAL_PWREx_GetVoltageRange+0x18>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006800:	4618      	mov	r0, r3
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40007000 	.word	0x40007000

08006810 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800681e:	d130      	bne.n	8006882 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006820:	4b23      	ldr	r3, [pc, #140]	@ (80068b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800682c:	d038      	beq.n	80068a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800682e:	4b20      	ldr	r3, [pc, #128]	@ (80068b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006836:	4a1e      	ldr	r2, [pc, #120]	@ (80068b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006838:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800683c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800683e:	4b1d      	ldr	r3, [pc, #116]	@ (80068b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2232      	movs	r2, #50	@ 0x32
 8006844:	fb02 f303 	mul.w	r3, r2, r3
 8006848:	4a1b      	ldr	r2, [pc, #108]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800684a:	fba2 2303 	umull	r2, r3, r2, r3
 800684e:	0c9b      	lsrs	r3, r3, #18
 8006850:	3301      	adds	r3, #1
 8006852:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006854:	e002      	b.n	800685c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3b01      	subs	r3, #1
 800685a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800685c:	4b14      	ldr	r3, [pc, #80]	@ (80068b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006864:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006868:	d102      	bne.n	8006870 <HAL_PWREx_ControlVoltageScaling+0x60>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1f2      	bne.n	8006856 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006870:	4b0f      	ldr	r3, [pc, #60]	@ (80068b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006878:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800687c:	d110      	bne.n	80068a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e00f      	b.n	80068a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006882:	4b0b      	ldr	r3, [pc, #44]	@ (80068b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800688a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800688e:	d007      	beq.n	80068a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006890:	4b07      	ldr	r3, [pc, #28]	@ (80068b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006898:	4a05      	ldr	r2, [pc, #20]	@ (80068b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800689a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800689e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	40007000 	.word	0x40007000
 80068b4:	20000000 	.word	0x20000000
 80068b8:	431bde83 	.word	0x431bde83

080068bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d102      	bne.n	80068d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	f000 bc08 	b.w	80070e0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068d0:	4b96      	ldr	r3, [pc, #600]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f003 030c 	and.w	r3, r3, #12
 80068d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068da:	4b94      	ldr	r3, [pc, #592]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	f003 0303 	and.w	r3, r3, #3
 80068e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0310 	and.w	r3, r3, #16
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 80e4 	beq.w	8006aba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d007      	beq.n	8006908 <HAL_RCC_OscConfig+0x4c>
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	2b0c      	cmp	r3, #12
 80068fc:	f040 808b 	bne.w	8006a16 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2b01      	cmp	r3, #1
 8006904:	f040 8087 	bne.w	8006a16 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006908:	4b88      	ldr	r3, [pc, #544]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d005      	beq.n	8006920 <HAL_RCC_OscConfig+0x64>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e3df      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a1a      	ldr	r2, [r3, #32]
 8006924:	4b81      	ldr	r3, [pc, #516]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b00      	cmp	r3, #0
 800692e:	d004      	beq.n	800693a <HAL_RCC_OscConfig+0x7e>
 8006930:	4b7e      	ldr	r3, [pc, #504]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006938:	e005      	b.n	8006946 <HAL_RCC_OscConfig+0x8a>
 800693a:	4b7c      	ldr	r3, [pc, #496]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 800693c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006940:	091b      	lsrs	r3, r3, #4
 8006942:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006946:	4293      	cmp	r3, r2
 8006948:	d223      	bcs.n	8006992 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fdc4 	bl	80074dc <RCC_SetFlashLatencyFromMSIRange>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e3c0      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800695e:	4b73      	ldr	r3, [pc, #460]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a72      	ldr	r2, [pc, #456]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006964:	f043 0308 	orr.w	r3, r3, #8
 8006968:	6013      	str	r3, [r2, #0]
 800696a:	4b70      	ldr	r3, [pc, #448]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	496d      	ldr	r1, [pc, #436]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006978:	4313      	orrs	r3, r2
 800697a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800697c:	4b6b      	ldr	r3, [pc, #428]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	021b      	lsls	r3, r3, #8
 800698a:	4968      	ldr	r1, [pc, #416]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 800698c:	4313      	orrs	r3, r2
 800698e:	604b      	str	r3, [r1, #4]
 8006990:	e025      	b.n	80069de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006992:	4b66      	ldr	r3, [pc, #408]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a65      	ldr	r2, [pc, #404]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006998:	f043 0308 	orr.w	r3, r3, #8
 800699c:	6013      	str	r3, [r2, #0]
 800699e:	4b63      	ldr	r3, [pc, #396]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	4960      	ldr	r1, [pc, #384]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80069b0:	4b5e      	ldr	r3, [pc, #376]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	021b      	lsls	r3, r3, #8
 80069be:	495b      	ldr	r1, [pc, #364]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d109      	bne.n	80069de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fd84 	bl	80074dc <RCC_SetFlashLatencyFromMSIRange>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e380      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80069de:	f000 fc87 	bl	80072f0 <HAL_RCC_GetSysClockFreq>
 80069e2:	4602      	mov	r2, r0
 80069e4:	4b51      	ldr	r3, [pc, #324]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	091b      	lsrs	r3, r3, #4
 80069ea:	f003 030f 	and.w	r3, r3, #15
 80069ee:	4950      	ldr	r1, [pc, #320]	@ (8006b30 <HAL_RCC_OscConfig+0x274>)
 80069f0:	5ccb      	ldrb	r3, [r1, r3]
 80069f2:	f003 031f 	and.w	r3, r3, #31
 80069f6:	fa22 f303 	lsr.w	r3, r2, r3
 80069fa:	4a4e      	ldr	r2, [pc, #312]	@ (8006b34 <HAL_RCC_OscConfig+0x278>)
 80069fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80069fe:	4b4e      	ldr	r3, [pc, #312]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fb fac6 	bl	8001f94 <HAL_InitTick>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d052      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
 8006a14:	e364      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d032      	beq.n	8006a84 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006a1e:	4b43      	ldr	r3, [pc, #268]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a42      	ldr	r2, [pc, #264]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006a24:	f043 0301 	orr.w	r3, r3, #1
 8006a28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006a2a:	f7fc fc3b 	bl	80032a4 <HAL_GetTick>
 8006a2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006a30:	e008      	b.n	8006a44 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006a32:	f7fc fc37 	bl	80032a4 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d901      	bls.n	8006a44 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e34d      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006a44:	4b39      	ldr	r3, [pc, #228]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0f0      	beq.n	8006a32 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a50:	4b36      	ldr	r3, [pc, #216]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a35      	ldr	r2, [pc, #212]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006a56:	f043 0308 	orr.w	r3, r3, #8
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	4b33      	ldr	r3, [pc, #204]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	4930      	ldr	r1, [pc, #192]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	021b      	lsls	r3, r3, #8
 8006a7c:	492b      	ldr	r1, [pc, #172]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	604b      	str	r3, [r1, #4]
 8006a82:	e01a      	b.n	8006aba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006a84:	4b29      	ldr	r3, [pc, #164]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a28      	ldr	r2, [pc, #160]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006a8a:	f023 0301 	bic.w	r3, r3, #1
 8006a8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006a90:	f7fc fc08 	bl	80032a4 <HAL_GetTick>
 8006a94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006a98:	f7fc fc04 	bl	80032a4 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e31a      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006aaa:	4b20      	ldr	r3, [pc, #128]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1f0      	bne.n	8006a98 <HAL_RCC_OscConfig+0x1dc>
 8006ab6:	e000      	b.n	8006aba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006ab8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d073      	beq.n	8006bae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d005      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x21c>
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	2b0c      	cmp	r3, #12
 8006ad0:	d10e      	bne.n	8006af0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d10b      	bne.n	8006af0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ad8:	4b14      	ldr	r3, [pc, #80]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d063      	beq.n	8006bac <HAL_RCC_OscConfig+0x2f0>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d15f      	bne.n	8006bac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e2f7      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006af8:	d106      	bne.n	8006b08 <HAL_RCC_OscConfig+0x24c>
 8006afa:	4b0c      	ldr	r3, [pc, #48]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a0b      	ldr	r2, [pc, #44]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	e025      	b.n	8006b54 <HAL_RCC_OscConfig+0x298>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b10:	d114      	bne.n	8006b3c <HAL_RCC_OscConfig+0x280>
 8006b12:	4b06      	ldr	r3, [pc, #24]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a05      	ldr	r2, [pc, #20]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006b18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b1c:	6013      	str	r3, [r2, #0]
 8006b1e:	4b03      	ldr	r3, [pc, #12]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a02      	ldr	r2, [pc, #8]	@ (8006b2c <HAL_RCC_OscConfig+0x270>)
 8006b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	e013      	b.n	8006b54 <HAL_RCC_OscConfig+0x298>
 8006b2c:	40021000 	.word	0x40021000
 8006b30:	0800cdd8 	.word	0x0800cdd8
 8006b34:	20000000 	.word	0x20000000
 8006b38:	20000004 	.word	0x20000004
 8006b3c:	4ba0      	ldr	r3, [pc, #640]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a9f      	ldr	r2, [pc, #636]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b46:	6013      	str	r3, [r2, #0]
 8006b48:	4b9d      	ldr	r3, [pc, #628]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a9c      	ldr	r2, [pc, #624]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d013      	beq.n	8006b84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5c:	f7fc fba2 	bl	80032a4 <HAL_GetTick>
 8006b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b64:	f7fc fb9e 	bl	80032a4 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b64      	cmp	r3, #100	@ 0x64
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e2b4      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b76:	4b92      	ldr	r3, [pc, #584]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0f0      	beq.n	8006b64 <HAL_RCC_OscConfig+0x2a8>
 8006b82:	e014      	b.n	8006bae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b84:	f7fc fb8e 	bl	80032a4 <HAL_GetTick>
 8006b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b8a:	e008      	b.n	8006b9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b8c:	f7fc fb8a 	bl	80032a4 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b64      	cmp	r3, #100	@ 0x64
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e2a0      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b9e:	4b88      	ldr	r3, [pc, #544]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1f0      	bne.n	8006b8c <HAL_RCC_OscConfig+0x2d0>
 8006baa:	e000      	b.n	8006bae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d060      	beq.n	8006c7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	d005      	beq.n	8006bcc <HAL_RCC_OscConfig+0x310>
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	2b0c      	cmp	r3, #12
 8006bc4:	d119      	bne.n	8006bfa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d116      	bne.n	8006bfa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bcc:	4b7c      	ldr	r3, [pc, #496]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d005      	beq.n	8006be4 <HAL_RCC_OscConfig+0x328>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e27d      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006be4:	4b76      	ldr	r3, [pc, #472]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	061b      	lsls	r3, r3, #24
 8006bf2:	4973      	ldr	r1, [pc, #460]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bf8:	e040      	b.n	8006c7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d023      	beq.n	8006c4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c02:	4b6f      	ldr	r3, [pc, #444]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a6e      	ldr	r2, [pc, #440]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0e:	f7fc fb49 	bl	80032a4 <HAL_GetTick>
 8006c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c14:	e008      	b.n	8006c28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c16:	f7fc fb45 	bl	80032a4 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d901      	bls.n	8006c28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e25b      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c28:	4b65      	ldr	r3, [pc, #404]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0f0      	beq.n	8006c16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c34:	4b62      	ldr	r3, [pc, #392]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	061b      	lsls	r3, r3, #24
 8006c42:	495f      	ldr	r1, [pc, #380]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	604b      	str	r3, [r1, #4]
 8006c48:	e018      	b.n	8006c7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c4a:	4b5d      	ldr	r3, [pc, #372]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a5c      	ldr	r2, [pc, #368]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c56:	f7fc fb25 	bl	80032a4 <HAL_GetTick>
 8006c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c5c:	e008      	b.n	8006c70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c5e:	f7fc fb21 	bl	80032a4 <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d901      	bls.n	8006c70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e237      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c70:	4b53      	ldr	r3, [pc, #332]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1f0      	bne.n	8006c5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0308 	and.w	r3, r3, #8
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d03c      	beq.n	8006d02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d01c      	beq.n	8006cca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c90:	4b4b      	ldr	r3, [pc, #300]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c96:	4a4a      	ldr	r2, [pc, #296]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006c98:	f043 0301 	orr.w	r3, r3, #1
 8006c9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca0:	f7fc fb00 	bl	80032a4 <HAL_GetTick>
 8006ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ca6:	e008      	b.n	8006cba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ca8:	f7fc fafc 	bl	80032a4 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e212      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006cba:	4b41      	ldr	r3, [pc, #260]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0ef      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x3ec>
 8006cc8:	e01b      	b.n	8006d02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cca:	4b3d      	ldr	r3, [pc, #244]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cd0:	4a3b      	ldr	r2, [pc, #236]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006cd2:	f023 0301 	bic.w	r3, r3, #1
 8006cd6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cda:	f7fc fae3 	bl	80032a4 <HAL_GetTick>
 8006cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ce0:	e008      	b.n	8006cf4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ce2:	f7fc fadf 	bl	80032a4 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d901      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e1f5      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006cf4:	4b32      	ldr	r3, [pc, #200]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1ef      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0304 	and.w	r3, r3, #4
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 80a6 	beq.w	8006e5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d10:	2300      	movs	r3, #0
 8006d12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006d14:	4b2a      	ldr	r3, [pc, #168]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10d      	bne.n	8006d3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d20:	4b27      	ldr	r3, [pc, #156]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d24:	4a26      	ldr	r2, [pc, #152]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d2c:	4b24      	ldr	r3, [pc, #144]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d34:	60bb      	str	r3, [r7, #8]
 8006d36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d3c:	4b21      	ldr	r3, [pc, #132]	@ (8006dc4 <HAL_RCC_OscConfig+0x508>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d118      	bne.n	8006d7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d48:	4b1e      	ldr	r3, [pc, #120]	@ (8006dc4 <HAL_RCC_OscConfig+0x508>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8006dc4 <HAL_RCC_OscConfig+0x508>)
 8006d4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d54:	f7fc faa6 	bl	80032a4 <HAL_GetTick>
 8006d58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d5a:	e008      	b.n	8006d6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d5c:	f7fc faa2 	bl	80032a4 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d901      	bls.n	8006d6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e1b8      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d6e:	4b15      	ldr	r3, [pc, #84]	@ (8006dc4 <HAL_RCC_OscConfig+0x508>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0f0      	beq.n	8006d5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d108      	bne.n	8006d94 <HAL_RCC_OscConfig+0x4d8>
 8006d82:	4b0f      	ldr	r3, [pc, #60]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d88:	4a0d      	ldr	r2, [pc, #52]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006d8a:	f043 0301 	orr.w	r3, r3, #1
 8006d8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d92:	e029      	b.n	8006de8 <HAL_RCC_OscConfig+0x52c>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	2b05      	cmp	r3, #5
 8006d9a:	d115      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x50c>
 8006d9c:	4b08      	ldr	r3, [pc, #32]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006da2:	4a07      	ldr	r2, [pc, #28]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006da4:	f043 0304 	orr.w	r3, r3, #4
 8006da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006dac:	4b04      	ldr	r3, [pc, #16]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006db2:	4a03      	ldr	r2, [pc, #12]	@ (8006dc0 <HAL_RCC_OscConfig+0x504>)
 8006db4:	f043 0301 	orr.w	r3, r3, #1
 8006db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006dbc:	e014      	b.n	8006de8 <HAL_RCC_OscConfig+0x52c>
 8006dbe:	bf00      	nop
 8006dc0:	40021000 	.word	0x40021000
 8006dc4:	40007000 	.word	0x40007000
 8006dc8:	4b9d      	ldr	r3, [pc, #628]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dce:	4a9c      	ldr	r2, [pc, #624]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006dd0:	f023 0301 	bic.w	r3, r3, #1
 8006dd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006dd8:	4b99      	ldr	r3, [pc, #612]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dde:	4a98      	ldr	r2, [pc, #608]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006de0:	f023 0304 	bic.w	r3, r3, #4
 8006de4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d016      	beq.n	8006e1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006df0:	f7fc fa58 	bl	80032a4 <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006df6:	e00a      	b.n	8006e0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006df8:	f7fc fa54 	bl	80032a4 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e168      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e0e:	4b8c      	ldr	r3, [pc, #560]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e14:	f003 0302 	and.w	r3, r3, #2
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d0ed      	beq.n	8006df8 <HAL_RCC_OscConfig+0x53c>
 8006e1c:	e015      	b.n	8006e4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e1e:	f7fc fa41 	bl	80032a4 <HAL_GetTick>
 8006e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e24:	e00a      	b.n	8006e3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e26:	f7fc fa3d 	bl	80032a4 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d901      	bls.n	8006e3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e151      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e3c:	4b80      	ldr	r3, [pc, #512]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1ed      	bne.n	8006e26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e4a:	7ffb      	ldrb	r3, [r7, #31]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d105      	bne.n	8006e5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e50:	4b7b      	ldr	r3, [pc, #492]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e54:	4a7a      	ldr	r2, [pc, #488]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e5a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0320 	and.w	r3, r3, #32
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d03c      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01c      	beq.n	8006eaa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e70:	4b73      	ldr	r3, [pc, #460]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006e72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e76:	4a72      	ldr	r2, [pc, #456]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006e78:	f043 0301 	orr.w	r3, r3, #1
 8006e7c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e80:	f7fc fa10 	bl	80032a4 <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e88:	f7fc fa0c 	bl	80032a4 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e122      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e9a:	4b69      	ldr	r3, [pc, #420]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006e9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d0ef      	beq.n	8006e88 <HAL_RCC_OscConfig+0x5cc>
 8006ea8:	e01b      	b.n	8006ee2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006eaa:	4b65      	ldr	r3, [pc, #404]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006eac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006eb0:	4a63      	ldr	r2, [pc, #396]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006eb2:	f023 0301 	bic.w	r3, r3, #1
 8006eb6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eba:	f7fc f9f3 	bl	80032a4 <HAL_GetTick>
 8006ebe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ec0:	e008      	b.n	8006ed4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ec2:	f7fc f9ef 	bl	80032a4 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e105      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ed4:	4b5a      	ldr	r3, [pc, #360]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1ef      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 80f9 	beq.w	80070de <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	f040 80cf 	bne.w	8007094 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006ef6:	4b52      	ldr	r3, [pc, #328]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f003 0203 	and.w	r2, r3, #3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d12c      	bne.n	8006f64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f14:	3b01      	subs	r3, #1
 8006f16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d123      	bne.n	8006f64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d11b      	bne.n	8006f64 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f36:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d113      	bne.n	8006f64 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f46:	085b      	lsrs	r3, r3, #1
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d109      	bne.n	8006f64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5a:	085b      	lsrs	r3, r3, #1
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d071      	beq.n	8007048 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	2b0c      	cmp	r3, #12
 8006f68:	d068      	beq.n	800703c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006f6a:	4b35      	ldr	r3, [pc, #212]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d105      	bne.n	8006f82 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006f76:	4b32      	ldr	r3, [pc, #200]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e0ac      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006f86:	4b2e      	ldr	r3, [pc, #184]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a2d      	ldr	r2, [pc, #180]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006f8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f90:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006f92:	f7fc f987 	bl	80032a4 <HAL_GetTick>
 8006f96:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f98:	e008      	b.n	8006fac <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f9a:	f7fc f983 	bl	80032a4 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d901      	bls.n	8006fac <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e099      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fac:	4b24      	ldr	r3, [pc, #144]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1f0      	bne.n	8006f9a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006fb8:	4b21      	ldr	r3, [pc, #132]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006fba:	68da      	ldr	r2, [r3, #12]
 8006fbc:	4b21      	ldr	r3, [pc, #132]	@ (8007044 <HAL_RCC_OscConfig+0x788>)
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006fc8:	3a01      	subs	r2, #1
 8006fca:	0112      	lsls	r2, r2, #4
 8006fcc:	4311      	orrs	r1, r2
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006fd2:	0212      	lsls	r2, r2, #8
 8006fd4:	4311      	orrs	r1, r2
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006fda:	0852      	lsrs	r2, r2, #1
 8006fdc:	3a01      	subs	r2, #1
 8006fde:	0552      	lsls	r2, r2, #21
 8006fe0:	4311      	orrs	r1, r2
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006fe6:	0852      	lsrs	r2, r2, #1
 8006fe8:	3a01      	subs	r2, #1
 8006fea:	0652      	lsls	r2, r2, #25
 8006fec:	4311      	orrs	r1, r2
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006ff2:	06d2      	lsls	r2, r2, #27
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	4912      	ldr	r1, [pc, #72]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006ffc:	4b10      	ldr	r3, [pc, #64]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a0f      	ldr	r2, [pc, #60]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8007002:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007006:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007008:	4b0d      	ldr	r3, [pc, #52]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	4a0c      	ldr	r2, [pc, #48]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 800700e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007012:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007014:	f7fc f946 	bl	80032a4 <HAL_GetTick>
 8007018:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800701a:	e008      	b.n	800702e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800701c:	f7fc f942 	bl	80032a4 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	2b02      	cmp	r3, #2
 8007028:	d901      	bls.n	800702e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e058      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800702e:	4b04      	ldr	r3, [pc, #16]	@ (8007040 <HAL_RCC_OscConfig+0x784>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0f0      	beq.n	800701c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800703a:	e050      	b.n	80070de <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e04f      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
 8007040:	40021000 	.word	0x40021000
 8007044:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007048:	4b27      	ldr	r3, [pc, #156]	@ (80070e8 <HAL_RCC_OscConfig+0x82c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d144      	bne.n	80070de <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007054:	4b24      	ldr	r3, [pc, #144]	@ (80070e8 <HAL_RCC_OscConfig+0x82c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a23      	ldr	r2, [pc, #140]	@ (80070e8 <HAL_RCC_OscConfig+0x82c>)
 800705a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800705e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007060:	4b21      	ldr	r3, [pc, #132]	@ (80070e8 <HAL_RCC_OscConfig+0x82c>)
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	4a20      	ldr	r2, [pc, #128]	@ (80070e8 <HAL_RCC_OscConfig+0x82c>)
 8007066:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800706a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800706c:	f7fc f91a 	bl	80032a4 <HAL_GetTick>
 8007070:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007072:	e008      	b.n	8007086 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007074:	f7fc f916 	bl	80032a4 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	2b02      	cmp	r3, #2
 8007080:	d901      	bls.n	8007086 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e02c      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007086:	4b18      	ldr	r3, [pc, #96]	@ (80070e8 <HAL_RCC_OscConfig+0x82c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0f0      	beq.n	8007074 <HAL_RCC_OscConfig+0x7b8>
 8007092:	e024      	b.n	80070de <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	2b0c      	cmp	r3, #12
 8007098:	d01f      	beq.n	80070da <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800709a:	4b13      	ldr	r3, [pc, #76]	@ (80070e8 <HAL_RCC_OscConfig+0x82c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a12      	ldr	r2, [pc, #72]	@ (80070e8 <HAL_RCC_OscConfig+0x82c>)
 80070a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a6:	f7fc f8fd 	bl	80032a4 <HAL_GetTick>
 80070aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070ac:	e008      	b.n	80070c0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ae:	f7fc f8f9 	bl	80032a4 <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d901      	bls.n	80070c0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e00f      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070c0:	4b09      	ldr	r3, [pc, #36]	@ (80070e8 <HAL_RCC_OscConfig+0x82c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1f0      	bne.n	80070ae <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80070cc:	4b06      	ldr	r3, [pc, #24]	@ (80070e8 <HAL_RCC_OscConfig+0x82c>)
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	4905      	ldr	r1, [pc, #20]	@ (80070e8 <HAL_RCC_OscConfig+0x82c>)
 80070d2:	4b06      	ldr	r3, [pc, #24]	@ (80070ec <HAL_RCC_OscConfig+0x830>)
 80070d4:	4013      	ands	r3, r2
 80070d6:	60cb      	str	r3, [r1, #12]
 80070d8:	e001      	b.n	80070de <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3720      	adds	r7, #32
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	40021000 	.word	0x40021000
 80070ec:	feeefffc 	.word	0xfeeefffc

080070f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e0e7      	b.n	80072d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007104:	4b75      	ldr	r3, [pc, #468]	@ (80072dc <HAL_RCC_ClockConfig+0x1ec>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0307 	and.w	r3, r3, #7
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	429a      	cmp	r2, r3
 8007110:	d910      	bls.n	8007134 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007112:	4b72      	ldr	r3, [pc, #456]	@ (80072dc <HAL_RCC_ClockConfig+0x1ec>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f023 0207 	bic.w	r2, r3, #7
 800711a:	4970      	ldr	r1, [pc, #448]	@ (80072dc <HAL_RCC_ClockConfig+0x1ec>)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	4313      	orrs	r3, r2
 8007120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007122:	4b6e      	ldr	r3, [pc, #440]	@ (80072dc <HAL_RCC_ClockConfig+0x1ec>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	429a      	cmp	r2, r3
 800712e:	d001      	beq.n	8007134 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e0cf      	b.n	80072d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0302 	and.w	r3, r3, #2
 800713c:	2b00      	cmp	r3, #0
 800713e:	d010      	beq.n	8007162 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689a      	ldr	r2, [r3, #8]
 8007144:	4b66      	ldr	r3, [pc, #408]	@ (80072e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800714c:	429a      	cmp	r2, r3
 800714e:	d908      	bls.n	8007162 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007150:	4b63      	ldr	r3, [pc, #396]	@ (80072e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	4960      	ldr	r1, [pc, #384]	@ (80072e0 <HAL_RCC_ClockConfig+0x1f0>)
 800715e:	4313      	orrs	r3, r2
 8007160:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	d04c      	beq.n	8007208 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2b03      	cmp	r3, #3
 8007174:	d107      	bne.n	8007186 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007176:	4b5a      	ldr	r3, [pc, #360]	@ (80072e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d121      	bne.n	80071c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e0a6      	b.n	80072d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	2b02      	cmp	r3, #2
 800718c:	d107      	bne.n	800719e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800718e:	4b54      	ldr	r3, [pc, #336]	@ (80072e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d115      	bne.n	80071c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e09a      	b.n	80072d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d107      	bne.n	80071b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80071a6:	4b4e      	ldr	r3, [pc, #312]	@ (80072e0 <HAL_RCC_ClockConfig+0x1f0>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d109      	bne.n	80071c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e08e      	b.n	80072d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071b6:	4b4a      	ldr	r3, [pc, #296]	@ (80072e0 <HAL_RCC_ClockConfig+0x1f0>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e086      	b.n	80072d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071c6:	4b46      	ldr	r3, [pc, #280]	@ (80072e0 <HAL_RCC_ClockConfig+0x1f0>)
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f023 0203 	bic.w	r2, r3, #3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	4943      	ldr	r1, [pc, #268]	@ (80072e0 <HAL_RCC_ClockConfig+0x1f0>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071d8:	f7fc f864 	bl	80032a4 <HAL_GetTick>
 80071dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071de:	e00a      	b.n	80071f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071e0:	f7fc f860 	bl	80032a4 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d901      	bls.n	80071f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e06e      	b.n	80072d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071f6:	4b3a      	ldr	r3, [pc, #232]	@ (80072e0 <HAL_RCC_ClockConfig+0x1f0>)
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 020c 	and.w	r2, r3, #12
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	429a      	cmp	r2, r3
 8007206:	d1eb      	bne.n	80071e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d010      	beq.n	8007236 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	4b31      	ldr	r3, [pc, #196]	@ (80072e0 <HAL_RCC_ClockConfig+0x1f0>)
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007220:	429a      	cmp	r2, r3
 8007222:	d208      	bcs.n	8007236 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007224:	4b2e      	ldr	r3, [pc, #184]	@ (80072e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	492b      	ldr	r1, [pc, #172]	@ (80072e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007232:	4313      	orrs	r3, r2
 8007234:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007236:	4b29      	ldr	r3, [pc, #164]	@ (80072dc <HAL_RCC_ClockConfig+0x1ec>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0307 	and.w	r3, r3, #7
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	429a      	cmp	r2, r3
 8007242:	d210      	bcs.n	8007266 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007244:	4b25      	ldr	r3, [pc, #148]	@ (80072dc <HAL_RCC_ClockConfig+0x1ec>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f023 0207 	bic.w	r2, r3, #7
 800724c:	4923      	ldr	r1, [pc, #140]	@ (80072dc <HAL_RCC_ClockConfig+0x1ec>)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	4313      	orrs	r3, r2
 8007252:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007254:	4b21      	ldr	r3, [pc, #132]	@ (80072dc <HAL_RCC_ClockConfig+0x1ec>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0307 	and.w	r3, r3, #7
 800725c:	683a      	ldr	r2, [r7, #0]
 800725e:	429a      	cmp	r2, r3
 8007260:	d001      	beq.n	8007266 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e036      	b.n	80072d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0304 	and.w	r3, r3, #4
 800726e:	2b00      	cmp	r3, #0
 8007270:	d008      	beq.n	8007284 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007272:	4b1b      	ldr	r3, [pc, #108]	@ (80072e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	4918      	ldr	r1, [pc, #96]	@ (80072e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007280:	4313      	orrs	r3, r2
 8007282:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0308 	and.w	r3, r3, #8
 800728c:	2b00      	cmp	r3, #0
 800728e:	d009      	beq.n	80072a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007290:	4b13      	ldr	r3, [pc, #76]	@ (80072e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	4910      	ldr	r1, [pc, #64]	@ (80072e0 <HAL_RCC_ClockConfig+0x1f0>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80072a4:	f000 f824 	bl	80072f0 <HAL_RCC_GetSysClockFreq>
 80072a8:	4602      	mov	r2, r0
 80072aa:	4b0d      	ldr	r3, [pc, #52]	@ (80072e0 <HAL_RCC_ClockConfig+0x1f0>)
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	091b      	lsrs	r3, r3, #4
 80072b0:	f003 030f 	and.w	r3, r3, #15
 80072b4:	490b      	ldr	r1, [pc, #44]	@ (80072e4 <HAL_RCC_ClockConfig+0x1f4>)
 80072b6:	5ccb      	ldrb	r3, [r1, r3]
 80072b8:	f003 031f 	and.w	r3, r3, #31
 80072bc:	fa22 f303 	lsr.w	r3, r2, r3
 80072c0:	4a09      	ldr	r2, [pc, #36]	@ (80072e8 <HAL_RCC_ClockConfig+0x1f8>)
 80072c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80072c4:	4b09      	ldr	r3, [pc, #36]	@ (80072ec <HAL_RCC_ClockConfig+0x1fc>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7fa fe63 	bl	8001f94 <HAL_InitTick>
 80072ce:	4603      	mov	r3, r0
 80072d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80072d2:	7afb      	ldrb	r3, [r7, #11]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	40022000 	.word	0x40022000
 80072e0:	40021000 	.word	0x40021000
 80072e4:	0800cdd8 	.word	0x0800cdd8
 80072e8:	20000000 	.word	0x20000000
 80072ec:	20000004 	.word	0x20000004

080072f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b089      	sub	sp, #36	@ 0x24
 80072f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	61fb      	str	r3, [r7, #28]
 80072fa:	2300      	movs	r3, #0
 80072fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072fe:	4b3e      	ldr	r3, [pc, #248]	@ (80073f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f003 030c 	and.w	r3, r3, #12
 8007306:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007308:	4b3b      	ldr	r3, [pc, #236]	@ (80073f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	f003 0303 	and.w	r3, r3, #3
 8007310:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d005      	beq.n	8007324 <HAL_RCC_GetSysClockFreq+0x34>
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	2b0c      	cmp	r3, #12
 800731c:	d121      	bne.n	8007362 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d11e      	bne.n	8007362 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007324:	4b34      	ldr	r3, [pc, #208]	@ (80073f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0308 	and.w	r3, r3, #8
 800732c:	2b00      	cmp	r3, #0
 800732e:	d107      	bne.n	8007340 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007330:	4b31      	ldr	r3, [pc, #196]	@ (80073f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007336:	0a1b      	lsrs	r3, r3, #8
 8007338:	f003 030f 	and.w	r3, r3, #15
 800733c:	61fb      	str	r3, [r7, #28]
 800733e:	e005      	b.n	800734c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007340:	4b2d      	ldr	r3, [pc, #180]	@ (80073f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	091b      	lsrs	r3, r3, #4
 8007346:	f003 030f 	and.w	r3, r3, #15
 800734a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800734c:	4a2b      	ldr	r2, [pc, #172]	@ (80073fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007354:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10d      	bne.n	8007378 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007360:	e00a      	b.n	8007378 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	2b04      	cmp	r3, #4
 8007366:	d102      	bne.n	800736e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007368:	4b25      	ldr	r3, [pc, #148]	@ (8007400 <HAL_RCC_GetSysClockFreq+0x110>)
 800736a:	61bb      	str	r3, [r7, #24]
 800736c:	e004      	b.n	8007378 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	2b08      	cmp	r3, #8
 8007372:	d101      	bne.n	8007378 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007374:	4b23      	ldr	r3, [pc, #140]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x114>)
 8007376:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	2b0c      	cmp	r3, #12
 800737c:	d134      	bne.n	80073e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800737e:	4b1e      	ldr	r3, [pc, #120]	@ (80073f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	f003 0303 	and.w	r3, r3, #3
 8007386:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	2b02      	cmp	r3, #2
 800738c:	d003      	beq.n	8007396 <HAL_RCC_GetSysClockFreq+0xa6>
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b03      	cmp	r3, #3
 8007392:	d003      	beq.n	800739c <HAL_RCC_GetSysClockFreq+0xac>
 8007394:	e005      	b.n	80073a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007396:	4b1a      	ldr	r3, [pc, #104]	@ (8007400 <HAL_RCC_GetSysClockFreq+0x110>)
 8007398:	617b      	str	r3, [r7, #20]
      break;
 800739a:	e005      	b.n	80073a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800739c:	4b19      	ldr	r3, [pc, #100]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x114>)
 800739e:	617b      	str	r3, [r7, #20]
      break;
 80073a0:	e002      	b.n	80073a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	617b      	str	r3, [r7, #20]
      break;
 80073a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80073a8:	4b13      	ldr	r3, [pc, #76]	@ (80073f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	091b      	lsrs	r3, r3, #4
 80073ae:	f003 0307 	and.w	r3, r3, #7
 80073b2:	3301      	adds	r3, #1
 80073b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80073b6:	4b10      	ldr	r3, [pc, #64]	@ (80073f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	0a1b      	lsrs	r3, r3, #8
 80073bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	fb03 f202 	mul.w	r2, r3, r2
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80073ce:	4b0a      	ldr	r3, [pc, #40]	@ (80073f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	0e5b      	lsrs	r3, r3, #25
 80073d4:	f003 0303 	and.w	r3, r3, #3
 80073d8:	3301      	adds	r3, #1
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80073e8:	69bb      	ldr	r3, [r7, #24]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3724      	adds	r7, #36	@ 0x24
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	40021000 	.word	0x40021000
 80073fc:	0800cdf0 	.word	0x0800cdf0
 8007400:	00f42400 	.word	0x00f42400
 8007404:	007a1200 	.word	0x007a1200

08007408 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007408:	b480      	push	{r7}
 800740a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800740c:	4b03      	ldr	r3, [pc, #12]	@ (800741c <HAL_RCC_GetHCLKFreq+0x14>)
 800740e:	681b      	ldr	r3, [r3, #0]
}
 8007410:	4618      	mov	r0, r3
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	20000000 	.word	0x20000000

08007420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007424:	f7ff fff0 	bl	8007408 <HAL_RCC_GetHCLKFreq>
 8007428:	4602      	mov	r2, r0
 800742a:	4b06      	ldr	r3, [pc, #24]	@ (8007444 <HAL_RCC_GetPCLK1Freq+0x24>)
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	0a1b      	lsrs	r3, r3, #8
 8007430:	f003 0307 	and.w	r3, r3, #7
 8007434:	4904      	ldr	r1, [pc, #16]	@ (8007448 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007436:	5ccb      	ldrb	r3, [r1, r3]
 8007438:	f003 031f 	and.w	r3, r3, #31
 800743c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007440:	4618      	mov	r0, r3
 8007442:	bd80      	pop	{r7, pc}
 8007444:	40021000 	.word	0x40021000
 8007448:	0800cde8 	.word	0x0800cde8

0800744c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007450:	f7ff ffda 	bl	8007408 <HAL_RCC_GetHCLKFreq>
 8007454:	4602      	mov	r2, r0
 8007456:	4b06      	ldr	r3, [pc, #24]	@ (8007470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	0adb      	lsrs	r3, r3, #11
 800745c:	f003 0307 	and.w	r3, r3, #7
 8007460:	4904      	ldr	r1, [pc, #16]	@ (8007474 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007462:	5ccb      	ldrb	r3, [r1, r3]
 8007464:	f003 031f 	and.w	r3, r3, #31
 8007468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800746c:	4618      	mov	r0, r3
 800746e:	bd80      	pop	{r7, pc}
 8007470:	40021000 	.word	0x40021000
 8007474:	0800cde8 	.word	0x0800cde8

08007478 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	220f      	movs	r2, #15
 8007486:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007488:	4b12      	ldr	r3, [pc, #72]	@ (80074d4 <HAL_RCC_GetClockConfig+0x5c>)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f003 0203 	and.w	r2, r3, #3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007494:	4b0f      	ldr	r3, [pc, #60]	@ (80074d4 <HAL_RCC_GetClockConfig+0x5c>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80074a0:	4b0c      	ldr	r3, [pc, #48]	@ (80074d4 <HAL_RCC_GetClockConfig+0x5c>)
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80074ac:	4b09      	ldr	r3, [pc, #36]	@ (80074d4 <HAL_RCC_GetClockConfig+0x5c>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	08db      	lsrs	r3, r3, #3
 80074b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80074ba:	4b07      	ldr	r3, [pc, #28]	@ (80074d8 <HAL_RCC_GetClockConfig+0x60>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0207 	and.w	r2, r3, #7
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	601a      	str	r2, [r3, #0]
}
 80074c6:	bf00      	nop
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	40021000 	.word	0x40021000
 80074d8:	40022000 	.word	0x40022000

080074dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80074e4:	2300      	movs	r3, #0
 80074e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80074e8:	4b2a      	ldr	r3, [pc, #168]	@ (8007594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80074ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d003      	beq.n	80074fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80074f4:	f7ff f97e 	bl	80067f4 <HAL_PWREx_GetVoltageRange>
 80074f8:	6178      	str	r0, [r7, #20]
 80074fa:	e014      	b.n	8007526 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80074fc:	4b25      	ldr	r3, [pc, #148]	@ (8007594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80074fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007500:	4a24      	ldr	r2, [pc, #144]	@ (8007594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007506:	6593      	str	r3, [r2, #88]	@ 0x58
 8007508:	4b22      	ldr	r3, [pc, #136]	@ (8007594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800750a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800750c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007510:	60fb      	str	r3, [r7, #12]
 8007512:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007514:	f7ff f96e 	bl	80067f4 <HAL_PWREx_GetVoltageRange>
 8007518:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800751a:	4b1e      	ldr	r3, [pc, #120]	@ (8007594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800751c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800751e:	4a1d      	ldr	r2, [pc, #116]	@ (8007594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007520:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007524:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800752c:	d10b      	bne.n	8007546 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b80      	cmp	r3, #128	@ 0x80
 8007532:	d919      	bls.n	8007568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2ba0      	cmp	r3, #160	@ 0xa0
 8007538:	d902      	bls.n	8007540 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800753a:	2302      	movs	r3, #2
 800753c:	613b      	str	r3, [r7, #16]
 800753e:	e013      	b.n	8007568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007540:	2301      	movs	r3, #1
 8007542:	613b      	str	r3, [r7, #16]
 8007544:	e010      	b.n	8007568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b80      	cmp	r3, #128	@ 0x80
 800754a:	d902      	bls.n	8007552 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800754c:	2303      	movs	r3, #3
 800754e:	613b      	str	r3, [r7, #16]
 8007550:	e00a      	b.n	8007568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b80      	cmp	r3, #128	@ 0x80
 8007556:	d102      	bne.n	800755e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007558:	2302      	movs	r3, #2
 800755a:	613b      	str	r3, [r7, #16]
 800755c:	e004      	b.n	8007568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b70      	cmp	r3, #112	@ 0x70
 8007562:	d101      	bne.n	8007568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007564:	2301      	movs	r3, #1
 8007566:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007568:	4b0b      	ldr	r3, [pc, #44]	@ (8007598 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f023 0207 	bic.w	r2, r3, #7
 8007570:	4909      	ldr	r1, [pc, #36]	@ (8007598 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	4313      	orrs	r3, r2
 8007576:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007578:	4b07      	ldr	r3, [pc, #28]	@ (8007598 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0307 	and.w	r3, r3, #7
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	429a      	cmp	r2, r3
 8007584:	d001      	beq.n	800758a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e000      	b.n	800758c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3718      	adds	r7, #24
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	40021000 	.word	0x40021000
 8007598:	40022000 	.word	0x40022000

0800759c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80075a4:	2300      	movs	r3, #0
 80075a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80075a8:	2300      	movs	r3, #0
 80075aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d041      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80075c0:	d02a      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80075c2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80075c6:	d824      	bhi.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80075c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80075cc:	d008      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80075ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80075d2:	d81e      	bhi.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00a      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80075d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075dc:	d010      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80075de:	e018      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80075e0:	4b86      	ldr	r3, [pc, #536]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	4a85      	ldr	r2, [pc, #532]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80075ec:	e015      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	3304      	adds	r3, #4
 80075f2:	2100      	movs	r1, #0
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 facd 	bl	8007b94 <RCCEx_PLLSAI1_Config>
 80075fa:	4603      	mov	r3, r0
 80075fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80075fe:	e00c      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3320      	adds	r3, #32
 8007604:	2100      	movs	r1, #0
 8007606:	4618      	mov	r0, r3
 8007608:	f000 fbb6 	bl	8007d78 <RCCEx_PLLSAI2_Config>
 800760c:	4603      	mov	r3, r0
 800760e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007610:	e003      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	74fb      	strb	r3, [r7, #19]
      break;
 8007616:	e000      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800761a:	7cfb      	ldrb	r3, [r7, #19]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10b      	bne.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007620:	4b76      	ldr	r3, [pc, #472]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007626:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800762e:	4973      	ldr	r1, [pc, #460]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007630:	4313      	orrs	r3, r2
 8007632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007636:	e001      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007638:	7cfb      	ldrb	r3, [r7, #19]
 800763a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d041      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800764c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007650:	d02a      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007652:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007656:	d824      	bhi.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007658:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800765c:	d008      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800765e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007662:	d81e      	bhi.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00a      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007668:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800766c:	d010      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800766e:	e018      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007670:	4b62      	ldr	r3, [pc, #392]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	4a61      	ldr	r2, [pc, #388]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007676:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800767a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800767c:	e015      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	3304      	adds	r3, #4
 8007682:	2100      	movs	r1, #0
 8007684:	4618      	mov	r0, r3
 8007686:	f000 fa85 	bl	8007b94 <RCCEx_PLLSAI1_Config>
 800768a:	4603      	mov	r3, r0
 800768c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800768e:	e00c      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3320      	adds	r3, #32
 8007694:	2100      	movs	r1, #0
 8007696:	4618      	mov	r0, r3
 8007698:	f000 fb6e 	bl	8007d78 <RCCEx_PLLSAI2_Config>
 800769c:	4603      	mov	r3, r0
 800769e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80076a0:	e003      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	74fb      	strb	r3, [r7, #19]
      break;
 80076a6:	e000      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80076a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076aa:	7cfb      	ldrb	r3, [r7, #19]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10b      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80076b0:	4b52      	ldr	r3, [pc, #328]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076be:	494f      	ldr	r1, [pc, #316]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80076c6:	e001      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c8:	7cfb      	ldrb	r3, [r7, #19]
 80076ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 80a0 	beq.w	800781a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076da:	2300      	movs	r3, #0
 80076dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80076de:	4b47      	ldr	r3, [pc, #284]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e000      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80076ee:	2300      	movs	r3, #0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00d      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076f4:	4b41      	ldr	r3, [pc, #260]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076f8:	4a40      	ldr	r2, [pc, #256]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8007700:	4b3e      	ldr	r3, [pc, #248]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007708:	60bb      	str	r3, [r7, #8]
 800770a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800770c:	2301      	movs	r3, #1
 800770e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007710:	4b3b      	ldr	r3, [pc, #236]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a3a      	ldr	r2, [pc, #232]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800771a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800771c:	f7fb fdc2 	bl	80032a4 <HAL_GetTick>
 8007720:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007722:	e009      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007724:	f7fb fdbe 	bl	80032a4 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	2b02      	cmp	r3, #2
 8007730:	d902      	bls.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	74fb      	strb	r3, [r7, #19]
        break;
 8007736:	e005      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007738:	4b31      	ldr	r3, [pc, #196]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007740:	2b00      	cmp	r3, #0
 8007742:	d0ef      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007744:	7cfb      	ldrb	r3, [r7, #19]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d15c      	bne.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800774a:	4b2c      	ldr	r3, [pc, #176]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800774c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007750:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007754:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d01f      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	429a      	cmp	r2, r3
 8007766:	d019      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007768:	4b24      	ldr	r3, [pc, #144]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800776a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800776e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007772:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007774:	4b21      	ldr	r3, [pc, #132]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800777a:	4a20      	ldr	r2, [pc, #128]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800777c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007784:	4b1d      	ldr	r3, [pc, #116]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800778a:	4a1c      	ldr	r2, [pc, #112]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800778c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007794:	4a19      	ldr	r2, [pc, #100]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d016      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a6:	f7fb fd7d 	bl	80032a4 <HAL_GetTick>
 80077aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077ac:	e00b      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077ae:	f7fb fd79 	bl	80032a4 <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077bc:	4293      	cmp	r3, r2
 80077be:	d902      	bls.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	74fb      	strb	r3, [r7, #19]
            break;
 80077c4:	e006      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077c6:	4b0d      	ldr	r3, [pc, #52]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d0ec      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80077d4:	7cfb      	ldrb	r3, [r7, #19]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10c      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077da:	4b08      	ldr	r3, [pc, #32]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ea:	4904      	ldr	r1, [pc, #16]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80077f2:	e009      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80077f4:	7cfb      	ldrb	r3, [r7, #19]
 80077f6:	74bb      	strb	r3, [r7, #18]
 80077f8:	e006      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80077fa:	bf00      	nop
 80077fc:	40021000 	.word	0x40021000
 8007800:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007804:	7cfb      	ldrb	r3, [r7, #19]
 8007806:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007808:	7c7b      	ldrb	r3, [r7, #17]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d105      	bne.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800780e:	4ba6      	ldr	r3, [pc, #664]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007812:	4aa5      	ldr	r2, [pc, #660]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007814:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007818:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00a      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007826:	4ba0      	ldr	r3, [pc, #640]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800782c:	f023 0203 	bic.w	r2, r3, #3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007834:	499c      	ldr	r1, [pc, #624]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007836:	4313      	orrs	r3, r2
 8007838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00a      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007848:	4b97      	ldr	r3, [pc, #604]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800784a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800784e:	f023 020c 	bic.w	r2, r3, #12
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007856:	4994      	ldr	r1, [pc, #592]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007858:	4313      	orrs	r3, r2
 800785a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0304 	and.w	r3, r3, #4
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800786a:	4b8f      	ldr	r3, [pc, #572]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800786c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007870:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007878:	498b      	ldr	r1, [pc, #556]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800787a:	4313      	orrs	r3, r2
 800787c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0308 	and.w	r3, r3, #8
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00a      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800788c:	4b86      	ldr	r3, [pc, #536]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800788e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007892:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800789a:	4983      	ldr	r1, [pc, #524]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800789c:	4313      	orrs	r3, r2
 800789e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0310 	and.w	r3, r3, #16
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00a      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80078ae:	4b7e      	ldr	r3, [pc, #504]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80078b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078bc:	497a      	ldr	r1, [pc, #488]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0320 	and.w	r3, r3, #32
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00a      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078d0:	4b75      	ldr	r3, [pc, #468]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80078d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078de:	4972      	ldr	r1, [pc, #456]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80078e0:	4313      	orrs	r3, r2
 80078e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00a      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078f2:	4b6d      	ldr	r3, [pc, #436]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80078f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007900:	4969      	ldr	r1, [pc, #420]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007902:	4313      	orrs	r3, r2
 8007904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00a      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007914:	4b64      	ldr	r3, [pc, #400]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800791a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007922:	4961      	ldr	r1, [pc, #388]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007924:	4313      	orrs	r3, r2
 8007926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00a      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007936:	4b5c      	ldr	r3, [pc, #368]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800793c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007944:	4958      	ldr	r1, [pc, #352]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007946:	4313      	orrs	r3, r2
 8007948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00a      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007958:	4b53      	ldr	r3, [pc, #332]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800795a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800795e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007966:	4950      	ldr	r1, [pc, #320]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007968:	4313      	orrs	r3, r2
 800796a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800797a:	4b4b      	ldr	r3, [pc, #300]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800797c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007980:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007988:	4947      	ldr	r1, [pc, #284]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800798a:	4313      	orrs	r3, r2
 800798c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00a      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800799c:	4b42      	ldr	r3, [pc, #264]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800799e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079a2:	f023 0203 	bic.w	r2, r3, #3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079aa:	493f      	ldr	r1, [pc, #252]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80079ac:	4313      	orrs	r3, r2
 80079ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d028      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079be:	4b3a      	ldr	r3, [pc, #232]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80079c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079cc:	4936      	ldr	r1, [pc, #216]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80079ce:	4313      	orrs	r3, r2
 80079d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079dc:	d106      	bne.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079de:	4b32      	ldr	r3, [pc, #200]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	4a31      	ldr	r2, [pc, #196]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80079e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079e8:	60d3      	str	r3, [r2, #12]
 80079ea:	e011      	b.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079f4:	d10c      	bne.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	3304      	adds	r3, #4
 80079fa:	2101      	movs	r1, #1
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 f8c9 	bl	8007b94 <RCCEx_PLLSAI1_Config>
 8007a02:	4603      	mov	r3, r0
 8007a04:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007a06:	7cfb      	ldrb	r3, [r7, #19]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8007a0c:	7cfb      	ldrb	r3, [r7, #19]
 8007a0e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d028      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007a1c:	4b22      	ldr	r3, [pc, #136]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a2a:	491f      	ldr	r1, [pc, #124]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a3a:	d106      	bne.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	4a19      	ldr	r2, [pc, #100]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007a42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a46:	60d3      	str	r3, [r2, #12]
 8007a48:	e011      	b.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a52:	d10c      	bne.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3304      	adds	r3, #4
 8007a58:	2101      	movs	r1, #1
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 f89a 	bl	8007b94 <RCCEx_PLLSAI1_Config>
 8007a60:	4603      	mov	r3, r0
 8007a62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007a64:	7cfb      	ldrb	r3, [r7, #19]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8007a6a:	7cfb      	ldrb	r3, [r7, #19]
 8007a6c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d02a      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a80:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a88:	4907      	ldr	r1, [pc, #28]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a98:	d108      	bne.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a9a:	4b03      	ldr	r3, [pc, #12]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	4a02      	ldr	r2, [pc, #8]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007aa0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007aa4:	60d3      	str	r3, [r2, #12]
 8007aa6:	e013      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8007aa8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ab0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ab4:	d10c      	bne.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3304      	adds	r3, #4
 8007aba:	2101      	movs	r1, #1
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 f869 	bl	8007b94 <RCCEx_PLLSAI1_Config>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ac6:	7cfb      	ldrb	r3, [r7, #19]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8007acc:	7cfb      	ldrb	r3, [r7, #19]
 8007ace:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d02f      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007adc:	4b2c      	ldr	r3, [pc, #176]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ae2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007aea:	4929      	ldr	r1, [pc, #164]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007af6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007afa:	d10d      	bne.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3304      	adds	r3, #4
 8007b00:	2102      	movs	r1, #2
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 f846 	bl	8007b94 <RCCEx_PLLSAI1_Config>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b0c:	7cfb      	ldrb	r3, [r7, #19]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d014      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8007b12:	7cfb      	ldrb	r3, [r7, #19]
 8007b14:	74bb      	strb	r3, [r7, #18]
 8007b16:	e011      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b20:	d10c      	bne.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	3320      	adds	r3, #32
 8007b26:	2102      	movs	r1, #2
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 f925 	bl	8007d78 <RCCEx_PLLSAI2_Config>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b32:	7cfb      	ldrb	r3, [r7, #19]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8007b38:	7cfb      	ldrb	r3, [r7, #19]
 8007b3a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00b      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b48:	4b11      	ldr	r3, [pc, #68]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b4e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b58:	490d      	ldr	r1, [pc, #52]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00b      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b6c:	4b08      	ldr	r3, [pc, #32]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b7c:	4904      	ldr	r1, [pc, #16]	@ (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007b84:	7cbb      	ldrb	r3, [r7, #18]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	40021000 	.word	0x40021000

08007b94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007ba2:	4b74      	ldr	r3, [pc, #464]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	f003 0303 	and.w	r3, r3, #3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d018      	beq.n	8007be0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007bae:	4b71      	ldr	r3, [pc, #452]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	f003 0203 	and.w	r2, r3, #3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d10d      	bne.n	8007bda <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
       ||
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d009      	beq.n	8007bda <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007bc6:	4b6b      	ldr	r3, [pc, #428]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	091b      	lsrs	r3, r3, #4
 8007bcc:	f003 0307 	and.w	r3, r3, #7
 8007bd0:	1c5a      	adds	r2, r3, #1
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
       ||
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d047      	beq.n	8007c6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	73fb      	strb	r3, [r7, #15]
 8007bde:	e044      	b.n	8007c6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	d018      	beq.n	8007c1a <RCCEx_PLLSAI1_Config+0x86>
 8007be8:	2b03      	cmp	r3, #3
 8007bea:	d825      	bhi.n	8007c38 <RCCEx_PLLSAI1_Config+0xa4>
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d002      	beq.n	8007bf6 <RCCEx_PLLSAI1_Config+0x62>
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d009      	beq.n	8007c08 <RCCEx_PLLSAI1_Config+0x74>
 8007bf4:	e020      	b.n	8007c38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007bf6:	4b5f      	ldr	r3, [pc, #380]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d11d      	bne.n	8007c3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c06:	e01a      	b.n	8007c3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007c08:	4b5a      	ldr	r3, [pc, #360]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d116      	bne.n	8007c42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c18:	e013      	b.n	8007c42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007c1a:	4b56      	ldr	r3, [pc, #344]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10f      	bne.n	8007c46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007c26:	4b53      	ldr	r3, [pc, #332]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d109      	bne.n	8007c46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c36:	e006      	b.n	8007c46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c3c:	e004      	b.n	8007c48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007c3e:	bf00      	nop
 8007c40:	e002      	b.n	8007c48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007c42:	bf00      	nop
 8007c44:	e000      	b.n	8007c48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007c46:	bf00      	nop
    }

    if(status == HAL_OK)
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10d      	bne.n	8007c6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007c4e:	4b49      	ldr	r3, [pc, #292]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6819      	ldr	r1, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	011b      	lsls	r3, r3, #4
 8007c62:	430b      	orrs	r3, r1
 8007c64:	4943      	ldr	r1, [pc, #268]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d17c      	bne.n	8007d6a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007c70:	4b40      	ldr	r3, [pc, #256]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a3f      	ldr	r2, [pc, #252]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c7c:	f7fb fb12 	bl	80032a4 <HAL_GetTick>
 8007c80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c82:	e009      	b.n	8007c98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c84:	f7fb fb0e 	bl	80032a4 <HAL_GetTick>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d902      	bls.n	8007c98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	73fb      	strb	r3, [r7, #15]
        break;
 8007c96:	e005      	b.n	8007ca4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c98:	4b36      	ldr	r3, [pc, #216]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1ef      	bne.n	8007c84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d15f      	bne.n	8007d6a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d110      	bne.n	8007cd2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007cb0:	4b30      	ldr	r3, [pc, #192]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007cb8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	6892      	ldr	r2, [r2, #8]
 8007cc0:	0211      	lsls	r1, r2, #8
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	68d2      	ldr	r2, [r2, #12]
 8007cc6:	06d2      	lsls	r2, r2, #27
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	492a      	ldr	r1, [pc, #168]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	610b      	str	r3, [r1, #16]
 8007cd0:	e027      	b.n	8007d22 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d112      	bne.n	8007cfe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007cd8:	4b26      	ldr	r3, [pc, #152]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007ce0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	6892      	ldr	r2, [r2, #8]
 8007ce8:	0211      	lsls	r1, r2, #8
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	6912      	ldr	r2, [r2, #16]
 8007cee:	0852      	lsrs	r2, r2, #1
 8007cf0:	3a01      	subs	r2, #1
 8007cf2:	0552      	lsls	r2, r2, #21
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	491f      	ldr	r1, [pc, #124]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	610b      	str	r3, [r1, #16]
 8007cfc:	e011      	b.n	8007d22 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007d06:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	6892      	ldr	r2, [r2, #8]
 8007d0e:	0211      	lsls	r1, r2, #8
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	6952      	ldr	r2, [r2, #20]
 8007d14:	0852      	lsrs	r2, r2, #1
 8007d16:	3a01      	subs	r2, #1
 8007d18:	0652      	lsls	r2, r2, #25
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	4915      	ldr	r1, [pc, #84]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007d22:	4b14      	ldr	r3, [pc, #80]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a13      	ldr	r2, [pc, #76]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d2c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d2e:	f7fb fab9 	bl	80032a4 <HAL_GetTick>
 8007d32:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007d34:	e009      	b.n	8007d4a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007d36:	f7fb fab5 	bl	80032a4 <HAL_GetTick>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d902      	bls.n	8007d4a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	73fb      	strb	r3, [r7, #15]
          break;
 8007d48:	e005      	b.n	8007d56 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d0ef      	beq.n	8007d36 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007d56:	7bfb      	ldrb	r3, [r7, #15]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d106      	bne.n	8007d6a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007d5c:	4b05      	ldr	r3, [pc, #20]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d5e:	691a      	ldr	r2, [r3, #16]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	4903      	ldr	r1, [pc, #12]	@ (8007d74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	40021000 	.word	0x40021000

08007d78 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007d86:	4b69      	ldr	r3, [pc, #420]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	f003 0303 	and.w	r3, r3, #3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d018      	beq.n	8007dc4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007d92:	4b66      	ldr	r3, [pc, #408]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f003 0203 	and.w	r2, r3, #3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d10d      	bne.n	8007dbe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
       ||
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d009      	beq.n	8007dbe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007daa:	4b60      	ldr	r3, [pc, #384]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	091b      	lsrs	r3, r3, #4
 8007db0:	f003 0307 	and.w	r3, r3, #7
 8007db4:	1c5a      	adds	r2, r3, #1
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
       ||
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d047      	beq.n	8007e4e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	73fb      	strb	r3, [r7, #15]
 8007dc2:	e044      	b.n	8007e4e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b03      	cmp	r3, #3
 8007dca:	d018      	beq.n	8007dfe <RCCEx_PLLSAI2_Config+0x86>
 8007dcc:	2b03      	cmp	r3, #3
 8007dce:	d825      	bhi.n	8007e1c <RCCEx_PLLSAI2_Config+0xa4>
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d002      	beq.n	8007dda <RCCEx_PLLSAI2_Config+0x62>
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d009      	beq.n	8007dec <RCCEx_PLLSAI2_Config+0x74>
 8007dd8:	e020      	b.n	8007e1c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007dda:	4b54      	ldr	r3, [pc, #336]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d11d      	bne.n	8007e22 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007dea:	e01a      	b.n	8007e22 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007dec:	4b4f      	ldr	r3, [pc, #316]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d116      	bne.n	8007e26 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007dfc:	e013      	b.n	8007e26 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007dfe:	4b4b      	ldr	r3, [pc, #300]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10f      	bne.n	8007e2a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007e0a:	4b48      	ldr	r3, [pc, #288]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d109      	bne.n	8007e2a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e1a:	e006      	b.n	8007e2a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e20:	e004      	b.n	8007e2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007e22:	bf00      	nop
 8007e24:	e002      	b.n	8007e2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007e26:	bf00      	nop
 8007e28:	e000      	b.n	8007e2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007e2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10d      	bne.n	8007e4e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007e32:	4b3e      	ldr	r3, [pc, #248]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6819      	ldr	r1, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	3b01      	subs	r3, #1
 8007e44:	011b      	lsls	r3, r3, #4
 8007e46:	430b      	orrs	r3, r1
 8007e48:	4938      	ldr	r1, [pc, #224]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d166      	bne.n	8007f22 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007e54:	4b35      	ldr	r3, [pc, #212]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a34      	ldr	r2, [pc, #208]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007e5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e60:	f7fb fa20 	bl	80032a4 <HAL_GetTick>
 8007e64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007e66:	e009      	b.n	8007e7c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007e68:	f7fb fa1c 	bl	80032a4 <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d902      	bls.n	8007e7c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	73fb      	strb	r3, [r7, #15]
        break;
 8007e7a:	e005      	b.n	8007e88 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1ef      	bne.n	8007e68 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d149      	bne.n	8007f22 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d110      	bne.n	8007eb6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007e94:	4b25      	ldr	r3, [pc, #148]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007e9c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	6892      	ldr	r2, [r2, #8]
 8007ea4:	0211      	lsls	r1, r2, #8
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	68d2      	ldr	r2, [r2, #12]
 8007eaa:	06d2      	lsls	r2, r2, #27
 8007eac:	430a      	orrs	r2, r1
 8007eae:	491f      	ldr	r1, [pc, #124]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	614b      	str	r3, [r1, #20]
 8007eb4:	e011      	b.n	8007eda <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007ebe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	6892      	ldr	r2, [r2, #8]
 8007ec6:	0211      	lsls	r1, r2, #8
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	6912      	ldr	r2, [r2, #16]
 8007ecc:	0852      	lsrs	r2, r2, #1
 8007ece:	3a01      	subs	r2, #1
 8007ed0:	0652      	lsls	r2, r2, #25
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	4915      	ldr	r1, [pc, #84]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007eda:	4b14      	ldr	r3, [pc, #80]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a13      	ldr	r2, [pc, #76]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ee4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ee6:	f7fb f9dd 	bl	80032a4 <HAL_GetTick>
 8007eea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007eec:	e009      	b.n	8007f02 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007eee:	f7fb f9d9 	bl	80032a4 <HAL_GetTick>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d902      	bls.n	8007f02 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	73fb      	strb	r3, [r7, #15]
          break;
 8007f00:	e005      	b.n	8007f0e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007f02:	4b0a      	ldr	r3, [pc, #40]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d0ef      	beq.n	8007eee <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d106      	bne.n	8007f22 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007f14:	4b05      	ldr	r3, [pc, #20]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007f16:	695a      	ldr	r2, [r3, #20]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	4903      	ldr	r1, [pc, #12]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	40021000 	.word	0x40021000

08007f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d101      	bne.n	8007f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e049      	b.n	8007fd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d106      	bne.n	8007f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f841 	bl	8007fde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	3304      	adds	r3, #4
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	4610      	mov	r0, r2
 8007f70:	f000 f9e0 	bl	8008334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b083      	sub	sp, #12
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007fe6:	bf00      	nop
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
	...

08007ff4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b01      	cmp	r3, #1
 8008006:	d001      	beq.n	800800c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e04f      	b.n	80080ac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2202      	movs	r2, #2
 8008010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68da      	ldr	r2, [r3, #12]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f042 0201 	orr.w	r2, r2, #1
 8008022:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a23      	ldr	r2, [pc, #140]	@ (80080b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d01d      	beq.n	800806a <HAL_TIM_Base_Start_IT+0x76>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008036:	d018      	beq.n	800806a <HAL_TIM_Base_Start_IT+0x76>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a1f      	ldr	r2, [pc, #124]	@ (80080bc <HAL_TIM_Base_Start_IT+0xc8>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d013      	beq.n	800806a <HAL_TIM_Base_Start_IT+0x76>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a1e      	ldr	r2, [pc, #120]	@ (80080c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d00e      	beq.n	800806a <HAL_TIM_Base_Start_IT+0x76>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a1c      	ldr	r2, [pc, #112]	@ (80080c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d009      	beq.n	800806a <HAL_TIM_Base_Start_IT+0x76>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a1b      	ldr	r2, [pc, #108]	@ (80080c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d004      	beq.n	800806a <HAL_TIM_Base_Start_IT+0x76>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a19      	ldr	r2, [pc, #100]	@ (80080cc <HAL_TIM_Base_Start_IT+0xd8>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d115      	bne.n	8008096 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	689a      	ldr	r2, [r3, #8]
 8008070:	4b17      	ldr	r3, [pc, #92]	@ (80080d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008072:	4013      	ands	r3, r2
 8008074:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2b06      	cmp	r3, #6
 800807a:	d015      	beq.n	80080a8 <HAL_TIM_Base_Start_IT+0xb4>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008082:	d011      	beq.n	80080a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f042 0201 	orr.w	r2, r2, #1
 8008092:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008094:	e008      	b.n	80080a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f042 0201 	orr.w	r2, r2, #1
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	e000      	b.n	80080aa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	40012c00 	.word	0x40012c00
 80080bc:	40000400 	.word	0x40000400
 80080c0:	40000800 	.word	0x40000800
 80080c4:	40000c00 	.word	0x40000c00
 80080c8:	40013400 	.word	0x40013400
 80080cc:	40014000 	.word	0x40014000
 80080d0:	00010007 	.word	0x00010007

080080d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d020      	beq.n	8008138 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f003 0302 	and.w	r3, r3, #2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d01b      	beq.n	8008138 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f06f 0202 	mvn.w	r2, #2
 8008108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	f003 0303 	and.w	r3, r3, #3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d003      	beq.n	8008126 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f8e9 	bl	80082f6 <HAL_TIM_IC_CaptureCallback>
 8008124:	e005      	b.n	8008132 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f8db 	bl	80082e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f8ec 	bl	800830a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	f003 0304 	and.w	r3, r3, #4
 800813e:	2b00      	cmp	r3, #0
 8008140:	d020      	beq.n	8008184 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f003 0304 	and.w	r3, r3, #4
 8008148:	2b00      	cmp	r3, #0
 800814a:	d01b      	beq.n	8008184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f06f 0204 	mvn.w	r2, #4
 8008154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2202      	movs	r2, #2
 800815a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f8c3 	bl	80082f6 <HAL_TIM_IC_CaptureCallback>
 8008170:	e005      	b.n	800817e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f8b5 	bl	80082e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f8c6 	bl	800830a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	f003 0308 	and.w	r3, r3, #8
 800818a:	2b00      	cmp	r3, #0
 800818c:	d020      	beq.n	80081d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f003 0308 	and.w	r3, r3, #8
 8008194:	2b00      	cmp	r3, #0
 8008196:	d01b      	beq.n	80081d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f06f 0208 	mvn.w	r2, #8
 80081a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2204      	movs	r2, #4
 80081a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	f003 0303 	and.w	r3, r3, #3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f89d 	bl	80082f6 <HAL_TIM_IC_CaptureCallback>
 80081bc:	e005      	b.n	80081ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f88f 	bl	80082e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f8a0 	bl	800830a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f003 0310 	and.w	r3, r3, #16
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d020      	beq.n	800821c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f003 0310 	and.w	r3, r3, #16
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d01b      	beq.n	800821c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f06f 0210 	mvn.w	r2, #16
 80081ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2208      	movs	r2, #8
 80081f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f877 	bl	80082f6 <HAL_TIM_IC_CaptureCallback>
 8008208:	e005      	b.n	8008216 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f869 	bl	80082e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f87a 	bl	800830a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00c      	beq.n	8008240 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f003 0301 	and.w	r3, r3, #1
 800822c:	2b00      	cmp	r3, #0
 800822e:	d007      	beq.n	8008240 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f06f 0201 	mvn.w	r2, #1
 8008238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7f9 fc64 	bl	8001b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008246:	2b00      	cmp	r3, #0
 8008248:	d104      	bne.n	8008254 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00c      	beq.n	800826e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800825a:	2b00      	cmp	r3, #0
 800825c:	d007      	beq.n	800826e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f913 	bl	8008494 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00c      	beq.n	8008292 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800827e:	2b00      	cmp	r3, #0
 8008280:	d007      	beq.n	8008292 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800828a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f90b 	bl	80084a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00c      	beq.n	80082b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d007      	beq.n	80082b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80082ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f834 	bl	800831e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	f003 0320 	and.w	r3, r3, #32
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00c      	beq.n	80082da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f003 0320 	and.w	r3, r3, #32
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d007      	beq.n	80082da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f06f 0220 	mvn.w	r2, #32
 80082d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f8d3 	bl	8008480 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082da:	bf00      	nop
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082ea:	bf00      	nop
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b083      	sub	sp, #12
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082fe:	bf00      	nop
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800830a:	b480      	push	{r7}
 800830c:	b083      	sub	sp, #12
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008312:	bf00      	nop
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008326:	bf00      	nop
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
	...

08008334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a46      	ldr	r2, [pc, #280]	@ (8008460 <TIM_Base_SetConfig+0x12c>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d013      	beq.n	8008374 <TIM_Base_SetConfig+0x40>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008352:	d00f      	beq.n	8008374 <TIM_Base_SetConfig+0x40>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a43      	ldr	r2, [pc, #268]	@ (8008464 <TIM_Base_SetConfig+0x130>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d00b      	beq.n	8008374 <TIM_Base_SetConfig+0x40>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a42      	ldr	r2, [pc, #264]	@ (8008468 <TIM_Base_SetConfig+0x134>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d007      	beq.n	8008374 <TIM_Base_SetConfig+0x40>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a41      	ldr	r2, [pc, #260]	@ (800846c <TIM_Base_SetConfig+0x138>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d003      	beq.n	8008374 <TIM_Base_SetConfig+0x40>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a40      	ldr	r2, [pc, #256]	@ (8008470 <TIM_Base_SetConfig+0x13c>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d108      	bne.n	8008386 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800837a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	4313      	orrs	r3, r2
 8008384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a35      	ldr	r2, [pc, #212]	@ (8008460 <TIM_Base_SetConfig+0x12c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d01f      	beq.n	80083ce <TIM_Base_SetConfig+0x9a>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008394:	d01b      	beq.n	80083ce <TIM_Base_SetConfig+0x9a>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a32      	ldr	r2, [pc, #200]	@ (8008464 <TIM_Base_SetConfig+0x130>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d017      	beq.n	80083ce <TIM_Base_SetConfig+0x9a>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a31      	ldr	r2, [pc, #196]	@ (8008468 <TIM_Base_SetConfig+0x134>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d013      	beq.n	80083ce <TIM_Base_SetConfig+0x9a>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a30      	ldr	r2, [pc, #192]	@ (800846c <TIM_Base_SetConfig+0x138>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d00f      	beq.n	80083ce <TIM_Base_SetConfig+0x9a>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a2f      	ldr	r2, [pc, #188]	@ (8008470 <TIM_Base_SetConfig+0x13c>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d00b      	beq.n	80083ce <TIM_Base_SetConfig+0x9a>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a2e      	ldr	r2, [pc, #184]	@ (8008474 <TIM_Base_SetConfig+0x140>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d007      	beq.n	80083ce <TIM_Base_SetConfig+0x9a>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008478 <TIM_Base_SetConfig+0x144>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d003      	beq.n	80083ce <TIM_Base_SetConfig+0x9a>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a2c      	ldr	r2, [pc, #176]	@ (800847c <TIM_Base_SetConfig+0x148>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d108      	bne.n	80083e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	4313      	orrs	r3, r2
 80083de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	689a      	ldr	r2, [r3, #8]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a16      	ldr	r2, [pc, #88]	@ (8008460 <TIM_Base_SetConfig+0x12c>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d00f      	beq.n	800842c <TIM_Base_SetConfig+0xf8>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a18      	ldr	r2, [pc, #96]	@ (8008470 <TIM_Base_SetConfig+0x13c>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d00b      	beq.n	800842c <TIM_Base_SetConfig+0xf8>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a17      	ldr	r2, [pc, #92]	@ (8008474 <TIM_Base_SetConfig+0x140>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d007      	beq.n	800842c <TIM_Base_SetConfig+0xf8>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a16      	ldr	r2, [pc, #88]	@ (8008478 <TIM_Base_SetConfig+0x144>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d003      	beq.n	800842c <TIM_Base_SetConfig+0xf8>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a15      	ldr	r2, [pc, #84]	@ (800847c <TIM_Base_SetConfig+0x148>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d103      	bne.n	8008434 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	691a      	ldr	r2, [r3, #16]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	2b01      	cmp	r3, #1
 8008444:	d105      	bne.n	8008452 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	f023 0201 	bic.w	r2, r3, #1
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	611a      	str	r2, [r3, #16]
  }
}
 8008452:	bf00      	nop
 8008454:	3714      	adds	r7, #20
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	40012c00 	.word	0x40012c00
 8008464:	40000400 	.word	0x40000400
 8008468:	40000800 	.word	0x40000800
 800846c:	40000c00 	.word	0x40000c00
 8008470:	40013400 	.word	0x40013400
 8008474:	40014000 	.word	0x40014000
 8008478:	40014400 	.word	0x40014400
 800847c:	40014800 	.word	0x40014800

08008480 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e040      	b.n	8008550 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d106      	bne.n	80084e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7f9 fcf2 	bl	8001ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2224      	movs	r2, #36	@ 0x24
 80084e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0201 	bic.w	r2, r2, #1
 80084f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d002      	beq.n	8008508 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fe52 	bl	80091ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fb97 	bl	8008c3c <UART_SetConfig>
 800850e:	4603      	mov	r3, r0
 8008510:	2b01      	cmp	r3, #1
 8008512:	d101      	bne.n	8008518 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e01b      	b.n	8008550 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008526:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	689a      	ldr	r2, [r3, #8]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008536:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f042 0201 	orr.w	r2, r2, #1
 8008546:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fed1 	bl	80092f0 <UART_CheckIdleState>
 800854e:	4603      	mov	r3, r0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b08a      	sub	sp, #40	@ 0x28
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	4613      	mov	r3, r2
 8008564:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800856c:	2b20      	cmp	r3, #32
 800856e:	d137      	bne.n	80085e0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <HAL_UART_Receive_IT+0x24>
 8008576:	88fb      	ldrh	r3, [r7, #6]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e030      	b.n	80085e2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a18      	ldr	r2, [pc, #96]	@ (80085ec <HAL_UART_Receive_IT+0x94>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d01f      	beq.n	80085d0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d018      	beq.n	80085d0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	e853 3f00 	ldrex	r3, [r3]
 80085aa:	613b      	str	r3, [r7, #16]
   return(result);
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80085b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	461a      	mov	r2, r3
 80085ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085bc:	623b      	str	r3, [r7, #32]
 80085be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c0:	69f9      	ldr	r1, [r7, #28]
 80085c2:	6a3a      	ldr	r2, [r7, #32]
 80085c4:	e841 2300 	strex	r3, r2, [r1]
 80085c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1e6      	bne.n	800859e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80085d0:	88fb      	ldrh	r3, [r7, #6]
 80085d2:	461a      	mov	r2, r3
 80085d4:	68b9      	ldr	r1, [r7, #8]
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f000 ffa0 	bl	800951c <UART_Start_Receive_IT>
 80085dc:	4603      	mov	r3, r0
 80085de:	e000      	b.n	80085e2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80085e0:	2302      	movs	r3, #2
  }
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3728      	adds	r7, #40	@ 0x28
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	40008000 	.word	0x40008000

080085f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b0ba      	sub	sp, #232	@ 0xe8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008616:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800861a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800861e:	4013      	ands	r3, r2
 8008620:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008628:	2b00      	cmp	r3, #0
 800862a:	d115      	bne.n	8008658 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800862c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008630:	f003 0320 	and.w	r3, r3, #32
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00f      	beq.n	8008658 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800863c:	f003 0320 	and.w	r3, r3, #32
 8008640:	2b00      	cmp	r3, #0
 8008642:	d009      	beq.n	8008658 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 82ca 	beq.w	8008be2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	4798      	blx	r3
      }
      return;
 8008656:	e2c4      	b.n	8008be2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008658:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800865c:	2b00      	cmp	r3, #0
 800865e:	f000 8117 	beq.w	8008890 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d106      	bne.n	800867c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800866e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008672:	4b85      	ldr	r3, [pc, #532]	@ (8008888 <HAL_UART_IRQHandler+0x298>)
 8008674:	4013      	ands	r3, r2
 8008676:	2b00      	cmp	r3, #0
 8008678:	f000 810a 	beq.w	8008890 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800867c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008680:	f003 0301 	and.w	r3, r3, #1
 8008684:	2b00      	cmp	r3, #0
 8008686:	d011      	beq.n	80086ac <HAL_UART_IRQHandler+0xbc>
 8008688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800868c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00b      	beq.n	80086ac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2201      	movs	r2, #1
 800869a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086a2:	f043 0201 	orr.w	r2, r3, #1
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086b0:	f003 0302 	and.w	r3, r3, #2
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d011      	beq.n	80086dc <HAL_UART_IRQHandler+0xec>
 80086b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086bc:	f003 0301 	and.w	r3, r3, #1
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00b      	beq.n	80086dc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2202      	movs	r2, #2
 80086ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086d2:	f043 0204 	orr.w	r2, r3, #4
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086e0:	f003 0304 	and.w	r3, r3, #4
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d011      	beq.n	800870c <HAL_UART_IRQHandler+0x11c>
 80086e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00b      	beq.n	800870c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2204      	movs	r2, #4
 80086fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008702:	f043 0202 	orr.w	r2, r3, #2
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800870c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008710:	f003 0308 	and.w	r3, r3, #8
 8008714:	2b00      	cmp	r3, #0
 8008716:	d017      	beq.n	8008748 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800871c:	f003 0320 	and.w	r3, r3, #32
 8008720:	2b00      	cmp	r3, #0
 8008722:	d105      	bne.n	8008730 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008728:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00b      	beq.n	8008748 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2208      	movs	r2, #8
 8008736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800873e:	f043 0208 	orr.w	r2, r3, #8
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800874c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008750:	2b00      	cmp	r3, #0
 8008752:	d012      	beq.n	800877a <HAL_UART_IRQHandler+0x18a>
 8008754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008758:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00c      	beq.n	800877a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008768:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008770:	f043 0220 	orr.w	r2, r3, #32
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008780:	2b00      	cmp	r3, #0
 8008782:	f000 8230 	beq.w	8008be6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800878a:	f003 0320 	and.w	r3, r3, #32
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00d      	beq.n	80087ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008796:	f003 0320 	and.w	r3, r3, #32
 800879a:	2b00      	cmp	r3, #0
 800879c:	d007      	beq.n	80087ae <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087c2:	2b40      	cmp	r3, #64	@ 0x40
 80087c4:	d005      	beq.n	80087d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80087c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80087ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d04f      	beq.n	8008872 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 ff68 	bl	80096a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087e2:	2b40      	cmp	r3, #64	@ 0x40
 80087e4:	d141      	bne.n	800886a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	3308      	adds	r3, #8
 80087ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087f4:	e853 3f00 	ldrex	r3, [r3]
 80087f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80087fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008800:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008804:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3308      	adds	r3, #8
 800880e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008812:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008816:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800881e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008822:	e841 2300 	strex	r3, r2, [r1]
 8008826:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800882a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1d9      	bne.n	80087e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008836:	2b00      	cmp	r3, #0
 8008838:	d013      	beq.n	8008862 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800883e:	4a13      	ldr	r2, [pc, #76]	@ (800888c <HAL_UART_IRQHandler+0x29c>)
 8008840:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008846:	4618      	mov	r0, r3
 8008848:	f7fc feb4 	bl	80055b4 <HAL_DMA_Abort_IT>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d017      	beq.n	8008882 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800885c:	4610      	mov	r0, r2
 800885e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008860:	e00f      	b.n	8008882 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f9d4 	bl	8008c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008868:	e00b      	b.n	8008882 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f9d0 	bl	8008c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008870:	e007      	b.n	8008882 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f9cc 	bl	8008c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008880:	e1b1      	b.n	8008be6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008882:	bf00      	nop
    return;
 8008884:	e1af      	b.n	8008be6 <HAL_UART_IRQHandler+0x5f6>
 8008886:	bf00      	nop
 8008888:	04000120 	.word	0x04000120
 800888c:	08009771 	.word	0x08009771

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008894:	2b01      	cmp	r3, #1
 8008896:	f040 816a 	bne.w	8008b6e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800889a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800889e:	f003 0310 	and.w	r3, r3, #16
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 8163 	beq.w	8008b6e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80088a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088ac:	f003 0310 	and.w	r3, r3, #16
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 815c 	beq.w	8008b6e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2210      	movs	r2, #16
 80088bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088c8:	2b40      	cmp	r3, #64	@ 0x40
 80088ca:	f040 80d4 	bne.w	8008a76 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f000 80ad 	beq.w	8008a3e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80088ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088ee:	429a      	cmp	r2, r3
 80088f0:	f080 80a5 	bcs.w	8008a3e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 0320 	and.w	r3, r3, #32
 800890a:	2b00      	cmp	r3, #0
 800890c:	f040 8086 	bne.w	8008a1c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008918:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800891c:	e853 3f00 	ldrex	r3, [r3]
 8008920:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008924:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800892c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	461a      	mov	r2, r3
 8008936:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800893a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800893e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008942:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008946:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008952:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1da      	bne.n	8008910 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3308      	adds	r3, #8
 8008960:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008962:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008964:	e853 3f00 	ldrex	r3, [r3]
 8008968:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800896a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800896c:	f023 0301 	bic.w	r3, r3, #1
 8008970:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	3308      	adds	r3, #8
 800897a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800897e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008982:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008984:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008986:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800898a:	e841 2300 	strex	r3, r2, [r1]
 800898e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008990:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1e1      	bne.n	800895a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	3308      	adds	r3, #8
 800899c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089a0:	e853 3f00 	ldrex	r3, [r3]
 80089a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80089a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	3308      	adds	r3, #8
 80089b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80089ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80089bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80089c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80089c2:	e841 2300 	strex	r3, r2, [r1]
 80089c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80089c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1e3      	bne.n	8008996 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2220      	movs	r2, #32
 80089d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089e4:	e853 3f00 	ldrex	r3, [r3]
 80089e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80089ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089ec:	f023 0310 	bic.w	r3, r3, #16
 80089f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	461a      	mov	r2, r3
 80089fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a00:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a06:	e841 2300 	strex	r3, r2, [r1]
 8008a0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1e4      	bne.n	80089dc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fc fd8e 	bl	8005538 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	4619      	mov	r1, r3
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f8f4 	bl	8008c24 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008a3c:	e0d5      	b.n	8008bea <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008a44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	f040 80ce 	bne.w	8008bea <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0320 	and.w	r3, r3, #32
 8008a5a:	2b20      	cmp	r3, #32
 8008a5c:	f040 80c5 	bne.w	8008bea <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2202      	movs	r2, #2
 8008a64:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f8d8 	bl	8008c24 <HAL_UARTEx_RxEventCallback>
      return;
 8008a74:	e0b9      	b.n	8008bea <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f000 80ab 	beq.w	8008bee <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8008a98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f000 80a6 	beq.w	8008bee <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aaa:	e853 3f00 	ldrex	r3, [r3]
 8008aae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ab2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ab6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ac6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008aca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008acc:	e841 2300 	strex	r3, r2, [r1]
 8008ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1e4      	bne.n	8008aa2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3308      	adds	r3, #8
 8008ade:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae2:	e853 3f00 	ldrex	r3, [r3]
 8008ae6:	623b      	str	r3, [r7, #32]
   return(result);
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	f023 0301 	bic.w	r3, r3, #1
 8008aee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3308      	adds	r3, #8
 8008af8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008afc:	633a      	str	r2, [r7, #48]	@ 0x30
 8008afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b04:	e841 2300 	strex	r3, r2, [r1]
 8008b08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1e3      	bne.n	8008ad8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2220      	movs	r2, #32
 8008b14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	e853 3f00 	ldrex	r3, [r3]
 8008b30:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f023 0310 	bic.w	r3, r3, #16
 8008b38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	461a      	mov	r2, r3
 8008b42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008b46:	61fb      	str	r3, [r7, #28]
 8008b48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4a:	69b9      	ldr	r1, [r7, #24]
 8008b4c:	69fa      	ldr	r2, [r7, #28]
 8008b4e:	e841 2300 	strex	r3, r2, [r1]
 8008b52:	617b      	str	r3, [r7, #20]
   return(result);
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1e4      	bne.n	8008b24 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b64:	4619      	mov	r1, r3
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f85c 	bl	8008c24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b6c:	e03f      	b.n	8008bee <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00e      	beq.n	8008b98 <HAL_UART_IRQHandler+0x5a8>
 8008b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d008      	beq.n	8008b98 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008b8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 ffe9 	bl	8009b68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b96:	e02d      	b.n	8008bf4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00e      	beq.n	8008bc2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d008      	beq.n	8008bc2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d01c      	beq.n	8008bf2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	4798      	blx	r3
    }
    return;
 8008bc0:	e017      	b.n	8008bf2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d012      	beq.n	8008bf4 <HAL_UART_IRQHandler+0x604>
 8008bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00c      	beq.n	8008bf4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fdde 	bl	800979c <UART_EndTransmit_IT>
    return;
 8008be0:	e008      	b.n	8008bf4 <HAL_UART_IRQHandler+0x604>
      return;
 8008be2:	bf00      	nop
 8008be4:	e006      	b.n	8008bf4 <HAL_UART_IRQHandler+0x604>
    return;
 8008be6:	bf00      	nop
 8008be8:	e004      	b.n	8008bf4 <HAL_UART_IRQHandler+0x604>
      return;
 8008bea:	bf00      	nop
 8008bec:	e002      	b.n	8008bf4 <HAL_UART_IRQHandler+0x604>
      return;
 8008bee:	bf00      	nop
 8008bf0:	e000      	b.n	8008bf4 <HAL_UART_IRQHandler+0x604>
    return;
 8008bf2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008bf4:	37e8      	adds	r7, #232	@ 0xe8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop

08008bfc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c40:	b08a      	sub	sp, #40	@ 0x28
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c46:	2300      	movs	r3, #0
 8008c48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	689a      	ldr	r2, [r3, #8]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	431a      	orrs	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	431a      	orrs	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	69db      	ldr	r3, [r3, #28]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	4ba4      	ldr	r3, [pc, #656]	@ (8008efc <UART_SetConfig+0x2c0>)
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	6812      	ldr	r2, [r2, #0]
 8008c72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008c74:	430b      	orrs	r3, r1
 8008c76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	68da      	ldr	r2, [r3, #12]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	430a      	orrs	r2, r1
 8008c8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a99      	ldr	r2, [pc, #612]	@ (8008f00 <UART_SetConfig+0x2c4>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d004      	beq.n	8008ca8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cb8:	430a      	orrs	r2, r1
 8008cba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a90      	ldr	r2, [pc, #576]	@ (8008f04 <UART_SetConfig+0x2c8>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d126      	bne.n	8008d14 <UART_SetConfig+0xd8>
 8008cc6:	4b90      	ldr	r3, [pc, #576]	@ (8008f08 <UART_SetConfig+0x2cc>)
 8008cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ccc:	f003 0303 	and.w	r3, r3, #3
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	d81b      	bhi.n	8008d0c <UART_SetConfig+0xd0>
 8008cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8008cdc <UART_SetConfig+0xa0>)
 8008cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cda:	bf00      	nop
 8008cdc:	08008ced 	.word	0x08008ced
 8008ce0:	08008cfd 	.word	0x08008cfd
 8008ce4:	08008cf5 	.word	0x08008cf5
 8008ce8:	08008d05 	.word	0x08008d05
 8008cec:	2301      	movs	r3, #1
 8008cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cf2:	e116      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cfa:	e112      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008cfc:	2304      	movs	r3, #4
 8008cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d02:	e10e      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008d04:	2308      	movs	r3, #8
 8008d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d0a:	e10a      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008d0c:	2310      	movs	r3, #16
 8008d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d12:	e106      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a7c      	ldr	r2, [pc, #496]	@ (8008f0c <UART_SetConfig+0x2d0>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d138      	bne.n	8008d90 <UART_SetConfig+0x154>
 8008d1e:	4b7a      	ldr	r3, [pc, #488]	@ (8008f08 <UART_SetConfig+0x2cc>)
 8008d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d24:	f003 030c 	and.w	r3, r3, #12
 8008d28:	2b0c      	cmp	r3, #12
 8008d2a:	d82d      	bhi.n	8008d88 <UART_SetConfig+0x14c>
 8008d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d34 <UART_SetConfig+0xf8>)
 8008d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d32:	bf00      	nop
 8008d34:	08008d69 	.word	0x08008d69
 8008d38:	08008d89 	.word	0x08008d89
 8008d3c:	08008d89 	.word	0x08008d89
 8008d40:	08008d89 	.word	0x08008d89
 8008d44:	08008d79 	.word	0x08008d79
 8008d48:	08008d89 	.word	0x08008d89
 8008d4c:	08008d89 	.word	0x08008d89
 8008d50:	08008d89 	.word	0x08008d89
 8008d54:	08008d71 	.word	0x08008d71
 8008d58:	08008d89 	.word	0x08008d89
 8008d5c:	08008d89 	.word	0x08008d89
 8008d60:	08008d89 	.word	0x08008d89
 8008d64:	08008d81 	.word	0x08008d81
 8008d68:	2300      	movs	r3, #0
 8008d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d6e:	e0d8      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008d70:	2302      	movs	r3, #2
 8008d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d76:	e0d4      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008d78:	2304      	movs	r3, #4
 8008d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d7e:	e0d0      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008d80:	2308      	movs	r3, #8
 8008d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d86:	e0cc      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008d88:	2310      	movs	r3, #16
 8008d8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d8e:	e0c8      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a5e      	ldr	r2, [pc, #376]	@ (8008f10 <UART_SetConfig+0x2d4>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d125      	bne.n	8008de6 <UART_SetConfig+0x1aa>
 8008d9a:	4b5b      	ldr	r3, [pc, #364]	@ (8008f08 <UART_SetConfig+0x2cc>)
 8008d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008da0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008da4:	2b30      	cmp	r3, #48	@ 0x30
 8008da6:	d016      	beq.n	8008dd6 <UART_SetConfig+0x19a>
 8008da8:	2b30      	cmp	r3, #48	@ 0x30
 8008daa:	d818      	bhi.n	8008dde <UART_SetConfig+0x1a2>
 8008dac:	2b20      	cmp	r3, #32
 8008dae:	d00a      	beq.n	8008dc6 <UART_SetConfig+0x18a>
 8008db0:	2b20      	cmp	r3, #32
 8008db2:	d814      	bhi.n	8008dde <UART_SetConfig+0x1a2>
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d002      	beq.n	8008dbe <UART_SetConfig+0x182>
 8008db8:	2b10      	cmp	r3, #16
 8008dba:	d008      	beq.n	8008dce <UART_SetConfig+0x192>
 8008dbc:	e00f      	b.n	8008dde <UART_SetConfig+0x1a2>
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dc4:	e0ad      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dcc:	e0a9      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008dce:	2304      	movs	r3, #4
 8008dd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dd4:	e0a5      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008dd6:	2308      	movs	r3, #8
 8008dd8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ddc:	e0a1      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008dde:	2310      	movs	r3, #16
 8008de0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008de4:	e09d      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a4a      	ldr	r2, [pc, #296]	@ (8008f14 <UART_SetConfig+0x2d8>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d125      	bne.n	8008e3c <UART_SetConfig+0x200>
 8008df0:	4b45      	ldr	r3, [pc, #276]	@ (8008f08 <UART_SetConfig+0x2cc>)
 8008df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008df6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008dfa:	2bc0      	cmp	r3, #192	@ 0xc0
 8008dfc:	d016      	beq.n	8008e2c <UART_SetConfig+0x1f0>
 8008dfe:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e00:	d818      	bhi.n	8008e34 <UART_SetConfig+0x1f8>
 8008e02:	2b80      	cmp	r3, #128	@ 0x80
 8008e04:	d00a      	beq.n	8008e1c <UART_SetConfig+0x1e0>
 8008e06:	2b80      	cmp	r3, #128	@ 0x80
 8008e08:	d814      	bhi.n	8008e34 <UART_SetConfig+0x1f8>
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d002      	beq.n	8008e14 <UART_SetConfig+0x1d8>
 8008e0e:	2b40      	cmp	r3, #64	@ 0x40
 8008e10:	d008      	beq.n	8008e24 <UART_SetConfig+0x1e8>
 8008e12:	e00f      	b.n	8008e34 <UART_SetConfig+0x1f8>
 8008e14:	2300      	movs	r3, #0
 8008e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e1a:	e082      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e22:	e07e      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008e24:	2304      	movs	r3, #4
 8008e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e2a:	e07a      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008e2c:	2308      	movs	r3, #8
 8008e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e32:	e076      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008e34:	2310      	movs	r3, #16
 8008e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e3a:	e072      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a35      	ldr	r2, [pc, #212]	@ (8008f18 <UART_SetConfig+0x2dc>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d12a      	bne.n	8008e9c <UART_SetConfig+0x260>
 8008e46:	4b30      	ldr	r3, [pc, #192]	@ (8008f08 <UART_SetConfig+0x2cc>)
 8008e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e54:	d01a      	beq.n	8008e8c <UART_SetConfig+0x250>
 8008e56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e5a:	d81b      	bhi.n	8008e94 <UART_SetConfig+0x258>
 8008e5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e60:	d00c      	beq.n	8008e7c <UART_SetConfig+0x240>
 8008e62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e66:	d815      	bhi.n	8008e94 <UART_SetConfig+0x258>
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d003      	beq.n	8008e74 <UART_SetConfig+0x238>
 8008e6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e70:	d008      	beq.n	8008e84 <UART_SetConfig+0x248>
 8008e72:	e00f      	b.n	8008e94 <UART_SetConfig+0x258>
 8008e74:	2300      	movs	r3, #0
 8008e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e7a:	e052      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e82:	e04e      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008e84:	2304      	movs	r3, #4
 8008e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e8a:	e04a      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008e8c:	2308      	movs	r3, #8
 8008e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e92:	e046      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008e94:	2310      	movs	r3, #16
 8008e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e9a:	e042      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a17      	ldr	r2, [pc, #92]	@ (8008f00 <UART_SetConfig+0x2c4>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d13a      	bne.n	8008f1c <UART_SetConfig+0x2e0>
 8008ea6:	4b18      	ldr	r3, [pc, #96]	@ (8008f08 <UART_SetConfig+0x2cc>)
 8008ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008eb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008eb4:	d01a      	beq.n	8008eec <UART_SetConfig+0x2b0>
 8008eb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008eba:	d81b      	bhi.n	8008ef4 <UART_SetConfig+0x2b8>
 8008ebc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ec0:	d00c      	beq.n	8008edc <UART_SetConfig+0x2a0>
 8008ec2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ec6:	d815      	bhi.n	8008ef4 <UART_SetConfig+0x2b8>
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d003      	beq.n	8008ed4 <UART_SetConfig+0x298>
 8008ecc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ed0:	d008      	beq.n	8008ee4 <UART_SetConfig+0x2a8>
 8008ed2:	e00f      	b.n	8008ef4 <UART_SetConfig+0x2b8>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008eda:	e022      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008edc:	2302      	movs	r3, #2
 8008ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ee2:	e01e      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008ee4:	2304      	movs	r3, #4
 8008ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008eea:	e01a      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008eec:	2308      	movs	r3, #8
 8008eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ef2:	e016      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008ef4:	2310      	movs	r3, #16
 8008ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008efa:	e012      	b.n	8008f22 <UART_SetConfig+0x2e6>
 8008efc:	efff69f3 	.word	0xefff69f3
 8008f00:	40008000 	.word	0x40008000
 8008f04:	40013800 	.word	0x40013800
 8008f08:	40021000 	.word	0x40021000
 8008f0c:	40004400 	.word	0x40004400
 8008f10:	40004800 	.word	0x40004800
 8008f14:	40004c00 	.word	0x40004c00
 8008f18:	40005000 	.word	0x40005000
 8008f1c:	2310      	movs	r3, #16
 8008f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a9f      	ldr	r2, [pc, #636]	@ (80091a4 <UART_SetConfig+0x568>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d17a      	bne.n	8009022 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f30:	2b08      	cmp	r3, #8
 8008f32:	d824      	bhi.n	8008f7e <UART_SetConfig+0x342>
 8008f34:	a201      	add	r2, pc, #4	@ (adr r2, 8008f3c <UART_SetConfig+0x300>)
 8008f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3a:	bf00      	nop
 8008f3c:	08008f61 	.word	0x08008f61
 8008f40:	08008f7f 	.word	0x08008f7f
 8008f44:	08008f69 	.word	0x08008f69
 8008f48:	08008f7f 	.word	0x08008f7f
 8008f4c:	08008f6f 	.word	0x08008f6f
 8008f50:	08008f7f 	.word	0x08008f7f
 8008f54:	08008f7f 	.word	0x08008f7f
 8008f58:	08008f7f 	.word	0x08008f7f
 8008f5c:	08008f77 	.word	0x08008f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f60:	f7fe fa5e 	bl	8007420 <HAL_RCC_GetPCLK1Freq>
 8008f64:	61f8      	str	r0, [r7, #28]
        break;
 8008f66:	e010      	b.n	8008f8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f68:	4b8f      	ldr	r3, [pc, #572]	@ (80091a8 <UART_SetConfig+0x56c>)
 8008f6a:	61fb      	str	r3, [r7, #28]
        break;
 8008f6c:	e00d      	b.n	8008f8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f6e:	f7fe f9bf 	bl	80072f0 <HAL_RCC_GetSysClockFreq>
 8008f72:	61f8      	str	r0, [r7, #28]
        break;
 8008f74:	e009      	b.n	8008f8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f7a:	61fb      	str	r3, [r7, #28]
        break;
 8008f7c:	e005      	b.n	8008f8a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008f88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 80fb 	beq.w	8009188 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	685a      	ldr	r2, [r3, #4]
 8008f96:	4613      	mov	r3, r2
 8008f98:	005b      	lsls	r3, r3, #1
 8008f9a:	4413      	add	r3, r2
 8008f9c:	69fa      	ldr	r2, [r7, #28]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d305      	bcc.n	8008fae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008fa8:	69fa      	ldr	r2, [r7, #28]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d903      	bls.n	8008fb6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008fb4:	e0e8      	b.n	8009188 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	461c      	mov	r4, r3
 8008fbc:	4615      	mov	r5, r2
 8008fbe:	f04f 0200 	mov.w	r2, #0
 8008fc2:	f04f 0300 	mov.w	r3, #0
 8008fc6:	022b      	lsls	r3, r5, #8
 8008fc8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008fcc:	0222      	lsls	r2, r4, #8
 8008fce:	68f9      	ldr	r1, [r7, #12]
 8008fd0:	6849      	ldr	r1, [r1, #4]
 8008fd2:	0849      	lsrs	r1, r1, #1
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	4688      	mov	r8, r1
 8008fd8:	4681      	mov	r9, r0
 8008fda:	eb12 0a08 	adds.w	sl, r2, r8
 8008fde:	eb43 0b09 	adc.w	fp, r3, r9
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	603b      	str	r3, [r7, #0]
 8008fea:	607a      	str	r2, [r7, #4]
 8008fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ff0:	4650      	mov	r0, sl
 8008ff2:	4659      	mov	r1, fp
 8008ff4:	f7f7 f8fc 	bl	80001f0 <__aeabi_uldivmod>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009006:	d308      	bcc.n	800901a <UART_SetConfig+0x3de>
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800900e:	d204      	bcs.n	800901a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	69ba      	ldr	r2, [r7, #24]
 8009016:	60da      	str	r2, [r3, #12]
 8009018:	e0b6      	b.n	8009188 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009020:	e0b2      	b.n	8009188 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	69db      	ldr	r3, [r3, #28]
 8009026:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800902a:	d15e      	bne.n	80090ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800902c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009030:	2b08      	cmp	r3, #8
 8009032:	d828      	bhi.n	8009086 <UART_SetConfig+0x44a>
 8009034:	a201      	add	r2, pc, #4	@ (adr r2, 800903c <UART_SetConfig+0x400>)
 8009036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903a:	bf00      	nop
 800903c:	08009061 	.word	0x08009061
 8009040:	08009069 	.word	0x08009069
 8009044:	08009071 	.word	0x08009071
 8009048:	08009087 	.word	0x08009087
 800904c:	08009077 	.word	0x08009077
 8009050:	08009087 	.word	0x08009087
 8009054:	08009087 	.word	0x08009087
 8009058:	08009087 	.word	0x08009087
 800905c:	0800907f 	.word	0x0800907f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009060:	f7fe f9de 	bl	8007420 <HAL_RCC_GetPCLK1Freq>
 8009064:	61f8      	str	r0, [r7, #28]
        break;
 8009066:	e014      	b.n	8009092 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009068:	f7fe f9f0 	bl	800744c <HAL_RCC_GetPCLK2Freq>
 800906c:	61f8      	str	r0, [r7, #28]
        break;
 800906e:	e010      	b.n	8009092 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009070:	4b4d      	ldr	r3, [pc, #308]	@ (80091a8 <UART_SetConfig+0x56c>)
 8009072:	61fb      	str	r3, [r7, #28]
        break;
 8009074:	e00d      	b.n	8009092 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009076:	f7fe f93b 	bl	80072f0 <HAL_RCC_GetSysClockFreq>
 800907a:	61f8      	str	r0, [r7, #28]
        break;
 800907c:	e009      	b.n	8009092 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800907e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009082:	61fb      	str	r3, [r7, #28]
        break;
 8009084:	e005      	b.n	8009092 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009086:	2300      	movs	r3, #0
 8009088:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009090:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d077      	beq.n	8009188 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	005a      	lsls	r2, r3, #1
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	085b      	lsrs	r3, r3, #1
 80090a2:	441a      	add	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	2b0f      	cmp	r3, #15
 80090b2:	d916      	bls.n	80090e2 <UART_SetConfig+0x4a6>
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090ba:	d212      	bcs.n	80090e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	b29b      	uxth	r3, r3
 80090c0:	f023 030f 	bic.w	r3, r3, #15
 80090c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	085b      	lsrs	r3, r3, #1
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	f003 0307 	and.w	r3, r3, #7
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	8afb      	ldrh	r3, [r7, #22]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	8afa      	ldrh	r2, [r7, #22]
 80090de:	60da      	str	r2, [r3, #12]
 80090e0:	e052      	b.n	8009188 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80090e8:	e04e      	b.n	8009188 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80090ee:	2b08      	cmp	r3, #8
 80090f0:	d827      	bhi.n	8009142 <UART_SetConfig+0x506>
 80090f2:	a201      	add	r2, pc, #4	@ (adr r2, 80090f8 <UART_SetConfig+0x4bc>)
 80090f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f8:	0800911d 	.word	0x0800911d
 80090fc:	08009125 	.word	0x08009125
 8009100:	0800912d 	.word	0x0800912d
 8009104:	08009143 	.word	0x08009143
 8009108:	08009133 	.word	0x08009133
 800910c:	08009143 	.word	0x08009143
 8009110:	08009143 	.word	0x08009143
 8009114:	08009143 	.word	0x08009143
 8009118:	0800913b 	.word	0x0800913b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800911c:	f7fe f980 	bl	8007420 <HAL_RCC_GetPCLK1Freq>
 8009120:	61f8      	str	r0, [r7, #28]
        break;
 8009122:	e014      	b.n	800914e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009124:	f7fe f992 	bl	800744c <HAL_RCC_GetPCLK2Freq>
 8009128:	61f8      	str	r0, [r7, #28]
        break;
 800912a:	e010      	b.n	800914e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800912c:	4b1e      	ldr	r3, [pc, #120]	@ (80091a8 <UART_SetConfig+0x56c>)
 800912e:	61fb      	str	r3, [r7, #28]
        break;
 8009130:	e00d      	b.n	800914e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009132:	f7fe f8dd 	bl	80072f0 <HAL_RCC_GetSysClockFreq>
 8009136:	61f8      	str	r0, [r7, #28]
        break;
 8009138:	e009      	b.n	800914e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800913a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800913e:	61fb      	str	r3, [r7, #28]
        break;
 8009140:	e005      	b.n	800914e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009142:	2300      	movs	r3, #0
 8009144:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800914c:	bf00      	nop
    }

    if (pclk != 0U)
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d019      	beq.n	8009188 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	085a      	lsrs	r2, r3, #1
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	441a      	add	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	fbb2 f3f3 	udiv	r3, r2, r3
 8009166:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	2b0f      	cmp	r3, #15
 800916c:	d909      	bls.n	8009182 <UART_SetConfig+0x546>
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009174:	d205      	bcs.n	8009182 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	b29a      	uxth	r2, r3
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	60da      	str	r2, [r3, #12]
 8009180:	e002      	b.n	8009188 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009194:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009198:	4618      	mov	r0, r3
 800919a:	3728      	adds	r7, #40	@ 0x28
 800919c:	46bd      	mov	sp, r7
 800919e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091a2:	bf00      	nop
 80091a4:	40008000 	.word	0x40008000
 80091a8:	00f42400 	.word	0x00f42400

080091ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b8:	f003 0308 	and.w	r3, r3, #8
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00a      	beq.n	80091d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	430a      	orrs	r2, r1
 80091d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00a      	beq.n	80091f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	430a      	orrs	r2, r1
 80091f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091fc:	f003 0302 	and.w	r3, r3, #2
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00a      	beq.n	800921a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	430a      	orrs	r2, r1
 8009218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800921e:	f003 0304 	and.w	r3, r3, #4
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00a      	beq.n	800923c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	430a      	orrs	r2, r1
 800923a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009240:	f003 0310 	and.w	r3, r3, #16
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00a      	beq.n	800925e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	430a      	orrs	r2, r1
 800925c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009262:	f003 0320 	and.w	r3, r3, #32
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00a      	beq.n	8009280 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	430a      	orrs	r2, r1
 800927e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009288:	2b00      	cmp	r3, #0
 800928a:	d01a      	beq.n	80092c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	430a      	orrs	r2, r1
 80092a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092aa:	d10a      	bne.n	80092c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	430a      	orrs	r2, r1
 80092c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00a      	beq.n	80092e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	430a      	orrs	r2, r1
 80092e2:	605a      	str	r2, [r3, #4]
  }
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b098      	sub	sp, #96	@ 0x60
 80092f4:	af02      	add	r7, sp, #8
 80092f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009300:	f7f9 ffd0 	bl	80032a4 <HAL_GetTick>
 8009304:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 0308 	and.w	r3, r3, #8
 8009310:	2b08      	cmp	r3, #8
 8009312:	d12e      	bne.n	8009372 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009314:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800931c:	2200      	movs	r2, #0
 800931e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f88c 	bl	8009440 <UART_WaitOnFlagUntilTimeout>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d021      	beq.n	8009372 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009336:	e853 3f00 	ldrex	r3, [r3]
 800933a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800933c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800933e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009342:	653b      	str	r3, [r7, #80]	@ 0x50
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	461a      	mov	r2, r3
 800934a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800934c:	647b      	str	r3, [r7, #68]	@ 0x44
 800934e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009350:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009352:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009354:	e841 2300 	strex	r3, r2, [r1]
 8009358:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800935a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e6      	bne.n	800932e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2220      	movs	r2, #32
 8009364:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800936e:	2303      	movs	r3, #3
 8009370:	e062      	b.n	8009438 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0304 	and.w	r3, r3, #4
 800937c:	2b04      	cmp	r3, #4
 800937e:	d149      	bne.n	8009414 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009380:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009388:	2200      	movs	r2, #0
 800938a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f856 	bl	8009440 <UART_WaitOnFlagUntilTimeout>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d03c      	beq.n	8009414 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	623b      	str	r3, [r7, #32]
   return(result);
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	461a      	mov	r2, r3
 80093b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80093ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e6      	bne.n	800939a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3308      	adds	r3, #8
 80093d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	e853 3f00 	ldrex	r3, [r3]
 80093da:	60fb      	str	r3, [r7, #12]
   return(result);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f023 0301 	bic.w	r3, r3, #1
 80093e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3308      	adds	r3, #8
 80093ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093ec:	61fa      	str	r2, [r7, #28]
 80093ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f0:	69b9      	ldr	r1, [r7, #24]
 80093f2:	69fa      	ldr	r2, [r7, #28]
 80093f4:	e841 2300 	strex	r3, r2, [r1]
 80093f8:	617b      	str	r3, [r7, #20]
   return(result);
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1e5      	bne.n	80093cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2220      	movs	r2, #32
 8009404:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009410:	2303      	movs	r3, #3
 8009412:	e011      	b.n	8009438 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2220      	movs	r2, #32
 8009418:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2220      	movs	r2, #32
 800941e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3758      	adds	r7, #88	@ 0x58
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	603b      	str	r3, [r7, #0]
 800944c:	4613      	mov	r3, r2
 800944e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009450:	e04f      	b.n	80094f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009458:	d04b      	beq.n	80094f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800945a:	f7f9 ff23 	bl	80032a4 <HAL_GetTick>
 800945e:	4602      	mov	r2, r0
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	69ba      	ldr	r2, [r7, #24]
 8009466:	429a      	cmp	r2, r3
 8009468:	d302      	bcc.n	8009470 <UART_WaitOnFlagUntilTimeout+0x30>
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d101      	bne.n	8009474 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009470:	2303      	movs	r3, #3
 8009472:	e04e      	b.n	8009512 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 0304 	and.w	r3, r3, #4
 800947e:	2b00      	cmp	r3, #0
 8009480:	d037      	beq.n	80094f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	2b80      	cmp	r3, #128	@ 0x80
 8009486:	d034      	beq.n	80094f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	2b40      	cmp	r3, #64	@ 0x40
 800948c:	d031      	beq.n	80094f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	69db      	ldr	r3, [r3, #28]
 8009494:	f003 0308 	and.w	r3, r3, #8
 8009498:	2b08      	cmp	r3, #8
 800949a:	d110      	bne.n	80094be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2208      	movs	r2, #8
 80094a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f000 f8ff 	bl	80096a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2208      	movs	r2, #8
 80094ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e029      	b.n	8009512 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	69db      	ldr	r3, [r3, #28]
 80094c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094cc:	d111      	bne.n	80094f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80094d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f000 f8e5 	bl	80096a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2220      	movs	r2, #32
 80094e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e00f      	b.n	8009512 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	69da      	ldr	r2, [r3, #28]
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	4013      	ands	r3, r2
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	429a      	cmp	r2, r3
 8009500:	bf0c      	ite	eq
 8009502:	2301      	moveq	r3, #1
 8009504:	2300      	movne	r3, #0
 8009506:	b2db      	uxtb	r3, r3
 8009508:	461a      	mov	r2, r3
 800950a:	79fb      	ldrb	r3, [r7, #7]
 800950c:	429a      	cmp	r2, r3
 800950e:	d0a0      	beq.n	8009452 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
	...

0800951c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800951c:	b480      	push	{r7}
 800951e:	b097      	sub	sp, #92	@ 0x5c
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	4613      	mov	r3, r2
 8009528:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	88fa      	ldrh	r2, [r7, #6]
 8009534:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	88fa      	ldrh	r2, [r7, #6]
 800953c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800954e:	d10e      	bne.n	800956e <UART_Start_Receive_IT+0x52>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d105      	bne.n	8009564 <UART_Start_Receive_IT+0x48>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800955e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009562:	e02d      	b.n	80095c0 <UART_Start_Receive_IT+0xa4>
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	22ff      	movs	r2, #255	@ 0xff
 8009568:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800956c:	e028      	b.n	80095c0 <UART_Start_Receive_IT+0xa4>
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10d      	bne.n	8009592 <UART_Start_Receive_IT+0x76>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d104      	bne.n	8009588 <UART_Start_Receive_IT+0x6c>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	22ff      	movs	r2, #255	@ 0xff
 8009582:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009586:	e01b      	b.n	80095c0 <UART_Start_Receive_IT+0xa4>
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	227f      	movs	r2, #127	@ 0x7f
 800958c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009590:	e016      	b.n	80095c0 <UART_Start_Receive_IT+0xa4>
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800959a:	d10d      	bne.n	80095b8 <UART_Start_Receive_IT+0x9c>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d104      	bne.n	80095ae <UART_Start_Receive_IT+0x92>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	227f      	movs	r2, #127	@ 0x7f
 80095a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80095ac:	e008      	b.n	80095c0 <UART_Start_Receive_IT+0xa4>
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	223f      	movs	r2, #63	@ 0x3f
 80095b2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80095b6:	e003      	b.n	80095c0 <UART_Start_Receive_IT+0xa4>
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2222      	movs	r2, #34	@ 0x22
 80095cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	3308      	adds	r3, #8
 80095d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095da:	e853 3f00 	ldrex	r3, [r3]
 80095de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e2:	f043 0301 	orr.w	r3, r3, #1
 80095e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3308      	adds	r3, #8
 80095ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80095f0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80095f2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80095f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095f8:	e841 2300 	strex	r3, r2, [r1]
 80095fc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80095fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1e5      	bne.n	80095d0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800960c:	d107      	bne.n	800961e <UART_Start_Receive_IT+0x102>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d103      	bne.n	800961e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	4a21      	ldr	r2, [pc, #132]	@ (80096a0 <UART_Start_Receive_IT+0x184>)
 800961a:	669a      	str	r2, [r3, #104]	@ 0x68
 800961c:	e002      	b.n	8009624 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	4a20      	ldr	r2, [pc, #128]	@ (80096a4 <UART_Start_Receive_IT+0x188>)
 8009622:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d019      	beq.n	8009660 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009634:	e853 3f00 	ldrex	r3, [r3]
 8009638:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800963a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800963c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009640:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	461a      	mov	r2, r3
 8009648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800964a:	637b      	str	r3, [r7, #52]	@ 0x34
 800964c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009650:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009652:	e841 2300 	strex	r3, r2, [r1]
 8009656:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1e6      	bne.n	800962c <UART_Start_Receive_IT+0x110>
 800965e:	e018      	b.n	8009692 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	e853 3f00 	ldrex	r3, [r3]
 800966c:	613b      	str	r3, [r7, #16]
   return(result);
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f043 0320 	orr.w	r3, r3, #32
 8009674:	653b      	str	r3, [r7, #80]	@ 0x50
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	461a      	mov	r2, r3
 800967c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800967e:	623b      	str	r3, [r7, #32]
 8009680:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009682:	69f9      	ldr	r1, [r7, #28]
 8009684:	6a3a      	ldr	r2, [r7, #32]
 8009686:	e841 2300 	strex	r3, r2, [r1]
 800968a:	61bb      	str	r3, [r7, #24]
   return(result);
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1e6      	bne.n	8009660 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	375c      	adds	r7, #92	@ 0x5c
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr
 80096a0:	080099ad 	.word	0x080099ad
 80096a4:	080097f1 	.word	0x080097f1

080096a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b095      	sub	sp, #84	@ 0x54
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096b8:	e853 3f00 	ldrex	r3, [r3]
 80096bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80096d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096d6:	e841 2300 	strex	r3, r2, [r1]
 80096da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1e6      	bne.n	80096b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	3308      	adds	r3, #8
 80096e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	e853 3f00 	ldrex	r3, [r3]
 80096f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	f023 0301 	bic.w	r3, r3, #1
 80096f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	3308      	adds	r3, #8
 8009700:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009702:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009704:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009706:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009708:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800970a:	e841 2300 	strex	r3, r2, [r1]
 800970e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1e5      	bne.n	80096e2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800971a:	2b01      	cmp	r3, #1
 800971c:	d118      	bne.n	8009750 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	e853 3f00 	ldrex	r3, [r3]
 800972a:	60bb      	str	r3, [r7, #8]
   return(result);
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	f023 0310 	bic.w	r3, r3, #16
 8009732:	647b      	str	r3, [r7, #68]	@ 0x44
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	461a      	mov	r2, r3
 800973a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800973c:	61bb      	str	r3, [r7, #24]
 800973e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009740:	6979      	ldr	r1, [r7, #20]
 8009742:	69ba      	ldr	r2, [r7, #24]
 8009744:	e841 2300 	strex	r3, r2, [r1]
 8009748:	613b      	str	r3, [r7, #16]
   return(result);
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1e6      	bne.n	800971e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2220      	movs	r2, #32
 8009754:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009764:	bf00      	nop
 8009766:	3754      	adds	r7, #84	@ 0x54
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800977c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f7ff fa3e 	bl	8008c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009794:	bf00      	nop
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b088      	sub	sp, #32
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	e853 3f00 	ldrex	r3, [r3]
 80097b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097b8:	61fb      	str	r3, [r7, #28]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	61bb      	str	r3, [r7, #24]
 80097c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c6:	6979      	ldr	r1, [r7, #20]
 80097c8:	69ba      	ldr	r2, [r7, #24]
 80097ca:	e841 2300 	strex	r3, r2, [r1]
 80097ce:	613b      	str	r3, [r7, #16]
   return(result);
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1e6      	bne.n	80097a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2220      	movs	r2, #32
 80097da:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7ff fa0a 	bl	8008bfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097e8:	bf00      	nop
 80097ea:	3720      	adds	r7, #32
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b09c      	sub	sp, #112	@ 0x70
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009808:	2b22      	cmp	r3, #34	@ 0x22
 800980a:	f040 80be 	bne.w	800998a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009814:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009818:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800981c:	b2d9      	uxtb	r1, r3
 800981e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009822:	b2da      	uxtb	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009828:	400a      	ands	r2, r1
 800982a:	b2d2      	uxtb	r2, r2
 800982c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009832:	1c5a      	adds	r2, r3, #1
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800983e:	b29b      	uxth	r3, r3
 8009840:	3b01      	subs	r3, #1
 8009842:	b29a      	uxth	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009850:	b29b      	uxth	r3, r3
 8009852:	2b00      	cmp	r3, #0
 8009854:	f040 80a3 	bne.w	800999e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009860:	e853 3f00 	ldrex	r3, [r3]
 8009864:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009868:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800986c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	461a      	mov	r2, r3
 8009874:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009876:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009878:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800987c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800987e:	e841 2300 	strex	r3, r2, [r1]
 8009882:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009884:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1e6      	bne.n	8009858 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3308      	adds	r3, #8
 8009890:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009894:	e853 3f00 	ldrex	r3, [r3]
 8009898:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800989a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800989c:	f023 0301 	bic.w	r3, r3, #1
 80098a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	3308      	adds	r3, #8
 80098a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80098aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80098ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098b2:	e841 2300 	strex	r3, r2, [r1]
 80098b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d1e5      	bne.n	800988a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2220      	movs	r2, #32
 80098c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a34      	ldr	r2, [pc, #208]	@ (80099a8 <UART_RxISR_8BIT+0x1b8>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d01f      	beq.n	800991c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d018      	beq.n	800991c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f2:	e853 3f00 	ldrex	r3, [r3]
 80098f6:	623b      	str	r3, [r7, #32]
   return(result);
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80098fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	461a      	mov	r2, r3
 8009906:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009908:	633b      	str	r3, [r7, #48]	@ 0x30
 800990a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800990e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009910:	e841 2300 	strex	r3, r2, [r1]
 8009914:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1e6      	bne.n	80098ea <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009920:	2b01      	cmp	r3, #1
 8009922:	d12e      	bne.n	8009982 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	e853 3f00 	ldrex	r3, [r3]
 8009936:	60fb      	str	r3, [r7, #12]
   return(result);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f023 0310 	bic.w	r3, r3, #16
 800993e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	461a      	mov	r2, r3
 8009946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009948:	61fb      	str	r3, [r7, #28]
 800994a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994c:	69b9      	ldr	r1, [r7, #24]
 800994e:	69fa      	ldr	r2, [r7, #28]
 8009950:	e841 2300 	strex	r3, r2, [r1]
 8009954:	617b      	str	r3, [r7, #20]
   return(result);
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1e6      	bne.n	800992a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	69db      	ldr	r3, [r3, #28]
 8009962:	f003 0310 	and.w	r3, r3, #16
 8009966:	2b10      	cmp	r3, #16
 8009968:	d103      	bne.n	8009972 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2210      	movs	r2, #16
 8009970:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009978:	4619      	mov	r1, r3
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7ff f952 	bl	8008c24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009980:	e00d      	b.n	800999e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7f7 fcba 	bl	80012fc <HAL_UART_RxCpltCallback>
}
 8009988:	e009      	b.n	800999e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	8b1b      	ldrh	r3, [r3, #24]
 8009990:	b29a      	uxth	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f042 0208 	orr.w	r2, r2, #8
 800999a:	b292      	uxth	r2, r2
 800999c:	831a      	strh	r2, [r3, #24]
}
 800999e:	bf00      	nop
 80099a0:	3770      	adds	r7, #112	@ 0x70
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	40008000 	.word	0x40008000

080099ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b09c      	sub	sp, #112	@ 0x70
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099c4:	2b22      	cmp	r3, #34	@ 0x22
 80099c6:	f040 80be 	bne.w	8009b46 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80099d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80099da:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80099de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80099e2:	4013      	ands	r3, r2
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80099e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099ee:	1c9a      	adds	r2, r3, #2
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	3b01      	subs	r3, #1
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f040 80a3 	bne.w	8009b5a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a1c:	e853 3f00 	ldrex	r3, [r3]
 8009a20:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009a22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a28:	667b      	str	r3, [r7, #100]	@ 0x64
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a32:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a34:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a36:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009a38:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a3a:	e841 2300 	strex	r3, r2, [r1]
 8009a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009a40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1e6      	bne.n	8009a14 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	3308      	adds	r3, #8
 8009a4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a50:	e853 3f00 	ldrex	r3, [r3]
 8009a54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a58:	f023 0301 	bic.w	r3, r3, #1
 8009a5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3308      	adds	r3, #8
 8009a64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009a66:	643a      	str	r2, [r7, #64]	@ 0x40
 8009a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a6e:	e841 2300 	strex	r3, r2, [r1]
 8009a72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1e5      	bne.n	8009a46 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2220      	movs	r2, #32
 8009a7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a34      	ldr	r2, [pc, #208]	@ (8009b64 <UART_RxISR_16BIT+0x1b8>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d01f      	beq.n	8009ad8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d018      	beq.n	8009ad8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aac:	6a3b      	ldr	r3, [r7, #32]
 8009aae:	e853 3f00 	ldrex	r3, [r3]
 8009ab2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009aba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ac6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009aca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009acc:	e841 2300 	strex	r3, r2, [r1]
 8009ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1e6      	bne.n	8009aa6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d12e      	bne.n	8009b3e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	e853 3f00 	ldrex	r3, [r3]
 8009af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	f023 0310 	bic.w	r3, r3, #16
 8009afa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	461a      	mov	r2, r3
 8009b02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009b04:	61bb      	str	r3, [r7, #24]
 8009b06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b08:	6979      	ldr	r1, [r7, #20]
 8009b0a:	69ba      	ldr	r2, [r7, #24]
 8009b0c:	e841 2300 	strex	r3, r2, [r1]
 8009b10:	613b      	str	r3, [r7, #16]
   return(result);
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1e6      	bne.n	8009ae6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	69db      	ldr	r3, [r3, #28]
 8009b1e:	f003 0310 	and.w	r3, r3, #16
 8009b22:	2b10      	cmp	r3, #16
 8009b24:	d103      	bne.n	8009b2e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2210      	movs	r2, #16
 8009b2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7ff f874 	bl	8008c24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b3c:	e00d      	b.n	8009b5a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7f7 fbdc 	bl	80012fc <HAL_UART_RxCpltCallback>
}
 8009b44:	e009      	b.n	8009b5a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	8b1b      	ldrh	r3, [r3, #24]
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f042 0208 	orr.w	r2, r2, #8
 8009b56:	b292      	uxth	r2, r2
 8009b58:	831a      	strh	r2, [r3, #24]
}
 8009b5a:	bf00      	nop
 8009b5c:	3770      	adds	r7, #112	@ 0x70
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	40008000 	.word	0x40008000

08009b68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <__NVIC_SetPriority>:
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	4603      	mov	r3, r0
 8009b84:	6039      	str	r1, [r7, #0]
 8009b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	db0a      	blt.n	8009ba6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	b2da      	uxtb	r2, r3
 8009b94:	490c      	ldr	r1, [pc, #48]	@ (8009bc8 <__NVIC_SetPriority+0x4c>)
 8009b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b9a:	0112      	lsls	r2, r2, #4
 8009b9c:	b2d2      	uxtb	r2, r2
 8009b9e:	440b      	add	r3, r1
 8009ba0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009ba4:	e00a      	b.n	8009bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	4908      	ldr	r1, [pc, #32]	@ (8009bcc <__NVIC_SetPriority+0x50>)
 8009bac:	79fb      	ldrb	r3, [r7, #7]
 8009bae:	f003 030f 	and.w	r3, r3, #15
 8009bb2:	3b04      	subs	r3, #4
 8009bb4:	0112      	lsls	r2, r2, #4
 8009bb6:	b2d2      	uxtb	r2, r2
 8009bb8:	440b      	add	r3, r1
 8009bba:	761a      	strb	r2, [r3, #24]
}
 8009bbc:	bf00      	nop
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr
 8009bc8:	e000e100 	.word	0xe000e100
 8009bcc:	e000ed00 	.word	0xe000ed00

08009bd0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009bd4:	4b05      	ldr	r3, [pc, #20]	@ (8009bec <SysTick_Handler+0x1c>)
 8009bd6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009bd8:	f001 fec6 	bl	800b968 <xTaskGetSchedulerState>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d001      	beq.n	8009be6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009be2:	f002 fcc1 	bl	800c568 <xPortSysTickHandler>
  }
}
 8009be6:	bf00      	nop
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	e000e010 	.word	0xe000e010

08009bf0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	f06f 0004 	mvn.w	r0, #4
 8009bfa:	f7ff ffbf 	bl	8009b7c <__NVIC_SetPriority>
#endif
}
 8009bfe:	bf00      	nop
 8009c00:	bd80      	pop	{r7, pc}
	...

08009c04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c0a:	f3ef 8305 	mrs	r3, IPSR
 8009c0e:	603b      	str	r3, [r7, #0]
  return(result);
 8009c10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d003      	beq.n	8009c1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009c16:	f06f 0305 	mvn.w	r3, #5
 8009c1a:	607b      	str	r3, [r7, #4]
 8009c1c:	e00c      	b.n	8009c38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8009c48 <osKernelInitialize+0x44>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d105      	bne.n	8009c32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009c26:	4b08      	ldr	r3, [pc, #32]	@ (8009c48 <osKernelInitialize+0x44>)
 8009c28:	2201      	movs	r2, #1
 8009c2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	607b      	str	r3, [r7, #4]
 8009c30:	e002      	b.n	8009c38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009c32:	f04f 33ff 	mov.w	r3, #4294967295
 8009c36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009c38:	687b      	ldr	r3, [r7, #4]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	20000390 	.word	0x20000390

08009c4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c52:	f3ef 8305 	mrs	r3, IPSR
 8009c56:	603b      	str	r3, [r7, #0]
  return(result);
 8009c58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d003      	beq.n	8009c66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009c5e:	f06f 0305 	mvn.w	r3, #5
 8009c62:	607b      	str	r3, [r7, #4]
 8009c64:	e010      	b.n	8009c88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009c66:	4b0b      	ldr	r3, [pc, #44]	@ (8009c94 <osKernelStart+0x48>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d109      	bne.n	8009c82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009c6e:	f7ff ffbf 	bl	8009bf0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009c72:	4b08      	ldr	r3, [pc, #32]	@ (8009c94 <osKernelStart+0x48>)
 8009c74:	2202      	movs	r2, #2
 8009c76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009c78:	f001 fa12 	bl	800b0a0 <vTaskStartScheduler>
      stat = osOK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	607b      	str	r3, [r7, #4]
 8009c80:	e002      	b.n	8009c88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009c82:	f04f 33ff 	mov.w	r3, #4294967295
 8009c86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009c88:	687b      	ldr	r3, [r7, #4]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	20000390 	.word	0x20000390

08009c98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b08e      	sub	sp, #56	@ 0x38
 8009c9c:	af04      	add	r7, sp, #16
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ca8:	f3ef 8305 	mrs	r3, IPSR
 8009cac:	617b      	str	r3, [r7, #20]
  return(result);
 8009cae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d17e      	bne.n	8009db2 <osThreadNew+0x11a>
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d07b      	beq.n	8009db2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009cba:	2380      	movs	r3, #128	@ 0x80
 8009cbc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009cbe:	2318      	movs	r3, #24
 8009cc0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d045      	beq.n	8009d5e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d002      	beq.n	8009ce0 <osThreadNew+0x48>
        name = attr->name;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	699b      	ldr	r3, [r3, #24]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	699b      	ldr	r3, [r3, #24]
 8009cec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d008      	beq.n	8009d06 <osThreadNew+0x6e>
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	2b38      	cmp	r3, #56	@ 0x38
 8009cf8:	d805      	bhi.n	8009d06 <osThreadNew+0x6e>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	f003 0301 	and.w	r3, r3, #1
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d001      	beq.n	8009d0a <osThreadNew+0x72>
        return (NULL);
 8009d06:	2300      	movs	r3, #0
 8009d08:	e054      	b.n	8009db4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	695b      	ldr	r3, [r3, #20]
 8009d16:	089b      	lsrs	r3, r3, #2
 8009d18:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00e      	beq.n	8009d40 <osThreadNew+0xa8>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	2ba7      	cmp	r3, #167	@ 0xa7
 8009d28:	d90a      	bls.n	8009d40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d006      	beq.n	8009d40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d002      	beq.n	8009d40 <osThreadNew+0xa8>
        mem = 1;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	61bb      	str	r3, [r7, #24]
 8009d3e:	e010      	b.n	8009d62 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10c      	bne.n	8009d62 <osThreadNew+0xca>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d108      	bne.n	8009d62 <osThreadNew+0xca>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d104      	bne.n	8009d62 <osThreadNew+0xca>
          mem = 0;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	61bb      	str	r3, [r7, #24]
 8009d5c:	e001      	b.n	8009d62 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d110      	bne.n	8009d8a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d70:	9202      	str	r2, [sp, #8]
 8009d72:	9301      	str	r3, [sp, #4]
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	6a3a      	ldr	r2, [r7, #32]
 8009d7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f000 ff9a 	bl	800acb8 <xTaskCreateStatic>
 8009d84:	4603      	mov	r3, r0
 8009d86:	613b      	str	r3, [r7, #16]
 8009d88:	e013      	b.n	8009db2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d110      	bne.n	8009db2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009d90:	6a3b      	ldr	r3, [r7, #32]
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	f107 0310 	add.w	r3, r7, #16
 8009d98:	9301      	str	r3, [sp, #4]
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	9300      	str	r3, [sp, #0]
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 ffe8 	bl	800ad78 <xTaskCreate>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d001      	beq.n	8009db2 <osThreadNew+0x11a>
            hTask = NULL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009db2:	693b      	ldr	r3, [r7, #16]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3728      	adds	r7, #40	@ 0x28
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dc4:	f3ef 8305 	mrs	r3, IPSR
 8009dc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8009dca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d003      	beq.n	8009dd8 <osDelay+0x1c>
    stat = osErrorISR;
 8009dd0:	f06f 0305 	mvn.w	r3, #5
 8009dd4:	60fb      	str	r3, [r7, #12]
 8009dd6:	e007      	b.n	8009de8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d002      	beq.n	8009de8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f001 f926 	bl	800b034 <vTaskDelay>
    }
  }

  return (stat);
 8009de8:	68fb      	ldr	r3, [r7, #12]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b08a      	sub	sp, #40	@ 0x28
 8009df6:	af02      	add	r7, sp, #8
 8009df8:	60f8      	str	r0, [r7, #12]
 8009dfa:	60b9      	str	r1, [r7, #8]
 8009dfc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e02:	f3ef 8305 	mrs	r3, IPSR
 8009e06:	613b      	str	r3, [r7, #16]
  return(result);
 8009e08:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d175      	bne.n	8009efa <osSemaphoreNew+0x108>
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d072      	beq.n	8009efa <osSemaphoreNew+0x108>
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d86e      	bhi.n	8009efa <osSemaphoreNew+0x108>
    mem = -1;
 8009e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d015      	beq.n	8009e54 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d006      	beq.n	8009e3e <osSemaphoreNew+0x4c>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	2b4f      	cmp	r3, #79	@ 0x4f
 8009e36:	d902      	bls.n	8009e3e <osSemaphoreNew+0x4c>
        mem = 1;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	61bb      	str	r3, [r7, #24]
 8009e3c:	e00c      	b.n	8009e58 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d108      	bne.n	8009e58 <osSemaphoreNew+0x66>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d104      	bne.n	8009e58 <osSemaphoreNew+0x66>
          mem = 0;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	61bb      	str	r3, [r7, #24]
 8009e52:	e001      	b.n	8009e58 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009e54:	2300      	movs	r3, #0
 8009e56:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e5e:	d04c      	beq.n	8009efa <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d128      	bne.n	8009eb8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d10a      	bne.n	8009e82 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	2203      	movs	r2, #3
 8009e72:	9200      	str	r2, [sp, #0]
 8009e74:	2200      	movs	r2, #0
 8009e76:	2100      	movs	r1, #0
 8009e78:	2001      	movs	r0, #1
 8009e7a:	f000 f995 	bl	800a1a8 <xQueueGenericCreateStatic>
 8009e7e:	61f8      	str	r0, [r7, #28]
 8009e80:	e005      	b.n	8009e8e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009e82:	2203      	movs	r2, #3
 8009e84:	2100      	movs	r1, #0
 8009e86:	2001      	movs	r0, #1
 8009e88:	f000 fa0b 	bl	800a2a2 <xQueueGenericCreate>
 8009e8c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d022      	beq.n	8009eda <osSemaphoreNew+0xe8>
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d01f      	beq.n	8009eda <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	69f8      	ldr	r0, [r7, #28]
 8009ea2:	f000 facb 	bl	800a43c <xQueueGenericSend>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d016      	beq.n	8009eda <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009eac:	69f8      	ldr	r0, [r7, #28]
 8009eae:	f000 fd47 	bl	800a940 <vQueueDelete>
            hSemaphore = NULL;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	61fb      	str	r3, [r7, #28]
 8009eb6:	e010      	b.n	8009eda <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d108      	bne.n	8009ed0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	68b9      	ldr	r1, [r7, #8]
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f000 fa49 	bl	800a35e <xQueueCreateCountingSemaphoreStatic>
 8009ecc:	61f8      	str	r0, [r7, #28]
 8009ece:	e004      	b.n	8009eda <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009ed0:	68b9      	ldr	r1, [r7, #8]
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f000 fa7c 	bl	800a3d0 <xQueueCreateCountingSemaphore>
 8009ed8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00c      	beq.n	8009efa <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d003      	beq.n	8009eee <osSemaphoreNew+0xfc>
          name = attr->name;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	617b      	str	r3, [r7, #20]
 8009eec:	e001      	b.n	8009ef2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009ef2:	6979      	ldr	r1, [r7, #20]
 8009ef4:	69f8      	ldr	r0, [r7, #28]
 8009ef6:	f000 fe57 	bl	800aba8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009efa:	69fb      	ldr	r3, [r7, #28]
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3720      	adds	r7, #32
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	4a07      	ldr	r2, [pc, #28]	@ (8009f30 <vApplicationGetIdleTaskMemory+0x2c>)
 8009f14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	4a06      	ldr	r2, [pc, #24]	@ (8009f34 <vApplicationGetIdleTaskMemory+0x30>)
 8009f1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2280      	movs	r2, #128	@ 0x80
 8009f20:	601a      	str	r2, [r3, #0]
}
 8009f22:	bf00      	nop
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	20000394 	.word	0x20000394
 8009f34:	2000043c 	.word	0x2000043c

08009f38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	4a07      	ldr	r2, [pc, #28]	@ (8009f64 <vApplicationGetTimerTaskMemory+0x2c>)
 8009f48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	4a06      	ldr	r2, [pc, #24]	@ (8009f68 <vApplicationGetTimerTaskMemory+0x30>)
 8009f4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009f56:	601a      	str	r2, [r3, #0]
}
 8009f58:	bf00      	nop
 8009f5a:	3714      	adds	r7, #20
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr
 8009f64:	2000063c 	.word	0x2000063c
 8009f68:	200006e4 	.word	0x200006e4

08009f6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f103 0208 	add.w	r2, r3, #8
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f04f 32ff 	mov.w	r2, #4294967295
 8009f84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f103 0208 	add.w	r2, r3, #8
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f103 0208 	add.w	r2, r3, #8
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009fba:	bf00      	nop
 8009fbc:	370c      	adds	r7, #12
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr

08009fc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009fc6:	b480      	push	{r7}
 8009fc8:	b085      	sub	sp, #20
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	689a      	ldr	r2, [r3, #8]
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	1c5a      	adds	r2, r3, #1
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	601a      	str	r2, [r3, #0]
}
 800a002:	bf00      	nop
 800a004:	3714      	adds	r7, #20
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a00e:	b480      	push	{r7}
 800a010:	b085      	sub	sp, #20
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
 800a016:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a024:	d103      	bne.n	800a02e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	60fb      	str	r3, [r7, #12]
 800a02c:	e00c      	b.n	800a048 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	3308      	adds	r3, #8
 800a032:	60fb      	str	r3, [r7, #12]
 800a034:	e002      	b.n	800a03c <vListInsert+0x2e>
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	60fb      	str	r3, [r7, #12]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	429a      	cmp	r2, r3
 800a046:	d2f6      	bcs.n	800a036 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	685a      	ldr	r2, [r3, #4]
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	683a      	ldr	r2, [r7, #0]
 800a056:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	683a      	ldr	r2, [r7, #0]
 800a062:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	1c5a      	adds	r2, r3, #1
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	601a      	str	r2, [r3, #0]
}
 800a074:	bf00      	nop
 800a076:	3714      	adds	r7, #20
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a080:	b480      	push	{r7}
 800a082:	b085      	sub	sp, #20
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	6892      	ldr	r2, [r2, #8]
 800a096:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	6852      	ldr	r2, [r2, #4]
 800a0a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d103      	bne.n	800a0b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	689a      	ldr	r2, [r3, #8]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	1e5a      	subs	r2, r3, #1
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3714      	adds	r7, #20
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10b      	bne.n	800a100 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a0fa:	bf00      	nop
 800a0fc:	bf00      	nop
 800a0fe:	e7fd      	b.n	800a0fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a100:	f002 f9a2 	bl	800c448 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a10c:	68f9      	ldr	r1, [r7, #12]
 800a10e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a110:	fb01 f303 	mul.w	r3, r1, r3
 800a114:	441a      	add	r2, r3
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a130:	3b01      	subs	r3, #1
 800a132:	68f9      	ldr	r1, [r7, #12]
 800a134:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a136:	fb01 f303 	mul.w	r3, r1, r3
 800a13a:	441a      	add	r2, r3
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	22ff      	movs	r2, #255	@ 0xff
 800a144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	22ff      	movs	r2, #255	@ 0xff
 800a14c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d114      	bne.n	800a180 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d01a      	beq.n	800a194 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	3310      	adds	r3, #16
 800a162:	4618      	mov	r0, r3
 800a164:	f001 fa3a 	bl	800b5dc <xTaskRemoveFromEventList>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d012      	beq.n	800a194 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a16e:	4b0d      	ldr	r3, [pc, #52]	@ (800a1a4 <xQueueGenericReset+0xd0>)
 800a170:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	e009      	b.n	800a194 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	3310      	adds	r3, #16
 800a184:	4618      	mov	r0, r3
 800a186:	f7ff fef1 	bl	8009f6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	3324      	adds	r3, #36	@ 0x24
 800a18e:	4618      	mov	r0, r3
 800a190:	f7ff feec 	bl	8009f6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a194:	f002 f98a 	bl	800c4ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a198:	2301      	movs	r3, #1
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	e000ed04 	.word	0xe000ed04

0800a1a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b08e      	sub	sp, #56	@ 0x38
 800a1ac:	af02      	add	r7, sp, #8
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
 800a1b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10b      	bne.n	800a1d4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c0:	f383 8811 	msr	BASEPRI, r3
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a1ce:	bf00      	nop
 800a1d0:	bf00      	nop
 800a1d2:	e7fd      	b.n	800a1d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d10b      	bne.n	800a1f2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a1da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1de:	f383 8811 	msr	BASEPRI, r3
 800a1e2:	f3bf 8f6f 	isb	sy
 800a1e6:	f3bf 8f4f 	dsb	sy
 800a1ea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a1ec:	bf00      	nop
 800a1ee:	bf00      	nop
 800a1f0:	e7fd      	b.n	800a1ee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d002      	beq.n	800a1fe <xQueueGenericCreateStatic+0x56>
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d001      	beq.n	800a202 <xQueueGenericCreateStatic+0x5a>
 800a1fe:	2301      	movs	r3, #1
 800a200:	e000      	b.n	800a204 <xQueueGenericCreateStatic+0x5c>
 800a202:	2300      	movs	r3, #0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10b      	bne.n	800a220 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a20c:	f383 8811 	msr	BASEPRI, r3
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	623b      	str	r3, [r7, #32]
}
 800a21a:	bf00      	nop
 800a21c:	bf00      	nop
 800a21e:	e7fd      	b.n	800a21c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d102      	bne.n	800a22c <xQueueGenericCreateStatic+0x84>
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d101      	bne.n	800a230 <xQueueGenericCreateStatic+0x88>
 800a22c:	2301      	movs	r3, #1
 800a22e:	e000      	b.n	800a232 <xQueueGenericCreateStatic+0x8a>
 800a230:	2300      	movs	r3, #0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d10b      	bne.n	800a24e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	61fb      	str	r3, [r7, #28]
}
 800a248:	bf00      	nop
 800a24a:	bf00      	nop
 800a24c:	e7fd      	b.n	800a24a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a24e:	2350      	movs	r3, #80	@ 0x50
 800a250:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	2b50      	cmp	r3, #80	@ 0x50
 800a256:	d00b      	beq.n	800a270 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a25c:	f383 8811 	msr	BASEPRI, r3
 800a260:	f3bf 8f6f 	isb	sy
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	61bb      	str	r3, [r7, #24]
}
 800a26a:	bf00      	nop
 800a26c:	bf00      	nop
 800a26e:	e7fd      	b.n	800a26c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a270:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00d      	beq.n	800a298 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a27e:	2201      	movs	r2, #1
 800a280:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a284:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	4613      	mov	r3, r2
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	68b9      	ldr	r1, [r7, #8]
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f000 f840 	bl	800a318 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3730      	adds	r7, #48	@ 0x30
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b08a      	sub	sp, #40	@ 0x28
 800a2a6:	af02      	add	r7, sp, #8
 800a2a8:	60f8      	str	r0, [r7, #12]
 800a2aa:	60b9      	str	r1, [r7, #8]
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10b      	bne.n	800a2ce <xQueueGenericCreate+0x2c>
	__asm volatile
 800a2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ba:	f383 8811 	msr	BASEPRI, r3
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f3bf 8f4f 	dsb	sy
 800a2c6:	613b      	str	r3, [r7, #16]
}
 800a2c8:	bf00      	nop
 800a2ca:	bf00      	nop
 800a2cc:	e7fd      	b.n	800a2ca <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	fb02 f303 	mul.w	r3, r2, r3
 800a2d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	3350      	adds	r3, #80	@ 0x50
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f002 f9d5 	bl	800c68c <pvPortMalloc>
 800a2e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d011      	beq.n	800a30e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	3350      	adds	r3, #80	@ 0x50
 800a2f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a2fc:	79fa      	ldrb	r2, [r7, #7]
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	4613      	mov	r3, r2
 800a304:	697a      	ldr	r2, [r7, #20]
 800a306:	68b9      	ldr	r1, [r7, #8]
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f000 f805 	bl	800a318 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a30e:	69bb      	ldr	r3, [r7, #24]
	}
 800a310:	4618      	mov	r0, r3
 800a312:	3720      	adds	r7, #32
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
 800a324:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d103      	bne.n	800a334 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	69ba      	ldr	r2, [r7, #24]
 800a330:	601a      	str	r2, [r3, #0]
 800a332:	e002      	b.n	800a33a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	68ba      	ldr	r2, [r7, #8]
 800a344:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a346:	2101      	movs	r1, #1
 800a348:	69b8      	ldr	r0, [r7, #24]
 800a34a:	f7ff fec3 	bl	800a0d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	78fa      	ldrb	r2, [r7, #3]
 800a352:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a356:	bf00      	nop
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b08a      	sub	sp, #40	@ 0x28
 800a362:	af02      	add	r7, sp, #8
 800a364:	60f8      	str	r0, [r7, #12]
 800a366:	60b9      	str	r1, [r7, #8]
 800a368:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d10b      	bne.n	800a388 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800a370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	61bb      	str	r3, [r7, #24]
}
 800a382:	bf00      	nop
 800a384:	bf00      	nop
 800a386:	e7fd      	b.n	800a384 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d90b      	bls.n	800a3a8 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800a390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a394:	f383 8811 	msr	BASEPRI, r3
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	617b      	str	r3, [r7, #20]
}
 800a3a2:	bf00      	nop
 800a3a4:	bf00      	nop
 800a3a6:	e7fd      	b.n	800a3a4 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	f7ff fef8 	bl	800a1a8 <xQueueGenericCreateStatic>
 800a3b8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d002      	beq.n	800a3c6 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	68ba      	ldr	r2, [r7, #8]
 800a3c4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a3c6:	69fb      	ldr	r3, [r7, #28]
	}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3720      	adds	r7, #32
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b086      	sub	sp, #24
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d10b      	bne.n	800a3f8 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800a3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e4:	f383 8811 	msr	BASEPRI, r3
 800a3e8:	f3bf 8f6f 	isb	sy
 800a3ec:	f3bf 8f4f 	dsb	sy
 800a3f0:	613b      	str	r3, [r7, #16]
}
 800a3f2:	bf00      	nop
 800a3f4:	bf00      	nop
 800a3f6:	e7fd      	b.n	800a3f4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d90b      	bls.n	800a418 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800a400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	60fb      	str	r3, [r7, #12]
}
 800a412:	bf00      	nop
 800a414:	bf00      	nop
 800a416:	e7fd      	b.n	800a414 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a418:	2202      	movs	r2, #2
 800a41a:	2100      	movs	r1, #0
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f7ff ff40 	bl	800a2a2 <xQueueGenericCreate>
 800a422:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d002      	beq.n	800a430 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	683a      	ldr	r2, [r7, #0]
 800a42e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a430:	697b      	ldr	r3, [r7, #20]
	}
 800a432:	4618      	mov	r0, r3
 800a434:	3718      	adds	r7, #24
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
	...

0800a43c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b08e      	sub	sp, #56	@ 0x38
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
 800a448:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a44a:	2300      	movs	r3, #0
 800a44c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10b      	bne.n	800a470 <xQueueGenericSend+0x34>
	__asm volatile
 800a458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a45c:	f383 8811 	msr	BASEPRI, r3
 800a460:	f3bf 8f6f 	isb	sy
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a46a:	bf00      	nop
 800a46c:	bf00      	nop
 800a46e:	e7fd      	b.n	800a46c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d103      	bne.n	800a47e <xQueueGenericSend+0x42>
 800a476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d101      	bne.n	800a482 <xQueueGenericSend+0x46>
 800a47e:	2301      	movs	r3, #1
 800a480:	e000      	b.n	800a484 <xQueueGenericSend+0x48>
 800a482:	2300      	movs	r3, #0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d10b      	bne.n	800a4a0 <xQueueGenericSend+0x64>
	__asm volatile
 800a488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48c:	f383 8811 	msr	BASEPRI, r3
 800a490:	f3bf 8f6f 	isb	sy
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a49a:	bf00      	nop
 800a49c:	bf00      	nop
 800a49e:	e7fd      	b.n	800a49c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	d103      	bne.n	800a4ae <xQueueGenericSend+0x72>
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d101      	bne.n	800a4b2 <xQueueGenericSend+0x76>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e000      	b.n	800a4b4 <xQueueGenericSend+0x78>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10b      	bne.n	800a4d0 <xQueueGenericSend+0x94>
	__asm volatile
 800a4b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4bc:	f383 8811 	msr	BASEPRI, r3
 800a4c0:	f3bf 8f6f 	isb	sy
 800a4c4:	f3bf 8f4f 	dsb	sy
 800a4c8:	623b      	str	r3, [r7, #32]
}
 800a4ca:	bf00      	nop
 800a4cc:	bf00      	nop
 800a4ce:	e7fd      	b.n	800a4cc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4d0:	f001 fa4a 	bl	800b968 <xTaskGetSchedulerState>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d102      	bne.n	800a4e0 <xQueueGenericSend+0xa4>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d101      	bne.n	800a4e4 <xQueueGenericSend+0xa8>
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e000      	b.n	800a4e6 <xQueueGenericSend+0xaa>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d10b      	bne.n	800a502 <xQueueGenericSend+0xc6>
	__asm volatile
 800a4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ee:	f383 8811 	msr	BASEPRI, r3
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	61fb      	str	r3, [r7, #28]
}
 800a4fc:	bf00      	nop
 800a4fe:	bf00      	nop
 800a500:	e7fd      	b.n	800a4fe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a502:	f001 ffa1 	bl	800c448 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a508:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a50e:	429a      	cmp	r2, r3
 800a510:	d302      	bcc.n	800a518 <xQueueGenericSend+0xdc>
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	2b02      	cmp	r3, #2
 800a516:	d129      	bne.n	800a56c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a518:	683a      	ldr	r2, [r7, #0]
 800a51a:	68b9      	ldr	r1, [r7, #8]
 800a51c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a51e:	f000 fa33 	bl	800a988 <prvCopyDataToQueue>
 800a522:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d010      	beq.n	800a54e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52e:	3324      	adds	r3, #36	@ 0x24
 800a530:	4618      	mov	r0, r3
 800a532:	f001 f853 	bl	800b5dc <xTaskRemoveFromEventList>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d013      	beq.n	800a564 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a53c:	4b3f      	ldr	r3, [pc, #252]	@ (800a63c <xQueueGenericSend+0x200>)
 800a53e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a542:	601a      	str	r2, [r3, #0]
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	e00a      	b.n	800a564 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a54e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a550:	2b00      	cmp	r3, #0
 800a552:	d007      	beq.n	800a564 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a554:	4b39      	ldr	r3, [pc, #228]	@ (800a63c <xQueueGenericSend+0x200>)
 800a556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a55a:	601a      	str	r2, [r3, #0]
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a564:	f001 ffa2 	bl	800c4ac <vPortExitCritical>
				return pdPASS;
 800a568:	2301      	movs	r3, #1
 800a56a:	e063      	b.n	800a634 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d103      	bne.n	800a57a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a572:	f001 ff9b 	bl	800c4ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a576:	2300      	movs	r3, #0
 800a578:	e05c      	b.n	800a634 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a57a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d106      	bne.n	800a58e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a580:	f107 0314 	add.w	r3, r7, #20
 800a584:	4618      	mov	r0, r3
 800a586:	f001 f88d 	bl	800b6a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a58a:	2301      	movs	r3, #1
 800a58c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a58e:	f001 ff8d 	bl	800c4ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a592:	f000 fdf5 	bl	800b180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a596:	f001 ff57 	bl	800c448 <vPortEnterCritical>
 800a59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a5a0:	b25b      	sxtb	r3, r3
 800a5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a6:	d103      	bne.n	800a5b0 <xQueueGenericSend+0x174>
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a5b6:	b25b      	sxtb	r3, r3
 800a5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5bc:	d103      	bne.n	800a5c6 <xQueueGenericSend+0x18a>
 800a5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a5c6:	f001 ff71 	bl	800c4ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5ca:	1d3a      	adds	r2, r7, #4
 800a5cc:	f107 0314 	add.w	r3, r7, #20
 800a5d0:	4611      	mov	r1, r2
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f001 f87c 	bl	800b6d0 <xTaskCheckForTimeOut>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d124      	bne.n	800a628 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a5de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a5e0:	f000 faca 	bl	800ab78 <prvIsQueueFull>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d018      	beq.n	800a61c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ec:	3310      	adds	r3, #16
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f000 ffa0 	bl	800b538 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a5f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a5fa:	f000 fa55 	bl	800aaa8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a5fe:	f000 fdcd 	bl	800b19c <xTaskResumeAll>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	f47f af7c 	bne.w	800a502 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a60a:	4b0c      	ldr	r3, [pc, #48]	@ (800a63c <xQueueGenericSend+0x200>)
 800a60c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a610:	601a      	str	r2, [r3, #0]
 800a612:	f3bf 8f4f 	dsb	sy
 800a616:	f3bf 8f6f 	isb	sy
 800a61a:	e772      	b.n	800a502 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a61c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a61e:	f000 fa43 	bl	800aaa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a622:	f000 fdbb 	bl	800b19c <xTaskResumeAll>
 800a626:	e76c      	b.n	800a502 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a628:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a62a:	f000 fa3d 	bl	800aaa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a62e:	f000 fdb5 	bl	800b19c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a632:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a634:	4618      	mov	r0, r3
 800a636:	3738      	adds	r7, #56	@ 0x38
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	e000ed04 	.word	0xe000ed04

0800a640 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b090      	sub	sp, #64	@ 0x40
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	607a      	str	r2, [r7, #4]
 800a64c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10b      	bne.n	800a670 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a66a:	bf00      	nop
 800a66c:	bf00      	nop
 800a66e:	e7fd      	b.n	800a66c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d103      	bne.n	800a67e <xQueueGenericSendFromISR+0x3e>
 800a676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <xQueueGenericSendFromISR+0x42>
 800a67e:	2301      	movs	r3, #1
 800a680:	e000      	b.n	800a684 <xQueueGenericSendFromISR+0x44>
 800a682:	2300      	movs	r3, #0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10b      	bne.n	800a6a0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a69a:	bf00      	nop
 800a69c:	bf00      	nop
 800a69e:	e7fd      	b.n	800a69c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d103      	bne.n	800a6ae <xQueueGenericSendFromISR+0x6e>
 800a6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d101      	bne.n	800a6b2 <xQueueGenericSendFromISR+0x72>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e000      	b.n	800a6b4 <xQueueGenericSendFromISR+0x74>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d10b      	bne.n	800a6d0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6bc:	f383 8811 	msr	BASEPRI, r3
 800a6c0:	f3bf 8f6f 	isb	sy
 800a6c4:	f3bf 8f4f 	dsb	sy
 800a6c8:	623b      	str	r3, [r7, #32]
}
 800a6ca:	bf00      	nop
 800a6cc:	bf00      	nop
 800a6ce:	e7fd      	b.n	800a6cc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6d0:	f001 ff9a 	bl	800c608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a6d4:	f3ef 8211 	mrs	r2, BASEPRI
 800a6d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6dc:	f383 8811 	msr	BASEPRI, r3
 800a6e0:	f3bf 8f6f 	isb	sy
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	61fa      	str	r2, [r7, #28]
 800a6ea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a6ec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6ee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d302      	bcc.n	800a702 <xQueueGenericSendFromISR+0xc2>
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	d12f      	bne.n	800a762 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a704:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a708:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a70e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a710:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a712:	683a      	ldr	r2, [r7, #0]
 800a714:	68b9      	ldr	r1, [r7, #8]
 800a716:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a718:	f000 f936 	bl	800a988 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a71c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a724:	d112      	bne.n	800a74c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d016      	beq.n	800a75c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a72e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a730:	3324      	adds	r3, #36	@ 0x24
 800a732:	4618      	mov	r0, r3
 800a734:	f000 ff52 	bl	800b5dc <xTaskRemoveFromEventList>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00e      	beq.n	800a75c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00b      	beq.n	800a75c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	601a      	str	r2, [r3, #0]
 800a74a:	e007      	b.n	800a75c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a74c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a750:	3301      	adds	r3, #1
 800a752:	b2db      	uxtb	r3, r3
 800a754:	b25a      	sxtb	r2, r3
 800a756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a75c:	2301      	movs	r3, #1
 800a75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a760:	e001      	b.n	800a766 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a762:	2300      	movs	r3, #0
 800a764:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a768:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a770:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a774:	4618      	mov	r0, r3
 800a776:	3740      	adds	r7, #64	@ 0x40
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b08c      	sub	sp, #48	@ 0x30
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a788:	2300      	movs	r3, #0
 800a78a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10b      	bne.n	800a7ae <xQueueReceive+0x32>
	__asm volatile
 800a796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	623b      	str	r3, [r7, #32]
}
 800a7a8:	bf00      	nop
 800a7aa:	bf00      	nop
 800a7ac:	e7fd      	b.n	800a7aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d103      	bne.n	800a7bc <xQueueReceive+0x40>
 800a7b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d101      	bne.n	800a7c0 <xQueueReceive+0x44>
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e000      	b.n	800a7c2 <xQueueReceive+0x46>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10b      	bne.n	800a7de <xQueueReceive+0x62>
	__asm volatile
 800a7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ca:	f383 8811 	msr	BASEPRI, r3
 800a7ce:	f3bf 8f6f 	isb	sy
 800a7d2:	f3bf 8f4f 	dsb	sy
 800a7d6:	61fb      	str	r3, [r7, #28]
}
 800a7d8:	bf00      	nop
 800a7da:	bf00      	nop
 800a7dc:	e7fd      	b.n	800a7da <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7de:	f001 f8c3 	bl	800b968 <xTaskGetSchedulerState>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d102      	bne.n	800a7ee <xQueueReceive+0x72>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d101      	bne.n	800a7f2 <xQueueReceive+0x76>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e000      	b.n	800a7f4 <xQueueReceive+0x78>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10b      	bne.n	800a810 <xQueueReceive+0x94>
	__asm volatile
 800a7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	61bb      	str	r3, [r7, #24]
}
 800a80a:	bf00      	nop
 800a80c:	bf00      	nop
 800a80e:	e7fd      	b.n	800a80c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a810:	f001 fe1a 	bl	800c448 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a818:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d01f      	beq.n	800a860 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a820:	68b9      	ldr	r1, [r7, #8]
 800a822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a824:	f000 f91a 	bl	800aa5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82a:	1e5a      	subs	r2, r3, #1
 800a82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a82e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00f      	beq.n	800a858 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a83a:	3310      	adds	r3, #16
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 fecd 	bl	800b5dc <xTaskRemoveFromEventList>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d007      	beq.n	800a858 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a848:	4b3c      	ldr	r3, [pc, #240]	@ (800a93c <xQueueReceive+0x1c0>)
 800a84a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	f3bf 8f4f 	dsb	sy
 800a854:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a858:	f001 fe28 	bl	800c4ac <vPortExitCritical>
				return pdPASS;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e069      	b.n	800a934 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d103      	bne.n	800a86e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a866:	f001 fe21 	bl	800c4ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a86a:	2300      	movs	r3, #0
 800a86c:	e062      	b.n	800a934 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a870:	2b00      	cmp	r3, #0
 800a872:	d106      	bne.n	800a882 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a874:	f107 0310 	add.w	r3, r7, #16
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 ff13 	bl	800b6a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a87e:	2301      	movs	r3, #1
 800a880:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a882:	f001 fe13 	bl	800c4ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a886:	f000 fc7b 	bl	800b180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a88a:	f001 fddd 	bl	800c448 <vPortEnterCritical>
 800a88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a890:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a894:	b25b      	sxtb	r3, r3
 800a896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a89a:	d103      	bne.n	800a8a4 <xQueueReceive+0x128>
 800a89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8aa:	b25b      	sxtb	r3, r3
 800a8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b0:	d103      	bne.n	800a8ba <xQueueReceive+0x13e>
 800a8b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8ba:	f001 fdf7 	bl	800c4ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8be:	1d3a      	adds	r2, r7, #4
 800a8c0:	f107 0310 	add.w	r3, r7, #16
 800a8c4:	4611      	mov	r1, r2
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f000 ff02 	bl	800b6d0 <xTaskCheckForTimeOut>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d123      	bne.n	800a91a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8d4:	f000 f93a 	bl	800ab4c <prvIsQueueEmpty>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d017      	beq.n	800a90e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e0:	3324      	adds	r3, #36	@ 0x24
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	4611      	mov	r1, r2
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f000 fe26 	bl	800b538 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8ee:	f000 f8db 	bl	800aaa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8f2:	f000 fc53 	bl	800b19c <xTaskResumeAll>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d189      	bne.n	800a810 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a8fc:	4b0f      	ldr	r3, [pc, #60]	@ (800a93c <xQueueReceive+0x1c0>)
 800a8fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	e780      	b.n	800a810 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a90e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a910:	f000 f8ca 	bl	800aaa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a914:	f000 fc42 	bl	800b19c <xTaskResumeAll>
 800a918:	e77a      	b.n	800a810 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a91a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a91c:	f000 f8c4 	bl	800aaa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a920:	f000 fc3c 	bl	800b19c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a924:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a926:	f000 f911 	bl	800ab4c <prvIsQueueEmpty>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f43f af6f 	beq.w	800a810 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a932:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a934:	4618      	mov	r0, r3
 800a936:	3730      	adds	r7, #48	@ 0x30
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	e000ed04 	.word	0xe000ed04

0800a940 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d10b      	bne.n	800a96a <vQueueDelete+0x2a>
	__asm volatile
 800a952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a956:	f383 8811 	msr	BASEPRI, r3
 800a95a:	f3bf 8f6f 	isb	sy
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	60bb      	str	r3, [r7, #8]
}
 800a964:	bf00      	nop
 800a966:	bf00      	nop
 800a968:	e7fd      	b.n	800a966 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f000 f946 	bl	800abfc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a976:	2b00      	cmp	r3, #0
 800a978:	d102      	bne.n	800a980 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f001 ff54 	bl	800c828 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a980:	bf00      	nop
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b086      	sub	sp, #24
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a994:	2300      	movs	r3, #0
 800a996:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a99c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10d      	bne.n	800a9c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d14d      	bne.n	800aa4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 fff6 	bl	800b9a4 <xTaskPriorityDisinherit>
 800a9b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	609a      	str	r2, [r3, #8]
 800a9c0:	e043      	b.n	800aa4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d119      	bne.n	800a9fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6858      	ldr	r0, [r3, #4]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	68b9      	ldr	r1, [r7, #8]
 800a9d4:	f002 f8e4 	bl	800cba0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	685a      	ldr	r2, [r3, #4]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9e0:	441a      	add	r2, r3
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	685a      	ldr	r2, [r3, #4]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	689b      	ldr	r3, [r3, #8]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d32b      	bcc.n	800aa4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	605a      	str	r2, [r3, #4]
 800a9fa:	e026      	b.n	800aa4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	68d8      	ldr	r0, [r3, #12]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa04:	461a      	mov	r2, r3
 800aa06:	68b9      	ldr	r1, [r7, #8]
 800aa08:	f002 f8ca 	bl	800cba0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	68da      	ldr	r2, [r3, #12]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa14:	425b      	negs	r3, r3
 800aa16:	441a      	add	r2, r3
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	68da      	ldr	r2, [r3, #12]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d207      	bcs.n	800aa38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	689a      	ldr	r2, [r3, #8]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa30:	425b      	negs	r3, r3
 800aa32:	441a      	add	r2, r3
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d105      	bne.n	800aa4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	3b01      	subs	r3, #1
 800aa48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	1c5a      	adds	r2, r3, #1
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800aa52:	697b      	ldr	r3, [r7, #20]
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3718      	adds	r7, #24
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d018      	beq.n	800aaa0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	68da      	ldr	r2, [r3, #12]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa76:	441a      	add	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	68da      	ldr	r2, [r3, #12]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d303      	bcc.n	800aa90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	68d9      	ldr	r1, [r3, #12]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa98:	461a      	mov	r2, r3
 800aa9a:	6838      	ldr	r0, [r7, #0]
 800aa9c:	f002 f880 	bl	800cba0 <memcpy>
	}
}
 800aaa0:	bf00      	nop
 800aaa2:	3708      	adds	r7, #8
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aab0:	f001 fcca 	bl	800c448 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aaba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aabc:	e011      	b.n	800aae2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d012      	beq.n	800aaec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	3324      	adds	r3, #36	@ 0x24
 800aaca:	4618      	mov	r0, r3
 800aacc:	f000 fd86 	bl	800b5dc <xTaskRemoveFromEventList>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d001      	beq.n	800aada <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aad6:	f000 fe5f 	bl	800b798 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aada:	7bfb      	ldrb	r3, [r7, #15]
 800aadc:	3b01      	subs	r3, #1
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	dce9      	bgt.n	800aabe <prvUnlockQueue+0x16>
 800aaea:	e000      	b.n	800aaee <prvUnlockQueue+0x46>
					break;
 800aaec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	22ff      	movs	r2, #255	@ 0xff
 800aaf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800aaf6:	f001 fcd9 	bl	800c4ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aafa:	f001 fca5 	bl	800c448 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab06:	e011      	b.n	800ab2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d012      	beq.n	800ab36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	3310      	adds	r3, #16
 800ab14:	4618      	mov	r0, r3
 800ab16:	f000 fd61 	bl	800b5dc <xTaskRemoveFromEventList>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d001      	beq.n	800ab24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ab20:	f000 fe3a 	bl	800b798 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ab24:	7bbb      	ldrb	r3, [r7, #14]
 800ab26:	3b01      	subs	r3, #1
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	dce9      	bgt.n	800ab08 <prvUnlockQueue+0x60>
 800ab34:	e000      	b.n	800ab38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ab36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	22ff      	movs	r2, #255	@ 0xff
 800ab3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ab40:	f001 fcb4 	bl	800c4ac <vPortExitCritical>
}
 800ab44:	bf00      	nop
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab54:	f001 fc78 	bl	800c448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d102      	bne.n	800ab66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ab60:	2301      	movs	r3, #1
 800ab62:	60fb      	str	r3, [r7, #12]
 800ab64:	e001      	b.n	800ab6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ab66:	2300      	movs	r3, #0
 800ab68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab6a:	f001 fc9f 	bl	800c4ac <vPortExitCritical>

	return xReturn;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3710      	adds	r7, #16
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab80:	f001 fc62 	bl	800c448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d102      	bne.n	800ab96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab90:	2301      	movs	r3, #1
 800ab92:	60fb      	str	r3, [r7, #12]
 800ab94:	e001      	b.n	800ab9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ab96:	2300      	movs	r3, #0
 800ab98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab9a:	f001 fc87 	bl	800c4ac <vPortExitCritical>

	return xReturn;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3710      	adds	r7, #16
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aba8:	b480      	push	{r7}
 800abaa:	b085      	sub	sp, #20
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abb2:	2300      	movs	r3, #0
 800abb4:	60fb      	str	r3, [r7, #12]
 800abb6:	e014      	b.n	800abe2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800abb8:	4a0f      	ldr	r2, [pc, #60]	@ (800abf8 <vQueueAddToRegistry+0x50>)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10b      	bne.n	800abdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800abc4:	490c      	ldr	r1, [pc, #48]	@ (800abf8 <vQueueAddToRegistry+0x50>)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	683a      	ldr	r2, [r7, #0]
 800abca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800abce:	4a0a      	ldr	r2, [pc, #40]	@ (800abf8 <vQueueAddToRegistry+0x50>)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	00db      	lsls	r3, r3, #3
 800abd4:	4413      	add	r3, r2
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800abda:	e006      	b.n	800abea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	3301      	adds	r3, #1
 800abe0:	60fb      	str	r3, [r7, #12]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2b07      	cmp	r3, #7
 800abe6:	d9e7      	bls.n	800abb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800abe8:	bf00      	nop
 800abea:	bf00      	nop
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	20000ae4 	.word	0x20000ae4

0800abfc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac04:	2300      	movs	r3, #0
 800ac06:	60fb      	str	r3, [r7, #12]
 800ac08:	e016      	b.n	800ac38 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ac0a:	4a10      	ldr	r2, [pc, #64]	@ (800ac4c <vQueueUnregisterQueue+0x50>)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	4413      	add	r3, r2
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d10b      	bne.n	800ac32 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ac1a:	4a0c      	ldr	r2, [pc, #48]	@ (800ac4c <vQueueUnregisterQueue+0x50>)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2100      	movs	r1, #0
 800ac20:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ac24:	4a09      	ldr	r2, [pc, #36]	@ (800ac4c <vQueueUnregisterQueue+0x50>)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	00db      	lsls	r3, r3, #3
 800ac2a:	4413      	add	r3, r2
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	605a      	str	r2, [r3, #4]
				break;
 800ac30:	e006      	b.n	800ac40 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	3301      	adds	r3, #1
 800ac36:	60fb      	str	r3, [r7, #12]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2b07      	cmp	r3, #7
 800ac3c:	d9e5      	bls.n	800ac0a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ac3e:	bf00      	nop
 800ac40:	bf00      	nop
 800ac42:	3714      	adds	r7, #20
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr
 800ac4c:	20000ae4 	.word	0x20000ae4

0800ac50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b086      	sub	sp, #24
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ac60:	f001 fbf2 	bl	800c448 <vPortEnterCritical>
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac6a:	b25b      	sxtb	r3, r3
 800ac6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac70:	d103      	bne.n	800ac7a <vQueueWaitForMessageRestricted+0x2a>
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac80:	b25b      	sxtb	r3, r3
 800ac82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac86:	d103      	bne.n	800ac90 <vQueueWaitForMessageRestricted+0x40>
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac90:	f001 fc0c 	bl	800c4ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d106      	bne.n	800acaa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	3324      	adds	r3, #36	@ 0x24
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	68b9      	ldr	r1, [r7, #8]
 800aca4:	4618      	mov	r0, r3
 800aca6:	f000 fc6d 	bl	800b584 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800acaa:	6978      	ldr	r0, [r7, #20]
 800acac:	f7ff fefc 	bl	800aaa8 <prvUnlockQueue>
	}
 800acb0:	bf00      	nop
 800acb2:	3718      	adds	r7, #24
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b08e      	sub	sp, #56	@ 0x38
 800acbc:	af04      	add	r7, sp, #16
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	607a      	str	r2, [r7, #4]
 800acc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800acc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10b      	bne.n	800ace4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	623b      	str	r3, [r7, #32]
}
 800acde:	bf00      	nop
 800ace0:	bf00      	nop
 800ace2:	e7fd      	b.n	800ace0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ace4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d10b      	bne.n	800ad02 <xTaskCreateStatic+0x4a>
	__asm volatile
 800acea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acee:	f383 8811 	msr	BASEPRI, r3
 800acf2:	f3bf 8f6f 	isb	sy
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	61fb      	str	r3, [r7, #28]
}
 800acfc:	bf00      	nop
 800acfe:	bf00      	nop
 800ad00:	e7fd      	b.n	800acfe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad02:	23a8      	movs	r3, #168	@ 0xa8
 800ad04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	2ba8      	cmp	r3, #168	@ 0xa8
 800ad0a:	d00b      	beq.n	800ad24 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ad0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad10:	f383 8811 	msr	BASEPRI, r3
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	f3bf 8f4f 	dsb	sy
 800ad1c:	61bb      	str	r3, [r7, #24]
}
 800ad1e:	bf00      	nop
 800ad20:	bf00      	nop
 800ad22:	e7fd      	b.n	800ad20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ad24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ad26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d01e      	beq.n	800ad6a <xTaskCreateStatic+0xb2>
 800ad2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d01b      	beq.n	800ad6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad3e:	2202      	movs	r2, #2
 800ad40:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad44:	2300      	movs	r3, #0
 800ad46:	9303      	str	r3, [sp, #12]
 800ad48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4a:	9302      	str	r3, [sp, #8]
 800ad4c:	f107 0314 	add.w	r3, r7, #20
 800ad50:	9301      	str	r3, [sp, #4]
 800ad52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad54:	9300      	str	r3, [sp, #0]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	68b9      	ldr	r1, [r7, #8]
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f000 f851 	bl	800ae04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ad64:	f000 f8f6 	bl	800af54 <prvAddNewTaskToReadyList>
 800ad68:	e001      	b.n	800ad6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad6e:	697b      	ldr	r3, [r7, #20]
	}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3728      	adds	r7, #40	@ 0x28
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b08c      	sub	sp, #48	@ 0x30
 800ad7c:	af04      	add	r7, sp, #16
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	603b      	str	r3, [r7, #0]
 800ad84:	4613      	mov	r3, r2
 800ad86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad88:	88fb      	ldrh	r3, [r7, #6]
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f001 fc7d 	bl	800c68c <pvPortMalloc>
 800ad92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00e      	beq.n	800adb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad9a:	20a8      	movs	r0, #168	@ 0xa8
 800ad9c:	f001 fc76 	bl	800c68c <pvPortMalloc>
 800ada0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d003      	beq.n	800adb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	697a      	ldr	r2, [r7, #20]
 800adac:	631a      	str	r2, [r3, #48]	@ 0x30
 800adae:	e005      	b.n	800adbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800adb0:	6978      	ldr	r0, [r7, #20]
 800adb2:	f001 fd39 	bl	800c828 <vPortFree>
 800adb6:	e001      	b.n	800adbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800adb8:	2300      	movs	r3, #0
 800adba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d017      	beq.n	800adf2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	2200      	movs	r2, #0
 800adc6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800adca:	88fa      	ldrh	r2, [r7, #6]
 800adcc:	2300      	movs	r3, #0
 800adce:	9303      	str	r3, [sp, #12]
 800add0:	69fb      	ldr	r3, [r7, #28]
 800add2:	9302      	str	r3, [sp, #8]
 800add4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add6:	9301      	str	r3, [sp, #4]
 800add8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	68b9      	ldr	r1, [r7, #8]
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f000 f80f 	bl	800ae04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ade6:	69f8      	ldr	r0, [r7, #28]
 800ade8:	f000 f8b4 	bl	800af54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800adec:	2301      	movs	r3, #1
 800adee:	61bb      	str	r3, [r7, #24]
 800adf0:	e002      	b.n	800adf8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800adf2:	f04f 33ff 	mov.w	r3, #4294967295
 800adf6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800adf8:	69bb      	ldr	r3, [r7, #24]
	}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3720      	adds	r7, #32
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
	...

0800ae04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b088      	sub	sp, #32
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
 800ae10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ae12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae14:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	21a5      	movs	r1, #165	@ 0xa5
 800ae1e:	f001 fe3b 	bl	800ca98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ae22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	4413      	add	r3, r2
 800ae32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	f023 0307 	bic.w	r3, r3, #7
 800ae3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	f003 0307 	and.w	r3, r3, #7
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d00b      	beq.n	800ae5e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ae46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae4a:	f383 8811 	msr	BASEPRI, r3
 800ae4e:	f3bf 8f6f 	isb	sy
 800ae52:	f3bf 8f4f 	dsb	sy
 800ae56:	617b      	str	r3, [r7, #20]
}
 800ae58:	bf00      	nop
 800ae5a:	bf00      	nop
 800ae5c:	e7fd      	b.n	800ae5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d01f      	beq.n	800aea4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae64:	2300      	movs	r3, #0
 800ae66:	61fb      	str	r3, [r7, #28]
 800ae68:	e012      	b.n	800ae90 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae6a:	68ba      	ldr	r2, [r7, #8]
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	4413      	add	r3, r2
 800ae70:	7819      	ldrb	r1, [r3, #0]
 800ae72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	4413      	add	r3, r2
 800ae78:	3334      	adds	r3, #52	@ 0x34
 800ae7a:	460a      	mov	r2, r1
 800ae7c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ae7e:	68ba      	ldr	r2, [r7, #8]
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	4413      	add	r3, r2
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d006      	beq.n	800ae98 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae8a:	69fb      	ldr	r3, [r7, #28]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	61fb      	str	r3, [r7, #28]
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	2b0f      	cmp	r3, #15
 800ae94:	d9e9      	bls.n	800ae6a <prvInitialiseNewTask+0x66>
 800ae96:	e000      	b.n	800ae9a <prvInitialiseNewTask+0x96>
			{
				break;
 800ae98:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aea2:	e003      	b.n	800aeac <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea6:	2200      	movs	r2, #0
 800aea8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aeac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeae:	2b37      	cmp	r3, #55	@ 0x37
 800aeb0:	d901      	bls.n	800aeb6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aeb2:	2337      	movs	r3, #55	@ 0x37
 800aeb4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aeba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aebe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aec0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec4:	2200      	movs	r2, #0
 800aec6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeca:	3304      	adds	r3, #4
 800aecc:	4618      	mov	r0, r3
 800aece:	f7ff f86d 	bl	8009fac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed4:	3318      	adds	r3, #24
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7ff f868 	bl	8009fac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aede:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aee0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aeec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aef0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef4:	2200      	movs	r2, #0
 800aef6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aefa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800af02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af04:	3354      	adds	r3, #84	@ 0x54
 800af06:	224c      	movs	r2, #76	@ 0x4c
 800af08:	2100      	movs	r1, #0
 800af0a:	4618      	mov	r0, r3
 800af0c:	f001 fdc4 	bl	800ca98 <memset>
 800af10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af12:	4a0d      	ldr	r2, [pc, #52]	@ (800af48 <prvInitialiseNewTask+0x144>)
 800af14:	659a      	str	r2, [r3, #88]	@ 0x58
 800af16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af18:	4a0c      	ldr	r2, [pc, #48]	@ (800af4c <prvInitialiseNewTask+0x148>)
 800af1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800af1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af1e:	4a0c      	ldr	r2, [pc, #48]	@ (800af50 <prvInitialiseNewTask+0x14c>)
 800af20:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800af22:	683a      	ldr	r2, [r7, #0]
 800af24:	68f9      	ldr	r1, [r7, #12]
 800af26:	69b8      	ldr	r0, [r7, #24]
 800af28:	f001 f95a 	bl	800c1e0 <pxPortInitialiseStack>
 800af2c:	4602      	mov	r2, r0
 800af2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800af32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af34:	2b00      	cmp	r3, #0
 800af36:	d002      	beq.n	800af3e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af3e:	bf00      	nop
 800af40:	3720      	adds	r7, #32
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	200028ec 	.word	0x200028ec
 800af4c:	20002954 	.word	0x20002954
 800af50:	200029bc 	.word	0x200029bc

0800af54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af5c:	f001 fa74 	bl	800c448 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af60:	4b2d      	ldr	r3, [pc, #180]	@ (800b018 <prvAddNewTaskToReadyList+0xc4>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	3301      	adds	r3, #1
 800af66:	4a2c      	ldr	r2, [pc, #176]	@ (800b018 <prvAddNewTaskToReadyList+0xc4>)
 800af68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af6a:	4b2c      	ldr	r3, [pc, #176]	@ (800b01c <prvAddNewTaskToReadyList+0xc8>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d109      	bne.n	800af86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af72:	4a2a      	ldr	r2, [pc, #168]	@ (800b01c <prvAddNewTaskToReadyList+0xc8>)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af78:	4b27      	ldr	r3, [pc, #156]	@ (800b018 <prvAddNewTaskToReadyList+0xc4>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d110      	bne.n	800afa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af80:	f000 fc2e 	bl	800b7e0 <prvInitialiseTaskLists>
 800af84:	e00d      	b.n	800afa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af86:	4b26      	ldr	r3, [pc, #152]	@ (800b020 <prvAddNewTaskToReadyList+0xcc>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d109      	bne.n	800afa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af8e:	4b23      	ldr	r3, [pc, #140]	@ (800b01c <prvAddNewTaskToReadyList+0xc8>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af98:	429a      	cmp	r2, r3
 800af9a:	d802      	bhi.n	800afa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800af9c:	4a1f      	ldr	r2, [pc, #124]	@ (800b01c <prvAddNewTaskToReadyList+0xc8>)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800afa2:	4b20      	ldr	r3, [pc, #128]	@ (800b024 <prvAddNewTaskToReadyList+0xd0>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	3301      	adds	r3, #1
 800afa8:	4a1e      	ldr	r2, [pc, #120]	@ (800b024 <prvAddNewTaskToReadyList+0xd0>)
 800afaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800afac:	4b1d      	ldr	r3, [pc, #116]	@ (800b024 <prvAddNewTaskToReadyList+0xd0>)
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afb8:	4b1b      	ldr	r3, [pc, #108]	@ (800b028 <prvAddNewTaskToReadyList+0xd4>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d903      	bls.n	800afc8 <prvAddNewTaskToReadyList+0x74>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc4:	4a18      	ldr	r2, [pc, #96]	@ (800b028 <prvAddNewTaskToReadyList+0xd4>)
 800afc6:	6013      	str	r3, [r2, #0]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afcc:	4613      	mov	r3, r2
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4413      	add	r3, r2
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4a15      	ldr	r2, [pc, #84]	@ (800b02c <prvAddNewTaskToReadyList+0xd8>)
 800afd6:	441a      	add	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	3304      	adds	r3, #4
 800afdc:	4619      	mov	r1, r3
 800afde:	4610      	mov	r0, r2
 800afe0:	f7fe fff1 	bl	8009fc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800afe4:	f001 fa62 	bl	800c4ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800afe8:	4b0d      	ldr	r3, [pc, #52]	@ (800b020 <prvAddNewTaskToReadyList+0xcc>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d00e      	beq.n	800b00e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aff0:	4b0a      	ldr	r3, [pc, #40]	@ (800b01c <prvAddNewTaskToReadyList+0xc8>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800affa:	429a      	cmp	r2, r3
 800affc:	d207      	bcs.n	800b00e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800affe:	4b0c      	ldr	r3, [pc, #48]	@ (800b030 <prvAddNewTaskToReadyList+0xdc>)
 800b000:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b004:	601a      	str	r2, [r3, #0]
 800b006:	f3bf 8f4f 	dsb	sy
 800b00a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b00e:	bf00      	nop
 800b010:	3708      	adds	r7, #8
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	20000ff8 	.word	0x20000ff8
 800b01c:	20000b24 	.word	0x20000b24
 800b020:	20001004 	.word	0x20001004
 800b024:	20001014 	.word	0x20001014
 800b028:	20001000 	.word	0x20001000
 800b02c:	20000b28 	.word	0x20000b28
 800b030:	e000ed04 	.word	0xe000ed04

0800b034 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b03c:	2300      	movs	r3, #0
 800b03e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d018      	beq.n	800b078 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b046:	4b14      	ldr	r3, [pc, #80]	@ (800b098 <vTaskDelay+0x64>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00b      	beq.n	800b066 <vTaskDelay+0x32>
	__asm volatile
 800b04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b052:	f383 8811 	msr	BASEPRI, r3
 800b056:	f3bf 8f6f 	isb	sy
 800b05a:	f3bf 8f4f 	dsb	sy
 800b05e:	60bb      	str	r3, [r7, #8]
}
 800b060:	bf00      	nop
 800b062:	bf00      	nop
 800b064:	e7fd      	b.n	800b062 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b066:	f000 f88b 	bl	800b180 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b06a:	2100      	movs	r1, #0
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 fd09 	bl	800ba84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b072:	f000 f893 	bl	800b19c <xTaskResumeAll>
 800b076:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d107      	bne.n	800b08e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b07e:	4b07      	ldr	r3, [pc, #28]	@ (800b09c <vTaskDelay+0x68>)
 800b080:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b084:	601a      	str	r2, [r3, #0]
 800b086:	f3bf 8f4f 	dsb	sy
 800b08a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b08e:	bf00      	nop
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	20001020 	.word	0x20001020
 800b09c:	e000ed04 	.word	0xe000ed04

0800b0a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b08a      	sub	sp, #40	@ 0x28
 800b0a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b0ae:	463a      	mov	r2, r7
 800b0b0:	1d39      	adds	r1, r7, #4
 800b0b2:	f107 0308 	add.w	r3, r7, #8
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7fe ff24 	bl	8009f04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b0bc:	6839      	ldr	r1, [r7, #0]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	9202      	str	r2, [sp, #8]
 800b0c4:	9301      	str	r3, [sp, #4]
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	460a      	mov	r2, r1
 800b0ce:	4924      	ldr	r1, [pc, #144]	@ (800b160 <vTaskStartScheduler+0xc0>)
 800b0d0:	4824      	ldr	r0, [pc, #144]	@ (800b164 <vTaskStartScheduler+0xc4>)
 800b0d2:	f7ff fdf1 	bl	800acb8 <xTaskCreateStatic>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	4a23      	ldr	r2, [pc, #140]	@ (800b168 <vTaskStartScheduler+0xc8>)
 800b0da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b0dc:	4b22      	ldr	r3, [pc, #136]	@ (800b168 <vTaskStartScheduler+0xc8>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d002      	beq.n	800b0ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	617b      	str	r3, [r7, #20]
 800b0e8:	e001      	b.n	800b0ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d102      	bne.n	800b0fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b0f4:	f000 fd1a 	bl	800bb2c <xTimerCreateTimerTask>
 800b0f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d11b      	bne.n	800b138 <vTaskStartScheduler+0x98>
	__asm volatile
 800b100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	613b      	str	r3, [r7, #16]
}
 800b112:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b114:	4b15      	ldr	r3, [pc, #84]	@ (800b16c <vTaskStartScheduler+0xcc>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	3354      	adds	r3, #84	@ 0x54
 800b11a:	4a15      	ldr	r2, [pc, #84]	@ (800b170 <vTaskStartScheduler+0xd0>)
 800b11c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b11e:	4b15      	ldr	r3, [pc, #84]	@ (800b174 <vTaskStartScheduler+0xd4>)
 800b120:	f04f 32ff 	mov.w	r2, #4294967295
 800b124:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b126:	4b14      	ldr	r3, [pc, #80]	@ (800b178 <vTaskStartScheduler+0xd8>)
 800b128:	2201      	movs	r2, #1
 800b12a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b12c:	4b13      	ldr	r3, [pc, #76]	@ (800b17c <vTaskStartScheduler+0xdc>)
 800b12e:	2200      	movs	r2, #0
 800b130:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b132:	f001 f8e5 	bl	800c300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b136:	e00f      	b.n	800b158 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b13e:	d10b      	bne.n	800b158 <vTaskStartScheduler+0xb8>
	__asm volatile
 800b140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	60fb      	str	r3, [r7, #12]
}
 800b152:	bf00      	nop
 800b154:	bf00      	nop
 800b156:	e7fd      	b.n	800b154 <vTaskStartScheduler+0xb4>
}
 800b158:	bf00      	nop
 800b15a:	3718      	adds	r7, #24
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	0800ccfc 	.word	0x0800ccfc
 800b164:	0800b7b1 	.word	0x0800b7b1
 800b168:	2000101c 	.word	0x2000101c
 800b16c:	20000b24 	.word	0x20000b24
 800b170:	20000010 	.word	0x20000010
 800b174:	20001018 	.word	0x20001018
 800b178:	20001004 	.word	0x20001004
 800b17c:	20000ffc 	.word	0x20000ffc

0800b180 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b180:	b480      	push	{r7}
 800b182:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b184:	4b04      	ldr	r3, [pc, #16]	@ (800b198 <vTaskSuspendAll+0x18>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	3301      	adds	r3, #1
 800b18a:	4a03      	ldr	r2, [pc, #12]	@ (800b198 <vTaskSuspendAll+0x18>)
 800b18c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b18e:	bf00      	nop
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr
 800b198:	20001020 	.word	0x20001020

0800b19c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b1aa:	4b42      	ldr	r3, [pc, #264]	@ (800b2b4 <xTaskResumeAll+0x118>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d10b      	bne.n	800b1ca <xTaskResumeAll+0x2e>
	__asm volatile
 800b1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1b6:	f383 8811 	msr	BASEPRI, r3
 800b1ba:	f3bf 8f6f 	isb	sy
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	603b      	str	r3, [r7, #0]
}
 800b1c4:	bf00      	nop
 800b1c6:	bf00      	nop
 800b1c8:	e7fd      	b.n	800b1c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b1ca:	f001 f93d 	bl	800c448 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b1ce:	4b39      	ldr	r3, [pc, #228]	@ (800b2b4 <xTaskResumeAll+0x118>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	4a37      	ldr	r2, [pc, #220]	@ (800b2b4 <xTaskResumeAll+0x118>)
 800b1d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1d8:	4b36      	ldr	r3, [pc, #216]	@ (800b2b4 <xTaskResumeAll+0x118>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d162      	bne.n	800b2a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b1e0:	4b35      	ldr	r3, [pc, #212]	@ (800b2b8 <xTaskResumeAll+0x11c>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d05e      	beq.n	800b2a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1e8:	e02f      	b.n	800b24a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1ea:	4b34      	ldr	r3, [pc, #208]	@ (800b2bc <xTaskResumeAll+0x120>)
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	3318      	adds	r3, #24
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7fe ff42 	bl	800a080 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	3304      	adds	r3, #4
 800b200:	4618      	mov	r0, r3
 800b202:	f7fe ff3d 	bl	800a080 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b20a:	4b2d      	ldr	r3, [pc, #180]	@ (800b2c0 <xTaskResumeAll+0x124>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d903      	bls.n	800b21a <xTaskResumeAll+0x7e>
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b216:	4a2a      	ldr	r2, [pc, #168]	@ (800b2c0 <xTaskResumeAll+0x124>)
 800b218:	6013      	str	r3, [r2, #0]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b21e:	4613      	mov	r3, r2
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	4413      	add	r3, r2
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	4a27      	ldr	r2, [pc, #156]	@ (800b2c4 <xTaskResumeAll+0x128>)
 800b228:	441a      	add	r2, r3
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	3304      	adds	r3, #4
 800b22e:	4619      	mov	r1, r3
 800b230:	4610      	mov	r0, r2
 800b232:	f7fe fec8 	bl	8009fc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b23a:	4b23      	ldr	r3, [pc, #140]	@ (800b2c8 <xTaskResumeAll+0x12c>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b240:	429a      	cmp	r2, r3
 800b242:	d302      	bcc.n	800b24a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b244:	4b21      	ldr	r3, [pc, #132]	@ (800b2cc <xTaskResumeAll+0x130>)
 800b246:	2201      	movs	r2, #1
 800b248:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b24a:	4b1c      	ldr	r3, [pc, #112]	@ (800b2bc <xTaskResumeAll+0x120>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1cb      	bne.n	800b1ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d001      	beq.n	800b25c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b258:	f000 fb66 	bl	800b928 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b25c:	4b1c      	ldr	r3, [pc, #112]	@ (800b2d0 <xTaskResumeAll+0x134>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d010      	beq.n	800b28a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b268:	f000 f846 	bl	800b2f8 <xTaskIncrementTick>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d002      	beq.n	800b278 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b272:	4b16      	ldr	r3, [pc, #88]	@ (800b2cc <xTaskResumeAll+0x130>)
 800b274:	2201      	movs	r2, #1
 800b276:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	3b01      	subs	r3, #1
 800b27c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1f1      	bne.n	800b268 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b284:	4b12      	ldr	r3, [pc, #72]	@ (800b2d0 <xTaskResumeAll+0x134>)
 800b286:	2200      	movs	r2, #0
 800b288:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b28a:	4b10      	ldr	r3, [pc, #64]	@ (800b2cc <xTaskResumeAll+0x130>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d009      	beq.n	800b2a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b292:	2301      	movs	r3, #1
 800b294:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b296:	4b0f      	ldr	r3, [pc, #60]	@ (800b2d4 <xTaskResumeAll+0x138>)
 800b298:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b29c:	601a      	str	r2, [r3, #0]
 800b29e:	f3bf 8f4f 	dsb	sy
 800b2a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2a6:	f001 f901 	bl	800c4ac <vPortExitCritical>

	return xAlreadyYielded;
 800b2aa:	68bb      	ldr	r3, [r7, #8]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	20001020 	.word	0x20001020
 800b2b8:	20000ff8 	.word	0x20000ff8
 800b2bc:	20000fb8 	.word	0x20000fb8
 800b2c0:	20001000 	.word	0x20001000
 800b2c4:	20000b28 	.word	0x20000b28
 800b2c8:	20000b24 	.word	0x20000b24
 800b2cc:	2000100c 	.word	0x2000100c
 800b2d0:	20001008 	.word	0x20001008
 800b2d4:	e000ed04 	.word	0xe000ed04

0800b2d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b2de:	4b05      	ldr	r3, [pc, #20]	@ (800b2f4 <xTaskGetTickCount+0x1c>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b2e4:	687b      	ldr	r3, [r7, #4]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	20000ffc 	.word	0x20000ffc

0800b2f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b086      	sub	sp, #24
 800b2fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b2fe:	2300      	movs	r3, #0
 800b300:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b302:	4b4f      	ldr	r3, [pc, #316]	@ (800b440 <xTaskIncrementTick+0x148>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2b00      	cmp	r3, #0
 800b308:	f040 8090 	bne.w	800b42c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b30c:	4b4d      	ldr	r3, [pc, #308]	@ (800b444 <xTaskIncrementTick+0x14c>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	3301      	adds	r3, #1
 800b312:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b314:	4a4b      	ldr	r2, [pc, #300]	@ (800b444 <xTaskIncrementTick+0x14c>)
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d121      	bne.n	800b364 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b320:	4b49      	ldr	r3, [pc, #292]	@ (800b448 <xTaskIncrementTick+0x150>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00b      	beq.n	800b342 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b32e:	f383 8811 	msr	BASEPRI, r3
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	f3bf 8f4f 	dsb	sy
 800b33a:	603b      	str	r3, [r7, #0]
}
 800b33c:	bf00      	nop
 800b33e:	bf00      	nop
 800b340:	e7fd      	b.n	800b33e <xTaskIncrementTick+0x46>
 800b342:	4b41      	ldr	r3, [pc, #260]	@ (800b448 <xTaskIncrementTick+0x150>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	60fb      	str	r3, [r7, #12]
 800b348:	4b40      	ldr	r3, [pc, #256]	@ (800b44c <xTaskIncrementTick+0x154>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a3e      	ldr	r2, [pc, #248]	@ (800b448 <xTaskIncrementTick+0x150>)
 800b34e:	6013      	str	r3, [r2, #0]
 800b350:	4a3e      	ldr	r2, [pc, #248]	@ (800b44c <xTaskIncrementTick+0x154>)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	6013      	str	r3, [r2, #0]
 800b356:	4b3e      	ldr	r3, [pc, #248]	@ (800b450 <xTaskIncrementTick+0x158>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	3301      	adds	r3, #1
 800b35c:	4a3c      	ldr	r2, [pc, #240]	@ (800b450 <xTaskIncrementTick+0x158>)
 800b35e:	6013      	str	r3, [r2, #0]
 800b360:	f000 fae2 	bl	800b928 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b364:	4b3b      	ldr	r3, [pc, #236]	@ (800b454 <xTaskIncrementTick+0x15c>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	693a      	ldr	r2, [r7, #16]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d349      	bcc.n	800b402 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b36e:	4b36      	ldr	r3, [pc, #216]	@ (800b448 <xTaskIncrementTick+0x150>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d104      	bne.n	800b382 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b378:	4b36      	ldr	r3, [pc, #216]	@ (800b454 <xTaskIncrementTick+0x15c>)
 800b37a:	f04f 32ff 	mov.w	r2, #4294967295
 800b37e:	601a      	str	r2, [r3, #0]
					break;
 800b380:	e03f      	b.n	800b402 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b382:	4b31      	ldr	r3, [pc, #196]	@ (800b448 <xTaskIncrementTick+0x150>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b392:	693a      	ldr	r2, [r7, #16]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	429a      	cmp	r2, r3
 800b398:	d203      	bcs.n	800b3a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b39a:	4a2e      	ldr	r2, [pc, #184]	@ (800b454 <xTaskIncrementTick+0x15c>)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b3a0:	e02f      	b.n	800b402 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	3304      	adds	r3, #4
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fe fe6a 	bl	800a080 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d004      	beq.n	800b3be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	3318      	adds	r3, #24
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f7fe fe61 	bl	800a080 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3c2:	4b25      	ldr	r3, [pc, #148]	@ (800b458 <xTaskIncrementTick+0x160>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d903      	bls.n	800b3d2 <xTaskIncrementTick+0xda>
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ce:	4a22      	ldr	r2, [pc, #136]	@ (800b458 <xTaskIncrementTick+0x160>)
 800b3d0:	6013      	str	r3, [r2, #0]
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	4413      	add	r3, r2
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	4a1f      	ldr	r2, [pc, #124]	@ (800b45c <xTaskIncrementTick+0x164>)
 800b3e0:	441a      	add	r2, r3
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	3304      	adds	r3, #4
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	4610      	mov	r0, r2
 800b3ea:	f7fe fdec 	bl	8009fc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3f2:	4b1b      	ldr	r3, [pc, #108]	@ (800b460 <xTaskIncrementTick+0x168>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d3b8      	bcc.n	800b36e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b400:	e7b5      	b.n	800b36e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b402:	4b17      	ldr	r3, [pc, #92]	@ (800b460 <xTaskIncrementTick+0x168>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b408:	4914      	ldr	r1, [pc, #80]	@ (800b45c <xTaskIncrementTick+0x164>)
 800b40a:	4613      	mov	r3, r2
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	4413      	add	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	440b      	add	r3, r1
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b01      	cmp	r3, #1
 800b418:	d901      	bls.n	800b41e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b41a:	2301      	movs	r3, #1
 800b41c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b41e:	4b11      	ldr	r3, [pc, #68]	@ (800b464 <xTaskIncrementTick+0x16c>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d007      	beq.n	800b436 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b426:	2301      	movs	r3, #1
 800b428:	617b      	str	r3, [r7, #20]
 800b42a:	e004      	b.n	800b436 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b42c:	4b0e      	ldr	r3, [pc, #56]	@ (800b468 <xTaskIncrementTick+0x170>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	3301      	adds	r3, #1
 800b432:	4a0d      	ldr	r2, [pc, #52]	@ (800b468 <xTaskIncrementTick+0x170>)
 800b434:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b436:	697b      	ldr	r3, [r7, #20]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3718      	adds	r7, #24
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	20001020 	.word	0x20001020
 800b444:	20000ffc 	.word	0x20000ffc
 800b448:	20000fb0 	.word	0x20000fb0
 800b44c:	20000fb4 	.word	0x20000fb4
 800b450:	20001010 	.word	0x20001010
 800b454:	20001018 	.word	0x20001018
 800b458:	20001000 	.word	0x20001000
 800b45c:	20000b28 	.word	0x20000b28
 800b460:	20000b24 	.word	0x20000b24
 800b464:	2000100c 	.word	0x2000100c
 800b468:	20001008 	.word	0x20001008

0800b46c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b46c:	b480      	push	{r7}
 800b46e:	b085      	sub	sp, #20
 800b470:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b472:	4b2b      	ldr	r3, [pc, #172]	@ (800b520 <vTaskSwitchContext+0xb4>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d003      	beq.n	800b482 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b47a:	4b2a      	ldr	r3, [pc, #168]	@ (800b524 <vTaskSwitchContext+0xb8>)
 800b47c:	2201      	movs	r2, #1
 800b47e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b480:	e047      	b.n	800b512 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b482:	4b28      	ldr	r3, [pc, #160]	@ (800b524 <vTaskSwitchContext+0xb8>)
 800b484:	2200      	movs	r2, #0
 800b486:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b488:	4b27      	ldr	r3, [pc, #156]	@ (800b528 <vTaskSwitchContext+0xbc>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	60fb      	str	r3, [r7, #12]
 800b48e:	e011      	b.n	800b4b4 <vTaskSwitchContext+0x48>
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d10b      	bne.n	800b4ae <vTaskSwitchContext+0x42>
	__asm volatile
 800b496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b49a:	f383 8811 	msr	BASEPRI, r3
 800b49e:	f3bf 8f6f 	isb	sy
 800b4a2:	f3bf 8f4f 	dsb	sy
 800b4a6:	607b      	str	r3, [r7, #4]
}
 800b4a8:	bf00      	nop
 800b4aa:	bf00      	nop
 800b4ac:	e7fd      	b.n	800b4aa <vTaskSwitchContext+0x3e>
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	60fb      	str	r3, [r7, #12]
 800b4b4:	491d      	ldr	r1, [pc, #116]	@ (800b52c <vTaskSwitchContext+0xc0>)
 800b4b6:	68fa      	ldr	r2, [r7, #12]
 800b4b8:	4613      	mov	r3, r2
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	4413      	add	r3, r2
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	440b      	add	r3, r1
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d0e3      	beq.n	800b490 <vTaskSwitchContext+0x24>
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	4613      	mov	r3, r2
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	4413      	add	r3, r2
 800b4d0:	009b      	lsls	r3, r3, #2
 800b4d2:	4a16      	ldr	r2, [pc, #88]	@ (800b52c <vTaskSwitchContext+0xc0>)
 800b4d4:	4413      	add	r3, r2
 800b4d6:	60bb      	str	r3, [r7, #8]
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	685a      	ldr	r2, [r3, #4]
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	605a      	str	r2, [r3, #4]
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	685a      	ldr	r2, [r3, #4]
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	3308      	adds	r3, #8
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d104      	bne.n	800b4f8 <vTaskSwitchContext+0x8c>
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	685a      	ldr	r2, [r3, #4]
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	605a      	str	r2, [r3, #4]
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	68db      	ldr	r3, [r3, #12]
 800b4fe:	4a0c      	ldr	r2, [pc, #48]	@ (800b530 <vTaskSwitchContext+0xc4>)
 800b500:	6013      	str	r3, [r2, #0]
 800b502:	4a09      	ldr	r2, [pc, #36]	@ (800b528 <vTaskSwitchContext+0xbc>)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b508:	4b09      	ldr	r3, [pc, #36]	@ (800b530 <vTaskSwitchContext+0xc4>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	3354      	adds	r3, #84	@ 0x54
 800b50e:	4a09      	ldr	r2, [pc, #36]	@ (800b534 <vTaskSwitchContext+0xc8>)
 800b510:	6013      	str	r3, [r2, #0]
}
 800b512:	bf00      	nop
 800b514:	3714      	adds	r7, #20
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	20001020 	.word	0x20001020
 800b524:	2000100c 	.word	0x2000100c
 800b528:	20001000 	.word	0x20001000
 800b52c:	20000b28 	.word	0x20000b28
 800b530:	20000b24 	.word	0x20000b24
 800b534:	20000010 	.word	0x20000010

0800b538 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d10b      	bne.n	800b560 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b54c:	f383 8811 	msr	BASEPRI, r3
 800b550:	f3bf 8f6f 	isb	sy
 800b554:	f3bf 8f4f 	dsb	sy
 800b558:	60fb      	str	r3, [r7, #12]
}
 800b55a:	bf00      	nop
 800b55c:	bf00      	nop
 800b55e:	e7fd      	b.n	800b55c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b560:	4b07      	ldr	r3, [pc, #28]	@ (800b580 <vTaskPlaceOnEventList+0x48>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	3318      	adds	r3, #24
 800b566:	4619      	mov	r1, r3
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f7fe fd50 	bl	800a00e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b56e:	2101      	movs	r1, #1
 800b570:	6838      	ldr	r0, [r7, #0]
 800b572:	f000 fa87 	bl	800ba84 <prvAddCurrentTaskToDelayedList>
}
 800b576:	bf00      	nop
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	20000b24 	.word	0x20000b24

0800b584 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b584:	b580      	push	{r7, lr}
 800b586:	b086      	sub	sp, #24
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10b      	bne.n	800b5ae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b59a:	f383 8811 	msr	BASEPRI, r3
 800b59e:	f3bf 8f6f 	isb	sy
 800b5a2:	f3bf 8f4f 	dsb	sy
 800b5a6:	617b      	str	r3, [r7, #20]
}
 800b5a8:	bf00      	nop
 800b5aa:	bf00      	nop
 800b5ac:	e7fd      	b.n	800b5aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5ae:	4b0a      	ldr	r3, [pc, #40]	@ (800b5d8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	3318      	adds	r3, #24
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	f7fe fd05 	bl	8009fc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d002      	beq.n	800b5c8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b5c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b5c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b5c8:	6879      	ldr	r1, [r7, #4]
 800b5ca:	68b8      	ldr	r0, [r7, #8]
 800b5cc:	f000 fa5a 	bl	800ba84 <prvAddCurrentTaskToDelayedList>
	}
 800b5d0:	bf00      	nop
 800b5d2:	3718      	adds	r7, #24
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	20000b24 	.word	0x20000b24

0800b5dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b086      	sub	sp, #24
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d10b      	bne.n	800b60a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f6:	f383 8811 	msr	BASEPRI, r3
 800b5fa:	f3bf 8f6f 	isb	sy
 800b5fe:	f3bf 8f4f 	dsb	sy
 800b602:	60fb      	str	r3, [r7, #12]
}
 800b604:	bf00      	nop
 800b606:	bf00      	nop
 800b608:	e7fd      	b.n	800b606 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	3318      	adds	r3, #24
 800b60e:	4618      	mov	r0, r3
 800b610:	f7fe fd36 	bl	800a080 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b614:	4b1d      	ldr	r3, [pc, #116]	@ (800b68c <xTaskRemoveFromEventList+0xb0>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d11d      	bne.n	800b658 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	3304      	adds	r3, #4
 800b620:	4618      	mov	r0, r3
 800b622:	f7fe fd2d 	bl	800a080 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b62a:	4b19      	ldr	r3, [pc, #100]	@ (800b690 <xTaskRemoveFromEventList+0xb4>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d903      	bls.n	800b63a <xTaskRemoveFromEventList+0x5e>
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b636:	4a16      	ldr	r2, [pc, #88]	@ (800b690 <xTaskRemoveFromEventList+0xb4>)
 800b638:	6013      	str	r3, [r2, #0]
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b63e:	4613      	mov	r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	4413      	add	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4a13      	ldr	r2, [pc, #76]	@ (800b694 <xTaskRemoveFromEventList+0xb8>)
 800b648:	441a      	add	r2, r3
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	3304      	adds	r3, #4
 800b64e:	4619      	mov	r1, r3
 800b650:	4610      	mov	r0, r2
 800b652:	f7fe fcb8 	bl	8009fc6 <vListInsertEnd>
 800b656:	e005      	b.n	800b664 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	3318      	adds	r3, #24
 800b65c:	4619      	mov	r1, r3
 800b65e:	480e      	ldr	r0, [pc, #56]	@ (800b698 <xTaskRemoveFromEventList+0xbc>)
 800b660:	f7fe fcb1 	bl	8009fc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b668:	4b0c      	ldr	r3, [pc, #48]	@ (800b69c <xTaskRemoveFromEventList+0xc0>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b66e:	429a      	cmp	r2, r3
 800b670:	d905      	bls.n	800b67e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b672:	2301      	movs	r3, #1
 800b674:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b676:	4b0a      	ldr	r3, [pc, #40]	@ (800b6a0 <xTaskRemoveFromEventList+0xc4>)
 800b678:	2201      	movs	r2, #1
 800b67a:	601a      	str	r2, [r3, #0]
 800b67c:	e001      	b.n	800b682 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b67e:	2300      	movs	r3, #0
 800b680:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b682:	697b      	ldr	r3, [r7, #20]
}
 800b684:	4618      	mov	r0, r3
 800b686:	3718      	adds	r7, #24
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	20001020 	.word	0x20001020
 800b690:	20001000 	.word	0x20001000
 800b694:	20000b28 	.word	0x20000b28
 800b698:	20000fb8 	.word	0x20000fb8
 800b69c:	20000b24 	.word	0x20000b24
 800b6a0:	2000100c 	.word	0x2000100c

0800b6a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b6ac:	4b06      	ldr	r3, [pc, #24]	@ (800b6c8 <vTaskInternalSetTimeOutState+0x24>)
 800b6ae:	681a      	ldr	r2, [r3, #0]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b6b4:	4b05      	ldr	r3, [pc, #20]	@ (800b6cc <vTaskInternalSetTimeOutState+0x28>)
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	605a      	str	r2, [r3, #4]
}
 800b6bc:	bf00      	nop
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr
 800b6c8:	20001010 	.word	0x20001010
 800b6cc:	20000ffc 	.word	0x20000ffc

0800b6d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b088      	sub	sp, #32
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d10b      	bne.n	800b6f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b6e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e4:	f383 8811 	msr	BASEPRI, r3
 800b6e8:	f3bf 8f6f 	isb	sy
 800b6ec:	f3bf 8f4f 	dsb	sy
 800b6f0:	613b      	str	r3, [r7, #16]
}
 800b6f2:	bf00      	nop
 800b6f4:	bf00      	nop
 800b6f6:	e7fd      	b.n	800b6f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d10b      	bne.n	800b716 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b702:	f383 8811 	msr	BASEPRI, r3
 800b706:	f3bf 8f6f 	isb	sy
 800b70a:	f3bf 8f4f 	dsb	sy
 800b70e:	60fb      	str	r3, [r7, #12]
}
 800b710:	bf00      	nop
 800b712:	bf00      	nop
 800b714:	e7fd      	b.n	800b712 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b716:	f000 fe97 	bl	800c448 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b71a:	4b1d      	ldr	r3, [pc, #116]	@ (800b790 <xTaskCheckForTimeOut+0xc0>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	69ba      	ldr	r2, [r7, #24]
 800b726:	1ad3      	subs	r3, r2, r3
 800b728:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b732:	d102      	bne.n	800b73a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b734:	2300      	movs	r3, #0
 800b736:	61fb      	str	r3, [r7, #28]
 800b738:	e023      	b.n	800b782 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	4b15      	ldr	r3, [pc, #84]	@ (800b794 <xTaskCheckForTimeOut+0xc4>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	429a      	cmp	r2, r3
 800b744:	d007      	beq.n	800b756 <xTaskCheckForTimeOut+0x86>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	69ba      	ldr	r2, [r7, #24]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d302      	bcc.n	800b756 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b750:	2301      	movs	r3, #1
 800b752:	61fb      	str	r3, [r7, #28]
 800b754:	e015      	b.n	800b782 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	697a      	ldr	r2, [r7, #20]
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d20b      	bcs.n	800b778 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	1ad2      	subs	r2, r2, r3
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f7ff ff99 	bl	800b6a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b772:	2300      	movs	r3, #0
 800b774:	61fb      	str	r3, [r7, #28]
 800b776:	e004      	b.n	800b782 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	2200      	movs	r2, #0
 800b77c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b77e:	2301      	movs	r3, #1
 800b780:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b782:	f000 fe93 	bl	800c4ac <vPortExitCritical>

	return xReturn;
 800b786:	69fb      	ldr	r3, [r7, #28]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3720      	adds	r7, #32
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	20000ffc 	.word	0x20000ffc
 800b794:	20001010 	.word	0x20001010

0800b798 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b798:	b480      	push	{r7}
 800b79a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b79c:	4b03      	ldr	r3, [pc, #12]	@ (800b7ac <vTaskMissedYield+0x14>)
 800b79e:	2201      	movs	r2, #1
 800b7a0:	601a      	str	r2, [r3, #0]
}
 800b7a2:	bf00      	nop
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	2000100c 	.word	0x2000100c

0800b7b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b7b8:	f000 f852 	bl	800b860 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b7bc:	4b06      	ldr	r3, [pc, #24]	@ (800b7d8 <prvIdleTask+0x28>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d9f9      	bls.n	800b7b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b7c4:	4b05      	ldr	r3, [pc, #20]	@ (800b7dc <prvIdleTask+0x2c>)
 800b7c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7ca:	601a      	str	r2, [r3, #0]
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b7d4:	e7f0      	b.n	800b7b8 <prvIdleTask+0x8>
 800b7d6:	bf00      	nop
 800b7d8:	20000b28 	.word	0x20000b28
 800b7dc:	e000ed04 	.word	0xe000ed04

0800b7e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	607b      	str	r3, [r7, #4]
 800b7ea:	e00c      	b.n	800b806 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	4413      	add	r3, r2
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	4a12      	ldr	r2, [pc, #72]	@ (800b840 <prvInitialiseTaskLists+0x60>)
 800b7f8:	4413      	add	r3, r2
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7fe fbb6 	bl	8009f6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	3301      	adds	r3, #1
 800b804:	607b      	str	r3, [r7, #4]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2b37      	cmp	r3, #55	@ 0x37
 800b80a:	d9ef      	bls.n	800b7ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b80c:	480d      	ldr	r0, [pc, #52]	@ (800b844 <prvInitialiseTaskLists+0x64>)
 800b80e:	f7fe fbad 	bl	8009f6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b812:	480d      	ldr	r0, [pc, #52]	@ (800b848 <prvInitialiseTaskLists+0x68>)
 800b814:	f7fe fbaa 	bl	8009f6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b818:	480c      	ldr	r0, [pc, #48]	@ (800b84c <prvInitialiseTaskLists+0x6c>)
 800b81a:	f7fe fba7 	bl	8009f6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b81e:	480c      	ldr	r0, [pc, #48]	@ (800b850 <prvInitialiseTaskLists+0x70>)
 800b820:	f7fe fba4 	bl	8009f6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b824:	480b      	ldr	r0, [pc, #44]	@ (800b854 <prvInitialiseTaskLists+0x74>)
 800b826:	f7fe fba1 	bl	8009f6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b82a:	4b0b      	ldr	r3, [pc, #44]	@ (800b858 <prvInitialiseTaskLists+0x78>)
 800b82c:	4a05      	ldr	r2, [pc, #20]	@ (800b844 <prvInitialiseTaskLists+0x64>)
 800b82e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b830:	4b0a      	ldr	r3, [pc, #40]	@ (800b85c <prvInitialiseTaskLists+0x7c>)
 800b832:	4a05      	ldr	r2, [pc, #20]	@ (800b848 <prvInitialiseTaskLists+0x68>)
 800b834:	601a      	str	r2, [r3, #0]
}
 800b836:	bf00      	nop
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	20000b28 	.word	0x20000b28
 800b844:	20000f88 	.word	0x20000f88
 800b848:	20000f9c 	.word	0x20000f9c
 800b84c:	20000fb8 	.word	0x20000fb8
 800b850:	20000fcc 	.word	0x20000fcc
 800b854:	20000fe4 	.word	0x20000fe4
 800b858:	20000fb0 	.word	0x20000fb0
 800b85c:	20000fb4 	.word	0x20000fb4

0800b860 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b866:	e019      	b.n	800b89c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b868:	f000 fdee 	bl	800c448 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b86c:	4b10      	ldr	r3, [pc, #64]	@ (800b8b0 <prvCheckTasksWaitingTermination+0x50>)
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	3304      	adds	r3, #4
 800b878:	4618      	mov	r0, r3
 800b87a:	f7fe fc01 	bl	800a080 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b87e:	4b0d      	ldr	r3, [pc, #52]	@ (800b8b4 <prvCheckTasksWaitingTermination+0x54>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3b01      	subs	r3, #1
 800b884:	4a0b      	ldr	r2, [pc, #44]	@ (800b8b4 <prvCheckTasksWaitingTermination+0x54>)
 800b886:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b888:	4b0b      	ldr	r3, [pc, #44]	@ (800b8b8 <prvCheckTasksWaitingTermination+0x58>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	3b01      	subs	r3, #1
 800b88e:	4a0a      	ldr	r2, [pc, #40]	@ (800b8b8 <prvCheckTasksWaitingTermination+0x58>)
 800b890:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b892:	f000 fe0b 	bl	800c4ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 f810 	bl	800b8bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b89c:	4b06      	ldr	r3, [pc, #24]	@ (800b8b8 <prvCheckTasksWaitingTermination+0x58>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d1e1      	bne.n	800b868 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b8a4:	bf00      	nop
 800b8a6:	bf00      	nop
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	20000fcc 	.word	0x20000fcc
 800b8b4:	20000ff8 	.word	0x20000ff8
 800b8b8:	20000fe0 	.word	0x20000fe0

0800b8bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	3354      	adds	r3, #84	@ 0x54
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f001 f8ed 	bl	800caa8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d108      	bne.n	800b8ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f000 ffa3 	bl	800c828 <vPortFree>
				vPortFree( pxTCB );
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 ffa0 	bl	800c828 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b8e8:	e019      	b.n	800b91e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d103      	bne.n	800b8fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 ff97 	bl	800c828 <vPortFree>
	}
 800b8fa:	e010      	b.n	800b91e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b902:	2b02      	cmp	r3, #2
 800b904:	d00b      	beq.n	800b91e <prvDeleteTCB+0x62>
	__asm volatile
 800b906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	60fb      	str	r3, [r7, #12]
}
 800b918:	bf00      	nop
 800b91a:	bf00      	nop
 800b91c:	e7fd      	b.n	800b91a <prvDeleteTCB+0x5e>
	}
 800b91e:	bf00      	nop
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
	...

0800b928 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b92e:	4b0c      	ldr	r3, [pc, #48]	@ (800b960 <prvResetNextTaskUnblockTime+0x38>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d104      	bne.n	800b942 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b938:	4b0a      	ldr	r3, [pc, #40]	@ (800b964 <prvResetNextTaskUnblockTime+0x3c>)
 800b93a:	f04f 32ff 	mov.w	r2, #4294967295
 800b93e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b940:	e008      	b.n	800b954 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b942:	4b07      	ldr	r3, [pc, #28]	@ (800b960 <prvResetNextTaskUnblockTime+0x38>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	4a04      	ldr	r2, [pc, #16]	@ (800b964 <prvResetNextTaskUnblockTime+0x3c>)
 800b952:	6013      	str	r3, [r2, #0]
}
 800b954:	bf00      	nop
 800b956:	370c      	adds	r7, #12
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr
 800b960:	20000fb0 	.word	0x20000fb0
 800b964:	20001018 	.word	0x20001018

0800b968 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b96e:	4b0b      	ldr	r3, [pc, #44]	@ (800b99c <xTaskGetSchedulerState+0x34>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d102      	bne.n	800b97c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b976:	2301      	movs	r3, #1
 800b978:	607b      	str	r3, [r7, #4]
 800b97a:	e008      	b.n	800b98e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b97c:	4b08      	ldr	r3, [pc, #32]	@ (800b9a0 <xTaskGetSchedulerState+0x38>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d102      	bne.n	800b98a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b984:	2302      	movs	r3, #2
 800b986:	607b      	str	r3, [r7, #4]
 800b988:	e001      	b.n	800b98e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b98a:	2300      	movs	r3, #0
 800b98c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b98e:	687b      	ldr	r3, [r7, #4]
	}
 800b990:	4618      	mov	r0, r3
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr
 800b99c:	20001004 	.word	0x20001004
 800b9a0:	20001020 	.word	0x20001020

0800b9a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d058      	beq.n	800ba6c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b9ba:	4b2f      	ldr	r3, [pc, #188]	@ (800ba78 <xTaskPriorityDisinherit+0xd4>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	693a      	ldr	r2, [r7, #16]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d00b      	beq.n	800b9dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c8:	f383 8811 	msr	BASEPRI, r3
 800b9cc:	f3bf 8f6f 	isb	sy
 800b9d0:	f3bf 8f4f 	dsb	sy
 800b9d4:	60fb      	str	r3, [r7, #12]
}
 800b9d6:	bf00      	nop
 800b9d8:	bf00      	nop
 800b9da:	e7fd      	b.n	800b9d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d10b      	bne.n	800b9fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b9e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9e8:	f383 8811 	msr	BASEPRI, r3
 800b9ec:	f3bf 8f6f 	isb	sy
 800b9f0:	f3bf 8f4f 	dsb	sy
 800b9f4:	60bb      	str	r3, [r7, #8]
}
 800b9f6:	bf00      	nop
 800b9f8:	bf00      	nop
 800b9fa:	e7fd      	b.n	800b9f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba00:	1e5a      	subs	r2, r3, #1
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d02c      	beq.n	800ba6c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d128      	bne.n	800ba6c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	3304      	adds	r3, #4
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7fe fb2e 	bl	800a080 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba30:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba3c:	4b0f      	ldr	r3, [pc, #60]	@ (800ba7c <xTaskPriorityDisinherit+0xd8>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d903      	bls.n	800ba4c <xTaskPriorityDisinherit+0xa8>
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba48:	4a0c      	ldr	r2, [pc, #48]	@ (800ba7c <xTaskPriorityDisinherit+0xd8>)
 800ba4a:	6013      	str	r3, [r2, #0]
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba50:	4613      	mov	r3, r2
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	4413      	add	r3, r2
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	4a09      	ldr	r2, [pc, #36]	@ (800ba80 <xTaskPriorityDisinherit+0xdc>)
 800ba5a:	441a      	add	r2, r3
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	3304      	adds	r3, #4
 800ba60:	4619      	mov	r1, r3
 800ba62:	4610      	mov	r0, r2
 800ba64:	f7fe faaf 	bl	8009fc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba6c:	697b      	ldr	r3, [r7, #20]
	}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3718      	adds	r7, #24
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	20000b24 	.word	0x20000b24
 800ba7c:	20001000 	.word	0x20001000
 800ba80:	20000b28 	.word	0x20000b28

0800ba84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba8e:	4b21      	ldr	r3, [pc, #132]	@ (800bb14 <prvAddCurrentTaskToDelayedList+0x90>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba94:	4b20      	ldr	r3, [pc, #128]	@ (800bb18 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	3304      	adds	r3, #4
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7fe faf0 	bl	800a080 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa6:	d10a      	bne.n	800babe <prvAddCurrentTaskToDelayedList+0x3a>
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d007      	beq.n	800babe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800baae:	4b1a      	ldr	r3, [pc, #104]	@ (800bb18 <prvAddCurrentTaskToDelayedList+0x94>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	3304      	adds	r3, #4
 800bab4:	4619      	mov	r1, r3
 800bab6:	4819      	ldr	r0, [pc, #100]	@ (800bb1c <prvAddCurrentTaskToDelayedList+0x98>)
 800bab8:	f7fe fa85 	bl	8009fc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800babc:	e026      	b.n	800bb0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	4413      	add	r3, r2
 800bac4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bac6:	4b14      	ldr	r3, [pc, #80]	@ (800bb18 <prvAddCurrentTaskToDelayedList+0x94>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	68ba      	ldr	r2, [r7, #8]
 800bacc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bace:	68ba      	ldr	r2, [r7, #8]
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d209      	bcs.n	800baea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bad6:	4b12      	ldr	r3, [pc, #72]	@ (800bb20 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	4b0f      	ldr	r3, [pc, #60]	@ (800bb18 <prvAddCurrentTaskToDelayedList+0x94>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	3304      	adds	r3, #4
 800bae0:	4619      	mov	r1, r3
 800bae2:	4610      	mov	r0, r2
 800bae4:	f7fe fa93 	bl	800a00e <vListInsert>
}
 800bae8:	e010      	b.n	800bb0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800baea:	4b0e      	ldr	r3, [pc, #56]	@ (800bb24 <prvAddCurrentTaskToDelayedList+0xa0>)
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	4b0a      	ldr	r3, [pc, #40]	@ (800bb18 <prvAddCurrentTaskToDelayedList+0x94>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	3304      	adds	r3, #4
 800baf4:	4619      	mov	r1, r3
 800baf6:	4610      	mov	r0, r2
 800baf8:	f7fe fa89 	bl	800a00e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bafc:	4b0a      	ldr	r3, [pc, #40]	@ (800bb28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	68ba      	ldr	r2, [r7, #8]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d202      	bcs.n	800bb0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bb06:	4a08      	ldr	r2, [pc, #32]	@ (800bb28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	6013      	str	r3, [r2, #0]
}
 800bb0c:	bf00      	nop
 800bb0e:	3710      	adds	r7, #16
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	20000ffc 	.word	0x20000ffc
 800bb18:	20000b24 	.word	0x20000b24
 800bb1c:	20000fe4 	.word	0x20000fe4
 800bb20:	20000fb4 	.word	0x20000fb4
 800bb24:	20000fb0 	.word	0x20000fb0
 800bb28:	20001018 	.word	0x20001018

0800bb2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b08a      	sub	sp, #40	@ 0x28
 800bb30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bb32:	2300      	movs	r3, #0
 800bb34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bb36:	f000 fb13 	bl	800c160 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bb3a:	4b1d      	ldr	r3, [pc, #116]	@ (800bbb0 <xTimerCreateTimerTask+0x84>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d021      	beq.n	800bb86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bb42:	2300      	movs	r3, #0
 800bb44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bb46:	2300      	movs	r3, #0
 800bb48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bb4a:	1d3a      	adds	r2, r7, #4
 800bb4c:	f107 0108 	add.w	r1, r7, #8
 800bb50:	f107 030c 	add.w	r3, r7, #12
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7fe f9ef 	bl	8009f38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bb5a:	6879      	ldr	r1, [r7, #4]
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	9202      	str	r2, [sp, #8]
 800bb62:	9301      	str	r3, [sp, #4]
 800bb64:	2302      	movs	r3, #2
 800bb66:	9300      	str	r3, [sp, #0]
 800bb68:	2300      	movs	r3, #0
 800bb6a:	460a      	mov	r2, r1
 800bb6c:	4911      	ldr	r1, [pc, #68]	@ (800bbb4 <xTimerCreateTimerTask+0x88>)
 800bb6e:	4812      	ldr	r0, [pc, #72]	@ (800bbb8 <xTimerCreateTimerTask+0x8c>)
 800bb70:	f7ff f8a2 	bl	800acb8 <xTaskCreateStatic>
 800bb74:	4603      	mov	r3, r0
 800bb76:	4a11      	ldr	r2, [pc, #68]	@ (800bbbc <xTimerCreateTimerTask+0x90>)
 800bb78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bb7a:	4b10      	ldr	r3, [pc, #64]	@ (800bbbc <xTimerCreateTimerTask+0x90>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d001      	beq.n	800bb86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bb82:	2301      	movs	r3, #1
 800bb84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10b      	bne.n	800bba4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bb8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb90:	f383 8811 	msr	BASEPRI, r3
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	f3bf 8f4f 	dsb	sy
 800bb9c:	613b      	str	r3, [r7, #16]
}
 800bb9e:	bf00      	nop
 800bba0:	bf00      	nop
 800bba2:	e7fd      	b.n	800bba0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bba4:	697b      	ldr	r3, [r7, #20]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3718      	adds	r7, #24
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	20001054 	.word	0x20001054
 800bbb4:	0800cd04 	.word	0x0800cd04
 800bbb8:	0800bcf9 	.word	0x0800bcf9
 800bbbc:	20001058 	.word	0x20001058

0800bbc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b08a      	sub	sp, #40	@ 0x28
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
 800bbcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d10b      	bne.n	800bbf0 <xTimerGenericCommand+0x30>
	__asm volatile
 800bbd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbdc:	f383 8811 	msr	BASEPRI, r3
 800bbe0:	f3bf 8f6f 	isb	sy
 800bbe4:	f3bf 8f4f 	dsb	sy
 800bbe8:	623b      	str	r3, [r7, #32]
}
 800bbea:	bf00      	nop
 800bbec:	bf00      	nop
 800bbee:	e7fd      	b.n	800bbec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bbf0:	4b19      	ldr	r3, [pc, #100]	@ (800bc58 <xTimerGenericCommand+0x98>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d02a      	beq.n	800bc4e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	2b05      	cmp	r3, #5
 800bc08:	dc18      	bgt.n	800bc3c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bc0a:	f7ff fead 	bl	800b968 <xTaskGetSchedulerState>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b02      	cmp	r3, #2
 800bc12:	d109      	bne.n	800bc28 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bc14:	4b10      	ldr	r3, [pc, #64]	@ (800bc58 <xTimerGenericCommand+0x98>)
 800bc16:	6818      	ldr	r0, [r3, #0]
 800bc18:	f107 0110 	add.w	r1, r7, #16
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc20:	f7fe fc0c 	bl	800a43c <xQueueGenericSend>
 800bc24:	6278      	str	r0, [r7, #36]	@ 0x24
 800bc26:	e012      	b.n	800bc4e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bc28:	4b0b      	ldr	r3, [pc, #44]	@ (800bc58 <xTimerGenericCommand+0x98>)
 800bc2a:	6818      	ldr	r0, [r3, #0]
 800bc2c:	f107 0110 	add.w	r1, r7, #16
 800bc30:	2300      	movs	r3, #0
 800bc32:	2200      	movs	r2, #0
 800bc34:	f7fe fc02 	bl	800a43c <xQueueGenericSend>
 800bc38:	6278      	str	r0, [r7, #36]	@ 0x24
 800bc3a:	e008      	b.n	800bc4e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bc3c:	4b06      	ldr	r3, [pc, #24]	@ (800bc58 <xTimerGenericCommand+0x98>)
 800bc3e:	6818      	ldr	r0, [r3, #0]
 800bc40:	f107 0110 	add.w	r1, r7, #16
 800bc44:	2300      	movs	r3, #0
 800bc46:	683a      	ldr	r2, [r7, #0]
 800bc48:	f7fe fcfa 	bl	800a640 <xQueueGenericSendFromISR>
 800bc4c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bc4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3728      	adds	r7, #40	@ 0x28
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	20001054 	.word	0x20001054

0800bc5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b088      	sub	sp, #32
 800bc60:	af02      	add	r7, sp, #8
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc66:	4b23      	ldr	r3, [pc, #140]	@ (800bcf4 <prvProcessExpiredTimer+0x98>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	3304      	adds	r3, #4
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7fe fa03 	bl	800a080 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc80:	f003 0304 	and.w	r3, r3, #4
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d023      	beq.n	800bcd0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	699a      	ldr	r2, [r3, #24]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	18d1      	adds	r1, r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	683a      	ldr	r2, [r7, #0]
 800bc94:	6978      	ldr	r0, [r7, #20]
 800bc96:	f000 f8d5 	bl	800be44 <prvInsertTimerInActiveList>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d020      	beq.n	800bce2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bca0:	2300      	movs	r3, #0
 800bca2:	9300      	str	r3, [sp, #0]
 800bca4:	2300      	movs	r3, #0
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	2100      	movs	r1, #0
 800bcaa:	6978      	ldr	r0, [r7, #20]
 800bcac:	f7ff ff88 	bl	800bbc0 <xTimerGenericCommand>
 800bcb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d114      	bne.n	800bce2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bcb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcbc:	f383 8811 	msr	BASEPRI, r3
 800bcc0:	f3bf 8f6f 	isb	sy
 800bcc4:	f3bf 8f4f 	dsb	sy
 800bcc8:	60fb      	str	r3, [r7, #12]
}
 800bcca:	bf00      	nop
 800bccc:	bf00      	nop
 800bcce:	e7fd      	b.n	800bccc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bcd6:	f023 0301 	bic.w	r3, r3, #1
 800bcda:	b2da      	uxtb	r2, r3
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	6a1b      	ldr	r3, [r3, #32]
 800bce6:	6978      	ldr	r0, [r7, #20]
 800bce8:	4798      	blx	r3
}
 800bcea:	bf00      	nop
 800bcec:	3718      	adds	r7, #24
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	2000104c 	.word	0x2000104c

0800bcf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd00:	f107 0308 	add.w	r3, r7, #8
 800bd04:	4618      	mov	r0, r3
 800bd06:	f000 f859 	bl	800bdbc <prvGetNextExpireTime>
 800bd0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	4619      	mov	r1, r3
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	f000 f805 	bl	800bd20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bd16:	f000 f8d7 	bl	800bec8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd1a:	bf00      	nop
 800bd1c:	e7f0      	b.n	800bd00 <prvTimerTask+0x8>
	...

0800bd20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bd2a:	f7ff fa29 	bl	800b180 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd2e:	f107 0308 	add.w	r3, r7, #8
 800bd32:	4618      	mov	r0, r3
 800bd34:	f000 f866 	bl	800be04 <prvSampleTimeNow>
 800bd38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d130      	bne.n	800bda2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d10a      	bne.n	800bd5c <prvProcessTimerOrBlockTask+0x3c>
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d806      	bhi.n	800bd5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bd4e:	f7ff fa25 	bl	800b19c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bd52:	68f9      	ldr	r1, [r7, #12]
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f7ff ff81 	bl	800bc5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bd5a:	e024      	b.n	800bda6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d008      	beq.n	800bd74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bd62:	4b13      	ldr	r3, [pc, #76]	@ (800bdb0 <prvProcessTimerOrBlockTask+0x90>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d101      	bne.n	800bd70 <prvProcessTimerOrBlockTask+0x50>
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e000      	b.n	800bd72 <prvProcessTimerOrBlockTask+0x52>
 800bd70:	2300      	movs	r3, #0
 800bd72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bd74:	4b0f      	ldr	r3, [pc, #60]	@ (800bdb4 <prvProcessTimerOrBlockTask+0x94>)
 800bd76:	6818      	ldr	r0, [r3, #0]
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	1ad3      	subs	r3, r2, r3
 800bd7e:	683a      	ldr	r2, [r7, #0]
 800bd80:	4619      	mov	r1, r3
 800bd82:	f7fe ff65 	bl	800ac50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bd86:	f7ff fa09 	bl	800b19c <xTaskResumeAll>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d10a      	bne.n	800bda6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bd90:	4b09      	ldr	r3, [pc, #36]	@ (800bdb8 <prvProcessTimerOrBlockTask+0x98>)
 800bd92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd96:	601a      	str	r2, [r3, #0]
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	f3bf 8f6f 	isb	sy
}
 800bda0:	e001      	b.n	800bda6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bda2:	f7ff f9fb 	bl	800b19c <xTaskResumeAll>
}
 800bda6:	bf00      	nop
 800bda8:	3710      	adds	r7, #16
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	20001050 	.word	0x20001050
 800bdb4:	20001054 	.word	0x20001054
 800bdb8:	e000ed04 	.word	0xe000ed04

0800bdbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bdc4:	4b0e      	ldr	r3, [pc, #56]	@ (800be00 <prvGetNextExpireTime+0x44>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d101      	bne.n	800bdd2 <prvGetNextExpireTime+0x16>
 800bdce:	2201      	movs	r2, #1
 800bdd0:	e000      	b.n	800bdd4 <prvGetNextExpireTime+0x18>
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d105      	bne.n	800bdec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bde0:	4b07      	ldr	r3, [pc, #28]	@ (800be00 <prvGetNextExpireTime+0x44>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	68db      	ldr	r3, [r3, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	60fb      	str	r3, [r7, #12]
 800bdea:	e001      	b.n	800bdf0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bdec:	2300      	movs	r3, #0
 800bdee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3714      	adds	r7, #20
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	2000104c 	.word	0x2000104c

0800be04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800be0c:	f7ff fa64 	bl	800b2d8 <xTaskGetTickCount>
 800be10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800be12:	4b0b      	ldr	r3, [pc, #44]	@ (800be40 <prvSampleTimeNow+0x3c>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	68fa      	ldr	r2, [r7, #12]
 800be18:	429a      	cmp	r2, r3
 800be1a:	d205      	bcs.n	800be28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800be1c:	f000 f93a 	bl	800c094 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2201      	movs	r2, #1
 800be24:	601a      	str	r2, [r3, #0]
 800be26:	e002      	b.n	800be2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800be2e:	4a04      	ldr	r2, [pc, #16]	@ (800be40 <prvSampleTimeNow+0x3c>)
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800be34:	68fb      	ldr	r3, [r7, #12]
}
 800be36:	4618      	mov	r0, r3
 800be38:	3710      	adds	r7, #16
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	2000105c 	.word	0x2000105c

0800be44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b086      	sub	sp, #24
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	607a      	str	r2, [r7, #4]
 800be50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800be52:	2300      	movs	r3, #0
 800be54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	68ba      	ldr	r2, [r7, #8]
 800be5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800be62:	68ba      	ldr	r2, [r7, #8]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	429a      	cmp	r2, r3
 800be68:	d812      	bhi.n	800be90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	1ad2      	subs	r2, r2, r3
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	699b      	ldr	r3, [r3, #24]
 800be74:	429a      	cmp	r2, r3
 800be76:	d302      	bcc.n	800be7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800be78:	2301      	movs	r3, #1
 800be7a:	617b      	str	r3, [r7, #20]
 800be7c:	e01b      	b.n	800beb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800be7e:	4b10      	ldr	r3, [pc, #64]	@ (800bec0 <prvInsertTimerInActiveList+0x7c>)
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	3304      	adds	r3, #4
 800be86:	4619      	mov	r1, r3
 800be88:	4610      	mov	r0, r2
 800be8a:	f7fe f8c0 	bl	800a00e <vListInsert>
 800be8e:	e012      	b.n	800beb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	429a      	cmp	r2, r3
 800be96:	d206      	bcs.n	800bea6 <prvInsertTimerInActiveList+0x62>
 800be98:	68ba      	ldr	r2, [r7, #8]
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d302      	bcc.n	800bea6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bea0:	2301      	movs	r3, #1
 800bea2:	617b      	str	r3, [r7, #20]
 800bea4:	e007      	b.n	800beb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bea6:	4b07      	ldr	r3, [pc, #28]	@ (800bec4 <prvInsertTimerInActiveList+0x80>)
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	3304      	adds	r3, #4
 800beae:	4619      	mov	r1, r3
 800beb0:	4610      	mov	r0, r2
 800beb2:	f7fe f8ac 	bl	800a00e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800beb6:	697b      	ldr	r3, [r7, #20]
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3718      	adds	r7, #24
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	20001050 	.word	0x20001050
 800bec4:	2000104c 	.word	0x2000104c

0800bec8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b08e      	sub	sp, #56	@ 0x38
 800becc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bece:	e0ce      	b.n	800c06e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	da19      	bge.n	800bf0a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bed6:	1d3b      	adds	r3, r7, #4
 800bed8:	3304      	adds	r3, #4
 800beda:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d10b      	bne.n	800befa <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bee6:	f383 8811 	msr	BASEPRI, r3
 800beea:	f3bf 8f6f 	isb	sy
 800beee:	f3bf 8f4f 	dsb	sy
 800bef2:	61fb      	str	r3, [r7, #28]
}
 800bef4:	bf00      	nop
 800bef6:	bf00      	nop
 800bef8:	e7fd      	b.n	800bef6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800befa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf00:	6850      	ldr	r0, [r2, #4]
 800bf02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf04:	6892      	ldr	r2, [r2, #8]
 800bf06:	4611      	mov	r1, r2
 800bf08:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	f2c0 80ae 	blt.w	800c06e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bf16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf18:	695b      	ldr	r3, [r3, #20]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d004      	beq.n	800bf28 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf20:	3304      	adds	r3, #4
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7fe f8ac 	bl	800a080 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf28:	463b      	mov	r3, r7
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7ff ff6a 	bl	800be04 <prvSampleTimeNow>
 800bf30:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2b09      	cmp	r3, #9
 800bf36:	f200 8097 	bhi.w	800c068 <prvProcessReceivedCommands+0x1a0>
 800bf3a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf40 <prvProcessReceivedCommands+0x78>)
 800bf3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf40:	0800bf69 	.word	0x0800bf69
 800bf44:	0800bf69 	.word	0x0800bf69
 800bf48:	0800bf69 	.word	0x0800bf69
 800bf4c:	0800bfdf 	.word	0x0800bfdf
 800bf50:	0800bff3 	.word	0x0800bff3
 800bf54:	0800c03f 	.word	0x0800c03f
 800bf58:	0800bf69 	.word	0x0800bf69
 800bf5c:	0800bf69 	.word	0x0800bf69
 800bf60:	0800bfdf 	.word	0x0800bfdf
 800bf64:	0800bff3 	.word	0x0800bff3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf6e:	f043 0301 	orr.w	r3, r3, #1
 800bf72:	b2da      	uxtb	r2, r3
 800bf74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf7e:	699b      	ldr	r3, [r3, #24]
 800bf80:	18d1      	adds	r1, r2, r3
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf88:	f7ff ff5c 	bl	800be44 <prvInsertTimerInActiveList>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d06c      	beq.n	800c06c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf94:	6a1b      	ldr	r3, [r3, #32]
 800bf96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfa0:	f003 0304 	and.w	r3, r3, #4
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d061      	beq.n	800c06c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bfa8:	68ba      	ldr	r2, [r7, #8]
 800bfaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfac:	699b      	ldr	r3, [r3, #24]
 800bfae:	441a      	add	r2, r3
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	9300      	str	r3, [sp, #0]
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	2100      	movs	r1, #0
 800bfb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfba:	f7ff fe01 	bl	800bbc0 <xTimerGenericCommand>
 800bfbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bfc0:	6a3b      	ldr	r3, [r7, #32]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d152      	bne.n	800c06c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bfc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfca:	f383 8811 	msr	BASEPRI, r3
 800bfce:	f3bf 8f6f 	isb	sy
 800bfd2:	f3bf 8f4f 	dsb	sy
 800bfd6:	61bb      	str	r3, [r7, #24]
}
 800bfd8:	bf00      	nop
 800bfda:	bf00      	nop
 800bfdc:	e7fd      	b.n	800bfda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfe4:	f023 0301 	bic.w	r3, r3, #1
 800bfe8:	b2da      	uxtb	r2, r3
 800bfea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bff0:	e03d      	b.n	800c06e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bff8:	f043 0301 	orr.w	r3, r3, #1
 800bffc:	b2da      	uxtb	r2, r3
 800bffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c000:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c008:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c00c:	699b      	ldr	r3, [r3, #24]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d10b      	bne.n	800c02a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c016:	f383 8811 	msr	BASEPRI, r3
 800c01a:	f3bf 8f6f 	isb	sy
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	617b      	str	r3, [r7, #20]
}
 800c024:	bf00      	nop
 800c026:	bf00      	nop
 800c028:	e7fd      	b.n	800c026 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c02c:	699a      	ldr	r2, [r3, #24]
 800c02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c030:	18d1      	adds	r1, r2, r3
 800c032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c036:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c038:	f7ff ff04 	bl	800be44 <prvInsertTimerInActiveList>
					break;
 800c03c:	e017      	b.n	800c06e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c03e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c040:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c044:	f003 0302 	and.w	r3, r3, #2
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d103      	bne.n	800c054 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c04c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c04e:	f000 fbeb 	bl	800c828 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c052:	e00c      	b.n	800c06e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c056:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c05a:	f023 0301 	bic.w	r3, r3, #1
 800c05e:	b2da      	uxtb	r2, r3
 800c060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c062:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c066:	e002      	b.n	800c06e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c068:	bf00      	nop
 800c06a:	e000      	b.n	800c06e <prvProcessReceivedCommands+0x1a6>
					break;
 800c06c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c06e:	4b08      	ldr	r3, [pc, #32]	@ (800c090 <prvProcessReceivedCommands+0x1c8>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	1d39      	adds	r1, r7, #4
 800c074:	2200      	movs	r2, #0
 800c076:	4618      	mov	r0, r3
 800c078:	f7fe fb80 	bl	800a77c <xQueueReceive>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f47f af26 	bne.w	800bed0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c084:	bf00      	nop
 800c086:	bf00      	nop
 800c088:	3730      	adds	r7, #48	@ 0x30
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	20001054 	.word	0x20001054

0800c094 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b088      	sub	sp, #32
 800c098:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c09a:	e049      	b.n	800c130 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c09c:	4b2e      	ldr	r3, [pc, #184]	@ (800c158 <prvSwitchTimerLists+0xc4>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0a6:	4b2c      	ldr	r3, [pc, #176]	@ (800c158 <prvSwitchTimerLists+0xc4>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	68db      	ldr	r3, [r3, #12]
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	3304      	adds	r3, #4
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7fd ffe3 	bl	800a080 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	6a1b      	ldr	r3, [r3, #32]
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0c8:	f003 0304 	and.w	r3, r3, #4
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d02f      	beq.n	800c130 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	699b      	ldr	r3, [r3, #24]
 800c0d4:	693a      	ldr	r2, [r7, #16]
 800c0d6:	4413      	add	r3, r2
 800c0d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c0da:	68ba      	ldr	r2, [r7, #8]
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d90e      	bls.n	800c100 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	68ba      	ldr	r2, [r7, #8]
 800c0e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	68fa      	ldr	r2, [r7, #12]
 800c0ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0ee:	4b1a      	ldr	r3, [pc, #104]	@ (800c158 <prvSwitchTimerLists+0xc4>)
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	3304      	adds	r3, #4
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	4610      	mov	r0, r2
 800c0fa:	f7fd ff88 	bl	800a00e <vListInsert>
 800c0fe:	e017      	b.n	800c130 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c100:	2300      	movs	r3, #0
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	2300      	movs	r3, #0
 800c106:	693a      	ldr	r2, [r7, #16]
 800c108:	2100      	movs	r1, #0
 800c10a:	68f8      	ldr	r0, [r7, #12]
 800c10c:	f7ff fd58 	bl	800bbc0 <xTimerGenericCommand>
 800c110:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10b      	bne.n	800c130 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c11c:	f383 8811 	msr	BASEPRI, r3
 800c120:	f3bf 8f6f 	isb	sy
 800c124:	f3bf 8f4f 	dsb	sy
 800c128:	603b      	str	r3, [r7, #0]
}
 800c12a:	bf00      	nop
 800c12c:	bf00      	nop
 800c12e:	e7fd      	b.n	800c12c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c130:	4b09      	ldr	r3, [pc, #36]	@ (800c158 <prvSwitchTimerLists+0xc4>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1b0      	bne.n	800c09c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c13a:	4b07      	ldr	r3, [pc, #28]	@ (800c158 <prvSwitchTimerLists+0xc4>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c140:	4b06      	ldr	r3, [pc, #24]	@ (800c15c <prvSwitchTimerLists+0xc8>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a04      	ldr	r2, [pc, #16]	@ (800c158 <prvSwitchTimerLists+0xc4>)
 800c146:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c148:	4a04      	ldr	r2, [pc, #16]	@ (800c15c <prvSwitchTimerLists+0xc8>)
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	6013      	str	r3, [r2, #0]
}
 800c14e:	bf00      	nop
 800c150:	3718      	adds	r7, #24
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	2000104c 	.word	0x2000104c
 800c15c:	20001050 	.word	0x20001050

0800c160 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c166:	f000 f96f 	bl	800c448 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c16a:	4b15      	ldr	r3, [pc, #84]	@ (800c1c0 <prvCheckForValidListAndQueue+0x60>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d120      	bne.n	800c1b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c172:	4814      	ldr	r0, [pc, #80]	@ (800c1c4 <prvCheckForValidListAndQueue+0x64>)
 800c174:	f7fd fefa 	bl	8009f6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c178:	4813      	ldr	r0, [pc, #76]	@ (800c1c8 <prvCheckForValidListAndQueue+0x68>)
 800c17a:	f7fd fef7 	bl	8009f6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c17e:	4b13      	ldr	r3, [pc, #76]	@ (800c1cc <prvCheckForValidListAndQueue+0x6c>)
 800c180:	4a10      	ldr	r2, [pc, #64]	@ (800c1c4 <prvCheckForValidListAndQueue+0x64>)
 800c182:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c184:	4b12      	ldr	r3, [pc, #72]	@ (800c1d0 <prvCheckForValidListAndQueue+0x70>)
 800c186:	4a10      	ldr	r2, [pc, #64]	@ (800c1c8 <prvCheckForValidListAndQueue+0x68>)
 800c188:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c18a:	2300      	movs	r3, #0
 800c18c:	9300      	str	r3, [sp, #0]
 800c18e:	4b11      	ldr	r3, [pc, #68]	@ (800c1d4 <prvCheckForValidListAndQueue+0x74>)
 800c190:	4a11      	ldr	r2, [pc, #68]	@ (800c1d8 <prvCheckForValidListAndQueue+0x78>)
 800c192:	2110      	movs	r1, #16
 800c194:	200a      	movs	r0, #10
 800c196:	f7fe f807 	bl	800a1a8 <xQueueGenericCreateStatic>
 800c19a:	4603      	mov	r3, r0
 800c19c:	4a08      	ldr	r2, [pc, #32]	@ (800c1c0 <prvCheckForValidListAndQueue+0x60>)
 800c19e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c1a0:	4b07      	ldr	r3, [pc, #28]	@ (800c1c0 <prvCheckForValidListAndQueue+0x60>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d005      	beq.n	800c1b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c1a8:	4b05      	ldr	r3, [pc, #20]	@ (800c1c0 <prvCheckForValidListAndQueue+0x60>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	490b      	ldr	r1, [pc, #44]	@ (800c1dc <prvCheckForValidListAndQueue+0x7c>)
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7fe fcfa 	bl	800aba8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c1b4:	f000 f97a 	bl	800c4ac <vPortExitCritical>
}
 800c1b8:	bf00      	nop
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	20001054 	.word	0x20001054
 800c1c4:	20001024 	.word	0x20001024
 800c1c8:	20001038 	.word	0x20001038
 800c1cc:	2000104c 	.word	0x2000104c
 800c1d0:	20001050 	.word	0x20001050
 800c1d4:	20001100 	.word	0x20001100
 800c1d8:	20001060 	.word	0x20001060
 800c1dc:	0800cd0c 	.word	0x0800cd0c

0800c1e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b085      	sub	sp, #20
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	60f8      	str	r0, [r7, #12]
 800c1e8:	60b9      	str	r1, [r7, #8]
 800c1ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	3b04      	subs	r3, #4
 800c1f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c1f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	3b04      	subs	r3, #4
 800c1fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	f023 0201 	bic.w	r2, r3, #1
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	3b04      	subs	r3, #4
 800c20e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c210:	4a0c      	ldr	r2, [pc, #48]	@ (800c244 <pxPortInitialiseStack+0x64>)
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	3b14      	subs	r3, #20
 800c21a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	3b04      	subs	r3, #4
 800c226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f06f 0202 	mvn.w	r2, #2
 800c22e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	3b20      	subs	r3, #32
 800c234:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c236:	68fb      	ldr	r3, [r7, #12]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3714      	adds	r7, #20
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr
 800c244:	0800c249 	.word	0x0800c249

0800c248 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c248:	b480      	push	{r7}
 800c24a:	b085      	sub	sp, #20
 800c24c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c24e:	2300      	movs	r3, #0
 800c250:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c252:	4b13      	ldr	r3, [pc, #76]	@ (800c2a0 <prvTaskExitError+0x58>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c25a:	d00b      	beq.n	800c274 <prvTaskExitError+0x2c>
	__asm volatile
 800c25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c260:	f383 8811 	msr	BASEPRI, r3
 800c264:	f3bf 8f6f 	isb	sy
 800c268:	f3bf 8f4f 	dsb	sy
 800c26c:	60fb      	str	r3, [r7, #12]
}
 800c26e:	bf00      	nop
 800c270:	bf00      	nop
 800c272:	e7fd      	b.n	800c270 <prvTaskExitError+0x28>
	__asm volatile
 800c274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c278:	f383 8811 	msr	BASEPRI, r3
 800c27c:	f3bf 8f6f 	isb	sy
 800c280:	f3bf 8f4f 	dsb	sy
 800c284:	60bb      	str	r3, [r7, #8]
}
 800c286:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c288:	bf00      	nop
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d0fc      	beq.n	800c28a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c290:	bf00      	nop
 800c292:	bf00      	nop
 800c294:	3714      	adds	r7, #20
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	2000000c 	.word	0x2000000c
	...

0800c2b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c2b0:	4b07      	ldr	r3, [pc, #28]	@ (800c2d0 <pxCurrentTCBConst2>)
 800c2b2:	6819      	ldr	r1, [r3, #0]
 800c2b4:	6808      	ldr	r0, [r1, #0]
 800c2b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ba:	f380 8809 	msr	PSP, r0
 800c2be:	f3bf 8f6f 	isb	sy
 800c2c2:	f04f 0000 	mov.w	r0, #0
 800c2c6:	f380 8811 	msr	BASEPRI, r0
 800c2ca:	4770      	bx	lr
 800c2cc:	f3af 8000 	nop.w

0800c2d0 <pxCurrentTCBConst2>:
 800c2d0:	20000b24 	.word	0x20000b24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c2d4:	bf00      	nop
 800c2d6:	bf00      	nop

0800c2d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c2d8:	4808      	ldr	r0, [pc, #32]	@ (800c2fc <prvPortStartFirstTask+0x24>)
 800c2da:	6800      	ldr	r0, [r0, #0]
 800c2dc:	6800      	ldr	r0, [r0, #0]
 800c2de:	f380 8808 	msr	MSP, r0
 800c2e2:	f04f 0000 	mov.w	r0, #0
 800c2e6:	f380 8814 	msr	CONTROL, r0
 800c2ea:	b662      	cpsie	i
 800c2ec:	b661      	cpsie	f
 800c2ee:	f3bf 8f4f 	dsb	sy
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	df00      	svc	0
 800c2f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c2fa:	bf00      	nop
 800c2fc:	e000ed08 	.word	0xe000ed08

0800c300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b086      	sub	sp, #24
 800c304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c306:	4b47      	ldr	r3, [pc, #284]	@ (800c424 <xPortStartScheduler+0x124>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a47      	ldr	r2, [pc, #284]	@ (800c428 <xPortStartScheduler+0x128>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d10b      	bne.n	800c328 <xPortStartScheduler+0x28>
	__asm volatile
 800c310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c314:	f383 8811 	msr	BASEPRI, r3
 800c318:	f3bf 8f6f 	isb	sy
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	613b      	str	r3, [r7, #16]
}
 800c322:	bf00      	nop
 800c324:	bf00      	nop
 800c326:	e7fd      	b.n	800c324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c328:	4b3e      	ldr	r3, [pc, #248]	@ (800c424 <xPortStartScheduler+0x124>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a3f      	ldr	r2, [pc, #252]	@ (800c42c <xPortStartScheduler+0x12c>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d10b      	bne.n	800c34a <xPortStartScheduler+0x4a>
	__asm volatile
 800c332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c336:	f383 8811 	msr	BASEPRI, r3
 800c33a:	f3bf 8f6f 	isb	sy
 800c33e:	f3bf 8f4f 	dsb	sy
 800c342:	60fb      	str	r3, [r7, #12]
}
 800c344:	bf00      	nop
 800c346:	bf00      	nop
 800c348:	e7fd      	b.n	800c346 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c34a:	4b39      	ldr	r3, [pc, #228]	@ (800c430 <xPortStartScheduler+0x130>)
 800c34c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	b2db      	uxtb	r3, r3
 800c354:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	22ff      	movs	r2, #255	@ 0xff
 800c35a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	b2db      	uxtb	r3, r3
 800c362:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c364:	78fb      	ldrb	r3, [r7, #3]
 800c366:	b2db      	uxtb	r3, r3
 800c368:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c36c:	b2da      	uxtb	r2, r3
 800c36e:	4b31      	ldr	r3, [pc, #196]	@ (800c434 <xPortStartScheduler+0x134>)
 800c370:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c372:	4b31      	ldr	r3, [pc, #196]	@ (800c438 <xPortStartScheduler+0x138>)
 800c374:	2207      	movs	r2, #7
 800c376:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c378:	e009      	b.n	800c38e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c37a:	4b2f      	ldr	r3, [pc, #188]	@ (800c438 <xPortStartScheduler+0x138>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	3b01      	subs	r3, #1
 800c380:	4a2d      	ldr	r2, [pc, #180]	@ (800c438 <xPortStartScheduler+0x138>)
 800c382:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c384:	78fb      	ldrb	r3, [r7, #3]
 800c386:	b2db      	uxtb	r3, r3
 800c388:	005b      	lsls	r3, r3, #1
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c38e:	78fb      	ldrb	r3, [r7, #3]
 800c390:	b2db      	uxtb	r3, r3
 800c392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c396:	2b80      	cmp	r3, #128	@ 0x80
 800c398:	d0ef      	beq.n	800c37a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c39a:	4b27      	ldr	r3, [pc, #156]	@ (800c438 <xPortStartScheduler+0x138>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f1c3 0307 	rsb	r3, r3, #7
 800c3a2:	2b04      	cmp	r3, #4
 800c3a4:	d00b      	beq.n	800c3be <xPortStartScheduler+0xbe>
	__asm volatile
 800c3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3aa:	f383 8811 	msr	BASEPRI, r3
 800c3ae:	f3bf 8f6f 	isb	sy
 800c3b2:	f3bf 8f4f 	dsb	sy
 800c3b6:	60bb      	str	r3, [r7, #8]
}
 800c3b8:	bf00      	nop
 800c3ba:	bf00      	nop
 800c3bc:	e7fd      	b.n	800c3ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c3be:	4b1e      	ldr	r3, [pc, #120]	@ (800c438 <xPortStartScheduler+0x138>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	021b      	lsls	r3, r3, #8
 800c3c4:	4a1c      	ldr	r2, [pc, #112]	@ (800c438 <xPortStartScheduler+0x138>)
 800c3c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c3c8:	4b1b      	ldr	r3, [pc, #108]	@ (800c438 <xPortStartScheduler+0x138>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c3d0:	4a19      	ldr	r2, [pc, #100]	@ (800c438 <xPortStartScheduler+0x138>)
 800c3d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	b2da      	uxtb	r2, r3
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c3dc:	4b17      	ldr	r3, [pc, #92]	@ (800c43c <xPortStartScheduler+0x13c>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a16      	ldr	r2, [pc, #88]	@ (800c43c <xPortStartScheduler+0x13c>)
 800c3e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c3e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c3e8:	4b14      	ldr	r3, [pc, #80]	@ (800c43c <xPortStartScheduler+0x13c>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a13      	ldr	r2, [pc, #76]	@ (800c43c <xPortStartScheduler+0x13c>)
 800c3ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c3f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c3f4:	f000 f8da 	bl	800c5ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c3f8:	4b11      	ldr	r3, [pc, #68]	@ (800c440 <xPortStartScheduler+0x140>)
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c3fe:	f000 f8f9 	bl	800c5f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c402:	4b10      	ldr	r3, [pc, #64]	@ (800c444 <xPortStartScheduler+0x144>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a0f      	ldr	r2, [pc, #60]	@ (800c444 <xPortStartScheduler+0x144>)
 800c408:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c40c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c40e:	f7ff ff63 	bl	800c2d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c412:	f7ff f82b 	bl	800b46c <vTaskSwitchContext>
	prvTaskExitError();
 800c416:	f7ff ff17 	bl	800c248 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c41a:	2300      	movs	r3, #0
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3718      	adds	r7, #24
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	e000ed00 	.word	0xe000ed00
 800c428:	410fc271 	.word	0x410fc271
 800c42c:	410fc270 	.word	0x410fc270
 800c430:	e000e400 	.word	0xe000e400
 800c434:	20001150 	.word	0x20001150
 800c438:	20001154 	.word	0x20001154
 800c43c:	e000ed20 	.word	0xe000ed20
 800c440:	2000000c 	.word	0x2000000c
 800c444:	e000ef34 	.word	0xe000ef34

0800c448 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c448:	b480      	push	{r7}
 800c44a:	b083      	sub	sp, #12
 800c44c:	af00      	add	r7, sp, #0
	__asm volatile
 800c44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	607b      	str	r3, [r7, #4]
}
 800c460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c462:	4b10      	ldr	r3, [pc, #64]	@ (800c4a4 <vPortEnterCritical+0x5c>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	3301      	adds	r3, #1
 800c468:	4a0e      	ldr	r2, [pc, #56]	@ (800c4a4 <vPortEnterCritical+0x5c>)
 800c46a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c46c:	4b0d      	ldr	r3, [pc, #52]	@ (800c4a4 <vPortEnterCritical+0x5c>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2b01      	cmp	r3, #1
 800c472:	d110      	bne.n	800c496 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c474:	4b0c      	ldr	r3, [pc, #48]	@ (800c4a8 <vPortEnterCritical+0x60>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00b      	beq.n	800c496 <vPortEnterCritical+0x4e>
	__asm volatile
 800c47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c482:	f383 8811 	msr	BASEPRI, r3
 800c486:	f3bf 8f6f 	isb	sy
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	603b      	str	r3, [r7, #0]
}
 800c490:	bf00      	nop
 800c492:	bf00      	nop
 800c494:	e7fd      	b.n	800c492 <vPortEnterCritical+0x4a>
	}
}
 800c496:	bf00      	nop
 800c498:	370c      	adds	r7, #12
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr
 800c4a2:	bf00      	nop
 800c4a4:	2000000c 	.word	0x2000000c
 800c4a8:	e000ed04 	.word	0xe000ed04

0800c4ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b083      	sub	sp, #12
 800c4b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c4b2:	4b12      	ldr	r3, [pc, #72]	@ (800c4fc <vPortExitCritical+0x50>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d10b      	bne.n	800c4d2 <vPortExitCritical+0x26>
	__asm volatile
 800c4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4be:	f383 8811 	msr	BASEPRI, r3
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	f3bf 8f4f 	dsb	sy
 800c4ca:	607b      	str	r3, [r7, #4]
}
 800c4cc:	bf00      	nop
 800c4ce:	bf00      	nop
 800c4d0:	e7fd      	b.n	800c4ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c4d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c4fc <vPortExitCritical+0x50>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	3b01      	subs	r3, #1
 800c4d8:	4a08      	ldr	r2, [pc, #32]	@ (800c4fc <vPortExitCritical+0x50>)
 800c4da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c4dc:	4b07      	ldr	r3, [pc, #28]	@ (800c4fc <vPortExitCritical+0x50>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d105      	bne.n	800c4f0 <vPortExitCritical+0x44>
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	f383 8811 	msr	BASEPRI, r3
}
 800c4ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c4f0:	bf00      	nop
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr
 800c4fc:	2000000c 	.word	0x2000000c

0800c500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c500:	f3ef 8009 	mrs	r0, PSP
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	4b15      	ldr	r3, [pc, #84]	@ (800c560 <pxCurrentTCBConst>)
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	f01e 0f10 	tst.w	lr, #16
 800c510:	bf08      	it	eq
 800c512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c51a:	6010      	str	r0, [r2, #0]
 800c51c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c520:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c524:	f380 8811 	msr	BASEPRI, r0
 800c528:	f3bf 8f4f 	dsb	sy
 800c52c:	f3bf 8f6f 	isb	sy
 800c530:	f7fe ff9c 	bl	800b46c <vTaskSwitchContext>
 800c534:	f04f 0000 	mov.w	r0, #0
 800c538:	f380 8811 	msr	BASEPRI, r0
 800c53c:	bc09      	pop	{r0, r3}
 800c53e:	6819      	ldr	r1, [r3, #0]
 800c540:	6808      	ldr	r0, [r1, #0]
 800c542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c546:	f01e 0f10 	tst.w	lr, #16
 800c54a:	bf08      	it	eq
 800c54c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c550:	f380 8809 	msr	PSP, r0
 800c554:	f3bf 8f6f 	isb	sy
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	f3af 8000 	nop.w

0800c560 <pxCurrentTCBConst>:
 800c560:	20000b24 	.word	0x20000b24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c564:	bf00      	nop
 800c566:	bf00      	nop

0800c568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
	__asm volatile
 800c56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c572:	f383 8811 	msr	BASEPRI, r3
 800c576:	f3bf 8f6f 	isb	sy
 800c57a:	f3bf 8f4f 	dsb	sy
 800c57e:	607b      	str	r3, [r7, #4]
}
 800c580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c582:	f7fe feb9 	bl	800b2f8 <xTaskIncrementTick>
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d003      	beq.n	800c594 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c58c:	4b06      	ldr	r3, [pc, #24]	@ (800c5a8 <xPortSysTickHandler+0x40>)
 800c58e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c592:	601a      	str	r2, [r3, #0]
 800c594:	2300      	movs	r3, #0
 800c596:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	f383 8811 	msr	BASEPRI, r3
}
 800c59e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c5a0:	bf00      	nop
 800c5a2:	3708      	adds	r7, #8
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	e000ed04 	.word	0xe000ed04

0800c5ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c5b0:	4b0b      	ldr	r3, [pc, #44]	@ (800c5e0 <vPortSetupTimerInterrupt+0x34>)
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c5b6:	4b0b      	ldr	r3, [pc, #44]	@ (800c5e4 <vPortSetupTimerInterrupt+0x38>)
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c5bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c5e8 <vPortSetupTimerInterrupt+0x3c>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a0a      	ldr	r2, [pc, #40]	@ (800c5ec <vPortSetupTimerInterrupt+0x40>)
 800c5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5c6:	099b      	lsrs	r3, r3, #6
 800c5c8:	4a09      	ldr	r2, [pc, #36]	@ (800c5f0 <vPortSetupTimerInterrupt+0x44>)
 800c5ca:	3b01      	subs	r3, #1
 800c5cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c5ce:	4b04      	ldr	r3, [pc, #16]	@ (800c5e0 <vPortSetupTimerInterrupt+0x34>)
 800c5d0:	2207      	movs	r2, #7
 800c5d2:	601a      	str	r2, [r3, #0]
}
 800c5d4:	bf00      	nop
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	e000e010 	.word	0xe000e010
 800c5e4:	e000e018 	.word	0xe000e018
 800c5e8:	20000000 	.word	0x20000000
 800c5ec:	10624dd3 	.word	0x10624dd3
 800c5f0:	e000e014 	.word	0xe000e014

0800c5f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c5f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c604 <vPortEnableVFP+0x10>
 800c5f8:	6801      	ldr	r1, [r0, #0]
 800c5fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c5fe:	6001      	str	r1, [r0, #0]
 800c600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c602:	bf00      	nop
 800c604:	e000ed88 	.word	0xe000ed88

0800c608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c608:	b480      	push	{r7}
 800c60a:	b085      	sub	sp, #20
 800c60c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c60e:	f3ef 8305 	mrs	r3, IPSR
 800c612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2b0f      	cmp	r3, #15
 800c618:	d915      	bls.n	800c646 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c61a:	4a18      	ldr	r2, [pc, #96]	@ (800c67c <vPortValidateInterruptPriority+0x74>)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	4413      	add	r3, r2
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c624:	4b16      	ldr	r3, [pc, #88]	@ (800c680 <vPortValidateInterruptPriority+0x78>)
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	7afa      	ldrb	r2, [r7, #11]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d20b      	bcs.n	800c646 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c632:	f383 8811 	msr	BASEPRI, r3
 800c636:	f3bf 8f6f 	isb	sy
 800c63a:	f3bf 8f4f 	dsb	sy
 800c63e:	607b      	str	r3, [r7, #4]
}
 800c640:	bf00      	nop
 800c642:	bf00      	nop
 800c644:	e7fd      	b.n	800c642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c646:	4b0f      	ldr	r3, [pc, #60]	@ (800c684 <vPortValidateInterruptPriority+0x7c>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c64e:	4b0e      	ldr	r3, [pc, #56]	@ (800c688 <vPortValidateInterruptPriority+0x80>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	429a      	cmp	r2, r3
 800c654:	d90b      	bls.n	800c66e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c65a:	f383 8811 	msr	BASEPRI, r3
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	f3bf 8f4f 	dsb	sy
 800c666:	603b      	str	r3, [r7, #0]
}
 800c668:	bf00      	nop
 800c66a:	bf00      	nop
 800c66c:	e7fd      	b.n	800c66a <vPortValidateInterruptPriority+0x62>
	}
 800c66e:	bf00      	nop
 800c670:	3714      	adds	r7, #20
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr
 800c67a:	bf00      	nop
 800c67c:	e000e3f0 	.word	0xe000e3f0
 800c680:	20001150 	.word	0x20001150
 800c684:	e000ed0c 	.word	0xe000ed0c
 800c688:	20001154 	.word	0x20001154

0800c68c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b08a      	sub	sp, #40	@ 0x28
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c694:	2300      	movs	r3, #0
 800c696:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c698:	f7fe fd72 	bl	800b180 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c69c:	4b5c      	ldr	r3, [pc, #368]	@ (800c810 <pvPortMalloc+0x184>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d101      	bne.n	800c6a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c6a4:	f000 f924 	bl	800c8f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c6a8:	4b5a      	ldr	r3, [pc, #360]	@ (800c814 <pvPortMalloc+0x188>)
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	4013      	ands	r3, r2
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	f040 8095 	bne.w	800c7e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d01e      	beq.n	800c6fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c6bc:	2208      	movs	r2, #8
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f003 0307 	and.w	r3, r3, #7
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d015      	beq.n	800c6fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f023 0307 	bic.w	r3, r3, #7
 800c6d4:	3308      	adds	r3, #8
 800c6d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f003 0307 	and.w	r3, r3, #7
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d00b      	beq.n	800c6fa <pvPortMalloc+0x6e>
	__asm volatile
 800c6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e6:	f383 8811 	msr	BASEPRI, r3
 800c6ea:	f3bf 8f6f 	isb	sy
 800c6ee:	f3bf 8f4f 	dsb	sy
 800c6f2:	617b      	str	r3, [r7, #20]
}
 800c6f4:	bf00      	nop
 800c6f6:	bf00      	nop
 800c6f8:	e7fd      	b.n	800c6f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d06f      	beq.n	800c7e0 <pvPortMalloc+0x154>
 800c700:	4b45      	ldr	r3, [pc, #276]	@ (800c818 <pvPortMalloc+0x18c>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	429a      	cmp	r2, r3
 800c708:	d86a      	bhi.n	800c7e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c70a:	4b44      	ldr	r3, [pc, #272]	@ (800c81c <pvPortMalloc+0x190>)
 800c70c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c70e:	4b43      	ldr	r3, [pc, #268]	@ (800c81c <pvPortMalloc+0x190>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c714:	e004      	b.n	800c720 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c718:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	429a      	cmp	r2, r3
 800c728:	d903      	bls.n	800c732 <pvPortMalloc+0xa6>
 800c72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1f1      	bne.n	800c716 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c732:	4b37      	ldr	r3, [pc, #220]	@ (800c810 <pvPortMalloc+0x184>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c738:	429a      	cmp	r2, r3
 800c73a:	d051      	beq.n	800c7e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c73c:	6a3b      	ldr	r3, [r7, #32]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2208      	movs	r2, #8
 800c742:	4413      	add	r3, r2
 800c744:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	6a3b      	ldr	r3, [r7, #32]
 800c74c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c750:	685a      	ldr	r2, [r3, #4]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	1ad2      	subs	r2, r2, r3
 800c756:	2308      	movs	r3, #8
 800c758:	005b      	lsls	r3, r3, #1
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d920      	bls.n	800c7a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c75e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4413      	add	r3, r2
 800c764:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c766:	69bb      	ldr	r3, [r7, #24]
 800c768:	f003 0307 	and.w	r3, r3, #7
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d00b      	beq.n	800c788 <pvPortMalloc+0xfc>
	__asm volatile
 800c770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c774:	f383 8811 	msr	BASEPRI, r3
 800c778:	f3bf 8f6f 	isb	sy
 800c77c:	f3bf 8f4f 	dsb	sy
 800c780:	613b      	str	r3, [r7, #16]
}
 800c782:	bf00      	nop
 800c784:	bf00      	nop
 800c786:	e7fd      	b.n	800c784 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78a:	685a      	ldr	r2, [r3, #4]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	1ad2      	subs	r2, r2, r3
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c79a:	69b8      	ldr	r0, [r7, #24]
 800c79c:	f000 f90a 	bl	800c9b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c7a0:	4b1d      	ldr	r3, [pc, #116]	@ (800c818 <pvPortMalloc+0x18c>)
 800c7a2:	681a      	ldr	r2, [r3, #0]
 800c7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	1ad3      	subs	r3, r2, r3
 800c7aa:	4a1b      	ldr	r2, [pc, #108]	@ (800c818 <pvPortMalloc+0x18c>)
 800c7ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c7ae:	4b1a      	ldr	r3, [pc, #104]	@ (800c818 <pvPortMalloc+0x18c>)
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	4b1b      	ldr	r3, [pc, #108]	@ (800c820 <pvPortMalloc+0x194>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d203      	bcs.n	800c7c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c7ba:	4b17      	ldr	r3, [pc, #92]	@ (800c818 <pvPortMalloc+0x18c>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a18      	ldr	r2, [pc, #96]	@ (800c820 <pvPortMalloc+0x194>)
 800c7c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c4:	685a      	ldr	r2, [r3, #4]
 800c7c6:	4b13      	ldr	r3, [pc, #76]	@ (800c814 <pvPortMalloc+0x188>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	431a      	orrs	r2, r3
 800c7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c7d6:	4b13      	ldr	r3, [pc, #76]	@ (800c824 <pvPortMalloc+0x198>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	3301      	adds	r3, #1
 800c7dc:	4a11      	ldr	r2, [pc, #68]	@ (800c824 <pvPortMalloc+0x198>)
 800c7de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c7e0:	f7fe fcdc 	bl	800b19c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7e4:	69fb      	ldr	r3, [r7, #28]
 800c7e6:	f003 0307 	and.w	r3, r3, #7
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d00b      	beq.n	800c806 <pvPortMalloc+0x17a>
	__asm volatile
 800c7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f2:	f383 8811 	msr	BASEPRI, r3
 800c7f6:	f3bf 8f6f 	isb	sy
 800c7fa:	f3bf 8f4f 	dsb	sy
 800c7fe:	60fb      	str	r3, [r7, #12]
}
 800c800:	bf00      	nop
 800c802:	bf00      	nop
 800c804:	e7fd      	b.n	800c802 <pvPortMalloc+0x176>
	return pvReturn;
 800c806:	69fb      	ldr	r3, [r7, #28]
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3728      	adds	r7, #40	@ 0x28
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	200028d0 	.word	0x200028d0
 800c814:	200028e4 	.word	0x200028e4
 800c818:	200028d4 	.word	0x200028d4
 800c81c:	200028c8 	.word	0x200028c8
 800c820:	200028d8 	.word	0x200028d8
 800c824:	200028dc 	.word	0x200028dc

0800c828 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b086      	sub	sp, #24
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d04f      	beq.n	800c8da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c83a:	2308      	movs	r3, #8
 800c83c:	425b      	negs	r3, r3
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	4413      	add	r3, r2
 800c842:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	685a      	ldr	r2, [r3, #4]
 800c84c:	4b25      	ldr	r3, [pc, #148]	@ (800c8e4 <vPortFree+0xbc>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4013      	ands	r3, r2
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10b      	bne.n	800c86e <vPortFree+0x46>
	__asm volatile
 800c856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	60fb      	str	r3, [r7, #12]
}
 800c868:	bf00      	nop
 800c86a:	bf00      	nop
 800c86c:	e7fd      	b.n	800c86a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d00b      	beq.n	800c88e <vPortFree+0x66>
	__asm volatile
 800c876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c87a:	f383 8811 	msr	BASEPRI, r3
 800c87e:	f3bf 8f6f 	isb	sy
 800c882:	f3bf 8f4f 	dsb	sy
 800c886:	60bb      	str	r3, [r7, #8]
}
 800c888:	bf00      	nop
 800c88a:	bf00      	nop
 800c88c:	e7fd      	b.n	800c88a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	685a      	ldr	r2, [r3, #4]
 800c892:	4b14      	ldr	r3, [pc, #80]	@ (800c8e4 <vPortFree+0xbc>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4013      	ands	r3, r2
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d01e      	beq.n	800c8da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d11a      	bne.n	800c8da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	685a      	ldr	r2, [r3, #4]
 800c8a8:	4b0e      	ldr	r3, [pc, #56]	@ (800c8e4 <vPortFree+0xbc>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	43db      	mvns	r3, r3
 800c8ae:	401a      	ands	r2, r3
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c8b4:	f7fe fc64 	bl	800b180 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	685a      	ldr	r2, [r3, #4]
 800c8bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c8e8 <vPortFree+0xc0>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	4a09      	ldr	r2, [pc, #36]	@ (800c8e8 <vPortFree+0xc0>)
 800c8c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c8c6:	6938      	ldr	r0, [r7, #16]
 800c8c8:	f000 f874 	bl	800c9b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c8cc:	4b07      	ldr	r3, [pc, #28]	@ (800c8ec <vPortFree+0xc4>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	4a06      	ldr	r2, [pc, #24]	@ (800c8ec <vPortFree+0xc4>)
 800c8d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c8d6:	f7fe fc61 	bl	800b19c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c8da:	bf00      	nop
 800c8dc:	3718      	adds	r7, #24
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	200028e4 	.word	0x200028e4
 800c8e8:	200028d4 	.word	0x200028d4
 800c8ec:	200028e0 	.word	0x200028e0

0800c8f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b085      	sub	sp, #20
 800c8f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c8f6:	f241 7370 	movw	r3, #6000	@ 0x1770
 800c8fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c8fc:	4b27      	ldr	r3, [pc, #156]	@ (800c99c <prvHeapInit+0xac>)
 800c8fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f003 0307 	and.w	r3, r3, #7
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00c      	beq.n	800c924 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	3307      	adds	r3, #7
 800c90e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f023 0307 	bic.w	r3, r3, #7
 800c916:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c918:	68ba      	ldr	r2, [r7, #8]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	1ad3      	subs	r3, r2, r3
 800c91e:	4a1f      	ldr	r2, [pc, #124]	@ (800c99c <prvHeapInit+0xac>)
 800c920:	4413      	add	r3, r2
 800c922:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c928:	4a1d      	ldr	r2, [pc, #116]	@ (800c9a0 <prvHeapInit+0xb0>)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c92e:	4b1c      	ldr	r3, [pc, #112]	@ (800c9a0 <prvHeapInit+0xb0>)
 800c930:	2200      	movs	r2, #0
 800c932:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	68ba      	ldr	r2, [r7, #8]
 800c938:	4413      	add	r3, r2
 800c93a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c93c:	2208      	movs	r2, #8
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	1a9b      	subs	r3, r3, r2
 800c942:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f023 0307 	bic.w	r3, r3, #7
 800c94a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	4a15      	ldr	r2, [pc, #84]	@ (800c9a4 <prvHeapInit+0xb4>)
 800c950:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c952:	4b14      	ldr	r3, [pc, #80]	@ (800c9a4 <prvHeapInit+0xb4>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2200      	movs	r2, #0
 800c958:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c95a:	4b12      	ldr	r3, [pc, #72]	@ (800c9a4 <prvHeapInit+0xb4>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2200      	movs	r2, #0
 800c960:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	68fa      	ldr	r2, [r7, #12]
 800c96a:	1ad2      	subs	r2, r2, r3
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c970:	4b0c      	ldr	r3, [pc, #48]	@ (800c9a4 <prvHeapInit+0xb4>)
 800c972:	681a      	ldr	r2, [r3, #0]
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	4a0a      	ldr	r2, [pc, #40]	@ (800c9a8 <prvHeapInit+0xb8>)
 800c97e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	4a09      	ldr	r2, [pc, #36]	@ (800c9ac <prvHeapInit+0xbc>)
 800c986:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c988:	4b09      	ldr	r3, [pc, #36]	@ (800c9b0 <prvHeapInit+0xc0>)
 800c98a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c98e:	601a      	str	r2, [r3, #0]
}
 800c990:	bf00      	nop
 800c992:	3714      	adds	r7, #20
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr
 800c99c:	20001158 	.word	0x20001158
 800c9a0:	200028c8 	.word	0x200028c8
 800c9a4:	200028d0 	.word	0x200028d0
 800c9a8:	200028d8 	.word	0x200028d8
 800c9ac:	200028d4 	.word	0x200028d4
 800c9b0:	200028e4 	.word	0x200028e4

0800c9b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b085      	sub	sp, #20
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c9bc:	4b28      	ldr	r3, [pc, #160]	@ (800ca60 <prvInsertBlockIntoFreeList+0xac>)
 800c9be:	60fb      	str	r3, [r7, #12]
 800c9c0:	e002      	b.n	800c9c8 <prvInsertBlockIntoFreeList+0x14>
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	60fb      	str	r3, [r7, #12]
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d8f7      	bhi.n	800c9c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	685b      	ldr	r3, [r3, #4]
 800c9da:	68ba      	ldr	r2, [r7, #8]
 800c9dc:	4413      	add	r3, r2
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d108      	bne.n	800c9f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	685a      	ldr	r2, [r3, #4]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	441a      	add	r2, r3
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	68ba      	ldr	r2, [r7, #8]
 800ca00:	441a      	add	r2, r3
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d118      	bne.n	800ca3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	4b15      	ldr	r3, [pc, #84]	@ (800ca64 <prvInsertBlockIntoFreeList+0xb0>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d00d      	beq.n	800ca32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	685a      	ldr	r2, [r3, #4]
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	441a      	add	r2, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	601a      	str	r2, [r3, #0]
 800ca30:	e008      	b.n	800ca44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ca32:	4b0c      	ldr	r3, [pc, #48]	@ (800ca64 <prvInsertBlockIntoFreeList+0xb0>)
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	601a      	str	r2, [r3, #0]
 800ca3a:	e003      	b.n	800ca44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681a      	ldr	r2, [r3, #0]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ca44:	68fa      	ldr	r2, [r7, #12]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d002      	beq.n	800ca52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca52:	bf00      	nop
 800ca54:	3714      	adds	r7, #20
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop
 800ca60:	200028c8 	.word	0x200028c8
 800ca64:	200028d0 	.word	0x200028d0

0800ca68 <_ZdlPvj>:
 800ca68:	f000 b800 	b.w	800ca6c <_ZdlPv>

0800ca6c <_ZdlPv>:
 800ca6c:	f000 b800 	b.w	800ca70 <free>

0800ca70 <free>:
 800ca70:	4b02      	ldr	r3, [pc, #8]	@ (800ca7c <free+0xc>)
 800ca72:	4601      	mov	r1, r0
 800ca74:	6818      	ldr	r0, [r3, #0]
 800ca76:	f000 b8a1 	b.w	800cbbc <_free_r>
 800ca7a:	bf00      	nop
 800ca7c:	20000010 	.word	0x20000010

0800ca80 <__malloc_lock>:
 800ca80:	4801      	ldr	r0, [pc, #4]	@ (800ca88 <__malloc_lock+0x8>)
 800ca82:	f000 b88b 	b.w	800cb9c <__retarget_lock_acquire_recursive>
 800ca86:	bf00      	nop
 800ca88:	20002a24 	.word	0x20002a24

0800ca8c <__malloc_unlock>:
 800ca8c:	4801      	ldr	r0, [pc, #4]	@ (800ca94 <__malloc_unlock+0x8>)
 800ca8e:	f000 b886 	b.w	800cb9e <__retarget_lock_release_recursive>
 800ca92:	bf00      	nop
 800ca94:	20002a24 	.word	0x20002a24

0800ca98 <memset>:
 800ca98:	4402      	add	r2, r0
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d100      	bne.n	800caa2 <memset+0xa>
 800caa0:	4770      	bx	lr
 800caa2:	f803 1b01 	strb.w	r1, [r3], #1
 800caa6:	e7f9      	b.n	800ca9c <memset+0x4>

0800caa8 <_reclaim_reent>:
 800caa8:	4b29      	ldr	r3, [pc, #164]	@ (800cb50 <_reclaim_reent+0xa8>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4283      	cmp	r3, r0
 800caae:	b570      	push	{r4, r5, r6, lr}
 800cab0:	4604      	mov	r4, r0
 800cab2:	d04b      	beq.n	800cb4c <_reclaim_reent+0xa4>
 800cab4:	69c3      	ldr	r3, [r0, #28]
 800cab6:	b1ab      	cbz	r3, 800cae4 <_reclaim_reent+0x3c>
 800cab8:	68db      	ldr	r3, [r3, #12]
 800caba:	b16b      	cbz	r3, 800cad8 <_reclaim_reent+0x30>
 800cabc:	2500      	movs	r5, #0
 800cabe:	69e3      	ldr	r3, [r4, #28]
 800cac0:	68db      	ldr	r3, [r3, #12]
 800cac2:	5959      	ldr	r1, [r3, r5]
 800cac4:	2900      	cmp	r1, #0
 800cac6:	d13b      	bne.n	800cb40 <_reclaim_reent+0x98>
 800cac8:	3504      	adds	r5, #4
 800caca:	2d80      	cmp	r5, #128	@ 0x80
 800cacc:	d1f7      	bne.n	800cabe <_reclaim_reent+0x16>
 800cace:	69e3      	ldr	r3, [r4, #28]
 800cad0:	4620      	mov	r0, r4
 800cad2:	68d9      	ldr	r1, [r3, #12]
 800cad4:	f000 f872 	bl	800cbbc <_free_r>
 800cad8:	69e3      	ldr	r3, [r4, #28]
 800cada:	6819      	ldr	r1, [r3, #0]
 800cadc:	b111      	cbz	r1, 800cae4 <_reclaim_reent+0x3c>
 800cade:	4620      	mov	r0, r4
 800cae0:	f000 f86c 	bl	800cbbc <_free_r>
 800cae4:	6961      	ldr	r1, [r4, #20]
 800cae6:	b111      	cbz	r1, 800caee <_reclaim_reent+0x46>
 800cae8:	4620      	mov	r0, r4
 800caea:	f000 f867 	bl	800cbbc <_free_r>
 800caee:	69e1      	ldr	r1, [r4, #28]
 800caf0:	b111      	cbz	r1, 800caf8 <_reclaim_reent+0x50>
 800caf2:	4620      	mov	r0, r4
 800caf4:	f000 f862 	bl	800cbbc <_free_r>
 800caf8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cafa:	b111      	cbz	r1, 800cb02 <_reclaim_reent+0x5a>
 800cafc:	4620      	mov	r0, r4
 800cafe:	f000 f85d 	bl	800cbbc <_free_r>
 800cb02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb04:	b111      	cbz	r1, 800cb0c <_reclaim_reent+0x64>
 800cb06:	4620      	mov	r0, r4
 800cb08:	f000 f858 	bl	800cbbc <_free_r>
 800cb0c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cb0e:	b111      	cbz	r1, 800cb16 <_reclaim_reent+0x6e>
 800cb10:	4620      	mov	r0, r4
 800cb12:	f000 f853 	bl	800cbbc <_free_r>
 800cb16:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cb18:	b111      	cbz	r1, 800cb20 <_reclaim_reent+0x78>
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	f000 f84e 	bl	800cbbc <_free_r>
 800cb20:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cb22:	b111      	cbz	r1, 800cb2a <_reclaim_reent+0x82>
 800cb24:	4620      	mov	r0, r4
 800cb26:	f000 f849 	bl	800cbbc <_free_r>
 800cb2a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cb2c:	b111      	cbz	r1, 800cb34 <_reclaim_reent+0x8c>
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f000 f844 	bl	800cbbc <_free_r>
 800cb34:	6a23      	ldr	r3, [r4, #32]
 800cb36:	b14b      	cbz	r3, 800cb4c <_reclaim_reent+0xa4>
 800cb38:	4620      	mov	r0, r4
 800cb3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb3e:	4718      	bx	r3
 800cb40:	680e      	ldr	r6, [r1, #0]
 800cb42:	4620      	mov	r0, r4
 800cb44:	f000 f83a 	bl	800cbbc <_free_r>
 800cb48:	4631      	mov	r1, r6
 800cb4a:	e7bb      	b.n	800cac4 <_reclaim_reent+0x1c>
 800cb4c:	bd70      	pop	{r4, r5, r6, pc}
 800cb4e:	bf00      	nop
 800cb50:	20000010 	.word	0x20000010

0800cb54 <__libc_init_array>:
 800cb54:	b570      	push	{r4, r5, r6, lr}
 800cb56:	4d0d      	ldr	r5, [pc, #52]	@ (800cb8c <__libc_init_array+0x38>)
 800cb58:	4c0d      	ldr	r4, [pc, #52]	@ (800cb90 <__libc_init_array+0x3c>)
 800cb5a:	1b64      	subs	r4, r4, r5
 800cb5c:	10a4      	asrs	r4, r4, #2
 800cb5e:	2600      	movs	r6, #0
 800cb60:	42a6      	cmp	r6, r4
 800cb62:	d109      	bne.n	800cb78 <__libc_init_array+0x24>
 800cb64:	4d0b      	ldr	r5, [pc, #44]	@ (800cb94 <__libc_init_array+0x40>)
 800cb66:	4c0c      	ldr	r4, [pc, #48]	@ (800cb98 <__libc_init_array+0x44>)
 800cb68:	f000 f872 	bl	800cc50 <_init>
 800cb6c:	1b64      	subs	r4, r4, r5
 800cb6e:	10a4      	asrs	r4, r4, #2
 800cb70:	2600      	movs	r6, #0
 800cb72:	42a6      	cmp	r6, r4
 800cb74:	d105      	bne.n	800cb82 <__libc_init_array+0x2e>
 800cb76:	bd70      	pop	{r4, r5, r6, pc}
 800cb78:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb7c:	4798      	blx	r3
 800cb7e:	3601      	adds	r6, #1
 800cb80:	e7ee      	b.n	800cb60 <__libc_init_array+0xc>
 800cb82:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb86:	4798      	blx	r3
 800cb88:	3601      	adds	r6, #1
 800cb8a:	e7f2      	b.n	800cb72 <__libc_init_array+0x1e>
 800cb8c:	0800d35c 	.word	0x0800d35c
 800cb90:	0800d35c 	.word	0x0800d35c
 800cb94:	0800d35c 	.word	0x0800d35c
 800cb98:	0800d364 	.word	0x0800d364

0800cb9c <__retarget_lock_acquire_recursive>:
 800cb9c:	4770      	bx	lr

0800cb9e <__retarget_lock_release_recursive>:
 800cb9e:	4770      	bx	lr

0800cba0 <memcpy>:
 800cba0:	440a      	add	r2, r1
 800cba2:	4291      	cmp	r1, r2
 800cba4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cba8:	d100      	bne.n	800cbac <memcpy+0xc>
 800cbaa:	4770      	bx	lr
 800cbac:	b510      	push	{r4, lr}
 800cbae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbb6:	4291      	cmp	r1, r2
 800cbb8:	d1f9      	bne.n	800cbae <memcpy+0xe>
 800cbba:	bd10      	pop	{r4, pc}

0800cbbc <_free_r>:
 800cbbc:	b538      	push	{r3, r4, r5, lr}
 800cbbe:	4605      	mov	r5, r0
 800cbc0:	2900      	cmp	r1, #0
 800cbc2:	d041      	beq.n	800cc48 <_free_r+0x8c>
 800cbc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbc8:	1f0c      	subs	r4, r1, #4
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	bfb8      	it	lt
 800cbce:	18e4      	addlt	r4, r4, r3
 800cbd0:	f7ff ff56 	bl	800ca80 <__malloc_lock>
 800cbd4:	4a1d      	ldr	r2, [pc, #116]	@ (800cc4c <_free_r+0x90>)
 800cbd6:	6813      	ldr	r3, [r2, #0]
 800cbd8:	b933      	cbnz	r3, 800cbe8 <_free_r+0x2c>
 800cbda:	6063      	str	r3, [r4, #4]
 800cbdc:	6014      	str	r4, [r2, #0]
 800cbde:	4628      	mov	r0, r5
 800cbe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbe4:	f7ff bf52 	b.w	800ca8c <__malloc_unlock>
 800cbe8:	42a3      	cmp	r3, r4
 800cbea:	d908      	bls.n	800cbfe <_free_r+0x42>
 800cbec:	6820      	ldr	r0, [r4, #0]
 800cbee:	1821      	adds	r1, r4, r0
 800cbf0:	428b      	cmp	r3, r1
 800cbf2:	bf01      	itttt	eq
 800cbf4:	6819      	ldreq	r1, [r3, #0]
 800cbf6:	685b      	ldreq	r3, [r3, #4]
 800cbf8:	1809      	addeq	r1, r1, r0
 800cbfa:	6021      	streq	r1, [r4, #0]
 800cbfc:	e7ed      	b.n	800cbda <_free_r+0x1e>
 800cbfe:	461a      	mov	r2, r3
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	b10b      	cbz	r3, 800cc08 <_free_r+0x4c>
 800cc04:	42a3      	cmp	r3, r4
 800cc06:	d9fa      	bls.n	800cbfe <_free_r+0x42>
 800cc08:	6811      	ldr	r1, [r2, #0]
 800cc0a:	1850      	adds	r0, r2, r1
 800cc0c:	42a0      	cmp	r0, r4
 800cc0e:	d10b      	bne.n	800cc28 <_free_r+0x6c>
 800cc10:	6820      	ldr	r0, [r4, #0]
 800cc12:	4401      	add	r1, r0
 800cc14:	1850      	adds	r0, r2, r1
 800cc16:	4283      	cmp	r3, r0
 800cc18:	6011      	str	r1, [r2, #0]
 800cc1a:	d1e0      	bne.n	800cbde <_free_r+0x22>
 800cc1c:	6818      	ldr	r0, [r3, #0]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	6053      	str	r3, [r2, #4]
 800cc22:	4408      	add	r0, r1
 800cc24:	6010      	str	r0, [r2, #0]
 800cc26:	e7da      	b.n	800cbde <_free_r+0x22>
 800cc28:	d902      	bls.n	800cc30 <_free_r+0x74>
 800cc2a:	230c      	movs	r3, #12
 800cc2c:	602b      	str	r3, [r5, #0]
 800cc2e:	e7d6      	b.n	800cbde <_free_r+0x22>
 800cc30:	6820      	ldr	r0, [r4, #0]
 800cc32:	1821      	adds	r1, r4, r0
 800cc34:	428b      	cmp	r3, r1
 800cc36:	bf04      	itt	eq
 800cc38:	6819      	ldreq	r1, [r3, #0]
 800cc3a:	685b      	ldreq	r3, [r3, #4]
 800cc3c:	6063      	str	r3, [r4, #4]
 800cc3e:	bf04      	itt	eq
 800cc40:	1809      	addeq	r1, r1, r0
 800cc42:	6021      	streq	r1, [r4, #0]
 800cc44:	6054      	str	r4, [r2, #4]
 800cc46:	e7ca      	b.n	800cbde <_free_r+0x22>
 800cc48:	bd38      	pop	{r3, r4, r5, pc}
 800cc4a:	bf00      	nop
 800cc4c:	200028e8 	.word	0x200028e8

0800cc50 <_init>:
 800cc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc52:	bf00      	nop
 800cc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc56:	bc08      	pop	{r3}
 800cc58:	469e      	mov	lr, r3
 800cc5a:	4770      	bx	lr

0800cc5c <_fini>:
 800cc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5e:	bf00      	nop
 800cc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc62:	bc08      	pop	{r3}
 800cc64:	469e      	mov	lr, r3
 800cc66:	4770      	bx	lr
