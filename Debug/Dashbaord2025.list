
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a60  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08007c10  08007c10  00008c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d08  08007d08  00009060  2**0
                  CONTENTS
  4 .ARM          00000000  08007d08  08007d08  00009060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d08  08007d08  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d08  08007d08  00008d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d0c  08007d0c  00008d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007d10  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c7c  20000060  08007d70  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cdc  08007d70  00009cdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000205c5  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041aa  00000000  00000000  00029655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d18  00000000  00000000  0002d800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001695  00000000  00000000  0002f518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cf0a  00000000  00000000  00030bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ebd2  00000000  00000000  0005dab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011eafa  00000000  00000000  0007c689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019b183  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fbc  00000000  00000000  0019b1c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  001a3184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007bf8 	.word	0x08007bf8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08007bf8 	.word	0x08007bf8

080001f0 <TCAL9538RSVR_INIT>:
    
    return pin_number; 
}

uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b086      	sub	sp, #24
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	60f8      	str	r0, [r7, #12]
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	4611      	mov	r1, r2
 80001fc:	461a      	mov	r2, r3
 80001fe:	460b      	mov	r3, r1
 8000200:	71fb      	strb	r3, [r7, #7]
 8000202:	4613      	mov	r3, r2
 8000204:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 8000206:	2300      	movs	r3, #0
 8000208:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;


    dev->i2cHandle = i2cHandle;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	68ba      	ldr	r2, [r7, #8]
 800020e:	601a      	str	r2, [r3, #0]
    dev->portValues = 0;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	2200      	movs	r2, #0
 8000214:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 0303 	and.w	r3, r3, #3
 800021c:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress << 1);
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	005b      	lsls	r3, r3, #1
 8000222:	b25b      	sxtb	r3, r3
 8000224:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000228:	b25b      	sxtb	r3, r3
 800022a:	b2da      	uxtb	r2, r3
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	711a      	strb	r2, [r3, #4]

    status = TCAL9538RSVR_SetDirection(dev, direction_bitMask);
 8000230:	79bb      	ldrb	r3, [r7, #6]
 8000232:	4619      	mov	r1, r3
 8000234:	68f8      	ldr	r0, [r7, #12]
 8000236:	f000 f823 	bl	8000280 <TCAL9538RSVR_SetDirection>
 800023a:	4603      	mov	r3, r0
 800023c:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 800023e:	7dbb      	ldrb	r3, [r7, #22]
 8000240:	2b00      	cmp	r3, #0
 8000242:	bf14      	ite	ne
 8000244:	2301      	movne	r3, #1
 8000246:	2300      	moveq	r3, #0
 8000248:	b2db      	uxtb	r3, r3
 800024a:	461a      	mov	r2, r3
 800024c:	7dfb      	ldrb	r3, [r7, #23]
 800024e:	4413      	add	r3, r2
 8000250:	75fb      	strb	r3, [r7, #23]

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 8000252:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000256:	4619      	mov	r1, r3
 8000258:	68f8      	ldr	r0, [r7, #12]
 800025a:	f000 f822 	bl	80002a2 <TCAL9538RSVR_SetInterrupts>
 800025e:	4603      	mov	r3, r0
 8000260:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8000262:	7dbb      	ldrb	r3, [r7, #22]
 8000264:	2b00      	cmp	r3, #0
 8000266:	bf14      	ite	ne
 8000268:	2301      	movne	r3, #1
 800026a:	2300      	moveq	r3, #0
 800026c:	b2db      	uxtb	r3, r3
 800026e:	461a      	mov	r2, r3
 8000270:	7dfb      	ldrb	r3, [r7, #23]
 8000272:	4413      	add	r3, r2
 8000274:	75fb      	strb	r3, [r7, #23]

    return (errNum);
 8000276:	7dfb      	ldrb	r3, [r7, #23]
}
 8000278:	4618      	mov	r0, r3
 800027a:	3718      	adds	r7, #24
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t bitMask)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, &bitMask);
 800028c:	1cfb      	adds	r3, r7, #3
 800028e:	461a      	mov	r2, r3
 8000290:	2103      	movs	r1, #3
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f000 f87d 	bl	8000392 <TCAL9538RSVR_WriteRegister>
 8000298:	4603      	mov	r3, r0
}
 800029a:	4618      	mov	r0, r3
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}

080002a2 <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 80002a2:	b580      	push	{r7, lr}
 80002a4:	b082      	sub	sp, #8
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	6078      	str	r0, [r7, #4]
 80002aa:	460b      	mov	r3, r1
 80002ac:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 80002ae:	1cfb      	adds	r3, r7, #3
 80002b0:	461a      	mov	r2, r3
 80002b2:	2145      	movs	r1, #69	@ 0x45
 80002b4:	6878      	ldr	r0, [r7, #4]
 80002b6:	f000 f86c 	bl	8000392 <TCAL9538RSVR_WriteRegister>
 80002ba:	4603      	mov	r3, r0
}
 80002bc:	4618      	mov	r0, r3
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    uint8_t triggeredInterrupts = 0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	737b      	strb	r3, [r7, #13]

    // Read updated input values
    status = TCAL9538RSVR_ReadInput(dev, &dev->portValues);
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	3305      	adds	r3, #5
 80002d8:	4619      	mov	r1, r3
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f000 f82d 	bl	800033a <TCAL9538RSVR_ReadInput>
 80002e0:	4603      	mov	r3, r0
 80002e2:	73bb      	strb	r3, [r7, #14]

    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 80002e4:	f107 030d 	add.w	r3, r7, #13
 80002e8:	461a      	mov	r2, r3
 80002ea:	2146      	movs	r1, #70	@ 0x46
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	f000 f833 	bl	8000358 <TCAL9538RSVR_ReadRegister>
 80002f2:	4603      	mov	r3, r0
 80002f4:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 80002f6:	7bbb      	ldrb	r3, [r7, #14]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	bf14      	ite	ne
 80002fc:	2301      	movne	r3, #1
 80002fe:	2300      	moveq	r3, #0
 8000300:	b2db      	uxtb	r3, r3
 8000302:	461a      	mov	r2, r3
 8000304:	7bfb      	ldrb	r3, [r7, #15]
 8000306:	4413      	add	r3, r2
 8000308:	73fb      	strb	r3, [r7, #15]

    status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 800030a:	f107 030d 	add.w	r3, r7, #13
 800030e:	461a      	mov	r2, r3
 8000310:	2146      	movs	r1, #70	@ 0x46
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f000 f83d 	bl	8000392 <TCAL9538RSVR_WriteRegister>
 8000318:	4603      	mov	r3, r0
 800031a:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 800031c:	7bbb      	ldrb	r3, [r7, #14]
 800031e:	2b00      	cmp	r3, #0
 8000320:	bf14      	ite	ne
 8000322:	2301      	movne	r3, #1
 8000324:	2300      	moveq	r3, #0
 8000326:	b2db      	uxtb	r3, r3
 8000328:	461a      	mov	r2, r3
 800032a:	7bfb      	ldrb	r3, [r7, #15]
 800032c:	4413      	add	r3, r2
 800032e:	73fb      	strb	r3, [r7, #15]

    return (errNum);
 8000330:	7bfb      	ldrb	r3, [r7, #15]
}
 8000332:	4618      	mov	r0, r3
 8000334:	3710      	adds	r7, #16
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}

0800033a <TCAL9538RSVR_ReadInput>:
    
// }


HAL_StatusTypeDef TCAL9538RSVR_ReadInput(TCAL9538RSVR* dev, uint8_t *data)
{
 800033a:	b580      	push	{r7, lr}
 800033c:	b082      	sub	sp, #8
 800033e:	af00      	add	r7, sp, #0
 8000340:	6078      	str	r0, [r7, #4]
 8000342:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, data);
 8000344:	683a      	ldr	r2, [r7, #0]
 8000346:	2100      	movs	r1, #0
 8000348:	6878      	ldr	r0, [r7, #4]
 800034a:	f000 f805 	bl	8000358 <TCAL9538RSVR_ReadRegister>
 800034e:	4603      	mov	r3, r0
}
 8000350:	4618      	mov	r0, r3
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <TCAL9538RSVR_ReadRegister>:
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
}

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af04      	add	r7, sp, #16
 800035e:	60f8      	str	r0, [r7, #12]
 8000360:	460b      	mov	r3, r1
 8000362:	607a      	str	r2, [r7, #4]
 8000364:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	6818      	ldr	r0, [r3, #0]
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	791b      	ldrb	r3, [r3, #4]
 800036e:	4619      	mov	r1, r3
 8000370:	7afb      	ldrb	r3, [r7, #11]
 8000372:	b29a      	uxth	r2, r3
 8000374:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000378:	9302      	str	r3, [sp, #8]
 800037a:	2301      	movs	r3, #1
 800037c:	9301      	str	r3, [sp, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	9300      	str	r3, [sp, #0]
 8000382:	2301      	movs	r3, #1
 8000384:	f002 faf2 	bl	800296c <HAL_I2C_Mem_Read>
 8000388:	4603      	mov	r3, r0
}
 800038a:	4618      	mov	r0, r3
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}

08000392 <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8000392:	b580      	push	{r7, lr}
 8000394:	b088      	sub	sp, #32
 8000396:	af04      	add	r7, sp, #16
 8000398:	60f8      	str	r0, [r7, #12]
 800039a:	460b      	mov	r3, r1
 800039c:	607a      	str	r2, [r7, #4]
 800039e:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	6818      	ldr	r0, [r3, #0]
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	791b      	ldrb	r3, [r3, #4]
 80003a8:	4619      	mov	r1, r3
 80003aa:	7afb      	ldrb	r3, [r7, #11]
 80003ac:	b29a      	uxth	r2, r3
 80003ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003b2:	9302      	str	r3, [sp, #8]
 80003b4:	2301      	movs	r3, #1
 80003b6:	9301      	str	r3, [sp, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	9300      	str	r3, [sp, #0]
 80003bc:	2301      	movs	r3, #1
 80003be:	f002 fad5 	bl	800296c <HAL_I2C_Mem_Read>
 80003c2:	4603      	mov	r3, r0
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3710      	adds	r7, #16
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <Update_GPIO_Flags>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Update_GPIO_Flags(uint8_t flags[8], uint8_t* Input1, uint8_t* Input2)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
	 * 3 - BMS ?
	 *
	 * Flags [0b10101010, 0b01010101] Input = [0b00000000, 0b11111111]
	 */

	flags[0] = 0;
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	2200      	movs	r2, #0
 80003dc:	701a      	strb	r2, [r3, #0]
	flags[1] = 0;
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	3301      	adds	r3, #1
 80003e2:	2200      	movs	r2, #0
 80003e4:	701a      	strb	r2, [r3, #0]

	flags[0] |= CHECK_BIT(*Input2, 4) << 0; // Main
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	b25a      	sxtb	r2, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	f003 0310 	and.w	r3, r3, #16
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	bf14      	ite	ne
 80003f8:	2301      	movne	r3, #1
 80003fa:	2300      	moveq	r3, #0
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	b25b      	sxtb	r3, r3
 8000400:	4313      	orrs	r3, r2
 8000402:	b25b      	sxtb	r3, r3
 8000404:	b2da      	uxtb	r2, r3
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(*Input2, 5) << 1; // Break
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	b25a      	sxtb	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	111b      	asrs	r3, r3, #4
 8000416:	b25b      	sxtb	r3, r3
 8000418:	f003 0302 	and.w	r3, r3, #2
 800041c:	b25b      	sxtb	r3, r3
 800041e:	4313      	orrs	r3, r2
 8000420:	b25b      	sxtb	r3, r3
 8000422:	b2da      	uxtb	r2, r3
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(*Input2, 0) << 2; // Mode
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	b25a      	sxtb	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	b25b      	sxtb	r3, r3
 8000436:	f003 0304 	and.w	r3, r3, #4
 800043a:	b25b      	sxtb	r3, r3
 800043c:	4313      	orrs	r3, r2
 800043e:	b25b      	sxtb	r3, r3
 8000440:	b2da      	uxtb	r2, r3
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(*Input1, 5) << 3; // MC
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	b25a      	sxtb	r2, r3
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	109b      	asrs	r3, r3, #2
 8000452:	b25b      	sxtb	r3, r3
 8000454:	f003 0308 	and.w	r3, r3, #8
 8000458:	b25b      	sxtb	r3, r3
 800045a:	4313      	orrs	r3, r2
 800045c:	b25b      	sxtb	r3, r3
 800045e:	b2da      	uxtb	r2, r3
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(*Input1, 6) << 4; // Array
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	b25a      	sxtb	r2, r3
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	109b      	asrs	r3, r3, #2
 8000470:	b25b      	sxtb	r3, r3
 8000472:	f003 0310 	and.w	r3, r3, #16
 8000476:	b25b      	sxtb	r3, r3
 8000478:	4313      	orrs	r3, r2
 800047a:	b25b      	sxtb	r3, r3
 800047c:	b2da      	uxtb	r2, r3
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(*Input1, 4) << 5; // Extra 1
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	b25a      	sxtb	r2, r3
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	b25b      	sxtb	r3, r3
 8000490:	f003 0320 	and.w	r3, r3, #32
 8000494:	b25b      	sxtb	r3, r3
 8000496:	4313      	orrs	r3, r2
 8000498:	b25b      	sxtb	r3, r3
 800049a:	b2da      	uxtb	r2, r3
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	701a      	strb	r2, [r3, #0]
	//flags[0] |= CHECK_BIT(?, ?) << 6; // Horn
	//flags[0] |= CHECK_BIT(?, ?) << 7; // PTT

	//flags[1] |= CHECK_BIT() << 0;

}
 80004a0:	bf00      	nop
 80004a2:	3714      	adds	r7, #20
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <HAL_GPIO_EXTI_Callback>:
// GPIO Expander Interrupt Handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	80fb      	strh	r3, [r7, #6]
	GPIO_Interrupt_Triggered = 1;
 80004b6:	4b04      	ldr	r3, [pc, #16]	@ (80004c8 <HAL_GPIO_EXTI_Callback+0x1c>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	701a      	strb	r2, [r3, #0]
}
 80004bc:	bf00      	nop
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	200001a4 	.word	0x200001a4

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fd16 	bl	8000f02 <HAL_Init>

  /* USER CODE BEGIN Init */
  TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0b00001111, 0b00001111);
 80004d6:	230f      	movs	r3, #15
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	230f      	movs	r3, #15
 80004dc:	2202      	movs	r2, #2
 80004de:	491b      	ldr	r1, [pc, #108]	@ (800054c <main+0x80>)
 80004e0:	481b      	ldr	r0, [pc, #108]	@ (8000550 <main+0x84>)
 80004e2:	f7ff fe85 	bl	80001f0 <TCAL9538RSVR_INIT>
  TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b11000000, 0b11000000);
 80004e6:	23c0      	movs	r3, #192	@ 0xc0
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	23c0      	movs	r3, #192	@ 0xc0
 80004ec:	2201      	movs	r2, #1
 80004ee:	4917      	ldr	r1, [pc, #92]	@ (800054c <main+0x80>)
 80004f0:	4818      	ldr	r0, [pc, #96]	@ (8000554 <main+0x88>)
 80004f2:	f7ff fe7d 	bl	80001f0 <TCAL9538RSVR_INIT>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f841 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 f9a3 	bl	8000844 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004fe:	f000 f883 	bl	8000608 <MX_ADC1_Init>
  MX_I2C4_Init();
 8000502:	f000 f95f 	bl	80007c4 <MX_I2C4_Init>
  MX_CAN1_Init();
 8000506:	f000 f8f5 	bl	80006f4 <MX_CAN1_Init>
  MX_CAN2_Init();
 800050a:	f000 f927 	bl	800075c <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800050e:	f004 fcdf 	bl	8004ed0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartDefaultTask, NULL, &HeartBeat_attributes);
 8000512:	4a11      	ldr	r2, [pc, #68]	@ (8000558 <main+0x8c>)
 8000514:	2100      	movs	r1, #0
 8000516:	4811      	ldr	r0, [pc, #68]	@ (800055c <main+0x90>)
 8000518:	f004 fd24 	bl	8004f64 <osThreadNew>
 800051c:	4603      	mov	r3, r0
 800051e:	4a10      	ldr	r2, [pc, #64]	@ (8000560 <main+0x94>)
 8000520:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);
 8000522:	4a10      	ldr	r2, [pc, #64]	@ (8000564 <main+0x98>)
 8000524:	2100      	movs	r1, #0
 8000526:	4810      	ldr	r0, [pc, #64]	@ (8000568 <main+0x9c>)
 8000528:	f004 fd1c 	bl	8004f64 <osThreadNew>
 800052c:	4603      	mov	r3, r0
 800052e:	4a0f      	ldr	r2, [pc, #60]	@ (800056c <main+0xa0>)
 8000530:	6013      	str	r3, [r2, #0]

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 8000532:	4a0f      	ldr	r2, [pc, #60]	@ (8000570 <main+0xa4>)
 8000534:	2100      	movs	r1, #0
 8000536:	480f      	ldr	r0, [pc, #60]	@ (8000574 <main+0xa8>)
 8000538:	f004 fd14 	bl	8004f64 <osThreadNew>
 800053c:	4603      	mov	r3, r0
 800053e:	4a0e      	ldr	r2, [pc, #56]	@ (8000578 <main+0xac>)
 8000540:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000542:	f004 fce9 	bl	8004f18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000546:	bf00      	nop
 8000548:	e7fd      	b.n	8000546 <main+0x7a>
 800054a:	bf00      	nop
 800054c:	20000134 	.word	0x20000134
 8000550:	20000194 	.word	0x20000194
 8000554:	2000019c 	.word	0x2000019c
 8000558:	08007c54 	.word	0x08007c54
 800055c:	0800090d 	.word	0x0800090d
 8000560:	20000188 	.word	0x20000188
 8000564:	08007c78 	.word	0x08007c78
 8000568:	0800092d 	.word	0x0800092d
 800056c:	2000018c 	.word	0x2000018c
 8000570:	08007c9c 	.word	0x08007c9c
 8000574:	0800093d 	.word	0x0800093d
 8000578:	20000190 	.word	0x20000190

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b096      	sub	sp, #88	@ 0x58
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2244      	movs	r2, #68	@ 0x44
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f007 fa4c 	bl	8007a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	463b      	mov	r3, r7
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800059e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005a2:	f002 fe11 	bl	80031c8 <HAL_PWREx_ControlVoltageScaling>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005ac:	f000 fa2c 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005b0:	2310      	movs	r3, #16
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005bc:	2360      	movs	r3, #96	@ 0x60
 80005be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 fe53 	bl	8003274 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005d4:	f000 fa18 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f003 fa59 	bl	8003aa8 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005fc:	f000 fa04 	bl	8000a08 <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3758      	adds	r7, #88	@ 0x58
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	@ 0x28
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
 8000628:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800062a:	4b2f      	ldr	r3, [pc, #188]	@ (80006e8 <MX_ADC1_Init+0xe0>)
 800062c:	4a2f      	ldr	r2, [pc, #188]	@ (80006ec <MX_ADC1_Init+0xe4>)
 800062e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000630:	4b2d      	ldr	r3, [pc, #180]	@ (80006e8 <MX_ADC1_Init+0xe0>)
 8000632:	2200      	movs	r2, #0
 8000634:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000636:	4b2c      	ldr	r3, [pc, #176]	@ (80006e8 <MX_ADC1_Init+0xe0>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063c:	4b2a      	ldr	r3, [pc, #168]	@ (80006e8 <MX_ADC1_Init+0xe0>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000642:	4b29      	ldr	r3, [pc, #164]	@ (80006e8 <MX_ADC1_Init+0xe0>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000648:	4b27      	ldr	r3, [pc, #156]	@ (80006e8 <MX_ADC1_Init+0xe0>)
 800064a:	2204      	movs	r2, #4
 800064c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800064e:	4b26      	ldr	r3, [pc, #152]	@ (80006e8 <MX_ADC1_Init+0xe0>)
 8000650:	2200      	movs	r2, #0
 8000652:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000654:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <MX_ADC1_Init+0xe0>)
 8000656:	2200      	movs	r2, #0
 8000658:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800065a:	4b23      	ldr	r3, [pc, #140]	@ (80006e8 <MX_ADC1_Init+0xe0>)
 800065c:	2201      	movs	r2, #1
 800065e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000660:	4b21      	ldr	r3, [pc, #132]	@ (80006e8 <MX_ADC1_Init+0xe0>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000668:	4b1f      	ldr	r3, [pc, #124]	@ (80006e8 <MX_ADC1_Init+0xe0>)
 800066a:	2200      	movs	r2, #0
 800066c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066e:	4b1e      	ldr	r3, [pc, #120]	@ (80006e8 <MX_ADC1_Init+0xe0>)
 8000670:	2200      	movs	r2, #0
 8000672:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000674:	4b1c      	ldr	r3, [pc, #112]	@ (80006e8 <MX_ADC1_Init+0xe0>)
 8000676:	2200      	movs	r2, #0
 8000678:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800067c:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <MX_ADC1_Init+0xe0>)
 800067e:	2200      	movs	r2, #0
 8000680:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000682:	4b19      	ldr	r3, [pc, #100]	@ (80006e8 <MX_ADC1_Init+0xe0>)
 8000684:	2200      	movs	r2, #0
 8000686:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068a:	4817      	ldr	r0, [pc, #92]	@ (80006e8 <MX_ADC1_Init+0xe0>)
 800068c:	f000 fe12 	bl	80012b4 <HAL_ADC_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000696:	f000 f9b7 	bl	8000a08 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	4619      	mov	r1, r3
 80006a4:	4810      	ldr	r0, [pc, #64]	@ (80006e8 <MX_ADC1_Init+0xe0>)
 80006a6:	f001 fb8b 	bl	8001dc0 <HAL_ADCEx_MultiModeConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006b0:	f000 f9aa 	bl	8000a08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <MX_ADC1_Init+0xe8>)
 80006b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b8:	2306      	movs	r3, #6
 80006ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006c0:	237f      	movs	r3, #127	@ 0x7f
 80006c2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006c4:	2304      	movs	r3, #4
 80006c6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <MX_ADC1_Init+0xe0>)
 80006d2:	f000 ff43 	bl	800155c <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006dc:	f000 f994 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	3728      	adds	r7, #40	@ 0x28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000007c 	.word	0x2000007c
 80006ec:	50040000 	.word	0x50040000
 80006f0:	04300002 	.word	0x04300002

080006f4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006f8:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <MX_CAN1_Init+0x60>)
 80006fa:	4a17      	ldr	r2, [pc, #92]	@ (8000758 <MX_CAN1_Init+0x64>)
 80006fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80006fe:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <MX_CAN1_Init+0x60>)
 8000700:	2210      	movs	r2, #16
 8000702:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000704:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <MX_CAN1_Init+0x60>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800070a:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <MX_CAN1_Init+0x60>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000710:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <MX_CAN1_Init+0x60>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000716:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_CAN1_Init+0x60>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800071c:	4b0d      	ldr	r3, [pc, #52]	@ (8000754 <MX_CAN1_Init+0x60>)
 800071e:	2200      	movs	r2, #0
 8000720:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000722:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_CAN1_Init+0x60>)
 8000724:	2200      	movs	r2, #0
 8000726:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000728:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <MX_CAN1_Init+0x60>)
 800072a:	2200      	movs	r2, #0
 800072c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_CAN1_Init+0x60>)
 8000730:	2200      	movs	r2, #0
 8000732:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <MX_CAN1_Init+0x60>)
 8000736:	2200      	movs	r2, #0
 8000738:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_CAN1_Init+0x60>)
 800073c:	2200      	movs	r2, #0
 800073e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	@ (8000754 <MX_CAN1_Init+0x60>)
 8000742:	f001 fbed 	bl	8001f20 <HAL_CAN_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800074c:	f000 f95c 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200000e4 	.word	0x200000e4
 8000758:	40006400 	.word	0x40006400

0800075c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000760:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <MX_CAN2_Init+0x60>)
 8000762:	4a17      	ldr	r2, [pc, #92]	@ (80007c0 <MX_CAN2_Init+0x64>)
 8000764:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000766:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <MX_CAN2_Init+0x60>)
 8000768:	2210      	movs	r2, #16
 800076a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800076c:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <MX_CAN2_Init+0x60>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000772:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <MX_CAN2_Init+0x60>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000778:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_CAN2_Init+0x60>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_CAN2_Init+0x60>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000784:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <MX_CAN2_Init+0x60>)
 8000786:	2200      	movs	r2, #0
 8000788:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800078a:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_CAN2_Init+0x60>)
 800078c:	2200      	movs	r2, #0
 800078e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <MX_CAN2_Init+0x60>)
 8000792:	2200      	movs	r2, #0
 8000794:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_CAN2_Init+0x60>)
 8000798:	2200      	movs	r2, #0
 800079a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <MX_CAN2_Init+0x60>)
 800079e:	2200      	movs	r2, #0
 80007a0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_CAN2_Init+0x60>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	@ (80007bc <MX_CAN2_Init+0x60>)
 80007aa:	f001 fbb9 	bl	8001f20 <HAL_CAN_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80007b4:	f000 f928 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	2000010c 	.word	0x2000010c
 80007c0:	40006800 	.word	0x40006800

080007c4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <MX_I2C4_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	@ (800083c <MX_I2C4_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <MX_I2C4_Init+0x74>)
 80007d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000840 <MX_I2C4_Init+0x7c>)
 80007d2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80007d4:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <MX_I2C4_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007da:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <MX_I2C4_Init+0x74>)
 80007dc:	2201      	movs	r2, #1
 80007de:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <MX_I2C4_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80007e6:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <MX_I2C4_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ec:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <MX_I2C4_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <MX_I2C4_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_I2C4_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80007fe:	480e      	ldr	r0, [pc, #56]	@ (8000838 <MX_I2C4_Init+0x74>)
 8000800:	f002 f818 	bl	8002834 <HAL_I2C_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800080a:	f000 f8fd 	bl	8000a08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080e:	2100      	movs	r1, #0
 8000810:	4809      	ldr	r0, [pc, #36]	@ (8000838 <MX_I2C4_Init+0x74>)
 8000812:	f002 fc33 	bl	800307c <HAL_I2CEx_ConfigAnalogFilter>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800081c:	f000 f8f4 	bl	8000a08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000820:	2100      	movs	r1, #0
 8000822:	4805      	ldr	r0, [pc, #20]	@ (8000838 <MX_I2C4_Init+0x74>)
 8000824:	f002 fc75 	bl	8003112 <HAL_I2CEx_ConfigDigitalFilter>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 f8eb 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000134 	.word	0x20000134
 800083c:	40008400 	.word	0x40008400
 8000840:	00100d14 	.word	0x00100d14

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4b2a      	ldr	r3, [pc, #168]	@ (8000904 <MX_GPIO_Init+0xc0>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	4a29      	ldr	r2, [pc, #164]	@ (8000904 <MX_GPIO_Init+0xc0>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000866:	4b27      	ldr	r3, [pc, #156]	@ (8000904 <MX_GPIO_Init+0xc0>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b24      	ldr	r3, [pc, #144]	@ (8000904 <MX_GPIO_Init+0xc0>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	4a23      	ldr	r2, [pc, #140]	@ (8000904 <MX_GPIO_Init+0xc0>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087e:	4b21      	ldr	r3, [pc, #132]	@ (8000904 <MX_GPIO_Init+0xc0>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b1e      	ldr	r3, [pc, #120]	@ (8000904 <MX_GPIO_Init+0xc0>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	4a1d      	ldr	r2, [pc, #116]	@ (8000904 <MX_GPIO_Init+0xc0>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000896:	4b1b      	ldr	r3, [pc, #108]	@ (8000904 <MX_GPIO_Init+0xc0>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OK_LED_GPIO_Port, OK_LED_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ac:	f001 ff78 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008b0:	2304      	movs	r3, #4
 80008b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	4619      	mov	r1, r3
 80008c4:	4810      	ldr	r0, [pc, #64]	@ (8000908 <MX_GPIO_Init+0xc4>)
 80008c6:	f001 fdd9 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : OK_LED_Pin */
  GPIO_InitStruct.Pin = OK_LED_Pin;
 80008ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OK_LED_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	4619      	mov	r1, r3
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e6:	f001 fdc9 	bl	800247c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2105      	movs	r1, #5
 80008ee:	2008      	movs	r0, #8
 80008f0:	f001 fd9a 	bl	8002428 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80008f4:	2008      	movs	r0, #8
 80008f6:	f001 fdb3 	bl	8002460 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008fa:	bf00      	nop
 80008fc:	3720      	adds	r7, #32
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000
 8000908:	48000800 	.word	0x48000800

0800090c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000914:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091c:	f001 ff58 	bl	80027d0 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000920:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000924:	f004 fbb0 	bl	8005088 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000928:	bf00      	nop
 800092a:	e7f3      	b.n	8000914 <StartDefaultTask+0x8>

0800092c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	//Code for reading ADC values


	//code sending data over CAN

    osDelay(1);
 8000934:	2001      	movs	r0, #1
 8000936:	f004 fba7 	bl	8005088 <osDelay>
 800093a:	e7fb      	b.n	8000934 <StartTask02+0x8>

0800093c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	@ 0x30
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox;

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x3FF; // 11 bit Identifier !!Change!!
 8000950:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8000954:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.DLC = 8; // 8 bytes being transmitted
 800095a:	2308      	movs	r3, #8
 800095c:	62bb      	str	r3, [r7, #40]	@ 0x28

	Update_GPIO_Flags(TxData, &U5.portValues, &U16.portValues);
 800095e:	f107 0310 	add.w	r3, r7, #16
 8000962:	4a1a      	ldr	r2, [pc, #104]	@ (80009cc <StartTask03+0x90>)
 8000964:	491a      	ldr	r1, [pc, #104]	@ (80009d0 <StartTask03+0x94>)
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fd30 	bl	80003cc <Update_GPIO_Flags>

	/* Infinite loop */
	for(;;)
	{
	  // Read TCAL Input and update flags
	  if (GPIO_Interrupt_Triggered != 0)
 800096c:	4b19      	ldr	r3, [pc, #100]	@ (80009d4 <StartTask03+0x98>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d019      	beq.n	80009a8 <StartTask03+0x6c>
	  {
		  if (TCAL9538RSVR_HandleInterrupt(&U5) != HAL_OK)
 8000974:	4818      	ldr	r0, [pc, #96]	@ (80009d8 <StartTask03+0x9c>)
 8000976:	f7ff fca5 	bl	80002c4 <TCAL9538RSVR_HandleInterrupt>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <StartTask03+0x48>
		  {
			  Error_Handler();
 8000980:	f000 f842 	bl	8000a08 <Error_Handler>
		  }
		  if(TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK)
 8000984:	4815      	ldr	r0, [pc, #84]	@ (80009dc <StartTask03+0xa0>)
 8000986:	f7ff fc9d 	bl	80002c4 <TCAL9538RSVR_HandleInterrupt>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <StartTask03+0x58>
		  {
			  Error_Handler();
 8000990:	f000 f83a 	bl	8000a08 <Error_Handler>
		  }
		  Update_GPIO_Flags(TxData, &U5.portValues, &U16.portValues);
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4a0c      	ldr	r2, [pc, #48]	@ (80009cc <StartTask03+0x90>)
 800099a:	490d      	ldr	r1, [pc, #52]	@ (80009d0 <StartTask03+0x94>)
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fd15 	bl	80003cc <Update_GPIO_Flags>
		  GPIO_Interrupt_Triggered = 0;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <StartTask03+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
	  }

	  // Send CAN messages
	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	f107 0210 	add.w	r2, r7, #16
 80009b0:	f107 0118 	add.w	r1, r7, #24
 80009b4:	480a      	ldr	r0, [pc, #40]	@ (80009e0 <StartTask03+0xa4>)
 80009b6:	f001 fbae 	bl	8002116 <HAL_CAN_AddTxMessage>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <StartTask03+0x88>
	  {
		  Error_Handler();
 80009c0:	f000 f822 	bl	8000a08 <Error_Handler>
	  }
	  osDelay(1);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f004 fb5f 	bl	8005088 <osDelay>
	  if (GPIO_Interrupt_Triggered != 0)
 80009ca:	e7cf      	b.n	800096c <StartTask03+0x30>
 80009cc:	200001a1 	.word	0x200001a1
 80009d0:	20000199 	.word	0x20000199
 80009d4:	200001a4 	.word	0x200001a4
 80009d8:	20000194 	.word	0x20000194
 80009dc:	2000019c 	.word	0x2000019c
 80009e0:	200000e4 	.word	0x200000e4

080009e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a04      	ldr	r2, [pc, #16]	@ (8000a04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d101      	bne.n	80009fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009f6:	f000 fa9d 	bl	8000f34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40000400 	.word	0x40000400

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <Error_Handler+0x8>

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a1e:	4a10      	ldr	r2, [pc, #64]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a26:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a36:	4a0a      	ldr	r2, [pc, #40]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a3e:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	210f      	movs	r1, #15
 8000a4e:	f06f 0001 	mvn.w	r0, #1
 8000a52:	f001 fce9 	bl	8002428 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000

08000a64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b0ac      	sub	sp, #176	@ 0xb0
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	228c      	movs	r2, #140	@ 0x8c
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f006 ffcf 	bl	8007a28 <memset>
  if(hadc->Instance==ADC1)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a27      	ldr	r2, [pc, #156]	@ (8000b2c <HAL_ADC_MspInit+0xc8>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d146      	bne.n	8000b22 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a94:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a98:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a9a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000aaa:	2310      	movs	r3, #16
 8000aac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000aba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f003 fa2f 	bl	8003f28 <HAL_RCCEx_PeriphCLKConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000ad0:	f7ff ff9a 	bl	8000a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ad4:	4b16      	ldr	r3, [pc, #88]	@ (8000b30 <HAL_ADC_MspInit+0xcc>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad8:	4a15      	ldr	r2, [pc, #84]	@ (8000b30 <HAL_ADC_MspInit+0xcc>)
 8000ada:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ade:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae0:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <HAL_ADC_MspInit+0xcc>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aec:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <HAL_ADC_MspInit+0xcc>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b30 <HAL_ADC_MspInit+0xcc>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b30 <HAL_ADC_MspInit+0xcc>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b04:	2301      	movs	r3, #1
 8000b06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <HAL_ADC_MspInit+0xd0>)
 8000b1e:	f001 fcad 	bl	800247c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b22:	bf00      	nop
 8000b24:	37b0      	adds	r7, #176	@ 0xb0
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	50040000 	.word	0x50040000
 8000b30:	40021000 	.word	0x40021000
 8000b34:	48000800 	.word	0x48000800

08000b38 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	@ 0x30
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a45      	ldr	r2, [pc, #276]	@ (8000c6c <HAL_CAN_MspInit+0x134>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d132      	bne.n	8000bc0 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b5a:	4b45      	ldr	r3, [pc, #276]	@ (8000c70 <HAL_CAN_MspInit+0x138>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	4a43      	ldr	r2, [pc, #268]	@ (8000c70 <HAL_CAN_MspInit+0x138>)
 8000b62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b64:	4b42      	ldr	r3, [pc, #264]	@ (8000c70 <HAL_CAN_MspInit+0x138>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d10b      	bne.n	8000b84 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b6c:	4b41      	ldr	r3, [pc, #260]	@ (8000c74 <HAL_CAN_MspInit+0x13c>)
 8000b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b70:	4a40      	ldr	r2, [pc, #256]	@ (8000c74 <HAL_CAN_MspInit+0x13c>)
 8000b72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b76:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b78:	4b3e      	ldr	r3, [pc, #248]	@ (8000c74 <HAL_CAN_MspInit+0x13c>)
 8000b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b80:	61bb      	str	r3, [r7, #24]
 8000b82:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b84:	4b3b      	ldr	r3, [pc, #236]	@ (8000c74 <HAL_CAN_MspInit+0x13c>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b88:	4a3a      	ldr	r2, [pc, #232]	@ (8000c74 <HAL_CAN_MspInit+0x13c>)
 8000b8a:	f043 0302 	orr.w	r3, r3, #2
 8000b8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b90:	4b38      	ldr	r3, [pc, #224]	@ (8000c74 <HAL_CAN_MspInit+0x13c>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b9c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bae:	2309      	movs	r3, #9
 8000bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	482f      	ldr	r0, [pc, #188]	@ (8000c78 <HAL_CAN_MspInit+0x140>)
 8000bba:	f001 fc5f 	bl	800247c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000bbe:	e051      	b.n	8000c64 <HAL_CAN_MspInit+0x12c>
  else if(hcan->Instance==CAN2)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8000c7c <HAL_CAN_MspInit+0x144>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d14c      	bne.n	8000c64 <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000bca:	4b2a      	ldr	r3, [pc, #168]	@ (8000c74 <HAL_CAN_MspInit+0x13c>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bce:	4a29      	ldr	r2, [pc, #164]	@ (8000c74 <HAL_CAN_MspInit+0x13c>)
 8000bd0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000bd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bd6:	4b27      	ldr	r3, [pc, #156]	@ (8000c74 <HAL_CAN_MspInit+0x13c>)
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bda:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000be2:	4b23      	ldr	r3, [pc, #140]	@ (8000c70 <HAL_CAN_MspInit+0x138>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	3301      	adds	r3, #1
 8000be8:	4a21      	ldr	r2, [pc, #132]	@ (8000c70 <HAL_CAN_MspInit+0x138>)
 8000bea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000bec:	4b20      	ldr	r3, [pc, #128]	@ (8000c70 <HAL_CAN_MspInit+0x138>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d10b      	bne.n	8000c0c <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c74 <HAL_CAN_MspInit+0x13c>)
 8000bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf8:	4a1e      	ldr	r2, [pc, #120]	@ (8000c74 <HAL_CAN_MspInit+0x13c>)
 8000bfa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c00:	4b1c      	ldr	r3, [pc, #112]	@ (8000c74 <HAL_CAN_MspInit+0x13c>)
 8000c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0c:	4b19      	ldr	r3, [pc, #100]	@ (8000c74 <HAL_CAN_MspInit+0x13c>)
 8000c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c10:	4a18      	ldr	r2, [pc, #96]	@ (8000c74 <HAL_CAN_MspInit+0x13c>)
 8000c12:	f043 0302 	orr.w	r3, r3, #2
 8000c16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c18:	4b16      	ldr	r3, [pc, #88]	@ (8000c74 <HAL_CAN_MspInit+0x13c>)
 8000c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c24:	2320      	movs	r3, #32
 8000c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8000c34:	2303      	movs	r3, #3
 8000c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480e      	ldr	r0, [pc, #56]	@ (8000c78 <HAL_CAN_MspInit+0x140>)
 8000c40:	f001 fc1c 	bl	800247c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c44:	2340      	movs	r3, #64	@ 0x40
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8000c54:	2308      	movs	r3, #8
 8000c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4806      	ldr	r0, [pc, #24]	@ (8000c78 <HAL_CAN_MspInit+0x140>)
 8000c60:	f001 fc0c 	bl	800247c <HAL_GPIO_Init>
}
 8000c64:	bf00      	nop
 8000c66:	3730      	adds	r7, #48	@ 0x30
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40006400 	.word	0x40006400
 8000c70:	200001a8 	.word	0x200001a8
 8000c74:	40021000 	.word	0x40021000
 8000c78:	48000400 	.word	0x48000400
 8000c7c:	40006800 	.word	0x40006800

08000c80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0ac      	sub	sp, #176	@ 0xb0
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	228c      	movs	r2, #140	@ 0x8c
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f006 fec1 	bl	8007a28 <memset>
  if(hi2c->Instance==I2C4)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a22      	ldr	r2, [pc, #136]	@ (8000d34 <HAL_I2C_MspInit+0xb4>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d13c      	bne.n	8000d2a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000cb0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000cb4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cba:	f107 0310 	add.w	r3, r7, #16
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f003 f932 	bl	8003f28 <HAL_RCCEx_PeriphCLKConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000cca:	f7ff fe9d 	bl	8000a08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <HAL_I2C_MspInit+0xb8>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd2:	4a19      	ldr	r2, [pc, #100]	@ (8000d38 <HAL_I2C_MspInit+0xb8>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cda:	4b17      	ldr	r3, [pc, #92]	@ (8000d38 <HAL_I2C_MspInit+0xb8>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ce6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000cea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cee:	2312      	movs	r3, #18
 8000cf0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8000d00:	2303      	movs	r3, #3
 8000d02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480b      	ldr	r0, [pc, #44]	@ (8000d3c <HAL_I2C_MspInit+0xbc>)
 8000d0e:	f001 fbb5 	bl	800247c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <HAL_I2C_MspInit+0xb8>)
 8000d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d16:	4a08      	ldr	r2, [pc, #32]	@ (8000d38 <HAL_I2C_MspInit+0xb8>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_I2C_MspInit+0xb8>)
 8000d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8000d2a:	bf00      	nop
 8000d2c:	37b0      	adds	r7, #176	@ 0xb0
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40008400 	.word	0x40008400
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	48000400 	.word	0x48000400

08000d40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08e      	sub	sp, #56	@ 0x38
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000d4e:	4b34      	ldr	r3, [pc, #208]	@ (8000e20 <HAL_InitTick+0xe0>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d52:	4a33      	ldr	r2, [pc, #204]	@ (8000e20 <HAL_InitTick+0xe0>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d5a:	4b31      	ldr	r3, [pc, #196]	@ (8000e20 <HAL_InitTick+0xe0>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d66:	f107 0210 	add.w	r2, r7, #16
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f003 f847 	bl	8003e04 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d76:	6a3b      	ldr	r3, [r7, #32]
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d103      	bne.n	8000d88 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d80:	f003 f82a 	bl	8003dd8 <HAL_RCC_GetPCLK1Freq>
 8000d84:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d86:	e004      	b.n	8000d92 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d88:	f003 f826 	bl	8003dd8 <HAL_RCC_GetPCLK1Freq>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d94:	4a23      	ldr	r2, [pc, #140]	@ (8000e24 <HAL_InitTick+0xe4>)
 8000d96:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9a:	0c9b      	lsrs	r3, r3, #18
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000da0:	4b21      	ldr	r3, [pc, #132]	@ (8000e28 <HAL_InitTick+0xe8>)
 8000da2:	4a22      	ldr	r2, [pc, #136]	@ (8000e2c <HAL_InitTick+0xec>)
 8000da4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000da6:	4b20      	ldr	r3, [pc, #128]	@ (8000e28 <HAL_InitTick+0xe8>)
 8000da8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dac:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000dae:	4a1e      	ldr	r2, [pc, #120]	@ (8000e28 <HAL_InitTick+0xe8>)
 8000db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000db2:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000db4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e28 <HAL_InitTick+0xe8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dba:	4b1b      	ldr	r3, [pc, #108]	@ (8000e28 <HAL_InitTick+0xe8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc0:	4b19      	ldr	r3, [pc, #100]	@ (8000e28 <HAL_InitTick+0xe8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000dc6:	4818      	ldr	r0, [pc, #96]	@ (8000e28 <HAL_InitTick+0xe8>)
 8000dc8:	f003 fd78 	bl	80048bc <HAL_TIM_Base_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000dd2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d11b      	bne.n	8000e12 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000dda:	4813      	ldr	r0, [pc, #76]	@ (8000e28 <HAL_InitTick+0xe8>)
 8000ddc:	f003 fdd0 	bl	8004980 <HAL_TIM_Base_Start_IT>
 8000de0:	4603      	mov	r3, r0
 8000de2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000de6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d111      	bne.n	8000e12 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000dee:	201d      	movs	r0, #29
 8000df0:	f001 fb36 	bl	8002460 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b0f      	cmp	r3, #15
 8000df8:	d808      	bhi.n	8000e0c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	6879      	ldr	r1, [r7, #4]
 8000dfe:	201d      	movs	r0, #29
 8000e00:	f001 fb12 	bl	8002428 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e04:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <HAL_InitTick+0xf0>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	e002      	b.n	8000e12 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e12:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3738      	adds	r7, #56	@ 0x38
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000
 8000e24:	431bde83 	.word	0x431bde83
 8000e28:	200001ac 	.word	0x200001ac
 8000e2c:	40000400 	.word	0x40000400
 8000e30:	20000004 	.word	0x20000004

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <NMI_Handler+0x4>

08000e3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <HardFault_Handler+0x4>

08000e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <MemManage_Handler+0x4>

08000e4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <BusFault_Handler+0x4>

08000e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <UsageFault_Handler+0x4>

08000e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000e6e:	2004      	movs	r0, #4
 8000e70:	f001 fcc8 	bl	8002804 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e7c:	4802      	ldr	r0, [pc, #8]	@ (8000e88 <TIM3_IRQHandler+0x10>)
 8000e7e:	f003 fdef 	bl	8004a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200001ac 	.word	0x200001ac

08000e8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <SystemInit+0x20>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e96:	4a05      	ldr	r2, [pc, #20]	@ (8000eac <SystemInit+0x20>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000eb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ee8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eb4:	f7ff ffea 	bl	8000e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb8:	480c      	ldr	r0, [pc, #48]	@ (8000eec <LoopForever+0x6>)
  ldr r1, =_edata
 8000eba:	490d      	ldr	r1, [pc, #52]	@ (8000ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef4 <LoopForever+0xe>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ed0:	4c0a      	ldr	r4, [pc, #40]	@ (8000efc <LoopForever+0x16>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ede:	f006 fe01 	bl	8007ae4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ee2:	f7ff faf3 	bl	80004cc <main>

08000ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ee6:	e7fe      	b.n	8000ee6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ee8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ef4:	08007d10 	.word	0x08007d10
  ldr r2, =_sbss
 8000ef8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000efc:	20001cdc 	.word	0x20001cdc

08000f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC1_2_IRQHandler>

08000f02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f001 fa80 	bl	8002412 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f12:	200f      	movs	r0, #15
 8000f14:	f7ff ff14 	bl	8000d40 <HAL_InitTick>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d002      	beq.n	8000f24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	71fb      	strb	r3, [r7, #7]
 8000f22:	e001      	b.n	8000f28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f24:	f7ff fd76 	bl	8000a14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f28:	79fb      	ldrb	r3, [r7, #7]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	@ (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008
 8000f58:	200001f8 	.word	0x200001f8

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	@ (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200001f8 	.word	0x200001f8

08000f74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3360      	adds	r3, #96	@ 0x60
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <LL_ADC_SetOffset+0x44>)
 8000ffe:	4013      	ands	r3, r2
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	430a      	orrs	r2, r1
 800100a:	4313      	orrs	r3, r2
 800100c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001014:	bf00      	nop
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	03fff000 	.word	0x03fff000

08001024 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3360      	adds	r3, #96	@ 0x60
 8001032:	461a      	mov	r2, r3
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001050:	b480      	push	{r7}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3360      	adds	r3, #96	@ 0x60
 8001060:	461a      	mov	r2, r3
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	431a      	orrs	r2, r3
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800107a:	bf00      	nop
 800107c:	371c      	adds	r7, #28
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	431a      	orrs	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	615a      	str	r2, [r3, #20]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3330      	adds	r3, #48	@ 0x30
 80010bc:	461a      	mov	r2, r3
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	f003 030c 	and.w	r3, r3, #12
 80010c8:	4413      	add	r3, r2
 80010ca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	f003 031f 	and.w	r3, r3, #31
 80010d6:	211f      	movs	r1, #31
 80010d8:	fa01 f303 	lsl.w	r3, r1, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	401a      	ands	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	0e9b      	lsrs	r3, r3, #26
 80010e4:	f003 011f 	and.w	r1, r3, #31
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	f003 031f 	and.w	r3, r3, #31
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	431a      	orrs	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010f8:	bf00      	nop
 80010fa:	371c      	adds	r7, #28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3314      	adds	r3, #20
 8001114:	461a      	mov	r2, r3
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	0e5b      	lsrs	r3, r3, #25
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	4413      	add	r3, r2
 8001122:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	0d1b      	lsrs	r3, r3, #20
 800112c:	f003 031f 	and.w	r3, r3, #31
 8001130:	2107      	movs	r1, #7
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	401a      	ands	r2, r3
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	0d1b      	lsrs	r3, r3, #20
 800113e:	f003 031f 	and.w	r3, r3, #31
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	fa01 f303 	lsl.w	r3, r1, r3
 8001148:	431a      	orrs	r2, r3
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800114e:	bf00      	nop
 8001150:	371c      	adds	r7, #28
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001174:	43db      	mvns	r3, r3
 8001176:	401a      	ands	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0318 	and.w	r3, r3, #24
 800117e:	4908      	ldr	r1, [pc, #32]	@ (80011a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001180:	40d9      	lsrs	r1, r3
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	400b      	ands	r3, r1
 8001186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800118a:	431a      	orrs	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	0007ffff 	.word	0x0007ffff

080011a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80011b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6093      	str	r3, [r2, #8]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80011d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011dc:	d101      	bne.n	80011e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001200:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001204:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001228:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800122c:	d101      	bne.n	8001232 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <LL_ADC_IsEnabled+0x18>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <LL_ADC_IsEnabled+0x1a>
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	2b04      	cmp	r3, #4
 8001278:	d101      	bne.n	800127e <LL_ADC_REG_IsConversionOngoing+0x18>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	2b08      	cmp	r3, #8
 800129e:	d101      	bne.n	80012a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b089      	sub	sp, #36	@ 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e133      	b.n	8001536 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d109      	bne.n	80012f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fbc1 	bl	8000a64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff67 	bl	80011c8 <LL_ADC_IsDeepPowerDownEnabled>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d004      	beq.n	800130a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff4d 	bl	80011a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff82 	bl	8001218 <LL_ADC_IsInternalRegulatorEnabled>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d115      	bne.n	8001346 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff66 	bl	80011f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001324:	4b86      	ldr	r3, [pc, #536]	@ (8001540 <HAL_ADC_Init+0x28c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	099b      	lsrs	r3, r3, #6
 800132a:	4a86      	ldr	r2, [pc, #536]	@ (8001544 <HAL_ADC_Init+0x290>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	099b      	lsrs	r3, r3, #6
 8001332:	3301      	adds	r3, #1
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001338:	e002      	b.n	8001340 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	3b01      	subs	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f9      	bne.n	800133a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff64 	bl	8001218 <LL_ADC_IsInternalRegulatorEnabled>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10d      	bne.n	8001372 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135a:	f043 0210 	orr.w	r2, r3, #16
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001366:	f043 0201 	orr.w	r2, r3, #1
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff75 	bl	8001266 <LL_ADC_REG_IsConversionOngoing>
 800137c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	2b00      	cmp	r3, #0
 8001388:	f040 80cc 	bne.w	8001524 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	2b00      	cmp	r3, #0
 8001390:	f040 80c8 	bne.w	8001524 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001398:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800139c:	f043 0202 	orr.w	r2, r3, #2
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff49 	bl	8001240 <LL_ADC_IsEnabled>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d115      	bne.n	80013e0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013b4:	4864      	ldr	r0, [pc, #400]	@ (8001548 <HAL_ADC_Init+0x294>)
 80013b6:	f7ff ff43 	bl	8001240 <LL_ADC_IsEnabled>
 80013ba:	4604      	mov	r4, r0
 80013bc:	4863      	ldr	r0, [pc, #396]	@ (800154c <HAL_ADC_Init+0x298>)
 80013be:	f7ff ff3f 	bl	8001240 <LL_ADC_IsEnabled>
 80013c2:	4603      	mov	r3, r0
 80013c4:	431c      	orrs	r4, r3
 80013c6:	4862      	ldr	r0, [pc, #392]	@ (8001550 <HAL_ADC_Init+0x29c>)
 80013c8:	f7ff ff3a 	bl	8001240 <LL_ADC_IsEnabled>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4323      	orrs	r3, r4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d105      	bne.n	80013e0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	4619      	mov	r1, r3
 80013da:	485e      	ldr	r0, [pc, #376]	@ (8001554 <HAL_ADC_Init+0x2a0>)
 80013dc:	f7ff fdca 	bl	8000f74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7e5b      	ldrb	r3, [r3, #25]
 80013e4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013ea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80013f0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80013f6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013fe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3020 	ldrb.w	r3, [r3, #32]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d106      	bne.n	800141c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001412:	3b01      	subs	r3, #1
 8001414:	045b      	lsls	r3, r3, #17
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001420:	2b00      	cmp	r3, #0
 8001422:	d009      	beq.n	8001438 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001428:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001430:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	4b46      	ldr	r3, [pc, #280]	@ (8001558 <HAL_ADC_Init+0x2a4>)
 8001440:	4013      	ands	r3, r2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	69b9      	ldr	r1, [r7, #24]
 8001448:	430b      	orrs	r3, r1
 800144a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff1b 	bl	800128c <LL_ADC_INJ_IsConversionOngoing>
 8001456:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d140      	bne.n	80014e0 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d13d      	bne.n	80014e0 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	7e1b      	ldrb	r3, [r3, #24]
 800146c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800146e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001476:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001486:	f023 0306 	bic.w	r3, r3, #6
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	69b9      	ldr	r1, [r7, #24]
 8001490:	430b      	orrs	r3, r1
 8001492:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800149a:	2b01      	cmp	r3, #1
 800149c:	d118      	bne.n	80014d0 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80014a8:	f023 0304 	bic.w	r3, r3, #4
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80014b4:	4311      	orrs	r1, r2
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80014ba:	4311      	orrs	r1, r2
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80014c0:	430a      	orrs	r2, r1
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f042 0201 	orr.w	r2, r2, #1
 80014cc:	611a      	str	r2, [r3, #16]
 80014ce:	e007      	b.n	80014e0 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	691a      	ldr	r2, [r3, #16]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0201 	bic.w	r2, r2, #1
 80014de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d10c      	bne.n	8001502 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	f023 010f 	bic.w	r1, r3, #15
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	1e5a      	subs	r2, r3, #1
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001500:	e007      	b.n	8001512 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 020f 	bic.w	r2, r2, #15
 8001510:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001516:	f023 0303 	bic.w	r3, r3, #3
 800151a:	f043 0201 	orr.w	r2, r3, #1
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	659a      	str	r2, [r3, #88]	@ 0x58
 8001522:	e007      	b.n	8001534 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001528:	f043 0210 	orr.w	r2, r3, #16
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001534:	7ffb      	ldrb	r3, [r7, #31]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3724      	adds	r7, #36	@ 0x24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd90      	pop	{r4, r7, pc}
 800153e:	bf00      	nop
 8001540:	20000000 	.word	0x20000000
 8001544:	053e2d63 	.word	0x053e2d63
 8001548:	50040000 	.word	0x50040000
 800154c:	50040100 	.word	0x50040100
 8001550:	50040200 	.word	0x50040200
 8001554:	50040300 	.word	0x50040300
 8001558:	fff0c007 	.word	0xfff0c007

0800155c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b0b6      	sub	sp, #216	@ 0xd8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001576:	2b01      	cmp	r3, #1
 8001578:	d101      	bne.n	800157e <HAL_ADC_ConfigChannel+0x22>
 800157a:	2302      	movs	r3, #2
 800157c:	e3e3      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x7ea>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fe6b 	bl	8001266 <LL_ADC_REG_IsConversionOngoing>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	f040 83c4 	bne.w	8001d20 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d824      	bhi.n	80015f2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	3b02      	subs	r3, #2
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d81b      	bhi.n	80015ea <HAL_ADC_ConfigChannel+0x8e>
 80015b2:	a201      	add	r2, pc, #4	@ (adr r2, 80015b8 <HAL_ADC_ConfigChannel+0x5c>)
 80015b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b8:	080015c9 	.word	0x080015c9
 80015bc:	080015d1 	.word	0x080015d1
 80015c0:	080015d9 	.word	0x080015d9
 80015c4:	080015e1 	.word	0x080015e1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80015c8:	230c      	movs	r3, #12
 80015ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80015ce:	e010      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80015d0:	2312      	movs	r3, #18
 80015d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80015d6:	e00c      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80015d8:	2318      	movs	r3, #24
 80015da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80015de:	e008      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80015e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80015e8:	e003      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80015ea:	2306      	movs	r3, #6
 80015ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80015f0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6818      	ldr	r0, [r3, #0]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001600:	f7ff fd54 	bl	80010ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fe2c 	bl	8001266 <LL_ADC_REG_IsConversionOngoing>
 800160e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fe38 	bl	800128c <LL_ADC_INJ_IsConversionOngoing>
 800161c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001620:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001624:	2b00      	cmp	r3, #0
 8001626:	f040 81bf 	bne.w	80019a8 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800162a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800162e:	2b00      	cmp	r3, #0
 8001630:	f040 81ba 	bne.w	80019a8 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800163c:	d10f      	bne.n	800165e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6818      	ldr	r0, [r3, #0]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2200      	movs	r2, #0
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff fd5b 	bl	8001104 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fd15 	bl	8001086 <LL_ADC_SetSamplingTimeCommonConfig>
 800165c:	e00e      	b.n	800167c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	6819      	ldr	r1, [r3, #0]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	461a      	mov	r2, r3
 800166c:	f7ff fd4a 	bl	8001104 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fd05 	bl	8001086 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	695a      	ldr	r2, [r3, #20]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	08db      	lsrs	r3, r3, #3
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	2b04      	cmp	r3, #4
 800169c:	d00a      	beq.n	80016b4 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	6919      	ldr	r1, [r3, #16]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80016ae:	f7ff fc95 	bl	8000fdc <LL_ADC_SetOffset>
 80016b2:	e179      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fcb2 	bl	8001024 <LL_ADC_GetOffsetChannel>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10a      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x184>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fca7 	bl	8001024 <LL_ADC_GetOffsetChannel>
 80016d6:	4603      	mov	r3, r0
 80016d8:	0e9b      	lsrs	r3, r3, #26
 80016da:	f003 021f 	and.w	r2, r3, #31
 80016de:	e01e      	b.n	800171e <HAL_ADC_ConfigChannel+0x1c2>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fc9c 	bl	8001024 <LL_ADC_GetOffsetChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80016f6:	fa93 f3a3 	rbit	r3, r3
 80016fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001702:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001706:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800170e:	2320      	movs	r3, #32
 8001710:	e004      	b.n	800171c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001712:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001716:	fab3 f383 	clz	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001726:	2b00      	cmp	r3, #0
 8001728:	d105      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x1da>
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	0e9b      	lsrs	r3, r3, #26
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	e018      	b.n	8001768 <HAL_ADC_ConfigChannel+0x20c>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001742:	fa93 f3a3 	rbit	r3, r3
 8001746:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800174a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800174e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001752:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800175a:	2320      	movs	r3, #32
 800175c:	e004      	b.n	8001768 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800175e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001762:	fab3 f383 	clz	r3, r3
 8001766:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001768:	429a      	cmp	r2, r3
 800176a:	d106      	bne.n	800177a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2200      	movs	r2, #0
 8001772:	2100      	movs	r1, #0
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fc6b 	bl	8001050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2101      	movs	r1, #1
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fc4f 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10a      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x24a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2101      	movs	r1, #1
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fc44 	bl	8001024 <LL_ADC_GetOffsetChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	0e9b      	lsrs	r3, r3, #26
 80017a0:	f003 021f 	and.w	r2, r3, #31
 80017a4:	e01e      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x288>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2101      	movs	r1, #1
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fc39 	bl	8001024 <LL_ADC_GetOffsetChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80017bc:	fa93 f3a3 	rbit	r3, r3
 80017c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80017c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80017c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80017cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80017d4:	2320      	movs	r3, #32
 80017d6:	e004      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80017d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d105      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x2a0>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	0e9b      	lsrs	r3, r3, #26
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	e018      	b.n	800182e <HAL_ADC_ConfigChannel+0x2d2>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001808:	fa93 f3a3 	rbit	r3, r3
 800180c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001810:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001814:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001818:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001820:	2320      	movs	r3, #32
 8001822:	e004      	b.n	800182e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001824:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001828:	fab3 f383 	clz	r3, r3
 800182c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800182e:	429a      	cmp	r2, r3
 8001830:	d106      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2200      	movs	r2, #0
 8001838:	2101      	movs	r1, #1
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fc08 	bl	8001050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2102      	movs	r1, #2
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fbec 	bl	8001024 <LL_ADC_GetOffsetChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10a      	bne.n	800186c <HAL_ADC_ConfigChannel+0x310>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2102      	movs	r1, #2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fbe1 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	0e9b      	lsrs	r3, r3, #26
 8001866:	f003 021f 	and.w	r2, r3, #31
 800186a:	e01e      	b.n	80018aa <HAL_ADC_ConfigChannel+0x34e>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2102      	movs	r1, #2
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fbd6 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8001878:	4603      	mov	r3, r0
 800187a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001882:	fa93 f3a3 	rbit	r3, r3
 8001886:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800188a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800188e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001892:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800189a:	2320      	movs	r3, #32
 800189c:	e004      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800189e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d105      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x366>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	0e9b      	lsrs	r3, r3, #26
 80018bc:	f003 031f 	and.w	r3, r3, #31
 80018c0:	e014      	b.n	80018ec <HAL_ADC_ConfigChannel+0x390>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80018d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80018d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80018d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80018de:	2320      	movs	r3, #32
 80018e0:	e004      	b.n	80018ec <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80018e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018e6:	fab3 f383 	clz	r3, r3
 80018ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d106      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2200      	movs	r2, #0
 80018f6:	2102      	movs	r1, #2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fba9 	bl	8001050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2103      	movs	r1, #3
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fb8d 	bl	8001024 <LL_ADC_GetOffsetChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10a      	bne.n	800192a <HAL_ADC_ConfigChannel+0x3ce>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2103      	movs	r1, #3
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fb82 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	0e9b      	lsrs	r3, r3, #26
 8001924:	f003 021f 	and.w	r2, r3, #31
 8001928:	e017      	b.n	800195a <HAL_ADC_ConfigChannel+0x3fe>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2103      	movs	r1, #3
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fb77 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001942:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001944:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001946:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800194c:	2320      	movs	r3, #32
 800194e:	e003      	b.n	8001958 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001950:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001952:	fab3 f383 	clz	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001962:	2b00      	cmp	r3, #0
 8001964:	d105      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x416>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	0e9b      	lsrs	r3, r3, #26
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	e011      	b.n	8001996 <HAL_ADC_ConfigChannel+0x43a>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001980:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001982:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001984:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800198a:	2320      	movs	r3, #32
 800198c:	e003      	b.n	8001996 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800198e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001990:	fab3 f383 	clz	r3, r3
 8001994:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001996:	429a      	cmp	r2, r3
 8001998:	d106      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2200      	movs	r2, #0
 80019a0:	2103      	movs	r1, #3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fb54 	bl	8001050 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fc47 	bl	8001240 <LL_ADC_IsEnabled>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f040 813f 	bne.w	8001c38 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6819      	ldr	r1, [r3, #0]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	461a      	mov	r2, r3
 80019c8:	f7ff fbc8 	bl	800115c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4a8e      	ldr	r2, [pc, #568]	@ (8001c0c <HAL_ADC_ConfigChannel+0x6b0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	f040 8130 	bne.w	8001c38 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10b      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x4a4>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	0e9b      	lsrs	r3, r3, #26
 80019ee:	3301      	adds	r3, #1
 80019f0:	f003 031f 	and.w	r3, r3, #31
 80019f4:	2b09      	cmp	r3, #9
 80019f6:	bf94      	ite	ls
 80019f8:	2301      	movls	r3, #1
 80019fa:	2300      	movhi	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	e019      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x4d8>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a08:	fa93 f3a3 	rbit	r3, r3
 8001a0c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001a12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001a18:	2320      	movs	r3, #32
 8001a1a:	e003      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001a1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	3301      	adds	r3, #1
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	2b09      	cmp	r3, #9
 8001a2c:	bf94      	ite	ls
 8001a2e:	2301      	movls	r3, #1
 8001a30:	2300      	movhi	r3, #0
 8001a32:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d079      	beq.n	8001b2c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d107      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x4f8>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	0e9b      	lsrs	r3, r3, #26
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	069b      	lsls	r3, r3, #26
 8001a4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a52:	e015      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x524>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a5c:	fa93 f3a3 	rbit	r3, r3
 8001a60:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a64:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001a66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001a6c:	2320      	movs	r3, #32
 8001a6e:	e003      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001a70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	3301      	adds	r3, #1
 8001a7a:	069b      	lsls	r3, r3, #26
 8001a7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d109      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x544>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0e9b      	lsrs	r3, r3, #26
 8001a92:	3301      	adds	r3, #1
 8001a94:	f003 031f 	and.w	r3, r3, #31
 8001a98:	2101      	movs	r1, #1
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	e017      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x574>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ab0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001ab8:	2320      	movs	r3, #32
 8001aba:	e003      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001abc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	ea42 0103 	orr.w	r1, r2, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10a      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x59a>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0e9b      	lsrs	r3, r3, #26
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	f003 021f 	and.w	r2, r3, #31
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	051b      	lsls	r3, r3, #20
 8001af4:	e018      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x5cc>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001afe:	fa93 f3a3 	rbit	r3, r3
 8001b02:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b06:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001b0e:	2320      	movs	r3, #32
 8001b10:	e003      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b14:	fab3 f383 	clz	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b28:	430b      	orrs	r3, r1
 8001b2a:	e080      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d107      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x5ec>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0e9b      	lsrs	r3, r3, #26
 8001b3e:	3301      	adds	r3, #1
 8001b40:	069b      	lsls	r3, r3, #26
 8001b42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b46:	e015      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x618>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001b60:	2320      	movs	r3, #32
 8001b62:	e003      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b66:	fab3 f383 	clz	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	069b      	lsls	r3, r3, #26
 8001b70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d109      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x638>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0e9b      	lsrs	r3, r3, #26
 8001b86:	3301      	adds	r3, #1
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	e017      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x668>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	61bb      	str	r3, [r7, #24]
  return result;
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001bac:	2320      	movs	r3, #32
 8001bae:	e003      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f003 031f 	and.w	r3, r3, #31
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc4:	ea42 0103 	orr.w	r1, r2, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10d      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x694>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0e9b      	lsrs	r3, r3, #26
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f003 021f 	and.w	r2, r3, #31
 8001be0:	4613      	mov	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	3b1e      	subs	r3, #30
 8001be8:	051b      	lsls	r3, r3, #20
 8001bea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bee:	e01d      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x6d0>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	60fb      	str	r3, [r7, #12]
  return result;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d103      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001c08:	2320      	movs	r3, #32
 8001c0a:	e005      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x6bc>
 8001c0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fab3 f383 	clz	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	3301      	adds	r3, #1
 8001c1a:	f003 021f 	and.w	r2, r3, #31
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	3b1e      	subs	r3, #30
 8001c26:	051b      	lsls	r3, r3, #20
 8001c28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c2c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c32:	4619      	mov	r1, r3
 8001c34:	f7ff fa66 	bl	8001104 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b44      	ldr	r3, [pc, #272]	@ (8001d50 <HAL_ADC_ConfigChannel+0x7f4>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d07a      	beq.n	8001d3a <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c44:	4843      	ldr	r0, [pc, #268]	@ (8001d54 <HAL_ADC_ConfigChannel+0x7f8>)
 8001c46:	f7ff f9bb 	bl	8000fc0 <LL_ADC_GetCommonPathInternalCh>
 8001c4a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a41      	ldr	r2, [pc, #260]	@ (8001d58 <HAL_ADC_ConfigChannel+0x7fc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d12c      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d126      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a3c      	ldr	r2, [pc, #240]	@ (8001d5c <HAL_ADC_ConfigChannel+0x800>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d004      	beq.n	8001c78 <HAL_ADC_ConfigChannel+0x71c>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a3b      	ldr	r2, [pc, #236]	@ (8001d60 <HAL_ADC_ConfigChannel+0x804>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d15d      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c80:	4619      	mov	r1, r3
 8001c82:	4834      	ldr	r0, [pc, #208]	@ (8001d54 <HAL_ADC_ConfigChannel+0x7f8>)
 8001c84:	f7ff f989 	bl	8000f9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c88:	4b36      	ldr	r3, [pc, #216]	@ (8001d64 <HAL_ADC_ConfigChannel+0x808>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	099b      	lsrs	r3, r3, #6
 8001c8e:	4a36      	ldr	r2, [pc, #216]	@ (8001d68 <HAL_ADC_ConfigChannel+0x80c>)
 8001c90:	fba2 2303 	umull	r2, r3, r2, r3
 8001c94:	099b      	lsrs	r3, r3, #6
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	4613      	mov	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001ca2:	e002      	b.n	8001caa <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f9      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cb0:	e040      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a2d      	ldr	r2, [pc, #180]	@ (8001d6c <HAL_ADC_ConfigChannel+0x810>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d118      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001cbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d112      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a23      	ldr	r2, [pc, #140]	@ (8001d5c <HAL_ADC_ConfigChannel+0x800>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d004      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x780>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a22      	ldr	r2, [pc, #136]	@ (8001d60 <HAL_ADC_ConfigChannel+0x804>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d12d      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ce0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	481b      	ldr	r0, [pc, #108]	@ (8001d54 <HAL_ADC_ConfigChannel+0x7f8>)
 8001ce8:	f7ff f957 	bl	8000f9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cec:	e024      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d70 <HAL_ADC_ConfigChannel+0x814>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d120      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d11a      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a14      	ldr	r2, [pc, #80]	@ (8001d5c <HAL_ADC_ConfigChannel+0x800>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d115      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d16:	4619      	mov	r1, r3
 8001d18:	480e      	ldr	r0, [pc, #56]	@ (8001d54 <HAL_ADC_ConfigChannel+0x7f8>)
 8001d1a:	f7ff f93e 	bl	8000f9a <LL_ADC_SetCommonPathInternalCh>
 8001d1e:	e00c      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d24:	f043 0220 	orr.w	r2, r3, #32
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001d32:	e002      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d34:	bf00      	nop
 8001d36:	e000      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001d42:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	37d8      	adds	r7, #216	@ 0xd8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	80080000 	.word	0x80080000
 8001d54:	50040300 	.word	0x50040300
 8001d58:	c7520000 	.word	0xc7520000
 8001d5c:	50040000 	.word	0x50040000
 8001d60:	50040200 	.word	0x50040200
 8001d64:	20000000 	.word	0x20000000
 8001d68:	053e2d63 	.word	0x053e2d63
 8001d6c:	cb840000 	.word	0xcb840000
 8001d70:	80000001 	.word	0x80000001

08001d74 <LL_ADC_IsEnabled>:
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <LL_ADC_IsEnabled+0x18>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <LL_ADC_IsEnabled+0x1a>
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <LL_ADC_REG_IsConversionOngoing>:
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d101      	bne.n	8001db2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b0a1      	sub	sp, #132	@ 0x84
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e093      	b.n	8001f06 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001de6:	2300      	movs	r3, #0
 8001de8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001dea:	2300      	movs	r3, #0
 8001dec:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a47      	ldr	r2, [pc, #284]	@ (8001f10 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d102      	bne.n	8001dfe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001df8:	4b46      	ldr	r3, [pc, #280]	@ (8001f14 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	e001      	b.n	8001e02 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10b      	bne.n	8001e20 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0c:	f043 0220 	orr.w	r2, r3, #32
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e072      	b.n	8001f06 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff ffb9 	bl	8001d9a <LL_ADC_REG_IsConversionOngoing>
 8001e28:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ffb3 	bl	8001d9a <LL_ADC_REG_IsConversionOngoing>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d154      	bne.n	8001ee4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001e3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d151      	bne.n	8001ee4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001e40:	4b35      	ldr	r3, [pc, #212]	@ (8001f18 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001e42:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d02c      	beq.n	8001ea6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001e4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e5e:	035b      	lsls	r3, r3, #13
 8001e60:	430b      	orrs	r3, r1
 8001e62:	431a      	orrs	r2, r3
 8001e64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e66:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e68:	4829      	ldr	r0, [pc, #164]	@ (8001f10 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e6a:	f7ff ff83 	bl	8001d74 <LL_ADC_IsEnabled>
 8001e6e:	4604      	mov	r4, r0
 8001e70:	4828      	ldr	r0, [pc, #160]	@ (8001f14 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e72:	f7ff ff7f 	bl	8001d74 <LL_ADC_IsEnabled>
 8001e76:	4603      	mov	r3, r0
 8001e78:	431c      	orrs	r4, r3
 8001e7a:	4828      	ldr	r0, [pc, #160]	@ (8001f1c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001e7c:	f7ff ff7a 	bl	8001d74 <LL_ADC_IsEnabled>
 8001e80:	4603      	mov	r3, r0
 8001e82:	4323      	orrs	r3, r4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d137      	bne.n	8001ef8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001e88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001e90:	f023 030f 	bic.w	r3, r3, #15
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	6811      	ldr	r1, [r2, #0]
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	6892      	ldr	r2, [r2, #8]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ea2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001ea4:	e028      	b.n	8001ef8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001ea6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001eae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001eb0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eb2:	4817      	ldr	r0, [pc, #92]	@ (8001f10 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001eb4:	f7ff ff5e 	bl	8001d74 <LL_ADC_IsEnabled>
 8001eb8:	4604      	mov	r4, r0
 8001eba:	4816      	ldr	r0, [pc, #88]	@ (8001f14 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ebc:	f7ff ff5a 	bl	8001d74 <LL_ADC_IsEnabled>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	431c      	orrs	r4, r3
 8001ec4:	4815      	ldr	r0, [pc, #84]	@ (8001f1c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001ec6:	f7ff ff55 	bl	8001d74 <LL_ADC_IsEnabled>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4323      	orrs	r3, r4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d112      	bne.n	8001ef8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001ed2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001eda:	f023 030f 	bic.w	r3, r3, #15
 8001ede:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001ee0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001ee2:	e009      	b.n	8001ef8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee8:	f043 0220 	orr.w	r2, r3, #32
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001ef6:	e000      	b.n	8001efa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001ef8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001f02:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3784      	adds	r7, #132	@ 0x84
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd90      	pop	{r4, r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	50040000 	.word	0x50040000
 8001f14:	50040100 	.word	0x50040100
 8001f18:	50040300 	.word	0x50040300
 8001f1c:	50040200 	.word	0x50040200

08001f20 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0ed      	b.n	800210e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d102      	bne.n	8001f44 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7fe fdfa 	bl	8000b38 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f54:	f7ff f802 	bl	8000f5c <HAL_GetTick>
 8001f58:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f5a:	e012      	b.n	8001f82 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f5c:	f7fe fffe 	bl	8000f5c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b0a      	cmp	r3, #10
 8001f68:	d90b      	bls.n	8001f82 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2205      	movs	r2, #5
 8001f7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e0c5      	b.n	800210e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0e5      	beq.n	8001f5c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0202 	bic.w	r2, r2, #2
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fa0:	f7fe ffdc 	bl	8000f5c <HAL_GetTick>
 8001fa4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fa6:	e012      	b.n	8001fce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fa8:	f7fe ffd8 	bl	8000f5c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b0a      	cmp	r3, #10
 8001fb4:	d90b      	bls.n	8001fce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2205      	movs	r2, #5
 8001fc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e09f      	b.n	800210e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1e5      	bne.n	8001fa8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7e1b      	ldrb	r3, [r3, #24]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d108      	bne.n	8001ff6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	e007      	b.n	8002006 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002004:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	7e5b      	ldrb	r3, [r3, #25]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d108      	bne.n	8002020 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	e007      	b.n	8002030 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800202e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	7e9b      	ldrb	r3, [r3, #26]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d108      	bne.n	800204a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0220 	orr.w	r2, r2, #32
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	e007      	b.n	800205a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0220 	bic.w	r2, r2, #32
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	7edb      	ldrb	r3, [r3, #27]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d108      	bne.n	8002074 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0210 	bic.w	r2, r2, #16
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	e007      	b.n	8002084 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0210 	orr.w	r2, r2, #16
 8002082:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7f1b      	ldrb	r3, [r3, #28]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d108      	bne.n	800209e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0208 	orr.w	r2, r2, #8
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	e007      	b.n	80020ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0208 	bic.w	r2, r2, #8
 80020ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	7f5b      	ldrb	r3, [r3, #29]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d108      	bne.n	80020c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0204 	orr.w	r2, r2, #4
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	e007      	b.n	80020d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0204 	bic.w	r2, r2, #4
 80020d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	ea42 0103 	orr.w	r1, r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	1e5a      	subs	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002116:	b480      	push	{r7}
 8002118:	b089      	sub	sp, #36	@ 0x24
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 3020 	ldrb.w	r3, [r3, #32]
 800212a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002134:	7ffb      	ldrb	r3, [r7, #31]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d003      	beq.n	8002142 <HAL_CAN_AddTxMessage+0x2c>
 800213a:	7ffb      	ldrb	r3, [r7, #31]
 800213c:	2b02      	cmp	r3, #2
 800213e:	f040 80ad 	bne.w	800229c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10a      	bne.n	8002162 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 8095 	beq.w	800228c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	0e1b      	lsrs	r3, r3, #24
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800216c:	2201      	movs	r2, #1
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	409a      	lsls	r2, r3
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10d      	bne.n	800219a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002188:	68f9      	ldr	r1, [r7, #12]
 800218a:	6809      	ldr	r1, [r1, #0]
 800218c:	431a      	orrs	r2, r3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3318      	adds	r3, #24
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	440b      	add	r3, r1
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	e00f      	b.n	80021ba <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021a4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021aa:	68f9      	ldr	r1, [r7, #12]
 80021ac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80021ae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	3318      	adds	r3, #24
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	440b      	add	r3, r1
 80021b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6819      	ldr	r1, [r3, #0]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	3318      	adds	r3, #24
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	440b      	add	r3, r1
 80021ca:	3304      	adds	r3, #4
 80021cc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	7d1b      	ldrb	r3, [r3, #20]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d111      	bne.n	80021fa <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3318      	adds	r3, #24
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	4413      	add	r3, r2
 80021e2:	3304      	adds	r3, #4
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	6811      	ldr	r1, [r2, #0]
 80021ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	3318      	adds	r3, #24
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	440b      	add	r3, r1
 80021f6:	3304      	adds	r3, #4
 80021f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3307      	adds	r3, #7
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	061a      	lsls	r2, r3, #24
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3306      	adds	r3, #6
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	041b      	lsls	r3, r3, #16
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3305      	adds	r3, #5
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	4313      	orrs	r3, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	3204      	adds	r2, #4
 800221a:	7812      	ldrb	r2, [r2, #0]
 800221c:	4610      	mov	r0, r2
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	6811      	ldr	r1, [r2, #0]
 8002222:	ea43 0200 	orr.w	r2, r3, r0
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	440b      	add	r3, r1
 800222c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002230:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3303      	adds	r3, #3
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	061a      	lsls	r2, r3, #24
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3302      	adds	r3, #2
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	041b      	lsls	r3, r3, #16
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3301      	adds	r3, #1
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	021b      	lsls	r3, r3, #8
 800224c:	4313      	orrs	r3, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	7812      	ldrb	r2, [r2, #0]
 8002252:	4610      	mov	r0, r2
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	6811      	ldr	r1, [r2, #0]
 8002258:	ea43 0200 	orr.w	r2, r3, r0
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	440b      	add	r3, r1
 8002262:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002266:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	3318      	adds	r3, #24
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	4413      	add	r3, r2
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	6811      	ldr	r1, [r2, #0]
 800227a:	f043 0201 	orr.w	r2, r3, #1
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	3318      	adds	r3, #24
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	440b      	add	r3, r1
 8002286:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	e00e      	b.n	80022aa <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002290:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e006      	b.n	80022aa <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
  }
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3724      	adds	r7, #36	@ 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c8:	4b0c      	ldr	r3, [pc, #48]	@ (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022d4:	4013      	ands	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ea:	4a04      	ldr	r2, [pc, #16]	@ (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	60d3      	str	r3, [r2, #12]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002304:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <__NVIC_GetPriorityGrouping+0x18>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	f003 0307 	and.w	r3, r3, #7
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	2b00      	cmp	r3, #0
 800232c:	db0b      	blt.n	8002346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	f003 021f 	and.w	r2, r3, #31
 8002334:	4907      	ldr	r1, [pc, #28]	@ (8002354 <__NVIC_EnableIRQ+0x38>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	2001      	movs	r0, #1
 800233e:	fa00 f202 	lsl.w	r2, r0, r2
 8002342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000e100 	.word	0xe000e100

08002358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	6039      	str	r1, [r7, #0]
 8002362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002368:	2b00      	cmp	r3, #0
 800236a:	db0a      	blt.n	8002382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	b2da      	uxtb	r2, r3
 8002370:	490c      	ldr	r1, [pc, #48]	@ (80023a4 <__NVIC_SetPriority+0x4c>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	0112      	lsls	r2, r2, #4
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	440b      	add	r3, r1
 800237c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002380:	e00a      	b.n	8002398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4908      	ldr	r1, [pc, #32]	@ (80023a8 <__NVIC_SetPriority+0x50>)
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	3b04      	subs	r3, #4
 8002390:	0112      	lsls	r2, r2, #4
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	440b      	add	r3, r1
 8002396:	761a      	strb	r2, [r3, #24]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000e100 	.word	0xe000e100
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	@ 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f1c3 0307 	rsb	r3, r3, #7
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	bf28      	it	cs
 80023ca:	2304      	movcs	r3, #4
 80023cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3304      	adds	r3, #4
 80023d2:	2b06      	cmp	r3, #6
 80023d4:	d902      	bls.n	80023dc <NVIC_EncodePriority+0x30>
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3b03      	subs	r3, #3
 80023da:	e000      	b.n	80023de <NVIC_EncodePriority+0x32>
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43da      	mvns	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	401a      	ands	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	fa01 f303 	lsl.w	r3, r1, r3
 80023fe:	43d9      	mvns	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	4313      	orrs	r3, r2
         );
}
 8002406:	4618      	mov	r0, r3
 8002408:	3724      	adds	r7, #36	@ 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ff4c 	bl	80022b8 <__NVIC_SetPriorityGrouping>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800243a:	f7ff ff61 	bl	8002300 <__NVIC_GetPriorityGrouping>
 800243e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	6978      	ldr	r0, [r7, #20]
 8002446:	f7ff ffb1 	bl	80023ac <NVIC_EncodePriority>
 800244a:	4602      	mov	r2, r0
 800244c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff80 	bl	8002358 <__NVIC_SetPriority>
}
 8002458:	bf00      	nop
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff54 	bl	800231c <__NVIC_EnableIRQ>
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800248a:	e166      	b.n	800275a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	2101      	movs	r1, #1
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	4013      	ands	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 8158 	beq.w	8002754 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d005      	beq.n	80024bc <HAL_GPIO_Init+0x40>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d130      	bne.n	800251e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	2203      	movs	r2, #3
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024f2:	2201      	movs	r2, #1
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	f003 0201 	and.w	r2, r3, #1
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b03      	cmp	r3, #3
 8002528:	d017      	beq.n	800255a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	2203      	movs	r2, #3
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d123      	bne.n	80025ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	08da      	lsrs	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3208      	adds	r2, #8
 800256e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002572:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	220f      	movs	r2, #15
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	691a      	ldr	r2, [r3, #16]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	08da      	lsrs	r2, r3, #3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3208      	adds	r2, #8
 80025a8:	6939      	ldr	r1, [r7, #16]
 80025aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	2203      	movs	r2, #3
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0203 	and.w	r2, r3, #3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 80b2 	beq.w	8002754 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f0:	4b61      	ldr	r3, [pc, #388]	@ (8002778 <HAL_GPIO_Init+0x2fc>)
 80025f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f4:	4a60      	ldr	r2, [pc, #384]	@ (8002778 <HAL_GPIO_Init+0x2fc>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80025fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002778 <HAL_GPIO_Init+0x2fc>)
 80025fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002608:	4a5c      	ldr	r2, [pc, #368]	@ (800277c <HAL_GPIO_Init+0x300>)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	089b      	lsrs	r3, r3, #2
 800260e:	3302      	adds	r3, #2
 8002610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	220f      	movs	r2, #15
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002632:	d02b      	beq.n	800268c <HAL_GPIO_Init+0x210>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a52      	ldr	r2, [pc, #328]	@ (8002780 <HAL_GPIO_Init+0x304>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d025      	beq.n	8002688 <HAL_GPIO_Init+0x20c>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a51      	ldr	r2, [pc, #324]	@ (8002784 <HAL_GPIO_Init+0x308>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d01f      	beq.n	8002684 <HAL_GPIO_Init+0x208>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a50      	ldr	r2, [pc, #320]	@ (8002788 <HAL_GPIO_Init+0x30c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d019      	beq.n	8002680 <HAL_GPIO_Init+0x204>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a4f      	ldr	r2, [pc, #316]	@ (800278c <HAL_GPIO_Init+0x310>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d013      	beq.n	800267c <HAL_GPIO_Init+0x200>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a4e      	ldr	r2, [pc, #312]	@ (8002790 <HAL_GPIO_Init+0x314>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d00d      	beq.n	8002678 <HAL_GPIO_Init+0x1fc>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a4d      	ldr	r2, [pc, #308]	@ (8002794 <HAL_GPIO_Init+0x318>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d007      	beq.n	8002674 <HAL_GPIO_Init+0x1f8>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a4c      	ldr	r2, [pc, #304]	@ (8002798 <HAL_GPIO_Init+0x31c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d101      	bne.n	8002670 <HAL_GPIO_Init+0x1f4>
 800266c:	2307      	movs	r3, #7
 800266e:	e00e      	b.n	800268e <HAL_GPIO_Init+0x212>
 8002670:	2308      	movs	r3, #8
 8002672:	e00c      	b.n	800268e <HAL_GPIO_Init+0x212>
 8002674:	2306      	movs	r3, #6
 8002676:	e00a      	b.n	800268e <HAL_GPIO_Init+0x212>
 8002678:	2305      	movs	r3, #5
 800267a:	e008      	b.n	800268e <HAL_GPIO_Init+0x212>
 800267c:	2304      	movs	r3, #4
 800267e:	e006      	b.n	800268e <HAL_GPIO_Init+0x212>
 8002680:	2303      	movs	r3, #3
 8002682:	e004      	b.n	800268e <HAL_GPIO_Init+0x212>
 8002684:	2302      	movs	r3, #2
 8002686:	e002      	b.n	800268e <HAL_GPIO_Init+0x212>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <HAL_GPIO_Init+0x212>
 800268c:	2300      	movs	r3, #0
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	f002 0203 	and.w	r2, r2, #3
 8002694:	0092      	lsls	r2, r2, #2
 8002696:	4093      	lsls	r3, r2
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800269e:	4937      	ldr	r1, [pc, #220]	@ (800277c <HAL_GPIO_Init+0x300>)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	089b      	lsrs	r3, r3, #2
 80026a4:	3302      	adds	r3, #2
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ac:	4b3b      	ldr	r3, [pc, #236]	@ (800279c <HAL_GPIO_Init+0x320>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4013      	ands	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026d0:	4a32      	ldr	r2, [pc, #200]	@ (800279c <HAL_GPIO_Init+0x320>)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026d6:	4b31      	ldr	r3, [pc, #196]	@ (800279c <HAL_GPIO_Init+0x320>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	43db      	mvns	r3, r3
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4013      	ands	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026fa:	4a28      	ldr	r2, [pc, #160]	@ (800279c <HAL_GPIO_Init+0x320>)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002700:	4b26      	ldr	r3, [pc, #152]	@ (800279c <HAL_GPIO_Init+0x320>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	43db      	mvns	r3, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002724:	4a1d      	ldr	r2, [pc, #116]	@ (800279c <HAL_GPIO_Init+0x320>)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800272a:	4b1c      	ldr	r3, [pc, #112]	@ (800279c <HAL_GPIO_Init+0x320>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	43db      	mvns	r3, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800274e:	4a13      	ldr	r2, [pc, #76]	@ (800279c <HAL_GPIO_Init+0x320>)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	3301      	adds	r3, #1
 8002758:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	fa22 f303 	lsr.w	r3, r2, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	f47f ae91 	bne.w	800248c <HAL_GPIO_Init+0x10>
  }
}
 800276a:	bf00      	nop
 800276c:	bf00      	nop
 800276e:	371c      	adds	r7, #28
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	40021000 	.word	0x40021000
 800277c:	40010000 	.word	0x40010000
 8002780:	48000400 	.word	0x48000400
 8002784:	48000800 	.word	0x48000800
 8002788:	48000c00 	.word	0x48000c00
 800278c:	48001000 	.word	0x48001000
 8002790:	48001400 	.word	0x48001400
 8002794:	48001800 	.word	0x48001800
 8002798:	48001c00 	.word	0x48001c00
 800279c:	40010400 	.word	0x40010400

080027a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]
 80027ac:	4613      	mov	r3, r2
 80027ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b0:	787b      	ldrb	r3, [r7, #1]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027bc:	e002      	b.n	80027c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027be:	887a      	ldrh	r2, [r7, #2]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4013      	ands	r3, r2
 80027e8:	041a      	lsls	r2, r3, #16
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	43d9      	mvns	r1, r3
 80027ee:	887b      	ldrh	r3, [r7, #2]
 80027f0:	400b      	ands	r3, r1
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	619a      	str	r2, [r3, #24]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800280e:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d006      	beq.n	8002828 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800281a:	4a05      	ldr	r2, [pc, #20]	@ (8002830 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800281c:	88fb      	ldrh	r3, [r7, #6]
 800281e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fd fe42 	bl	80004ac <HAL_GPIO_EXTI_Callback>
  }
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40010400 	.word	0x40010400

08002834 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e08d      	b.n	8002962 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d106      	bne.n	8002860 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe fa10 	bl	8000c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2224      	movs	r2, #36	@ 0x24
 8002864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002884:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002894:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d107      	bne.n	80028ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	e006      	b.n	80028bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80028ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d108      	bne.n	80028d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	e007      	b.n	80028e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002908:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69d9      	ldr	r1, [r3, #28]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1a      	ldr	r2, [r3, #32]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	4608      	mov	r0, r1
 8002976:	4611      	mov	r1, r2
 8002978:	461a      	mov	r2, r3
 800297a:	4603      	mov	r3, r0
 800297c:	817b      	strh	r3, [r7, #10]
 800297e:	460b      	mov	r3, r1
 8002980:	813b      	strh	r3, [r7, #8]
 8002982:	4613      	mov	r3, r2
 8002984:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b20      	cmp	r3, #32
 8002990:	f040 80fd 	bne.w	8002b8e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_I2C_Mem_Read+0x34>
 800299a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800299c:	2b00      	cmp	r3, #0
 800299e:	d105      	bne.n	80029ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0f1      	b.n	8002b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d101      	bne.n	80029ba <HAL_I2C_Mem_Read+0x4e>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e0ea      	b.n	8002b90 <HAL_I2C_Mem_Read+0x224>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029c2:	f7fe facb 	bl	8000f5c <HAL_GetTick>
 80029c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	2319      	movs	r3, #25
 80029ce:	2201      	movs	r2, #1
 80029d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 f95b 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0d5      	b.n	8002b90 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2222      	movs	r2, #34	@ 0x22
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2240      	movs	r2, #64	@ 0x40
 80029f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a3a      	ldr	r2, [r7, #32]
 80029fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a0c:	88f8      	ldrh	r0, [r7, #6]
 8002a0e:	893a      	ldrh	r2, [r7, #8]
 8002a10:	8979      	ldrh	r1, [r7, #10]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f8bf 	bl	8002ba0 <I2C_RequestMemoryRead>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0ad      	b.n	8002b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2bff      	cmp	r3, #255	@ 0xff
 8002a3c:	d90e      	bls.n	8002a5c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	8979      	ldrh	r1, [r7, #10]
 8002a4c:	4b52      	ldr	r3, [pc, #328]	@ (8002b98 <HAL_I2C_Mem_Read+0x22c>)
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 fadf 	bl	8003018 <I2C_TransferConfig>
 8002a5a:	e00f      	b.n	8002a7c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	8979      	ldrh	r1, [r7, #10]
 8002a6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b98 <HAL_I2C_Mem_Read+0x22c>)
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 face 	bl	8003018 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a82:	2200      	movs	r2, #0
 8002a84:	2104      	movs	r1, #4
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f902 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e07c      	b.n	8002b90 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d034      	beq.n	8002b3c <HAL_I2C_Mem_Read+0x1d0>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d130      	bne.n	8002b3c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2180      	movs	r1, #128	@ 0x80
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f8d3 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e04d      	b.n	8002b90 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2bff      	cmp	r3, #255	@ 0xff
 8002afc:	d90e      	bls.n	8002b1c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	8979      	ldrh	r1, [r7, #10]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 fa7f 	bl	8003018 <I2C_TransferConfig>
 8002b1a:	e00f      	b.n	8002b3c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	8979      	ldrh	r1, [r7, #10]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 fa6e 	bl	8003018 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d19a      	bne.n	8002a7c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f940 	bl	8002dd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e01a      	b.n	8002b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6859      	ldr	r1, [r3, #4]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b9c <HAL_I2C_Mem_Read+0x230>)
 8002b6e:	400b      	ands	r3, r1
 8002b70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e000      	b.n	8002b90 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b8e:	2302      	movs	r3, #2
  }
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	80002400 	.word	0x80002400
 8002b9c:	fe00e800 	.word	0xfe00e800

08002ba0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	4608      	mov	r0, r1
 8002baa:	4611      	mov	r1, r2
 8002bac:	461a      	mov	r2, r3
 8002bae:	4603      	mov	r3, r0
 8002bb0:	817b      	strh	r3, [r7, #10]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	813b      	strh	r3, [r7, #8]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	8979      	ldrh	r1, [r7, #10]
 8002bc0:	4b20      	ldr	r3, [pc, #128]	@ (8002c44 <I2C_RequestMemoryRead+0xa4>)
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 fa26 	bl	8003018 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	69b9      	ldr	r1, [r7, #24]
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f8b6 	bl	8002d42 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e02c      	b.n	8002c3a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d105      	bne.n	8002bf2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002be6:	893b      	ldrh	r3, [r7, #8]
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bf0:	e015      	b.n	8002c1e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bf2:	893b      	ldrh	r3, [r7, #8]
 8002bf4:	0a1b      	lsrs	r3, r3, #8
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	69b9      	ldr	r1, [r7, #24]
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f89c 	bl	8002d42 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e012      	b.n	8002c3a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c14:	893b      	ldrh	r3, [r7, #8]
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2200      	movs	r2, #0
 8002c26:	2140      	movs	r1, #64	@ 0x40
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f831 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	80002000 	.word	0x80002000

08002c48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d103      	bne.n	8002c66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2200      	movs	r2, #0
 8002c64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d007      	beq.n	8002c84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699a      	ldr	r2, [r3, #24]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0201 	orr.w	r2, r2, #1
 8002c82:	619a      	str	r2, [r3, #24]
  }
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ca0:	e03b      	b.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	6839      	ldr	r1, [r7, #0]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f8d6 	bl	8002e58 <I2C_IsErrorOccurred>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e041      	b.n	8002d3a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cbc:	d02d      	beq.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cbe:	f7fe f94d 	bl	8000f5c <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d302      	bcc.n	8002cd4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d122      	bne.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	bf0c      	ite	eq
 8002ce4:	2301      	moveq	r3, #1
 8002ce6:	2300      	movne	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d113      	bne.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf6:	f043 0220 	orr.w	r2, r3, #32
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e00f      	b.n	8002d3a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4013      	ands	r3, r2
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	bf0c      	ite	eq
 8002d2a:	2301      	moveq	r3, #1
 8002d2c:	2300      	movne	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d0b4      	beq.n	8002ca2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d4e:	e033      	b.n	8002db8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	68b9      	ldr	r1, [r7, #8]
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f87f 	bl	8002e58 <I2C_IsErrorOccurred>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e031      	b.n	8002dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d6a:	d025      	beq.n	8002db8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6c:	f7fe f8f6 	bl	8000f5c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d302      	bcc.n	8002d82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d11a      	bne.n	8002db8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d013      	beq.n	8002db8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d94:	f043 0220 	orr.w	r2, r3, #32
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e007      	b.n	8002dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d1c4      	bne.n	8002d50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ddc:	e02f      	b.n	8002e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f838 	bl	8002e58 <I2C_IsErrorOccurred>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e02d      	b.n	8002e4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df2:	f7fe f8b3 	bl	8000f5c <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d302      	bcc.n	8002e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d11a      	bne.n	8002e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d013      	beq.n	8002e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1a:	f043 0220 	orr.w	r2, r3, #32
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e007      	b.n	8002e4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d1c8      	bne.n	8002dde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	@ 0x28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d068      	beq.n	8002f56 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2210      	movs	r2, #16
 8002e8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e8c:	e049      	b.n	8002f22 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e94:	d045      	beq.n	8002f22 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e96:	f7fe f861 	bl	8000f5c <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d302      	bcc.n	8002eac <I2C_IsErrorOccurred+0x54>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d13a      	bne.n	8002f22 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eb6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ebe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ece:	d121      	bne.n	8002f14 <I2C_IsErrorOccurred+0xbc>
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ed6:	d01d      	beq.n	8002f14 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ed8:	7cfb      	ldrb	r3, [r7, #19]
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	d01a      	beq.n	8002f14 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002eec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002eee:	f7fe f835 	bl	8000f5c <HAL_GetTick>
 8002ef2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ef4:	e00e      	b.n	8002f14 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ef6:	f7fe f831 	bl	8000f5c <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b19      	cmp	r3, #25
 8002f02:	d907      	bls.n	8002f14 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	f043 0320 	orr.w	r3, r3, #32
 8002f0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002f12:	e006      	b.n	8002f22 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d1e9      	bne.n	8002ef6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d003      	beq.n	8002f38 <I2C_IsErrorOccurred+0xe0>
 8002f30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0aa      	beq.n	8002e8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d103      	bne.n	8002f48 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2220      	movs	r2, #32
 8002f46:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	f043 0304 	orr.w	r3, r3, #4
 8002f4e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00b      	beq.n	8002f80 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00b      	beq.n	8002fa2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	f043 0308 	orr.w	r3, r3, #8
 8002f90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00b      	beq.n	8002fc4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	f043 0302 	orr.w	r3, r3, #2
 8002fb2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d01c      	beq.n	8003006 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f7ff fe3b 	bl	8002c48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6859      	ldr	r1, [r3, #4]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8003014 <I2C_IsErrorOccurred+0x1bc>)
 8002fde:	400b      	ands	r3, r1
 8002fe0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003006:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800300a:	4618      	mov	r0, r3
 800300c:	3728      	adds	r7, #40	@ 0x28
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	fe00e800 	.word	0xfe00e800

08003018 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	607b      	str	r3, [r7, #4]
 8003022:	460b      	mov	r3, r1
 8003024:	817b      	strh	r3, [r7, #10]
 8003026:	4613      	mov	r3, r2
 8003028:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800302a:	897b      	ldrh	r3, [r7, #10]
 800302c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003030:	7a7b      	ldrb	r3, [r7, #9]
 8003032:	041b      	lsls	r3, r3, #16
 8003034:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003038:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	4313      	orrs	r3, r2
 8003042:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003046:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	0d5b      	lsrs	r3, r3, #21
 8003052:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003056:	4b08      	ldr	r3, [pc, #32]	@ (8003078 <I2C_TransferConfig+0x60>)
 8003058:	430b      	orrs	r3, r1
 800305a:	43db      	mvns	r3, r3
 800305c:	ea02 0103 	and.w	r1, r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	03ff63ff 	.word	0x03ff63ff

0800307c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b20      	cmp	r3, #32
 8003090:	d138      	bne.n	8003104 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800309c:	2302      	movs	r3, #2
 800309e:	e032      	b.n	8003106 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2224      	movs	r2, #36	@ 0x24
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0201 	bic.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6819      	ldr	r1, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	e000      	b.n	8003106 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003104:	2302      	movs	r3, #2
  }
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003112:	b480      	push	{r7}
 8003114:	b085      	sub	sp, #20
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b20      	cmp	r3, #32
 8003126:	d139      	bne.n	800319c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003132:	2302      	movs	r3, #2
 8003134:	e033      	b.n	800319e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2224      	movs	r2, #36	@ 0x24
 8003142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0201 	bic.w	r2, r2, #1
 8003154:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003164:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	e000      	b.n	800319e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
  }
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80031b0:	4b04      	ldr	r3, [pc, #16]	@ (80031c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40007000 	.word	0x40007000

080031c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031d6:	d130      	bne.n	800323a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80031d8:	4b23      	ldr	r3, [pc, #140]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031e4:	d038      	beq.n	8003258 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031e6:	4b20      	ldr	r3, [pc, #128]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031f6:	4b1d      	ldr	r3, [pc, #116]	@ (800326c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2232      	movs	r2, #50	@ 0x32
 80031fc:	fb02 f303 	mul.w	r3, r2, r3
 8003200:	4a1b      	ldr	r2, [pc, #108]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	0c9b      	lsrs	r3, r3, #18
 8003208:	3301      	adds	r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800320c:	e002      	b.n	8003214 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3b01      	subs	r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003214:	4b14      	ldr	r3, [pc, #80]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800321c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003220:	d102      	bne.n	8003228 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f2      	bne.n	800320e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003228:	4b0f      	ldr	r3, [pc, #60]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003234:	d110      	bne.n	8003258 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e00f      	b.n	800325a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800323a:	4b0b      	ldr	r3, [pc, #44]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003246:	d007      	beq.n	8003258 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003248:	4b07      	ldr	r3, [pc, #28]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003250:	4a05      	ldr	r2, [pc, #20]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003252:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003256:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40007000 	.word	0x40007000
 800326c:	20000000 	.word	0x20000000
 8003270:	431bde83 	.word	0x431bde83

08003274 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d102      	bne.n	8003288 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	f000 bc08 	b.w	8003a98 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003288:	4b96      	ldr	r3, [pc, #600]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003292:	4b94      	ldr	r3, [pc, #592]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80e4 	beq.w	8003472 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <HAL_RCC_OscConfig+0x4c>
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	2b0c      	cmp	r3, #12
 80032b4:	f040 808b 	bne.w	80033ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	f040 8087 	bne.w	80033ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032c0:	4b88      	ldr	r3, [pc, #544]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_OscConfig+0x64>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e3df      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1a      	ldr	r2, [r3, #32]
 80032dc:	4b81      	ldr	r3, [pc, #516]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <HAL_RCC_OscConfig+0x7e>
 80032e8:	4b7e      	ldr	r3, [pc, #504]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032f0:	e005      	b.n	80032fe <HAL_RCC_OscConfig+0x8a>
 80032f2:	4b7c      	ldr	r3, [pc, #496]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 80032f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032fe:	4293      	cmp	r3, r2
 8003300:	d223      	bcs.n	800334a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fdae 	bl	8003e68 <RCC_SetFlashLatencyFromMSIRange>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e3c0      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003316:	4b73      	ldr	r3, [pc, #460]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a72      	ldr	r2, [pc, #456]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 800331c:	f043 0308 	orr.w	r3, r3, #8
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	4b70      	ldr	r3, [pc, #448]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	496d      	ldr	r1, [pc, #436]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 8003330:	4313      	orrs	r3, r2
 8003332:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003334:	4b6b      	ldr	r3, [pc, #428]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	021b      	lsls	r3, r3, #8
 8003342:	4968      	ldr	r1, [pc, #416]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 8003344:	4313      	orrs	r3, r2
 8003346:	604b      	str	r3, [r1, #4]
 8003348:	e025      	b.n	8003396 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800334a:	4b66      	ldr	r3, [pc, #408]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a65      	ldr	r2, [pc, #404]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 8003350:	f043 0308 	orr.w	r3, r3, #8
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	4b63      	ldr	r3, [pc, #396]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	4960      	ldr	r1, [pc, #384]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 8003364:	4313      	orrs	r3, r2
 8003366:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003368:	4b5e      	ldr	r3, [pc, #376]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	495b      	ldr	r1, [pc, #364]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 8003378:	4313      	orrs	r3, r2
 800337a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fd6e 	bl	8003e68 <RCC_SetFlashLatencyFromMSIRange>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e380      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003396:	f000 fc87 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 800339a:	4602      	mov	r2, r0
 800339c:	4b51      	ldr	r3, [pc, #324]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	4950      	ldr	r1, [pc, #320]	@ (80034e8 <HAL_RCC_OscConfig+0x274>)
 80033a8:	5ccb      	ldrb	r3, [r1, r3]
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	fa22 f303 	lsr.w	r3, r2, r3
 80033b2:	4a4e      	ldr	r2, [pc, #312]	@ (80034ec <HAL_RCC_OscConfig+0x278>)
 80033b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033b6:	4b4e      	ldr	r3, [pc, #312]	@ (80034f0 <HAL_RCC_OscConfig+0x27c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fd fcc0 	bl	8000d40 <HAL_InitTick>
 80033c0:	4603      	mov	r3, r0
 80033c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d052      	beq.n	8003470 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	e364      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d032      	beq.n	800343c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033d6:	4b43      	ldr	r3, [pc, #268]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a42      	ldr	r2, [pc, #264]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033e2:	f7fd fdbb 	bl	8000f5c <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033ea:	f7fd fdb7 	bl	8000f5c <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e34d      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033fc:	4b39      	ldr	r3, [pc, #228]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003408:	4b36      	ldr	r3, [pc, #216]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a35      	ldr	r2, [pc, #212]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 800340e:	f043 0308 	orr.w	r3, r3, #8
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b33      	ldr	r3, [pc, #204]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	4930      	ldr	r1, [pc, #192]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 8003422:	4313      	orrs	r3, r2
 8003424:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003426:	4b2f      	ldr	r3, [pc, #188]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	021b      	lsls	r3, r3, #8
 8003434:	492b      	ldr	r1, [pc, #172]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 8003436:	4313      	orrs	r3, r2
 8003438:	604b      	str	r3, [r1, #4]
 800343a:	e01a      	b.n	8003472 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800343c:	4b29      	ldr	r3, [pc, #164]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a28      	ldr	r2, [pc, #160]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003448:	f7fd fd88 	bl	8000f5c <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003450:	f7fd fd84 	bl	8000f5c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e31a      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003462:	4b20      	ldr	r3, [pc, #128]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x1dc>
 800346e:	e000      	b.n	8003472 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003470:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d073      	beq.n	8003566 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	2b08      	cmp	r3, #8
 8003482:	d005      	beq.n	8003490 <HAL_RCC_OscConfig+0x21c>
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b0c      	cmp	r3, #12
 8003488:	d10e      	bne.n	80034a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d10b      	bne.n	80034a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003490:	4b14      	ldr	r3, [pc, #80]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d063      	beq.n	8003564 <HAL_RCC_OscConfig+0x2f0>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d15f      	bne.n	8003564 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e2f7      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034b0:	d106      	bne.n	80034c0 <HAL_RCC_OscConfig+0x24c>
 80034b2:	4b0c      	ldr	r3, [pc, #48]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a0b      	ldr	r2, [pc, #44]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 80034b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	e025      	b.n	800350c <HAL_RCC_OscConfig+0x298>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034c8:	d114      	bne.n	80034f4 <HAL_RCC_OscConfig+0x280>
 80034ca:	4b06      	ldr	r3, [pc, #24]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a05      	ldr	r2, [pc, #20]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 80034d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	4b03      	ldr	r3, [pc, #12]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a02      	ldr	r2, [pc, #8]	@ (80034e4 <HAL_RCC_OscConfig+0x270>)
 80034dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	e013      	b.n	800350c <HAL_RCC_OscConfig+0x298>
 80034e4:	40021000 	.word	0x40021000
 80034e8:	08007cc0 	.word	0x08007cc0
 80034ec:	20000000 	.word	0x20000000
 80034f0:	20000004 	.word	0x20000004
 80034f4:	4ba0      	ldr	r3, [pc, #640]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a9f      	ldr	r2, [pc, #636]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 80034fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	4b9d      	ldr	r3, [pc, #628]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a9c      	ldr	r2, [pc, #624]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 8003506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800350a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d013      	beq.n	800353c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fd fd22 	bl	8000f5c <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800351c:	f7fd fd1e 	bl	8000f5c <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b64      	cmp	r3, #100	@ 0x64
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e2b4      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800352e:	4b92      	ldr	r3, [pc, #584]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0x2a8>
 800353a:	e014      	b.n	8003566 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7fd fd0e 	bl	8000f5c <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003544:	f7fd fd0a 	bl	8000f5c <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	@ 0x64
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e2a0      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003556:	4b88      	ldr	r3, [pc, #544]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x2d0>
 8003562:	e000      	b.n	8003566 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d060      	beq.n	8003634 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2b04      	cmp	r3, #4
 8003576:	d005      	beq.n	8003584 <HAL_RCC_OscConfig+0x310>
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	2b0c      	cmp	r3, #12
 800357c:	d119      	bne.n	80035b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d116      	bne.n	80035b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003584:	4b7c      	ldr	r3, [pc, #496]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_RCC_OscConfig+0x328>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e27d      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359c:	4b76      	ldr	r3, [pc, #472]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	061b      	lsls	r3, r3, #24
 80035aa:	4973      	ldr	r1, [pc, #460]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035b0:	e040      	b.n	8003634 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d023      	beq.n	8003602 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ba:	4b6f      	ldr	r3, [pc, #444]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a6e      	ldr	r2, [pc, #440]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 80035c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c6:	f7fd fcc9 	bl	8000f5c <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ce:	f7fd fcc5 	bl	8000f5c <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e25b      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035e0:	4b65      	ldr	r3, [pc, #404]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ec:	4b62      	ldr	r3, [pc, #392]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	061b      	lsls	r3, r3, #24
 80035fa:	495f      	ldr	r1, [pc, #380]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	604b      	str	r3, [r1, #4]
 8003600:	e018      	b.n	8003634 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003602:	4b5d      	ldr	r3, [pc, #372]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a5c      	ldr	r2, [pc, #368]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 8003608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800360c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360e:	f7fd fca5 	bl	8000f5c <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003616:	f7fd fca1 	bl	8000f5c <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e237      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003628:	4b53      	ldr	r3, [pc, #332]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1f0      	bne.n	8003616 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d03c      	beq.n	80036ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01c      	beq.n	8003682 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003648:	4b4b      	ldr	r3, [pc, #300]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 800364a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800364e:	4a4a      	ldr	r2, [pc, #296]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003658:	f7fd fc80 	bl	8000f5c <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003660:	f7fd fc7c 	bl	8000f5c <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e212      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003672:	4b41      	ldr	r3, [pc, #260]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 8003674:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0ef      	beq.n	8003660 <HAL_RCC_OscConfig+0x3ec>
 8003680:	e01b      	b.n	80036ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003682:	4b3d      	ldr	r3, [pc, #244]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 8003684:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003688:	4a3b      	ldr	r2, [pc, #236]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003692:	f7fd fc63 	bl	8000f5c <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800369a:	f7fd fc5f 	bl	8000f5c <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e1f5      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036ac:	4b32      	ldr	r3, [pc, #200]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 80036ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1ef      	bne.n	800369a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 80a6 	beq.w	8003814 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c8:	2300      	movs	r3, #0
 80036ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 80036ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10d      	bne.n	80036f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d8:	4b27      	ldr	r3, [pc, #156]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 80036da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036dc:	4a26      	ldr	r2, [pc, #152]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 80036de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80036e4:	4b24      	ldr	r3, [pc, #144]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 80036e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f0:	2301      	movs	r3, #1
 80036f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036f4:	4b21      	ldr	r3, [pc, #132]	@ (800377c <HAL_RCC_OscConfig+0x508>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d118      	bne.n	8003732 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003700:	4b1e      	ldr	r3, [pc, #120]	@ (800377c <HAL_RCC_OscConfig+0x508>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1d      	ldr	r2, [pc, #116]	@ (800377c <HAL_RCC_OscConfig+0x508>)
 8003706:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800370a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800370c:	f7fd fc26 	bl	8000f5c <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003714:	f7fd fc22 	bl	8000f5c <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e1b8      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003726:	4b15      	ldr	r3, [pc, #84]	@ (800377c <HAL_RCC_OscConfig+0x508>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d108      	bne.n	800374c <HAL_RCC_OscConfig+0x4d8>
 800373a:	4b0f      	ldr	r3, [pc, #60]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 800373c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003740:	4a0d      	ldr	r2, [pc, #52]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800374a:	e029      	b.n	80037a0 <HAL_RCC_OscConfig+0x52c>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b05      	cmp	r3, #5
 8003752:	d115      	bne.n	8003780 <HAL_RCC_OscConfig+0x50c>
 8003754:	4b08      	ldr	r3, [pc, #32]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375a:	4a07      	ldr	r2, [pc, #28]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 800375c:	f043 0304 	orr.w	r3, r3, #4
 8003760:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003764:	4b04      	ldr	r3, [pc, #16]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800376a:	4a03      	ldr	r2, [pc, #12]	@ (8003778 <HAL_RCC_OscConfig+0x504>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003774:	e014      	b.n	80037a0 <HAL_RCC_OscConfig+0x52c>
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000
 800377c:	40007000 	.word	0x40007000
 8003780:	4b9d      	ldr	r3, [pc, #628]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003786:	4a9c      	ldr	r2, [pc, #624]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003790:	4b99      	ldr	r3, [pc, #612]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003796:	4a98      	ldr	r2, [pc, #608]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 8003798:	f023 0304 	bic.w	r3, r3, #4
 800379c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d016      	beq.n	80037d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a8:	f7fd fbd8 	bl	8000f5c <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b0:	f7fd fbd4 	bl	8000f5c <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e168      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c6:	4b8c      	ldr	r3, [pc, #560]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0ed      	beq.n	80037b0 <HAL_RCC_OscConfig+0x53c>
 80037d4:	e015      	b.n	8003802 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d6:	f7fd fbc1 	bl	8000f5c <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037dc:	e00a      	b.n	80037f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f7fd fbbd 	bl	8000f5c <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e151      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037f4:	4b80      	ldr	r3, [pc, #512]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1ed      	bne.n	80037de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003802:	7ffb      	ldrb	r3, [r7, #31]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d105      	bne.n	8003814 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003808:	4b7b      	ldr	r3, [pc, #492]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 800380a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380c:	4a7a      	ldr	r2, [pc, #488]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 800380e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003812:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d03c      	beq.n	800389a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01c      	beq.n	8003862 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003828:	4b73      	ldr	r3, [pc, #460]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 800382a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800382e:	4a72      	ldr	r2, [pc, #456]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fd fb90 	bl	8000f5c <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003840:	f7fd fb8c 	bl	8000f5c <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e122      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003852:	4b69      	ldr	r3, [pc, #420]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 8003854:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ef      	beq.n	8003840 <HAL_RCC_OscConfig+0x5cc>
 8003860:	e01b      	b.n	800389a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003862:	4b65      	ldr	r3, [pc, #404]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 8003864:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003868:	4a63      	ldr	r2, [pc, #396]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003872:	f7fd fb73 	bl	8000f5c <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800387a:	f7fd fb6f 	bl	8000f5c <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e105      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800388c:	4b5a      	ldr	r3, [pc, #360]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 800388e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1ef      	bne.n	800387a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 80f9 	beq.w	8003a96 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	f040 80cf 	bne.w	8003a4c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038ae:	4b52      	ldr	r3, [pc, #328]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f003 0203 	and.w	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038be:	429a      	cmp	r2, r3
 80038c0:	d12c      	bne.n	800391c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038cc:	3b01      	subs	r3, #1
 80038ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d123      	bne.n	800391c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d11b      	bne.n	800391c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d113      	bne.n	800391c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fe:	085b      	lsrs	r3, r3, #1
 8003900:	3b01      	subs	r3, #1
 8003902:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003904:	429a      	cmp	r2, r3
 8003906:	d109      	bne.n	800391c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	085b      	lsrs	r3, r3, #1
 8003914:	3b01      	subs	r3, #1
 8003916:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d071      	beq.n	8003a00 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2b0c      	cmp	r3, #12
 8003920:	d068      	beq.n	80039f4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003922:	4b35      	ldr	r3, [pc, #212]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d105      	bne.n	800393a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800392e:	4b32      	ldr	r3, [pc, #200]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e0ac      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800393e:	4b2e      	ldr	r3, [pc, #184]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a2d      	ldr	r2, [pc, #180]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 8003944:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003948:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800394a:	f7fd fb07 	bl	8000f5c <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003952:	f7fd fb03 	bl	8000f5c <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e099      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003964:	4b24      	ldr	r3, [pc, #144]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1f0      	bne.n	8003952 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003970:	4b21      	ldr	r3, [pc, #132]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	4b21      	ldr	r3, [pc, #132]	@ (80039fc <HAL_RCC_OscConfig+0x788>)
 8003976:	4013      	ands	r3, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003980:	3a01      	subs	r2, #1
 8003982:	0112      	lsls	r2, r2, #4
 8003984:	4311      	orrs	r1, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800398a:	0212      	lsls	r2, r2, #8
 800398c:	4311      	orrs	r1, r2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003992:	0852      	lsrs	r2, r2, #1
 8003994:	3a01      	subs	r2, #1
 8003996:	0552      	lsls	r2, r2, #21
 8003998:	4311      	orrs	r1, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800399e:	0852      	lsrs	r2, r2, #1
 80039a0:	3a01      	subs	r2, #1
 80039a2:	0652      	lsls	r2, r2, #25
 80039a4:	4311      	orrs	r1, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80039aa:	06d2      	lsls	r2, r2, #27
 80039ac:	430a      	orrs	r2, r1
 80039ae:	4912      	ldr	r1, [pc, #72]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039b4:	4b10      	ldr	r3, [pc, #64]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a0f      	ldr	r2, [pc, #60]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 80039ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039c0:	4b0d      	ldr	r3, [pc, #52]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4a0c      	ldr	r2, [pc, #48]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 80039c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039cc:	f7fd fac6 	bl	8000f5c <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d4:	f7fd fac2 	bl	8000f5c <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e058      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039e6:	4b04      	ldr	r3, [pc, #16]	@ (80039f8 <HAL_RCC_OscConfig+0x784>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039f2:	e050      	b.n	8003a96 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e04f      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
 80039f8:	40021000 	.word	0x40021000
 80039fc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a00:	4b27      	ldr	r3, [pc, #156]	@ (8003aa0 <HAL_RCC_OscConfig+0x82c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d144      	bne.n	8003a96 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a0c:	4b24      	ldr	r3, [pc, #144]	@ (8003aa0 <HAL_RCC_OscConfig+0x82c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a23      	ldr	r2, [pc, #140]	@ (8003aa0 <HAL_RCC_OscConfig+0x82c>)
 8003a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a18:	4b21      	ldr	r3, [pc, #132]	@ (8003aa0 <HAL_RCC_OscConfig+0x82c>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4a20      	ldr	r2, [pc, #128]	@ (8003aa0 <HAL_RCC_OscConfig+0x82c>)
 8003a1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a24:	f7fd fa9a 	bl	8000f5c <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a2c:	f7fd fa96 	bl	8000f5c <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e02c      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a3e:	4b18      	ldr	r3, [pc, #96]	@ (8003aa0 <HAL_RCC_OscConfig+0x82c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x7b8>
 8003a4a:	e024      	b.n	8003a96 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b0c      	cmp	r3, #12
 8003a50:	d01f      	beq.n	8003a92 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a52:	4b13      	ldr	r3, [pc, #76]	@ (8003aa0 <HAL_RCC_OscConfig+0x82c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a12      	ldr	r2, [pc, #72]	@ (8003aa0 <HAL_RCC_OscConfig+0x82c>)
 8003a58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5e:	f7fd fa7d 	bl	8000f5c <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a66:	f7fd fa79 	bl	8000f5c <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e00f      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a78:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <HAL_RCC_OscConfig+0x82c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1f0      	bne.n	8003a66 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a84:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <HAL_RCC_OscConfig+0x82c>)
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	4905      	ldr	r1, [pc, #20]	@ (8003aa0 <HAL_RCC_OscConfig+0x82c>)
 8003a8a:	4b06      	ldr	r3, [pc, #24]	@ (8003aa4 <HAL_RCC_OscConfig+0x830>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	60cb      	str	r3, [r1, #12]
 8003a90:	e001      	b.n	8003a96 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3720      	adds	r7, #32
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	feeefffc 	.word	0xfeeefffc

08003aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0e7      	b.n	8003c8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003abc:	4b75      	ldr	r3, [pc, #468]	@ (8003c94 <HAL_RCC_ClockConfig+0x1ec>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d910      	bls.n	8003aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aca:	4b72      	ldr	r3, [pc, #456]	@ (8003c94 <HAL_RCC_ClockConfig+0x1ec>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 0207 	bic.w	r2, r3, #7
 8003ad2:	4970      	ldr	r1, [pc, #448]	@ (8003c94 <HAL_RCC_ClockConfig+0x1ec>)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ada:	4b6e      	ldr	r3, [pc, #440]	@ (8003c94 <HAL_RCC_ClockConfig+0x1ec>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0cf      	b.n	8003c8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d010      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	4b66      	ldr	r3, [pc, #408]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f0>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d908      	bls.n	8003b1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b08:	4b63      	ldr	r3, [pc, #396]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f0>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	4960      	ldr	r1, [pc, #384]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f0>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d04c      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b2e:	4b5a      	ldr	r3, [pc, #360]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f0>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d121      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e0a6      	b.n	8003c8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d107      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b46:	4b54      	ldr	r3, [pc, #336]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d115      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e09a      	b.n	8003c8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d107      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b5e:	4b4e      	ldr	r3, [pc, #312]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e08e      	b.n	8003c8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b6e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e086      	b.n	8003c8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b7e:	4b46      	ldr	r3, [pc, #280]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f0>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f023 0203 	bic.w	r2, r3, #3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	4943      	ldr	r1, [pc, #268]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f0>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b90:	f7fd f9e4 	bl	8000f5c <HAL_GetTick>
 8003b94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b96:	e00a      	b.n	8003bae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b98:	f7fd f9e0 	bl	8000f5c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e06e      	b.n	8003c8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bae:	4b3a      	ldr	r3, [pc, #232]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 020c 	and.w	r2, r3, #12
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d1eb      	bne.n	8003b98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d010      	beq.n	8003bee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	4b31      	ldr	r3, [pc, #196]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d208      	bcs.n	8003bee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f0>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	492b      	ldr	r1, [pc, #172]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f0>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bee:	4b29      	ldr	r3, [pc, #164]	@ (8003c94 <HAL_RCC_ClockConfig+0x1ec>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d210      	bcs.n	8003c1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfc:	4b25      	ldr	r3, [pc, #148]	@ (8003c94 <HAL_RCC_ClockConfig+0x1ec>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f023 0207 	bic.w	r2, r3, #7
 8003c04:	4923      	ldr	r1, [pc, #140]	@ (8003c94 <HAL_RCC_ClockConfig+0x1ec>)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0c:	4b21      	ldr	r3, [pc, #132]	@ (8003c94 <HAL_RCC_ClockConfig+0x1ec>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d001      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e036      	b.n	8003c8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d008      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	4918      	ldr	r1, [pc, #96]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d009      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c48:	4b13      	ldr	r3, [pc, #76]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	4910      	ldr	r1, [pc, #64]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c5c:	f000 f824 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b0d      	ldr	r3, [pc, #52]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	091b      	lsrs	r3, r3, #4
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	490b      	ldr	r1, [pc, #44]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f4>)
 8003c6e:	5ccb      	ldrb	r3, [r1, r3]
 8003c70:	f003 031f 	and.w	r3, r3, #31
 8003c74:	fa22 f303 	lsr.w	r3, r2, r3
 8003c78:	4a09      	ldr	r2, [pc, #36]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8003c7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c7c:	4b09      	ldr	r3, [pc, #36]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1fc>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fd f85d 	bl	8000d40 <HAL_InitTick>
 8003c86:	4603      	mov	r3, r0
 8003c88:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c8a:	7afb      	ldrb	r3, [r7, #11]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40022000 	.word	0x40022000
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	08007cc0 	.word	0x08007cc0
 8003ca0:	20000000 	.word	0x20000000
 8003ca4:	20000004 	.word	0x20000004

08003ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b089      	sub	sp, #36	@ 0x24
 8003cac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_GetSysClockFreq+0x34>
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	2b0c      	cmp	r3, #12
 8003cd4:	d121      	bne.n	8003d1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d11e      	bne.n	8003d1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cdc:	4b34      	ldr	r3, [pc, #208]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d107      	bne.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ce8:	4b31      	ldr	r3, [pc, #196]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cee:	0a1b      	lsrs	r3, r3, #8
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	61fb      	str	r3, [r7, #28]
 8003cf6:	e005      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cf8:	4b2d      	ldr	r3, [pc, #180]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d04:	4a2b      	ldr	r2, [pc, #172]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10d      	bne.n	8003d30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d18:	e00a      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d102      	bne.n	8003d26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d20:	4b25      	ldr	r3, [pc, #148]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d22:	61bb      	str	r3, [r7, #24]
 8003d24:	e004      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d101      	bne.n	8003d30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d2c:	4b23      	ldr	r3, [pc, #140]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x114>)
 8003d2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2b0c      	cmp	r3, #12
 8003d34:	d134      	bne.n	8003da0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d36:	4b1e      	ldr	r3, [pc, #120]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d003      	beq.n	8003d4e <HAL_RCC_GetSysClockFreq+0xa6>
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d003      	beq.n	8003d54 <HAL_RCC_GetSysClockFreq+0xac>
 8003d4c:	e005      	b.n	8003d5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d50:	617b      	str	r3, [r7, #20]
      break;
 8003d52:	e005      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d54:	4b19      	ldr	r3, [pc, #100]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x114>)
 8003d56:	617b      	str	r3, [r7, #20]
      break;
 8003d58:	e002      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	617b      	str	r3, [r7, #20]
      break;
 8003d5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d60:	4b13      	ldr	r3, [pc, #76]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d6e:	4b10      	ldr	r3, [pc, #64]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	0a1b      	lsrs	r3, r3, #8
 8003d74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	fb03 f202 	mul.w	r2, r3, r2
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d86:	4b0a      	ldr	r3, [pc, #40]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	0e5b      	lsrs	r3, r3, #25
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	3301      	adds	r3, #1
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003da0:	69bb      	ldr	r3, [r7, #24]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3724      	adds	r7, #36	@ 0x24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40021000 	.word	0x40021000
 8003db4:	08007cd8 	.word	0x08007cd8
 8003db8:	00f42400 	.word	0x00f42400
 8003dbc:	007a1200 	.word	0x007a1200

08003dc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc4:	4b03      	ldr	r3, [pc, #12]	@ (8003dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	20000000 	.word	0x20000000

08003dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ddc:	f7ff fff0 	bl	8003dc0 <HAL_RCC_GetHCLKFreq>
 8003de0:	4602      	mov	r2, r0
 8003de2:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	0a1b      	lsrs	r3, r3, #8
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	4904      	ldr	r1, [pc, #16]	@ (8003e00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dee:	5ccb      	ldrb	r3, [r1, r3]
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	08007cd0 	.word	0x08007cd0

08003e04 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	220f      	movs	r2, #15
 8003e12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003e14:	4b12      	ldr	r3, [pc, #72]	@ (8003e60 <HAL_RCC_GetClockConfig+0x5c>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0203 	and.w	r2, r3, #3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003e20:	4b0f      	ldr	r3, [pc, #60]	@ (8003e60 <HAL_RCC_GetClockConfig+0x5c>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e60 <HAL_RCC_GetClockConfig+0x5c>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003e38:	4b09      	ldr	r3, [pc, #36]	@ (8003e60 <HAL_RCC_GetClockConfig+0x5c>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	08db      	lsrs	r3, r3, #3
 8003e3e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003e46:	4b07      	ldr	r3, [pc, #28]	@ (8003e64 <HAL_RCC_GetClockConfig+0x60>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0207 	and.w	r2, r3, #7
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	601a      	str	r2, [r3, #0]
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40022000 	.word	0x40022000

08003e68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e70:	2300      	movs	r3, #0
 8003e72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e74:	4b2a      	ldr	r3, [pc, #168]	@ (8003f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e80:	f7ff f994 	bl	80031ac <HAL_PWREx_GetVoltageRange>
 8003e84:	6178      	str	r0, [r7, #20]
 8003e86:	e014      	b.n	8003eb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e88:	4b25      	ldr	r3, [pc, #148]	@ (8003f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8c:	4a24      	ldr	r2, [pc, #144]	@ (8003f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e92:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e94:	4b22      	ldr	r3, [pc, #136]	@ (8003f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ea0:	f7ff f984 	bl	80031ac <HAL_PWREx_GetVoltageRange>
 8003ea4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eaa:	4a1d      	ldr	r2, [pc, #116]	@ (8003f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eb0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eb8:	d10b      	bne.n	8003ed2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b80      	cmp	r3, #128	@ 0x80
 8003ebe:	d919      	bls.n	8003ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ec4:	d902      	bls.n	8003ecc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	e013      	b.n	8003ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ecc:	2301      	movs	r3, #1
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	e010      	b.n	8003ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b80      	cmp	r3, #128	@ 0x80
 8003ed6:	d902      	bls.n	8003ede <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ed8:	2303      	movs	r3, #3
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	e00a      	b.n	8003ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b80      	cmp	r3, #128	@ 0x80
 8003ee2:	d102      	bne.n	8003eea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	613b      	str	r3, [r7, #16]
 8003ee8:	e004      	b.n	8003ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b70      	cmp	r3, #112	@ 0x70
 8003eee:	d101      	bne.n	8003ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f023 0207 	bic.w	r2, r3, #7
 8003efc:	4909      	ldr	r1, [pc, #36]	@ (8003f24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f04:	4b07      	ldr	r3, [pc, #28]	@ (8003f24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d001      	beq.n	8003f16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40021000 	.word	0x40021000
 8003f24:	40022000 	.word	0x40022000

08003f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f30:	2300      	movs	r3, #0
 8003f32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f34:	2300      	movs	r3, #0
 8003f36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d041      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f48:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f4c:	d02a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f4e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f52:	d824      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f58:	d008      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f5e:	d81e      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f68:	d010      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f6a:	e018      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f6c:	4b86      	ldr	r3, [pc, #536]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4a85      	ldr	r2, [pc, #532]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f78:	e015      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	2100      	movs	r1, #0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 facd 	bl	8004520 <RCCEx_PLLSAI1_Config>
 8003f86:	4603      	mov	r3, r0
 8003f88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f8a:	e00c      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3320      	adds	r3, #32
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fbb6 	bl	8004704 <RCCEx_PLLSAI2_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f9c:	e003      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	74fb      	strb	r3, [r7, #19]
      break;
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fa6:	7cfb      	ldrb	r3, [r7, #19]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10b      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fac:	4b76      	ldr	r3, [pc, #472]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fba:	4973      	ldr	r1, [pc, #460]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003fc2:	e001      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc4:	7cfb      	ldrb	r3, [r7, #19]
 8003fc6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d041      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fd8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fdc:	d02a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003fde:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fe2:	d824      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fe4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fe8:	d008      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fee:	d81e      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ff4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ff8:	d010      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ffa:	e018      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ffc:	4b62      	ldr	r3, [pc, #392]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4a61      	ldr	r2, [pc, #388]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004002:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004006:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004008:	e015      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3304      	adds	r3, #4
 800400e:	2100      	movs	r1, #0
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fa85 	bl	8004520 <RCCEx_PLLSAI1_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800401a:	e00c      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3320      	adds	r3, #32
 8004020:	2100      	movs	r1, #0
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fb6e 	bl	8004704 <RCCEx_PLLSAI2_Config>
 8004028:	4603      	mov	r3, r0
 800402a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800402c:	e003      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	74fb      	strb	r3, [r7, #19]
      break;
 8004032:	e000      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004034:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004036:	7cfb      	ldrb	r3, [r7, #19]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10b      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800403c:	4b52      	ldr	r3, [pc, #328]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004042:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800404a:	494f      	ldr	r1, [pc, #316]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004052:	e001      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	7cfb      	ldrb	r3, [r7, #19]
 8004056:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80a0 	beq.w	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004066:	2300      	movs	r3, #0
 8004068:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800406a:	4b47      	ldr	r3, [pc, #284]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800406e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004076:	2301      	movs	r3, #1
 8004078:	e000      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800407a:	2300      	movs	r3, #0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00d      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004080:	4b41      	ldr	r3, [pc, #260]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004084:	4a40      	ldr	r2, [pc, #256]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004086:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800408a:	6593      	str	r3, [r2, #88]	@ 0x58
 800408c:	4b3e      	ldr	r3, [pc, #248]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800408e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004098:	2301      	movs	r3, #1
 800409a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800409c:	4b3b      	ldr	r3, [pc, #236]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a3a      	ldr	r2, [pc, #232]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040a8:	f7fc ff58 	bl	8000f5c <HAL_GetTick>
 80040ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040ae:	e009      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b0:	f7fc ff54 	bl	8000f5c <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d902      	bls.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	74fb      	strb	r3, [r7, #19]
        break;
 80040c2:	e005      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040c4:	4b31      	ldr	r3, [pc, #196]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ef      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80040d0:	7cfb      	ldrb	r3, [r7, #19]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d15c      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d01f      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d019      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040f4:	4b24      	ldr	r3, [pc, #144]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004100:	4b21      	ldr	r3, [pc, #132]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004106:	4a20      	ldr	r2, [pc, #128]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800410c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004110:	4b1d      	ldr	r3, [pc, #116]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004116:	4a1c      	ldr	r2, [pc, #112]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004118:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800411c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004120:	4a19      	ldr	r2, [pc, #100]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d016      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fc ff13 	bl	8000f5c <HAL_GetTick>
 8004136:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004138:	e00b      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413a:	f7fc ff0f 	bl	8000f5c <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004148:	4293      	cmp	r3, r2
 800414a:	d902      	bls.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	74fb      	strb	r3, [r7, #19]
            break;
 8004150:	e006      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004152:	4b0d      	ldr	r3, [pc, #52]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0ec      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004160:	7cfb      	ldrb	r3, [r7, #19]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10c      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004166:	4b08      	ldr	r3, [pc, #32]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800416c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004176:	4904      	ldr	r1, [pc, #16]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800417e:	e009      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004180:	7cfb      	ldrb	r3, [r7, #19]
 8004182:	74bb      	strb	r3, [r7, #18]
 8004184:	e006      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004186:	bf00      	nop
 8004188:	40021000 	.word	0x40021000
 800418c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004190:	7cfb      	ldrb	r3, [r7, #19]
 8004192:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004194:	7c7b      	ldrb	r3, [r7, #17]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d105      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800419a:	4ba6      	ldr	r3, [pc, #664]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800419c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419e:	4aa5      	ldr	r2, [pc, #660]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041b2:	4ba0      	ldr	r3, [pc, #640]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b8:	f023 0203 	bic.w	r2, r3, #3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c0:	499c      	ldr	r1, [pc, #624]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041d4:	4b97      	ldr	r3, [pc, #604]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041da:	f023 020c 	bic.w	r2, r3, #12
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e2:	4994      	ldr	r1, [pc, #592]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041f6:	4b8f      	ldr	r3, [pc, #572]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004204:	498b      	ldr	r1, [pc, #556]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00a      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004218:	4b86      	ldr	r3, [pc, #536]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800421a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004226:	4983      	ldr	r1, [pc, #524]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800423a:	4b7e      	ldr	r3, [pc, #504]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800423c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004240:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004248:	497a      	ldr	r1, [pc, #488]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800424a:	4313      	orrs	r3, r2
 800424c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00a      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800425c:	4b75      	ldr	r3, [pc, #468]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004262:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800426a:	4972      	ldr	r1, [pc, #456]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800427e:	4b6d      	ldr	r3, [pc, #436]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004284:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800428c:	4969      	ldr	r1, [pc, #420]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00a      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042a0:	4b64      	ldr	r3, [pc, #400]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042ae:	4961      	ldr	r1, [pc, #388]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042c2:	4b5c      	ldr	r3, [pc, #368]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d0:	4958      	ldr	r1, [pc, #352]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00a      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042e4:	4b53      	ldr	r3, [pc, #332]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f2:	4950      	ldr	r1, [pc, #320]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004306:	4b4b      	ldr	r3, [pc, #300]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004314:	4947      	ldr	r1, [pc, #284]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004328:	4b42      	ldr	r3, [pc, #264]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800432a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800432e:	f023 0203 	bic.w	r2, r3, #3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004336:	493f      	ldr	r1, [pc, #252]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d028      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800434a:	4b3a      	ldr	r3, [pc, #232]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004350:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004358:	4936      	ldr	r1, [pc, #216]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004364:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004368:	d106      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800436a:	4b32      	ldr	r3, [pc, #200]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	4a31      	ldr	r2, [pc, #196]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004370:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004374:	60d3      	str	r3, [r2, #12]
 8004376:	e011      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004380:	d10c      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3304      	adds	r3, #4
 8004386:	2101      	movs	r1, #1
 8004388:	4618      	mov	r0, r3
 800438a:	f000 f8c9 	bl	8004520 <RCCEx_PLLSAI1_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004392:	7cfb      	ldrb	r3, [r7, #19]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004398:	7cfb      	ldrb	r3, [r7, #19]
 800439a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d028      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043a8:	4b22      	ldr	r3, [pc, #136]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b6:	491f      	ldr	r1, [pc, #124]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043c6:	d106      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4a19      	ldr	r2, [pc, #100]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043d2:	60d3      	str	r3, [r2, #12]
 80043d4:	e011      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043de:	d10c      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3304      	adds	r3, #4
 80043e4:	2101      	movs	r1, #1
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f89a 	bl	8004520 <RCCEx_PLLSAI1_Config>
 80043ec:	4603      	mov	r3, r0
 80043ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043f0:	7cfb      	ldrb	r3, [r7, #19]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80043f6:	7cfb      	ldrb	r3, [r7, #19]
 80043f8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d02a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004406:	4b0b      	ldr	r3, [pc, #44]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004414:	4907      	ldr	r1, [pc, #28]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004420:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004424:	d108      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004426:	4b03      	ldr	r3, [pc, #12]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	4a02      	ldr	r2, [pc, #8]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800442c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004430:	60d3      	str	r3, [r2, #12]
 8004432:	e013      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004434:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800443c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004440:	d10c      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3304      	adds	r3, #4
 8004446:	2101      	movs	r1, #1
 8004448:	4618      	mov	r0, r3
 800444a:	f000 f869 	bl	8004520 <RCCEx_PLLSAI1_Config>
 800444e:	4603      	mov	r3, r0
 8004450:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004452:	7cfb      	ldrb	r3, [r7, #19]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d02f      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004468:	4b2c      	ldr	r3, [pc, #176]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004476:	4929      	ldr	r1, [pc, #164]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004482:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004486:	d10d      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3304      	adds	r3, #4
 800448c:	2102      	movs	r1, #2
 800448e:	4618      	mov	r0, r3
 8004490:	f000 f846 	bl	8004520 <RCCEx_PLLSAI1_Config>
 8004494:	4603      	mov	r3, r0
 8004496:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004498:	7cfb      	ldrb	r3, [r7, #19]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d014      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800449e:	7cfb      	ldrb	r3, [r7, #19]
 80044a0:	74bb      	strb	r3, [r7, #18]
 80044a2:	e011      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044ac:	d10c      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3320      	adds	r3, #32
 80044b2:	2102      	movs	r1, #2
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 f925 	bl	8004704 <RCCEx_PLLSAI2_Config>
 80044ba:	4603      	mov	r3, r0
 80044bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044be:	7cfb      	ldrb	r3, [r7, #19]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80044c4:	7cfb      	ldrb	r3, [r7, #19]
 80044c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00b      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044d4:	4b11      	ldr	r3, [pc, #68]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044da:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044e4:	490d      	ldr	r1, [pc, #52]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00b      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044f8:	4b08      	ldr	r3, [pc, #32]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004508:	4904      	ldr	r1, [pc, #16]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004510:	7cbb      	ldrb	r3, [r7, #18]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40021000 	.word	0x40021000

08004520 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800452e:	4b74      	ldr	r3, [pc, #464]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d018      	beq.n	800456c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800453a:	4b71      	ldr	r3, [pc, #452]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f003 0203 	and.w	r2, r3, #3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d10d      	bne.n	8004566 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
       ||
 800454e:	2b00      	cmp	r3, #0
 8004550:	d009      	beq.n	8004566 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004552:	4b6b      	ldr	r3, [pc, #428]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	091b      	lsrs	r3, r3, #4
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
       ||
 8004562:	429a      	cmp	r2, r3
 8004564:	d047      	beq.n	80045f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	73fb      	strb	r3, [r7, #15]
 800456a:	e044      	b.n	80045f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b03      	cmp	r3, #3
 8004572:	d018      	beq.n	80045a6 <RCCEx_PLLSAI1_Config+0x86>
 8004574:	2b03      	cmp	r3, #3
 8004576:	d825      	bhi.n	80045c4 <RCCEx_PLLSAI1_Config+0xa4>
 8004578:	2b01      	cmp	r3, #1
 800457a:	d002      	beq.n	8004582 <RCCEx_PLLSAI1_Config+0x62>
 800457c:	2b02      	cmp	r3, #2
 800457e:	d009      	beq.n	8004594 <RCCEx_PLLSAI1_Config+0x74>
 8004580:	e020      	b.n	80045c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004582:	4b5f      	ldr	r3, [pc, #380]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d11d      	bne.n	80045ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004592:	e01a      	b.n	80045ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004594:	4b5a      	ldr	r3, [pc, #360]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800459c:	2b00      	cmp	r3, #0
 800459e:	d116      	bne.n	80045ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a4:	e013      	b.n	80045ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045a6:	4b56      	ldr	r3, [pc, #344]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10f      	bne.n	80045d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045b2:	4b53      	ldr	r3, [pc, #332]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d109      	bne.n	80045d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045c2:	e006      	b.n	80045d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
      break;
 80045c8:	e004      	b.n	80045d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045ca:	bf00      	nop
 80045cc:	e002      	b.n	80045d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045ce:	bf00      	nop
 80045d0:	e000      	b.n	80045d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10d      	bne.n	80045f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045da:	4b49      	ldr	r3, [pc, #292]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6819      	ldr	r1, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	430b      	orrs	r3, r1
 80045f0:	4943      	ldr	r1, [pc, #268]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d17c      	bne.n	80046f6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045fc:	4b40      	ldr	r3, [pc, #256]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a3f      	ldr	r2, [pc, #252]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004602:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004608:	f7fc fca8 	bl	8000f5c <HAL_GetTick>
 800460c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800460e:	e009      	b.n	8004624 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004610:	f7fc fca4 	bl	8000f5c <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d902      	bls.n	8004624 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	73fb      	strb	r3, [r7, #15]
        break;
 8004622:	e005      	b.n	8004630 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004624:	4b36      	ldr	r3, [pc, #216]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1ef      	bne.n	8004610 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004630:	7bfb      	ldrb	r3, [r7, #15]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d15f      	bne.n	80046f6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d110      	bne.n	800465e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800463c:	4b30      	ldr	r3, [pc, #192]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004644:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6892      	ldr	r2, [r2, #8]
 800464c:	0211      	lsls	r1, r2, #8
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68d2      	ldr	r2, [r2, #12]
 8004652:	06d2      	lsls	r2, r2, #27
 8004654:	430a      	orrs	r2, r1
 8004656:	492a      	ldr	r1, [pc, #168]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004658:	4313      	orrs	r3, r2
 800465a:	610b      	str	r3, [r1, #16]
 800465c:	e027      	b.n	80046ae <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d112      	bne.n	800468a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004664:	4b26      	ldr	r3, [pc, #152]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800466c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6892      	ldr	r2, [r2, #8]
 8004674:	0211      	lsls	r1, r2, #8
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6912      	ldr	r2, [r2, #16]
 800467a:	0852      	lsrs	r2, r2, #1
 800467c:	3a01      	subs	r2, #1
 800467e:	0552      	lsls	r2, r2, #21
 8004680:	430a      	orrs	r2, r1
 8004682:	491f      	ldr	r1, [pc, #124]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004684:	4313      	orrs	r3, r2
 8004686:	610b      	str	r3, [r1, #16]
 8004688:	e011      	b.n	80046ae <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800468a:	4b1d      	ldr	r3, [pc, #116]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004692:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6892      	ldr	r2, [r2, #8]
 800469a:	0211      	lsls	r1, r2, #8
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6952      	ldr	r2, [r2, #20]
 80046a0:	0852      	lsrs	r2, r2, #1
 80046a2:	3a01      	subs	r2, #1
 80046a4:	0652      	lsls	r2, r2, #25
 80046a6:	430a      	orrs	r2, r1
 80046a8:	4915      	ldr	r1, [pc, #84]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046ae:	4b14      	ldr	r3, [pc, #80]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a13      	ldr	r2, [pc, #76]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80046b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ba:	f7fc fc4f 	bl	8000f5c <HAL_GetTick>
 80046be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046c0:	e009      	b.n	80046d6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046c2:	f7fc fc4b 	bl	8000f5c <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d902      	bls.n	80046d6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	73fb      	strb	r3, [r7, #15]
          break;
 80046d4:	e005      	b.n	80046e2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0ef      	beq.n	80046c2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d106      	bne.n	80046f6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046e8:	4b05      	ldr	r3, [pc, #20]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	4903      	ldr	r1, [pc, #12]	@ (8004700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40021000 	.word	0x40021000

08004704 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004712:	4b69      	ldr	r3, [pc, #420]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d018      	beq.n	8004750 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800471e:	4b66      	ldr	r3, [pc, #408]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f003 0203 	and.w	r2, r3, #3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d10d      	bne.n	800474a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
       ||
 8004732:	2b00      	cmp	r3, #0
 8004734:	d009      	beq.n	800474a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004736:	4b60      	ldr	r3, [pc, #384]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	091b      	lsrs	r3, r3, #4
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
       ||
 8004746:	429a      	cmp	r2, r3
 8004748:	d047      	beq.n	80047da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
 800474e:	e044      	b.n	80047da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b03      	cmp	r3, #3
 8004756:	d018      	beq.n	800478a <RCCEx_PLLSAI2_Config+0x86>
 8004758:	2b03      	cmp	r3, #3
 800475a:	d825      	bhi.n	80047a8 <RCCEx_PLLSAI2_Config+0xa4>
 800475c:	2b01      	cmp	r3, #1
 800475e:	d002      	beq.n	8004766 <RCCEx_PLLSAI2_Config+0x62>
 8004760:	2b02      	cmp	r3, #2
 8004762:	d009      	beq.n	8004778 <RCCEx_PLLSAI2_Config+0x74>
 8004764:	e020      	b.n	80047a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004766:	4b54      	ldr	r3, [pc, #336]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d11d      	bne.n	80047ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004776:	e01a      	b.n	80047ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004778:	4b4f      	ldr	r3, [pc, #316]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004780:	2b00      	cmp	r3, #0
 8004782:	d116      	bne.n	80047b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004788:	e013      	b.n	80047b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800478a:	4b4b      	ldr	r3, [pc, #300]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10f      	bne.n	80047b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004796:	4b48      	ldr	r3, [pc, #288]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d109      	bne.n	80047b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047a6:	e006      	b.n	80047b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	73fb      	strb	r3, [r7, #15]
      break;
 80047ac:	e004      	b.n	80047b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047ae:	bf00      	nop
 80047b0:	e002      	b.n	80047b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047b2:	bf00      	nop
 80047b4:	e000      	b.n	80047b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10d      	bne.n	80047da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047be:	4b3e      	ldr	r3, [pc, #248]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6819      	ldr	r1, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	430b      	orrs	r3, r1
 80047d4:	4938      	ldr	r1, [pc, #224]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d166      	bne.n	80048ae <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047e0:	4b35      	ldr	r3, [pc, #212]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a34      	ldr	r2, [pc, #208]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80047e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ec:	f7fc fbb6 	bl	8000f5c <HAL_GetTick>
 80047f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047f2:	e009      	b.n	8004808 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047f4:	f7fc fbb2 	bl	8000f5c <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d902      	bls.n	8004808 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	73fb      	strb	r3, [r7, #15]
        break;
 8004806:	e005      	b.n	8004814 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004808:	4b2b      	ldr	r3, [pc, #172]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1ef      	bne.n	80047f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004814:	7bfb      	ldrb	r3, [r7, #15]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d149      	bne.n	80048ae <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d110      	bne.n	8004842 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004820:	4b25      	ldr	r3, [pc, #148]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004828:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6892      	ldr	r2, [r2, #8]
 8004830:	0211      	lsls	r1, r2, #8
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	68d2      	ldr	r2, [r2, #12]
 8004836:	06d2      	lsls	r2, r2, #27
 8004838:	430a      	orrs	r2, r1
 800483a:	491f      	ldr	r1, [pc, #124]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800483c:	4313      	orrs	r3, r2
 800483e:	614b      	str	r3, [r1, #20]
 8004840:	e011      	b.n	8004866 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004842:	4b1d      	ldr	r3, [pc, #116]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800484a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6892      	ldr	r2, [r2, #8]
 8004852:	0211      	lsls	r1, r2, #8
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6912      	ldr	r2, [r2, #16]
 8004858:	0852      	lsrs	r2, r2, #1
 800485a:	3a01      	subs	r2, #1
 800485c:	0652      	lsls	r2, r2, #25
 800485e:	430a      	orrs	r2, r1
 8004860:	4915      	ldr	r1, [pc, #84]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004862:	4313      	orrs	r3, r2
 8004864:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004866:	4b14      	ldr	r3, [pc, #80]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a13      	ldr	r2, [pc, #76]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800486c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004870:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004872:	f7fc fb73 	bl	8000f5c <HAL_GetTick>
 8004876:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004878:	e009      	b.n	800488e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800487a:	f7fc fb6f 	bl	8000f5c <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d902      	bls.n	800488e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	73fb      	strb	r3, [r7, #15]
          break;
 800488c:	e005      	b.n	800489a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800488e:	4b0a      	ldr	r3, [pc, #40]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0ef      	beq.n	800487a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d106      	bne.n	80048ae <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80048a0:	4b05      	ldr	r3, [pc, #20]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80048a2:	695a      	ldr	r2, [r3, #20]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	4903      	ldr	r1, [pc, #12]	@ (80048b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40021000 	.word	0x40021000

080048bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e049      	b.n	8004962 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f841 	bl	800496a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3304      	adds	r3, #4
 80048f8:	4619      	mov	r1, r3
 80048fa:	4610      	mov	r0, r2
 80048fc:	f000 f9e0 	bl	8004cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
	...

08004980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b01      	cmp	r3, #1
 8004992:	d001      	beq.n	8004998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e04f      	b.n	8004a38 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a23      	ldr	r2, [pc, #140]	@ (8004a44 <HAL_TIM_Base_Start_IT+0xc4>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d01d      	beq.n	80049f6 <HAL_TIM_Base_Start_IT+0x76>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049c2:	d018      	beq.n	80049f6 <HAL_TIM_Base_Start_IT+0x76>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a48 <HAL_TIM_Base_Start_IT+0xc8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d013      	beq.n	80049f6 <HAL_TIM_Base_Start_IT+0x76>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a4c <HAL_TIM_Base_Start_IT+0xcc>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00e      	beq.n	80049f6 <HAL_TIM_Base_Start_IT+0x76>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004a50 <HAL_TIM_Base_Start_IT+0xd0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d009      	beq.n	80049f6 <HAL_TIM_Base_Start_IT+0x76>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004a54 <HAL_TIM_Base_Start_IT+0xd4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d004      	beq.n	80049f6 <HAL_TIM_Base_Start_IT+0x76>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a19      	ldr	r2, [pc, #100]	@ (8004a58 <HAL_TIM_Base_Start_IT+0xd8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d115      	bne.n	8004a22 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	4b17      	ldr	r3, [pc, #92]	@ (8004a5c <HAL_TIM_Base_Start_IT+0xdc>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b06      	cmp	r3, #6
 8004a06:	d015      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0xb4>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a0e:	d011      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a20:	e008      	b.n	8004a34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0201 	orr.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	e000      	b.n	8004a36 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	40012c00 	.word	0x40012c00
 8004a48:	40000400 	.word	0x40000400
 8004a4c:	40000800 	.word	0x40000800
 8004a50:	40000c00 	.word	0x40000c00
 8004a54:	40013400 	.word	0x40013400
 8004a58:	40014000 	.word	0x40014000
 8004a5c:	00010007 	.word	0x00010007

08004a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d020      	beq.n	8004ac4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01b      	beq.n	8004ac4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0202 	mvn.w	r2, #2
 8004a94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f8e9 	bl	8004c82 <HAL_TIM_IC_CaptureCallback>
 8004ab0:	e005      	b.n	8004abe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f8db 	bl	8004c6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f8ec 	bl	8004c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d020      	beq.n	8004b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01b      	beq.n	8004b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0204 	mvn.w	r2, #4
 8004ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f8c3 	bl	8004c82 <HAL_TIM_IC_CaptureCallback>
 8004afc:	e005      	b.n	8004b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f8b5 	bl	8004c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f8c6 	bl	8004c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d020      	beq.n	8004b5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01b      	beq.n	8004b5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0208 	mvn.w	r2, #8
 8004b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2204      	movs	r2, #4
 8004b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f89d 	bl	8004c82 <HAL_TIM_IC_CaptureCallback>
 8004b48:	e005      	b.n	8004b56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f88f 	bl	8004c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f8a0 	bl	8004c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f003 0310 	and.w	r3, r3, #16
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d020      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f003 0310 	and.w	r3, r3, #16
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01b      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0210 	mvn.w	r2, #16
 8004b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2208      	movs	r2, #8
 8004b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f877 	bl	8004c82 <HAL_TIM_IC_CaptureCallback>
 8004b94:	e005      	b.n	8004ba2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f869 	bl	8004c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f87a 	bl	8004c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00c      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0201 	mvn.w	r2, #1
 8004bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fb ff0c 	bl	80009e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d104      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00c      	beq.n	8004bfa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d007      	beq.n	8004bfa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f913 	bl	8004e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00c      	beq.n	8004c1e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d007      	beq.n	8004c1e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f90b 	bl	8004e34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00c      	beq.n	8004c42 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d007      	beq.n	8004c42 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f834 	bl	8004caa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f003 0320 	and.w	r3, r3, #32
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00c      	beq.n	8004c66 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f003 0320 	and.w	r3, r3, #32
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d007      	beq.n	8004c66 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f06f 0220 	mvn.w	r2, #32
 8004c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f8d3 	bl	8004e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c66:	bf00      	nop
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a46      	ldr	r2, [pc, #280]	@ (8004dec <TIM_Base_SetConfig+0x12c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d013      	beq.n	8004d00 <TIM_Base_SetConfig+0x40>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cde:	d00f      	beq.n	8004d00 <TIM_Base_SetConfig+0x40>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a43      	ldr	r2, [pc, #268]	@ (8004df0 <TIM_Base_SetConfig+0x130>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d00b      	beq.n	8004d00 <TIM_Base_SetConfig+0x40>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a42      	ldr	r2, [pc, #264]	@ (8004df4 <TIM_Base_SetConfig+0x134>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d007      	beq.n	8004d00 <TIM_Base_SetConfig+0x40>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a41      	ldr	r2, [pc, #260]	@ (8004df8 <TIM_Base_SetConfig+0x138>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_Base_SetConfig+0x40>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a40      	ldr	r2, [pc, #256]	@ (8004dfc <TIM_Base_SetConfig+0x13c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d108      	bne.n	8004d12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a35      	ldr	r2, [pc, #212]	@ (8004dec <TIM_Base_SetConfig+0x12c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d01f      	beq.n	8004d5a <TIM_Base_SetConfig+0x9a>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d20:	d01b      	beq.n	8004d5a <TIM_Base_SetConfig+0x9a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a32      	ldr	r2, [pc, #200]	@ (8004df0 <TIM_Base_SetConfig+0x130>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d017      	beq.n	8004d5a <TIM_Base_SetConfig+0x9a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a31      	ldr	r2, [pc, #196]	@ (8004df4 <TIM_Base_SetConfig+0x134>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d013      	beq.n	8004d5a <TIM_Base_SetConfig+0x9a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a30      	ldr	r2, [pc, #192]	@ (8004df8 <TIM_Base_SetConfig+0x138>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00f      	beq.n	8004d5a <TIM_Base_SetConfig+0x9a>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a2f      	ldr	r2, [pc, #188]	@ (8004dfc <TIM_Base_SetConfig+0x13c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00b      	beq.n	8004d5a <TIM_Base_SetConfig+0x9a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a2e      	ldr	r2, [pc, #184]	@ (8004e00 <TIM_Base_SetConfig+0x140>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d007      	beq.n	8004d5a <TIM_Base_SetConfig+0x9a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a2d      	ldr	r2, [pc, #180]	@ (8004e04 <TIM_Base_SetConfig+0x144>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d003      	beq.n	8004d5a <TIM_Base_SetConfig+0x9a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a2c      	ldr	r2, [pc, #176]	@ (8004e08 <TIM_Base_SetConfig+0x148>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d108      	bne.n	8004d6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a16      	ldr	r2, [pc, #88]	@ (8004dec <TIM_Base_SetConfig+0x12c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00f      	beq.n	8004db8 <TIM_Base_SetConfig+0xf8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a18      	ldr	r2, [pc, #96]	@ (8004dfc <TIM_Base_SetConfig+0x13c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00b      	beq.n	8004db8 <TIM_Base_SetConfig+0xf8>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a17      	ldr	r2, [pc, #92]	@ (8004e00 <TIM_Base_SetConfig+0x140>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d007      	beq.n	8004db8 <TIM_Base_SetConfig+0xf8>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a16      	ldr	r2, [pc, #88]	@ (8004e04 <TIM_Base_SetConfig+0x144>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d003      	beq.n	8004db8 <TIM_Base_SetConfig+0xf8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a15      	ldr	r2, [pc, #84]	@ (8004e08 <TIM_Base_SetConfig+0x148>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d103      	bne.n	8004dc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d105      	bne.n	8004dde <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f023 0201 	bic.w	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	611a      	str	r2, [r3, #16]
  }
}
 8004dde:	bf00      	nop
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40000400 	.word	0x40000400
 8004df4:	40000800 	.word	0x40000800
 8004df8:	40000c00 	.word	0x40000c00
 8004dfc:	40013400 	.word	0x40013400
 8004e00:	40014000 	.word	0x40014000
 8004e04:	40014400 	.word	0x40014400
 8004e08:	40014800 	.word	0x40014800

08004e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <__NVIC_SetPriority>:
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	6039      	str	r1, [r7, #0]
 8004e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	db0a      	blt.n	8004e72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	490c      	ldr	r1, [pc, #48]	@ (8004e94 <__NVIC_SetPriority+0x4c>)
 8004e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e66:	0112      	lsls	r2, r2, #4
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004e70:	e00a      	b.n	8004e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	4908      	ldr	r1, [pc, #32]	@ (8004e98 <__NVIC_SetPriority+0x50>)
 8004e78:	79fb      	ldrb	r3, [r7, #7]
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	3b04      	subs	r3, #4
 8004e80:	0112      	lsls	r2, r2, #4
 8004e82:	b2d2      	uxtb	r2, r2
 8004e84:	440b      	add	r3, r1
 8004e86:	761a      	strb	r2, [r3, #24]
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	e000e100 	.word	0xe000e100
 8004e98:	e000ed00 	.word	0xe000ed00

08004e9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004ea0:	4b05      	ldr	r3, [pc, #20]	@ (8004eb8 <SysTick_Handler+0x1c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004ea4:	f001 fd46 	bl	8006934 <xTaskGetSchedulerState>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d001      	beq.n	8004eb2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004eae:	f002 fb3b 	bl	8007528 <xPortSysTickHandler>
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	e000e010 	.word	0xe000e010

08004ebc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	f06f 0004 	mvn.w	r0, #4
 8004ec6:	f7ff ffbf 	bl	8004e48 <__NVIC_SetPriority>
#endif
}
 8004eca:	bf00      	nop
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ed6:	f3ef 8305 	mrs	r3, IPSR
 8004eda:	603b      	str	r3, [r7, #0]
  return(result);
 8004edc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004ee2:	f06f 0305 	mvn.w	r3, #5
 8004ee6:	607b      	str	r3, [r7, #4]
 8004ee8:	e00c      	b.n	8004f04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004eea:	4b0a      	ldr	r3, [pc, #40]	@ (8004f14 <osKernelInitialize+0x44>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d105      	bne.n	8004efe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004ef2:	4b08      	ldr	r3, [pc, #32]	@ (8004f14 <osKernelInitialize+0x44>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	607b      	str	r3, [r7, #4]
 8004efc:	e002      	b.n	8004f04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004efe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f04:	687b      	ldr	r3, [r7, #4]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	200001fc 	.word	0x200001fc

08004f18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f1e:	f3ef 8305 	mrs	r3, IPSR
 8004f22:	603b      	str	r3, [r7, #0]
  return(result);
 8004f24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004f2a:	f06f 0305 	mvn.w	r3, #5
 8004f2e:	607b      	str	r3, [r7, #4]
 8004f30:	e010      	b.n	8004f54 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f32:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <osKernelStart+0x48>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d109      	bne.n	8004f4e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004f3a:	f7ff ffbf 	bl	8004ebc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004f3e:	4b08      	ldr	r3, [pc, #32]	@ (8004f60 <osKernelStart+0x48>)
 8004f40:	2202      	movs	r2, #2
 8004f42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004f44:	f001 f892 	bl	800606c <vTaskStartScheduler>
      stat = osOK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	607b      	str	r3, [r7, #4]
 8004f4c:	e002      	b.n	8004f54 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004f4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f54:	687b      	ldr	r3, [r7, #4]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	200001fc 	.word	0x200001fc

08004f64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08e      	sub	sp, #56	@ 0x38
 8004f68:	af04      	add	r7, sp, #16
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f70:	2300      	movs	r3, #0
 8004f72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f74:	f3ef 8305 	mrs	r3, IPSR
 8004f78:	617b      	str	r3, [r7, #20]
  return(result);
 8004f7a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d17e      	bne.n	800507e <osThreadNew+0x11a>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d07b      	beq.n	800507e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004f86:	2380      	movs	r3, #128	@ 0x80
 8004f88:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004f8a:	2318      	movs	r3, #24
 8004f8c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004f92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d045      	beq.n	800502a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <osThreadNew+0x48>
        name = attr->name;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d008      	beq.n	8004fd2 <osThreadNew+0x6e>
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	2b38      	cmp	r3, #56	@ 0x38
 8004fc4:	d805      	bhi.n	8004fd2 <osThreadNew+0x6e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <osThreadNew+0x72>
        return (NULL);
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e054      	b.n	8005080 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	089b      	lsrs	r3, r3, #2
 8004fe4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00e      	beq.n	800500c <osThreadNew+0xa8>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2ba7      	cmp	r3, #167	@ 0xa7
 8004ff4:	d90a      	bls.n	800500c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d006      	beq.n	800500c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <osThreadNew+0xa8>
        mem = 1;
 8005006:	2301      	movs	r3, #1
 8005008:	61bb      	str	r3, [r7, #24]
 800500a:	e010      	b.n	800502e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10c      	bne.n	800502e <osThreadNew+0xca>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d108      	bne.n	800502e <osThreadNew+0xca>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d104      	bne.n	800502e <osThreadNew+0xca>
          mem = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	61bb      	str	r3, [r7, #24]
 8005028:	e001      	b.n	800502e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800502a:	2300      	movs	r3, #0
 800502c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d110      	bne.n	8005056 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800503c:	9202      	str	r2, [sp, #8]
 800503e:	9301      	str	r3, [sp, #4]
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	6a3a      	ldr	r2, [r7, #32]
 8005048:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 fe1a 	bl	8005c84 <xTaskCreateStatic>
 8005050:	4603      	mov	r3, r0
 8005052:	613b      	str	r3, [r7, #16]
 8005054:	e013      	b.n	800507e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d110      	bne.n	800507e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	b29a      	uxth	r2, r3
 8005060:	f107 0310 	add.w	r3, r7, #16
 8005064:	9301      	str	r3, [sp, #4]
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 fe68 	bl	8005d44 <xTaskCreate>
 8005074:	4603      	mov	r3, r0
 8005076:	2b01      	cmp	r3, #1
 8005078:	d001      	beq.n	800507e <osThreadNew+0x11a>
            hTask = NULL;
 800507a:	2300      	movs	r3, #0
 800507c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800507e:	693b      	ldr	r3, [r7, #16]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3728      	adds	r7, #40	@ 0x28
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005090:	f3ef 8305 	mrs	r3, IPSR
 8005094:	60bb      	str	r3, [r7, #8]
  return(result);
 8005096:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <osDelay+0x1c>
    stat = osErrorISR;
 800509c:	f06f 0305 	mvn.w	r3, #5
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	e007      	b.n	80050b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 ffa6 	bl	8006000 <vTaskDelay>
    }
  }

  return (stat);
 80050b4:	68fb      	ldr	r3, [r7, #12]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4a07      	ldr	r2, [pc, #28]	@ (80050ec <vApplicationGetIdleTaskMemory+0x2c>)
 80050d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	4a06      	ldr	r2, [pc, #24]	@ (80050f0 <vApplicationGetIdleTaskMemory+0x30>)
 80050d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2280      	movs	r2, #128	@ 0x80
 80050dc:	601a      	str	r2, [r3, #0]
}
 80050de:	bf00      	nop
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	20000200 	.word	0x20000200
 80050f0:	200002a8 	.word	0x200002a8

080050f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4a07      	ldr	r2, [pc, #28]	@ (8005120 <vApplicationGetTimerTaskMemory+0x2c>)
 8005104:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	4a06      	ldr	r2, [pc, #24]	@ (8005124 <vApplicationGetTimerTaskMemory+0x30>)
 800510a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005112:	601a      	str	r2, [r3, #0]
}
 8005114:	bf00      	nop
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	200004a8 	.word	0x200004a8
 8005124:	20000550 	.word	0x20000550

08005128 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f103 0208 	add.w	r2, r3, #8
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005140:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f103 0208 	add.w	r2, r3, #8
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f103 0208 	add.w	r2, r3, #8
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005182:	b480      	push	{r7}
 8005184:	b085      	sub	sp, #20
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	601a      	str	r2, [r3, #0]
}
 80051be:	bf00      	nop
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051ca:	b480      	push	{r7}
 80051cc:	b085      	sub	sp, #20
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051e0:	d103      	bne.n	80051ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	e00c      	b.n	8005204 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3308      	adds	r3, #8
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	e002      	b.n	80051f8 <vListInsert+0x2e>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	429a      	cmp	r2, r3
 8005202:	d2f6      	bcs.n	80051f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	601a      	str	r2, [r3, #0]
}
 8005230:	bf00      	nop
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6892      	ldr	r2, [r2, #8]
 8005252:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6852      	ldr	r2, [r2, #4]
 800525c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	429a      	cmp	r2, r3
 8005266:	d103      	bne.n	8005270 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	1e5a      	subs	r2, r3, #1
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10b      	bne.n	80052bc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052b6:	bf00      	nop
 80052b8:	bf00      	nop
 80052ba:	e7fd      	b.n	80052b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80052bc:	f002 f8a4 	bl	8007408 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052c8:	68f9      	ldr	r1, [r7, #12]
 80052ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80052cc:	fb01 f303 	mul.w	r3, r1, r3
 80052d0:	441a      	add	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ec:	3b01      	subs	r3, #1
 80052ee:	68f9      	ldr	r1, [r7, #12]
 80052f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80052f2:	fb01 f303 	mul.w	r3, r1, r3
 80052f6:	441a      	add	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	22ff      	movs	r2, #255	@ 0xff
 8005300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	22ff      	movs	r2, #255	@ 0xff
 8005308:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d114      	bne.n	800533c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d01a      	beq.n	8005350 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3310      	adds	r3, #16
 800531e:	4618      	mov	r0, r3
 8005320:	f001 f942 	bl	80065a8 <xTaskRemoveFromEventList>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d012      	beq.n	8005350 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800532a:	4b0d      	ldr	r3, [pc, #52]	@ (8005360 <xQueueGenericReset+0xd0>)
 800532c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	e009      	b.n	8005350 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3310      	adds	r3, #16
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff fef1 	bl	8005128 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3324      	adds	r3, #36	@ 0x24
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff feec 	bl	8005128 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005350:	f002 f88c 	bl	800746c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005354:	2301      	movs	r3, #1
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	e000ed04 	.word	0xe000ed04

08005364 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08e      	sub	sp, #56	@ 0x38
 8005368:	af02      	add	r7, sp, #8
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10b      	bne.n	8005390 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800538a:	bf00      	nop
 800538c:	bf00      	nop
 800538e:	e7fd      	b.n	800538c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10b      	bne.n	80053ae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	e7fd      	b.n	80053aa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <xQueueGenericCreateStatic+0x56>
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <xQueueGenericCreateStatic+0x5a>
 80053ba:	2301      	movs	r3, #1
 80053bc:	e000      	b.n	80053c0 <xQueueGenericCreateStatic+0x5c>
 80053be:	2300      	movs	r3, #0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10b      	bne.n	80053dc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	623b      	str	r3, [r7, #32]
}
 80053d6:	bf00      	nop
 80053d8:	bf00      	nop
 80053da:	e7fd      	b.n	80053d8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d102      	bne.n	80053e8 <xQueueGenericCreateStatic+0x84>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <xQueueGenericCreateStatic+0x88>
 80053e8:	2301      	movs	r3, #1
 80053ea:	e000      	b.n	80053ee <xQueueGenericCreateStatic+0x8a>
 80053ec:	2300      	movs	r3, #0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10b      	bne.n	800540a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	61fb      	str	r3, [r7, #28]
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop
 8005408:	e7fd      	b.n	8005406 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800540a:	2350      	movs	r3, #80	@ 0x50
 800540c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b50      	cmp	r3, #80	@ 0x50
 8005412:	d00b      	beq.n	800542c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	61bb      	str	r3, [r7, #24]
}
 8005426:	bf00      	nop
 8005428:	bf00      	nop
 800542a:	e7fd      	b.n	8005428 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800542c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00d      	beq.n	8005454 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005440:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	4613      	mov	r3, r2
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 f805 	bl	800545e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005456:	4618      	mov	r0, r3
 8005458:	3730      	adds	r7, #48	@ 0x30
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	607a      	str	r2, [r7, #4]
 800546a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d103      	bne.n	800547a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	e002      	b.n	8005480 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800548c:	2101      	movs	r1, #1
 800548e:	69b8      	ldr	r0, [r7, #24]
 8005490:	f7ff fefe 	bl	8005290 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	78fa      	ldrb	r2, [r7, #3]
 8005498:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800549c:	bf00      	nop
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08e      	sub	sp, #56	@ 0x38
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054b2:	2300      	movs	r3, #0
 80054b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80054ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10b      	bne.n	80054d8 <xQueueGenericSend+0x34>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80054d2:	bf00      	nop
 80054d4:	bf00      	nop
 80054d6:	e7fd      	b.n	80054d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d103      	bne.n	80054e6 <xQueueGenericSend+0x42>
 80054de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <xQueueGenericSend+0x46>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <xQueueGenericSend+0x48>
 80054ea:	2300      	movs	r3, #0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10b      	bne.n	8005508 <xQueueGenericSend+0x64>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005502:	bf00      	nop
 8005504:	bf00      	nop
 8005506:	e7fd      	b.n	8005504 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d103      	bne.n	8005516 <xQueueGenericSend+0x72>
 800550e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <xQueueGenericSend+0x76>
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <xQueueGenericSend+0x78>
 800551a:	2300      	movs	r3, #0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10b      	bne.n	8005538 <xQueueGenericSend+0x94>
	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	623b      	str	r3, [r7, #32]
}
 8005532:	bf00      	nop
 8005534:	bf00      	nop
 8005536:	e7fd      	b.n	8005534 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005538:	f001 f9fc 	bl	8006934 <xTaskGetSchedulerState>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d102      	bne.n	8005548 <xQueueGenericSend+0xa4>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <xQueueGenericSend+0xa8>
 8005548:	2301      	movs	r3, #1
 800554a:	e000      	b.n	800554e <xQueueGenericSend+0xaa>
 800554c:	2300      	movs	r3, #0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10b      	bne.n	800556a <xQueueGenericSend+0xc6>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	61fb      	str	r3, [r7, #28]
}
 8005564:	bf00      	nop
 8005566:	bf00      	nop
 8005568:	e7fd      	b.n	8005566 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800556a:	f001 ff4d 	bl	8007408 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800556e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005570:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005576:	429a      	cmp	r2, r3
 8005578:	d302      	bcc.n	8005580 <xQueueGenericSend+0xdc>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b02      	cmp	r3, #2
 800557e:	d129      	bne.n	80055d4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	68b9      	ldr	r1, [r7, #8]
 8005584:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005586:	f000 fa0f 	bl	80059a8 <prvCopyDataToQueue>
 800558a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800558c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005590:	2b00      	cmp	r3, #0
 8005592:	d010      	beq.n	80055b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005596:	3324      	adds	r3, #36	@ 0x24
 8005598:	4618      	mov	r0, r3
 800559a:	f001 f805 	bl	80065a8 <xTaskRemoveFromEventList>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d013      	beq.n	80055cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80055a4:	4b3f      	ldr	r3, [pc, #252]	@ (80056a4 <xQueueGenericSend+0x200>)
 80055a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	f3bf 8f6f 	isb	sy
 80055b4:	e00a      	b.n	80055cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d007      	beq.n	80055cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055bc:	4b39      	ldr	r3, [pc, #228]	@ (80056a4 <xQueueGenericSend+0x200>)
 80055be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80055cc:	f001 ff4e 	bl	800746c <vPortExitCritical>
				return pdPASS;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e063      	b.n	800569c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d103      	bne.n	80055e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055da:	f001 ff47 	bl	800746c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80055de:	2300      	movs	r3, #0
 80055e0:	e05c      	b.n	800569c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d106      	bne.n	80055f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055e8:	f107 0314 	add.w	r3, r7, #20
 80055ec:	4618      	mov	r0, r3
 80055ee:	f001 f83f 	bl	8006670 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055f2:	2301      	movs	r3, #1
 80055f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055f6:	f001 ff39 	bl	800746c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055fa:	f000 fda7 	bl	800614c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055fe:	f001 ff03 	bl	8007408 <vPortEnterCritical>
 8005602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005604:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005608:	b25b      	sxtb	r3, r3
 800560a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800560e:	d103      	bne.n	8005618 <xQueueGenericSend+0x174>
 8005610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800561e:	b25b      	sxtb	r3, r3
 8005620:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005624:	d103      	bne.n	800562e <xQueueGenericSend+0x18a>
 8005626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800562e:	f001 ff1d 	bl	800746c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005632:	1d3a      	adds	r2, r7, #4
 8005634:	f107 0314 	add.w	r3, r7, #20
 8005638:	4611      	mov	r1, r2
 800563a:	4618      	mov	r0, r3
 800563c:	f001 f82e 	bl	800669c <xTaskCheckForTimeOut>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d124      	bne.n	8005690 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005646:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005648:	f000 faa6 	bl	8005b98 <prvIsQueueFull>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d018      	beq.n	8005684 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005654:	3310      	adds	r3, #16
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	4611      	mov	r1, r2
 800565a:	4618      	mov	r0, r3
 800565c:	f000 ff52 	bl	8006504 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005660:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005662:	f000 fa31 	bl	8005ac8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005666:	f000 fd7f 	bl	8006168 <xTaskResumeAll>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	f47f af7c 	bne.w	800556a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005672:	4b0c      	ldr	r3, [pc, #48]	@ (80056a4 <xQueueGenericSend+0x200>)
 8005674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	e772      	b.n	800556a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005684:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005686:	f000 fa1f 	bl	8005ac8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800568a:	f000 fd6d 	bl	8006168 <xTaskResumeAll>
 800568e:	e76c      	b.n	800556a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005690:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005692:	f000 fa19 	bl	8005ac8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005696:	f000 fd67 	bl	8006168 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800569a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800569c:	4618      	mov	r0, r3
 800569e:	3738      	adds	r7, #56	@ 0x38
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	e000ed04 	.word	0xe000ed04

080056a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b090      	sub	sp, #64	@ 0x40
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80056ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10b      	bne.n	80056d8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80056d2:	bf00      	nop
 80056d4:	bf00      	nop
 80056d6:	e7fd      	b.n	80056d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d103      	bne.n	80056e6 <xQueueGenericSendFromISR+0x3e>
 80056de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <xQueueGenericSendFromISR+0x42>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <xQueueGenericSendFromISR+0x44>
 80056ea:	2300      	movs	r3, #0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10b      	bne.n	8005708 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005702:	bf00      	nop
 8005704:	bf00      	nop
 8005706:	e7fd      	b.n	8005704 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d103      	bne.n	8005716 <xQueueGenericSendFromISR+0x6e>
 800570e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <xQueueGenericSendFromISR+0x72>
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <xQueueGenericSendFromISR+0x74>
 800571a:	2300      	movs	r3, #0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10b      	bne.n	8005738 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	623b      	str	r3, [r7, #32]
}
 8005732:	bf00      	nop
 8005734:	bf00      	nop
 8005736:	e7fd      	b.n	8005734 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005738:	f001 ff46 	bl	80075c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800573c:	f3ef 8211 	mrs	r2, BASEPRI
 8005740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	61fa      	str	r2, [r7, #28]
 8005752:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005754:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005756:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800575c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005760:	429a      	cmp	r2, r3
 8005762:	d302      	bcc.n	800576a <xQueueGenericSendFromISR+0xc2>
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2b02      	cmp	r3, #2
 8005768:	d12f      	bne.n	80057ca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800576a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005770:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005778:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	68b9      	ldr	r1, [r7, #8]
 800577e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005780:	f000 f912 	bl	80059a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005784:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800578c:	d112      	bne.n	80057b4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800578e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005792:	2b00      	cmp	r3, #0
 8005794:	d016      	beq.n	80057c4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005798:	3324      	adds	r3, #36	@ 0x24
 800579a:	4618      	mov	r0, r3
 800579c:	f000 ff04 	bl	80065a8 <xTaskRemoveFromEventList>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00e      	beq.n	80057c4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00b      	beq.n	80057c4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e007      	b.n	80057c4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80057b8:	3301      	adds	r3, #1
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	b25a      	sxtb	r2, r3
 80057be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80057c4:	2301      	movs	r3, #1
 80057c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80057c8:	e001      	b.n	80057ce <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057ca:	2300      	movs	r3, #0
 80057cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3740      	adds	r7, #64	@ 0x40
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08c      	sub	sp, #48	@ 0x30
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80057f0:	2300      	movs	r3, #0
 80057f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10b      	bne.n	8005816 <xQueueReceive+0x32>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	623b      	str	r3, [r7, #32]
}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	e7fd      	b.n	8005812 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d103      	bne.n	8005824 <xQueueReceive+0x40>
 800581c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <xQueueReceive+0x44>
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <xQueueReceive+0x46>
 8005828:	2300      	movs	r3, #0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10b      	bne.n	8005846 <xQueueReceive+0x62>
	__asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	61fb      	str	r3, [r7, #28]
}
 8005840:	bf00      	nop
 8005842:	bf00      	nop
 8005844:	e7fd      	b.n	8005842 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005846:	f001 f875 	bl	8006934 <xTaskGetSchedulerState>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d102      	bne.n	8005856 <xQueueReceive+0x72>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <xQueueReceive+0x76>
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <xQueueReceive+0x78>
 800585a:	2300      	movs	r3, #0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10b      	bne.n	8005878 <xQueueReceive+0x94>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	61bb      	str	r3, [r7, #24]
}
 8005872:	bf00      	nop
 8005874:	bf00      	nop
 8005876:	e7fd      	b.n	8005874 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005878:	f001 fdc6 	bl	8007408 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800587c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800587e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005880:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01f      	beq.n	80058c8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005888:	68b9      	ldr	r1, [r7, #8]
 800588a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800588c:	f000 f8f6 	bl	8005a7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005892:	1e5a      	subs	r2, r3, #1
 8005894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005896:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00f      	beq.n	80058c0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a2:	3310      	adds	r3, #16
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fe7f 	bl	80065a8 <xTaskRemoveFromEventList>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d007      	beq.n	80058c0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058b0:	4b3c      	ldr	r3, [pc, #240]	@ (80059a4 <xQueueReceive+0x1c0>)
 80058b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058c0:	f001 fdd4 	bl	800746c <vPortExitCritical>
				return pdPASS;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e069      	b.n	800599c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d103      	bne.n	80058d6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058ce:	f001 fdcd 	bl	800746c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058d2:	2300      	movs	r3, #0
 80058d4:	e062      	b.n	800599c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d106      	bne.n	80058ea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058dc:	f107 0310 	add.w	r3, r7, #16
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fec5 	bl	8006670 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058e6:	2301      	movs	r3, #1
 80058e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058ea:	f001 fdbf 	bl	800746c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058ee:	f000 fc2d 	bl	800614c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058f2:	f001 fd89 	bl	8007408 <vPortEnterCritical>
 80058f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058fc:	b25b      	sxtb	r3, r3
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005902:	d103      	bne.n	800590c <xQueueReceive+0x128>
 8005904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800590c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005912:	b25b      	sxtb	r3, r3
 8005914:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005918:	d103      	bne.n	8005922 <xQueueReceive+0x13e>
 800591a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005922:	f001 fda3 	bl	800746c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005926:	1d3a      	adds	r2, r7, #4
 8005928:	f107 0310 	add.w	r3, r7, #16
 800592c:	4611      	mov	r1, r2
 800592e:	4618      	mov	r0, r3
 8005930:	f000 feb4 	bl	800669c <xTaskCheckForTimeOut>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d123      	bne.n	8005982 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800593a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800593c:	f000 f916 	bl	8005b6c <prvIsQueueEmpty>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d017      	beq.n	8005976 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005948:	3324      	adds	r3, #36	@ 0x24
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	4611      	mov	r1, r2
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fdd8 	bl	8006504 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005954:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005956:	f000 f8b7 	bl	8005ac8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800595a:	f000 fc05 	bl	8006168 <xTaskResumeAll>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d189      	bne.n	8005878 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005964:	4b0f      	ldr	r3, [pc, #60]	@ (80059a4 <xQueueReceive+0x1c0>)
 8005966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	e780      	b.n	8005878 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005978:	f000 f8a6 	bl	8005ac8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800597c:	f000 fbf4 	bl	8006168 <xTaskResumeAll>
 8005980:	e77a      	b.n	8005878 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005982:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005984:	f000 f8a0 	bl	8005ac8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005988:	f000 fbee 	bl	8006168 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800598c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800598e:	f000 f8ed 	bl	8005b6c <prvIsQueueEmpty>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	f43f af6f 	beq.w	8005878 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800599a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800599c:	4618      	mov	r0, r3
 800599e:	3730      	adds	r7, #48	@ 0x30
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	e000ed04 	.word	0xe000ed04

080059a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80059b4:	2300      	movs	r3, #0
 80059b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10d      	bne.n	80059e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d14d      	bne.n	8005a6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 ffcc 	bl	8006970 <xTaskPriorityDisinherit>
 80059d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	609a      	str	r2, [r3, #8]
 80059e0:	e043      	b.n	8005a6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d119      	bne.n	8005a1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6858      	ldr	r0, [r3, #4]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f0:	461a      	mov	r2, r3
 80059f2:	68b9      	ldr	r1, [r7, #8]
 80059f4:	f002 f89c 	bl	8007b30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a00:	441a      	add	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d32b      	bcc.n	8005a6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	605a      	str	r2, [r3, #4]
 8005a1a:	e026      	b.n	8005a6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	68d8      	ldr	r0, [r3, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a24:	461a      	mov	r2, r3
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	f002 f882 	bl	8007b30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a34:	425b      	negs	r3, r3
 8005a36:	441a      	add	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	68da      	ldr	r2, [r3, #12]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d207      	bcs.n	8005a58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a50:	425b      	negs	r3, r3
 8005a52:	441a      	add	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d105      	bne.n	8005a6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005a72:	697b      	ldr	r3, [r7, #20]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d018      	beq.n	8005ac0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a96:	441a      	add	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68da      	ldr	r2, [r3, #12]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d303      	bcc.n	8005ab0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68d9      	ldr	r1, [r3, #12]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab8:	461a      	mov	r2, r3
 8005aba:	6838      	ldr	r0, [r7, #0]
 8005abc:	f002 f838 	bl	8007b30 <memcpy>
	}
}
 8005ac0:	bf00      	nop
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ad0:	f001 fc9a 	bl	8007408 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ada:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005adc:	e011      	b.n	8005b02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d012      	beq.n	8005b0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3324      	adds	r3, #36	@ 0x24
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 fd5c 	bl	80065a8 <xTaskRemoveFromEventList>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005af6:	f000 fe35 	bl	8006764 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	dce9      	bgt.n	8005ade <prvUnlockQueue+0x16>
 8005b0a:	e000      	b.n	8005b0e <prvUnlockQueue+0x46>
					break;
 8005b0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	22ff      	movs	r2, #255	@ 0xff
 8005b12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005b16:	f001 fca9 	bl	800746c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b1a:	f001 fc75 	bl	8007408 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b26:	e011      	b.n	8005b4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d012      	beq.n	8005b56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3310      	adds	r3, #16
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 fd37 	bl	80065a8 <xTaskRemoveFromEventList>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b40:	f000 fe10 	bl	8006764 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b44:	7bbb      	ldrb	r3, [r7, #14]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	dce9      	bgt.n	8005b28 <prvUnlockQueue+0x60>
 8005b54:	e000      	b.n	8005b58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	22ff      	movs	r2, #255	@ 0xff
 8005b5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005b60:	f001 fc84 	bl	800746c <vPortExitCritical>
}
 8005b64:	bf00      	nop
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b74:	f001 fc48 	bl	8007408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d102      	bne.n	8005b86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b80:	2301      	movs	r3, #1
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	e001      	b.n	8005b8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b8a:	f001 fc6f 	bl	800746c <vPortExitCritical>

	return xReturn;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ba0:	f001 fc32 	bl	8007408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d102      	bne.n	8005bb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	e001      	b.n	8005bba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bba:	f001 fc57 	bl	800746c <vPortExitCritical>

	return xReturn;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	e014      	b.n	8005c02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005bd8:	4a0f      	ldr	r2, [pc, #60]	@ (8005c18 <vQueueAddToRegistry+0x50>)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10b      	bne.n	8005bfc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005be4:	490c      	ldr	r1, [pc, #48]	@ (8005c18 <vQueueAddToRegistry+0x50>)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005bee:	4a0a      	ldr	r2, [pc, #40]	@ (8005c18 <vQueueAddToRegistry+0x50>)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	4413      	add	r3, r2
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005bfa:	e006      	b.n	8005c0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b07      	cmp	r3, #7
 8005c06:	d9e7      	bls.n	8005bd8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c08:	bf00      	nop
 8005c0a:	bf00      	nop
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	20000950 	.word	0x20000950

08005c1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c2c:	f001 fbec 	bl	8007408 <vPortEnterCritical>
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c36:	b25b      	sxtb	r3, r3
 8005c38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c3c:	d103      	bne.n	8005c46 <vQueueWaitForMessageRestricted+0x2a>
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c4c:	b25b      	sxtb	r3, r3
 8005c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c52:	d103      	bne.n	8005c5c <vQueueWaitForMessageRestricted+0x40>
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c5c:	f001 fc06 	bl	800746c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d106      	bne.n	8005c76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	3324      	adds	r3, #36	@ 0x24
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	68b9      	ldr	r1, [r7, #8]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 fc6d 	bl	8006550 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c76:	6978      	ldr	r0, [r7, #20]
 8005c78:	f7ff ff26 	bl	8005ac8 <prvUnlockQueue>
	}
 8005c7c:	bf00      	nop
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08e      	sub	sp, #56	@ 0x38
 8005c88:	af04      	add	r7, sp, #16
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10b      	bne.n	8005cb0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	623b      	str	r3, [r7, #32]
}
 8005caa:	bf00      	nop
 8005cac:	bf00      	nop
 8005cae:	e7fd      	b.n	8005cac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10b      	bne.n	8005cce <xTaskCreateStatic+0x4a>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	61fb      	str	r3, [r7, #28]
}
 8005cc8:	bf00      	nop
 8005cca:	bf00      	nop
 8005ccc:	e7fd      	b.n	8005cca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cce:	23a8      	movs	r3, #168	@ 0xa8
 8005cd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	2ba8      	cmp	r3, #168	@ 0xa8
 8005cd6:	d00b      	beq.n	8005cf0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	61bb      	str	r3, [r7, #24]
}
 8005cea:	bf00      	nop
 8005cec:	bf00      	nop
 8005cee:	e7fd      	b.n	8005cec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005cf0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01e      	beq.n	8005d36 <xTaskCreateStatic+0xb2>
 8005cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d01b      	beq.n	8005d36 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d00:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d06:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d10:	2300      	movs	r3, #0
 8005d12:	9303      	str	r3, [sp, #12]
 8005d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d16:	9302      	str	r3, [sp, #8]
 8005d18:	f107 0314 	add.w	r3, r7, #20
 8005d1c:	9301      	str	r3, [sp, #4]
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 f851 	bl	8005dd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d30:	f000 f8f6 	bl	8005f20 <prvAddNewTaskToReadyList>
 8005d34:	e001      	b.n	8005d3a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d3a:	697b      	ldr	r3, [r7, #20]
	}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3728      	adds	r7, #40	@ 0x28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08c      	sub	sp, #48	@ 0x30
 8005d48:	af04      	add	r7, sp, #16
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	4613      	mov	r3, r2
 8005d52:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d54:	88fb      	ldrh	r3, [r7, #6]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 fc77 	bl	800764c <pvPortMalloc>
 8005d5e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00e      	beq.n	8005d84 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d66:	20a8      	movs	r0, #168	@ 0xa8
 8005d68:	f001 fc70 	bl	800764c <pvPortMalloc>
 8005d6c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d7a:	e005      	b.n	8005d88 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d7c:	6978      	ldr	r0, [r7, #20]
 8005d7e:	f001 fd33 	bl	80077e8 <vPortFree>
 8005d82:	e001      	b.n	8005d88 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d017      	beq.n	8005dbe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d96:	88fa      	ldrh	r2, [r7, #6]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	9303      	str	r3, [sp, #12]
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	9302      	str	r3, [sp, #8]
 8005da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da2:	9301      	str	r3, [sp, #4]
 8005da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f80f 	bl	8005dd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005db2:	69f8      	ldr	r0, [r7, #28]
 8005db4:	f000 f8b4 	bl	8005f20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005db8:	2301      	movs	r3, #1
 8005dba:	61bb      	str	r3, [r7, #24]
 8005dbc:	e002      	b.n	8005dc4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005dbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005dc2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005dc4:	69bb      	ldr	r3, [r7, #24]
	}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3720      	adds	r7, #32
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	461a      	mov	r2, r3
 8005de8:	21a5      	movs	r1, #165	@ 0xa5
 8005dea:	f001 fe1d 	bl	8007a28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	f023 0307 	bic.w	r3, r3, #7
 8005e06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00b      	beq.n	8005e2a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	617b      	str	r3, [r7, #20]
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	e7fd      	b.n	8005e26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01f      	beq.n	8005e70 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e30:	2300      	movs	r3, #0
 8005e32:	61fb      	str	r3, [r7, #28]
 8005e34:	e012      	b.n	8005e5c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	7819      	ldrb	r1, [r3, #0]
 8005e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	4413      	add	r3, r2
 8005e44:	3334      	adds	r3, #52	@ 0x34
 8005e46:	460a      	mov	r2, r1
 8005e48:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	4413      	add	r3, r2
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d006      	beq.n	8005e64 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	61fb      	str	r3, [r7, #28]
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	2b0f      	cmp	r3, #15
 8005e60:	d9e9      	bls.n	8005e36 <prvInitialiseNewTask+0x66>
 8005e62:	e000      	b.n	8005e66 <prvInitialiseNewTask+0x96>
			{
				break;
 8005e64:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e6e:	e003      	b.n	8005e78 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7a:	2b37      	cmp	r3, #55	@ 0x37
 8005e7c:	d901      	bls.n	8005e82 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e7e:	2337      	movs	r3, #55	@ 0x37
 8005e80:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e86:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e8c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e90:	2200      	movs	r2, #0
 8005e92:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e96:	3304      	adds	r3, #4
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff f965 	bl	8005168 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea0:	3318      	adds	r3, #24
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff f960 	bl	8005168 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ebc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed0:	3354      	adds	r3, #84	@ 0x54
 8005ed2:	224c      	movs	r2, #76	@ 0x4c
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f001 fda6 	bl	8007a28 <memset>
 8005edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ede:	4a0d      	ldr	r2, [pc, #52]	@ (8005f14 <prvInitialiseNewTask+0x144>)
 8005ee0:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8005f18 <prvInitialiseNewTask+0x148>)
 8005ee6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eea:	4a0c      	ldr	r2, [pc, #48]	@ (8005f1c <prvInitialiseNewTask+0x14c>)
 8005eec:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	68f9      	ldr	r1, [r7, #12]
 8005ef2:	69b8      	ldr	r0, [r7, #24]
 8005ef4:	f001 f95a 	bl	80071ac <pxPortInitialiseStack>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f0a:	bf00      	nop
 8005f0c:	3720      	adds	r7, #32
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20001b9c 	.word	0x20001b9c
 8005f18:	20001c04 	.word	0x20001c04
 8005f1c:	20001c6c 	.word	0x20001c6c

08005f20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f28:	f001 fa6e 	bl	8007408 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8005fe4 <prvAddNewTaskToReadyList+0xc4>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3301      	adds	r3, #1
 8005f32:	4a2c      	ldr	r2, [pc, #176]	@ (8005fe4 <prvAddNewTaskToReadyList+0xc4>)
 8005f34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f36:	4b2c      	ldr	r3, [pc, #176]	@ (8005fe8 <prvAddNewTaskToReadyList+0xc8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d109      	bne.n	8005f52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f3e:	4a2a      	ldr	r2, [pc, #168]	@ (8005fe8 <prvAddNewTaskToReadyList+0xc8>)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f44:	4b27      	ldr	r3, [pc, #156]	@ (8005fe4 <prvAddNewTaskToReadyList+0xc4>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d110      	bne.n	8005f6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f4c:	f000 fc2e 	bl	80067ac <prvInitialiseTaskLists>
 8005f50:	e00d      	b.n	8005f6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f52:	4b26      	ldr	r3, [pc, #152]	@ (8005fec <prvAddNewTaskToReadyList+0xcc>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d109      	bne.n	8005f6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f5a:	4b23      	ldr	r3, [pc, #140]	@ (8005fe8 <prvAddNewTaskToReadyList+0xc8>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d802      	bhi.n	8005f6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f68:	4a1f      	ldr	r2, [pc, #124]	@ (8005fe8 <prvAddNewTaskToReadyList+0xc8>)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f6e:	4b20      	ldr	r3, [pc, #128]	@ (8005ff0 <prvAddNewTaskToReadyList+0xd0>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3301      	adds	r3, #1
 8005f74:	4a1e      	ldr	r2, [pc, #120]	@ (8005ff0 <prvAddNewTaskToReadyList+0xd0>)
 8005f76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f78:	4b1d      	ldr	r3, [pc, #116]	@ (8005ff0 <prvAddNewTaskToReadyList+0xd0>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f84:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff4 <prvAddNewTaskToReadyList+0xd4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d903      	bls.n	8005f94 <prvAddNewTaskToReadyList+0x74>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f90:	4a18      	ldr	r2, [pc, #96]	@ (8005ff4 <prvAddNewTaskToReadyList+0xd4>)
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f98:	4613      	mov	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4a15      	ldr	r2, [pc, #84]	@ (8005ff8 <prvAddNewTaskToReadyList+0xd8>)
 8005fa2:	441a      	add	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	4619      	mov	r1, r3
 8005faa:	4610      	mov	r0, r2
 8005fac:	f7ff f8e9 	bl	8005182 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fb0:	f001 fa5c 	bl	800746c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8005fec <prvAddNewTaskToReadyList+0xcc>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00e      	beq.n	8005fda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe8 <prvAddNewTaskToReadyList+0xc8>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d207      	bcs.n	8005fda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005fca:	4b0c      	ldr	r3, [pc, #48]	@ (8005ffc <prvAddNewTaskToReadyList+0xdc>)
 8005fcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fda:	bf00      	nop
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000e64 	.word	0x20000e64
 8005fe8:	20000990 	.word	0x20000990
 8005fec:	20000e70 	.word	0x20000e70
 8005ff0:	20000e80 	.word	0x20000e80
 8005ff4:	20000e6c 	.word	0x20000e6c
 8005ff8:	20000994 	.word	0x20000994
 8005ffc:	e000ed04 	.word	0xe000ed04

08006000 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006008:	2300      	movs	r3, #0
 800600a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d018      	beq.n	8006044 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006012:	4b14      	ldr	r3, [pc, #80]	@ (8006064 <vTaskDelay+0x64>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00b      	beq.n	8006032 <vTaskDelay+0x32>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	60bb      	str	r3, [r7, #8]
}
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	e7fd      	b.n	800602e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006032:	f000 f88b 	bl	800614c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006036:	2100      	movs	r1, #0
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fd09 	bl	8006a50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800603e:	f000 f893 	bl	8006168 <xTaskResumeAll>
 8006042:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d107      	bne.n	800605a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800604a:	4b07      	ldr	r3, [pc, #28]	@ (8006068 <vTaskDelay+0x68>)
 800604c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20000e8c 	.word	0x20000e8c
 8006068:	e000ed04 	.word	0xe000ed04

0800606c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08a      	sub	sp, #40	@ 0x28
 8006070:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006072:	2300      	movs	r3, #0
 8006074:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006076:	2300      	movs	r3, #0
 8006078:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800607a:	463a      	mov	r2, r7
 800607c:	1d39      	adds	r1, r7, #4
 800607e:	f107 0308 	add.w	r3, r7, #8
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff f81c 	bl	80050c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006088:	6839      	ldr	r1, [r7, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	9202      	str	r2, [sp, #8]
 8006090:	9301      	str	r3, [sp, #4]
 8006092:	2300      	movs	r3, #0
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	2300      	movs	r3, #0
 8006098:	460a      	mov	r2, r1
 800609a:	4924      	ldr	r1, [pc, #144]	@ (800612c <vTaskStartScheduler+0xc0>)
 800609c:	4824      	ldr	r0, [pc, #144]	@ (8006130 <vTaskStartScheduler+0xc4>)
 800609e:	f7ff fdf1 	bl	8005c84 <xTaskCreateStatic>
 80060a2:	4603      	mov	r3, r0
 80060a4:	4a23      	ldr	r2, [pc, #140]	@ (8006134 <vTaskStartScheduler+0xc8>)
 80060a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060a8:	4b22      	ldr	r3, [pc, #136]	@ (8006134 <vTaskStartScheduler+0xc8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060b0:	2301      	movs	r3, #1
 80060b2:	617b      	str	r3, [r7, #20]
 80060b4:	e001      	b.n	80060ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d102      	bne.n	80060c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80060c0:	f000 fd1a 	bl	8006af8 <xTimerCreateTimerTask>
 80060c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d11b      	bne.n	8006104 <vTaskStartScheduler+0x98>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	613b      	str	r3, [r7, #16]
}
 80060de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060e0:	4b15      	ldr	r3, [pc, #84]	@ (8006138 <vTaskStartScheduler+0xcc>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3354      	adds	r3, #84	@ 0x54
 80060e6:	4a15      	ldr	r2, [pc, #84]	@ (800613c <vTaskStartScheduler+0xd0>)
 80060e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060ea:	4b15      	ldr	r3, [pc, #84]	@ (8006140 <vTaskStartScheduler+0xd4>)
 80060ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060f2:	4b14      	ldr	r3, [pc, #80]	@ (8006144 <vTaskStartScheduler+0xd8>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80060f8:	4b13      	ldr	r3, [pc, #76]	@ (8006148 <vTaskStartScheduler+0xdc>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80060fe:	f001 f8df 	bl	80072c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006102:	e00f      	b.n	8006124 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800610a:	d10b      	bne.n	8006124 <vTaskStartScheduler+0xb8>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	60fb      	str	r3, [r7, #12]
}
 800611e:	bf00      	nop
 8006120:	bf00      	nop
 8006122:	e7fd      	b.n	8006120 <vTaskStartScheduler+0xb4>
}
 8006124:	bf00      	nop
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	08007c3c 	.word	0x08007c3c
 8006130:	0800677d 	.word	0x0800677d
 8006134:	20000e88 	.word	0x20000e88
 8006138:	20000990 	.word	0x20000990
 800613c:	20000010 	.word	0x20000010
 8006140:	20000e84 	.word	0x20000e84
 8006144:	20000e70 	.word	0x20000e70
 8006148:	20000e68 	.word	0x20000e68

0800614c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800614c:	b480      	push	{r7}
 800614e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006150:	4b04      	ldr	r3, [pc, #16]	@ (8006164 <vTaskSuspendAll+0x18>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3301      	adds	r3, #1
 8006156:	4a03      	ldr	r2, [pc, #12]	@ (8006164 <vTaskSuspendAll+0x18>)
 8006158:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800615a:	bf00      	nop
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	20000e8c 	.word	0x20000e8c

08006168 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006172:	2300      	movs	r3, #0
 8006174:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006176:	4b42      	ldr	r3, [pc, #264]	@ (8006280 <xTaskResumeAll+0x118>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10b      	bne.n	8006196 <xTaskResumeAll+0x2e>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	603b      	str	r3, [r7, #0]
}
 8006190:	bf00      	nop
 8006192:	bf00      	nop
 8006194:	e7fd      	b.n	8006192 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006196:	f001 f937 	bl	8007408 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800619a:	4b39      	ldr	r3, [pc, #228]	@ (8006280 <xTaskResumeAll+0x118>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3b01      	subs	r3, #1
 80061a0:	4a37      	ldr	r2, [pc, #220]	@ (8006280 <xTaskResumeAll+0x118>)
 80061a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061a4:	4b36      	ldr	r3, [pc, #216]	@ (8006280 <xTaskResumeAll+0x118>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d162      	bne.n	8006272 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061ac:	4b35      	ldr	r3, [pc, #212]	@ (8006284 <xTaskResumeAll+0x11c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d05e      	beq.n	8006272 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061b4:	e02f      	b.n	8006216 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061b6:	4b34      	ldr	r3, [pc, #208]	@ (8006288 <xTaskResumeAll+0x120>)
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3318      	adds	r3, #24
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7ff f83a 	bl	800523c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3304      	adds	r3, #4
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7ff f835 	bl	800523c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d6:	4b2d      	ldr	r3, [pc, #180]	@ (800628c <xTaskResumeAll+0x124>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d903      	bls.n	80061e6 <xTaskResumeAll+0x7e>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e2:	4a2a      	ldr	r2, [pc, #168]	@ (800628c <xTaskResumeAll+0x124>)
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ea:	4613      	mov	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4a27      	ldr	r2, [pc, #156]	@ (8006290 <xTaskResumeAll+0x128>)
 80061f4:	441a      	add	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3304      	adds	r3, #4
 80061fa:	4619      	mov	r1, r3
 80061fc:	4610      	mov	r0, r2
 80061fe:	f7fe ffc0 	bl	8005182 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006206:	4b23      	ldr	r3, [pc, #140]	@ (8006294 <xTaskResumeAll+0x12c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620c:	429a      	cmp	r2, r3
 800620e:	d302      	bcc.n	8006216 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006210:	4b21      	ldr	r3, [pc, #132]	@ (8006298 <xTaskResumeAll+0x130>)
 8006212:	2201      	movs	r2, #1
 8006214:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006216:	4b1c      	ldr	r3, [pc, #112]	@ (8006288 <xTaskResumeAll+0x120>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1cb      	bne.n	80061b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006224:	f000 fb66 	bl	80068f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006228:	4b1c      	ldr	r3, [pc, #112]	@ (800629c <xTaskResumeAll+0x134>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d010      	beq.n	8006256 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006234:	f000 f846 	bl	80062c4 <xTaskIncrementTick>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800623e:	4b16      	ldr	r3, [pc, #88]	@ (8006298 <xTaskResumeAll+0x130>)
 8006240:	2201      	movs	r2, #1
 8006242:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3b01      	subs	r3, #1
 8006248:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1f1      	bne.n	8006234 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006250:	4b12      	ldr	r3, [pc, #72]	@ (800629c <xTaskResumeAll+0x134>)
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006256:	4b10      	ldr	r3, [pc, #64]	@ (8006298 <xTaskResumeAll+0x130>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d009      	beq.n	8006272 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800625e:	2301      	movs	r3, #1
 8006260:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006262:	4b0f      	ldr	r3, [pc, #60]	@ (80062a0 <xTaskResumeAll+0x138>)
 8006264:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006272:	f001 f8fb 	bl	800746c <vPortExitCritical>

	return xAlreadyYielded;
 8006276:	68bb      	ldr	r3, [r7, #8]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	20000e8c 	.word	0x20000e8c
 8006284:	20000e64 	.word	0x20000e64
 8006288:	20000e24 	.word	0x20000e24
 800628c:	20000e6c 	.word	0x20000e6c
 8006290:	20000994 	.word	0x20000994
 8006294:	20000990 	.word	0x20000990
 8006298:	20000e78 	.word	0x20000e78
 800629c:	20000e74 	.word	0x20000e74
 80062a0:	e000ed04 	.word	0xe000ed04

080062a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80062aa:	4b05      	ldr	r3, [pc, #20]	@ (80062c0 <xTaskGetTickCount+0x1c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80062b0:	687b      	ldr	r3, [r7, #4]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	20000e68 	.word	0x20000e68

080062c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062ca:	2300      	movs	r3, #0
 80062cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062ce:	4b4f      	ldr	r3, [pc, #316]	@ (800640c <xTaskIncrementTick+0x148>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f040 8090 	bne.w	80063f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062d8:	4b4d      	ldr	r3, [pc, #308]	@ (8006410 <xTaskIncrementTick+0x14c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3301      	adds	r3, #1
 80062de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062e0:	4a4b      	ldr	r2, [pc, #300]	@ (8006410 <xTaskIncrementTick+0x14c>)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d121      	bne.n	8006330 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80062ec:	4b49      	ldr	r3, [pc, #292]	@ (8006414 <xTaskIncrementTick+0x150>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00b      	beq.n	800630e <xTaskIncrementTick+0x4a>
	__asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	603b      	str	r3, [r7, #0]
}
 8006308:	bf00      	nop
 800630a:	bf00      	nop
 800630c:	e7fd      	b.n	800630a <xTaskIncrementTick+0x46>
 800630e:	4b41      	ldr	r3, [pc, #260]	@ (8006414 <xTaskIncrementTick+0x150>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	4b40      	ldr	r3, [pc, #256]	@ (8006418 <xTaskIncrementTick+0x154>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a3e      	ldr	r2, [pc, #248]	@ (8006414 <xTaskIncrementTick+0x150>)
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	4a3e      	ldr	r2, [pc, #248]	@ (8006418 <xTaskIncrementTick+0x154>)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	4b3e      	ldr	r3, [pc, #248]	@ (800641c <xTaskIncrementTick+0x158>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3301      	adds	r3, #1
 8006328:	4a3c      	ldr	r2, [pc, #240]	@ (800641c <xTaskIncrementTick+0x158>)
 800632a:	6013      	str	r3, [r2, #0]
 800632c:	f000 fae2 	bl	80068f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006330:	4b3b      	ldr	r3, [pc, #236]	@ (8006420 <xTaskIncrementTick+0x15c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	429a      	cmp	r2, r3
 8006338:	d349      	bcc.n	80063ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800633a:	4b36      	ldr	r3, [pc, #216]	@ (8006414 <xTaskIncrementTick+0x150>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d104      	bne.n	800634e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006344:	4b36      	ldr	r3, [pc, #216]	@ (8006420 <xTaskIncrementTick+0x15c>)
 8006346:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800634a:	601a      	str	r2, [r3, #0]
					break;
 800634c:	e03f      	b.n	80063ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800634e:	4b31      	ldr	r3, [pc, #196]	@ (8006414 <xTaskIncrementTick+0x150>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	429a      	cmp	r2, r3
 8006364:	d203      	bcs.n	800636e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006366:	4a2e      	ldr	r2, [pc, #184]	@ (8006420 <xTaskIncrementTick+0x15c>)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800636c:	e02f      	b.n	80063ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	3304      	adds	r3, #4
 8006372:	4618      	mov	r0, r3
 8006374:	f7fe ff62 	bl	800523c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637c:	2b00      	cmp	r3, #0
 800637e:	d004      	beq.n	800638a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	3318      	adds	r3, #24
 8006384:	4618      	mov	r0, r3
 8006386:	f7fe ff59 	bl	800523c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800638e:	4b25      	ldr	r3, [pc, #148]	@ (8006424 <xTaskIncrementTick+0x160>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	429a      	cmp	r2, r3
 8006394:	d903      	bls.n	800639e <xTaskIncrementTick+0xda>
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639a:	4a22      	ldr	r2, [pc, #136]	@ (8006424 <xTaskIncrementTick+0x160>)
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4a1f      	ldr	r2, [pc, #124]	@ (8006428 <xTaskIncrementTick+0x164>)
 80063ac:	441a      	add	r2, r3
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	3304      	adds	r3, #4
 80063b2:	4619      	mov	r1, r3
 80063b4:	4610      	mov	r0, r2
 80063b6:	f7fe fee4 	bl	8005182 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063be:	4b1b      	ldr	r3, [pc, #108]	@ (800642c <xTaskIncrementTick+0x168>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d3b8      	bcc.n	800633a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80063c8:	2301      	movs	r3, #1
 80063ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063cc:	e7b5      	b.n	800633a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063ce:	4b17      	ldr	r3, [pc, #92]	@ (800642c <xTaskIncrementTick+0x168>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d4:	4914      	ldr	r1, [pc, #80]	@ (8006428 <xTaskIncrementTick+0x164>)
 80063d6:	4613      	mov	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	440b      	add	r3, r1
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d901      	bls.n	80063ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80063e6:	2301      	movs	r3, #1
 80063e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80063ea:	4b11      	ldr	r3, [pc, #68]	@ (8006430 <xTaskIncrementTick+0x16c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d007      	beq.n	8006402 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80063f2:	2301      	movs	r3, #1
 80063f4:	617b      	str	r3, [r7, #20]
 80063f6:	e004      	b.n	8006402 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80063f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006434 <xTaskIncrementTick+0x170>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3301      	adds	r3, #1
 80063fe:	4a0d      	ldr	r2, [pc, #52]	@ (8006434 <xTaskIncrementTick+0x170>)
 8006400:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006402:	697b      	ldr	r3, [r7, #20]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3718      	adds	r7, #24
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	20000e8c 	.word	0x20000e8c
 8006410:	20000e68 	.word	0x20000e68
 8006414:	20000e1c 	.word	0x20000e1c
 8006418:	20000e20 	.word	0x20000e20
 800641c:	20000e7c 	.word	0x20000e7c
 8006420:	20000e84 	.word	0x20000e84
 8006424:	20000e6c 	.word	0x20000e6c
 8006428:	20000994 	.word	0x20000994
 800642c:	20000990 	.word	0x20000990
 8006430:	20000e78 	.word	0x20000e78
 8006434:	20000e74 	.word	0x20000e74

08006438 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800643e:	4b2b      	ldr	r3, [pc, #172]	@ (80064ec <vTaskSwitchContext+0xb4>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006446:	4b2a      	ldr	r3, [pc, #168]	@ (80064f0 <vTaskSwitchContext+0xb8>)
 8006448:	2201      	movs	r2, #1
 800644a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800644c:	e047      	b.n	80064de <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800644e:	4b28      	ldr	r3, [pc, #160]	@ (80064f0 <vTaskSwitchContext+0xb8>)
 8006450:	2200      	movs	r2, #0
 8006452:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006454:	4b27      	ldr	r3, [pc, #156]	@ (80064f4 <vTaskSwitchContext+0xbc>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	e011      	b.n	8006480 <vTaskSwitchContext+0x48>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10b      	bne.n	800647a <vTaskSwitchContext+0x42>
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	607b      	str	r3, [r7, #4]
}
 8006474:	bf00      	nop
 8006476:	bf00      	nop
 8006478:	e7fd      	b.n	8006476 <vTaskSwitchContext+0x3e>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	3b01      	subs	r3, #1
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	491d      	ldr	r1, [pc, #116]	@ (80064f8 <vTaskSwitchContext+0xc0>)
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	4613      	mov	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	440b      	add	r3, r1
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d0e3      	beq.n	800645c <vTaskSwitchContext+0x24>
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4613      	mov	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4a16      	ldr	r2, [pc, #88]	@ (80064f8 <vTaskSwitchContext+0xc0>)
 80064a0:	4413      	add	r3, r2
 80064a2:	60bb      	str	r3, [r7, #8]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	605a      	str	r2, [r3, #4]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	3308      	adds	r3, #8
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d104      	bne.n	80064c4 <vTaskSwitchContext+0x8c>
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	605a      	str	r2, [r3, #4]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	4a0c      	ldr	r2, [pc, #48]	@ (80064fc <vTaskSwitchContext+0xc4>)
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	4a09      	ldr	r2, [pc, #36]	@ (80064f4 <vTaskSwitchContext+0xbc>)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064d4:	4b09      	ldr	r3, [pc, #36]	@ (80064fc <vTaskSwitchContext+0xc4>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3354      	adds	r3, #84	@ 0x54
 80064da:	4a09      	ldr	r2, [pc, #36]	@ (8006500 <vTaskSwitchContext+0xc8>)
 80064dc:	6013      	str	r3, [r2, #0]
}
 80064de:	bf00      	nop
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	20000e8c 	.word	0x20000e8c
 80064f0:	20000e78 	.word	0x20000e78
 80064f4:	20000e6c 	.word	0x20000e6c
 80064f8:	20000994 	.word	0x20000994
 80064fc:	20000990 	.word	0x20000990
 8006500:	20000010 	.word	0x20000010

08006504 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10b      	bne.n	800652c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	60fb      	str	r3, [r7, #12]
}
 8006526:	bf00      	nop
 8006528:	bf00      	nop
 800652a:	e7fd      	b.n	8006528 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800652c:	4b07      	ldr	r3, [pc, #28]	@ (800654c <vTaskPlaceOnEventList+0x48>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3318      	adds	r3, #24
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7fe fe48 	bl	80051ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800653a:	2101      	movs	r1, #1
 800653c:	6838      	ldr	r0, [r7, #0]
 800653e:	f000 fa87 	bl	8006a50 <prvAddCurrentTaskToDelayedList>
}
 8006542:	bf00      	nop
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	20000990 	.word	0x20000990

08006550 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10b      	bne.n	800657a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	617b      	str	r3, [r7, #20]
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop
 8006578:	e7fd      	b.n	8006576 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800657a:	4b0a      	ldr	r3, [pc, #40]	@ (80065a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3318      	adds	r3, #24
 8006580:	4619      	mov	r1, r3
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f7fe fdfd 	bl	8005182 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800658e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006592:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006594:	6879      	ldr	r1, [r7, #4]
 8006596:	68b8      	ldr	r0, [r7, #8]
 8006598:	f000 fa5a 	bl	8006a50 <prvAddCurrentTaskToDelayedList>
	}
 800659c:	bf00      	nop
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20000990 	.word	0x20000990

080065a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10b      	bne.n	80065d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	60fb      	str	r3, [r7, #12]
}
 80065d0:	bf00      	nop
 80065d2:	bf00      	nop
 80065d4:	e7fd      	b.n	80065d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	3318      	adds	r3, #24
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fe fe2e 	bl	800523c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006658 <xTaskRemoveFromEventList+0xb0>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d11d      	bne.n	8006624 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	3304      	adds	r3, #4
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7fe fe25 	bl	800523c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065f6:	4b19      	ldr	r3, [pc, #100]	@ (800665c <xTaskRemoveFromEventList+0xb4>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d903      	bls.n	8006606 <xTaskRemoveFromEventList+0x5e>
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006602:	4a16      	ldr	r2, [pc, #88]	@ (800665c <xTaskRemoveFromEventList+0xb4>)
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800660a:	4613      	mov	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4a13      	ldr	r2, [pc, #76]	@ (8006660 <xTaskRemoveFromEventList+0xb8>)
 8006614:	441a      	add	r2, r3
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	3304      	adds	r3, #4
 800661a:	4619      	mov	r1, r3
 800661c:	4610      	mov	r0, r2
 800661e:	f7fe fdb0 	bl	8005182 <vListInsertEnd>
 8006622:	e005      	b.n	8006630 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	3318      	adds	r3, #24
 8006628:	4619      	mov	r1, r3
 800662a:	480e      	ldr	r0, [pc, #56]	@ (8006664 <xTaskRemoveFromEventList+0xbc>)
 800662c:	f7fe fda9 	bl	8005182 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006634:	4b0c      	ldr	r3, [pc, #48]	@ (8006668 <xTaskRemoveFromEventList+0xc0>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663a:	429a      	cmp	r2, r3
 800663c:	d905      	bls.n	800664a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800663e:	2301      	movs	r3, #1
 8006640:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006642:	4b0a      	ldr	r3, [pc, #40]	@ (800666c <xTaskRemoveFromEventList+0xc4>)
 8006644:	2201      	movs	r2, #1
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	e001      	b.n	800664e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800664a:	2300      	movs	r3, #0
 800664c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800664e:	697b      	ldr	r3, [r7, #20]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3718      	adds	r7, #24
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20000e8c 	.word	0x20000e8c
 800665c:	20000e6c 	.word	0x20000e6c
 8006660:	20000994 	.word	0x20000994
 8006664:	20000e24 	.word	0x20000e24
 8006668:	20000990 	.word	0x20000990
 800666c:	20000e78 	.word	0x20000e78

08006670 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006678:	4b06      	ldr	r3, [pc, #24]	@ (8006694 <vTaskInternalSetTimeOutState+0x24>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006680:	4b05      	ldr	r3, [pc, #20]	@ (8006698 <vTaskInternalSetTimeOutState+0x28>)
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	605a      	str	r2, [r3, #4]
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	20000e7c 	.word	0x20000e7c
 8006698:	20000e68 	.word	0x20000e68

0800669c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b088      	sub	sp, #32
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10b      	bne.n	80066c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	613b      	str	r3, [r7, #16]
}
 80066be:	bf00      	nop
 80066c0:	bf00      	nop
 80066c2:	e7fd      	b.n	80066c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10b      	bne.n	80066e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	60fb      	str	r3, [r7, #12]
}
 80066dc:	bf00      	nop
 80066de:	bf00      	nop
 80066e0:	e7fd      	b.n	80066de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80066e2:	f000 fe91 	bl	8007408 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80066e6:	4b1d      	ldr	r3, [pc, #116]	@ (800675c <xTaskCheckForTimeOut+0xc0>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	69ba      	ldr	r2, [r7, #24]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066fe:	d102      	bne.n	8006706 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006700:	2300      	movs	r3, #0
 8006702:	61fb      	str	r3, [r7, #28]
 8006704:	e023      	b.n	800674e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	4b15      	ldr	r3, [pc, #84]	@ (8006760 <xTaskCheckForTimeOut+0xc4>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d007      	beq.n	8006722 <xTaskCheckForTimeOut+0x86>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	429a      	cmp	r2, r3
 800671a:	d302      	bcc.n	8006722 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800671c:	2301      	movs	r3, #1
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	e015      	b.n	800674e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	429a      	cmp	r2, r3
 800672a:	d20b      	bcs.n	8006744 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	1ad2      	subs	r2, r2, r3
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff ff99 	bl	8006670 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800673e:	2300      	movs	r3, #0
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	e004      	b.n	800674e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2200      	movs	r2, #0
 8006748:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800674a:	2301      	movs	r3, #1
 800674c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800674e:	f000 fe8d 	bl	800746c <vPortExitCritical>

	return xReturn;
 8006752:	69fb      	ldr	r3, [r7, #28]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3720      	adds	r7, #32
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	20000e68 	.word	0x20000e68
 8006760:	20000e7c 	.word	0x20000e7c

08006764 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006768:	4b03      	ldr	r3, [pc, #12]	@ (8006778 <vTaskMissedYield+0x14>)
 800676a:	2201      	movs	r2, #1
 800676c:	601a      	str	r2, [r3, #0]
}
 800676e:	bf00      	nop
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	20000e78 	.word	0x20000e78

0800677c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006784:	f000 f852 	bl	800682c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006788:	4b06      	ldr	r3, [pc, #24]	@ (80067a4 <prvIdleTask+0x28>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d9f9      	bls.n	8006784 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006790:	4b05      	ldr	r3, [pc, #20]	@ (80067a8 <prvIdleTask+0x2c>)
 8006792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067a0:	e7f0      	b.n	8006784 <prvIdleTask+0x8>
 80067a2:	bf00      	nop
 80067a4:	20000994 	.word	0x20000994
 80067a8:	e000ed04 	.word	0xe000ed04

080067ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067b2:	2300      	movs	r3, #0
 80067b4:	607b      	str	r3, [r7, #4]
 80067b6:	e00c      	b.n	80067d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4a12      	ldr	r2, [pc, #72]	@ (800680c <prvInitialiseTaskLists+0x60>)
 80067c4:	4413      	add	r3, r2
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fe fcae 	bl	8005128 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3301      	adds	r3, #1
 80067d0:	607b      	str	r3, [r7, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b37      	cmp	r3, #55	@ 0x37
 80067d6:	d9ef      	bls.n	80067b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80067d8:	480d      	ldr	r0, [pc, #52]	@ (8006810 <prvInitialiseTaskLists+0x64>)
 80067da:	f7fe fca5 	bl	8005128 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80067de:	480d      	ldr	r0, [pc, #52]	@ (8006814 <prvInitialiseTaskLists+0x68>)
 80067e0:	f7fe fca2 	bl	8005128 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80067e4:	480c      	ldr	r0, [pc, #48]	@ (8006818 <prvInitialiseTaskLists+0x6c>)
 80067e6:	f7fe fc9f 	bl	8005128 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80067ea:	480c      	ldr	r0, [pc, #48]	@ (800681c <prvInitialiseTaskLists+0x70>)
 80067ec:	f7fe fc9c 	bl	8005128 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067f0:	480b      	ldr	r0, [pc, #44]	@ (8006820 <prvInitialiseTaskLists+0x74>)
 80067f2:	f7fe fc99 	bl	8005128 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006824 <prvInitialiseTaskLists+0x78>)
 80067f8:	4a05      	ldr	r2, [pc, #20]	@ (8006810 <prvInitialiseTaskLists+0x64>)
 80067fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006828 <prvInitialiseTaskLists+0x7c>)
 80067fe:	4a05      	ldr	r2, [pc, #20]	@ (8006814 <prvInitialiseTaskLists+0x68>)
 8006800:	601a      	str	r2, [r3, #0]
}
 8006802:	bf00      	nop
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20000994 	.word	0x20000994
 8006810:	20000df4 	.word	0x20000df4
 8006814:	20000e08 	.word	0x20000e08
 8006818:	20000e24 	.word	0x20000e24
 800681c:	20000e38 	.word	0x20000e38
 8006820:	20000e50 	.word	0x20000e50
 8006824:	20000e1c 	.word	0x20000e1c
 8006828:	20000e20 	.word	0x20000e20

0800682c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006832:	e019      	b.n	8006868 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006834:	f000 fde8 	bl	8007408 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006838:	4b10      	ldr	r3, [pc, #64]	@ (800687c <prvCheckTasksWaitingTermination+0x50>)
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3304      	adds	r3, #4
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe fcf9 	bl	800523c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800684a:	4b0d      	ldr	r3, [pc, #52]	@ (8006880 <prvCheckTasksWaitingTermination+0x54>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3b01      	subs	r3, #1
 8006850:	4a0b      	ldr	r2, [pc, #44]	@ (8006880 <prvCheckTasksWaitingTermination+0x54>)
 8006852:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006854:	4b0b      	ldr	r3, [pc, #44]	@ (8006884 <prvCheckTasksWaitingTermination+0x58>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3b01      	subs	r3, #1
 800685a:	4a0a      	ldr	r2, [pc, #40]	@ (8006884 <prvCheckTasksWaitingTermination+0x58>)
 800685c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800685e:	f000 fe05 	bl	800746c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f810 	bl	8006888 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006868:	4b06      	ldr	r3, [pc, #24]	@ (8006884 <prvCheckTasksWaitingTermination+0x58>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1e1      	bne.n	8006834 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006870:	bf00      	nop
 8006872:	bf00      	nop
 8006874:	3708      	adds	r7, #8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	20000e38 	.word	0x20000e38
 8006880:	20000e64 	.word	0x20000e64
 8006884:	20000e4c 	.word	0x20000e4c

08006888 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3354      	adds	r3, #84	@ 0x54
 8006894:	4618      	mov	r0, r3
 8006896:	f001 f8cf 	bl	8007a38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d108      	bne.n	80068b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 ff9d 	bl	80077e8 <vPortFree>
				vPortFree( pxTCB );
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 ff9a 	bl	80077e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068b4:	e019      	b.n	80068ea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d103      	bne.n	80068c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 ff91 	bl	80077e8 <vPortFree>
	}
 80068c6:	e010      	b.n	80068ea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d00b      	beq.n	80068ea <prvDeleteTCB+0x62>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	60fb      	str	r3, [r7, #12]
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop
 80068e8:	e7fd      	b.n	80068e6 <prvDeleteTCB+0x5e>
	}
 80068ea:	bf00      	nop
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068fa:	4b0c      	ldr	r3, [pc, #48]	@ (800692c <prvResetNextTaskUnblockTime+0x38>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d104      	bne.n	800690e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006904:	4b0a      	ldr	r3, [pc, #40]	@ (8006930 <prvResetNextTaskUnblockTime+0x3c>)
 8006906:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800690a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800690c:	e008      	b.n	8006920 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800690e:	4b07      	ldr	r3, [pc, #28]	@ (800692c <prvResetNextTaskUnblockTime+0x38>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	4a04      	ldr	r2, [pc, #16]	@ (8006930 <prvResetNextTaskUnblockTime+0x3c>)
 800691e:	6013      	str	r3, [r2, #0]
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	20000e1c 	.word	0x20000e1c
 8006930:	20000e84 	.word	0x20000e84

08006934 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800693a:	4b0b      	ldr	r3, [pc, #44]	@ (8006968 <xTaskGetSchedulerState+0x34>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d102      	bne.n	8006948 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006942:	2301      	movs	r3, #1
 8006944:	607b      	str	r3, [r7, #4]
 8006946:	e008      	b.n	800695a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006948:	4b08      	ldr	r3, [pc, #32]	@ (800696c <xTaskGetSchedulerState+0x38>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d102      	bne.n	8006956 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006950:	2302      	movs	r3, #2
 8006952:	607b      	str	r3, [r7, #4]
 8006954:	e001      	b.n	800695a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006956:	2300      	movs	r3, #0
 8006958:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800695a:	687b      	ldr	r3, [r7, #4]
	}
 800695c:	4618      	mov	r0, r3
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	20000e70 	.word	0x20000e70
 800696c:	20000e8c 	.word	0x20000e8c

08006970 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800697c:	2300      	movs	r3, #0
 800697e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d058      	beq.n	8006a38 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006986:	4b2f      	ldr	r3, [pc, #188]	@ (8006a44 <xTaskPriorityDisinherit+0xd4>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	429a      	cmp	r2, r3
 800698e:	d00b      	beq.n	80069a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	60fb      	str	r3, [r7, #12]
}
 80069a2:	bf00      	nop
 80069a4:	bf00      	nop
 80069a6:	e7fd      	b.n	80069a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10b      	bne.n	80069c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	60bb      	str	r3, [r7, #8]
}
 80069c2:	bf00      	nop
 80069c4:	bf00      	nop
 80069c6:	e7fd      	b.n	80069c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069cc:	1e5a      	subs	r2, r3, #1
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069da:	429a      	cmp	r2, r3
 80069dc:	d02c      	beq.n	8006a38 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d128      	bne.n	8006a38 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	3304      	adds	r3, #4
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fe fc26 	bl	800523c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a08:	4b0f      	ldr	r3, [pc, #60]	@ (8006a48 <xTaskPriorityDisinherit+0xd8>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d903      	bls.n	8006a18 <xTaskPriorityDisinherit+0xa8>
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a14:	4a0c      	ldr	r2, [pc, #48]	@ (8006a48 <xTaskPriorityDisinherit+0xd8>)
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4a09      	ldr	r2, [pc, #36]	@ (8006a4c <xTaskPriorityDisinherit+0xdc>)
 8006a26:	441a      	add	r2, r3
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	4610      	mov	r0, r2
 8006a30:	f7fe fba7 	bl	8005182 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a34:	2301      	movs	r3, #1
 8006a36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a38:	697b      	ldr	r3, [r7, #20]
	}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3718      	adds	r7, #24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20000990 	.word	0x20000990
 8006a48:	20000e6c 	.word	0x20000e6c
 8006a4c:	20000994 	.word	0x20000994

08006a50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a5a:	4b21      	ldr	r3, [pc, #132]	@ (8006ae0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a60:	4b20      	ldr	r3, [pc, #128]	@ (8006ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3304      	adds	r3, #4
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fe fbe8 	bl	800523c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a72:	d10a      	bne.n	8006a8a <prvAddCurrentTaskToDelayedList+0x3a>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d007      	beq.n	8006a8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3304      	adds	r3, #4
 8006a80:	4619      	mov	r1, r3
 8006a82:	4819      	ldr	r0, [pc, #100]	@ (8006ae8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006a84:	f7fe fb7d 	bl	8005182 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a88:	e026      	b.n	8006ad8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4413      	add	r3, r2
 8006a90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a92:	4b14      	ldr	r3, [pc, #80]	@ (8006ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d209      	bcs.n	8006ab6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aa2:	4b12      	ldr	r3, [pc, #72]	@ (8006aec <prvAddCurrentTaskToDelayedList+0x9c>)
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8006ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	4619      	mov	r1, r3
 8006aae:	4610      	mov	r0, r2
 8006ab0:	f7fe fb8b 	bl	80051ca <vListInsert>
}
 8006ab4:	e010      	b.n	8006ad8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8006af0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3304      	adds	r3, #4
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	f7fe fb81 	bl	80051ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8006af4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d202      	bcs.n	8006ad8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006ad2:	4a08      	ldr	r2, [pc, #32]	@ (8006af4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	6013      	str	r3, [r2, #0]
}
 8006ad8:	bf00      	nop
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	20000e68 	.word	0x20000e68
 8006ae4:	20000990 	.word	0x20000990
 8006ae8:	20000e50 	.word	0x20000e50
 8006aec:	20000e20 	.word	0x20000e20
 8006af0:	20000e1c 	.word	0x20000e1c
 8006af4:	20000e84 	.word	0x20000e84

08006af8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08a      	sub	sp, #40	@ 0x28
 8006afc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b02:	f000 fb13 	bl	800712c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b06:	4b1d      	ldr	r3, [pc, #116]	@ (8006b7c <xTimerCreateTimerTask+0x84>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d021      	beq.n	8006b52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b16:	1d3a      	adds	r2, r7, #4
 8006b18:	f107 0108 	add.w	r1, r7, #8
 8006b1c:	f107 030c 	add.w	r3, r7, #12
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fe fae7 	bl	80050f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	9202      	str	r2, [sp, #8]
 8006b2e:	9301      	str	r3, [sp, #4]
 8006b30:	2302      	movs	r3, #2
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	2300      	movs	r3, #0
 8006b36:	460a      	mov	r2, r1
 8006b38:	4911      	ldr	r1, [pc, #68]	@ (8006b80 <xTimerCreateTimerTask+0x88>)
 8006b3a:	4812      	ldr	r0, [pc, #72]	@ (8006b84 <xTimerCreateTimerTask+0x8c>)
 8006b3c:	f7ff f8a2 	bl	8005c84 <xTaskCreateStatic>
 8006b40:	4603      	mov	r3, r0
 8006b42:	4a11      	ldr	r2, [pc, #68]	@ (8006b88 <xTimerCreateTimerTask+0x90>)
 8006b44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b46:	4b10      	ldr	r3, [pc, #64]	@ (8006b88 <xTimerCreateTimerTask+0x90>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10b      	bne.n	8006b70 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	613b      	str	r3, [r7, #16]
}
 8006b6a:	bf00      	nop
 8006b6c:	bf00      	nop
 8006b6e:	e7fd      	b.n	8006b6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b70:	697b      	ldr	r3, [r7, #20]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20000ec0 	.word	0x20000ec0
 8006b80:	08007c44 	.word	0x08007c44
 8006b84:	08006cc5 	.word	0x08006cc5
 8006b88:	20000ec4 	.word	0x20000ec4

08006b8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08a      	sub	sp, #40	@ 0x28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10b      	bne.n	8006bbc <xTimerGenericCommand+0x30>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	623b      	str	r3, [r7, #32]
}
 8006bb6:	bf00      	nop
 8006bb8:	bf00      	nop
 8006bba:	e7fd      	b.n	8006bb8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006bbc:	4b19      	ldr	r3, [pc, #100]	@ (8006c24 <xTimerGenericCommand+0x98>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d02a      	beq.n	8006c1a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2b05      	cmp	r3, #5
 8006bd4:	dc18      	bgt.n	8006c08 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006bd6:	f7ff fead 	bl	8006934 <xTaskGetSchedulerState>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d109      	bne.n	8006bf4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006be0:	4b10      	ldr	r3, [pc, #64]	@ (8006c24 <xTimerGenericCommand+0x98>)
 8006be2:	6818      	ldr	r0, [r3, #0]
 8006be4:	f107 0110 	add.w	r1, r7, #16
 8006be8:	2300      	movs	r3, #0
 8006bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bec:	f7fe fc5a 	bl	80054a4 <xQueueGenericSend>
 8006bf0:	6278      	str	r0, [r7, #36]	@ 0x24
 8006bf2:	e012      	b.n	8006c1a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8006c24 <xTimerGenericCommand+0x98>)
 8006bf6:	6818      	ldr	r0, [r3, #0]
 8006bf8:	f107 0110 	add.w	r1, r7, #16
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f7fe fc50 	bl	80054a4 <xQueueGenericSend>
 8006c04:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c06:	e008      	b.n	8006c1a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c08:	4b06      	ldr	r3, [pc, #24]	@ (8006c24 <xTimerGenericCommand+0x98>)
 8006c0a:	6818      	ldr	r0, [r3, #0]
 8006c0c:	f107 0110 	add.w	r1, r7, #16
 8006c10:	2300      	movs	r3, #0
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	f7fe fd48 	bl	80056a8 <xQueueGenericSendFromISR>
 8006c18:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3728      	adds	r7, #40	@ 0x28
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	20000ec0 	.word	0x20000ec0

08006c28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b088      	sub	sp, #32
 8006c2c:	af02      	add	r7, sp, #8
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c32:	4b23      	ldr	r3, [pc, #140]	@ (8006cc0 <prvProcessExpiredTimer+0x98>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fe fafb 	bl	800523c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d023      	beq.n	8006c9c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	699a      	ldr	r2, [r3, #24]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	18d1      	adds	r1, r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	6978      	ldr	r0, [r7, #20]
 8006c62:	f000 f8d5 	bl	8006e10 <prvInsertTimerInActiveList>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d020      	beq.n	8006cae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	2300      	movs	r3, #0
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	2100      	movs	r1, #0
 8006c76:	6978      	ldr	r0, [r7, #20]
 8006c78:	f7ff ff88 	bl	8006b8c <xTimerGenericCommand>
 8006c7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d114      	bne.n	8006cae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	60fb      	str	r3, [r7, #12]
}
 8006c96:	bf00      	nop
 8006c98:	bf00      	nop
 8006c9a:	e7fd      	b.n	8006c98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ca2:	f023 0301 	bic.w	r3, r3, #1
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	6978      	ldr	r0, [r7, #20]
 8006cb4:	4798      	blx	r3
}
 8006cb6:	bf00      	nop
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20000eb8 	.word	0x20000eb8

08006cc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ccc:	f107 0308 	add.w	r3, r7, #8
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 f859 	bl	8006d88 <prvGetNextExpireTime>
 8006cd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f000 f805 	bl	8006cec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ce2:	f000 f8d7 	bl	8006e94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ce6:	bf00      	nop
 8006ce8:	e7f0      	b.n	8006ccc <prvTimerTask+0x8>
	...

08006cec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006cf6:	f7ff fa29 	bl	800614c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cfa:	f107 0308 	add.w	r3, r7, #8
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 f866 	bl	8006dd0 <prvSampleTimeNow>
 8006d04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d130      	bne.n	8006d6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10a      	bne.n	8006d28 <prvProcessTimerOrBlockTask+0x3c>
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d806      	bhi.n	8006d28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d1a:	f7ff fa25 	bl	8006168 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d1e:	68f9      	ldr	r1, [r7, #12]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7ff ff81 	bl	8006c28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d26:	e024      	b.n	8006d72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d008      	beq.n	8006d40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d2e:	4b13      	ldr	r3, [pc, #76]	@ (8006d7c <prvProcessTimerOrBlockTask+0x90>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <prvProcessTimerOrBlockTask+0x50>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e000      	b.n	8006d3e <prvProcessTimerOrBlockTask+0x52>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d40:	4b0f      	ldr	r3, [pc, #60]	@ (8006d80 <prvProcessTimerOrBlockTask+0x94>)
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	f7fe ff65 	bl	8005c1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d52:	f7ff fa09 	bl	8006168 <xTaskResumeAll>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10a      	bne.n	8006d72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d5c:	4b09      	ldr	r3, [pc, #36]	@ (8006d84 <prvProcessTimerOrBlockTask+0x98>)
 8006d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	f3bf 8f6f 	isb	sy
}
 8006d6c:	e001      	b.n	8006d72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d6e:	f7ff f9fb 	bl	8006168 <xTaskResumeAll>
}
 8006d72:	bf00      	nop
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20000ebc 	.word	0x20000ebc
 8006d80:	20000ec0 	.word	0x20000ec0
 8006d84:	e000ed04 	.word	0xe000ed04

08006d88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d90:	4b0e      	ldr	r3, [pc, #56]	@ (8006dcc <prvGetNextExpireTime+0x44>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <prvGetNextExpireTime+0x16>
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	e000      	b.n	8006da0 <prvGetNextExpireTime+0x18>
 8006d9e:	2200      	movs	r2, #0
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d105      	bne.n	8006db8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dac:	4b07      	ldr	r3, [pc, #28]	@ (8006dcc <prvGetNextExpireTime+0x44>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	e001      	b.n	8006dbc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	20000eb8 	.word	0x20000eb8

08006dd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006dd8:	f7ff fa64 	bl	80062a4 <xTaskGetTickCount>
 8006ddc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006dde:	4b0b      	ldr	r3, [pc, #44]	@ (8006e0c <prvSampleTimeNow+0x3c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d205      	bcs.n	8006df4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006de8:	f000 f93a 	bl	8007060 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	e002      	b.n	8006dfa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006dfa:	4a04      	ldr	r2, [pc, #16]	@ (8006e0c <prvSampleTimeNow+0x3c>)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e00:	68fb      	ldr	r3, [r7, #12]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20000ec8 	.word	0x20000ec8

08006e10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d812      	bhi.n	8006e5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	1ad2      	subs	r2, r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d302      	bcc.n	8006e4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e44:	2301      	movs	r3, #1
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	e01b      	b.n	8006e82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e4a:	4b10      	ldr	r3, [pc, #64]	@ (8006e8c <prvInsertTimerInActiveList+0x7c>)
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3304      	adds	r3, #4
 8006e52:	4619      	mov	r1, r3
 8006e54:	4610      	mov	r0, r2
 8006e56:	f7fe f9b8 	bl	80051ca <vListInsert>
 8006e5a:	e012      	b.n	8006e82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d206      	bcs.n	8006e72 <prvInsertTimerInActiveList+0x62>
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d302      	bcc.n	8006e72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	617b      	str	r3, [r7, #20]
 8006e70:	e007      	b.n	8006e82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e72:	4b07      	ldr	r3, [pc, #28]	@ (8006e90 <prvInsertTimerInActiveList+0x80>)
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3304      	adds	r3, #4
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	f7fe f9a4 	bl	80051ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e82:	697b      	ldr	r3, [r7, #20]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	20000ebc 	.word	0x20000ebc
 8006e90:	20000eb8 	.word	0x20000eb8

08006e94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08e      	sub	sp, #56	@ 0x38
 8006e98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e9a:	e0ce      	b.n	800703a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	da19      	bge.n	8006ed6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ea2:	1d3b      	adds	r3, r7, #4
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10b      	bne.n	8006ec6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	61fb      	str	r3, [r7, #28]
}
 8006ec0:	bf00      	nop
 8006ec2:	bf00      	nop
 8006ec4:	e7fd      	b.n	8006ec2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ecc:	6850      	ldr	r0, [r2, #4]
 8006ece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ed0:	6892      	ldr	r2, [r2, #8]
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f2c0 80ae 	blt.w	800703a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d004      	beq.n	8006ef4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eec:	3304      	adds	r3, #4
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe f9a4 	bl	800523c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ef4:	463b      	mov	r3, r7
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7ff ff6a 	bl	8006dd0 <prvSampleTimeNow>
 8006efc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b09      	cmp	r3, #9
 8006f02:	f200 8097 	bhi.w	8007034 <prvProcessReceivedCommands+0x1a0>
 8006f06:	a201      	add	r2, pc, #4	@ (adr r2, 8006f0c <prvProcessReceivedCommands+0x78>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f35 	.word	0x08006f35
 8006f10:	08006f35 	.word	0x08006f35
 8006f14:	08006f35 	.word	0x08006f35
 8006f18:	08006fab 	.word	0x08006fab
 8006f1c:	08006fbf 	.word	0x08006fbf
 8006f20:	0800700b 	.word	0x0800700b
 8006f24:	08006f35 	.word	0x08006f35
 8006f28:	08006f35 	.word	0x08006f35
 8006f2c:	08006fab 	.word	0x08006fab
 8006f30:	08006fbf 	.word	0x08006fbf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f3a:	f043 0301 	orr.w	r3, r3, #1
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	18d1      	adds	r1, r2, r3
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f54:	f7ff ff5c 	bl	8006e10 <prvInsertTimerInActiveList>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d06c      	beq.n	8007038 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f6c:	f003 0304 	and.w	r3, r3, #4
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d061      	beq.n	8007038 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	441a      	add	r2, r3
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	2300      	movs	r3, #0
 8006f82:	2100      	movs	r1, #0
 8006f84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f86:	f7ff fe01 	bl	8006b8c <xTimerGenericCommand>
 8006f8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d152      	bne.n	8007038 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	61bb      	str	r3, [r7, #24]
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop
 8006fa8:	e7fd      	b.n	8006fa6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fb0:	f023 0301 	bic.w	r3, r3, #1
 8006fb4:	b2da      	uxtb	r2, r3
 8006fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006fbc:	e03d      	b.n	800703a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fc4:	f043 0301 	orr.w	r3, r3, #1
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fcc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10b      	bne.n	8006ff6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	617b      	str	r3, [r7, #20]
}
 8006ff0:	bf00      	nop
 8006ff2:	bf00      	nop
 8006ff4:	e7fd      	b.n	8006ff2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff8:	699a      	ldr	r2, [r3, #24]
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffc:	18d1      	adds	r1, r2, r3
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007002:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007004:	f7ff ff04 	bl	8006e10 <prvInsertTimerInActiveList>
					break;
 8007008:	e017      	b.n	800703a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800700a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d103      	bne.n	8007020 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007018:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800701a:	f000 fbe5 	bl	80077e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800701e:	e00c      	b.n	800703a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007022:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007026:	f023 0301 	bic.w	r3, r3, #1
 800702a:	b2da      	uxtb	r2, r3
 800702c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007032:	e002      	b.n	800703a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007034:	bf00      	nop
 8007036:	e000      	b.n	800703a <prvProcessReceivedCommands+0x1a6>
					break;
 8007038:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800703a:	4b08      	ldr	r3, [pc, #32]	@ (800705c <prvProcessReceivedCommands+0x1c8>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	1d39      	adds	r1, r7, #4
 8007040:	2200      	movs	r2, #0
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe fbce 	bl	80057e4 <xQueueReceive>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	f47f af26 	bne.w	8006e9c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007050:	bf00      	nop
 8007052:	bf00      	nop
 8007054:	3730      	adds	r7, #48	@ 0x30
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	20000ec0 	.word	0x20000ec0

08007060 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007066:	e049      	b.n	80070fc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007068:	4b2e      	ldr	r3, [pc, #184]	@ (8007124 <prvSwitchTimerLists+0xc4>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007072:	4b2c      	ldr	r3, [pc, #176]	@ (8007124 <prvSwitchTimerLists+0xc4>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	3304      	adds	r3, #4
 8007080:	4618      	mov	r0, r3
 8007082:	f7fe f8db 	bl	800523c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b00      	cmp	r3, #0
 800709a:	d02f      	beq.n	80070fc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	4413      	add	r3, r2
 80070a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d90e      	bls.n	80070cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007124 <prvSwitchTimerLists+0xc4>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3304      	adds	r3, #4
 80070c2:	4619      	mov	r1, r3
 80070c4:	4610      	mov	r0, r2
 80070c6:	f7fe f880 	bl	80051ca <vListInsert>
 80070ca:	e017      	b.n	80070fc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070cc:	2300      	movs	r3, #0
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	2300      	movs	r3, #0
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	2100      	movs	r1, #0
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f7ff fd58 	bl	8006b8c <xTimerGenericCommand>
 80070dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10b      	bne.n	80070fc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	603b      	str	r3, [r7, #0]
}
 80070f6:	bf00      	nop
 80070f8:	bf00      	nop
 80070fa:	e7fd      	b.n	80070f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070fc:	4b09      	ldr	r3, [pc, #36]	@ (8007124 <prvSwitchTimerLists+0xc4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1b0      	bne.n	8007068 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007106:	4b07      	ldr	r3, [pc, #28]	@ (8007124 <prvSwitchTimerLists+0xc4>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800710c:	4b06      	ldr	r3, [pc, #24]	@ (8007128 <prvSwitchTimerLists+0xc8>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a04      	ldr	r2, [pc, #16]	@ (8007124 <prvSwitchTimerLists+0xc4>)
 8007112:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007114:	4a04      	ldr	r2, [pc, #16]	@ (8007128 <prvSwitchTimerLists+0xc8>)
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	6013      	str	r3, [r2, #0]
}
 800711a:	bf00      	nop
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	20000eb8 	.word	0x20000eb8
 8007128:	20000ebc 	.word	0x20000ebc

0800712c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007132:	f000 f969 	bl	8007408 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007136:	4b15      	ldr	r3, [pc, #84]	@ (800718c <prvCheckForValidListAndQueue+0x60>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d120      	bne.n	8007180 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800713e:	4814      	ldr	r0, [pc, #80]	@ (8007190 <prvCheckForValidListAndQueue+0x64>)
 8007140:	f7fd fff2 	bl	8005128 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007144:	4813      	ldr	r0, [pc, #76]	@ (8007194 <prvCheckForValidListAndQueue+0x68>)
 8007146:	f7fd ffef 	bl	8005128 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800714a:	4b13      	ldr	r3, [pc, #76]	@ (8007198 <prvCheckForValidListAndQueue+0x6c>)
 800714c:	4a10      	ldr	r2, [pc, #64]	@ (8007190 <prvCheckForValidListAndQueue+0x64>)
 800714e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007150:	4b12      	ldr	r3, [pc, #72]	@ (800719c <prvCheckForValidListAndQueue+0x70>)
 8007152:	4a10      	ldr	r2, [pc, #64]	@ (8007194 <prvCheckForValidListAndQueue+0x68>)
 8007154:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007156:	2300      	movs	r3, #0
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	4b11      	ldr	r3, [pc, #68]	@ (80071a0 <prvCheckForValidListAndQueue+0x74>)
 800715c:	4a11      	ldr	r2, [pc, #68]	@ (80071a4 <prvCheckForValidListAndQueue+0x78>)
 800715e:	2110      	movs	r1, #16
 8007160:	200a      	movs	r0, #10
 8007162:	f7fe f8ff 	bl	8005364 <xQueueGenericCreateStatic>
 8007166:	4603      	mov	r3, r0
 8007168:	4a08      	ldr	r2, [pc, #32]	@ (800718c <prvCheckForValidListAndQueue+0x60>)
 800716a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800716c:	4b07      	ldr	r3, [pc, #28]	@ (800718c <prvCheckForValidListAndQueue+0x60>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007174:	4b05      	ldr	r3, [pc, #20]	@ (800718c <prvCheckForValidListAndQueue+0x60>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	490b      	ldr	r1, [pc, #44]	@ (80071a8 <prvCheckForValidListAndQueue+0x7c>)
 800717a:	4618      	mov	r0, r3
 800717c:	f7fe fd24 	bl	8005bc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007180:	f000 f974 	bl	800746c <vPortExitCritical>
}
 8007184:	bf00      	nop
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000ec0 	.word	0x20000ec0
 8007190:	20000e90 	.word	0x20000e90
 8007194:	20000ea4 	.word	0x20000ea4
 8007198:	20000eb8 	.word	0x20000eb8
 800719c:	20000ebc 	.word	0x20000ebc
 80071a0:	20000f6c 	.word	0x20000f6c
 80071a4:	20000ecc 	.word	0x20000ecc
 80071a8:	08007c4c 	.word	0x08007c4c

080071ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3b04      	subs	r3, #4
 80071bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80071c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	3b04      	subs	r3, #4
 80071ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f023 0201 	bic.w	r2, r3, #1
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	3b04      	subs	r3, #4
 80071da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071dc:	4a0c      	ldr	r2, [pc, #48]	@ (8007210 <pxPortInitialiseStack+0x64>)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3b14      	subs	r3, #20
 80071e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	3b04      	subs	r3, #4
 80071f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f06f 0202 	mvn.w	r2, #2
 80071fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	3b20      	subs	r3, #32
 8007200:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007202:	68fb      	ldr	r3, [r7, #12]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	08007215 	.word	0x08007215

08007214 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800721e:	4b13      	ldr	r3, [pc, #76]	@ (800726c <prvTaskExitError+0x58>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007226:	d00b      	beq.n	8007240 <prvTaskExitError+0x2c>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	60fb      	str	r3, [r7, #12]
}
 800723a:	bf00      	nop
 800723c:	bf00      	nop
 800723e:	e7fd      	b.n	800723c <prvTaskExitError+0x28>
	__asm volatile
 8007240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	60bb      	str	r3, [r7, #8]
}
 8007252:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007254:	bf00      	nop
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d0fc      	beq.n	8007256 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800725c:	bf00      	nop
 800725e:	bf00      	nop
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	2000000c 	.word	0x2000000c

08007270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007270:	4b07      	ldr	r3, [pc, #28]	@ (8007290 <pxCurrentTCBConst2>)
 8007272:	6819      	ldr	r1, [r3, #0]
 8007274:	6808      	ldr	r0, [r1, #0]
 8007276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800727a:	f380 8809 	msr	PSP, r0
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f04f 0000 	mov.w	r0, #0
 8007286:	f380 8811 	msr	BASEPRI, r0
 800728a:	4770      	bx	lr
 800728c:	f3af 8000 	nop.w

08007290 <pxCurrentTCBConst2>:
 8007290:	20000990 	.word	0x20000990
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007294:	bf00      	nop
 8007296:	bf00      	nop

08007298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007298:	4808      	ldr	r0, [pc, #32]	@ (80072bc <prvPortStartFirstTask+0x24>)
 800729a:	6800      	ldr	r0, [r0, #0]
 800729c:	6800      	ldr	r0, [r0, #0]
 800729e:	f380 8808 	msr	MSP, r0
 80072a2:	f04f 0000 	mov.w	r0, #0
 80072a6:	f380 8814 	msr	CONTROL, r0
 80072aa:	b662      	cpsie	i
 80072ac:	b661      	cpsie	f
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	df00      	svc	0
 80072b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072ba:	bf00      	nop
 80072bc:	e000ed08 	.word	0xe000ed08

080072c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072c6:	4b47      	ldr	r3, [pc, #284]	@ (80073e4 <xPortStartScheduler+0x124>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a47      	ldr	r2, [pc, #284]	@ (80073e8 <xPortStartScheduler+0x128>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d10b      	bne.n	80072e8 <xPortStartScheduler+0x28>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	613b      	str	r3, [r7, #16]
}
 80072e2:	bf00      	nop
 80072e4:	bf00      	nop
 80072e6:	e7fd      	b.n	80072e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072e8:	4b3e      	ldr	r3, [pc, #248]	@ (80073e4 <xPortStartScheduler+0x124>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a3f      	ldr	r2, [pc, #252]	@ (80073ec <xPortStartScheduler+0x12c>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d10b      	bne.n	800730a <xPortStartScheduler+0x4a>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	60fb      	str	r3, [r7, #12]
}
 8007304:	bf00      	nop
 8007306:	bf00      	nop
 8007308:	e7fd      	b.n	8007306 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800730a:	4b39      	ldr	r3, [pc, #228]	@ (80073f0 <xPortStartScheduler+0x130>)
 800730c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	b2db      	uxtb	r3, r3
 8007314:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	22ff      	movs	r2, #255	@ 0xff
 800731a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	b2db      	uxtb	r3, r3
 8007322:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007324:	78fb      	ldrb	r3, [r7, #3]
 8007326:	b2db      	uxtb	r3, r3
 8007328:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800732c:	b2da      	uxtb	r2, r3
 800732e:	4b31      	ldr	r3, [pc, #196]	@ (80073f4 <xPortStartScheduler+0x134>)
 8007330:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007332:	4b31      	ldr	r3, [pc, #196]	@ (80073f8 <xPortStartScheduler+0x138>)
 8007334:	2207      	movs	r2, #7
 8007336:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007338:	e009      	b.n	800734e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800733a:	4b2f      	ldr	r3, [pc, #188]	@ (80073f8 <xPortStartScheduler+0x138>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3b01      	subs	r3, #1
 8007340:	4a2d      	ldr	r2, [pc, #180]	@ (80073f8 <xPortStartScheduler+0x138>)
 8007342:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007344:	78fb      	ldrb	r3, [r7, #3]
 8007346:	b2db      	uxtb	r3, r3
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	b2db      	uxtb	r3, r3
 800734c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800734e:	78fb      	ldrb	r3, [r7, #3]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007356:	2b80      	cmp	r3, #128	@ 0x80
 8007358:	d0ef      	beq.n	800733a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800735a:	4b27      	ldr	r3, [pc, #156]	@ (80073f8 <xPortStartScheduler+0x138>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f1c3 0307 	rsb	r3, r3, #7
 8007362:	2b04      	cmp	r3, #4
 8007364:	d00b      	beq.n	800737e <xPortStartScheduler+0xbe>
	__asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	60bb      	str	r3, [r7, #8]
}
 8007378:	bf00      	nop
 800737a:	bf00      	nop
 800737c:	e7fd      	b.n	800737a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800737e:	4b1e      	ldr	r3, [pc, #120]	@ (80073f8 <xPortStartScheduler+0x138>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	021b      	lsls	r3, r3, #8
 8007384:	4a1c      	ldr	r2, [pc, #112]	@ (80073f8 <xPortStartScheduler+0x138>)
 8007386:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007388:	4b1b      	ldr	r3, [pc, #108]	@ (80073f8 <xPortStartScheduler+0x138>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007390:	4a19      	ldr	r2, [pc, #100]	@ (80073f8 <xPortStartScheduler+0x138>)
 8007392:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	b2da      	uxtb	r2, r3
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800739c:	4b17      	ldr	r3, [pc, #92]	@ (80073fc <xPortStartScheduler+0x13c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a16      	ldr	r2, [pc, #88]	@ (80073fc <xPortStartScheduler+0x13c>)
 80073a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80073a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073a8:	4b14      	ldr	r3, [pc, #80]	@ (80073fc <xPortStartScheduler+0x13c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a13      	ldr	r2, [pc, #76]	@ (80073fc <xPortStartScheduler+0x13c>)
 80073ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80073b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80073b4:	f000 f8da 	bl	800756c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073b8:	4b11      	ldr	r3, [pc, #68]	@ (8007400 <xPortStartScheduler+0x140>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073be:	f000 f8f9 	bl	80075b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073c2:	4b10      	ldr	r3, [pc, #64]	@ (8007404 <xPortStartScheduler+0x144>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a0f      	ldr	r2, [pc, #60]	@ (8007404 <xPortStartScheduler+0x144>)
 80073c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80073cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073ce:	f7ff ff63 	bl	8007298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073d2:	f7ff f831 	bl	8006438 <vTaskSwitchContext>
	prvTaskExitError();
 80073d6:	f7ff ff1d 	bl	8007214 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	e000ed00 	.word	0xe000ed00
 80073e8:	410fc271 	.word	0x410fc271
 80073ec:	410fc270 	.word	0x410fc270
 80073f0:	e000e400 	.word	0xe000e400
 80073f4:	20000fbc 	.word	0x20000fbc
 80073f8:	20000fc0 	.word	0x20000fc0
 80073fc:	e000ed20 	.word	0xe000ed20
 8007400:	2000000c 	.word	0x2000000c
 8007404:	e000ef34 	.word	0xe000ef34

08007408 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	607b      	str	r3, [r7, #4]
}
 8007420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007422:	4b10      	ldr	r3, [pc, #64]	@ (8007464 <vPortEnterCritical+0x5c>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3301      	adds	r3, #1
 8007428:	4a0e      	ldr	r2, [pc, #56]	@ (8007464 <vPortEnterCritical+0x5c>)
 800742a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800742c:	4b0d      	ldr	r3, [pc, #52]	@ (8007464 <vPortEnterCritical+0x5c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d110      	bne.n	8007456 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007434:	4b0c      	ldr	r3, [pc, #48]	@ (8007468 <vPortEnterCritical+0x60>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00b      	beq.n	8007456 <vPortEnterCritical+0x4e>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	603b      	str	r3, [r7, #0]
}
 8007450:	bf00      	nop
 8007452:	bf00      	nop
 8007454:	e7fd      	b.n	8007452 <vPortEnterCritical+0x4a>
	}
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	2000000c 	.word	0x2000000c
 8007468:	e000ed04 	.word	0xe000ed04

0800746c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007472:	4b12      	ldr	r3, [pc, #72]	@ (80074bc <vPortExitCritical+0x50>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10b      	bne.n	8007492 <vPortExitCritical+0x26>
	__asm volatile
 800747a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	607b      	str	r3, [r7, #4]
}
 800748c:	bf00      	nop
 800748e:	bf00      	nop
 8007490:	e7fd      	b.n	800748e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007492:	4b0a      	ldr	r3, [pc, #40]	@ (80074bc <vPortExitCritical+0x50>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3b01      	subs	r3, #1
 8007498:	4a08      	ldr	r2, [pc, #32]	@ (80074bc <vPortExitCritical+0x50>)
 800749a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800749c:	4b07      	ldr	r3, [pc, #28]	@ (80074bc <vPortExitCritical+0x50>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d105      	bne.n	80074b0 <vPortExitCritical+0x44>
 80074a4:	2300      	movs	r3, #0
 80074a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	f383 8811 	msr	BASEPRI, r3
}
 80074ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	2000000c 	.word	0x2000000c

080074c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074c0:	f3ef 8009 	mrs	r0, PSP
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	4b15      	ldr	r3, [pc, #84]	@ (8007520 <pxCurrentTCBConst>)
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	f01e 0f10 	tst.w	lr, #16
 80074d0:	bf08      	it	eq
 80074d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80074d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074da:	6010      	str	r0, [r2, #0]
 80074dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80074e4:	f380 8811 	msr	BASEPRI, r0
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f7fe ffa2 	bl	8006438 <vTaskSwitchContext>
 80074f4:	f04f 0000 	mov.w	r0, #0
 80074f8:	f380 8811 	msr	BASEPRI, r0
 80074fc:	bc09      	pop	{r0, r3}
 80074fe:	6819      	ldr	r1, [r3, #0]
 8007500:	6808      	ldr	r0, [r1, #0]
 8007502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007506:	f01e 0f10 	tst.w	lr, #16
 800750a:	bf08      	it	eq
 800750c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007510:	f380 8809 	msr	PSP, r0
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	f3af 8000 	nop.w

08007520 <pxCurrentTCBConst>:
 8007520:	20000990 	.word	0x20000990
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop

08007528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	607b      	str	r3, [r7, #4]
}
 8007540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007542:	f7fe febf 	bl	80062c4 <xTaskIncrementTick>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800754c:	4b06      	ldr	r3, [pc, #24]	@ (8007568 <xPortSysTickHandler+0x40>)
 800754e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	2300      	movs	r3, #0
 8007556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	f383 8811 	msr	BASEPRI, r3
}
 800755e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007560:	bf00      	nop
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	e000ed04 	.word	0xe000ed04

0800756c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800756c:	b480      	push	{r7}
 800756e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007570:	4b0b      	ldr	r3, [pc, #44]	@ (80075a0 <vPortSetupTimerInterrupt+0x34>)
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007576:	4b0b      	ldr	r3, [pc, #44]	@ (80075a4 <vPortSetupTimerInterrupt+0x38>)
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800757c:	4b0a      	ldr	r3, [pc, #40]	@ (80075a8 <vPortSetupTimerInterrupt+0x3c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a0a      	ldr	r2, [pc, #40]	@ (80075ac <vPortSetupTimerInterrupt+0x40>)
 8007582:	fba2 2303 	umull	r2, r3, r2, r3
 8007586:	099b      	lsrs	r3, r3, #6
 8007588:	4a09      	ldr	r2, [pc, #36]	@ (80075b0 <vPortSetupTimerInterrupt+0x44>)
 800758a:	3b01      	subs	r3, #1
 800758c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800758e:	4b04      	ldr	r3, [pc, #16]	@ (80075a0 <vPortSetupTimerInterrupt+0x34>)
 8007590:	2207      	movs	r2, #7
 8007592:	601a      	str	r2, [r3, #0]
}
 8007594:	bf00      	nop
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	e000e010 	.word	0xe000e010
 80075a4:	e000e018 	.word	0xe000e018
 80075a8:	20000000 	.word	0x20000000
 80075ac:	10624dd3 	.word	0x10624dd3
 80075b0:	e000e014 	.word	0xe000e014

080075b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80075b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80075c4 <vPortEnableVFP+0x10>
 80075b8:	6801      	ldr	r1, [r0, #0]
 80075ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80075be:	6001      	str	r1, [r0, #0]
 80075c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80075c2:	bf00      	nop
 80075c4:	e000ed88 	.word	0xe000ed88

080075c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075ce:	f3ef 8305 	mrs	r3, IPSR
 80075d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2b0f      	cmp	r3, #15
 80075d8:	d915      	bls.n	8007606 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075da:	4a18      	ldr	r2, [pc, #96]	@ (800763c <vPortValidateInterruptPriority+0x74>)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4413      	add	r3, r2
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80075e4:	4b16      	ldr	r3, [pc, #88]	@ (8007640 <vPortValidateInterruptPriority+0x78>)
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	7afa      	ldrb	r2, [r7, #11]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d20b      	bcs.n	8007606 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	607b      	str	r3, [r7, #4]
}
 8007600:	bf00      	nop
 8007602:	bf00      	nop
 8007604:	e7fd      	b.n	8007602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007606:	4b0f      	ldr	r3, [pc, #60]	@ (8007644 <vPortValidateInterruptPriority+0x7c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800760e:	4b0e      	ldr	r3, [pc, #56]	@ (8007648 <vPortValidateInterruptPriority+0x80>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	429a      	cmp	r2, r3
 8007614:	d90b      	bls.n	800762e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	603b      	str	r3, [r7, #0]
}
 8007628:	bf00      	nop
 800762a:	bf00      	nop
 800762c:	e7fd      	b.n	800762a <vPortValidateInterruptPriority+0x62>
	}
 800762e:	bf00      	nop
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	e000e3f0 	.word	0xe000e3f0
 8007640:	20000fbc 	.word	0x20000fbc
 8007644:	e000ed0c 	.word	0xe000ed0c
 8007648:	20000fc0 	.word	0x20000fc0

0800764c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08a      	sub	sp, #40	@ 0x28
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007654:	2300      	movs	r3, #0
 8007656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007658:	f7fe fd78 	bl	800614c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800765c:	4b5c      	ldr	r3, [pc, #368]	@ (80077d0 <pvPortMalloc+0x184>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007664:	f000 f924 	bl	80078b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007668:	4b5a      	ldr	r3, [pc, #360]	@ (80077d4 <pvPortMalloc+0x188>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4013      	ands	r3, r2
 8007670:	2b00      	cmp	r3, #0
 8007672:	f040 8095 	bne.w	80077a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01e      	beq.n	80076ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800767c:	2208      	movs	r2, #8
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4413      	add	r3, r2
 8007682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	2b00      	cmp	r3, #0
 800768c:	d015      	beq.n	80076ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f023 0307 	bic.w	r3, r3, #7
 8007694:	3308      	adds	r3, #8
 8007696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f003 0307 	and.w	r3, r3, #7
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00b      	beq.n	80076ba <pvPortMalloc+0x6e>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	617b      	str	r3, [r7, #20]
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop
 80076b8:	e7fd      	b.n	80076b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d06f      	beq.n	80077a0 <pvPortMalloc+0x154>
 80076c0:	4b45      	ldr	r3, [pc, #276]	@ (80077d8 <pvPortMalloc+0x18c>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d86a      	bhi.n	80077a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80076ca:	4b44      	ldr	r3, [pc, #272]	@ (80077dc <pvPortMalloc+0x190>)
 80076cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076ce:	4b43      	ldr	r3, [pc, #268]	@ (80077dc <pvPortMalloc+0x190>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076d4:	e004      	b.n	80076e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80076d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d903      	bls.n	80076f2 <pvPortMalloc+0xa6>
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1f1      	bne.n	80076d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80076f2:	4b37      	ldr	r3, [pc, #220]	@ (80077d0 <pvPortMalloc+0x184>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d051      	beq.n	80077a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2208      	movs	r2, #8
 8007702:	4413      	add	r3, r2
 8007704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	1ad2      	subs	r2, r2, r3
 8007716:	2308      	movs	r3, #8
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	429a      	cmp	r2, r3
 800771c:	d920      	bls.n	8007760 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800771e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4413      	add	r3, r2
 8007724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	f003 0307 	and.w	r3, r3, #7
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00b      	beq.n	8007748 <pvPortMalloc+0xfc>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007734:	f383 8811 	msr	BASEPRI, r3
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	613b      	str	r3, [r7, #16]
}
 8007742:	bf00      	nop
 8007744:	bf00      	nop
 8007746:	e7fd      	b.n	8007744 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	1ad2      	subs	r2, r2, r3
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800775a:	69b8      	ldr	r0, [r7, #24]
 800775c:	f000 f90a 	bl	8007974 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007760:	4b1d      	ldr	r3, [pc, #116]	@ (80077d8 <pvPortMalloc+0x18c>)
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	4a1b      	ldr	r2, [pc, #108]	@ (80077d8 <pvPortMalloc+0x18c>)
 800776c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800776e:	4b1a      	ldr	r3, [pc, #104]	@ (80077d8 <pvPortMalloc+0x18c>)
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	4b1b      	ldr	r3, [pc, #108]	@ (80077e0 <pvPortMalloc+0x194>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d203      	bcs.n	8007782 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800777a:	4b17      	ldr	r3, [pc, #92]	@ (80077d8 <pvPortMalloc+0x18c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a18      	ldr	r2, [pc, #96]	@ (80077e0 <pvPortMalloc+0x194>)
 8007780:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	4b13      	ldr	r3, [pc, #76]	@ (80077d4 <pvPortMalloc+0x188>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	431a      	orrs	r2, r3
 800778c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007796:	4b13      	ldr	r3, [pc, #76]	@ (80077e4 <pvPortMalloc+0x198>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3301      	adds	r3, #1
 800779c:	4a11      	ldr	r2, [pc, #68]	@ (80077e4 <pvPortMalloc+0x198>)
 800779e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077a0:	f7fe fce2 	bl	8006168 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00b      	beq.n	80077c6 <pvPortMalloc+0x17a>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	60fb      	str	r3, [r7, #12]
}
 80077c0:	bf00      	nop
 80077c2:	bf00      	nop
 80077c4:	e7fd      	b.n	80077c2 <pvPortMalloc+0x176>
	return pvReturn;
 80077c6:	69fb      	ldr	r3, [r7, #28]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3728      	adds	r7, #40	@ 0x28
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	20001b84 	.word	0x20001b84
 80077d4:	20001b98 	.word	0x20001b98
 80077d8:	20001b88 	.word	0x20001b88
 80077dc:	20001b7c 	.word	0x20001b7c
 80077e0:	20001b8c 	.word	0x20001b8c
 80077e4:	20001b90 	.word	0x20001b90

080077e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d04f      	beq.n	800789a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80077fa:	2308      	movs	r3, #8
 80077fc:	425b      	negs	r3, r3
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	4413      	add	r3, r2
 8007802:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	4b25      	ldr	r3, [pc, #148]	@ (80078a4 <vPortFree+0xbc>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4013      	ands	r3, r2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10b      	bne.n	800782e <vPortFree+0x46>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	60fb      	str	r3, [r7, #12]
}
 8007828:	bf00      	nop
 800782a:	bf00      	nop
 800782c:	e7fd      	b.n	800782a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00b      	beq.n	800784e <vPortFree+0x66>
	__asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	60bb      	str	r3, [r7, #8]
}
 8007848:	bf00      	nop
 800784a:	bf00      	nop
 800784c:	e7fd      	b.n	800784a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	4b14      	ldr	r3, [pc, #80]	@ (80078a4 <vPortFree+0xbc>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4013      	ands	r3, r2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d01e      	beq.n	800789a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d11a      	bne.n	800789a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	4b0e      	ldr	r3, [pc, #56]	@ (80078a4 <vPortFree+0xbc>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	43db      	mvns	r3, r3
 800786e:	401a      	ands	r2, r3
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007874:	f7fe fc6a 	bl	800614c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	4b0a      	ldr	r3, [pc, #40]	@ (80078a8 <vPortFree+0xc0>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4413      	add	r3, r2
 8007882:	4a09      	ldr	r2, [pc, #36]	@ (80078a8 <vPortFree+0xc0>)
 8007884:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007886:	6938      	ldr	r0, [r7, #16]
 8007888:	f000 f874 	bl	8007974 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800788c:	4b07      	ldr	r3, [pc, #28]	@ (80078ac <vPortFree+0xc4>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3301      	adds	r3, #1
 8007892:	4a06      	ldr	r2, [pc, #24]	@ (80078ac <vPortFree+0xc4>)
 8007894:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007896:	f7fe fc67 	bl	8006168 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800789a:	bf00      	nop
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20001b98 	.word	0x20001b98
 80078a8:	20001b88 	.word	0x20001b88
 80078ac:	20001b94 	.word	0x20001b94

080078b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078b6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80078ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078bc:	4b27      	ldr	r3, [pc, #156]	@ (800795c <prvHeapInit+0xac>)
 80078be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00c      	beq.n	80078e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3307      	adds	r3, #7
 80078ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 0307 	bic.w	r3, r3, #7
 80078d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	4a1f      	ldr	r2, [pc, #124]	@ (800795c <prvHeapInit+0xac>)
 80078e0:	4413      	add	r3, r2
 80078e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007960 <prvHeapInit+0xb0>)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007960 <prvHeapInit+0xb0>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	4413      	add	r3, r2
 80078fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80078fc:	2208      	movs	r2, #8
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	1a9b      	subs	r3, r3, r2
 8007902:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 0307 	bic.w	r3, r3, #7
 800790a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4a15      	ldr	r2, [pc, #84]	@ (8007964 <prvHeapInit+0xb4>)
 8007910:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007912:	4b14      	ldr	r3, [pc, #80]	@ (8007964 <prvHeapInit+0xb4>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2200      	movs	r2, #0
 8007918:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800791a:	4b12      	ldr	r3, [pc, #72]	@ (8007964 <prvHeapInit+0xb4>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2200      	movs	r2, #0
 8007920:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	1ad2      	subs	r2, r2, r3
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007930:	4b0c      	ldr	r3, [pc, #48]	@ (8007964 <prvHeapInit+0xb4>)
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	4a0a      	ldr	r2, [pc, #40]	@ (8007968 <prvHeapInit+0xb8>)
 800793e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	4a09      	ldr	r2, [pc, #36]	@ (800796c <prvHeapInit+0xbc>)
 8007946:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007948:	4b09      	ldr	r3, [pc, #36]	@ (8007970 <prvHeapInit+0xc0>)
 800794a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800794e:	601a      	str	r2, [r3, #0]
}
 8007950:	bf00      	nop
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	20000fc4 	.word	0x20000fc4
 8007960:	20001b7c 	.word	0x20001b7c
 8007964:	20001b84 	.word	0x20001b84
 8007968:	20001b8c 	.word	0x20001b8c
 800796c:	20001b88 	.word	0x20001b88
 8007970:	20001b98 	.word	0x20001b98

08007974 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800797c:	4b28      	ldr	r3, [pc, #160]	@ (8007a20 <prvInsertBlockIntoFreeList+0xac>)
 800797e:	60fb      	str	r3, [r7, #12]
 8007980:	e002      	b.n	8007988 <prvInsertBlockIntoFreeList+0x14>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	429a      	cmp	r2, r3
 8007990:	d8f7      	bhi.n	8007982 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	4413      	add	r3, r2
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d108      	bne.n	80079b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	441a      	add	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	441a      	add	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d118      	bne.n	80079fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	4b15      	ldr	r3, [pc, #84]	@ (8007a24 <prvInsertBlockIntoFreeList+0xb0>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d00d      	beq.n	80079f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	441a      	add	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	e008      	b.n	8007a04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007a24 <prvInsertBlockIntoFreeList+0xb0>)
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	e003      	b.n	8007a04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d002      	beq.n	8007a12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a12:	bf00      	nop
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	20001b7c 	.word	0x20001b7c
 8007a24:	20001b84 	.word	0x20001b84

08007a28 <memset>:
 8007a28:	4402      	add	r2, r0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d100      	bne.n	8007a32 <memset+0xa>
 8007a30:	4770      	bx	lr
 8007a32:	f803 1b01 	strb.w	r1, [r3], #1
 8007a36:	e7f9      	b.n	8007a2c <memset+0x4>

08007a38 <_reclaim_reent>:
 8007a38:	4b29      	ldr	r3, [pc, #164]	@ (8007ae0 <_reclaim_reent+0xa8>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4283      	cmp	r3, r0
 8007a3e:	b570      	push	{r4, r5, r6, lr}
 8007a40:	4604      	mov	r4, r0
 8007a42:	d04b      	beq.n	8007adc <_reclaim_reent+0xa4>
 8007a44:	69c3      	ldr	r3, [r0, #28]
 8007a46:	b1ab      	cbz	r3, 8007a74 <_reclaim_reent+0x3c>
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	b16b      	cbz	r3, 8007a68 <_reclaim_reent+0x30>
 8007a4c:	2500      	movs	r5, #0
 8007a4e:	69e3      	ldr	r3, [r4, #28]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	5959      	ldr	r1, [r3, r5]
 8007a54:	2900      	cmp	r1, #0
 8007a56:	d13b      	bne.n	8007ad0 <_reclaim_reent+0x98>
 8007a58:	3504      	adds	r5, #4
 8007a5a:	2d80      	cmp	r5, #128	@ 0x80
 8007a5c:	d1f7      	bne.n	8007a4e <_reclaim_reent+0x16>
 8007a5e:	69e3      	ldr	r3, [r4, #28]
 8007a60:	4620      	mov	r0, r4
 8007a62:	68d9      	ldr	r1, [r3, #12]
 8007a64:	f000 f872 	bl	8007b4c <_free_r>
 8007a68:	69e3      	ldr	r3, [r4, #28]
 8007a6a:	6819      	ldr	r1, [r3, #0]
 8007a6c:	b111      	cbz	r1, 8007a74 <_reclaim_reent+0x3c>
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f000 f86c 	bl	8007b4c <_free_r>
 8007a74:	6961      	ldr	r1, [r4, #20]
 8007a76:	b111      	cbz	r1, 8007a7e <_reclaim_reent+0x46>
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f000 f867 	bl	8007b4c <_free_r>
 8007a7e:	69e1      	ldr	r1, [r4, #28]
 8007a80:	b111      	cbz	r1, 8007a88 <_reclaim_reent+0x50>
 8007a82:	4620      	mov	r0, r4
 8007a84:	f000 f862 	bl	8007b4c <_free_r>
 8007a88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007a8a:	b111      	cbz	r1, 8007a92 <_reclaim_reent+0x5a>
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f000 f85d 	bl	8007b4c <_free_r>
 8007a92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a94:	b111      	cbz	r1, 8007a9c <_reclaim_reent+0x64>
 8007a96:	4620      	mov	r0, r4
 8007a98:	f000 f858 	bl	8007b4c <_free_r>
 8007a9c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007a9e:	b111      	cbz	r1, 8007aa6 <_reclaim_reent+0x6e>
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f000 f853 	bl	8007b4c <_free_r>
 8007aa6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007aa8:	b111      	cbz	r1, 8007ab0 <_reclaim_reent+0x78>
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f000 f84e 	bl	8007b4c <_free_r>
 8007ab0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007ab2:	b111      	cbz	r1, 8007aba <_reclaim_reent+0x82>
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f000 f849 	bl	8007b4c <_free_r>
 8007aba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007abc:	b111      	cbz	r1, 8007ac4 <_reclaim_reent+0x8c>
 8007abe:	4620      	mov	r0, r4
 8007ac0:	f000 f844 	bl	8007b4c <_free_r>
 8007ac4:	6a23      	ldr	r3, [r4, #32]
 8007ac6:	b14b      	cbz	r3, 8007adc <_reclaim_reent+0xa4>
 8007ac8:	4620      	mov	r0, r4
 8007aca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ace:	4718      	bx	r3
 8007ad0:	680e      	ldr	r6, [r1, #0]
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f000 f83a 	bl	8007b4c <_free_r>
 8007ad8:	4631      	mov	r1, r6
 8007ada:	e7bb      	b.n	8007a54 <_reclaim_reent+0x1c>
 8007adc:	bd70      	pop	{r4, r5, r6, pc}
 8007ade:	bf00      	nop
 8007ae0:	20000010 	.word	0x20000010

08007ae4 <__libc_init_array>:
 8007ae4:	b570      	push	{r4, r5, r6, lr}
 8007ae6:	4d0d      	ldr	r5, [pc, #52]	@ (8007b1c <__libc_init_array+0x38>)
 8007ae8:	4c0d      	ldr	r4, [pc, #52]	@ (8007b20 <__libc_init_array+0x3c>)
 8007aea:	1b64      	subs	r4, r4, r5
 8007aec:	10a4      	asrs	r4, r4, #2
 8007aee:	2600      	movs	r6, #0
 8007af0:	42a6      	cmp	r6, r4
 8007af2:	d109      	bne.n	8007b08 <__libc_init_array+0x24>
 8007af4:	4d0b      	ldr	r5, [pc, #44]	@ (8007b24 <__libc_init_array+0x40>)
 8007af6:	4c0c      	ldr	r4, [pc, #48]	@ (8007b28 <__libc_init_array+0x44>)
 8007af8:	f000 f87e 	bl	8007bf8 <_init>
 8007afc:	1b64      	subs	r4, r4, r5
 8007afe:	10a4      	asrs	r4, r4, #2
 8007b00:	2600      	movs	r6, #0
 8007b02:	42a6      	cmp	r6, r4
 8007b04:	d105      	bne.n	8007b12 <__libc_init_array+0x2e>
 8007b06:	bd70      	pop	{r4, r5, r6, pc}
 8007b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b0c:	4798      	blx	r3
 8007b0e:	3601      	adds	r6, #1
 8007b10:	e7ee      	b.n	8007af0 <__libc_init_array+0xc>
 8007b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b16:	4798      	blx	r3
 8007b18:	3601      	adds	r6, #1
 8007b1a:	e7f2      	b.n	8007b02 <__libc_init_array+0x1e>
 8007b1c:	08007d08 	.word	0x08007d08
 8007b20:	08007d08 	.word	0x08007d08
 8007b24:	08007d08 	.word	0x08007d08
 8007b28:	08007d0c 	.word	0x08007d0c

08007b2c <__retarget_lock_acquire_recursive>:
 8007b2c:	4770      	bx	lr

08007b2e <__retarget_lock_release_recursive>:
 8007b2e:	4770      	bx	lr

08007b30 <memcpy>:
 8007b30:	440a      	add	r2, r1
 8007b32:	4291      	cmp	r1, r2
 8007b34:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007b38:	d100      	bne.n	8007b3c <memcpy+0xc>
 8007b3a:	4770      	bx	lr
 8007b3c:	b510      	push	{r4, lr}
 8007b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b46:	4291      	cmp	r1, r2
 8007b48:	d1f9      	bne.n	8007b3e <memcpy+0xe>
 8007b4a:	bd10      	pop	{r4, pc}

08007b4c <_free_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4605      	mov	r5, r0
 8007b50:	2900      	cmp	r1, #0
 8007b52:	d041      	beq.n	8007bd8 <_free_r+0x8c>
 8007b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b58:	1f0c      	subs	r4, r1, #4
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bfb8      	it	lt
 8007b5e:	18e4      	addlt	r4, r4, r3
 8007b60:	f000 f83e 	bl	8007be0 <__malloc_lock>
 8007b64:	4a1d      	ldr	r2, [pc, #116]	@ (8007bdc <_free_r+0x90>)
 8007b66:	6813      	ldr	r3, [r2, #0]
 8007b68:	b933      	cbnz	r3, 8007b78 <_free_r+0x2c>
 8007b6a:	6063      	str	r3, [r4, #4]
 8007b6c:	6014      	str	r4, [r2, #0]
 8007b6e:	4628      	mov	r0, r5
 8007b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b74:	f000 b83a 	b.w	8007bec <__malloc_unlock>
 8007b78:	42a3      	cmp	r3, r4
 8007b7a:	d908      	bls.n	8007b8e <_free_r+0x42>
 8007b7c:	6820      	ldr	r0, [r4, #0]
 8007b7e:	1821      	adds	r1, r4, r0
 8007b80:	428b      	cmp	r3, r1
 8007b82:	bf01      	itttt	eq
 8007b84:	6819      	ldreq	r1, [r3, #0]
 8007b86:	685b      	ldreq	r3, [r3, #4]
 8007b88:	1809      	addeq	r1, r1, r0
 8007b8a:	6021      	streq	r1, [r4, #0]
 8007b8c:	e7ed      	b.n	8007b6a <_free_r+0x1e>
 8007b8e:	461a      	mov	r2, r3
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	b10b      	cbz	r3, 8007b98 <_free_r+0x4c>
 8007b94:	42a3      	cmp	r3, r4
 8007b96:	d9fa      	bls.n	8007b8e <_free_r+0x42>
 8007b98:	6811      	ldr	r1, [r2, #0]
 8007b9a:	1850      	adds	r0, r2, r1
 8007b9c:	42a0      	cmp	r0, r4
 8007b9e:	d10b      	bne.n	8007bb8 <_free_r+0x6c>
 8007ba0:	6820      	ldr	r0, [r4, #0]
 8007ba2:	4401      	add	r1, r0
 8007ba4:	1850      	adds	r0, r2, r1
 8007ba6:	4283      	cmp	r3, r0
 8007ba8:	6011      	str	r1, [r2, #0]
 8007baa:	d1e0      	bne.n	8007b6e <_free_r+0x22>
 8007bac:	6818      	ldr	r0, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	6053      	str	r3, [r2, #4]
 8007bb2:	4408      	add	r0, r1
 8007bb4:	6010      	str	r0, [r2, #0]
 8007bb6:	e7da      	b.n	8007b6e <_free_r+0x22>
 8007bb8:	d902      	bls.n	8007bc0 <_free_r+0x74>
 8007bba:	230c      	movs	r3, #12
 8007bbc:	602b      	str	r3, [r5, #0]
 8007bbe:	e7d6      	b.n	8007b6e <_free_r+0x22>
 8007bc0:	6820      	ldr	r0, [r4, #0]
 8007bc2:	1821      	adds	r1, r4, r0
 8007bc4:	428b      	cmp	r3, r1
 8007bc6:	bf04      	itt	eq
 8007bc8:	6819      	ldreq	r1, [r3, #0]
 8007bca:	685b      	ldreq	r3, [r3, #4]
 8007bcc:	6063      	str	r3, [r4, #4]
 8007bce:	bf04      	itt	eq
 8007bd0:	1809      	addeq	r1, r1, r0
 8007bd2:	6021      	streq	r1, [r4, #0]
 8007bd4:	6054      	str	r4, [r2, #4]
 8007bd6:	e7ca      	b.n	8007b6e <_free_r+0x22>
 8007bd8:	bd38      	pop	{r3, r4, r5, pc}
 8007bda:	bf00      	nop
 8007bdc:	20001cd8 	.word	0x20001cd8

08007be0 <__malloc_lock>:
 8007be0:	4801      	ldr	r0, [pc, #4]	@ (8007be8 <__malloc_lock+0x8>)
 8007be2:	f7ff bfa3 	b.w	8007b2c <__retarget_lock_acquire_recursive>
 8007be6:	bf00      	nop
 8007be8:	20001cd4 	.word	0x20001cd4

08007bec <__malloc_unlock>:
 8007bec:	4801      	ldr	r0, [pc, #4]	@ (8007bf4 <__malloc_unlock+0x8>)
 8007bee:	f7ff bf9e 	b.w	8007b2e <__retarget_lock_release_recursive>
 8007bf2:	bf00      	nop
 8007bf4:	20001cd4 	.word	0x20001cd4

08007bf8 <_init>:
 8007bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfa:	bf00      	nop
 8007bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bfe:	bc08      	pop	{r3}
 8007c00:	469e      	mov	lr, r3
 8007c02:	4770      	bx	lr

08007c04 <_fini>:
 8007c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c06:	bf00      	nop
 8007c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c0a:	bc08      	pop	{r3}
 8007c0c:	469e      	mov	lr, r3
 8007c0e:	4770      	bx	lr
