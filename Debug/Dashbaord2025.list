
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f32c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000774  0800f4dc  0800f4dc  000104dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc50  0800fc50  0001108c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc50  0800fc50  00010c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc58  0800fc58  0001108c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fc58  0800fc58  00010c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800fc60  0800fc60  00010c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800fc68  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002aa4  2000008c  0800fcf4  0001108c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002b30  0800fcf4  00011b30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001108c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002de5d  00000000  00000000  000110bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057ad  00000000  00000000  0003ef19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002450  00000000  00000000  000446c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c5d  00000000  00000000  00046b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030a6a  00000000  00000000  00048775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b873  00000000  00000000  000791df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012b525  00000000  00000000  000a4a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cff77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a2d4  00000000  00000000  001cffbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001da290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f4c4 	.word	0x0800f4c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	0800f4c4 	.word	0x0800f4c4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b96a 	b.w	8000db8 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	460c      	mov	r4, r1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d14e      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b08:	4694      	mov	ip, r2
 8000b0a:	458c      	cmp	ip, r1
 8000b0c:	4686      	mov	lr, r0
 8000b0e:	fab2 f282 	clz	r2, r2
 8000b12:	d962      	bls.n	8000bda <__udivmoddi4+0xde>
 8000b14:	b14a      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	4091      	lsls	r1, r2
 8000b1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b24:	4319      	orrs	r1, r3
 8000b26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2e:	fa1f f68c 	uxth.w	r6, ip
 8000b32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb04 f106 	mul.w	r1, r4, r6
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b52:	f080 8112 	bcs.w	8000d7a <__udivmoddi4+0x27e>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 810f 	bls.w	8000d7a <__udivmoddi4+0x27e>
 8000b5c:	3c02      	subs	r4, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a59      	subs	r1, r3, r1
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb00 f606 	mul.w	r6, r0, r6
 8000b76:	429e      	cmp	r6, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x94>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b82:	f080 80fc 	bcs.w	8000d7e <__udivmoddi4+0x282>
 8000b86:	429e      	cmp	r6, r3
 8000b88:	f240 80f9 	bls.w	8000d7e <__udivmoddi4+0x282>
 8000b8c:	4463      	add	r3, ip
 8000b8e:	3802      	subs	r0, #2
 8000b90:	1b9b      	subs	r3, r3, r6
 8000b92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b96:	2100      	movs	r1, #0
 8000b98:	b11d      	cbz	r5, 8000ba2 <__udivmoddi4+0xa6>
 8000b9a:	40d3      	lsrs	r3, r2
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d905      	bls.n	8000bb6 <__udivmoddi4+0xba>
 8000baa:	b10d      	cbz	r5, 8000bb0 <__udivmoddi4+0xb4>
 8000bac:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e7f5      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bb6:	fab3 f183 	clz	r1, r3
 8000bba:	2900      	cmp	r1, #0
 8000bbc:	d146      	bne.n	8000c4c <__udivmoddi4+0x150>
 8000bbe:	42a3      	cmp	r3, r4
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xcc>
 8000bc2:	4290      	cmp	r0, r2
 8000bc4:	f0c0 80f0 	bcc.w	8000da8 <__udivmoddi4+0x2ac>
 8000bc8:	1a86      	subs	r6, r0, r2
 8000bca:	eb64 0303 	sbc.w	r3, r4, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d0e6      	beq.n	8000ba2 <__udivmoddi4+0xa6>
 8000bd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bd8:	e7e3      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	f040 8090 	bne.w	8000d00 <__udivmoddi4+0x204>
 8000be0:	eba1 040c 	sub.w	r4, r1, ip
 8000be4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be8:	fa1f f78c 	uxth.w	r7, ip
 8000bec:	2101      	movs	r1, #1
 8000bee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfe:	fb07 f006 	mul.w	r0, r7, r6
 8000c02:	4298      	cmp	r0, r3
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x11c>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x11a>
 8000c10:	4298      	cmp	r0, r3
 8000c12:	f200 80cd 	bhi.w	8000db0 <__udivmoddi4+0x2b4>
 8000c16:	4626      	mov	r6, r4
 8000c18:	1a1c      	subs	r4, r3, r0
 8000c1a:	fa1f f38e 	uxth.w	r3, lr
 8000c1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c22:	fb08 4410 	mls	r4, r8, r0, r4
 8000c26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2a:	fb00 f707 	mul.w	r7, r0, r7
 8000c2e:	429f      	cmp	r7, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x148>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x146>
 8000c3c:	429f      	cmp	r7, r3
 8000c3e:	f200 80b0 	bhi.w	8000da2 <__udivmoddi4+0x2a6>
 8000c42:	4620      	mov	r0, r4
 8000c44:	1bdb      	subs	r3, r3, r7
 8000c46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c4a:	e7a5      	b.n	8000b98 <__udivmoddi4+0x9c>
 8000c4c:	f1c1 0620 	rsb	r6, r1, #32
 8000c50:	408b      	lsls	r3, r1
 8000c52:	fa22 f706 	lsr.w	r7, r2, r6
 8000c56:	431f      	orrs	r7, r3
 8000c58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c60:	ea43 030c 	orr.w	r3, r3, ip
 8000c64:	40f4      	lsrs	r4, r6
 8000c66:	fa00 f801 	lsl.w	r8, r0, r1
 8000c6a:	0c38      	lsrs	r0, r7, #16
 8000c6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c70:	fbb4 fef0 	udiv	lr, r4, r0
 8000c74:	fa1f fc87 	uxth.w	ip, r7
 8000c78:	fb00 441e 	mls	r4, r0, lr, r4
 8000c7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c80:	fb0e f90c 	mul.w	r9, lr, ip
 8000c84:	45a1      	cmp	r9, r4
 8000c86:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x1a6>
 8000c8c:	193c      	adds	r4, r7, r4
 8000c8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c92:	f080 8084 	bcs.w	8000d9e <__udivmoddi4+0x2a2>
 8000c96:	45a1      	cmp	r9, r4
 8000c98:	f240 8081 	bls.w	8000d9e <__udivmoddi4+0x2a2>
 8000c9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ca0:	443c      	add	r4, r7
 8000ca2:	eba4 0409 	sub.w	r4, r4, r9
 8000ca6:	fa1f f983 	uxth.w	r9, r3
 8000caa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cae:	fb00 4413 	mls	r4, r0, r3, r4
 8000cb2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	d907      	bls.n	8000cce <__udivmoddi4+0x1d2>
 8000cbe:	193c      	adds	r4, r7, r4
 8000cc0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cc4:	d267      	bcs.n	8000d96 <__udivmoddi4+0x29a>
 8000cc6:	45a4      	cmp	ip, r4
 8000cc8:	d965      	bls.n	8000d96 <__udivmoddi4+0x29a>
 8000cca:	3b02      	subs	r3, #2
 8000ccc:	443c      	add	r4, r7
 8000cce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cd6:	eba4 040c 	sub.w	r4, r4, ip
 8000cda:	429c      	cmp	r4, r3
 8000cdc:	46ce      	mov	lr, r9
 8000cde:	469c      	mov	ip, r3
 8000ce0:	d351      	bcc.n	8000d86 <__udivmoddi4+0x28a>
 8000ce2:	d04e      	beq.n	8000d82 <__udivmoddi4+0x286>
 8000ce4:	b155      	cbz	r5, 8000cfc <__udivmoddi4+0x200>
 8000ce6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cea:	eb64 040c 	sbc.w	r4, r4, ip
 8000cee:	fa04 f606 	lsl.w	r6, r4, r6
 8000cf2:	40cb      	lsrs	r3, r1
 8000cf4:	431e      	orrs	r6, r3
 8000cf6:	40cc      	lsrs	r4, r1
 8000cf8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	e750      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f103 	lsr.w	r1, r0, r3
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d10:	4094      	lsls	r4, r2
 8000d12:	430c      	orrs	r4, r1
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1c:	fa1f f78c 	uxth.w	r7, ip
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3110 	mls	r1, r8, r0, r3
 8000d28:	0c23      	lsrs	r3, r4, #16
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f107 	mul.w	r1, r0, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x24c>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d3e:	d22c      	bcs.n	8000d9a <__udivmoddi4+0x29e>
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d92a      	bls.n	8000d9a <__udivmoddi4+0x29e>
 8000d44:	3802      	subs	r0, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d50:	fb08 3311 	mls	r3, r8, r1, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb01 f307 	mul.w	r3, r1, r7
 8000d5c:	42a3      	cmp	r3, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x276>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d68:	d213      	bcs.n	8000d92 <__udivmoddi4+0x296>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d911      	bls.n	8000d92 <__udivmoddi4+0x296>
 8000d6e:	3902      	subs	r1, #2
 8000d70:	4464      	add	r4, ip
 8000d72:	1ae4      	subs	r4, r4, r3
 8000d74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d78:	e739      	b.n	8000bee <__udivmoddi4+0xf2>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	e6f0      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e706      	b.n	8000b90 <__udivmoddi4+0x94>
 8000d82:	45c8      	cmp	r8, r9
 8000d84:	d2ae      	bcs.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d8e:	3801      	subs	r0, #1
 8000d90:	e7a8      	b.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d92:	4631      	mov	r1, r6
 8000d94:	e7ed      	b.n	8000d72 <__udivmoddi4+0x276>
 8000d96:	4603      	mov	r3, r0
 8000d98:	e799      	b.n	8000cce <__udivmoddi4+0x1d2>
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	e7d4      	b.n	8000d48 <__udivmoddi4+0x24c>
 8000d9e:	46d6      	mov	lr, sl
 8000da0:	e77f      	b.n	8000ca2 <__udivmoddi4+0x1a6>
 8000da2:	4463      	add	r3, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	e74d      	b.n	8000c44 <__udivmoddi4+0x148>
 8000da8:	4606      	mov	r6, r0
 8000daa:	4623      	mov	r3, r4
 8000dac:	4608      	mov	r0, r1
 8000dae:	e70f      	b.n	8000bd0 <__udivmoddi4+0xd4>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	4463      	add	r3, ip
 8000db4:	e730      	b.n	8000c18 <__udivmoddi4+0x11c>
 8000db6:	bf00      	nop

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <_ZN14DashboardState5resetEv>:
#include "DashboardState.hpp"

void DashboardState::reset() {
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    lightState = LIGHTS_NONE;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
    oldLightState = LIGHTS_NONE;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	709a      	strb	r2, [r3, #2]

    outputPortState = 0;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	70da      	strb	r2, [r3, #3]
    hornState = 0;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	711a      	strb	r2, [r3, #4]
    fanState = 0;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	715a      	strb	r2, [r3, #5]
    headlightState = 0;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	719a      	strb	r2, [r3, #6]
    pttState = 0;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	71da      	strb	r2, [r3, #7]
    displayState = 0;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	721a      	strb	r2, [r3, #8]

    bmsStatus = 0;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	741a      	strb	r2, [r3, #16]
    mcStatus = 0;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	745a      	strb	r2, [r3, #17]
    arrayStatus = 0;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	749a      	strb	r2, [r3, #18]
    direction = 0;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	74da      	strb	r2, [r3, #19]

    old_bmsStatus = 0;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	755a      	strb	r2, [r3, #21]
    old_mcStatus = 0;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	759a      	strb	r2, [r3, #22]
    old_arrayStatus = 0;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	75da      	strb	r2, [r3, #23]
    old_direction = 0;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	761a      	strb	r2, [r3, #24]

    uart_rx = 0;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	779a      	strb	r2, [r3, #30]
    old_uart_rx = 0;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	77da      	strb	r2, [r3, #31]
    updateRequested = 0;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <_ZN14DashboardState14updateFromUARTEv>:

// gets called only when something changes in the dashboard state
void DashboardState::updateFromUART() {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

    // uart data for lights (blinkers)
    if (uart_rx & BUTTON_HAZARD) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	7f9b      	ldrb	r3, [r3, #30]
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <_ZN14DashboardState14updateFromUARTEv+0x1c>
        lightState = LIGHTS_HAZARD;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	701a      	strb	r2, [r3, #0]
 8000e5e:	e015      	b.n	8000e8c <_ZN14DashboardState14updateFromUARTEv+0x48>
    }
    else if (uart_rx & BUTTON_LEFT_TURN) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	7f9b      	ldrb	r3, [r3, #30]
 8000e64:	f003 0308 	and.w	r3, r3, #8
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <_ZN14DashboardState14updateFromUARTEv+0x30>
        lightState = LIGHTS_LEFT;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	e00b      	b.n	8000e8c <_ZN14DashboardState14updateFromUARTEv+0x48>
    }
    else if (uart_rx & BUTTON_RIGHT_TURN) {
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	7f9b      	ldrb	r3, [r3, #30]
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	da03      	bge.n	8000e86 <_ZN14DashboardState14updateFromUARTEv+0x42>
        lightState = LIGHTS_RIGHT;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2202      	movs	r2, #2
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	e002      	b.n	8000e8c <_ZN14DashboardState14updateFromUARTEv+0x48>
    }
    else {
        lightState = LIGHTS_NONE;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
    }

    // if the light state has changed, reset the blink time and update the output port state
    if (oldLightState != lightState) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	789a      	ldrb	r2, [r3, #2]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d041      	beq.n	8000f1c <_ZN14DashboardState14updateFromUARTEv+0xd8>
        lastBlinkTime = HAL_GetTick(); // reset blink time if light state changes
 8000e98:	f003 fc4c 	bl	8004734 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60da      	str	r2, [r3, #12]
        oldLightState = lightState;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	781a      	ldrb	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	709a      	strb	r2, [r3, #2]
        if (lightState == LIGHTS_HAZARD) {
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d107      	bne.n	8000ec2 <_ZN14DashboardState14updateFromUARTEv+0x7e>
            outputPortState |= (OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	78db      	ldrb	r3, [r3, #3]
 8000eb6:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	70da      	strb	r2, [r3, #3]
 8000ec0:	e02c      	b.n	8000f1c <_ZN14DashboardState14updateFromUARTEv+0xd8>
        }
        else if (lightState == LIGHTS_LEFT) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d10e      	bne.n	8000ee8 <_ZN14DashboardState14updateFromUARTEv+0xa4>
            outputPortState |= OUTPUT_FL_LIGHT_CTRL;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	78db      	ldrb	r3, [r3, #3]
 8000ece:	f043 0320 	orr.w	r3, r3, #32
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	70da      	strb	r2, [r3, #3]
            outputPortState &= ~OUTPUT_FR_LIGHT_CTRL;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	78db      	ldrb	r3, [r3, #3]
 8000edc:	f023 0310 	bic.w	r3, r3, #16
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	70da      	strb	r2, [r3, #3]
 8000ee6:	e019      	b.n	8000f1c <_ZN14DashboardState14updateFromUARTEv+0xd8>
        }
        else if (lightState == LIGHTS_RIGHT) {
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d10e      	bne.n	8000f0e <_ZN14DashboardState14updateFromUARTEv+0xca>
            outputPortState |= OUTPUT_FR_LIGHT_CTRL;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	78db      	ldrb	r3, [r3, #3]
 8000ef4:	f043 0310 	orr.w	r3, r3, #16
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	70da      	strb	r2, [r3, #3]
            outputPortState &= ~OUTPUT_FL_LIGHT_CTRL;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	78db      	ldrb	r3, [r3, #3]
 8000f02:	f023 0320 	bic.w	r3, r3, #32
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	70da      	strb	r2, [r3, #3]
 8000f0c:	e006      	b.n	8000f1c <_ZN14DashboardState14updateFromUARTEv+0xd8>
        }
        else {
            outputPortState &= ~(OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	78db      	ldrb	r3, [r3, #3]
 8000f12:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	70da      	strb	r2, [r3, #3]
        }
    }

    // if headlight should be on  
    if (uart_rx & BUTTON_HEADLIGHTS) {
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7f9b      	ldrb	r3, [r3, #30]
 8000f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d00a      	beq.n	8000f3e <_ZN14DashboardState14updateFromUARTEv+0xfa>
        outputPortState |= (OUTPUT_R_HEAD_CTRL | OUTPUT_L_HEAD_CTRL);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	78db      	ldrb	r3, [r3, #3]
 8000f2c:	f043 030c 	orr.w	r3, r3, #12
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	70da      	strb	r2, [r3, #3]
        headlightState = 1;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	719a      	strb	r2, [r3, #6]
 8000f3c:	e009      	b.n	8000f52 <_ZN14DashboardState14updateFromUARTEv+0x10e>
    }
    else  {
        outputPortState &= ~(OUTPUT_R_HEAD_CTRL | OUTPUT_L_HEAD_CTRL);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	78db      	ldrb	r3, [r3, #3]
 8000f42:	f023 030c 	bic.w	r3, r3, #12
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	70da      	strb	r2, [r3, #3]
        headlightState = 0;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	719a      	strb	r2, [r3, #6]
    }

    // if horn should be on
    if (uart_rx & BUTTON_HORN) {
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	7f9b      	ldrb	r3, [r3, #30]
 8000f56:	f003 0320 	and.w	r3, r3, #32
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d00a      	beq.n	8000f74 <_ZN14DashboardState14updateFromUARTEv+0x130>
        outputPortState |= OUTPUT_HORN_CTRL;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	78db      	ldrb	r3, [r3, #3]
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	70da      	strb	r2, [r3, #3]
        hornState = 1;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	711a      	strb	r2, [r3, #4]
 8000f72:	e009      	b.n	8000f88 <_ZN14DashboardState14updateFromUARTEv+0x144>
    }
    else {
        outputPortState &= ~OUTPUT_HORN_CTRL;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	78db      	ldrb	r3, [r3, #3]
 8000f78:	f023 0302 	bic.w	r3, r3, #2
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	70da      	strb	r2, [r3, #3]
        hornState = 0;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	711a      	strb	r2, [r3, #4]
    }

    // if fan should be on
    if (uart_rx & BUTTON_FAN) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7f9b      	ldrb	r3, [r3, #30]
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d00a      	beq.n	8000faa <_ZN14DashboardState14updateFromUARTEv+0x166>
        outputPortState |= OUTPUT_FAN_CTRL;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	78db      	ldrb	r3, [r3, #3]
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	70da      	strb	r2, [r3, #3]
        fanState = 1;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	715a      	strb	r2, [r3, #5]
 8000fa8:	e009      	b.n	8000fbe <_ZN14DashboardState14updateFromUARTEv+0x17a>
    }
    else {
        outputPortState &= ~OUTPUT_FAN_CTRL;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	78db      	ldrb	r3, [r3, #3]
 8000fae:	f023 0301 	bic.w	r3, r3, #1
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	70da      	strb	r2, [r3, #3]
        fanState = 0;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	715a      	strb	r2, [r3, #5]
    }

    // if PTT should be on
    if (uart_rx & BUTTON_PTT) {
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7f9b      	ldrb	r3, [r3, #30]
 8000fc2:	f003 0310 	and.w	r3, r3, #16
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <_ZN14DashboardState14updateFromUARTEv+0x18e>
        pttState = 1;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	71da      	strb	r2, [r3, #7]
 8000fd0:	e002      	b.n	8000fd8 <_ZN14DashboardState14updateFromUARTEv+0x194>
    }
    else {
        pttState = 0;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	71da      	strb	r2, [r3, #7]
    }

    // TODO: do something with displayState cause this isn't setup to go anywhere
    if (uart_rx & BUTTON_DISPLAY) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7f9b      	ldrb	r3, [r3, #30]
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <_ZN14DashboardState14updateFromUARTEv+0x1a8>
        displayState = 1;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	721a      	strb	r2, [r3, #8]
    }
    else {
        displayState = 0;
    }

}
 8000fea:	e002      	b.n	8000ff2 <_ZN14DashboardState14updateFromUARTEv+0x1ae>
        displayState = 0;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	721a      	strb	r2, [r3, #8]
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>:

HAL_StatusTypeDef DashboardState::writeToPort(TCAL9538RSVR &U7) {
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
	uint8_t inverted = ~outputPortState;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	78db      	ldrb	r3, [r3, #3]
 8001008:	43db      	mvns	r3, r3
 800100a:	b2db      	uxtb	r3, r3
 800100c:	73fb      	strb	r3, [r7, #15]
    return TCAL9538RSVR_SetOutput(&U7, &inverted); // write to output port
 800100e:	f107 030f 	add.w	r3, r7, #15
 8001012:	4619      	mov	r1, r3
 8001014:	6838      	ldr	r0, [r7, #0]
 8001016:	f003 faed 	bl	80045f4 <TCAL9538RSVR_SetOutput>
 800101a:	4603      	mov	r3, r0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <_ZN14DashboardState11blinkLightsEv>:

void DashboardState::blinkLights() {
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    switch (lightState) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b03      	cmp	r3, #3
 8001032:	d82b      	bhi.n	800108c <_ZN14DashboardState11blinkLightsEv+0x68>
 8001034:	a201      	add	r2, pc, #4	@ (adr r2, 800103c <_ZN14DashboardState11blinkLightsEv+0x18>)
 8001036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103a:	bf00      	nop
 800103c:	0800107d 	.word	0x0800107d
 8001040:	0800105d 	.word	0x0800105d
 8001044:	0800106d 	.word	0x0800106d
 8001048:	0800104d 	.word	0x0800104d
        case LIGHTS_HAZARD:
            outputPortState ^= (OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	78db      	ldrb	r3, [r3, #3]
 8001050:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8001054:	b2da      	uxtb	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	70da      	strb	r2, [r3, #3]
            break;
 800105a:	e017      	b.n	800108c <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_LEFT:
            outputPortState ^= OUTPUT_FL_LIGHT_CTRL;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	78db      	ldrb	r3, [r3, #3]
 8001060:	f083 0320 	eor.w	r3, r3, #32
 8001064:	b2da      	uxtb	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	70da      	strb	r2, [r3, #3]
            break;
 800106a:	e00f      	b.n	800108c <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_RIGHT:
            outputPortState ^= OUTPUT_FR_LIGHT_CTRL;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	78db      	ldrb	r3, [r3, #3]
 8001070:	f083 0310 	eor.w	r3, r3, #16
 8001074:	b2da      	uxtb	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	70da      	strb	r2, [r3, #3]
            break;
 800107a:	e007      	b.n	800108c <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_NONE:
            outputPortState &= ~(OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	78db      	ldrb	r3, [r3, #3]
 8001080:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001084:	b2da      	uxtb	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	70da      	strb	r2, [r3, #3]
            break;
 800108a:	bf00      	nop
    }
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <_ZN14DashboardState18getSuppBattVoltageEv>:

float DashboardState::getSuppBattVoltage() {
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    // convert to votls from mV
    uint16_t voltage = (supp_batt_voltage_msb << 8) | supp_batt_voltage_lsb;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	81fb      	strh	r3, [r7, #14]
    return (float)voltage / 1000.0f;
 80010b8:	89fb      	ldrh	r3, [r7, #14]
 80010ba:	ee07 3a90 	vmov	s15, r3
 80010be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010c2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80010dc <_ZN14DashboardState18getSuppBattVoltageEv+0x44>
 80010c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010ca:	eef0 7a66 	vmov.f32	s15, s13
}
 80010ce:	eeb0 0a67 	vmov.f32	s0, s15
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	447a0000 	.word	0x447a0000

080010e0 <_ZN14DashboardState13getMotorPowerEv>:

float DashboardState::getMotorPower() {
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
    // P = V * I
    uint16_t temp;

    // voltage (encoded in 0.5V)
    temp = (motor_voltage_msb << 8) | motor_voltage_lsb;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	827b      	strh	r3, [r7, #18]
    float voltage = (float)temp / 2.0f;
 8001100:	8a7b      	ldrh	r3, [r7, #18]
 8001102:	ee07 3a90 	vmov	s15, r3
 8001106:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800110a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800110e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001112:	edc7 7a03 	vstr	s15, [r7, #12]

    // current (encoded in 1A)
    temp = (motor_current_msb << 8) | motor_current_lsb;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	b21a      	sxth	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001126:	b21b      	sxth	r3, r3
 8001128:	4313      	orrs	r3, r2
 800112a:	b21b      	sxth	r3, r3
 800112c:	827b      	strh	r3, [r7, #18]
    float current = (float)temp;
 800112e:	8a7b      	ldrh	r3, [r7, #18]
 8001130:	ee07 3a90 	vmov	s15, r3
 8001134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001138:	edc7 7a05 	vstr	s15, [r7, #20]

    if (!motor_current_direction) {
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001142:	2b00      	cmp	r3, #0
 8001144:	d105      	bne.n	8001152 <_ZN14DashboardState13getMotorPowerEv+0x72>
        current *= -1.0f;
 8001146:	edd7 7a05 	vldr	s15, [r7, #20]
 800114a:	eef1 7a67 	vneg.f32	s15, s15
 800114e:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    return voltage * current;
 8001152:	ed97 7a03 	vldr	s14, [r7, #12]
 8001156:	edd7 7a05 	vldr	s15, [r7, #20]
 800115a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800115e:	eeb0 0a67 	vmov.f32	s0, s15
 8001162:	371c      	adds	r7, #28
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	0000      	movs	r0, r0
	...

08001170 <_ZN14DashboardState11getCarSpeedEv>:

float DashboardState::getCarSpeed() {
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	@ 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    uint32_t motor_rpm = (motor_rpm_msb << 8) | motor_rpm_lsb;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8001186:	4313      	orrs	r3, r2
 8001188:	627b      	str	r3, [r7, #36]	@ 0x24
    // convert to m/s from rpm
    double inches_per_sec = (motor_rpm * WHEEL_CIRCUMFERENCE_IN) / 60;
 800118a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800118c:	f7ff f9c2 	bl	8000514 <__aeabi_ui2d>
 8001190:	a31e      	add	r3, pc, #120	@ (adr r3, 800120c <_ZN14DashboardState11getCarSpeedEv+0x9c>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fa37 	bl	8000608 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <_ZN14DashboardState11getCarSpeedEv+0x98>)
 80011a8:	f7ff fb58 	bl	800085c <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double miles_per_sec = inches_per_sec / 63360; // 1 mile = 63360 inches
 80011b4:	a310      	add	r3, pc, #64	@ (adr r3, 80011f8 <_ZN14DashboardState11getCarSpeedEv+0x88>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011be:	f7ff fb4d 	bl	800085c <__aeabi_ddiv>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    float miles_per_hour = (miles_per_sec * 3600); // 1 hour = 3600 seconds
 80011ca:	a30d      	add	r3, pc, #52	@ (adr r3, 8001200 <_ZN14DashboardState11getCarSpeedEv+0x90>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011d4:	f7ff fa18 	bl	8000608 <__aeabi_dmul>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fc24 	bl	8000a2c <__aeabi_d2f>
 80011e4:	4603      	mov	r3, r0
 80011e6:	60fb      	str	r3, [r7, #12]
    return miles_per_hour;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	ee07 3a90 	vmov	s15, r3
}
 80011ee:	eeb0 0a67 	vmov.f32	s0, s15
 80011f2:	3728      	adds	r7, #40	@ 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	00000000 	.word	0x00000000
 80011fc:	40eef000 	.word	0x40eef000
 8001200:	00000000 	.word	0x00000000
 8001204:	40ac2000 	.word	0x40ac2000
 8001208:	404e0000 	.word	0x404e0000
 800120c:	147ae148 	.word	0x147ae148
 8001210:	405147ae 	.word	0x405147ae

08001214 <CPP_UserSetup>:

DashboardState dashboardState; // Dashboard state object

ILI9341 screen(320, 240);

void CPP_UserSetup(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af02      	add	r7, sp, #8
    // Make sure that timer priorities are configured correctly
    HAL_Delay(10);
 800121a:	200a      	movs	r0, #10
 800121c:	f003 fa96 	bl	800474c <HAL_Delay>

	dashboardState.reset(); // reset dashboard state
 8001220:	483b      	ldr	r0, [pc, #236]	@ (8001310 <CPP_UserSetup+0xfc>)
 8001222:	f7ff fdcb 	bl	8000dbc <_ZN14DashboardState5resetEv>

    dma_flag = 0;
 8001226:	4b3b      	ldr	r3, [pc, #236]	@ (8001314 <CPP_UserSetup+0x100>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
    cc_enable = 0;
 800122c:	4b3a      	ldr	r3, [pc, #232]	@ (8001318 <CPP_UserSetup+0x104>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]

	// -------------------------
	// CAN INIT
	// -------------------------
	Init_CAN_Filter1(hcan1); // set up CAN filter for CAN1
 8001232:	483a      	ldr	r0, [pc, #232]	@ (800131c <CPP_UserSetup+0x108>)
 8001234:	f000 fec8 	bl	8001fc8 <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef>
	HAL_CAN_Start(&hcan1); // start CAN1
 8001238:	4838      	ldr	r0, [pc, #224]	@ (800131c <CPP_UserSetup+0x108>)
 800123a:	f005 f85b 	bl	80062f4 <HAL_CAN_Start>
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800123e:	2102      	movs	r1, #2
 8001240:	4836      	ldr	r0, [pc, #216]	@ (800131c <CPP_UserSetup+0x108>)
 8001242:	f005 fac2 	bl	80067ca <HAL_CAN_ActivateNotification>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	bf14      	ite	ne
 800124c:	2301      	movne	r3, #1
 800124e:	2300      	moveq	r3, #0
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <CPP_UserSetup+0x46>
	{
		Error_Handler();
 8001256:	f001 fd5f 	bl	8002d18 <Error_Handler>

	// -------------------------
	// GPIO EXPANDERS INIT
	// -------------------------

    if (TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0xFF, 0x00) != HAL_OK) { Error_Handler(); } // inputs
 800125a:	2300      	movs	r3, #0
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	23ff      	movs	r3, #255	@ 0xff
 8001260:	2202      	movs	r2, #2
 8001262:	492f      	ldr	r1, [pc, #188]	@ (8001320 <CPP_UserSetup+0x10c>)
 8001264:	482f      	ldr	r0, [pc, #188]	@ (8001324 <CPP_UserSetup+0x110>)
 8001266:	f003 f908 	bl	800447a <TCAL9538RSVR_INIT>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf14      	ite	ne
 8001270:	2301      	movne	r3, #1
 8001272:	2300      	moveq	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <CPP_UserSetup+0x6a>
 800127a:	f001 fd4d 	bl	8002d18 <Error_Handler>
    if (TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b00111111, 0b11000000) != HAL_OK) { Error_Handler(); }
 800127e:	23c0      	movs	r3, #192	@ 0xc0
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	233f      	movs	r3, #63	@ 0x3f
 8001284:	2201      	movs	r2, #1
 8001286:	4926      	ldr	r1, [pc, #152]	@ (8001320 <CPP_UserSetup+0x10c>)
 8001288:	4827      	ldr	r0, [pc, #156]	@ (8001328 <CPP_UserSetup+0x114>)
 800128a:	f003 f8f6 	bl	800447a <TCAL9538RSVR_INIT>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	bf14      	ite	ne
 8001294:	2301      	movne	r3, #1
 8001296:	2300      	moveq	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <CPP_UserSetup+0x8e>
 800129e:	f001 fd3b 	bl	8002d18 <Error_Handler>
    if (TCAL9538RSVR_INIT(&U7, &hi2c4, 0x00, 0b00000000, 0b00000000) != HAL_OK) { Error_Handler(); } // output
 80012a2:	2300      	movs	r3, #0
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2300      	movs	r3, #0
 80012a8:	2200      	movs	r2, #0
 80012aa:	491d      	ldr	r1, [pc, #116]	@ (8001320 <CPP_UserSetup+0x10c>)
 80012ac:	481f      	ldr	r0, [pc, #124]	@ (800132c <CPP_UserSetup+0x118>)
 80012ae:	f003 f8e4 	bl	800447a <TCAL9538RSVR_INIT>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	bf14      	ite	ne
 80012b8:	2301      	movne	r3, #1
 80012ba:	2300      	moveq	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <CPP_UserSetup+0xb2>
 80012c2:	f001 fd29 	bl	8002d18 <Error_Handler>

    // set outputs to low to start
	if (dashboardState.writeToPort(U7) != HAL_OK) { Error_Handler(); }
 80012c6:	4919      	ldr	r1, [pc, #100]	@ (800132c <CPP_UserSetup+0x118>)
 80012c8:	4811      	ldr	r0, [pc, #68]	@ (8001310 <CPP_UserSetup+0xfc>)
 80012ca:	f7ff fe96 	bl	8000ffa <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	bf14      	ite	ne
 80012d4:	2301      	movne	r3, #1
 80012d6:	2300      	moveq	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <CPP_UserSetup+0xce>
 80012de:	f001 fd1b 	bl	8002d18 <Error_Handler>

	// Set up UART4 for receiving data from the steering wheel
	HAL_UART_Receive_IT(&huart4, &dashboardState.uart_rx, 1); // enable uart interrupt
 80012e2:	2201      	movs	r2, #1
 80012e4:	4912      	ldr	r1, [pc, #72]	@ (8001330 <CPP_UserSetup+0x11c>)
 80012e6:	4813      	ldr	r0, [pc, #76]	@ (8001334 <CPP_UserSetup+0x120>)
 80012e8:	f009 f950 	bl	800a58c <HAL_UART_Receive_IT>

	// -------------------------
	// SCREEN INIT 
	// -------------------------
	
	HAL_Delay(100); // wait for screen to power on
 80012ec:	2064      	movs	r0, #100	@ 0x64
 80012ee:	f003 fa2d 	bl	800474c <HAL_Delay>
    screen.Init();
 80012f2:	4811      	ldr	r0, [pc, #68]	@ (8001338 <CPP_UserSetup+0x124>)
 80012f4:	f002 f9dc 	bl	80036b0 <_ZN7ILI93414InitEv>
    screen.SetRotation(3);
 80012f8:	2103      	movs	r1, #3
 80012fa:	480f      	ldr	r0, [pc, #60]	@ (8001338 <CPP_UserSetup+0x124>)
 80012fc:	f002 fd62 	bl	8003dc4 <_ZN7ILI934111SetRotationEh>
    screen.ClearScreen(RGB565_WHITE);
 8001300:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001304:	480c      	ldr	r0, [pc, #48]	@ (8001338 <CPP_UserSetup+0x124>)
 8001306:	f002 fc92 	bl	8003c2e <_ZN7ILI934111ClearScreenEt>
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000000 	.word	0x20000000
 8001314:	200000d4 	.word	0x200000d4
 8001318:	200000d5 	.word	0x200000d5
 800131c:	200001fc 	.word	0x200001fc
 8001320:	2000024c 	.word	0x2000024c
 8001324:	200000a8 	.word	0x200000a8
 8001328:	200000b0 	.word	0x200000b0
 800132c:	200000b8 	.word	0x200000b8
 8001330:	2000001e 	.word	0x2000001e
 8001334:	20000398 	.word	0x20000398
 8001338:	200000d8 	.word	0x200000d8

0800133c <_Z11StartTask01Pv>:


void StartTask01(void *argument)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08e      	sub	sp, #56	@ 0x38
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = { 0 };
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]

	TxHeader.IDE = CAN_ID_EXT;
 8001350:	2304      	movs	r3, #4
 8001352:	623b      	str	r3, [r7, #32]
	TxHeader.ExtId = CAN_ID_MITSUBA_MOTOR_REQUEST;
 8001354:	4b1d      	ldr	r3, [pc, #116]	@ (80013cc <_Z11StartTask01Pv+0x90>)
 8001356:	61fb      	str	r3, [r7, #28]
	TxHeader.RTR = CAN_RTR_DATA;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.DLC = 1;
 800135c:	2301      	movs	r3, #1
 800135e:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxData[0] = 1; // bit 0 = request for frame 0
 8001360:	2301      	movs	r3, #1
 8001362:	743b      	strb	r3, [r7, #16]

  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8001364:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001368:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800136c:	f006 f984 	bl	8007678 <HAL_GPIO_TogglePin>
	// also send can message to request frame 0 from mitsuba motor

	int wait = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	637b      	str	r3, [r7, #52]	@ 0x34
	while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) && wait++ < 10000)
 8001374:	e002      	b.n	800137c <_Z11StartTask01Pv+0x40>
		osDelay(1);
 8001376:	2001      	movs	r0, #1
 8001378:	f00a fd3a 	bl	800bdf0 <osDelay>
	while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) && wait++ < 10000)
 800137c:	4814      	ldr	r0, [pc, #80]	@ (80013d0 <_Z11StartTask01Pv+0x94>)
 800137e:	f005 f8cd 	bl	800651c <HAL_CAN_GetTxMailboxesFreeLevel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d108      	bne.n	800139a <_Z11StartTask01Pv+0x5e>
 8001388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	637a      	str	r2, [r7, #52]	@ 0x34
 800138e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001392:	4293      	cmp	r3, r2
 8001394:	dc01      	bgt.n	800139a <_Z11StartTask01Pv+0x5e>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <_Z11StartTask01Pv+0x60>
 800139a:	2300      	movs	r3, #0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1ea      	bne.n	8001376 <_Z11StartTask01Pv+0x3a>
	HAL_StatusTypeDef status;
	status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	f107 0210 	add.w	r2, r7, #16
 80013a8:	f107 0118 	add.w	r1, r7, #24
 80013ac:	4808      	ldr	r0, [pc, #32]	@ (80013d0 <_Z11StartTask01Pv+0x94>)
 80013ae:	f004 ffe5 	bl	800637c <HAL_CAN_AddTxMessage>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	if (status == HAL_ERROR)
 80013b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <_Z11StartTask01Pv+0x88>
	{
		Error_Handler();
 80013c0:	f001 fcaa 	bl	8002d18 <Error_Handler>
	}

    osDelay(200);
 80013c4:	20c8      	movs	r0, #200	@ 0xc8
 80013c6:	f00a fd13 	bl	800bdf0 <osDelay>
  }
 80013ca:	e7cb      	b.n	8001364 <_Z11StartTask01Pv+0x28>
 80013cc:	08f89540 	.word	0x08f89540
 80013d0:	200001fc 	.word	0x200001fc

080013d4 <_Z11StartTask02Pv>:
  /* USER CODE END 5 */
}

void StartTask02(void *argument)
{
 80013d4:	b5b0      	push	{r4, r5, r7, lr}
 80013d6:	b094      	sub	sp, #80	@ 0x50
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

	uint16_t adc_var_avg = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

	int HAL_CAN_BUSY = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint64_t messages_sent = 0;
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	static uint8_t update_cc = 0;

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
	uint32_t TxMailbox = { 0 };
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.StdId = 0x0; // 11 bit Identifier
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8001406:	2300      	movs	r3, #0
 8001408:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxHeader.DLC = 8; // 8 bytes being transmitted
 800140a:	2308      	movs	r3, #8
 800140c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	TxData[0] = 1;
 800140e:	2301      	movs	r3, #1
 8001410:	753b      	strb	r3, [r7, #20]
	uint8_t adc_data[2];



  	  // Transmit over CAN
  	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	f107 0214 	add.w	r2, r7, #20
 800141a:	f107 011c 	add.w	r1, r7, #28
 800141e:	484e      	ldr	r0, [pc, #312]	@ (8001558 <_Z11StartTask02Pv+0x184>)
 8001420:	f004 ffac 	bl	800637c <HAL_CAN_AddTxMessage>


  for (;;)
  {

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8001424:	220a      	movs	r2, #10
 8001426:	494d      	ldr	r1, [pc, #308]	@ (800155c <_Z11StartTask02Pv+0x188>)
 8001428:	484d      	ldr	r0, [pc, #308]	@ (8001560 <_Z11StartTask02Pv+0x18c>)
 800142a:	f003 fd3d 	bl	8004ea8 <HAL_ADC_Start_DMA>
	// Start ADC with DMA
	while (!(dma_flag));
 800142e:	bf00      	nop
 8001430:	4b4c      	ldr	r3, [pc, #304]	@ (8001564 <_Z11StartTask02Pv+0x190>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	bf0c      	ite	eq
 800143a:	2301      	moveq	r3, #1
 800143c:	2300      	movne	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f5      	bne.n	8001430 <_Z11StartTask02Pv+0x5c>

	// Stop ADC with DMA
	HAL_ADC_Stop_DMA(&hadc1);
 8001444:	4846      	ldr	r0, [pc, #280]	@ (8001560 <_Z11StartTask02Pv+0x18c>)
 8001446:	f003 fdeb 	bl	8005020 <HAL_ADC_Stop_DMA>
	dma_flag = 0;
 800144a:	4b46      	ldr	r3, [pc, #280]	@ (8001564 <_Z11StartTask02Pv+0x190>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
	adc_var_avg = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	// Copy ADC buffer and compute average
	for (int i = 0; i < ADC_BUF_LEN; i++)
 8001456:	2300      	movs	r3, #0
 8001458:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800145a:	e00b      	b.n	8001474 <_Z11StartTask02Pv+0xa0>
	{
		adc_var_avg += adc_buf[i];
 800145c:	4a3f      	ldr	r2, [pc, #252]	@ (800155c <_Z11StartTask02Pv+0x188>)
 800145e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001460:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001464:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001468:	4413      	add	r3, r2
 800146a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	for (int i = 0; i < ADC_BUF_LEN; i++)
 800146e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001470:	3301      	adds	r3, #1
 8001472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001476:	2b09      	cmp	r3, #9
 8001478:	ddf0      	ble.n	800145c <_Z11StartTask02Pv+0x88>
	}
	adc_var_avg /= ADC_BUF_LEN;
 800147a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800147e:	4a3a      	ldr	r2, [pc, #232]	@ (8001568 <_Z11StartTask02Pv+0x194>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	08db      	lsrs	r3, r3, #3
 8001486:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e


	adc_data[0] = adc_var_avg & 0xFF;
 800148a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800148e:	b2db      	uxtb	r3, r3
 8001490:	733b      	strb	r3, [r7, #12]
	adc_data[1] = (adc_var_avg >> 8) & 0x0F;
 8001492:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	f003 030f 	and.w	r3, r3, #15
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	737b      	strb	r3, [r7, #13]

	if (cc_enable)
 80014a4:	4b31      	ldr	r3, [pc, #196]	@ (800156c <_Z11StartTask02Pv+0x198>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00b      	beq.n	80014c4 <_Z11StartTask02Pv+0xf0>
	{
		if (update_cc)
 80014ac:	4b30      	ldr	r3, [pc, #192]	@ (8001570 <_Z11StartTask02Pv+0x19c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00e      	beq.n	80014d2 <_Z11StartTask02Pv+0xfe>
		{
			TxData[5] = adc_data[0];
 80014b4:	7b3b      	ldrb	r3, [r7, #12]
 80014b6:	767b      	strb	r3, [r7, #25]
			TxData[6] = adc_data[1];
 80014b8:	7b7b      	ldrb	r3, [r7, #13]
 80014ba:	76bb      	strb	r3, [r7, #26]
			update_cc = 0;
 80014bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001570 <_Z11StartTask02Pv+0x19c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
 80014c2:	e006      	b.n	80014d2 <_Z11StartTask02Pv+0xfe>
		}
	}
	else
	{
		TxData[5] = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	767b      	strb	r3, [r7, #25]
		TxData[6] = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	76bb      	strb	r3, [r7, #26]
		update_cc = 1;
 80014cc:	4b28      	ldr	r3, [pc, #160]	@ (8001570 <_Z11StartTask02Pv+0x19c>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
	}


	TxData[0] = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	753b      	strb	r3, [r7, #20]
	TxData[1] = adc_data[0];
 80014d6:	7b3b      	ldrb	r3, [r7, #12]
 80014d8:	757b      	strb	r3, [r7, #21]
	TxData[2] = adc_data[1];
 80014da:	7b7b      	ldrb	r3, [r7, #13]
 80014dc:	75bb      	strb	r3, [r7, #22]
	//Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
    // Wait until the ADC DMA completes
	  // Send CAN messages
	  int wait = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	63bb      	str	r3, [r7, #56]	@ 0x38
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) && wait++ < 10000)
 80014e2:	e002      	b.n	80014ea <_Z11StartTask02Pv+0x116>
		osDelay(1);
 80014e4:	2001      	movs	r0, #1
 80014e6:	f00a fc83 	bl	800bdf0 <osDelay>
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) && wait++ < 10000)
 80014ea:	481b      	ldr	r0, [pc, #108]	@ (8001558 <_Z11StartTask02Pv+0x184>)
 80014ec:	f005 f816 	bl	800651c <HAL_CAN_GetTxMailboxesFreeLevel>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d108      	bne.n	8001508 <_Z11StartTask02Pv+0x134>
 80014f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	63ba      	str	r2, [r7, #56]	@ 0x38
 80014fc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001500:	4293      	cmp	r3, r2
 8001502:	dc01      	bgt.n	8001508 <_Z11StartTask02Pv+0x134>
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <_Z11StartTask02Pv+0x136>
 8001508:	2300      	movs	r3, #0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1ea      	bne.n	80014e4 <_Z11StartTask02Pv+0x110>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	f107 0214 	add.w	r2, r7, #20
 8001516:	f107 011c 	add.w	r1, r7, #28
 800151a:	480f      	ldr	r0, [pc, #60]	@ (8001558 <_Z11StartTask02Pv+0x184>)
 800151c:	f004 ff2e 	bl	800637c <HAL_CAN_AddTxMessage>
 8001520:	4603      	mov	r3, r0
 8001522:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  messages_sent++;
 8001526:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800152a:	1c54      	adds	r4, r2, #1
 800152c:	f143 0500 	adc.w	r5, r3, #0
 8001530:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
	  if (status == HAL_ERROR)
 8001534:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001538:	2b01      	cmp	r3, #1
 800153a:	d102      	bne.n	8001542 <_Z11StartTask02Pv+0x16e>
	  {
		  Error_Handler();
 800153c:	f001 fbec 	bl	8002d18 <Error_Handler>
 8001540:	e006      	b.n	8001550 <_Z11StartTask02Pv+0x17c>
	  }
	  else if (status == HAL_BUSY)
 8001542:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001546:	2b02      	cmp	r3, #2
 8001548:	d102      	bne.n	8001550 <_Z11StartTask02Pv+0x17c>
	  {
		  HAL_CAN_BUSY++;
 800154a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800154c:	3301      	adds	r3, #1
 800154e:	64bb      	str	r3, [r7, #72]	@ 0x48
	  }
    osDelay(20);
 8001550:	2014      	movs	r0, #20
 8001552:	f00a fc4d 	bl	800bdf0 <osDelay>
  }
 8001556:	e765      	b.n	8001424 <_Z11StartTask02Pv+0x50>
 8001558:	200001fc 	.word	0x200001fc
 800155c:	200000c0 	.word	0x200000c0
 8001560:	2000014c 	.word	0x2000014c
 8001564:	200000d4 	.word	0x200000d4
 8001568:	cccccccd 	.word	0xcccccccd
 800156c:	200000d5 	.word	0x200000d5
 8001570:	20000148 	.word	0x20000148

08001574 <_Z11StartTask03Pv>:
  /* USER CODE END StartTask02 */
}

void StartTask03(void *argument)
{
 8001574:	b5b0      	push	{r4, r5, r7, lr}
 8001576:	b092      	sub	sp, #72	@ 0x48
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */

	int debounce_count = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	647b      	str	r3, [r7, #68]	@ 0x44
	int HAL_CAN_BUSY = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	643b      	str	r3, [r7, #64]	@ 0x40
	uint64_t messages_sent = 0;
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = { 0 };
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x7FF; // 11 bit Identifier !!Change!!
 80015a0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80015a4:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.DLC = 8; // 8 bytes being transmitted
 80015aa:	2308      	movs	r3, #8
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxData[0] = 1;
 80015ae:	2301      	movs	r3, #1
 80015b0:	743b      	strb	r3, [r7, #16]

	Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 80015b2:	f107 0310 	add.w	r3, r7, #16
 80015b6:	4a46      	ldr	r2, [pc, #280]	@ (80016d0 <_Z11StartTask03Pv+0x15c>)
 80015b8:	4946      	ldr	r1, [pc, #280]	@ (80016d4 <_Z11StartTask03Pv+0x160>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fb9e 	bl	8001cfc <_Z19Update_CAN_Message1PhS_S_>

	/* Infinite loop */
	for(;;)
	{
	  // Read TCAL Input and update flags
	  if (GPIO_Interrupt_Triggered)
 80015c0:	4b45      	ldr	r3, [pc, #276]	@ (80016d8 <_Z11StartTask03Pv+0x164>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d033      	beq.n	8001630 <_Z11StartTask03Pv+0xbc>
	  {
		  if (debounce_count++ <= 2) {continue;}
 80015c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	647a      	str	r2, [r7, #68]	@ 0x44
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	bfd4      	ite	le
 80015d2:	2301      	movle	r3, #1
 80015d4:	2300      	movgt	r3, #0
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d176      	bne.n	80016ca <_Z11StartTask03Pv+0x156>
		  DASHBOARD_CRITICAL(
 80015dc:	f00c ff4c 	bl	800e478 <vPortEnterCritical>
 80015e0:	483e      	ldr	r0, [pc, #248]	@ (80016dc <_Z11StartTask03Pv+0x168>)
 80015e2:	f002 ffd0 	bl	8004586 <TCAL9538RSVR_HandleInterrupt>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	bf14      	ite	ne
 80015ec:	2301      	movne	r3, #1
 80015ee:	2300      	moveq	r3, #0
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <_Z11StartTask03Pv+0x86>
 80015f6:	f001 fb8f 	bl	8002d18 <Error_Handler>
 80015fa:	4839      	ldr	r0, [pc, #228]	@ (80016e0 <_Z11StartTask03Pv+0x16c>)
 80015fc:	f002 ffc3 	bl	8004586 <TCAL9538RSVR_HandleInterrupt>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	bf14      	ite	ne
 8001606:	2301      	movne	r3, #1
 8001608:	2300      	moveq	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <_Z11StartTask03Pv+0xa0>
 8001610:	f001 fb82 	bl	8002d18 <Error_Handler>
 8001614:	f00c ff62 	bl	800e4dc <vPortExitCritical>
		  	if (TCAL9538RSVR_HandleInterrupt(&U5) != HAL_OK) { Error_Handler(); }
		  	if (TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK){ Error_Handler(); }
		  );

		  Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	4a2c      	ldr	r2, [pc, #176]	@ (80016d0 <_Z11StartTask03Pv+0x15c>)
 800161e:	492d      	ldr	r1, [pc, #180]	@ (80016d4 <_Z11StartTask03Pv+0x160>)
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fb6b 	bl	8001cfc <_Z19Update_CAN_Message1PhS_S_>
		  GPIO_Interrupt_Triggered = 0;
 8001626:	4b2c      	ldr	r3, [pc, #176]	@ (80016d8 <_Z11StartTask03Pv+0x164>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
		  debounce_count = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	647b      	str	r3, [r7, #68]	@ 0x44
	  }

	  if (dashboardState.update_can_message_1) {
 8001630:	4b2c      	ldr	r3, [pc, #176]	@ (80016e4 <_Z11StartTask03Pv+0x170>)
 8001632:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00a      	beq.n	8001650 <_Z11StartTask03Pv+0xdc>
		  Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	4a24      	ldr	r2, [pc, #144]	@ (80016d0 <_Z11StartTask03Pv+0x15c>)
 8001640:	4924      	ldr	r1, [pc, #144]	@ (80016d4 <_Z11StartTask03Pv+0x160>)
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fb5a 	bl	8001cfc <_Z19Update_CAN_Message1PhS_S_>
		  dashboardState.update_can_message_1 = 0;
 8001648:	4b26      	ldr	r3, [pc, #152]	@ (80016e4 <_Z11StartTask03Pv+0x170>)
 800164a:	2200      	movs	r2, #0
 800164c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	  }

	  // Send CAN messages
	  int wait = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	637b      	str	r3, [r7, #52]	@ 0x34
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) && wait++ < 10000)
 8001654:	e002      	b.n	800165c <_Z11StartTask03Pv+0xe8>
 		osDelay(1);
 8001656:	2001      	movs	r0, #1
 8001658:	f00a fbca 	bl	800bdf0 <osDelay>
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) && wait++ < 10000)
 800165c:	4822      	ldr	r0, [pc, #136]	@ (80016e8 <_Z11StartTask03Pv+0x174>)
 800165e:	f004 ff5d 	bl	800651c <HAL_CAN_GetTxMailboxesFreeLevel>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d108      	bne.n	800167a <_Z11StartTask03Pv+0x106>
 8001668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	637a      	str	r2, [r7, #52]	@ 0x34
 800166e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001672:	4293      	cmp	r3, r2
 8001674:	dc01      	bgt.n	800167a <_Z11StartTask03Pv+0x106>
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <_Z11StartTask03Pv+0x108>
 800167a:	2300      	movs	r3, #0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1ea      	bne.n	8001656 <_Z11StartTask03Pv+0xe2>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	f107 0210 	add.w	r2, r7, #16
 8001688:	f107 0118 	add.w	r1, r7, #24
 800168c:	4816      	ldr	r0, [pc, #88]	@ (80016e8 <_Z11StartTask03Pv+0x174>)
 800168e:	f004 fe75 	bl	800637c <HAL_CAN_AddTxMessage>
 8001692:	4603      	mov	r3, r0
 8001694:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	  messages_sent++;
 8001698:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800169c:	1c54      	adds	r4, r2, #1
 800169e:	f143 0500 	adc.w	r5, r3, #0
 80016a2:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
	  if (status == HAL_ERROR)
 80016a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d102      	bne.n	80016b4 <_Z11StartTask03Pv+0x140>
	  {
		  Error_Handler();
 80016ae:	f001 fb33 	bl	8002d18 <Error_Handler>
 80016b2:	e006      	b.n	80016c2 <_Z11StartTask03Pv+0x14e>
	  }
	  else if (status == HAL_BUSY)
 80016b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d102      	bne.n	80016c2 <_Z11StartTask03Pv+0x14e>
	  {
		  HAL_CAN_BUSY++;
 80016bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016be:	3301      	adds	r3, #1
 80016c0:	643b      	str	r3, [r7, #64]	@ 0x40
	  }
	  osDelay(50);
 80016c2:	2032      	movs	r0, #50	@ 0x32
 80016c4:	f00a fb94 	bl	800bdf0 <osDelay>
 80016c8:	e77a      	b.n	80015c0 <_Z11StartTask03Pv+0x4c>
		  if (debounce_count++ <= 2) {continue;}
 80016ca:	bf00      	nop
  }
 80016cc:	e778      	b.n	80015c0 <_Z11StartTask03Pv+0x4c>
 80016ce:	bf00      	nop
 80016d0:	200000b5 	.word	0x200000b5
 80016d4:	200000ad 	.word	0x200000ad
 80016d8:	200000d6 	.word	0x200000d6
 80016dc:	200000a8 	.word	0x200000a8
 80016e0:	200000b0 	.word	0x200000b0
 80016e4:	20000000 	.word	0x20000000
 80016e8:	200001fc 	.word	0x200001fc

080016ec <_Z11StartTask04Pv>:
  /* USER CODE END StartTask03 */
}


void StartTask04(void *argument)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */

  dashboardState.lastBlinkTime = HAL_GetTick(); // initialize last blink time
 80016f4:	f003 f81e 	bl	8004734 <HAL_GetTick>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4a20      	ldr	r2, [pc, #128]	@ (800177c <_Z11StartTask04Pv+0x90>)
 80016fc:	60d3      	str	r3, [r2, #12]

  /* Infinite loop */
  for(;;)
  {

    uint32_t currentTick = HAL_GetTick();
 80016fe:	f003 f819 	bl	8004734 <HAL_GetTick>
 8001702:	60f8      	str	r0, [r7, #12]

    if (currentTick - dashboardState.lastBlinkTime > BLINK_INTERVAL_MS)
 8001704:	4b1d      	ldr	r3, [pc, #116]	@ (800177c <_Z11StartTask04Pv+0x90>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001710:	d909      	bls.n	8001726 <_Z11StartTask04Pv+0x3a>
    {
      	dashboardState.lastBlinkTime = currentTick;
 8001712:	4a1a      	ldr	r2, [pc, #104]	@ (800177c <_Z11StartTask04Pv+0x90>)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	60d3      	str	r3, [r2, #12]
		// enter critical section because we do read-modify-write operations in that function
		DASHBOARD_CRITICAL(
 8001718:	f00c feae 	bl	800e478 <vPortEnterCritical>
 800171c:	4817      	ldr	r0, [pc, #92]	@ (800177c <_Z11StartTask04Pv+0x90>)
 800171e:	f7ff fc81 	bl	8001024 <_ZN14DashboardState11blinkLightsEv>
 8001722:	f00c fedb 	bl	800e4dc <vPortExitCritical>
			dashboardState.blinkLights()
	  	);
	}

	if (dashboardState.updateRequested) {
 8001726:	4b15      	ldr	r3, [pc, #84]	@ (800177c <_Z11StartTask04Pv+0x90>)
 8001728:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00e      	beq.n	800174e <_Z11StartTask04Pv+0x62>
		// enter critical section because we do read-modify-write operations in that function
		DASHBOARD_CRITICAL(
 8001730:	f00c fea2 	bl	800e478 <vPortEnterCritical>
 8001734:	4811      	ldr	r0, [pc, #68]	@ (800177c <_Z11StartTask04Pv+0x90>)
 8001736:	f7ff fb85 	bl	8000e44 <_ZN14DashboardState14updateFromUARTEv>
 800173a:	f00c fecf 	bl	800e4dc <vPortExitCritical>
			dashboardState.updateFromUART()
		);
		dashboardState.updateRequested = 0; // reset update requested flag
 800173e:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <_Z11StartTask04Pv+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2020 	strb.w	r2, [r3, #32]
		dashboardState.update_can_message_1 = 1; // set flag to update CAN message 1
 8001746:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <_Z11StartTask04Pv+0x90>)
 8001748:	2201      	movs	r2, #1
 800174a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	}

	DASHBOARD_CRITICAL(
 800174e:	f00c fe93 	bl	800e478 <vPortEnterCritical>
 8001752:	490b      	ldr	r1, [pc, #44]	@ (8001780 <_Z11StartTask04Pv+0x94>)
 8001754:	4809      	ldr	r0, [pc, #36]	@ (800177c <_Z11StartTask04Pv+0x90>)
 8001756:	f7ff fc50 	bl	8000ffa <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf14      	ite	ne
 8001760:	2301      	movne	r3, #1
 8001762:	2300      	moveq	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <_Z11StartTask04Pv+0x82>
 800176a:	f001 fad5 	bl	8002d18 <Error_Handler>
 800176e:	f00c feb5 	bl	800e4dc <vPortExitCritical>
		if (dashboardState.writeToPort(U7) != HAL_OK) { Error_Handler(); } // write to output port
	);

    osDelay(50);
 8001772:	2032      	movs	r0, #50	@ 0x32
 8001774:	f00a fb3c 	bl	800bdf0 <osDelay>
  }
 8001778:	e7c1      	b.n	80016fe <_Z11StartTask04Pv+0x12>
 800177a:	bf00      	nop
 800177c:	20000000 	.word	0x20000000
 8001780:	200000b8 	.word	0x200000b8

08001784 <_Z11StartTask05Pv>:
  /* USER CODE END StartTask04 */
}


void StartTask05(void *argument)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b094      	sub	sp, #80	@ 0x50
 8001788:	af02      	add	r7, sp, #8
 800178a:	6078      	str	r0, [r7, #4]
    uint16_t color;
    bool lightStateChanged = false;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    bool bmsStatusChanged = false;
 8001792:	2300      	movs	r3, #0
 8001794:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    bool mcStatusChanged = false;
 8001798:	2300      	movs	r3, #0
 800179a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    bool arrayStatusChanged = false;
 800179e:	2300      	movs	r3, #0
 80017a0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    bool directionChanged = false;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    bool desiredBMSStatusChanged = false;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	bool desiredArrayStatusChanged = false;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
    bool regenBrakingChanged = false;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    bool screenResetStatusChanged = false;
 80017bc:	2300      	movs	r3, #0
 80017be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    Init_Screen(screen);
 80017c2:	48a1      	ldr	r0, [pc, #644]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 80017c4:	f000 fc28 	bl	8002018 <_Z11Init_ScreenR7ILI9341>

    for (;;)
    {
        DASHBOARD_CRITICAL(
 80017c8:	f00c fe56 	bl	800e478 <vPortEnterCritical>
 80017cc:	4b9f      	ldr	r3, [pc, #636]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80017ce:	785a      	ldrb	r2, [r3, #1]
 80017d0:	4b9e      	ldr	r3, [pc, #632]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	bf14      	ite	ne
 80017d8:	2301      	movne	r3, #1
 80017da:	2300      	moveq	r3, #0
 80017dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80017e0:	4b9a      	ldr	r3, [pc, #616]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80017e2:	7d5a      	ldrb	r2, [r3, #21]
 80017e4:	4b99      	ldr	r3, [pc, #612]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80017e6:	7c1b      	ldrb	r3, [r3, #16]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	bf14      	ite	ne
 80017ec:	2301      	movne	r3, #1
 80017ee:	2300      	moveq	r3, #0
 80017f0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80017f4:	4b95      	ldr	r3, [pc, #596]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80017f6:	7d9a      	ldrb	r2, [r3, #22]
 80017f8:	4b94      	ldr	r3, [pc, #592]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80017fa:	7c5b      	ldrb	r3, [r3, #17]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	bf14      	ite	ne
 8001800:	2301      	movne	r3, #1
 8001802:	2300      	moveq	r3, #0
 8001804:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8001808:	4b90      	ldr	r3, [pc, #576]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800180a:	7dda      	ldrb	r2, [r3, #23]
 800180c:	4b8f      	ldr	r3, [pc, #572]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800180e:	7c9b      	ldrb	r3, [r3, #18]
 8001810:	429a      	cmp	r2, r3
 8001812:	bf14      	ite	ne
 8001814:	2301      	movne	r3, #1
 8001816:	2300      	moveq	r3, #0
 8001818:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800181c:	4b8b      	ldr	r3, [pc, #556]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800181e:	7e1a      	ldrb	r2, [r3, #24]
 8001820:	4b8a      	ldr	r3, [pc, #552]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 8001822:	7cdb      	ldrb	r3, [r3, #19]
 8001824:	429a      	cmp	r2, r3
 8001826:	bf14      	ite	ne
 8001828:	2301      	movne	r3, #1
 800182a:	2300      	moveq	r3, #0
 800182c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001830:	4b86      	ldr	r3, [pc, #536]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 8001832:	7a1a      	ldrb	r2, [r3, #8]
 8001834:	4b85      	ldr	r3, [pc, #532]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 8001836:	7a5b      	ldrb	r3, [r3, #9]
 8001838:	429a      	cmp	r2, r3
 800183a:	bf14      	ite	ne
 800183c:	2301      	movne	r3, #1
 800183e:	2300      	moveq	r3, #0
 8001840:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001844:	4b81      	ldr	r3, [pc, #516]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 8001846:	7eda      	ldrb	r2, [r3, #27]
 8001848:	4b80      	ldr	r3, [pc, #512]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800184a:	7e9b      	ldrb	r3, [r3, #26]
 800184c:	429a      	cmp	r2, r3
 800184e:	bf14      	ite	ne
 8001850:	2301      	movne	r3, #1
 8001852:	2300      	moveq	r3, #0
 8001854:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8001858:	4b7c      	ldr	r3, [pc, #496]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800185a:	7f5a      	ldrb	r2, [r3, #29]
 800185c:	4b7b      	ldr	r3, [pc, #492]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800185e:	7f1b      	ldrb	r3, [r3, #28]
 8001860:	429a      	cmp	r2, r3
 8001862:	bf14      	ite	ne
 8001864:	2301      	movne	r3, #1
 8001866:	2300      	moveq	r3, #0
 8001868:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800186c:	4b77      	ldr	r3, [pc, #476]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800186e:	7d1a      	ldrb	r2, [r3, #20]
 8001870:	4b76      	ldr	r3, [pc, #472]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 8001872:	7e5b      	ldrb	r3, [r3, #25]
 8001874:	429a      	cmp	r2, r3
 8001876:	bf14      	ite	ne
 8001878:	2301      	movne	r3, #1
 800187a:	2300      	moveq	r3, #0
 800187c:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8001880:	4b72      	ldr	r3, [pc, #456]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 8001882:	781a      	ldrb	r2, [r3, #0]
 8001884:	4b71      	ldr	r3, [pc, #452]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 8001886:	705a      	strb	r2, [r3, #1]
 8001888:	4b70      	ldr	r3, [pc, #448]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800188a:	7c1a      	ldrb	r2, [r3, #16]
 800188c:	4b6f      	ldr	r3, [pc, #444]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800188e:	755a      	strb	r2, [r3, #21]
 8001890:	4b6e      	ldr	r3, [pc, #440]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 8001892:	7c5a      	ldrb	r2, [r3, #17]
 8001894:	4b6d      	ldr	r3, [pc, #436]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 8001896:	759a      	strb	r2, [r3, #22]
 8001898:	4b6c      	ldr	r3, [pc, #432]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800189a:	7c9a      	ldrb	r2, [r3, #18]
 800189c:	4b6b      	ldr	r3, [pc, #428]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 800189e:	75da      	strb	r2, [r3, #23]
 80018a0:	4b6a      	ldr	r3, [pc, #424]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018a2:	7cda      	ldrb	r2, [r3, #19]
 80018a4:	4b69      	ldr	r3, [pc, #420]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018a6:	761a      	strb	r2, [r3, #24]
 80018a8:	4b68      	ldr	r3, [pc, #416]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018aa:	7a1a      	ldrb	r2, [r3, #8]
 80018ac:	4b67      	ldr	r3, [pc, #412]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018ae:	725a      	strb	r2, [r3, #9]
 80018b0:	4b66      	ldr	r3, [pc, #408]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018b2:	7e9a      	ldrb	r2, [r3, #26]
 80018b4:	4b65      	ldr	r3, [pc, #404]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018b6:	76da      	strb	r2, [r3, #27]
 80018b8:	4b64      	ldr	r3, [pc, #400]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018ba:	7d1a      	ldrb	r2, [r3, #20]
 80018bc:	4b63      	ldr	r3, [pc, #396]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018be:	765a      	strb	r2, [r3, #25]
 80018c0:	4b62      	ldr	r3, [pc, #392]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018c2:	7f1a      	ldrb	r2, [r3, #28]
 80018c4:	4b61      	ldr	r3, [pc, #388]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018c6:	775a      	strb	r2, [r3, #29]
 80018c8:	f00c fe08 	bl	800e4dc <vPortExitCritical>
            dashboardState.old_desiredBMSStatus = dashboardState.desiredBMSStatus;
            dashboardState.old_regenBraking = dashboardState.regenBraking;
			dashboardState.old_desiredArrayStatus = dashboardState.desiredArrayStatus;
        );

        if (screenResetStatusChanged) {
 80018cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <_Z11StartTask05Pv+0x156>
			Init_Screen(screen);
 80018d4:	485c      	ldr	r0, [pc, #368]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 80018d6:	f000 fb9f 	bl	8002018 <_Z11Init_ScreenR7ILI9341>
        }

        if (lightStateChanged || screenResetStatusChanged) {
 80018da:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d103      	bne.n	80018ea <_Z11StartTask05Pv+0x166>
 80018e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d060      	beq.n	80019ac <_Z11StartTask05Pv+0x228>
            HAL_Delay(1);
 80018ea:	2001      	movs	r0, #1
 80018ec:	f002 ff2e 	bl	800474c <HAL_Delay>
            DASHBOARD_CRITICAL(
 80018f0:	f00c fdc2 	bl	800e478 <vPortEnterCritical>
 80018f4:	4b55      	ldr	r3, [pc, #340]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d02e      	beq.n	800195a <_Z11StartTask05Pv+0x1d6>
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	dc40      	bgt.n	8001982 <_Z11StartTask05Pv+0x1fe>
 8001900:	2b01      	cmp	r3, #1
 8001902:	d002      	beq.n	800190a <_Z11StartTask05Pv+0x186>
 8001904:	2b02      	cmp	r3, #2
 8001906:	d014      	beq.n	8001932 <_Z11StartTask05Pv+0x1ae>
 8001908:	e03b      	b.n	8001982 <_Z11StartTask05Pv+0x1fe>
 800190a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	230a      	movs	r3, #10
 8001912:	2214      	movs	r2, #20
 8001914:	2114      	movs	r1, #20
 8001916:	484c      	ldr	r0, [pc, #304]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 8001918:	f002 fd09 	bl	800432e <_ZN7ILI934110FillCircleEtttt>
 800191c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	230a      	movs	r3, #10
 8001924:	2214      	movs	r2, #20
 8001926:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800192a:	4847      	ldr	r0, [pc, #284]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 800192c:	f002 fcff 	bl	800432e <_ZN7ILI934110FillCircleEtttt>
 8001930:	e03a      	b.n	80019a8 <_Z11StartTask05Pv+0x224>
 8001932:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	230a      	movs	r3, #10
 800193a:	2214      	movs	r2, #20
 800193c:	2114      	movs	r1, #20
 800193e:	4842      	ldr	r0, [pc, #264]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 8001940:	f002 fcf5 	bl	800432e <_ZN7ILI934110FillCircleEtttt>
 8001944:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	230a      	movs	r3, #10
 800194c:	2214      	movs	r2, #20
 800194e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001952:	483d      	ldr	r0, [pc, #244]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 8001954:	f002 fceb 	bl	800432e <_ZN7ILI934110FillCircleEtttt>
 8001958:	e026      	b.n	80019a8 <_Z11StartTask05Pv+0x224>
 800195a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	230a      	movs	r3, #10
 8001962:	2214      	movs	r2, #20
 8001964:	2114      	movs	r1, #20
 8001966:	4838      	ldr	r0, [pc, #224]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 8001968:	f002 fce1 	bl	800432e <_ZN7ILI934110FillCircleEtttt>
 800196c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	230a      	movs	r3, #10
 8001974:	2214      	movs	r2, #20
 8001976:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800197a:	4833      	ldr	r0, [pc, #204]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 800197c:	f002 fcd7 	bl	800432e <_ZN7ILI934110FillCircleEtttt>
 8001980:	e012      	b.n	80019a8 <_Z11StartTask05Pv+0x224>
 8001982:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	230a      	movs	r3, #10
 800198a:	2214      	movs	r2, #20
 800198c:	2114      	movs	r1, #20
 800198e:	482e      	ldr	r0, [pc, #184]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 8001990:	f002 fccd 	bl	800432e <_ZN7ILI934110FillCircleEtttt>
 8001994:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	230a      	movs	r3, #10
 800199c:	2214      	movs	r2, #20
 800199e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80019a2:	4829      	ldr	r0, [pc, #164]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 80019a4:	f002 fcc3 	bl	800432e <_ZN7ILI934110FillCircleEtttt>
 80019a8:	f00c fd98 	bl	800e4dc <vPortExitCritical>
                        break;
                }
            );
        }

        if (bmsStatusChanged || screenResetStatusChanged) {
 80019ac:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d103      	bne.n	80019bc <_Z11StartTask05Pv+0x238>
 80019b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d015      	beq.n	80019e8 <_Z11StartTask05Pv+0x264>
            DASHBOARD_CRITICAL(
 80019bc:	f00c fd5c 	bl	800e478 <vPortEnterCritical>
 80019c0:	4b22      	ldr	r3, [pc, #136]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80019c2:	7c1b      	ldrb	r3, [r3, #16]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <_Z11StartTask05Pv+0x24a>
 80019c8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80019cc:	e001      	b.n	80019d2 <_Z11StartTask05Pv+0x24e>
 80019ce:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80019d2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80019d4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	230a      	movs	r3, #10
 80019da:	2246      	movs	r2, #70	@ 0x46
 80019dc:	2123      	movs	r1, #35	@ 0x23
 80019de:	481a      	ldr	r0, [pc, #104]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 80019e0:	f002 fca5 	bl	800432e <_ZN7ILI934110FillCircleEtttt>
 80019e4:	f00c fd7a 	bl	800e4dc <vPortExitCritical>
                color = dashboardState.bmsStatus ? RGB565_GREEN : RGB565_RED;
                screen.FillCircle(BMS_CIRCLE_X, INDICATOR_CIRCLE_Y, INDICATOR_RADIUS, color);
            );
        }

        if (desiredBMSStatusChanged || screenResetStatusChanged) {
 80019e8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d103      	bne.n	80019f8 <_Z11StartTask05Pv+0x274>
 80019f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d015      	beq.n	8001a24 <_Z11StartTask05Pv+0x2a0>
            DASHBOARD_CRITICAL(
 80019f8:	f00c fd3e 	bl	800e478 <vPortEnterCritical>
 80019fc:	4b13      	ldr	r3, [pc, #76]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 80019fe:	7e9b      	ldrb	r3, [r3, #26]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d002      	beq.n	8001a0a <_Z11StartTask05Pv+0x286>
 8001a04:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001a08:	e001      	b.n	8001a0e <_Z11StartTask05Pv+0x28a>
 8001a0a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001a0e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001a10:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	230a      	movs	r3, #10
 8001a16:	225f      	movs	r2, #95	@ 0x5f
 8001a18:	2123      	movs	r1, #35	@ 0x23
 8001a1a:	480b      	ldr	r0, [pc, #44]	@ (8001a48 <_Z11StartTask05Pv+0x2c4>)
 8001a1c:	f002 fc87 	bl	800432e <_ZN7ILI934110FillCircleEtttt>
 8001a20:	f00c fd5c 	bl	800e4dc <vPortExitCritical>
                color = dashboardState.desiredBMSStatus ? RGB565_GREEN : RGB565_RED;
                screen.FillCircle(BMS_CIRCLE_X, INDICATOR_CIRCLE_Y + 25, INDICATOR_RADIUS, color);
            );
        }

		if (desiredArrayStatusChanged || screenResetStatusChanged) {
 8001a24:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d103      	bne.n	8001a34 <_Z11StartTask05Pv+0x2b0>
 8001a2c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01a      	beq.n	8001a6a <_Z11StartTask05Pv+0x2e6>
			DASHBOARD_CRITICAL(
 8001a34:	f00c fd20 	bl	800e478 <vPortEnterCritical>
 8001a38:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <_Z11StartTask05Pv+0x2c8>)
 8001a3a:	7f1b      	ldrb	r3, [r3, #28]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d007      	beq.n	8001a50 <_Z11StartTask05Pv+0x2cc>
 8001a40:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001a44:	e006      	b.n	8001a54 <_Z11StartTask05Pv+0x2d0>
 8001a46:	bf00      	nop
 8001a48:	200000d8 	.word	0x200000d8
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001a54:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001a56:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	230a      	movs	r3, #10
 8001a5c:	225f      	movs	r2, #95	@ 0x5f
 8001a5e:	217d      	movs	r1, #125	@ 0x7d
 8001a60:	489d      	ldr	r0, [pc, #628]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001a62:	f002 fc64 	bl	800432e <_ZN7ILI934110FillCircleEtttt>
 8001a66:	f00c fd39 	bl	800e4dc <vPortExitCritical>
				color = dashboardState.desiredArrayStatus ? RGB565_GREEN : RGB565_RED;
				screen.FillCircle(ARRAY_CIRCLE_X, INDICATOR_CIRCLE_Y + 25, INDICATOR_RADIUS, color);
			);
		}

        if (mcStatusChanged || screenResetStatusChanged) {
 8001a6a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d103      	bne.n	8001a7a <_Z11StartTask05Pv+0x2f6>
 8001a72:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d015      	beq.n	8001aa6 <_Z11StartTask05Pv+0x322>
            DASHBOARD_CRITICAL(
 8001a7a:	f00c fcfd 	bl	800e478 <vPortEnterCritical>
 8001a7e:	4b97      	ldr	r3, [pc, #604]	@ (8001cdc <_Z11StartTask05Pv+0x558>)
 8001a80:	7c5b      	ldrb	r3, [r3, #17]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <_Z11StartTask05Pv+0x308>
 8001a86:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001a8a:	e001      	b.n	8001a90 <_Z11StartTask05Pv+0x30c>
 8001a8c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001a90:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001a92:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	230a      	movs	r3, #10
 8001a98:	2246      	movs	r2, #70	@ 0x46
 8001a9a:	214b      	movs	r1, #75	@ 0x4b
 8001a9c:	488e      	ldr	r0, [pc, #568]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001a9e:	f002 fc46 	bl	800432e <_ZN7ILI934110FillCircleEtttt>
 8001aa2:	f00c fd1b 	bl	800e4dc <vPortExitCritical>
                color = dashboardState.mcStatus ? RGB565_GREEN : RGB565_RED;
                screen.FillCircle(MC_CIRCLE_X, INDICATOR_CIRCLE_Y, INDICATOR_RADIUS, color);
            );
        }

        if (arrayStatusChanged || screenResetStatusChanged) {
 8001aa6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d103      	bne.n	8001ab6 <_Z11StartTask05Pv+0x332>
 8001aae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d015      	beq.n	8001ae2 <_Z11StartTask05Pv+0x35e>
            DASHBOARD_CRITICAL(
 8001ab6:	f00c fcdf 	bl	800e478 <vPortEnterCritical>
 8001aba:	4b88      	ldr	r3, [pc, #544]	@ (8001cdc <_Z11StartTask05Pv+0x558>)
 8001abc:	7c9b      	ldrb	r3, [r3, #18]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <_Z11StartTask05Pv+0x344>
 8001ac2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001ac6:	e001      	b.n	8001acc <_Z11StartTask05Pv+0x348>
 8001ac8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001acc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001ace:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	230a      	movs	r3, #10
 8001ad4:	2246      	movs	r2, #70	@ 0x46
 8001ad6:	217d      	movs	r1, #125	@ 0x7d
 8001ad8:	487f      	ldr	r0, [pc, #508]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001ada:	f002 fc28 	bl	800432e <_ZN7ILI934110FillCircleEtttt>
 8001ade:	f00c fcfd 	bl	800e4dc <vPortExitCritical>
                color = dashboardState.arrayStatus ? RGB565_GREEN : RGB565_RED;
                screen.FillCircle(ARRAY_CIRCLE_X, INDICATOR_CIRCLE_Y, INDICATOR_RADIUS, color);
            );
        }

        if (directionChanged || screenResetStatusChanged) {
 8001ae2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d103      	bne.n	8001af2 <_Z11StartTask05Pv+0x36e>
 8001aea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d018      	beq.n	8001b24 <_Z11StartTask05Pv+0x3a0>
            DASHBOARD_CRITICAL(
 8001af2:	f00c fcc1 	bl	800e478 <vPortEnterCritical>
 8001af6:	4b79      	ldr	r3, [pc, #484]	@ (8001cdc <_Z11StartTask05Pv+0x558>)
 8001af8:	7cdb      	ldrb	r3, [r3, #19]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d008      	beq.n	8001b10 <_Z11StartTask05Pv+0x38c>
 8001afe:	2300      	movs	r3, #0
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	4b77      	ldr	r3, [pc, #476]	@ (8001ce0 <_Z11StartTask05Pv+0x55c>)
 8001b04:	2278      	movs	r2, #120	@ 0x78
 8001b06:	2114      	movs	r1, #20
 8001b08:	4873      	ldr	r0, [pc, #460]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001b0a:	f002 faf3 	bl	80040f4 <_ZN7ILI93418DrawTextEttPKct>
 8001b0e:	e007      	b.n	8001b20 <_Z11StartTask05Pv+0x39c>
 8001b10:	2300      	movs	r3, #0
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	4b73      	ldr	r3, [pc, #460]	@ (8001ce4 <_Z11StartTask05Pv+0x560>)
 8001b16:	2278      	movs	r2, #120	@ 0x78
 8001b18:	2114      	movs	r1, #20
 8001b1a:	486f      	ldr	r0, [pc, #444]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001b1c:	f002 faea 	bl	80040f4 <_ZN7ILI93418DrawTextEttPKct>
 8001b20:	f00c fcdc 	bl	800e4dc <vPortExitCritical>
                    screen.DrawText(DIRECTION_TEXT_X, DIRECTION_TEXT_Y, "Reverse\0", RGB565_BLACK);
                }
            );
        }

        if (regenBrakingChanged || screenResetStatusChanged) {
 8001b24:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d103      	bne.n	8001b34 <_Z11StartTask05Pv+0x3b0>
 8001b2c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d015      	beq.n	8001b60 <_Z11StartTask05Pv+0x3dc>
            DASHBOARD_CRITICAL(
 8001b34:	f00c fca0 	bl	800e478 <vPortEnterCritical>
 8001b38:	4b68      	ldr	r3, [pc, #416]	@ (8001cdc <_Z11StartTask05Pv+0x558>)
 8001b3a:	7d1b      	ldrb	r3, [r3, #20]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <_Z11StartTask05Pv+0x3c2>
 8001b40:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001b44:	e001      	b.n	8001b4a <_Z11StartTask05Pv+0x3c6>
 8001b46:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001b4a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001b4c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	230a      	movs	r3, #10
 8001b52:	2246      	movs	r2, #70	@ 0x46
 8001b54:	21af      	movs	r1, #175	@ 0xaf
 8001b56:	4860      	ldr	r0, [pc, #384]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001b58:	f002 fbe9 	bl	800432e <_ZN7ILI934110FillCircleEtttt>
 8001b5c:	f00c fcbe 	bl	800e4dc <vPortExitCritical>
                screen.FillCircle(REGEN_BRAKING_CIRCLE_X, INDICATOR_CIRCLE_Y, INDICATOR_RADIUS, color);
            );
        }

        float supp_batt_voltage, motor_power, car_speed;
        DASHBOARD_CRITICAL(
 8001b60:	f00c fc8a 	bl	800e478 <vPortEnterCritical>
 8001b64:	485d      	ldr	r0, [pc, #372]	@ (8001cdc <_Z11StartTask05Pv+0x558>)
 8001b66:	f7ff fa97 	bl	8001098 <_ZN14DashboardState18getSuppBattVoltageEv>
 8001b6a:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
 8001b6e:	485b      	ldr	r0, [pc, #364]	@ (8001cdc <_Z11StartTask05Pv+0x558>)
 8001b70:	f7ff fab6 	bl	80010e0 <_ZN14DashboardState13getMotorPowerEv>
 8001b74:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
 8001b78:	4858      	ldr	r0, [pc, #352]	@ (8001cdc <_Z11StartTask05Pv+0x558>)
 8001b7a:	f7ff faf9 	bl	8001170 <_ZN14DashboardState11getCarSpeedEv>
 8001b7e:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8001b82:	f00c fcab 	bl	800e4dc <vPortExitCritical>
            car_speed = dashboardState.getCarSpeed();
        );

        char buffer[16];

        DASHBOARD_CRITICAL(
 8001b86:	f00c fc77 	bl	800e478 <vPortEnterCritical>
 8001b8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	233c      	movs	r3, #60	@ 0x3c
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2396      	movs	r3, #150	@ 0x96
 8001b96:	22a0      	movs	r2, #160	@ 0xa0
 8001b98:	2114      	movs	r1, #20
 8001b9a:	484f      	ldr	r0, [pc, #316]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001b9c:	f002 fb0f 	bl	80041be <_ZN7ILI93418DrawRectEttttt>
 8001ba0:	4b4e      	ldr	r3, [pc, #312]	@ (8001cdc <_Z11StartTask05Pv+0x558>)
 8001ba2:	7c5b      	ldrb	r3, [r3, #17]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d056      	beq.n	8001c56 <_Z11StartTask05Pv+0x4d2>
 8001ba8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001bac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bb0:	ee17 3a90 	vmov	r3, s15
 8001bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb8:	ee07 3a90 	vmov	s15, r3
 8001bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001ce8 <_Z11StartTask05Pv+0x564>
 8001bcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bd4:	ee17 3a90 	vmov	r3, s15
 8001bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bda:	f107 0008 	add.w	r0, r7, #8
 8001bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001be4:	4a41      	ldr	r2, [pc, #260]	@ (8001cec <_Z11StartTask05Pv+0x568>)
 8001be6:	2110      	movs	r1, #16
 8001be8:	f00d f810 	bl	800ec0c <sniprintf>
 8001bec:	f107 0308 	add.w	r3, r7, #8
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	9200      	str	r2, [sp, #0]
 8001bf4:	22a0      	movs	r2, #160	@ 0xa0
 8001bf6:	2164      	movs	r1, #100	@ 0x64
 8001bf8:	4837      	ldr	r0, [pc, #220]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001bfa:	f002 fa7b 	bl	80040f4 <_ZN7ILI93418DrawTextEttPKct>
 8001bfe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c06:	ee17 3a90 	vmov	r3, s15
 8001c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0e:	ee07 3a90 	vmov	s15, r3
 8001c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c16:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001c22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c2a:	ee17 3a90 	vmov	r3, s15
 8001c2e:	623b      	str	r3, [r7, #32]
 8001c30:	f107 0008 	add.w	r0, r7, #8
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf0 <_Z11StartTask05Pv+0x56c>)
 8001c3c:	2110      	movs	r1, #16
 8001c3e:	f00c ffe5 	bl	800ec0c <sniprintf>
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	2200      	movs	r2, #0
 8001c48:	9200      	str	r2, [sp, #0]
 8001c4a:	22b4      	movs	r2, #180	@ 0xb4
 8001c4c:	2164      	movs	r1, #100	@ 0x64
 8001c4e:	4822      	ldr	r0, [pc, #136]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001c50:	f002 fa50 	bl	80040f4 <_ZN7ILI93418DrawTextEttPKct>
 8001c54:	e00f      	b.n	8001c76 <_Z11StartTask05Pv+0x4f2>
 8001c56:	2300      	movs	r3, #0
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	4b26      	ldr	r3, [pc, #152]	@ (8001cf4 <_Z11StartTask05Pv+0x570>)
 8001c5c:	22a0      	movs	r2, #160	@ 0xa0
 8001c5e:	2164      	movs	r1, #100	@ 0x64
 8001c60:	481d      	ldr	r0, [pc, #116]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001c62:	f002 fa47 	bl	80040f4 <_ZN7ILI93418DrawTextEttPKct>
 8001c66:	2300      	movs	r3, #0
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	4b22      	ldr	r3, [pc, #136]	@ (8001cf4 <_Z11StartTask05Pv+0x570>)
 8001c6c:	22b4      	movs	r2, #180	@ 0xb4
 8001c6e:	2164      	movs	r1, #100	@ 0x64
 8001c70:	4819      	ldr	r0, [pc, #100]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001c72:	f002 fa3f 	bl	80040f4 <_ZN7ILI93418DrawTextEttPKct>
 8001c76:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001c7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c7e:	ee17 3a90 	vmov	r3, s15
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	ee07 3a90 	vmov	s15, r3
 8001c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c96:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001ce8 <_Z11StartTask05Pv+0x564>
 8001c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ca2:	ee17 3a90 	vmov	r3, s15
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	f107 0008 	add.w	r0, r7, #8
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	4a11      	ldr	r2, [pc, #68]	@ (8001cf8 <_Z11StartTask05Pv+0x574>)
 8001cb4:	2110      	movs	r1, #16
 8001cb6:	f00c ffa9 	bl	800ec0c <sniprintf>
 8001cba:	f107 0308 	add.w	r3, r7, #8
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	9200      	str	r2, [sp, #0]
 8001cc2:	22c8      	movs	r2, #200	@ 0xc8
 8001cc4:	2164      	movs	r1, #100	@ 0x64
 8001cc6:	4804      	ldr	r0, [pc, #16]	@ (8001cd8 <_Z11StartTask05Pv+0x554>)
 8001cc8:	f002 fa14 	bl	80040f4 <_ZN7ILI93418DrawTextEttPKct>
 8001ccc:	f00c fc06 	bl	800e4dc <vPortExitCritical>
            int voltage_frac = (int)((supp_batt_voltage - voltage_whole) * 100);
            snprintf(buffer, sizeof(buffer), "%d.%02d V", voltage_whole, voltage_frac);
            screen.DrawText(STATS_VALUES_X, VOLTAGE_SUPP_BATT_LABEL_Y, buffer, RGB565_BLACK);
        );

        osDelay(200);
 8001cd0:	20c8      	movs	r0, #200	@ 0xc8
 8001cd2:	f00a f88d 	bl	800bdf0 <osDelay>
    }
 8001cd6:	e577      	b.n	80017c8 <_Z11StartTask05Pv+0x44>
 8001cd8:	200000d8 	.word	0x200000d8
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	0800f4dc 	.word	0x0800f4dc
 8001ce4:	0800f4e8 	.word	0x0800f4e8
 8001ce8:	42c80000 	.word	0x42c80000
 8001cec:	0800f4f4 	.word	0x0800f4f4
 8001cf0:	0800f500 	.word	0x0800f500
 8001cf4:	0800f50c 	.word	0x0800f50c
 8001cf8:	0800f514 	.word	0x0800f514

08001cfc <_Z19Update_CAN_Message1PhS_S_>:
}



void Update_CAN_Message1(uint8_t flags[8], uint8_t* Input1, uint8_t* Input2)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]

	static uint8_t prev_input1 = 0;
	static uint8_t prev_input2 = 0;


	flags[3] = 0;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3303      	adds	r3, #3
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
	flags[4] = 0;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3304      	adds	r3, #4
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]


	// Detect rising edges for each flag
	uint8_t risingEdges_flag1 = (~prev_input1) & *Input1;
 8001d18:	4b91      	ldr	r3, [pc, #580]	@ (8001f60 <_Z19Update_CAN_Message1PhS_S_+0x264>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	b25b      	sxtb	r3, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	b25a      	sxtb	r2, r3
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b25b      	sxtb	r3, r3
 8001d28:	4013      	ands	r3, r2
 8001d2a:	b25b      	sxtb	r3, r3
 8001d2c:	75fb      	strb	r3, [r7, #23]
	uint8_t risingEdges_flag2 = (~prev_input2) & *Input2;
 8001d2e:	4b8d      	ldr	r3, [pc, #564]	@ (8001f64 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	b25b      	sxtb	r3, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	b25a      	sxtb	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	b25b      	sxtb	r3, r3
 8001d3e:	4013      	ands	r3, r2
 8001d40:	b25b      	sxtb	r3, r3
 8001d42:	75bb      	strb	r3, [r7, #22]


	flags[1] ^= CHECK_BIT(risingEdges_flag2, 4) << 0; // Main
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3301      	adds	r3, #1
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	b25a      	sxtb	r2, r3
 8001d4c:	7dbb      	ldrb	r3, [r7, #22]
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	bf14      	ite	ne
 8001d56:	2301      	movne	r3, #1
 8001d58:	2300      	moveq	r3, #0
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	b25b      	sxtb	r3, r3
 8001d5e:	4053      	eors	r3, r2
 8001d60:	b25a      	sxtb	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3301      	adds	r3, #1
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 5) << 1; // Break
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b25a      	sxtb	r2, r3
 8001d72:	7dbb      	ldrb	r3, [r7, #22]
 8001d74:	111b      	asrs	r3, r3, #4
 8001d76:	b25b      	sxtb	r3, r3
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	b25b      	sxtb	r3, r3
 8001d7e:	4053      	eors	r3, r2
 8001d80:	b25a      	sxtb	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3301      	adds	r3, #1
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]
	// CHECK_BIT(risingEdges_flag2, 1) all unused buttons
	// CHECK_BIT(risingEdges_flag2, 2)
	// CHECK_BIT(risingEdges_flag2, 3)

	flags[2] ^= CHECK_BIT(risingEdges_flag2, 0) << 4; // regen breaking
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b25a      	sxtb	r2, r3
 8001d92:	7dbb      	ldrb	r3, [r7, #22]
 8001d94:	011b      	lsls	r3, r3, #4
 8001d96:	b25b      	sxtb	r3, r3
 8001d98:	f003 0310 	and.w	r3, r3, #16
 8001d9c:	b25b      	sxtb	r3, r3
 8001d9e:	4053      	eors	r3, r2
 8001da0:	b25a      	sxtb	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3302      	adds	r3, #2
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]

	flags[1] ^= CHECK_BIT(risingEdges_flag1, 4) << 2; // Array
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	3301      	adds	r3, #1
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	b25a      	sxtb	r2, r3
 8001db2:	7dfb      	ldrb	r3, [r7, #23]
 8001db4:	109b      	asrs	r3, r3, #2
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	b25b      	sxtb	r3, r3
 8001dbe:	4053      	eors	r3, r2
 8001dc0:	b25a      	sxtb	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 5) << 3; // BMS Contactors
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b25a      	sxtb	r2, r3
 8001dd2:	7dfb      	ldrb	r3, [r7, #23]
 8001dd4:	109b      	asrs	r3, r3, #2
 8001dd6:	b25b      	sxtb	r3, r3
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	b25b      	sxtb	r3, r3
 8001dde:	4053      	eors	r3, r2
 8001de0:	b25a      	sxtb	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3301      	adds	r3, #1
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 6) << 4; // MC Enable
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	3301      	adds	r3, #1
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b25a      	sxtb	r2, r3
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
 8001df4:	109b      	asrs	r3, r3, #2
 8001df6:	b25b      	sxtb	r3, r3
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	b25b      	sxtb	r3, r3
 8001dfe:	4053      	eors	r3, r2
 8001e00:	b25a      	sxtb	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3301      	adds	r3, #1
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 7) << 5; // Direction
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	b25a      	sxtb	r2, r3
 8001e12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e16:	109b      	asrs	r3, r3, #2
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	f003 0320 	and.w	r3, r3, #32
 8001e1e:	b25b      	sxtb	r3, r3
 8001e20:	4053      	eors	r3, r2
 8001e22:	b25a      	sxtb	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3301      	adds	r3, #1
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	701a      	strb	r2, [r3, #0]

	dashboardState.desiredBMSStatus = flags[1] & (1 << 3); // Desired BMS contactors status (0 = open, 1 = closed) 
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	4b4b      	ldr	r3, [pc, #300]	@ (8001f68 <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 8001e3a:	769a      	strb	r2, [r3, #26]
	dashboardState.regenBraking = flags[2] & (1 << 4); // Regen braking (0 = off, 1 = on)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3302      	adds	r3, #2
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b47      	ldr	r3, [pc, #284]	@ (8001f68 <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 8001e4a:	751a      	strb	r2, [r3, #20]
	dashboardState.desiredArrayStatus = flags[1] & (1 << 2); // Desired array status (0 = off, 1 = on)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	4b43      	ldr	r3, [pc, #268]	@ (8001f68 <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 8001e5a:	771a      	strb	r2, [r3, #28]
	
	if (dashboardState.hornState) // Horn
 8001e5c:	4b42      	ldr	r3, [pc, #264]	@ (8001f68 <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 8001e5e:	791b      	ldrb	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d009      	beq.n	8001e78 <_Z19Update_CAN_Message1PhS_S_+0x17c>
		flags[1] |= (1 << 6);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	3301      	adds	r3, #1
 8001e68:	781a      	ldrb	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]
 8001e76:	e008      	b.n	8001e8a <_Z19Update_CAN_Message1PhS_S_+0x18e>
	else
		flags[1] &= ~(1 << 6);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3301      	adds	r3, #1
 8001e82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	701a      	strb	r2, [r3, #0]
	if (dashboardState.pttState) // PTT (Push to Talk)
 8001e8a:	4b37      	ldr	r3, [pc, #220]	@ (8001f68 <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 8001e8c:	79db      	ldrb	r3, [r3, #7]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d009      	beq.n	8001ea6 <_Z19Update_CAN_Message1PhS_S_+0x1aa>
		flags[1] |= (1 << 7);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	3301      	adds	r3, #1
 8001e96:	781a      	ldrb	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	e008      	b.n	8001eb8 <_Z19Update_CAN_Message1PhS_S_+0x1bc>
	else
		flags[1] &= ~(1 << 7);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	781a      	ldrb	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	701a      	strb	r2, [r3, #0]
	/*
		NOTE:
			currently sending state of turn signal, turn signal on or off
			if wanting to send actual control of turn signal light, need to send outputPortState variable instead of lightState	
	*/
	if (dashboardState.lightState == LIGHTS_HAZARD) // Blinkers
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f68 <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d109      	bne.n	8001ed4 <_Z19Update_CAN_Message1PhS_S_+0x1d8>
		flags[2] |= (1 << 0);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	781a      	ldrb	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3302      	adds	r3, #2
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	701a      	strb	r2, [r3, #0]
 8001ed2:	e008      	b.n	8001ee6 <_Z19Update_CAN_Message1PhS_S_+0x1ea>
	else
		flags[2] &= ~(1 << 0);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	781a      	ldrb	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	3302      	adds	r3, #2
 8001ede:	f022 0201 	bic.w	r2, r2, #1
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	701a      	strb	r2, [r3, #0]
	if (dashboardState.lightState == LIGHTS_LEFT) // Left Turn
 8001ee6:	4b20      	ldr	r3, [pc, #128]	@ (8001f68 <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d109      	bne.n	8001f02 <_Z19Update_CAN_Message1PhS_S_+0x206>
		flags[2] |= (1 << 1);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	781a      	ldrb	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	f042 0202 	orr.w	r2, r2, #2
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]
 8001f00:	e008      	b.n	8001f14 <_Z19Update_CAN_Message1PhS_S_+0x218>
	else
		flags[2] &= ~(1 << 1);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3302      	adds	r3, #2
 8001f06:	781a      	ldrb	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	f022 0202 	bic.w	r2, r2, #2
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	701a      	strb	r2, [r3, #0]
	if (dashboardState.lightState == LIGHTS_RIGHT) // Right Turn
 8001f14:	4b14      	ldr	r3, [pc, #80]	@ (8001f68 <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d109      	bne.n	8001f30 <_Z19Update_CAN_Message1PhS_S_+0x234>
		flags[2] |= (1 << 2);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3302      	adds	r3, #2
 8001f20:	781a      	ldrb	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3302      	adds	r3, #2
 8001f26:	f042 0204 	orr.w	r2, r2, #4
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	e008      	b.n	8001f42 <_Z19Update_CAN_Message1PhS_S_+0x246>
	else
		flags[2] &= ~(1 << 2);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3302      	adds	r3, #2
 8001f34:	781a      	ldrb	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3302      	adds	r3, #2
 8001f3a:	f022 0204 	bic.w	r2, r2, #4
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	701a      	strb	r2, [r3, #0]
	if (dashboardState.headlightState) // Headlights
 8001f42:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 8001f44:	799b      	ldrb	r3, [r3, #6]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d010      	beq.n	8001f6c <_Z19Update_CAN_Message1PhS_S_+0x270>
		flags[2] |= (1 << 3);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	781a      	ldrb	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	3302      	adds	r3, #2
 8001f54:	f042 0208 	orr.w	r2, r2, #8
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	701a      	strb	r2, [r3, #0]
 8001f5c:	e00f      	b.n	8001f7e <_Z19Update_CAN_Message1PhS_S_+0x282>
 8001f5e:	bf00      	nop
 8001f60:	20000149 	.word	0x20000149
 8001f64:	2000014a 	.word	0x2000014a
 8001f68:	20000000 	.word	0x20000000
	else
		flags[2] &= ~(1 << 3);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	3302      	adds	r3, #2
 8001f70:	781a      	ldrb	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3302      	adds	r3, #2
 8001f76:	f022 0208 	bic.w	r2, r2, #8
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	701a      	strb	r2, [r3, #0]

	cc_enable ^= CHECK_BIT(risingEdges_flag2, 1);
 8001f7e:	7dbb      	ldrb	r3, [r7, #22]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	bf14      	ite	ne
 8001f88:	2301      	movne	r3, #1
 8001f8a:	2300      	moveq	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	b25a      	sxtb	r2, r3
 8001f90:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <_Z19Update_CAN_Message1PhS_S_+0x2c0>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	4053      	eors	r3, r2
 8001f98:	b25b      	sxtb	r3, r3
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <_Z19Update_CAN_Message1PhS_S_+0x2c0>)
 8001f9e:	701a      	strb	r2, [r3, #0]

	prev_input1 = *Input1;
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <_Z19Update_CAN_Message1PhS_S_+0x2c4>)
 8001fa6:	701a      	strb	r2, [r3, #0]
	prev_input2 = *Input2;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	781a      	ldrb	r2, [r3, #0]
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <_Z19Update_CAN_Message1PhS_S_+0x2c8>)
 8001fae:	701a      	strb	r2, [r3, #0]

}
 8001fb0:	bf00      	nop
 8001fb2:	371c      	adds	r7, #28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	200000d5 	.word	0x200000d5
 8001fc0:	20000149 	.word	0x20000149
 8001fc4:	2000014a 	.word	0x2000014a

08001fc8 <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef>:
	 *
	 * */
}

void Init_CAN_Filter1(CAN_HandleTypeDef &hcan1)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	@ 0x30
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = CAN_ID_BMS_POWER_CONSUM_INFO << 5;
  canfilterconfig.FilterMaskIdLow = (uint32_t)CAN_ID_MITSUBA_MOTOR_FRAME_0 << 5;

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
*/
  CAN_FilterTypeDef filter = {0};
 8001fd0:	f107 0308 	add.w	r3, r7, #8
 8001fd4:	2228      	movs	r2, #40	@ 0x28
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f00c fe4b 	bl	800ec74 <memset>
    filter.FilterActivation = ENABLE;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
    filter.FilterBank = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24

    // Accept ALL messages (for debug/testing)
    filter.FilterIdHigh = 0x0000;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
    filter.FilterIdLow = 0x0000;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
    filter.FilterMaskIdHigh = 0x0000;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
    filter.FilterMaskIdLow = 0x0000;
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]

    HAL_CAN_ConfigFilter(&hcan1, &filter);
 8002002:	f107 0308 	add.w	r3, r7, #8
 8002006:	4619      	mov	r1, r3
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f004 f893 	bl	8006134 <HAL_CAN_ConfigFilter>
}
 800200e:	bf00      	nop
 8002010:	3730      	adds	r7, #48	@ 0x30
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <_Z11Init_ScreenR7ILI9341>:

void Init_Screen(ILI9341 &screen)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af02      	add	r7, sp, #8
 800201e:	6078      	str	r0, [r7, #4]
	screen.Init();
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f001 fb45 	bl	80036b0 <_ZN7ILI93414InitEv>
	screen.SetRotation(3);
 8002026:	2103      	movs	r1, #3
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f001 fecb 	bl	8003dc4 <_ZN7ILI934111SetRotationEh>
	screen.ClearScreen(RGB565_WHITE);
 800202e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f001 fdfb 	bl	8003c2e <_ZN7ILI934111ClearScreenEt>
	screen.SetTextSize(TEXT_SIZE);
 8002038:	2102      	movs	r1, #2
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f001 ff2e 	bl	8003e9c <_ZN7ILI934111SetTextSizeEh>

	DASHBOARD_CRITICAL(
 8002040:	f00c fa1a 	bl	800e478 <vPortEnterCritical>
 8002044:	2300      	movs	r3, #0
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	4b3b      	ldr	r3, [pc, #236]	@ (8002138 <_Z11Init_ScreenR7ILI9341+0x120>)
 800204a:	220a      	movs	r2, #10
 800204c:	2146      	movs	r1, #70	@ 0x46
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f002 f850 	bl	80040f4 <_ZN7ILI93418DrawTextEttPKct>
 8002054:	2300      	movs	r3, #0
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	4b38      	ldr	r3, [pc, #224]	@ (800213c <_Z11Init_ScreenR7ILI9341+0x124>)
 800205a:	2228      	movs	r2, #40	@ 0x28
 800205c:	2114      	movs	r1, #20
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f002 f848 	bl	80040f4 <_ZN7ILI93418DrawTextEttPKct>
 8002064:	2300      	movs	r3, #0
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	4b35      	ldr	r3, [pc, #212]	@ (8002140 <_Z11Init_ScreenR7ILI9341+0x128>)
 800206a:	22a0      	movs	r2, #160	@ 0xa0
 800206c:	2114      	movs	r1, #20
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f002 f840 	bl	80040f4 <_ZN7ILI93418DrawTextEttPKct>
 8002074:	2300      	movs	r3, #0
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	4b32      	ldr	r3, [pc, #200]	@ (8002144 <_Z11Init_ScreenR7ILI9341+0x12c>)
 800207a:	22b4      	movs	r2, #180	@ 0xb4
 800207c:	2114      	movs	r1, #20
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f002 f838 	bl	80040f4 <_ZN7ILI93418DrawTextEttPKct>
 8002084:	2300      	movs	r3, #0
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	4b2f      	ldr	r3, [pc, #188]	@ (8002148 <_Z11Init_ScreenR7ILI9341+0x130>)
 800208a:	22c8      	movs	r2, #200	@ 0xc8
 800208c:	2114      	movs	r1, #20
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f002 f830 	bl	80040f4 <_ZN7ILI93418DrawTextEttPKct>
 8002094:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	230a      	movs	r3, #10
 800209c:	2246      	movs	r2, #70	@ 0x46
 800209e:	2123      	movs	r1, #35	@ 0x23
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f002 f944 	bl	800432e <_ZN7ILI934110FillCircleEtttt>
 80020a6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	230a      	movs	r3, #10
 80020ae:	225f      	movs	r2, #95	@ 0x5f
 80020b0:	2123      	movs	r1, #35	@ 0x23
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f002 f93b 	bl	800432e <_ZN7ILI934110FillCircleEtttt>
 80020b8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	230a      	movs	r3, #10
 80020c0:	2246      	movs	r2, #70	@ 0x46
 80020c2:	214b      	movs	r1, #75	@ 0x4b
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f002 f932 	bl	800432e <_ZN7ILI934110FillCircleEtttt>
 80020ca:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	230a      	movs	r3, #10
 80020d2:	2246      	movs	r2, #70	@ 0x46
 80020d4:	217d      	movs	r1, #125	@ 0x7d
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f002 f929 	bl	800432e <_ZN7ILI934110FillCircleEtttt>
 80020dc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	230a      	movs	r3, #10
 80020e4:	225f      	movs	r2, #95	@ 0x5f
 80020e6:	217d      	movs	r1, #125	@ 0x7d
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f002 f920 	bl	800432e <_ZN7ILI934110FillCircleEtttt>
 80020ee:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	230a      	movs	r3, #10
 80020f6:	2246      	movs	r2, #70	@ 0x46
 80020f8:	21af      	movs	r1, #175	@ 0xaf
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f002 f917 	bl	800432e <_ZN7ILI934110FillCircleEtttt>
 8002100:	4b12      	ldr	r3, [pc, #72]	@ (800214c <_Z11Init_ScreenR7ILI9341+0x134>)
 8002102:	7cdb      	ldrb	r3, [r3, #19]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <_Z11Init_ScreenR7ILI9341+0x102>
 8002108:	2300      	movs	r3, #0
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <_Z11Init_ScreenR7ILI9341+0x138>)
 800210e:	2278      	movs	r2, #120	@ 0x78
 8002110:	2114      	movs	r1, #20
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f001 ffee 	bl	80040f4 <_ZN7ILI93418DrawTextEttPKct>
 8002118:	e007      	b.n	800212a <_Z11Init_ScreenR7ILI9341+0x112>
 800211a:	2300      	movs	r3, #0
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	4b0d      	ldr	r3, [pc, #52]	@ (8002154 <_Z11Init_ScreenR7ILI9341+0x13c>)
 8002120:	2278      	movs	r2, #120	@ 0x78
 8002122:	2114      	movs	r1, #20
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f001 ffe5 	bl	80040f4 <_ZN7ILI93418DrawTextEttPKct>
 800212a:	f00c f9d7 	bl	800e4dc <vPortExitCritical>
		}
		else {
			screen.DrawText(DIRECTION_TEXT_X, DIRECTION_TEXT_Y, "Reverse\0", RGB565_BLACK);
		}
	);
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	0800f520 	.word	0x0800f520
 800213c:	0800f534 	.word	0x0800f534
 8002140:	0800f548 	.word	0x0800f548
 8002144:	0800f554 	.word	0x0800f554
 8002148:	0800f560 	.word	0x0800f560
 800214c:	20000000 	.word	0x20000000
 8002150:	0800f4dc 	.word	0x0800f4dc
 8002154:	0800f4e8 	.word	0x0800f4e8

08002158 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0c      	ldr	r2, [pc, #48]	@ (8002198 <HAL_UART_RxCpltCallback+0x40>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d10d      	bne.n	8002186 <HAL_UART_RxCpltCallback+0x2e>
  	{
		if (dashboardState.uart_rx != dashboardState.old_uart_rx)
 800216a:	4b0c      	ldr	r3, [pc, #48]	@ (800219c <HAL_UART_RxCpltCallback+0x44>)
 800216c:	7f9a      	ldrb	r2, [r3, #30]
 800216e:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <HAL_UART_RxCpltCallback+0x44>)
 8002170:	7fdb      	ldrb	r3, [r3, #31]
 8002172:	429a      	cmp	r2, r3
 8002174:	d007      	beq.n	8002186 <HAL_UART_RxCpltCallback+0x2e>
		{
			dashboardState.updateRequested = 1; // set flag to update dashboard state
 8002176:	4b09      	ldr	r3, [pc, #36]	@ (800219c <HAL_UART_RxCpltCallback+0x44>)
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2020 	strb.w	r2, [r3, #32]
			dashboardState.old_uart_rx = dashboardState.uart_rx;
 800217e:	4b07      	ldr	r3, [pc, #28]	@ (800219c <HAL_UART_RxCpltCallback+0x44>)
 8002180:	7f9a      	ldrb	r2, [r3, #30]
 8002182:	4b06      	ldr	r3, [pc, #24]	@ (800219c <HAL_UART_RxCpltCallback+0x44>)
 8002184:	77da      	strb	r2, [r3, #31]
		}
	}
	HAL_UART_Receive_IT(&huart4, &dashboardState.uart_rx, 1);
 8002186:	2201      	movs	r2, #1
 8002188:	4905      	ldr	r1, [pc, #20]	@ (80021a0 <HAL_UART_RxCpltCallback+0x48>)
 800218a:	4806      	ldr	r0, [pc, #24]	@ (80021a4 <HAL_UART_RxCpltCallback+0x4c>)
 800218c:	f008 f9fe 	bl	800a58c <HAL_UART_Receive_IT>
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40004c00 	.word	0x40004c00
 800219c:	20000000 	.word	0x20000000
 80021a0:	2000001e 	.word	0x2000001e
 80021a4:	20000398 	.word	0x20000398

080021a8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	dma_flag = 1;
 80021b0:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	200000d4 	.word	0x200000d4

080021c8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	80fb      	strh	r3, [r7, #6]
	GPIO_Interrupt_Triggered = 1;
 80021d2:	4b04      	ldr	r3, [pc, #16]	@ (80021e4 <HAL_GPIO_EXTI_Callback+0x1c>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	200000d6 	.word	0x200000d6

080021e8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021ec:	b092      	sub	sp, #72	@ 0x48
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80021f2:	f107 030c 	add.w	r3, r7, #12
 80021f6:	f107 0214 	add.w	r2, r7, #20
 80021fa:	2100      	movs	r1, #0
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f004 f9c2 	bl	8006586 <HAL_CAN_GetRxMessage>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf14      	ite	ne
 8002208:	2301      	movne	r3, #1
 800220a:	2300      	moveq	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
    {
        Error_Handler();
 8002212:	f000 fd81 	bl	8002d18 <Error_Handler>
    }

	// vcu sends mc and array status
    if (RxHeader.IDE == CAN_ID_STD && RxHeader.StdId == CAN_ID_VCU_SENSORS)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d12a      	bne.n	8002272 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d127      	bne.n	8002272 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
    {
		uint8_t statusByte = RxData[VCU_SENSORS_STATUS_BYTE_INDEX];
 8002222:	7b7b      	ldrb	r3, [r7, #13]
 8002224:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

		dashboardState.mcStatus = CHECK_BIT(
 8002228:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	bf14      	ite	ne
 8002234:	2301      	movne	r3, #1
 8002236:	2300      	moveq	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	4b67      	ldr	r3, [pc, #412]	@ (80023dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 800223e:	745a      	strb	r2, [r3, #17]
			statusByte, 
			(int)VCU_SENSORS_STATUS_BITS::VCU_MC_ENABLED_BIT_POS
		);
		dashboardState.arrayStatus = CHECK_BIT(
 8002240:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf14      	ite	ne
 800224c:	2301      	movne	r3, #1
 800224e:	2300      	moveq	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	4b61      	ldr	r3, [pc, #388]	@ (80023dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8002256:	749a      	strb	r2, [r3, #18]
			statusByte, 
			(int)VCU_SENSORS_STATUS_BITS::VCU_ARRAY_ENABLED_BIT_POS
		);
		dashboardState.direction = CHECK_BIT(
 8002258:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf14      	ite	ne
 8002264:	2301      	movne	r3, #1
 8002266:	2300      	moveq	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	4b5b      	ldr	r3, [pc, #364]	@ (80023dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 800226e:	74da      	strb	r2, [r3, #19]
			statusByte,
			(int)VCU_SENSORS_STATUS_BITS::VCU_DIRECTION_BIT_POS
		);
    }
 8002270:	e0af      	b.n	80023d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ea>
	// powerboard sends voltage of supplemental battery 
	else if (RxHeader.IDE == CAN_ID_STD && RxHeader.StdId == CAN_ID_POWERBOARD)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10b      	bne.n	8002290 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d108      	bne.n	8002290 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
	{
		dashboardState.supp_batt_voltage_lsb = RxData[POWERBOARD_SUPPLEMENTAL_BATTERY_VOLTAGE_LSB_INDEX];
 800227e:	7bba      	ldrb	r2, [r7, #14]
 8002280:	4b56      	ldr	r3, [pc, #344]	@ (80023dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8002282:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		dashboardState.supp_batt_voltage_msb = RxData[POWERBOARD_SUPPLEMENTAL_BATTERY_VOLTAGE_MSB_INDEX];
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	4b54      	ldr	r3, [pc, #336]	@ (80023dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 800228a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800228e:	e0a0      	b.n	80023d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ea>
	}
	// bms sends contactors closed indicator and battery voltage and current
	else if (RxHeader.IDE == CAN_ID_STD && RxHeader.StdId == CAN_ID_BMS_POWER_CONSUM_INFO)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d112      	bne.n	80022bc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b06      	cmp	r3, #6
 800229a:	d10f      	bne.n	80022bc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>
	{
		uint8_t statusByte = RxData[BMS_STATUS_BYTE_INDEX];
 800229c:	7cfb      	ldrb	r3, [r7, #19]
 800229e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

		dashboardState.bmsStatus = CHECK_BIT(
 80022a2:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	bf14      	ite	ne
 80022ae:	2301      	movne	r3, #1
 80022b0:	2300      	moveq	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b49      	ldr	r3, [pc, #292]	@ (80023dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80022b8:	741a      	strb	r2, [r3, #16]
			statusByte,
			(int)BMS_STATUS_BITS::BMS_CONTACTORS_CLOSED_BIT_POS
		);
	}
 80022ba:	e08a      	b.n	80023d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ea>
	// mitsuba motor sends velocity and other data?
	else if (RxHeader.IDE == CAN_ID_EXT && RxHeader.ExtId == CAN_ID_MITSUBA_MOTOR_FRAME_0)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	2b04      	cmp	r3, #4
 80022c0:	f040 8087 	bne.w	80023d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ea>
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	4a46      	ldr	r2, [pc, #280]	@ (80023e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	f040 8082 	bne.w	80023d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ea>
	{
		uint64_t full_data = 0;
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		for (int i = 0; i < 8; i++)
 80022da:	2300      	movs	r3, #0
 80022dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022de:	e01d      	b.n	800231c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
		{
			full_data = (full_data << 8) | RxData[7 - i]; // lsb first
 80022e0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	020b      	lsls	r3, r1, #8
 80022ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80022f2:	0202      	lsls	r2, r0, #8
 80022f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80022f6:	f1c1 0107 	rsb	r1, r1, #7
 80022fa:	3148      	adds	r1, #72	@ 0x48
 80022fc:	4439      	add	r1, r7
 80022fe:	f811 1c3c 	ldrb.w	r1, [r1, #-60]
 8002302:	b2c9      	uxtb	r1, r1
 8002304:	2000      	movs	r0, #0
 8002306:	460c      	mov	r4, r1
 8002308:	4605      	mov	r5, r0
 800230a:	ea42 0804 	orr.w	r8, r2, r4
 800230e:	ea43 0905 	orr.w	r9, r3, r5
 8002312:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
		for (int i = 0; i < 8; i++)
 8002316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002318:	3301      	adds	r3, #1
 800231a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800231c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800231e:	2b07      	cmp	r3, #7
 8002320:	ddde      	ble.n	80022e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>
		}

		uint16_t motor_rpm = (full_data >> MITSUBA_RPM_VELOCITY_LSB_BIT_INDEX) & ((1 << MITSUBA_RPM_VELOCITY_LEN) - 1);
 8002322:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	08ca      	lsrs	r2, r1, #3
 8002330:	2300      	movs	r3, #0
 8002332:	b293      	uxth	r3, r2
 8002334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002338:	873b      	strh	r3, [r7, #56]	@ 0x38
		uint16_t motor_voltage = (full_data >> MITSUBA_VOLTAGE_LSB_BIT_INDEX) & ((1 << MITSUBA_VOLTAGE_LEN) - 1);
 800233a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800233e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002342:	86fb      	strh	r3, [r7, #54]	@ 0x36
		uint16_t motor_current = (full_data >> MITSUBA_CURRENT_LSB_BIT_INDEX) & ((1 << MITSUBA_CURRENT_LEN) - 1);
 8002344:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	0a82      	lsrs	r2, r0, #10
 8002352:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002356:	0a8b      	lsrs	r3, r1, #10
 8002358:	b293      	uxth	r3, r2
 800235a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800235e:	86bb      	strh	r3, [r7, #52]	@ 0x34
		uint8_t motor_current_direction = (full_data >> MITSUBA_BATTERY_CURRENT_DIRECTION_BIT_INDEX) & 0x01;
 8002360:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	0cc2      	lsrs	r2, r0, #19
 800236e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002372:	0ccb      	lsrs	r3, r1, #19
 8002374:	b2d3      	uxtb	r3, r2
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		dashboardState.motor_rpm_lsb = motor_rpm & 0xFF;
 800237e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002380:	b2da      	uxtb	r2, r3
 8002382:	4b16      	ldr	r3, [pc, #88]	@ (80023dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8002384:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		dashboardState.motor_rpm_msb = (motor_rpm >> 8) & 0xFF;
 8002388:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	b29b      	uxth	r3, r3
 800238e:	b2da      	uxtb	r2, r3
 8002390:	4b12      	ldr	r3, [pc, #72]	@ (80023dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8002392:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		dashboardState.motor_voltage_lsb = motor_voltage & 0xFF;
 8002396:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4b10      	ldr	r3, [pc, #64]	@ (80023dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 800239c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		dashboardState.motor_voltage_msb = (motor_voltage >> 8) & 0xFF;
 80023a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80023a2:	0a1b      	lsrs	r3, r3, #8
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	4b0c      	ldr	r3, [pc, #48]	@ (80023dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80023aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		dashboardState.motor_current_lsb = motor_current & 0xFF;
 80023ae:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4b0a      	ldr	r3, [pc, #40]	@ (80023dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80023b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		dashboardState.motor_current_msb = (motor_current >> 8) & 0xFF;
 80023b8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	b29b      	uxth	r3, r3
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80023c2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		dashboardState.motor_current_direction = motor_current_direction;
 80023c6:	4a05      	ldr	r2, [pc, #20]	@ (80023dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80023c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023cc:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
	}
}
 80023d0:	e7ff      	b.n	80023d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ea>
 80023d2:	bf00      	nop
 80023d4:	3748      	adds	r7, #72	@ 0x48
 80023d6:	46bd      	mov	sp, r7
 80023d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023dc:	20000000 	.word	0x20000000
 80023e0:	08850225 	.word	0x08850225

080023e4 <_Z41__static_initialization_and_destruction_0ii>:
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d10a      	bne.n	800240a <_Z41__static_initialization_and_destruction_0ii+0x26>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d105      	bne.n	800240a <_Z41__static_initialization_and_destruction_0ii+0x26>
ILI9341 screen(320, 240);
 80023fe:	22f0      	movs	r2, #240	@ 0xf0
 8002400:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002404:	4808      	ldr	r0, [pc, #32]	@ (8002428 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002406:	f001 f899 	bl	800353c <_ZN7ILI9341C1Ess>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d107      	bne.n	8002420 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002416:	4293      	cmp	r3, r2
 8002418:	d102      	bne.n	8002420 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800241a:	4803      	ldr	r0, [pc, #12]	@ (8002428 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800241c:	f001 f928 	bl	8003670 <_ZN7ILI9341D1Ev>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	200000d8 	.word	0x200000d8

0800242c <_GLOBAL__sub_I_U5>:
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
 8002430:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002434:	2001      	movs	r0, #1
 8002436:	f7ff ffd5 	bl	80023e4 <_Z41__static_initialization_and_destruction_0ii>
 800243a:	bd80      	pop	{r7, pc}

0800243c <_GLOBAL__sub_D_U5>:
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
 8002440:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002444:	2000      	movs	r0, #0
 8002446:	f7ff ffcd 	bl	80023e4 <_Z41__static_initialization_and_destruction_0ii>
 800244a:	bd80      	pop	{r7, pc}

0800244c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002450:	f002 f943 	bl	80046da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002454:	f000 f86c 	bl	8002530 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002458:	f000 fbbe 	bl	8002bd8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800245c:	f000 fb8a 	bl	8002b74 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8002460:	f000 f8c8 	bl	80025f4 <_ZL12MX_ADC1_Initv>
  MX_I2C4_Init();
 8002464:	f000 fa5e 	bl	8002924 <_ZL12MX_I2C4_Initv>
  MX_CAN1_Init();
 8002468:	f000 f9e8 	bl	800283c <_ZL12MX_CAN1_Initv>
  MX_CAN2_Init();
 800246c:	f000 fa20 	bl	80028b0 <_ZL12MX_CAN2_Initv>
  MX_UART4_Init();
 8002470:	f000 fb4c 	bl	8002b0c <_ZL13MX_UART4_Initv>
  MX_TIM8_Init();
 8002474:	f000 fae8 	bl	8002a48 <_ZL12MX_TIM8_Initv>
  MX_SPI3_Init();
 8002478:	f000 faa2 	bl	80029c0 <_ZL12MX_SPI3_Initv>
  /* USER CODE BEGIN 2 */
  CPP_UserSetup();
 800247c:	f7fe feca 	bl	8001214 <CPP_UserSetup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002480:	f009 fbda 	bl	800bc38 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CAN_Mutex */
  CAN_MutexHandle = osSemaphoreNew(1, 1, &CAN_Mutex_attributes);
 8002484:	4a19      	ldr	r2, [pc, #100]	@ (80024ec <main+0xa0>)
 8002486:	2101      	movs	r1, #1
 8002488:	2001      	movs	r0, #1
 800248a:	f009 fccc 	bl	800be26 <osSemaphoreNew>
 800248e:	4603      	mov	r3, r0
 8002490:	4a17      	ldr	r2, [pc, #92]	@ (80024f0 <main+0xa4>)
 8002492:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartTask01, NULL, &HeartBeat_attributes);
 8002494:	4a17      	ldr	r2, [pc, #92]	@ (80024f4 <main+0xa8>)
 8002496:	2100      	movs	r1, #0
 8002498:	4817      	ldr	r0, [pc, #92]	@ (80024f8 <main+0xac>)
 800249a:	f009 fc17 	bl	800bccc <osThreadNew>
 800249e:	4603      	mov	r3, r0
 80024a0:	4a16      	ldr	r2, [pc, #88]	@ (80024fc <main+0xb0>)
 80024a2:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);
 80024a4:	4a16      	ldr	r2, [pc, #88]	@ (8002500 <main+0xb4>)
 80024a6:	2100      	movs	r1, #0
 80024a8:	4816      	ldr	r0, [pc, #88]	@ (8002504 <main+0xb8>)
 80024aa:	f009 fc0f 	bl	800bccc <osThreadNew>
 80024ae:	4603      	mov	r3, r0
 80024b0:	4a15      	ldr	r2, [pc, #84]	@ (8002508 <main+0xbc>)
 80024b2:	6013      	str	r3, [r2, #0]

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 80024b4:	4a15      	ldr	r2, [pc, #84]	@ (800250c <main+0xc0>)
 80024b6:	2100      	movs	r1, #0
 80024b8:	4815      	ldr	r0, [pc, #84]	@ (8002510 <main+0xc4>)
 80024ba:	f009 fc07 	bl	800bccc <osThreadNew>
 80024be:	4603      	mov	r3, r0
 80024c0:	4a14      	ldr	r2, [pc, #80]	@ (8002514 <main+0xc8>)
 80024c2:	6013      	str	r3, [r2, #0]

  /* creation of Outputs_Control */
  Outputs_ControlHandle = osThreadNew(StartTask04, NULL, &Outputs_Control_attributes);
 80024c4:	4a14      	ldr	r2, [pc, #80]	@ (8002518 <main+0xcc>)
 80024c6:	2100      	movs	r1, #0
 80024c8:	4814      	ldr	r0, [pc, #80]	@ (800251c <main+0xd0>)
 80024ca:	f009 fbff 	bl	800bccc <osThreadNew>
 80024ce:	4603      	mov	r3, r0
 80024d0:	4a13      	ldr	r2, [pc, #76]	@ (8002520 <main+0xd4>)
 80024d2:	6013      	str	r3, [r2, #0]

  /* creation of ScreenControl */
  ScreenControlHandle = osThreadNew(StartTask05, NULL, &ScreenControl_attributes);
 80024d4:	4a13      	ldr	r2, [pc, #76]	@ (8002524 <main+0xd8>)
 80024d6:	2100      	movs	r1, #0
 80024d8:	4813      	ldr	r0, [pc, #76]	@ (8002528 <main+0xdc>)
 80024da:	f009 fbf7 	bl	800bccc <osThreadNew>
 80024de:	4603      	mov	r3, r0
 80024e0:	4a12      	ldr	r2, [pc, #72]	@ (800252c <main+0xe0>)
 80024e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80024e4:	f009 fbcc 	bl	800bc80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <main+0x9c>
 80024ec:	0800f690 	.word	0x0800f690
 80024f0:	20000434 	.word	0x20000434
 80024f4:	0800f5dc 	.word	0x0800f5dc
 80024f8:	0800133d 	.word	0x0800133d
 80024fc:	20000420 	.word	0x20000420
 8002500:	0800f600 	.word	0x0800f600
 8002504:	080013d5 	.word	0x080013d5
 8002508:	20000424 	.word	0x20000424
 800250c:	0800f624 	.word	0x0800f624
 8002510:	08001575 	.word	0x08001575
 8002514:	20000428 	.word	0x20000428
 8002518:	0800f648 	.word	0x0800f648
 800251c:	080016ed 	.word	0x080016ed
 8002520:	2000042c 	.word	0x2000042c
 8002524:	0800f66c 	.word	0x0800f66c
 8002528:	08001785 	.word	0x08001785
 800252c:	20000430 	.word	0x20000430

08002530 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b096      	sub	sp, #88	@ 0x58
 8002534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	2244      	movs	r2, #68	@ 0x44
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f00c fb98 	bl	800ec74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002544:	463b      	mov	r3, r7
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	609a      	str	r2, [r3, #8]
 800254e:	60da      	str	r2, [r3, #12]
 8002550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002552:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002556:	f005 fef3 	bl	8008340 <HAL_PWREx_ControlVoltageScaling>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf14      	ite	ne
 8002560:	2301      	movne	r3, #1
 8002562:	2300      	moveq	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800256a:	f000 fbd5 	bl	8002d18 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800256e:	2310      	movs	r3, #16
 8002570:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002572:	2301      	movs	r3, #1
 8002574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800257a:	2360      	movs	r3, #96	@ 0x60
 800257c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800257e:	2302      	movs	r3, #2
 8002580:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002582:	2301      	movs	r3, #1
 8002584:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002586:	2301      	movs	r3, #1
 8002588:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800258a:	2314      	movs	r3, #20
 800258c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800258e:	2302      	movs	r3, #2
 8002590:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002592:	2302      	movs	r3, #2
 8002594:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002596:	2302      	movs	r3, #2
 8002598:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800259a:	f107 0314 	add.w	r3, r7, #20
 800259e:	4618      	mov	r0, r3
 80025a0:	f005 ff24 	bl	80083ec <HAL_RCC_OscConfig>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	bf14      	ite	ne
 80025aa:	2301      	movne	r3, #1
 80025ac:	2300      	moveq	r3, #0
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 80025b4:	f000 fbb0 	bl	8002d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025b8:	230f      	movs	r3, #15
 80025ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025bc:	2303      	movs	r3, #3
 80025be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025cc:	463b      	mov	r3, r7
 80025ce:	2102      	movs	r1, #2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f006 fb25 	bl	8008c20 <HAL_RCC_ClockConfig>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	bf14      	ite	ne
 80025dc:	2301      	movne	r3, #1
 80025de:	2300      	moveq	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 80025e6:	f000 fb97 	bl	8002d18 <Error_Handler>
  }
}
 80025ea:	bf00      	nop
 80025ec:	3758      	adds	r7, #88	@ 0x58
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	@ 0x28
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80025fa:	f107 031c 	add.w	r3, r7, #28
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002606:	1d3b      	adds	r3, r7, #4
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
 8002614:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002616:	4b86      	ldr	r3, [pc, #536]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 8002618:	4a86      	ldr	r2, [pc, #536]	@ (8002834 <_ZL12MX_ADC1_Initv+0x240>)
 800261a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800261c:	4b84      	ldr	r3, [pc, #528]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 800261e:	2200      	movs	r2, #0
 8002620:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002622:	4b83      	ldr	r3, [pc, #524]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002628:	4b81      	ldr	r3, [pc, #516]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800262e:	4b80      	ldr	r3, [pc, #512]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 8002630:	2201      	movs	r2, #1
 8002632:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002634:	4b7e      	ldr	r3, [pc, #504]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 8002636:	2208      	movs	r2, #8
 8002638:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800263a:	4b7d      	ldr	r3, [pc, #500]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 800263c:	2200      	movs	r2, #0
 800263e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002640:	4b7b      	ldr	r3, [pc, #492]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 8002642:	2201      	movs	r2, #1
 8002644:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 8002646:	4b7a      	ldr	r3, [pc, #488]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 8002648:	220a      	movs	r2, #10
 800264a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800264c:	4b78      	ldr	r3, [pc, #480]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002654:	4b76      	ldr	r3, [pc, #472]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 8002656:	2200      	movs	r2, #0
 8002658:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800265a:	4b75      	ldr	r3, [pc, #468]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 800265c:	2200      	movs	r2, #0
 800265e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002660:	4b73      	ldr	r3, [pc, #460]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002668:	4b71      	ldr	r3, [pc, #452]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 800266a:	2200      	movs	r2, #0
 800266c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800266e:	4b70      	ldr	r3, [pc, #448]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002676:	486e      	ldr	r0, [pc, #440]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 8002678:	f002 fac2 	bl	8004c00 <HAL_ADC_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	bf14      	ite	ne
 8002682:	2301      	movne	r3, #1
 8002684:	2300      	moveq	r3, #0
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 800268c:	f000 fb44 	bl	8002d18 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002690:	2300      	movs	r3, #0
 8002692:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	4619      	mov	r1, r3
 800269a:	4865      	ldr	r0, [pc, #404]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 800269c:	f003 fb9e 	bl	8005ddc <HAL_ADCEx_MultiModeConfigChannel>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf14      	ite	ne
 80026a6:	2301      	movne	r3, #1
 80026a8:	2300      	moveq	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 80026b0:	f000 fb32 	bl	8002d18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80026b4:	4b60      	ldr	r3, [pc, #384]	@ (8002838 <_ZL12MX_ADC1_Initv+0x244>)
 80026b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026b8:	2306      	movs	r3, #6
 80026ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80026c0:	237f      	movs	r3, #127	@ 0x7f
 80026c2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80026c4:	2304      	movs	r3, #4
 80026c6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	4619      	mov	r1, r3
 80026d0:	4857      	ldr	r0, [pc, #348]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 80026d2:	f002 fd1b 	bl	800510c <HAL_ADC_ConfigChannel>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	bf14      	ite	ne
 80026dc:	2301      	movne	r3, #1
 80026de:	2300      	moveq	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 80026e6:	f000 fb17 	bl	8002d18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80026ea:	230c      	movs	r3, #12
 80026ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	4619      	mov	r1, r3
 80026f2:	484f      	ldr	r0, [pc, #316]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 80026f4:	f002 fd0a 	bl	800510c <HAL_ADC_ConfigChannel>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bf14      	ite	ne
 80026fe:	2301      	movne	r3, #1
 8002700:	2300      	moveq	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <_ZL12MX_ADC1_Initv+0x118>
  {
    Error_Handler();
 8002708:	f000 fb06 	bl	8002d18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800270c:	2312      	movs	r3, #18
 800270e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	4619      	mov	r1, r3
 8002714:	4846      	ldr	r0, [pc, #280]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 8002716:	f002 fcf9 	bl	800510c <HAL_ADC_ConfigChannel>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf14      	ite	ne
 8002720:	2301      	movne	r3, #1
 8002722:	2300      	moveq	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <_ZL12MX_ADC1_Initv+0x13a>
  {
    Error_Handler();
 800272a:	f000 faf5 	bl	8002d18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800272e:	2318      	movs	r3, #24
 8002730:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	4619      	mov	r1, r3
 8002736:	483e      	ldr	r0, [pc, #248]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 8002738:	f002 fce8 	bl	800510c <HAL_ADC_ConfigChannel>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	bf14      	ite	ne
 8002742:	2301      	movne	r3, #1
 8002744:	2300      	moveq	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <_ZL12MX_ADC1_Initv+0x15c>
  {
    Error_Handler();
 800274c:	f000 fae4 	bl	8002d18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002750:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002754:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	4619      	mov	r1, r3
 800275a:	4835      	ldr	r0, [pc, #212]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 800275c:	f002 fcd6 	bl	800510c <HAL_ADC_ConfigChannel>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	bf14      	ite	ne
 8002766:	2301      	movne	r3, #1
 8002768:	2300      	moveq	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <_ZL12MX_ADC1_Initv+0x180>
  {
    Error_Handler();
 8002770:	f000 fad2 	bl	8002d18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002774:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8002778:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800277a:	1d3b      	adds	r3, r7, #4
 800277c:	4619      	mov	r1, r3
 800277e:	482c      	ldr	r0, [pc, #176]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 8002780:	f002 fcc4 	bl	800510c <HAL_ADC_ConfigChannel>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	bf14      	ite	ne
 800278a:	2301      	movne	r3, #1
 800278c:	2300      	moveq	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <_ZL12MX_ADC1_Initv+0x1a4>
  {
    Error_Handler();
 8002794:	f000 fac0 	bl	8002d18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002798:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 800279c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800279e:	1d3b      	adds	r3, r7, #4
 80027a0:	4619      	mov	r1, r3
 80027a2:	4823      	ldr	r0, [pc, #140]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 80027a4:	f002 fcb2 	bl	800510c <HAL_ADC_ConfigChannel>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bf14      	ite	ne
 80027ae:	2301      	movne	r3, #1
 80027b0:	2300      	moveq	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <_ZL12MX_ADC1_Initv+0x1c8>
  {
    Error_Handler();
 80027b8:	f000 faae 	bl	8002d18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80027bc:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80027c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	4619      	mov	r1, r3
 80027c6:	481a      	ldr	r0, [pc, #104]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 80027c8:	f002 fca0 	bl	800510c <HAL_ADC_ConfigChannel>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	bf14      	ite	ne
 80027d2:	2301      	movne	r3, #1
 80027d4:	2300      	moveq	r3, #0
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <_ZL12MX_ADC1_Initv+0x1ec>
  {
    Error_Handler();
 80027dc:	f000 fa9c 	bl	8002d18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80027e0:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80027e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	4619      	mov	r1, r3
 80027ea:	4811      	ldr	r0, [pc, #68]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 80027ec:	f002 fc8e 	bl	800510c <HAL_ADC_ConfigChannel>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	bf14      	ite	ne
 80027f6:	2301      	movne	r3, #1
 80027f8:	2300      	moveq	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <_ZL12MX_ADC1_Initv+0x210>
  {
    Error_Handler();
 8002800:	f000 fa8a 	bl	8002d18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8002804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002808:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	4619      	mov	r1, r3
 800280e:	4808      	ldr	r0, [pc, #32]	@ (8002830 <_ZL12MX_ADC1_Initv+0x23c>)
 8002810:	f002 fc7c 	bl	800510c <HAL_ADC_ConfigChannel>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	bf14      	ite	ne
 800281a:	2301      	movne	r3, #1
 800281c:	2300      	moveq	r3, #0
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <_ZL12MX_ADC1_Initv+0x234>
  {
    Error_Handler();
 8002824:	f000 fa78 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002828:	bf00      	nop
 800282a:	3728      	adds	r7, #40	@ 0x28
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	2000014c 	.word	0x2000014c
 8002834:	50040000 	.word	0x50040000
 8002838:	04300002 	.word	0x04300002

0800283c <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002840:	4b19      	ldr	r3, [pc, #100]	@ (80028a8 <_ZL12MX_CAN1_Initv+0x6c>)
 8002842:	4a1a      	ldr	r2, [pc, #104]	@ (80028ac <_ZL12MX_CAN1_Initv+0x70>)
 8002844:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8002846:	4b18      	ldr	r3, [pc, #96]	@ (80028a8 <_ZL12MX_CAN1_Initv+0x6c>)
 8002848:	2208      	movs	r2, #8
 800284a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800284c:	4b16      	ldr	r3, [pc, #88]	@ (80028a8 <_ZL12MX_CAN1_Initv+0x6c>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002852:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <_ZL12MX_CAN1_Initv+0x6c>)
 8002854:	2200      	movs	r2, #0
 8002856:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8002858:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <_ZL12MX_CAN1_Initv+0x6c>)
 800285a:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800285e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002860:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <_ZL12MX_CAN1_Initv+0x6c>)
 8002862:	2200      	movs	r2, #0
 8002864:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002866:	4b10      	ldr	r3, [pc, #64]	@ (80028a8 <_ZL12MX_CAN1_Initv+0x6c>)
 8002868:	2200      	movs	r2, #0
 800286a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800286c:	4b0e      	ldr	r3, [pc, #56]	@ (80028a8 <_ZL12MX_CAN1_Initv+0x6c>)
 800286e:	2200      	movs	r2, #0
 8002870:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002872:	4b0d      	ldr	r3, [pc, #52]	@ (80028a8 <_ZL12MX_CAN1_Initv+0x6c>)
 8002874:	2200      	movs	r2, #0
 8002876:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002878:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <_ZL12MX_CAN1_Initv+0x6c>)
 800287a:	2200      	movs	r2, #0
 800287c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800287e:	4b0a      	ldr	r3, [pc, #40]	@ (80028a8 <_ZL12MX_CAN1_Initv+0x6c>)
 8002880:	2200      	movs	r2, #0
 8002882:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002884:	4b08      	ldr	r3, [pc, #32]	@ (80028a8 <_ZL12MX_CAN1_Initv+0x6c>)
 8002886:	2200      	movs	r2, #0
 8002888:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800288a:	4807      	ldr	r0, [pc, #28]	@ (80028a8 <_ZL12MX_CAN1_Initv+0x6c>)
 800288c:	f003 fb56 	bl	8005f3c <HAL_CAN_Init>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	bf14      	ite	ne
 8002896:	2301      	movne	r3, #1
 8002898:	2300      	moveq	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <_ZL12MX_CAN1_Initv+0x68>
  {
    Error_Handler();
 80028a0:	f000 fa3a 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	200001fc 	.word	0x200001fc
 80028ac:	40006400 	.word	0x40006400

080028b0 <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80028b4:	4b19      	ldr	r3, [pc, #100]	@ (800291c <_ZL12MX_CAN2_Initv+0x6c>)
 80028b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002920 <_ZL12MX_CAN2_Initv+0x70>)
 80028b8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 8;
 80028ba:	4b18      	ldr	r3, [pc, #96]	@ (800291c <_ZL12MX_CAN2_Initv+0x6c>)
 80028bc:	2208      	movs	r2, #8
 80028be:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80028c0:	4b16      	ldr	r3, [pc, #88]	@ (800291c <_ZL12MX_CAN2_Initv+0x6c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80028c6:	4b15      	ldr	r3, [pc, #84]	@ (800291c <_ZL12MX_CAN2_Initv+0x6c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_8TQ;
 80028cc:	4b13      	ldr	r3, [pc, #76]	@ (800291c <_ZL12MX_CAN2_Initv+0x6c>)
 80028ce:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80028d2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80028d4:	4b11      	ldr	r3, [pc, #68]	@ (800291c <_ZL12MX_CAN2_Initv+0x6c>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80028da:	4b10      	ldr	r3, [pc, #64]	@ (800291c <_ZL12MX_CAN2_Initv+0x6c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80028e0:	4b0e      	ldr	r3, [pc, #56]	@ (800291c <_ZL12MX_CAN2_Initv+0x6c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80028e6:	4b0d      	ldr	r3, [pc, #52]	@ (800291c <_ZL12MX_CAN2_Initv+0x6c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80028ec:	4b0b      	ldr	r3, [pc, #44]	@ (800291c <_ZL12MX_CAN2_Initv+0x6c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80028f2:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <_ZL12MX_CAN2_Initv+0x6c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80028f8:	4b08      	ldr	r3, [pc, #32]	@ (800291c <_ZL12MX_CAN2_Initv+0x6c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80028fe:	4807      	ldr	r0, [pc, #28]	@ (800291c <_ZL12MX_CAN2_Initv+0x6c>)
 8002900:	f003 fb1c 	bl	8005f3c <HAL_CAN_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	bf14      	ite	ne
 800290a:	2301      	movne	r3, #1
 800290c:	2300      	moveq	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <_ZL12MX_CAN2_Initv+0x68>
  {
    Error_Handler();
 8002914:	f000 fa00 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002918:	bf00      	nop
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000224 	.word	0x20000224
 8002920:	40006800 	.word	0x40006800

08002924 <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002928:	4b22      	ldr	r3, [pc, #136]	@ (80029b4 <_ZL12MX_I2C4_Initv+0x90>)
 800292a:	4a23      	ldr	r2, [pc, #140]	@ (80029b8 <_ZL12MX_I2C4_Initv+0x94>)
 800292c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00D09BE3;
 800292e:	4b21      	ldr	r3, [pc, #132]	@ (80029b4 <_ZL12MX_I2C4_Initv+0x90>)
 8002930:	4a22      	ldr	r2, [pc, #136]	@ (80029bc <_ZL12MX_I2C4_Initv+0x98>)
 8002932:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002934:	4b1f      	ldr	r3, [pc, #124]	@ (80029b4 <_ZL12MX_I2C4_Initv+0x90>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800293a:	4b1e      	ldr	r3, [pc, #120]	@ (80029b4 <_ZL12MX_I2C4_Initv+0x90>)
 800293c:	2201      	movs	r2, #1
 800293e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002940:	4b1c      	ldr	r3, [pc, #112]	@ (80029b4 <_ZL12MX_I2C4_Initv+0x90>)
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002946:	4b1b      	ldr	r3, [pc, #108]	@ (80029b4 <_ZL12MX_I2C4_Initv+0x90>)
 8002948:	2200      	movs	r2, #0
 800294a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800294c:	4b19      	ldr	r3, [pc, #100]	@ (80029b4 <_ZL12MX_I2C4_Initv+0x90>)
 800294e:	2200      	movs	r2, #0
 8002950:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002952:	4b18      	ldr	r3, [pc, #96]	@ (80029b4 <_ZL12MX_I2C4_Initv+0x90>)
 8002954:	2200      	movs	r2, #0
 8002956:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002958:	4b16      	ldr	r3, [pc, #88]	@ (80029b4 <_ZL12MX_I2C4_Initv+0x90>)
 800295a:	2200      	movs	r2, #0
 800295c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800295e:	4815      	ldr	r0, [pc, #84]	@ (80029b4 <_ZL12MX_I2C4_Initv+0x90>)
 8002960:	f004 febc 	bl	80076dc <HAL_I2C_Init>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	bf14      	ite	ne
 800296a:	2301      	movne	r3, #1
 800296c:	2300      	moveq	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 8002974:	f000 f9d0 	bl	8002d18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002978:	2100      	movs	r1, #0
 800297a:	480e      	ldr	r0, [pc, #56]	@ (80029b4 <_ZL12MX_I2C4_Initv+0x90>)
 800297c:	f005 fc3a 	bl	80081f4 <HAL_I2CEx_ConfigAnalogFilter>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	bf14      	ite	ne
 8002986:	2301      	movne	r3, #1
 8002988:	2300      	moveq	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 8002990:	f000 f9c2 	bl	8002d18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002994:	2100      	movs	r1, #0
 8002996:	4807      	ldr	r0, [pc, #28]	@ (80029b4 <_ZL12MX_I2C4_Initv+0x90>)
 8002998:	f005 fc77 	bl	800828a <HAL_I2CEx_ConfigDigitalFilter>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bf14      	ite	ne
 80029a2:	2301      	movne	r3, #1
 80029a4:	2300      	moveq	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 80029ac:	f000 f9b4 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80029b0:	bf00      	nop
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	2000024c 	.word	0x2000024c
 80029b8:	40008400 	.word	0x40008400
 80029bc:	00d09be3 	.word	0x00d09be3

080029c0 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80029c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a40 <_ZL12MX_SPI3_Initv+0x80>)
 80029c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a44 <_ZL12MX_SPI3_Initv+0x84>)
 80029c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80029ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002a40 <_ZL12MX_SPI3_Initv+0x80>)
 80029cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80029d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 80029d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a40 <_ZL12MX_SPI3_Initv+0x80>)
 80029d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80029d8:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80029da:	4b19      	ldr	r3, [pc, #100]	@ (8002a40 <_ZL12MX_SPI3_Initv+0x80>)
 80029dc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80029e0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029e2:	4b17      	ldr	r3, [pc, #92]	@ (8002a40 <_ZL12MX_SPI3_Initv+0x80>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029e8:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <_ZL12MX_SPI3_Initv+0x80>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80029ee:	4b14      	ldr	r3, [pc, #80]	@ (8002a40 <_ZL12MX_SPI3_Initv+0x80>)
 80029f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029f4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029f6:	4b12      	ldr	r3, [pc, #72]	@ (8002a40 <_ZL12MX_SPI3_Initv+0x80>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029fc:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <_ZL12MX_SPI3_Initv+0x80>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a02:	4b0f      	ldr	r3, [pc, #60]	@ (8002a40 <_ZL12MX_SPI3_Initv+0x80>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a08:	4b0d      	ldr	r3, [pc, #52]	@ (8002a40 <_ZL12MX_SPI3_Initv+0x80>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a40 <_ZL12MX_SPI3_Initv+0x80>)
 8002a10:	2207      	movs	r2, #7
 8002a12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a14:	4b0a      	ldr	r3, [pc, #40]	@ (8002a40 <_ZL12MX_SPI3_Initv+0x80>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a1a:	4b09      	ldr	r3, [pc, #36]	@ (8002a40 <_ZL12MX_SPI3_Initv+0x80>)
 8002a1c:	2208      	movs	r2, #8
 8002a1e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002a20:	4807      	ldr	r0, [pc, #28]	@ (8002a40 <_ZL12MX_SPI3_Initv+0x80>)
 8002a22:	f007 f81d 	bl	8009a60 <HAL_SPI_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf14      	ite	ne
 8002a2c:	2301      	movne	r3, #1
 8002a2e:	2300      	moveq	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <_ZL12MX_SPI3_Initv+0x7a>
  {
    Error_Handler();
 8002a36:	f000 f96f 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200002a0 	.word	0x200002a0
 8002a44:	40003c00 	.word	0x40003c00

08002a48 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a4e:	f107 0310 	add.w	r3, r7, #16
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a5c:	1d3b      	adds	r3, r7, #4
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002a66:	4b27      	ldr	r3, [pc, #156]	@ (8002b04 <_ZL12MX_TIM8_Initv+0xbc>)
 8002a68:	4a27      	ldr	r2, [pc, #156]	@ (8002b08 <_ZL12MX_TIM8_Initv+0xc0>)
 8002a6a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 8002a6c:	4b25      	ldr	r3, [pc, #148]	@ (8002b04 <_ZL12MX_TIM8_Initv+0xbc>)
 8002a6e:	2203      	movs	r2, #3
 8002a70:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a72:	4b24      	ldr	r3, [pc, #144]	@ (8002b04 <_ZL12MX_TIM8_Initv+0xbc>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 799;
 8002a78:	4b22      	ldr	r3, [pc, #136]	@ (8002b04 <_ZL12MX_TIM8_Initv+0xbc>)
 8002a7a:	f240 321f 	movw	r2, #799	@ 0x31f
 8002a7e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a80:	4b20      	ldr	r3, [pc, #128]	@ (8002b04 <_ZL12MX_TIM8_Initv+0xbc>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002a86:	4b1f      	ldr	r3, [pc, #124]	@ (8002b04 <_ZL12MX_TIM8_Initv+0xbc>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b04 <_ZL12MX_TIM8_Initv+0xbc>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002a92:	481c      	ldr	r0, [pc, #112]	@ (8002b04 <_ZL12MX_TIM8_Initv+0xbc>)
 8002a94:	f007 f887 	bl	8009ba6 <HAL_TIM_Base_Init>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	bf14      	ite	ne
 8002a9e:	2301      	movne	r3, #1
 8002aa0:	2300      	moveq	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <_ZL12MX_TIM8_Initv+0x64>
  {
    Error_Handler();
 8002aa8:	f000 f936 	bl	8002d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ab0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002ab2:	f107 0310 	add.w	r3, r7, #16
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4812      	ldr	r0, [pc, #72]	@ (8002b04 <_ZL12MX_TIM8_Initv+0xbc>)
 8002aba:	f007 fa42 	bl	8009f42 <HAL_TIM_ConfigClockSource>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bf14      	ite	ne
 8002ac4:	2301      	movne	r3, #1
 8002ac6:	2300      	moveq	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <_ZL12MX_TIM8_Initv+0x8a>
  {
    Error_Handler();
 8002ace:	f000 f923 	bl	8002d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4808      	ldr	r0, [pc, #32]	@ (8002b04 <_ZL12MX_TIM8_Initv+0xbc>)
 8002ae4:	f007 fc5e 	bl	800a3a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	bf14      	ite	ne
 8002aee:	2301      	movne	r3, #1
 8002af0:	2300      	moveq	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <_ZL12MX_TIM8_Initv+0xb4>
  {
    Error_Handler();
 8002af8:	f000 f90e 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002afc:	bf00      	nop
 8002afe:	3720      	adds	r7, #32
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	2000034c 	.word	0x2000034c
 8002b08:	40013400 	.word	0x40013400

08002b0c <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002b10:	4b16      	ldr	r3, [pc, #88]	@ (8002b6c <_ZL13MX_UART4_Initv+0x60>)
 8002b12:	4a17      	ldr	r2, [pc, #92]	@ (8002b70 <_ZL13MX_UART4_Initv+0x64>)
 8002b14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002b16:	4b15      	ldr	r3, [pc, #84]	@ (8002b6c <_ZL13MX_UART4_Initv+0x60>)
 8002b18:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002b1c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002b1e:	4b13      	ldr	r3, [pc, #76]	@ (8002b6c <_ZL13MX_UART4_Initv+0x60>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002b24:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <_ZL13MX_UART4_Initv+0x60>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002b2a:	4b10      	ldr	r3, [pc, #64]	@ (8002b6c <_ZL13MX_UART4_Initv+0x60>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002b30:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <_ZL13MX_UART4_Initv+0x60>)
 8002b32:	220c      	movs	r2, #12
 8002b34:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b36:	4b0d      	ldr	r3, [pc, #52]	@ (8002b6c <_ZL13MX_UART4_Initv+0x60>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b6c <_ZL13MX_UART4_Initv+0x60>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b42:	4b0a      	ldr	r3, [pc, #40]	@ (8002b6c <_ZL13MX_UART4_Initv+0x60>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b48:	4b08      	ldr	r3, [pc, #32]	@ (8002b6c <_ZL13MX_UART4_Initv+0x60>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002b4e:	4807      	ldr	r0, [pc, #28]	@ (8002b6c <_ZL13MX_UART4_Initv+0x60>)
 8002b50:	f007 fcce 	bl	800a4f0 <HAL_UART_Init>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	bf14      	ite	ne
 8002b5a:	2301      	movne	r3, #1
 8002b5c:	2300      	moveq	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 8002b64:	f000 f8d8 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002b68:	bf00      	nop
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20000398 	.word	0x20000398
 8002b70:	40004c00 	.word	0x40004c00

08002b74 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b7a:	4b16      	ldr	r3, [pc, #88]	@ (8002bd4 <_ZL11MX_DMA_Initv+0x60>)
 8002b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b7e:	4a15      	ldr	r2, [pc, #84]	@ (8002bd4 <_ZL11MX_DMA_Initv+0x60>)
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	6493      	str	r3, [r2, #72]	@ 0x48
 8002b86:	4b13      	ldr	r3, [pc, #76]	@ (8002bd4 <_ZL11MX_DMA_Initv+0x60>)
 8002b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	607b      	str	r3, [r7, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b92:	4b10      	ldr	r3, [pc, #64]	@ (8002bd4 <_ZL11MX_DMA_Initv+0x60>)
 8002b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b96:	4a0f      	ldr	r2, [pc, #60]	@ (8002bd4 <_ZL11MX_DMA_Initv+0x60>)
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd4 <_ZL11MX_DMA_Initv+0x60>)
 8002ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002baa:	2200      	movs	r2, #0
 8002bac:	2105      	movs	r1, #5
 8002bae:	200b      	movs	r0, #11
 8002bb0:	f004 f918 	bl	8006de4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002bb4:	200b      	movs	r0, #11
 8002bb6:	f004 f931 	bl	8006e1c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2105      	movs	r1, #5
 8002bbe:	2039      	movs	r0, #57	@ 0x39
 8002bc0:	f004 f910 	bl	8006de4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8002bc4:	2039      	movs	r0, #57	@ 0x39
 8002bc6:	f004 f929 	bl	8006e1c <HAL_NVIC_EnableIRQ>

}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bde:	f107 030c 	add.w	r3, r7, #12
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	605a      	str	r2, [r3, #4]
 8002be8:	609a      	str	r2, [r3, #8]
 8002bea:	60da      	str	r2, [r3, #12]
 8002bec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bee:	4b3e      	ldr	r3, [pc, #248]	@ (8002ce8 <_ZL12MX_GPIO_Initv+0x110>)
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf2:	4a3d      	ldr	r2, [pc, #244]	@ (8002ce8 <_ZL12MX_GPIO_Initv+0x110>)
 8002bf4:	f043 0304 	orr.w	r3, r3, #4
 8002bf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce8 <_ZL12MX_GPIO_Initv+0x110>)
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c06:	4b38      	ldr	r3, [pc, #224]	@ (8002ce8 <_ZL12MX_GPIO_Initv+0x110>)
 8002c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0a:	4a37      	ldr	r2, [pc, #220]	@ (8002ce8 <_ZL12MX_GPIO_Initv+0x110>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c12:	4b35      	ldr	r3, [pc, #212]	@ (8002ce8 <_ZL12MX_GPIO_Initv+0x110>)
 8002c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1e:	4b32      	ldr	r3, [pc, #200]	@ (8002ce8 <_ZL12MX_GPIO_Initv+0x110>)
 8002c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c22:	4a31      	ldr	r2, [pc, #196]	@ (8002ce8 <_ZL12MX_GPIO_Initv+0x110>)
 8002c24:	f043 0302 	orr.w	r3, r3, #2
 8002c28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ce8 <_ZL12MX_GPIO_Initv+0x110>)
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8002c36:	2200      	movs	r2, #0
 8002c38:	f248 11ff 	movw	r1, #33279	@ 0x81ff
 8002c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c40:	f004 fd02 	bl	8007648 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |OK_LED_Pin|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Backlight_PWM_GPIO_Port, Backlight_PWM_Pin, GPIO_PIN_RESET);
 8002c44:	2200      	movs	r2, #0
 8002c46:	2110      	movs	r1, #16
 8002c48:	4828      	ldr	r0, [pc, #160]	@ (8002cec <_ZL12MX_GPIO_Initv+0x114>)
 8002c4a:	f004 fcfd 	bl	8007648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C_D_Pin|WR_Pin|RD_Pin|Parallel_CS_Pin
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f241 0117 	movw	r1, #4119	@ 0x1017
 8002c54:	4826      	ldr	r0, [pc, #152]	@ (8002cf0 <_ZL12MX_GPIO_Initv+0x118>)
 8002c56:	f004 fcf7 	bl	8007648 <HAL_GPIO_WritePin>
                          |D_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Alert1_Pin */
  GPIO_InitStruct.Pin = Alert1_Pin;
 8002c5a:	2304      	movs	r3, #4
 8002c5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c5e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c64:	2301      	movs	r3, #1
 8002c66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Alert1_GPIO_Port, &GPIO_InitStruct);
 8002c68:	f107 030c 	add.w	r3, r7, #12
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	481f      	ldr	r0, [pc, #124]	@ (8002cec <_ZL12MX_GPIO_Initv+0x114>)
 8002c70:	f004 fb58 	bl	8007324 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin
                           OK_LED_Pin PA15 */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8002c74:	f248 13ff 	movw	r3, #33279	@ 0x81ff
 8002c78:	60fb      	str	r3, [r7, #12]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |OK_LED_Pin|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c86:	f107 030c 	add.w	r3, r7, #12
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c90:	f004 fb48 	bl	8007324 <HAL_GPIO_Init>

  /*Configure GPIO pin : Backlight_PWM_Pin */
  GPIO_InitStruct.Pin = Backlight_PWM_Pin;
 8002c94:	2310      	movs	r3, #16
 8002c96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Backlight_PWM_GPIO_Port, &GPIO_InitStruct);
 8002ca4:	f107 030c 	add.w	r3, r7, #12
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4810      	ldr	r0, [pc, #64]	@ (8002cec <_ZL12MX_GPIO_Initv+0x114>)
 8002cac:	f004 fb3a 	bl	8007324 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_D_Pin WR_Pin RD_Pin Parallel_CS_Pin
                           D_C_Pin */
  GPIO_InitStruct.Pin = C_D_Pin|WR_Pin|RD_Pin|Parallel_CS_Pin
 8002cb0:	f241 0317 	movw	r3, #4119	@ 0x1017
 8002cb4:	60fb      	str	r3, [r7, #12]
                          |D_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc2:	f107 030c 	add.w	r3, r7, #12
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4809      	ldr	r0, [pc, #36]	@ (8002cf0 <_ZL12MX_GPIO_Initv+0x118>)
 8002cca:	f004 fb2b 	bl	8007324 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2105      	movs	r1, #5
 8002cd2:	2008      	movs	r0, #8
 8002cd4:	f004 f886 	bl	8006de4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002cd8:	2008      	movs	r0, #8
 8002cda:	f004 f89f 	bl	8006e1c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cde:	bf00      	nop
 8002ce0:	3720      	adds	r7, #32
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	48000800 	.word	0x48000800
 8002cf0:	48000400 	.word	0x48000400

08002cf4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a04      	ldr	r2, [pc, #16]	@ (8002d14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d101      	bne.n	8002d0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d06:	f001 fd01 	bl	800470c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40000400 	.word	0x40000400

08002d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d1c:	b672      	cpsid	i
}
 8002d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <Error_Handler+0x8>

08002d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2a:	4b11      	ldr	r3, [pc, #68]	@ (8002d70 <HAL_MspInit+0x4c>)
 8002d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d2e:	4a10      	ldr	r2, [pc, #64]	@ (8002d70 <HAL_MspInit+0x4c>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d36:	4b0e      	ldr	r3, [pc, #56]	@ (8002d70 <HAL_MspInit+0x4c>)
 8002d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	607b      	str	r3, [r7, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d42:	4b0b      	ldr	r3, [pc, #44]	@ (8002d70 <HAL_MspInit+0x4c>)
 8002d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d46:	4a0a      	ldr	r2, [pc, #40]	@ (8002d70 <HAL_MspInit+0x4c>)
 8002d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d4e:	4b08      	ldr	r3, [pc, #32]	@ (8002d70 <HAL_MspInit+0x4c>)
 8002d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	210f      	movs	r1, #15
 8002d5e:	f06f 0001 	mvn.w	r0, #1
 8002d62:	f004 f83f 	bl	8006de4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000

08002d74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b0ac      	sub	sp, #176	@ 0xb0
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d8c:	f107 0310 	add.w	r3, r7, #16
 8002d90:	228c      	movs	r2, #140	@ 0x8c
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f00b ff6d 	bl	800ec74 <memset>
  if(hadc->Instance==ADC1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a35      	ldr	r2, [pc, #212]	@ (8002e74 <HAL_ADC_MspInit+0x100>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d163      	bne.n	8002e6c <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002da4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002da8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002daa:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002dae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002db2:	f107 0310 	add.w	r3, r7, #16
 8002db6:	4618      	mov	r0, r3
 8002db8:	f006 f988 	bl	80090cc <HAL_RCCEx_PeriphCLKConfig>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8002dc2:	f7ff ffa9 	bl	8002d18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002dc6:	4b2c      	ldr	r3, [pc, #176]	@ (8002e78 <HAL_ADC_MspInit+0x104>)
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dca:	4a2b      	ldr	r2, [pc, #172]	@ (8002e78 <HAL_ADC_MspInit+0x104>)
 8002dcc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002dd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dd2:	4b29      	ldr	r3, [pc, #164]	@ (8002e78 <HAL_ADC_MspInit+0x104>)
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dde:	4b26      	ldr	r3, [pc, #152]	@ (8002e78 <HAL_ADC_MspInit+0x104>)
 8002de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de2:	4a25      	ldr	r2, [pc, #148]	@ (8002e78 <HAL_ADC_MspInit+0x104>)
 8002de4:	f043 0304 	orr.w	r3, r3, #4
 8002de8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dea:	4b23      	ldr	r3, [pc, #140]	@ (8002e78 <HAL_ADC_MspInit+0x104>)
 8002dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002df6:	2301      	movs	r3, #1
 8002df8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e08:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	481b      	ldr	r0, [pc, #108]	@ (8002e7c <HAL_ADC_MspInit+0x108>)
 8002e10:	f004 fa88 	bl	8007324 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002e14:	4b1a      	ldr	r3, [pc, #104]	@ (8002e80 <HAL_ADC_MspInit+0x10c>)
 8002e16:	4a1b      	ldr	r2, [pc, #108]	@ (8002e84 <HAL_ADC_MspInit+0x110>)
 8002e18:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002e1a:	4b19      	ldr	r3, [pc, #100]	@ (8002e80 <HAL_ADC_MspInit+0x10c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e20:	4b17      	ldr	r3, [pc, #92]	@ (8002e80 <HAL_ADC_MspInit+0x10c>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e26:	4b16      	ldr	r3, [pc, #88]	@ (8002e80 <HAL_ADC_MspInit+0x10c>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e2c:	4b14      	ldr	r3, [pc, #80]	@ (8002e80 <HAL_ADC_MspInit+0x10c>)
 8002e2e:	2280      	movs	r2, #128	@ 0x80
 8002e30:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e32:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <HAL_ADC_MspInit+0x10c>)
 8002e34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e38:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e3a:	4b11      	ldr	r3, [pc, #68]	@ (8002e80 <HAL_ADC_MspInit+0x10c>)
 8002e3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e40:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e42:	4b0f      	ldr	r3, [pc, #60]	@ (8002e80 <HAL_ADC_MspInit+0x10c>)
 8002e44:	2220      	movs	r2, #32
 8002e46:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002e48:	4b0d      	ldr	r3, [pc, #52]	@ (8002e80 <HAL_ADC_MspInit+0x10c>)
 8002e4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e4e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e50:	480b      	ldr	r0, [pc, #44]	@ (8002e80 <HAL_ADC_MspInit+0x10c>)
 8002e52:	f003 fff1 	bl	8006e38 <HAL_DMA_Init>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 8002e5c:	f7ff ff5c 	bl	8002d18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a07      	ldr	r2, [pc, #28]	@ (8002e80 <HAL_ADC_MspInit+0x10c>)
 8002e64:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e66:	4a06      	ldr	r2, [pc, #24]	@ (8002e80 <HAL_ADC_MspInit+0x10c>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002e6c:	bf00      	nop
 8002e6e:	37b0      	adds	r7, #176	@ 0xb0
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	50040000 	.word	0x50040000
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	48000800 	.word	0x48000800
 8002e80:	200001b4 	.word	0x200001b4
 8002e84:	40020008 	.word	0x40020008

08002e88 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08c      	sub	sp, #48	@ 0x30
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 031c 	add.w	r3, r7, #28
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a52      	ldr	r2, [pc, #328]	@ (8002ff0 <HAL_CAN_MspInit+0x168>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d14b      	bne.n	8002f42 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002eaa:	4b52      	ldr	r3, [pc, #328]	@ (8002ff4 <HAL_CAN_MspInit+0x16c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	4a50      	ldr	r2, [pc, #320]	@ (8002ff4 <HAL_CAN_MspInit+0x16c>)
 8002eb2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002eb4:	4b4f      	ldr	r3, [pc, #316]	@ (8002ff4 <HAL_CAN_MspInit+0x16c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d10b      	bne.n	8002ed4 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002ebc:	4b4e      	ldr	r3, [pc, #312]	@ (8002ff8 <HAL_CAN_MspInit+0x170>)
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec0:	4a4d      	ldr	r2, [pc, #308]	@ (8002ff8 <HAL_CAN_MspInit+0x170>)
 8002ec2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ec6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ec8:	4b4b      	ldr	r3, [pc, #300]	@ (8002ff8 <HAL_CAN_MspInit+0x170>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed4:	4b48      	ldr	r3, [pc, #288]	@ (8002ff8 <HAL_CAN_MspInit+0x170>)
 8002ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed8:	4a47      	ldr	r2, [pc, #284]	@ (8002ff8 <HAL_CAN_MspInit+0x170>)
 8002eda:	f043 0302 	orr.w	r3, r3, #2
 8002ede:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ee0:	4b45      	ldr	r3, [pc, #276]	@ (8002ff8 <HAL_CAN_MspInit+0x170>)
 8002ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002eec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efa:	2303      	movs	r3, #3
 8002efc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002efe:	2309      	movs	r3, #9
 8002f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f02:	f107 031c 	add.w	r3, r7, #28
 8002f06:	4619      	mov	r1, r3
 8002f08:	483c      	ldr	r0, [pc, #240]	@ (8002ffc <HAL_CAN_MspInit+0x174>)
 8002f0a:	f004 fa0b 	bl	8007324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f14:	2302      	movs	r3, #2
 8002f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002f20:	2309      	movs	r3, #9
 8002f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f24:	f107 031c 	add.w	r3, r7, #28
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4834      	ldr	r0, [pc, #208]	@ (8002ffc <HAL_CAN_MspInit+0x174>)
 8002f2c:	f004 f9fa 	bl	8007324 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002f30:	2200      	movs	r2, #0
 8002f32:	2105      	movs	r1, #5
 8002f34:	2014      	movs	r0, #20
 8002f36:	f003 ff55 	bl	8006de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002f3a:	2014      	movs	r0, #20
 8002f3c:	f003 ff6e 	bl	8006e1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002f40:	e051      	b.n	8002fe6 <HAL_CAN_MspInit+0x15e>
  else if(hcan->Instance==CAN2)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a2e      	ldr	r2, [pc, #184]	@ (8003000 <HAL_CAN_MspInit+0x178>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d14c      	bne.n	8002fe6 <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff8 <HAL_CAN_MspInit+0x170>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f50:	4a29      	ldr	r2, [pc, #164]	@ (8002ff8 <HAL_CAN_MspInit+0x170>)
 8002f52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f58:	4b27      	ldr	r3, [pc, #156]	@ (8002ff8 <HAL_CAN_MspInit+0x170>)
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002f64:	4b23      	ldr	r3, [pc, #140]	@ (8002ff4 <HAL_CAN_MspInit+0x16c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	4a22      	ldr	r2, [pc, #136]	@ (8002ff4 <HAL_CAN_MspInit+0x16c>)
 8002f6c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002f6e:	4b21      	ldr	r3, [pc, #132]	@ (8002ff4 <HAL_CAN_MspInit+0x16c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d10b      	bne.n	8002f8e <HAL_CAN_MspInit+0x106>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002f76:	4b20      	ldr	r3, [pc, #128]	@ (8002ff8 <HAL_CAN_MspInit+0x170>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff8 <HAL_CAN_MspInit+0x170>)
 8002f7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f80:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f82:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff8 <HAL_CAN_MspInit+0x170>)
 8002f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff8 <HAL_CAN_MspInit+0x170>)
 8002f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f92:	4a19      	ldr	r2, [pc, #100]	@ (8002ff8 <HAL_CAN_MspInit+0x170>)
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f9a:	4b17      	ldr	r3, [pc, #92]	@ (8002ff8 <HAL_CAN_MspInit+0x170>)
 8002f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002fa6:	2320      	movs	r3, #32
 8002fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002faa:	2302      	movs	r3, #2
 8002fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fba:	f107 031c 	add.w	r3, r7, #28
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	480e      	ldr	r0, [pc, #56]	@ (8002ffc <HAL_CAN_MspInit+0x174>)
 8002fc2:	f004 f9af 	bl	8007324 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fc6:	2340      	movs	r3, #64	@ 0x40
 8002fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8002fd6:	2308      	movs	r3, #8
 8002fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fda:	f107 031c 	add.w	r3, r7, #28
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4806      	ldr	r0, [pc, #24]	@ (8002ffc <HAL_CAN_MspInit+0x174>)
 8002fe2:	f004 f99f 	bl	8007324 <HAL_GPIO_Init>
}
 8002fe6:	bf00      	nop
 8002fe8:	3730      	adds	r7, #48	@ 0x30
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40006400 	.word	0x40006400
 8002ff4:	20000438 	.word	0x20000438
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	48000400 	.word	0x48000400
 8003000:	40006800 	.word	0x40006800

08003004 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b0ac      	sub	sp, #176	@ 0xb0
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	60da      	str	r2, [r3, #12]
 800301a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800301c:	f107 0310 	add.w	r3, r7, #16
 8003020:	228c      	movs	r2, #140	@ 0x8c
 8003022:	2100      	movs	r1, #0
 8003024:	4618      	mov	r0, r3
 8003026:	f00b fe25 	bl	800ec74 <memset>
  if(hi2c->Instance==I2C4)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a22      	ldr	r2, [pc, #136]	@ (80030b8 <HAL_I2C_MspInit+0xb4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d13c      	bne.n	80030ae <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8003034:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003038:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800303a:	2300      	movs	r3, #0
 800303c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800303e:	f107 0310 	add.w	r3, r7, #16
 8003042:	4618      	mov	r0, r3
 8003044:	f006 f842 	bl	80090cc <HAL_RCCEx_PeriphCLKConfig>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800304e:	f7ff fe63 	bl	8002d18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003052:	4b1a      	ldr	r3, [pc, #104]	@ (80030bc <HAL_I2C_MspInit+0xb8>)
 8003054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003056:	4a19      	ldr	r2, [pc, #100]	@ (80030bc <HAL_I2C_MspInit+0xb8>)
 8003058:	f043 0302 	orr.w	r3, r3, #2
 800305c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800305e:	4b17      	ldr	r3, [pc, #92]	@ (80030bc <HAL_I2C_MspInit+0xb8>)
 8003060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800306a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800306e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003072:	2312      	movs	r3, #18
 8003074:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307e:	2303      	movs	r3, #3
 8003080:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8003084:	2303      	movs	r3, #3
 8003086:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800308a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800308e:	4619      	mov	r1, r3
 8003090:	480b      	ldr	r0, [pc, #44]	@ (80030c0 <HAL_I2C_MspInit+0xbc>)
 8003092:	f004 f947 	bl	8007324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003096:	4b09      	ldr	r3, [pc, #36]	@ (80030bc <HAL_I2C_MspInit+0xb8>)
 8003098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309a:	4a08      	ldr	r2, [pc, #32]	@ (80030bc <HAL_I2C_MspInit+0xb8>)
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80030a2:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <HAL_I2C_MspInit+0xb8>)
 80030a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 80030ae:	bf00      	nop
 80030b0:	37b0      	adds	r7, #176	@ 0xb0
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40008400 	.word	0x40008400
 80030bc:	40021000 	.word	0x40021000
 80030c0:	48000400 	.word	0x48000400

080030c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	@ 0x28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a3a      	ldr	r2, [pc, #232]	@ (80031cc <HAL_SPI_MspInit+0x108>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d16d      	bne.n	80031c2 <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80030e6:	4b3a      	ldr	r3, [pc, #232]	@ (80031d0 <HAL_SPI_MspInit+0x10c>)
 80030e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ea:	4a39      	ldr	r2, [pc, #228]	@ (80031d0 <HAL_SPI_MspInit+0x10c>)
 80030ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80030f2:	4b37      	ldr	r3, [pc, #220]	@ (80031d0 <HAL_SPI_MspInit+0x10c>)
 80030f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030fe:	4b34      	ldr	r3, [pc, #208]	@ (80031d0 <HAL_SPI_MspInit+0x10c>)
 8003100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003102:	4a33      	ldr	r2, [pc, #204]	@ (80031d0 <HAL_SPI_MspInit+0x10c>)
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800310a:	4b31      	ldr	r3, [pc, #196]	@ (80031d0 <HAL_SPI_MspInit+0x10c>)
 800310c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003116:	4b2e      	ldr	r3, [pc, #184]	@ (80031d0 <HAL_SPI_MspInit+0x10c>)
 8003118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800311a:	4a2d      	ldr	r2, [pc, #180]	@ (80031d0 <HAL_SPI_MspInit+0x10c>)
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003122:	4b2b      	ldr	r3, [pc, #172]	@ (80031d0 <HAL_SPI_MspInit+0x10c>)
 8003124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC12     ------> SPI3_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800312e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003134:	2302      	movs	r3, #2
 8003136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003138:	2300      	movs	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313c:	2303      	movs	r3, #3
 800313e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003140:	2306      	movs	r3, #6
 8003142:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003144:	f107 0314 	add.w	r3, r7, #20
 8003148:	4619      	mov	r1, r3
 800314a:	4822      	ldr	r0, [pc, #136]	@ (80031d4 <HAL_SPI_MspInit+0x110>)
 800314c:	f004 f8ea 	bl	8007324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003150:	2308      	movs	r3, #8
 8003152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003154:	2302      	movs	r3, #2
 8003156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800315c:	2303      	movs	r3, #3
 800315e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003160:	2306      	movs	r3, #6
 8003162:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003164:	f107 0314 	add.w	r3, r7, #20
 8003168:	4619      	mov	r1, r3
 800316a:	481b      	ldr	r0, [pc, #108]	@ (80031d8 <HAL_SPI_MspInit+0x114>)
 800316c:	f004 f8da 	bl	8007324 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8003170:	4b1a      	ldr	r3, [pc, #104]	@ (80031dc <HAL_SPI_MspInit+0x118>)
 8003172:	4a1b      	ldr	r2, [pc, #108]	@ (80031e0 <HAL_SPI_MspInit+0x11c>)
 8003174:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 8003176:	4b19      	ldr	r3, [pc, #100]	@ (80031dc <HAL_SPI_MspInit+0x118>)
 8003178:	2203      	movs	r2, #3
 800317a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800317c:	4b17      	ldr	r3, [pc, #92]	@ (80031dc <HAL_SPI_MspInit+0x118>)
 800317e:	2210      	movs	r2, #16
 8003180:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003182:	4b16      	ldr	r3, [pc, #88]	@ (80031dc <HAL_SPI_MspInit+0x118>)
 8003184:	2200      	movs	r2, #0
 8003186:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003188:	4b14      	ldr	r3, [pc, #80]	@ (80031dc <HAL_SPI_MspInit+0x118>)
 800318a:	2280      	movs	r2, #128	@ 0x80
 800318c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800318e:	4b13      	ldr	r3, [pc, #76]	@ (80031dc <HAL_SPI_MspInit+0x118>)
 8003190:	2200      	movs	r2, #0
 8003192:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003194:	4b11      	ldr	r3, [pc, #68]	@ (80031dc <HAL_SPI_MspInit+0x118>)
 8003196:	2200      	movs	r2, #0
 8003198:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800319a:	4b10      	ldr	r3, [pc, #64]	@ (80031dc <HAL_SPI_MspInit+0x118>)
 800319c:	2200      	movs	r2, #0
 800319e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031a0:	4b0e      	ldr	r3, [pc, #56]	@ (80031dc <HAL_SPI_MspInit+0x118>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80031a6:	480d      	ldr	r0, [pc, #52]	@ (80031dc <HAL_SPI_MspInit+0x118>)
 80031a8:	f003 fe46 	bl	8006e38 <HAL_DMA_Init>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 80031b2:	f7ff fdb1 	bl	8002d18 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a08      	ldr	r2, [pc, #32]	@ (80031dc <HAL_SPI_MspInit+0x118>)
 80031ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80031bc:	4a07      	ldr	r2, [pc, #28]	@ (80031dc <HAL_SPI_MspInit+0x118>)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80031c2:	bf00      	nop
 80031c4:	3728      	adds	r7, #40	@ 0x28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40003c00 	.word	0x40003c00
 80031d0:	40021000 	.word	0x40021000
 80031d4:	48000800 	.word	0x48000800
 80031d8:	48000400 	.word	0x48000400
 80031dc:	20000304 	.word	0x20000304
 80031e0:	4002041c 	.word	0x4002041c

080031e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003228 <HAL_TIM_Base_MspInit+0x44>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d113      	bne.n	800321e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80031f6:	4b0d      	ldr	r3, [pc, #52]	@ (800322c <HAL_TIM_Base_MspInit+0x48>)
 80031f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031fa:	4a0c      	ldr	r2, [pc, #48]	@ (800322c <HAL_TIM_Base_MspInit+0x48>)
 80031fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003200:	6613      	str	r3, [r2, #96]	@ 0x60
 8003202:	4b0a      	ldr	r3, [pc, #40]	@ (800322c <HAL_TIM_Base_MspInit+0x48>)
 8003204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003206:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 5, 0);
 800320e:	2200      	movs	r2, #0
 8003210:	2105      	movs	r1, #5
 8003212:	202c      	movs	r0, #44	@ 0x2c
 8003214:	f003 fde6 	bl	8006de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8003218:	202c      	movs	r0, #44	@ 0x2c
 800321a:	f003 fdff 	bl	8006e1c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40013400 	.word	0x40013400
 800322c:	40021000 	.word	0x40021000

08003230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b0ac      	sub	sp, #176	@ 0xb0
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003238:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003248:	f107 0310 	add.w	r3, r7, #16
 800324c:	228c      	movs	r2, #140	@ 0x8c
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f00b fd0f 	bl	800ec74 <memset>
  if(huart->Instance==UART4)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a25      	ldr	r2, [pc, #148]	@ (80032f0 <HAL_UART_MspInit+0xc0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d143      	bne.n	80032e8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003260:	2308      	movs	r3, #8
 8003262:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003264:	2300      	movs	r3, #0
 8003266:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003268:	f107 0310 	add.w	r3, r7, #16
 800326c:	4618      	mov	r0, r3
 800326e:	f005 ff2d 	bl	80090cc <HAL_RCCEx_PeriphCLKConfig>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003278:	f7ff fd4e 	bl	8002d18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800327c:	4b1d      	ldr	r3, [pc, #116]	@ (80032f4 <HAL_UART_MspInit+0xc4>)
 800327e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003280:	4a1c      	ldr	r2, [pc, #112]	@ (80032f4 <HAL_UART_MspInit+0xc4>)
 8003282:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003286:	6593      	str	r3, [r2, #88]	@ 0x58
 8003288:	4b1a      	ldr	r3, [pc, #104]	@ (80032f4 <HAL_UART_MspInit+0xc4>)
 800328a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003294:	4b17      	ldr	r3, [pc, #92]	@ (80032f4 <HAL_UART_MspInit+0xc4>)
 8003296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003298:	4a16      	ldr	r2, [pc, #88]	@ (80032f4 <HAL_UART_MspInit+0xc4>)
 800329a:	f043 0304 	orr.w	r3, r3, #4
 800329e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032a0:	4b14      	ldr	r3, [pc, #80]	@ (80032f4 <HAL_UART_MspInit+0xc4>)
 80032a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80032ac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80032b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b4:	2302      	movs	r3, #2
 80032b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c0:	2303      	movs	r3, #3
 80032c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80032c6:	2308      	movs	r3, #8
 80032c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80032d0:	4619      	mov	r1, r3
 80032d2:	4809      	ldr	r0, [pc, #36]	@ (80032f8 <HAL_UART_MspInit+0xc8>)
 80032d4:	f004 f826 	bl	8007324 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80032d8:	2200      	movs	r2, #0
 80032da:	2105      	movs	r1, #5
 80032dc:	2034      	movs	r0, #52	@ 0x34
 80032de:	f003 fd81 	bl	8006de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80032e2:	2034      	movs	r0, #52	@ 0x34
 80032e4:	f003 fd9a 	bl	8006e1c <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80032e8:	bf00      	nop
 80032ea:	37b0      	adds	r7, #176	@ 0xb0
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40004c00 	.word	0x40004c00
 80032f4:	40021000 	.word	0x40021000
 80032f8:	48000800 	.word	0x48000800

080032fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08e      	sub	sp, #56	@ 0x38
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800330a:	4b34      	ldr	r3, [pc, #208]	@ (80033dc <HAL_InitTick+0xe0>)
 800330c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330e:	4a33      	ldr	r2, [pc, #204]	@ (80033dc <HAL_InitTick+0xe0>)
 8003310:	f043 0302 	orr.w	r3, r3, #2
 8003314:	6593      	str	r3, [r2, #88]	@ 0x58
 8003316:	4b31      	ldr	r3, [pc, #196]	@ (80033dc <HAL_InitTick+0xe0>)
 8003318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003322:	f107 0210 	add.w	r2, r7, #16
 8003326:	f107 0314 	add.w	r3, r7, #20
 800332a:	4611      	mov	r1, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f005 fe3b 	bl	8008fa8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003338:	2b00      	cmp	r3, #0
 800333a:	d103      	bne.n	8003344 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800333c:	f005 fe08 	bl	8008f50 <HAL_RCC_GetPCLK1Freq>
 8003340:	6378      	str	r0, [r7, #52]	@ 0x34
 8003342:	e004      	b.n	800334e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003344:	f005 fe04 	bl	8008f50 <HAL_RCC_GetPCLK1Freq>
 8003348:	4603      	mov	r3, r0
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800334e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003350:	4a23      	ldr	r2, [pc, #140]	@ (80033e0 <HAL_InitTick+0xe4>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	0c9b      	lsrs	r3, r3, #18
 8003358:	3b01      	subs	r3, #1
 800335a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800335c:	4b21      	ldr	r3, [pc, #132]	@ (80033e4 <HAL_InitTick+0xe8>)
 800335e:	4a22      	ldr	r2, [pc, #136]	@ (80033e8 <HAL_InitTick+0xec>)
 8003360:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8003362:	4b20      	ldr	r3, [pc, #128]	@ (80033e4 <HAL_InitTick+0xe8>)
 8003364:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003368:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800336a:	4a1e      	ldr	r2, [pc, #120]	@ (80033e4 <HAL_InitTick+0xe8>)
 800336c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800336e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8003370:	4b1c      	ldr	r3, [pc, #112]	@ (80033e4 <HAL_InitTick+0xe8>)
 8003372:	2200      	movs	r2, #0
 8003374:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003376:	4b1b      	ldr	r3, [pc, #108]	@ (80033e4 <HAL_InitTick+0xe8>)
 8003378:	2200      	movs	r2, #0
 800337a:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800337c:	4b19      	ldr	r3, [pc, #100]	@ (80033e4 <HAL_InitTick+0xe8>)
 800337e:	2200      	movs	r2, #0
 8003380:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8003382:	4818      	ldr	r0, [pc, #96]	@ (80033e4 <HAL_InitTick+0xe8>)
 8003384:	f006 fc0f 	bl	8009ba6 <HAL_TIM_Base_Init>
 8003388:	4603      	mov	r3, r0
 800338a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800338e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003392:	2b00      	cmp	r3, #0
 8003394:	d11b      	bne.n	80033ce <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8003396:	4813      	ldr	r0, [pc, #76]	@ (80033e4 <HAL_InitTick+0xe8>)
 8003398:	f006 fc5c 	bl	8009c54 <HAL_TIM_Base_Start_IT>
 800339c:	4603      	mov	r3, r0
 800339e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80033a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d111      	bne.n	80033ce <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80033aa:	201d      	movs	r0, #29
 80033ac:	f003 fd36 	bl	8006e1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b0f      	cmp	r3, #15
 80033b4:	d808      	bhi.n	80033c8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80033b6:	2200      	movs	r2, #0
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	201d      	movs	r0, #29
 80033bc:	f003 fd12 	bl	8006de4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033c0:	4a0a      	ldr	r2, [pc, #40]	@ (80033ec <HAL_InitTick+0xf0>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e002      	b.n	80033ce <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80033ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3738      	adds	r7, #56	@ 0x38
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40021000 	.word	0x40021000
 80033e0:	431bde83 	.word	0x431bde83
 80033e4:	2000043c 	.word	0x2000043c
 80033e8:	40000400 	.word	0x40000400
 80033ec:	20000030 	.word	0x20000030

080033f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033f4:	bf00      	nop
 80033f6:	e7fd      	b.n	80033f4 <NMI_Handler+0x4>

080033f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033fc:	bf00      	nop
 80033fe:	e7fd      	b.n	80033fc <HardFault_Handler+0x4>

08003400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003404:	bf00      	nop
 8003406:	e7fd      	b.n	8003404 <MemManage_Handler+0x4>

08003408 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800340c:	bf00      	nop
 800340e:	e7fd      	b.n	800340c <BusFault_Handler+0x4>

08003410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003414:	bf00      	nop
 8003416:	e7fd      	b.n	8003414 <UsageFault_Handler+0x4>

08003418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alert1_Pin);
 800342a:	2004      	movs	r0, #4
 800342c:	f004 f93e 	bl	80076ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003430:	bf00      	nop
 8003432:	bd80      	pop	{r7, pc}

08003434 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003438:	4802      	ldr	r0, [pc, #8]	@ (8003444 <DMA1_Channel1_IRQHandler+0x10>)
 800343a:	f003 fe94 	bl	8007166 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	200001b4 	.word	0x200001b4

08003448 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800344c:	4802      	ldr	r0, [pc, #8]	@ (8003458 <CAN1_RX0_IRQHandler+0x10>)
 800344e:	f003 f9e2 	bl	8006816 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	200001fc 	.word	0x200001fc

0800345c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003460:	4802      	ldr	r0, [pc, #8]	@ (800346c <TIM3_IRQHandler+0x10>)
 8003462:	f006 fc67 	bl	8009d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	2000043c 	.word	0x2000043c

08003470 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003474:	4802      	ldr	r0, [pc, #8]	@ (8003480 <TIM8_UP_IRQHandler+0x10>)
 8003476:	f006 fc5d 	bl	8009d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	2000034c 	.word	0x2000034c

08003484 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003488:	4802      	ldr	r0, [pc, #8]	@ (8003494 <UART4_IRQHandler+0x10>)
 800348a:	f007 f8cb 	bl	800a624 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000398 	.word	0x20000398

08003498 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800349c:	4802      	ldr	r0, [pc, #8]	@ (80034a8 <DMA2_Channel2_IRQHandler+0x10>)
 800349e:	f003 fe62 	bl	8007166 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000304 	.word	0x20000304

080034ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034b4:	4a14      	ldr	r2, [pc, #80]	@ (8003508 <_sbrk+0x5c>)
 80034b6:	4b15      	ldr	r3, [pc, #84]	@ (800350c <_sbrk+0x60>)
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034c0:	4b13      	ldr	r3, [pc, #76]	@ (8003510 <_sbrk+0x64>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d102      	bne.n	80034ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034c8:	4b11      	ldr	r3, [pc, #68]	@ (8003510 <_sbrk+0x64>)
 80034ca:	4a12      	ldr	r2, [pc, #72]	@ (8003514 <_sbrk+0x68>)
 80034cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034ce:	4b10      	ldr	r3, [pc, #64]	@ (8003510 <_sbrk+0x64>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4413      	add	r3, r2
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d207      	bcs.n	80034ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034dc:	f00b fc38 	bl	800ed50 <__errno>
 80034e0:	4603      	mov	r3, r0
 80034e2:	220c      	movs	r2, #12
 80034e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034e6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ea:	e009      	b.n	8003500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034ec:	4b08      	ldr	r3, [pc, #32]	@ (8003510 <_sbrk+0x64>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034f2:	4b07      	ldr	r3, [pc, #28]	@ (8003510 <_sbrk+0x64>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	4a05      	ldr	r2, [pc, #20]	@ (8003510 <_sbrk+0x64>)
 80034fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034fe:	68fb      	ldr	r3, [r7, #12]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20050000 	.word	0x20050000
 800350c:	00000400 	.word	0x00000400
 8003510:	20000488 	.word	0x20000488
 8003514:	20002b30 	.word	0x20002b30

08003518 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800351c:	4b06      	ldr	r3, [pc, #24]	@ (8003538 <SystemInit+0x20>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003522:	4a05      	ldr	r2, [pc, #20]	@ (8003538 <SystemInit+0x20>)
 8003524:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003528:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800352c:	bf00      	nop
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <_ZN7ILI9341C1Ess>:
/**
  * @brief   Constructor for ILI9341 class
  * @param   w: width of LCD
  * @param   h: height of LCD
  */
ILI9341::ILI9341(int16_t w, int16_t h):WIDTH(w),HEIGHT(h)
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	807b      	strh	r3, [r7, #2]
 8003548:	4613      	mov	r3, r2
 800354a:	803b      	strh	r3, [r7, #0]
 800354c:	4a45      	ldr	r2, [pc, #276]	@ (8003664 <_ZN7ILI9341C1Ess+0x128>)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	887a      	ldrh	r2, [r7, #2]
 8003556:	809a      	strh	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	883a      	ldrh	r2, [r7, #0]
 800355c:	80da      	strh	r2, [r3, #6]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	81da      	strh	r2, [r3, #14]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	821a      	strh	r2, [r3, #16]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8003570:	621a      	str	r2, [r3, #32]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8003578:	625a      	str	r2, [r3, #36]	@ 0x24
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8003580:	629a      	str	r2, [r3, #40]	@ 0x28
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8003588:	62da      	str	r2, [r3, #44]	@ 0x2c
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8003590:	631a      	str	r2, [r3, #48]	@ 0x30
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8003598:	635a      	str	r2, [r3, #52]	@ 0x34
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80035a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80035a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2204      	movs	r2, #4
 80035ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003668 <_ZN7ILI9341C1Ess+0x12c>)
 80035b6:	645a      	str	r2, [r3, #68]	@ 0x44
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a29      	ldr	r2, [pc, #164]	@ (8003668 <_ZN7ILI9341C1Ess+0x12c>)
 80035c4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a25      	ldr	r2, [pc, #148]	@ (8003668 <_ZN7ILI9341C1Ess+0x12c>)
 80035d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035da:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a21      	ldr	r2, [pc, #132]	@ (8003668 <_ZN7ILI9341C1Ess+0x12c>)
 80035e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a1f      	ldr	r2, [pc, #124]	@ (800366c <_ZN7ILI9341C1Ess+0x130>)
 80035f0:	665a      	str	r2, [r3, #100]	@ 0x64
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2210      	movs	r2, #16
 80035f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a1b      	ldr	r2, [pc, #108]	@ (800366c <_ZN7ILI9341C1Ess+0x130>)
 80035fe:	66da      	str	r2, [r3, #108]	@ 0x6c
{
  text_size_ = 1;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	819a      	strh	r2, [r3, #12]
  width_ = WIDTH;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	811a      	strh	r2, [r3, #8]
  height_ = HEIGHT;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	815a      	strh	r2, [r3, #10]
  rotation = 0;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	771a      	strb	r2, [r3, #28]
  cursor_y = cursor_x = 0;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	825a      	strh	r2, [r3, #18]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	829a      	strh	r2, [r3, #20]
  textsize_x = textsize_y = 1;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	76da      	strb	r2, [r3, #27]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	7eda      	ldrb	r2, [r3, #27]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	769a      	strb	r2, [r3, #26]
  textcolor = textbgcolor = 0xFFFF;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003644:	831a      	strh	r2, [r3, #24]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	8b1a      	ldrh	r2, [r3, #24]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	82da      	strh	r2, [r3, #22]
  wrap = true;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	775a      	strb	r2, [r3, #29]
}
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	0800fc14 	.word	0x0800fc14
 8003668:	48000400 	.word	0x48000400
 800366c:	48000800 	.word	0x48000800

08003670 <_ZN7ILI9341D1Ev>:

ILI9341::~ILI9341()
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	4a04      	ldr	r2, [pc, #16]	@ (800368c <_ZN7ILI9341D1Ev+0x1c>)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	601a      	str	r2, [r3, #0]
{
  // TODO Auto-generated destructor stub
}
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	0800fc14 	.word	0x0800fc14

08003690 <_ZN7ILI9341D0Ev>:
ILI9341::~ILI9341()
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
}
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff ffe9 	bl	8003670 <_ZN7ILI9341D1Ev>
 800369e:	2170      	movs	r1, #112	@ 0x70
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f00b f9f9 	bl	800ea98 <_ZdlPvj>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <_ZN7ILI93414InitEv>:

/**
  * @brief  Initialize the LCD.
  */
void ILI9341::Init()
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	6078      	str	r0, [r7, #4]
  // Write all control signals high
  HAL_GPIO_WritePin(Backlight_PWM_GPIO_Port_, Backlight_PWM_Pin_, GPIO_PIN_SET);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80036c2:	2201      	movs	r2, #1
 80036c4:	4619      	mov	r1, r3
 80036c6:	f003 ffbf 	bl	8007648 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80036d4:	2201      	movs	r2, #1
 80036d6:	4619      	mov	r1, r3
 80036d8:	f003 ffb6 	bl	8007648 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036e6:	2201      	movs	r2, #1
 80036e8:	4619      	mov	r1, r3
 80036ea:	f003 ffad 	bl	8007648 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80036f8:	2201      	movs	r2, #1
 80036fa:	4619      	mov	r1, r3
 80036fc:	f003 ffa4 	bl	8007648 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_READ_GPIO_Port_, LCD_READ_Pin_, GPIO_PIN_SET);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800370a:	2201      	movs	r2, #1
 800370c:	4619      	mov	r1, r3
 800370e:	f003 ff9b 	bl	8007648 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_SET);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800371c:	2201      	movs	r2, #1
 800371e:	4619      	mov	r1, r3
 8003720:	f003 ff92 	bl	8007648 <HAL_GPIO_WritePin>

  // Hold reset pin
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_RESET);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800372e:	2200      	movs	r2, #0
 8003730:	4619      	mov	r1, r3
 8003732:	f003 ff89 	bl	8007648 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8003736:	200a      	movs	r0, #10
 8003738:	f001 f808 	bl	800474c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_SET);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003746:	2201      	movs	r2, #1
 8003748:	4619      	mov	r1, r3
 800374a:	f003 ff7d 	bl	8007648 <HAL_GPIO_WritePin>

  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003758:	2200      	movs	r2, #0
 800375a:	4619      	mov	r1, r3
 800375c:	f003 ff74 	bl	8007648 <HAL_GPIO_WritePin>

  // Soft reset the LCD
  TransmitCmd(ILI9341_SWRESET);
 8003760:	2101      	movs	r1, #1
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f8c4 	bl	80038f0 <_ZN7ILI934111TransmitCmdEh>
  Transmit8bitData(0x00);
 8003768:	2100      	movs	r1, #0
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8d8 	bl	8003920 <_ZN7ILI934116Transmit8bitDataEh>
  HAL_Delay(50);
 8003770:	2032      	movs	r0, #50	@ 0x32
 8003772:	f000 ffeb 	bl	800474c <HAL_Delay>


  uint8_t cmd, x, numArgs;
  const uint8_t *addr = initcmd;
 8003776:	4b27      	ldr	r3, [pc, #156]	@ (8003814 <_ZN7ILI93414InitEv+0x164>)
 8003778:	613b      	str	r3, [r7, #16]
  while((cmd = *(addr++)) > 0)
 800377a:	e027      	b.n	80037cc <_ZN7ILI93414InitEv+0x11c>
  {
    x = *(addr++);
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	613a      	str	r2, [r7, #16]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	73bb      	strb	r3, [r7, #14]
    numArgs = x & 0x7F;
 8003786:	7bbb      	ldrb	r3, [r7, #14]
 8003788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800378c:	75fb      	strb	r3, [r7, #23]
    TransmitCmd(cmd);
 800378e:	7bfb      	ldrb	r3, [r7, #15]
 8003790:	4619      	mov	r1, r3
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f8ac 	bl	80038f0 <_ZN7ILI934111TransmitCmdEh>
    while(numArgs--)
 8003798:	e007      	b.n	80037aa <_ZN7ILI93414InitEv+0xfa>
    {
      Transmit8bitData(*(addr++));
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	613a      	str	r2, [r7, #16]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	4619      	mov	r1, r3
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f8bb 	bl	8003920 <_ZN7ILI934116Transmit8bitDataEh>
    while(numArgs--)
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
 80037ac:	1e5a      	subs	r2, r3, #1
 80037ae:	75fa      	strb	r2, [r7, #23]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf14      	ite	ne
 80037b4:	2301      	movne	r3, #1
 80037b6:	2300      	moveq	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1ed      	bne.n	800379a <_ZN7ILI93414InitEv+0xea>
    }
    if(x & 0x80)
 80037be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	da02      	bge.n	80037cc <_ZN7ILI93414InitEv+0x11c>
    {
      HAL_Delay(150);
 80037c6:	2096      	movs	r0, #150	@ 0x96
 80037c8:	f000 ffc0 	bl	800474c <HAL_Delay>
  while((cmd = *(addr++)) > 0)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	613a      	str	r2, [r7, #16]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	73fb      	strb	r3, [r7, #15]
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	bf14      	ite	ne
 80037dc:	2301      	movne	r3, #1
 80037de:	2300      	moveq	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1ca      	bne.n	800377c <_ZN7ILI93414InitEv+0xcc>
    }
  }

  SetWindow(0, 0, width_-1, height_-1);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	4613      	mov	r3, r2
 8003802:	2200      	movs	r2, #0
 8003804:	2100      	movs	r1, #0
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f8f0 	bl	80039ec <_ZN7ILI93419SetWindowEtttt>
}
 800380c:	bf00      	nop
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	0800fbe8 	.word	0x0800fbe8

08003818 <_ZN7ILI93415WriteEh>:

/**
  * @brief  Write data to LCD bus.
  */
inline void ILI9341::Write(uint8_t data)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	70fb      	strb	r3, [r7, #3]
  // Put data on Bus
#if UI_USE_HAL
  HAL_GPIO_WritePin(LCD_DATA0_GPIO_Port_, LCD_DATA0_Pin_, static_cast<GPIO_PinState>(data & 0x01U) );
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	b2db      	uxtb	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	2101      	movs	r1, #1
 8003834:	f003 ff08 	bl	8007648 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA1_GPIO_Port_, LCD_DATA1_Pin_, static_cast<GPIO_PinState>(data & 0x02U) );
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	b2db      	uxtb	r3, r3
 8003844:	461a      	mov	r2, r3
 8003846:	2102      	movs	r1, #2
 8003848:	f003 fefe 	bl	8007648 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA2_GPIO_Port_, LCD_DATA2_Pin_, static_cast<GPIO_PinState>(data & 0x04U) );
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	b2db      	uxtb	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	2104      	movs	r1, #4
 800385c:	f003 fef4 	bl	8007648 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA3_GPIO_Port_, LCD_DATA3_Pin_, static_cast<GPIO_PinState>(data & 0x08U) );
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	b2db      	uxtb	r3, r3
 800386c:	461a      	mov	r2, r3
 800386e:	2108      	movs	r1, #8
 8003870:	f003 feea 	bl	8007648 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA4_GPIO_Port_, LCD_DATA4_Pin_, static_cast<GPIO_PinState>(data & 0x10U) );
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	b2db      	uxtb	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	2110      	movs	r1, #16
 8003884:	f003 fee0 	bl	8007648 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA5_GPIO_Port_, LCD_DATA5_Pin_, static_cast<GPIO_PinState>(data & 0x20U) );
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	b2db      	uxtb	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	2120      	movs	r1, #32
 8003898:	f003 fed6 	bl	8007648 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA6_GPIO_Port_, LCD_DATA6_Pin_, static_cast<GPIO_PinState>(data & 0x40U) );
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	461a      	mov	r2, r3
 80038aa:	2140      	movs	r1, #64	@ 0x40
 80038ac:	f003 fecc 	bl	8007648 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA7_GPIO_Port_, LCD_DATA7_Pin_, static_cast<GPIO_PinState>(data & 0x80U) );
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a18      	ldr	r0, [r3, #32]
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	2180      	movs	r1, #128	@ 0x80
 80038c0:	f003 fec2 	bl	8007648 <HAL_GPIO_WritePin>
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80038ce:	2200      	movs	r2, #0
 80038d0:	4619      	mov	r1, r3
 80038d2:	f003 feb9 	bl	8007648 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80038e0:	2201      	movs	r2, #1
 80038e2:	4619      	mov	r1, r3
 80038e4:	f003 feb0 	bl	8007648 <HAL_GPIO_WritePin>
  // Pulse Write
  LCD_WRITE_GPIO_Port_->BSRR = LCD_WRITE_Pin_; // changed from brr to bsrr... ok?
  LCD_WRITE_GPIO_Port_->BSRR = (uint32_t)LCD_WRITE_Pin_ << 16U;
#endif

}
 80038e8:	bf00      	nop
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <_ZN7ILI934111TransmitCmdEh>:
/**
  * @brief  Sends 8-bit command to LCD.
  * @param  cmd: 8-bit command to be sent.
  */
void ILI9341::TransmitCmd(uint8_t cmd)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	70fb      	strb	r3, [r7, #3]
  // D/C -> LOW
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_RESET);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003906:	2200      	movs	r2, #0
 8003908:	4619      	mov	r1, r3
 800390a:	f003 fe9d 	bl	8007648 <HAL_GPIO_WritePin>

  Write(cmd);
 800390e:	78fb      	ldrb	r3, [r7, #3]
 8003910:	4619      	mov	r1, r3
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff ff80 	bl	8003818 <_ZN7ILI93415WriteEh>

  // TODO: Can this line be removed?
  // D/C -> HIGH
  // HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
}
 8003918:	bf00      	nop
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <_ZN7ILI934116Transmit8bitDataEh>:
/**
  * @brief  Sends 8-bit data to LCD.
  * @param  data: 8-bit data to be sent.
  */
void ILI9341::Transmit8bitData(uint8_t data)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	70fb      	strb	r3, [r7, #3]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003936:	2201      	movs	r2, #1
 8003938:	4619      	mov	r1, r3
 800393a:	f003 fe85 	bl	8007648 <HAL_GPIO_WritePin>

  Write(data);
 800393e:	78fb      	ldrb	r3, [r7, #3]
 8003940:	4619      	mov	r1, r3
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff ff68 	bl	8003818 <_ZN7ILI93415WriteEh>
}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <_ZN7ILI934117Transmit16bitDataEt>:
/**
  * @brief  Sends 16-bit data to LCD.
  * @param  data: 16-bit data to be sent to LCD.
  */
void ILI9341::Transmit16bitData(uint16_t data)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	807b      	strh	r3, [r7, #2]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003966:	2201      	movs	r2, #1
 8003968:	4619      	mov	r1, r3
 800396a:	f003 fe6d 	bl	8007648 <HAL_GPIO_WritePin>

  Write(static_cast<uint8_t>(data >> 8));
 800396e:	887b      	ldrh	r3, [r7, #2]
 8003970:	0a1b      	lsrs	r3, r3, #8
 8003972:	b29b      	uxth	r3, r3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	4619      	mov	r1, r3
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff ff4d 	bl	8003818 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 0));
 800397e:	887b      	ldrh	r3, [r7, #2]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	4619      	mov	r1, r3
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff ff47 	bl	8003818 <_ZN7ILI93415WriteEh>

}
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <_ZN7ILI934117Transmit32bitDataEm>:
/**
  * @brief  Sends 32-bit data to LCD.
  * @param  data: 32-bit data to be sent to LCD.
  */
void ILI9341::Transmit32bitData(uint32_t data)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039a6:	2201      	movs	r2, #1
 80039a8:	4619      	mov	r1, r3
 80039aa:	f003 fe4d 	bl	8007648 <HAL_GPIO_WritePin>

  Write(static_cast<uint8_t>(data >> 24));
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	0e1b      	lsrs	r3, r3, #24
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	4619      	mov	r1, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff ff2e 	bl	8003818 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 16));
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	0c1b      	lsrs	r3, r3, #16
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	4619      	mov	r1, r3
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff ff27 	bl	8003818 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 8 ));
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	0a1b      	lsrs	r3, r3, #8
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	4619      	mov	r1, r3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff ff20 	bl	8003818 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 0 ));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	4619      	mov	r1, r3
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff ff1a 	bl	8003818 <_ZN7ILI93415WriteEh>

}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <_ZN7ILI93419SetWindowEtttt>:
  * @param  xe: x end coordinate. xe > xs.
  * @param  ye: y end coordinate. ye > ys.
  * @retval ILI9341_SUCCESS or ILI9341_ERROR.
  */
char ILI9341::SetWindow (uint16_t xs, uint16_t ys, uint16_t xe, uint16_t ye)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	4608      	mov	r0, r1
 80039f6:	4611      	mov	r1, r2
 80039f8:	461a      	mov	r2, r3
 80039fa:	4603      	mov	r3, r0
 80039fc:	817b      	strh	r3, [r7, #10]
 80039fe:	460b      	mov	r3, r1
 8003a00:	813b      	strh	r3, [r7, #8]
 8003a02:	4613      	mov	r3, r2
 8003a04:	80fb      	strh	r3, [r7, #6]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a10:	2200      	movs	r2, #0
 8003a12:	4619      	mov	r1, r3
 8003a14:	f003 fe18 	bl	8007648 <HAL_GPIO_WritePin>

  // check if coordinates is out of range
  // TODO: Use >=, <= instead of >, < for width_ and height_?
  if ((xs > xe) || (xe > width_) ||
 8003a18:	897a      	ldrh	r2, [r7, #10]
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d80f      	bhi.n	8003a40 <_ZN7ILI93419SetWindowEtttt+0x54>
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	dc09      	bgt.n	8003a40 <_ZN7ILI93419SetWindowEtttt+0x54>
 8003a2c:	893a      	ldrh	r2, [r7, #8]
 8003a2e:	8b3b      	ldrh	r3, [r7, #24]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d805      	bhi.n	8003a40 <_ZN7ILI93419SetWindowEtttt+0x54>
      (ys > ye) || (ye > height_))
 8003a34:	8b3b      	ldrh	r3, [r7, #24]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	dd01      	ble.n	8003a44 <_ZN7ILI93419SetWindowEtttt+0x58>
  {
    // out of range
    return ILI9341_ERROR;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e021      	b.n	8003a88 <_ZN7ILI93419SetWindowEtttt+0x9c>
  }

  // set column
  TransmitCmd(ILI9341_CASET);
 8003a44:	212a      	movs	r1, #42	@ 0x2a
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f7ff ff52 	bl	80038f0 <_ZN7ILI934111TransmitCmdEh>
  // set column -> set column
  Transmit32bitData(((uint32_t) xs << 16) | xe);
 8003a4c:	897b      	ldrh	r3, [r7, #10]
 8003a4e:	041a      	lsls	r2, r3, #16
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	4619      	mov	r1, r3
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f7ff ff9b 	bl	8003992 <_ZN7ILI934117Transmit32bitDataEm>
  // set page
  TransmitCmd(ILI9341_PASET);
 8003a5c:	212b      	movs	r1, #43	@ 0x2b
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff ff46 	bl	80038f0 <_ZN7ILI934111TransmitCmdEh>
  // set page -> high byte first
  Transmit32bitData(((uint32_t) ys << 16) | ye);
 8003a64:	893b      	ldrh	r3, [r7, #8]
 8003a66:	041a      	lsls	r2, r3, #16
 8003a68:	8b3b      	ldrh	r3, [r7, #24]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f7ff ff8f 	bl	8003992 <_ZN7ILI934117Transmit32bitDataEm>

  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a7e:	2201      	movs	r2, #1
 8003a80:	4619      	mov	r1, r3
 8003a82:	f003 fde1 	bl	8007648 <HAL_GPIO_WritePin>
  // success
  return ILI9341_SUCCESS;
 8003a86:	2301      	movs	r3, #1
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <_ZN7ILI93419DrawPixelEttt>:
  * @param  y: y coordinate.
  * @param  color: 16-bit color.
  * @retval ILI9341_SUCCESS or ILI9341_ERROR.
  */
char ILI9341::DrawPixel (uint16_t x, uint16_t y, uint16_t color)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	4608      	mov	r0, r1
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	817b      	strh	r3, [r7, #10]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	813b      	strh	r3, [r7, #8]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	80fb      	strh	r3, [r7, #6]
  // check dimension
  if ((x > width_) || (y > height_)) {
 8003aaa:	897b      	ldrh	r3, [r7, #10]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	dc05      	bgt.n	8003ac2 <_ZN7ILI93419DrawPixelEttt+0x32>
 8003ab6:	893b      	ldrh	r3, [r7, #8]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	dd01      	ble.n	8003ac6 <_ZN7ILI93419DrawPixelEttt+0x36>
    // error
    return ILI9341_ERROR;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e00f      	b.n	8003ae6 <_ZN7ILI93419DrawPixelEttt+0x56>
  }
  // set window
  SetWindow(x, y, x, y);
 8003ac6:	8978      	ldrh	r0, [r7, #10]
 8003ac8:	893a      	ldrh	r2, [r7, #8]
 8003aca:	8979      	ldrh	r1, [r7, #10]
 8003acc:	893b      	ldrh	r3, [r7, #8]
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f7ff ff8a 	bl	80039ec <_ZN7ILI93419SetWindowEtttt>
  // draw pixel by 565 mode
  SendColor565(color, 1);
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	2201      	movs	r2, #1
 8003adc:	4619      	mov	r1, r3
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f805 	bl	8003aee <_ZN7ILI934112SendColor565Etm>
  // success
  return ILI9341_SUCCESS;
 8003ae4:	2301      	movs	r3, #1
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <_ZN7ILI934112SendColor565Etm>:

void ILI9341::SendColor565(uint16_t color, uint32_t count)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	460b      	mov	r3, r1
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	817b      	strh	r3, [r7, #10]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b06:	2200      	movs	r2, #0
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f003 fd9d 	bl	8007648 <HAL_GPIO_WritePin>
  // access to RAM
  TransmitCmd(ILI9341_RAMWR);
 8003b0e:	212c      	movs	r1, #44	@ 0x2c
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f7ff feed 	bl	80038f0 <_ZN7ILI934111TransmitCmdEh>
  // counter
  while (count--) {
 8003b16:	e004      	b.n	8003b22 <_ZN7ILI934112SendColor565Etm+0x34>
    // write color - first colors byte
    Transmit16bitData(color);
 8003b18:	897b      	ldrh	r3, [r7, #10]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f7ff ff17 	bl	8003950 <_ZN7ILI934117Transmit16bitDataEt>
  while (count--) {
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	1e5a      	subs	r2, r3, #1
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf14      	ite	ne
 8003b2c:	2301      	movne	r3, #1
 8003b2e:	2300      	moveq	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f0      	bne.n	8003b18 <_ZN7ILI934112SendColor565Etm+0x2a>
  }
  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b40:	2201      	movs	r2, #1
 8003b42:	4619      	mov	r1, r3
 8003b44:	f003 fd80 	bl	8007648 <HAL_GPIO_WritePin>
}
 8003b48:	bf00      	nop
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <_ZN7ILI93415FloodEtm>:

void ILI9341::Flood(uint16_t color, uint32_t count)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	817b      	strh	r3, [r7, #10]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b68:	2200      	movs	r2, #0
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	f003 fd6c 	bl	8007648 <HAL_GPIO_WritePin>
  // access to RAM
  TransmitCmd(ILI9341_RAMWR);
 8003b70:	212c      	movs	r1, #44	@ 0x2c
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f7ff febc 	bl	80038f0 <_ZN7ILI934111TransmitCmdEh>
  // counter
  // Upper and lower are the same
  if( (color & 0xFF) == (color >> 8))
 8003b78:	897b      	ldrh	r3, [r7, #10]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	897a      	ldrh	r2, [r7, #10]
 8003b7e:	0a12      	lsrs	r2, r2, #8
 8003b80:	b292      	uxth	r2, r2
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d13c      	bne.n	8003c00 <_ZN7ILI93415FloodEtm+0xb0>
  {
    count--;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	607b      	str	r3, [r7, #4]
    Transmit16bitData(color);
 8003b8c:	897b      	ldrh	r3, [r7, #10]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f7ff fedd 	bl	8003950 <_ZN7ILI934117Transmit16bitDataEt>
    while(count--)
 8003b96:	e023      	b.n	8003be0 <_ZN7ILI93415FloodEtm+0x90>
    {
#if UI_USE_HAL
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f003 fd4f 	bl	8007648 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	f003 fd46 	bl	8007648 <HAL_GPIO_WritePin>
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	4619      	mov	r1, r3
 8003bca:	f003 fd3d 	bl	8007648 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003bd8:	2201      	movs	r2, #1
 8003bda:	4619      	mov	r1, r3
 8003bdc:	f003 fd34 	bl	8007648 <HAL_GPIO_WritePin>
    while(count--)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	1e5a      	subs	r2, r3, #1
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	bf14      	ite	ne
 8003bea:	2301      	movne	r3, #1
 8003bec:	2300      	moveq	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1d1      	bne.n	8003b98 <_ZN7ILI93415FloodEtm+0x48>
 8003bf4:	e00e      	b.n	8003c14 <_ZN7ILI93415FloodEtm+0xc4>
  }
  else
  {
    while (count--)
    {
      Transmit16bitData(color);
 8003bf6:	897b      	ldrh	r3, [r7, #10]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f7ff fea8 	bl	8003950 <_ZN7ILI934117Transmit16bitDataEt>
    while (count--)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	1e5a      	subs	r2, r3, #1
 8003c04:	607a      	str	r2, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bf14      	ite	ne
 8003c0a:	2301      	movne	r3, #1
 8003c0c:	2300      	moveq	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f0      	bne.n	8003bf6 <_ZN7ILI93415FloodEtm+0xa6>
    }
  }
  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c1e:	2201      	movs	r2, #1
 8003c20:	4619      	mov	r1, r3
 8003c22:	f003 fd11 	bl	8007648 <HAL_GPIO_WritePin>
}
 8003c26:	bf00      	nop
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <_ZN7ILI934111ClearScreenEt>:

void ILI9341::ClearScreen(uint16_t color)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b084      	sub	sp, #16
 8003c32:	af02      	add	r7, sp, #8
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	460b      	mov	r3, r1
 8003c38:	807b      	strh	r3, [r7, #2]
  // set whole window
  SetWindow(0, 0, width_, height_);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2100      	movs	r1, #0
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff feca 	bl	80039ec <_ZN7ILI93419SetWindowEtttt>
  // draw individual pixels
  Flood(color, ILI9341_CACHE_MEM);
 8003c58:	887b      	ldrh	r3, [r7, #2]
 8003c5a:	f44f 3296 	mov.w	r2, #76800	@ 0x12c00
 8003c5e:	4619      	mov	r1, r3
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff ff75 	bl	8003b50 <_ZN7ILI93415FloodEtm>
  // Update background color
  textbgcolor = color;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	887a      	ldrh	r2, [r7, #2]
 8003c6a:	831a      	strh	r2, [r3, #24]
}
 8003c6c:	bf00      	nop
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <_ZN7ILI934113DrawFastHLineEtttt>:

void ILI9341::DrawFastHLine(uint16_t x, uint16_t y, uint16_t length,
                                    uint16_t color) {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	4608      	mov	r0, r1
 8003c7e:	4611      	mov	r1, r2
 8003c80:	461a      	mov	r2, r3
 8003c82:	4603      	mov	r3, r0
 8003c84:	817b      	strh	r3, [r7, #10]
 8003c86:	460b      	mov	r3, r1
 8003c88:	813b      	strh	r3, [r7, #8]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	80fb      	strh	r3, [r7, #6]
  int16_t x2;

  // Initial off-screen clipping
  if ((length <= 0) || (y < 0) || (y >= height_) || (x >= width_) ||
 8003c8e:	88fb      	ldrh	r3, [r7, #6]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d016      	beq.n	8003cc2 <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
 8003c94:	893b      	ldrh	r3, [r7, #8]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	da10      	bge.n	8003cc2 <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
 8003ca0:	897b      	ldrh	r3, [r7, #10]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	da0a      	bge.n	8003cc2 <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
      ((x2 = (x + length - 1)) < 0))
 8003cac:	897a      	ldrh	r2, [r7, #10]
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	82fb      	strh	r3, [r7, #22]
  if ((length <= 0) || (y < 0) || (y >= height_) || (x >= width_) ||
 8003cba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	da01      	bge.n	8003cc6 <_ZN7ILI934113DrawFastHLineEtttt+0x52>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <_ZN7ILI934113DrawFastHLineEtttt+0x54>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d123      	bne.n	8003d14 <_ZN7ILI934113DrawFastHLineEtttt+0xa0>

  if (x < 0) { // Clip left
    length += x;
    x = 0;
  }
  if (x2 >= width_) { // Clip right
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003cd2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	db0c      	blt.n	8003cf4 <_ZN7ILI934113DrawFastHLineEtttt+0x80>
    x2 = width_ - 1;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	82fb      	strh	r3, [r7, #22]
    length = x2 - x + 1;
 8003ce8:	8afa      	ldrh	r2, [r7, #22]
 8003cea:	897b      	ldrh	r3, [r7, #10]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	80fb      	strh	r3, [r7, #6]
  }

  SetWindow(x, y, x2, y);
 8003cf4:	8af8      	ldrh	r0, [r7, #22]
 8003cf6:	893a      	ldrh	r2, [r7, #8]
 8003cf8:	8979      	ldrh	r1, [r7, #10]
 8003cfa:	893b      	ldrh	r3, [r7, #8]
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	4603      	mov	r3, r0
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f7ff fe73 	bl	80039ec <_ZN7ILI93419SetWindowEtttt>
  Flood(color, length);
 8003d06:	88fa      	ldrh	r2, [r7, #6]
 8003d08:	8c3b      	ldrh	r3, [r7, #32]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f7ff ff1f 	bl	8003b50 <_ZN7ILI93415FloodEtm>
 8003d12:	e000      	b.n	8003d16 <_ZN7ILI934113DrawFastHLineEtttt+0xa2>
    return;
 8003d14:	bf00      	nop
}
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <_ZN7ILI934113DrawFastVLineEtttt>:

void ILI9341::DrawFastVLine(uint16_t x, uint16_t y, uint16_t length,
                                    uint16_t color) {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af02      	add	r7, sp, #8
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	4608      	mov	r0, r1
 8003d26:	4611      	mov	r1, r2
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	817b      	strh	r3, [r7, #10]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	813b      	strh	r3, [r7, #8]
 8003d32:	4613      	mov	r3, r2
 8003d34:	80fb      	strh	r3, [r7, #6]
  int16_t y2;

  // Initial off-screen clipping
  if ((length <= 0) || (x < 0) || (x >= width_) || (y >= height_) ||
 8003d36:	88fb      	ldrh	r3, [r7, #6]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d016      	beq.n	8003d6a <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
 8003d3c:	897b      	ldrh	r3, [r7, #10]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003d44:	4293      	cmp	r3, r2
 8003d46:	da10      	bge.n	8003d6a <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
 8003d48:	893b      	ldrh	r3, [r7, #8]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8003d50:	4293      	cmp	r3, r2
 8003d52:	da0a      	bge.n	8003d6a <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
      ((y2 = (y + length - 1)) < 0))
 8003d54:	893a      	ldrh	r2, [r7, #8]
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	4413      	add	r3, r2
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	82fb      	strh	r3, [r7, #22]
  if ((length <= 0) || (x < 0) || (x >= width_) || (y >= height_) ||
 8003d62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	da01      	bge.n	8003d6e <_ZN7ILI934113DrawFastVLineEtttt+0x52>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <_ZN7ILI934113DrawFastVLineEtttt+0x54>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d123      	bne.n	8003dbc <_ZN7ILI934113DrawFastVLineEtttt+0xa0>
    return;
  if (y < 0) { // Clip top
    length += y;
    y = 0;
  }
  if (y2 >= height_) { // Clip bottom
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003d7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	db0c      	blt.n	8003d9c <_ZN7ILI934113DrawFastVLineEtttt+0x80>
    y2 = height_ - 1;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	82fb      	strh	r3, [r7, #22]
    length = y2 - y + 1;
 8003d90:	8afa      	ldrh	r2, [r7, #22]
 8003d92:	893b      	ldrh	r3, [r7, #8]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3301      	adds	r3, #1
 8003d9a:	80fb      	strh	r3, [r7, #6]
  }

  SetWindow(x, y, x, y2);
 8003d9c:	8afb      	ldrh	r3, [r7, #22]
 8003d9e:	8978      	ldrh	r0, [r7, #10]
 8003da0:	893a      	ldrh	r2, [r7, #8]
 8003da2:	8979      	ldrh	r1, [r7, #10]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	4603      	mov	r3, r0
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f7ff fe1f 	bl	80039ec <_ZN7ILI93419SetWindowEtttt>
  Flood(color, length);
 8003dae:	88fa      	ldrh	r2, [r7, #6]
 8003db0:	8c3b      	ldrh	r3, [r7, #32]
 8003db2:	4619      	mov	r1, r3
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f7ff fecb 	bl	8003b50 <_ZN7ILI93415FloodEtm>
 8003dba:	e000      	b.n	8003dbe <_ZN7ILI934113DrawFastVLineEtttt+0xa2>
    return;
 8003dbc:	bf00      	nop
}
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <_ZN7ILI934111SetRotationEh>:

void ILI9341::SetRotation(uint8_t x) {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	70fb      	strb	r3, [r7, #3]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003dda:	2200      	movs	r2, #0
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f003 fc33 	bl	8007648 <HAL_GPIO_WritePin>
  rotation = x % 4; // can't be higher than 3
 8003de2:	78fb      	ldrb	r3, [r7, #3]
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	771a      	strb	r2, [r3, #28]
  switch (rotation) {
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	7f1b      	ldrb	r3, [r3, #28]
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d832      	bhi.n	8003e5c <_ZN7ILI934111SetRotationEh+0x98>
 8003df6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dfc <_ZN7ILI934111SetRotationEh+0x38>)
 8003df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfc:	08003e0d 	.word	0x08003e0d
 8003e00:	08003e21 	.word	0x08003e21
 8003e04:	08003e35 	.word	0x08003e35
 8003e08:	08003e49 	.word	0x08003e49
  case 0:
    x = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8003e0c:	2348      	movs	r3, #72	@ 0x48
 8003e0e:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTWIDTH;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	22f0      	movs	r2, #240	@ 0xf0
 8003e14:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTHEIGHT;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003e1c:	815a      	strh	r2, [r3, #10]
    break;
 8003e1e:	e01d      	b.n	8003e5c <_ZN7ILI934111SetRotationEh+0x98>
  case 1:
    x = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8003e20:	2328      	movs	r3, #40	@ 0x28
 8003e22:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTHEIGHT;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003e2a:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTWIDTH;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	22f0      	movs	r2, #240	@ 0xf0
 8003e30:	815a      	strh	r2, [r3, #10]
    break;
 8003e32:	e013      	b.n	8003e5c <_ZN7ILI934111SetRotationEh+0x98>
  case 2:
    x = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8003e34:	2388      	movs	r3, #136	@ 0x88
 8003e36:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTWIDTH;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	22f0      	movs	r2, #240	@ 0xf0
 8003e3c:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTHEIGHT;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003e44:	815a      	strh	r2, [r3, #10]
    break;
 8003e46:	e009      	b.n	8003e5c <_ZN7ILI934111SetRotationEh+0x98>
  case 3:
    x = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8003e48:	23e8      	movs	r3, #232	@ 0xe8
 8003e4a:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTHEIGHT;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003e52:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTWIDTH;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	22f0      	movs	r2, #240	@ 0xf0
 8003e58:	815a      	strh	r2, [r3, #10]
    break;
 8003e5a:	bf00      	nop
  }
  TransmitCmd(ILI9341_MADCTL); // MADCTL
 8003e5c:	2136      	movs	r1, #54	@ 0x36
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7ff fd46 	bl	80038f0 <_ZN7ILI934111TransmitCmdEh>
  Transmit8bitData(x);
 8003e64:	78fb      	ldrb	r3, [r7, #3]
 8003e66:	4619      	mov	r1, r3
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff fd59 	bl	8003920 <_ZN7ILI934116Transmit8bitDataEh>
  // For 9341, init default full-screen address window:
  SetWindow(0, 0, width_ - 1, height_ - 1); // CS_IDLE happens here
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fdac 	bl	80039ec <_ZN7ILI93419SetWindowEtttt>
}
 8003e94:	bf00      	nop
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <_ZN7ILI934111SetTextSizeEh>:

void ILI9341::SetTextSize(uint8_t size)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	70fb      	strb	r3, [r7, #3]
  text_size_ = size;
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	b21a      	sxth	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	819a      	strh	r2, [r3, #12]
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <_ZN7ILI93418DrawCharEsshth>:

void ILI9341::DrawChar(int16_t x, int16_t y, unsigned char c,
    uint16_t color, uint8_t size)
{
 8003ebc:	b590      	push	{r4, r7, lr}
 8003ebe:	b089      	sub	sp, #36	@ 0x24
 8003ec0:	af04      	add	r7, sp, #16
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	4608      	mov	r0, r1
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4603      	mov	r3, r0
 8003ecc:	817b      	strh	r3, [r7, #10]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	813b      	strh	r3, [r7, #8]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	71fb      	strb	r3, [r7, #7]
  DrawChar(x, y, c, color, textbgcolor, size, size);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8b1b      	ldrh	r3, [r3, #24]
 8003eda:	79fc      	ldrb	r4, [r7, #7]
 8003edc:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8003ee0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003ee4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003ee8:	9203      	str	r2, [sp, #12]
 8003eea:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003eee:	9202      	str	r2, [sp, #8]
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	8c3b      	ldrh	r3, [r7, #32]
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	4623      	mov	r3, r4
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 f804 	bl	8003f08 <_ZN7ILI93418DrawCharEsshtthh>
}
 8003f00:	bf00      	nop
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd90      	pop	{r4, r7, pc}

08003f08 <_ZN7ILI93418DrawCharEsshtthh>:

void ILI9341::DrawChar(int16_t x, int16_t y, unsigned char c,
    uint16_t color, uint16_t bg, uint8_t size_x,
    uint8_t size_y)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b089      	sub	sp, #36	@ 0x24
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	4608      	mov	r0, r1
 8003f12:	4611      	mov	r1, r2
 8003f14:	461a      	mov	r2, r3
 8003f16:	4603      	mov	r3, r0
 8003f18:	817b      	strh	r3, [r7, #10]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	813b      	strh	r3, [r7, #8]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	71fb      	strb	r3, [r7, #7]
  for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8003f22:	2300      	movs	r3, #0
 8003f24:	75fb      	strb	r3, [r7, #23]
 8003f26:	e0a8      	b.n	800407a <_ZN7ILI93418DrawCharEsshtthh+0x172>
      uint8_t line = font[c * 5 + i];
 8003f28:	79fa      	ldrb	r2, [r7, #7]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	441a      	add	r2, r3
 8003f30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f34:	4413      	add	r3, r2
 8003f36:	4a6e      	ldr	r2, [pc, #440]	@ (80040f0 <_ZN7ILI93418DrawCharEsshtthh+0x1e8>)
 8003f38:	5cd3      	ldrb	r3, [r2, r3]
 8003f3a:	75bb      	strb	r3, [r7, #22]
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	757b      	strb	r3, [r7, #21]
 8003f40:	e090      	b.n	8004064 <_ZN7ILI93418DrawCharEsshtthh+0x15c>
        if (line & 1) {
 8003f42:	7dbb      	ldrb	r3, [r7, #22]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d03f      	beq.n	8003fcc <_ZN7ILI93418DrawCharEsshtthh+0xc4>
          if (size_x == 1 && size_y == 1)
 8003f4c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d114      	bne.n	8003f7e <_ZN7ILI93418DrawCharEsshtthh+0x76>
 8003f54:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d110      	bne.n	8003f7e <_ZN7ILI93418DrawCharEsshtthh+0x76>
            DrawPixel(x + i, y + j, color);
 8003f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	897b      	ldrh	r3, [r7, #10]
 8003f64:	4413      	add	r3, r2
 8003f66:	b299      	uxth	r1, r3
 8003f68:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	893b      	ldrh	r3, [r7, #8]
 8003f70:	4413      	add	r3, r2
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f7ff fd8a 	bl	8003a90 <_ZN7ILI93419DrawPixelEttt>
 8003f7c:	e069      	b.n	8004052 <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          else
            FillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 8003f7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	fb12 f303 	smulbb	r3, r2, r3
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	897b      	ldrh	r3, [r7, #10]
 8003f92:	4413      	add	r3, r2
 8003f94:	b299      	uxth	r1, r3
 8003f96:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	fb12 f303 	smulbb	r3, r2, r3
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	893b      	ldrh	r3, [r7, #8]
 8003faa:	4413      	add	r3, r2
 8003fac:	b298      	uxth	r0, r3
 8003fae:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003fb2:	b29c      	uxth	r4, r3
 8003fb4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003fbc:	9201      	str	r2, [sp, #4]
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	4623      	mov	r3, r4
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f939 	bl	800423c <_ZN7ILI93418FillRectEttttt>
 8003fca:	e042      	b.n	8004052 <_ZN7ILI93418DrawCharEsshtthh+0x14a>
                          color);
        } else if (bg != color) {
 8003fcc:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003fce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d03e      	beq.n	8004052 <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          if (size_x == 1 && size_y == 1)
 8003fd4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d114      	bne.n	8004006 <_ZN7ILI93418DrawCharEsshtthh+0xfe>
 8003fdc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d110      	bne.n	8004006 <_ZN7ILI93418DrawCharEsshtthh+0xfe>
            DrawPixel(x + i, y + j, bg);
 8003fe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	897b      	ldrh	r3, [r7, #10]
 8003fec:	4413      	add	r3, r2
 8003fee:	b299      	uxth	r1, r3
 8003ff0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	893b      	ldrh	r3, [r7, #8]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f7ff fd46 	bl	8003a90 <_ZN7ILI93419DrawPixelEttt>
 8004004:	e025      	b.n	8004052 <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          else
            FillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8004006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800400a:	b29a      	uxth	r2, r3
 800400c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004010:	b29b      	uxth	r3, r3
 8004012:	fb12 f303 	smulbb	r3, r2, r3
 8004016:	b29a      	uxth	r2, r3
 8004018:	897b      	ldrh	r3, [r7, #10]
 800401a:	4413      	add	r3, r2
 800401c:	b299      	uxth	r1, r3
 800401e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004022:	b29a      	uxth	r2, r3
 8004024:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004028:	b29b      	uxth	r3, r3
 800402a:	fb12 f303 	smulbb	r3, r2, r3
 800402e:	b29a      	uxth	r2, r3
 8004030:	893b      	ldrh	r3, [r7, #8]
 8004032:	4413      	add	r3, r2
 8004034:	b298      	uxth	r0, r3
 8004036:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800403a:	b29c      	uxth	r4, r3
 800403c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004040:	b29b      	uxth	r3, r3
 8004042:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004044:	9201      	str	r2, [sp, #4]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	4623      	mov	r3, r4
 800404a:	4602      	mov	r2, r0
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f8f5 	bl	800423c <_ZN7ILI93418FillRectEttttt>
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8004052:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	3301      	adds	r3, #1
 800405a:	b2db      	uxtb	r3, r3
 800405c:	757b      	strb	r3, [r7, #21]
 800405e:	7dbb      	ldrb	r3, [r7, #22]
 8004060:	085b      	lsrs	r3, r3, #1
 8004062:	75bb      	strb	r3, [r7, #22]
 8004064:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004068:	2b07      	cmp	r3, #7
 800406a:	f77f af6a 	ble.w	8003f42 <_ZN7ILI93418DrawCharEsshtthh+0x3a>
  for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 800406e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004072:	b2db      	uxtb	r3, r3
 8004074:	3301      	adds	r3, #1
 8004076:	b2db      	uxtb	r3, r3
 8004078:	75fb      	strb	r3, [r7, #23]
 800407a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800407e:	2b04      	cmp	r3, #4
 8004080:	f77f af52 	ble.w	8003f28 <_ZN7ILI93418DrawCharEsshtthh+0x20>
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
 8004084:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004086:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004088:	429a      	cmp	r2, r3
 800408a:	d02d      	beq.n	80040e8 <_ZN7ILI93418DrawCharEsshtthh+0x1e0>
      if (size_x == 1 && size_y == 1)
 800408c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004090:	2b01      	cmp	r3, #1
 8004092:	d10e      	bne.n	80040b2 <_ZN7ILI93418DrawCharEsshtthh+0x1aa>
 8004094:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004098:	2b01      	cmp	r3, #1
 800409a:	d10a      	bne.n	80040b2 <_ZN7ILI93418DrawCharEsshtthh+0x1aa>
        DrawFastVLine(x + 5, y, 8, bg);
 800409c:	897b      	ldrh	r3, [r7, #10]
 800409e:	3305      	adds	r3, #5
 80040a0:	b299      	uxth	r1, r3
 80040a2:	893a      	ldrh	r2, [r7, #8]
 80040a4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	2308      	movs	r3, #8
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f7ff fe36 	bl	8003d1c <_ZN7ILI934113DrawFastVLineEtttt>
      else
        FillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    }
}
 80040b0:	e01a      	b.n	80040e8 <_ZN7ILI93418DrawCharEsshtthh+0x1e0>
        FillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 80040b2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	0092      	lsls	r2, r2, #2
 80040bc:	4413      	add	r3, r2
 80040be:	b29a      	uxth	r2, r3
 80040c0:	897b      	ldrh	r3, [r7, #10]
 80040c2:	4413      	add	r3, r2
 80040c4:	b299      	uxth	r1, r3
 80040c6:	8938      	ldrh	r0, [r7, #8]
 80040c8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80040cc:	b29c      	uxth	r4, r3
 80040ce:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80040da:	9201      	str	r2, [sp, #4]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	4623      	mov	r3, r4
 80040e0:	4602      	mov	r2, r0
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f8aa 	bl	800423c <_ZN7ILI93418FillRectEttttt>
}
 80040e8:	bf00      	nop
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd90      	pop	{r4, r7, pc}
 80040f0:	0800f6e8 	.word	0x0800f6e8

080040f4 <_ZN7ILI93418DrawTextEttPKct>:

void ILI9341::DrawText(uint16_t x, uint16_t y, const char *str, uint16_t color)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	607b      	str	r3, [r7, #4]
 80040fe:	460b      	mov	r3, r1
 8004100:	817b      	strh	r3, [r7, #10]
 8004102:	4613      	mov	r3, r2
 8004104:	813b      	strh	r3, [r7, #8]
  // NOTE: Characters are 6x8 (wxh)
    uint8_t TempChar;

    /* Set area back to span the entire LCD */
    SetWindow(0, 0, width_ - 1, height_ - 1);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29b      	uxth	r3, r3
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	4613      	mov	r3, r2
 8004122:	2200      	movs	r2, #0
 8004124:	2100      	movs	r1, #0
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f7ff fc60 	bl	80039ec <_ZN7ILI93419SetWindowEtttt>
    do
    {
        TempChar = *str++;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	607a      	str	r2, [r7, #4]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	75fb      	strb	r3, [r7, #23]
        DrawChar( x, y, TempChar, color, text_size_);
 8004136:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800413a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	7df8      	ldrb	r0, [r7, #23]
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	8c3b      	ldrh	r3, [r7, #32]
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	4603      	mov	r3, r0
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff feb3 	bl	8003ebc <_ZN7ILI93418DrawCharEsshth>
        if( x < width_ - 1 - 8)
 8004156:	897a      	ldrh	r2, [r7, #10]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800415e:	3b09      	subs	r3, #9
 8004160:	429a      	cmp	r2, r3
 8004162:	da0c      	bge.n	800417e <_ZN7ILI93418DrawTextEttPKct+0x8a>
        {
            x += (6 * text_size_);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800416a:	b29b      	uxth	r3, r3
 800416c:	461a      	mov	r2, r3
 800416e:	0052      	lsls	r2, r2, #1
 8004170:	4413      	add	r3, r2
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	897b      	ldrh	r3, [r7, #10]
 8004178:	4413      	add	r3, r2
 800417a:	817b      	strh	r3, [r7, #10]
 800417c:	e016      	b.n	80041ac <_ZN7ILI93418DrawTextEttPKct+0xb8>
        }
        else if ( y < height_ - 1 - 16)
 800417e:	893a      	ldrh	r2, [r7, #8]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004186:	3b11      	subs	r3, #17
 8004188:	429a      	cmp	r2, r3
 800418a:	da0b      	bge.n	80041a4 <_ZN7ILI93418DrawTextEttPKct+0xb0>
        {
            x = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	817b      	strh	r3, [r7, #10]
            y += (8 * text_size_);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004196:	b29b      	uxth	r3, r3
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	b29a      	uxth	r2, r3
 800419c:	893b      	ldrh	r3, [r7, #8]
 800419e:	4413      	add	r3, r2
 80041a0:	813b      	strh	r3, [r7, #8]
 80041a2:	e003      	b.n	80041ac <_ZN7ILI93418DrawTextEttPKct+0xb8>
        }
        else
        {
            x = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	817b      	strh	r3, [r7, #10]
            y = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	813b      	strh	r3, [r7, #8]
        }
    }
    while ( *str != 0 );
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1bb      	bne.n	800412c <_ZN7ILI93418DrawTextEttPKct+0x38>
}
 80041b4:	bf00      	nop
 80041b6:	bf00      	nop
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <_ZN7ILI93418DrawRectEttttt>:

void ILI9341::DrawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b086      	sub	sp, #24
 80041c2:	af02      	add	r7, sp, #8
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	4608      	mov	r0, r1
 80041c8:	4611      	mov	r1, r2
 80041ca:	461a      	mov	r2, r3
 80041cc:	4603      	mov	r3, r0
 80041ce:	817b      	strh	r3, [r7, #10]
 80041d0:	460b      	mov	r3, r1
 80041d2:	813b      	strh	r3, [r7, #8]
 80041d4:	4613      	mov	r3, r2
 80041d6:	80fb      	strh	r3, [r7, #6]
  DrawFastHLine(x, y, w, color);
 80041d8:	88f8      	ldrh	r0, [r7, #6]
 80041da:	893a      	ldrh	r2, [r7, #8]
 80041dc:	8979      	ldrh	r1, [r7, #10]
 80041de:	8bbb      	ldrh	r3, [r7, #28]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	4603      	mov	r3, r0
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f7ff fd45 	bl	8003c74 <_ZN7ILI934113DrawFastHLineEtttt>
  DrawFastHLine(x, y + h - 1, w, color);
 80041ea:	893a      	ldrh	r2, [r7, #8]
 80041ec:	8b3b      	ldrh	r3, [r7, #24]
 80041ee:	4413      	add	r3, r2
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	88f8      	ldrh	r0, [r7, #6]
 80041f8:	8979      	ldrh	r1, [r7, #10]
 80041fa:	8bbb      	ldrh	r3, [r7, #28]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	4603      	mov	r3, r0
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7ff fd37 	bl	8003c74 <_ZN7ILI934113DrawFastHLineEtttt>
  DrawFastVLine(x, y, h, color);
 8004206:	8b38      	ldrh	r0, [r7, #24]
 8004208:	893a      	ldrh	r2, [r7, #8]
 800420a:	8979      	ldrh	r1, [r7, #10]
 800420c:	8bbb      	ldrh	r3, [r7, #28]
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	4603      	mov	r3, r0
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f7ff fd82 	bl	8003d1c <_ZN7ILI934113DrawFastVLineEtttt>
  DrawFastVLine(x + w - 1, y, h, color);
 8004218:	897a      	ldrh	r2, [r7, #10]
 800421a:	88fb      	ldrh	r3, [r7, #6]
 800421c:	4413      	add	r3, r2
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b299      	uxth	r1, r3
 8004224:	8b38      	ldrh	r0, [r7, #24]
 8004226:	893a      	ldrh	r2, [r7, #8]
 8004228:	8bbb      	ldrh	r3, [r7, #28]
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	4603      	mov	r3, r0
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f7ff fd74 	bl	8003d1c <_ZN7ILI934113DrawFastVLineEtttt>
}
 8004234:	bf00      	nop
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <_ZN7ILI93418FillRectEttttt>:

void ILI9341::FillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	4608      	mov	r0, r1
 8004246:	4611      	mov	r1, r2
 8004248:	461a      	mov	r2, r3
 800424a:	4603      	mov	r3, r0
 800424c:	817b      	strh	r3, [r7, #10]
 800424e:	460b      	mov	r3, r1
 8004250:	813b      	strh	r3, [r7, #8]
 8004252:	4613      	mov	r3, r2
 8004254:	80fb      	strh	r3, [r7, #6]
  int16_t x2, y2;

  // Initial off-screen clipping
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8004256:	88fb      	ldrh	r3, [r7, #6]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d024      	beq.n	80042a6 <_ZN7ILI93418FillRectEttttt+0x6a>
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 800425c:	8c3b      	ldrh	r3, [r7, #32]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d021      	beq.n	80042a6 <_ZN7ILI93418FillRectEttttt+0x6a>
 8004262:	897b      	ldrh	r3, [r7, #10]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800426a:	4293      	cmp	r3, r2
 800426c:	da1b      	bge.n	80042a6 <_ZN7ILI93418FillRectEttttt+0x6a>
 800426e:	893b      	ldrh	r3, [r7, #8]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8004276:	4293      	cmp	r3, r2
 8004278:	da15      	bge.n	80042a6 <_ZN7ILI93418FillRectEttttt+0x6a>
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 800427a:	897a      	ldrh	r2, [r7, #10]
 800427c:	88fb      	ldrh	r3, [r7, #6]
 800427e:	4413      	add	r3, r2
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29b      	uxth	r3, r3
 8004286:	82fb      	strh	r3, [r7, #22]
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 8004288:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800428c:	2b00      	cmp	r3, #0
 800428e:	db0a      	blt.n	80042a6 <_ZN7ILI93418FillRectEttttt+0x6a>
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8004290:	893a      	ldrh	r2, [r7, #8]
 8004292:	8c3b      	ldrh	r3, [r7, #32]
 8004294:	4413      	add	r3, r2
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29b      	uxth	r3, r3
 800429c:	82bb      	strh	r3, [r7, #20]
 800429e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	da01      	bge.n	80042aa <_ZN7ILI93418FillRectEttttt+0x6e>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <_ZN7ILI93418FillRectEttttt+0x70>
 80042aa:	2300      	movs	r3, #0
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d13a      	bne.n	8004326 <_ZN7ILI93418FillRectEttttt+0xea>
  }
  if (y1 < 0) { // Clip top
    h += y1;
    y1 = 0;
  }
  if (x2 >= width_) { // Clip right
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80042b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	db0c      	blt.n	80042d8 <_ZN7ILI93418FillRectEttttt+0x9c>
    x2 = width_ - 1;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	82fb      	strh	r3, [r7, #22]
    w = x2 - x1 + 1;
 80042cc:	8afa      	ldrh	r2, [r7, #22]
 80042ce:	897b      	ldrh	r3, [r7, #10]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3301      	adds	r3, #1
 80042d6:	80fb      	strh	r3, [r7, #6]
  }
  if (y2 >= height_) { // Clip bottom
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80042de:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	db0c      	blt.n	8004300 <_ZN7ILI93418FillRectEttttt+0xc4>
    y2 = height_ - 1;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	82bb      	strh	r3, [r7, #20]
    h = y2 - y1 + 1;
 80042f4:	8aba      	ldrh	r2, [r7, #20]
 80042f6:	893b      	ldrh	r3, [r7, #8]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3301      	adds	r3, #1
 80042fe:	843b      	strh	r3, [r7, #32]
  }

  SetWindow(x1, y1, x2, y2);
 8004300:	8af8      	ldrh	r0, [r7, #22]
 8004302:	8abb      	ldrh	r3, [r7, #20]
 8004304:	893a      	ldrh	r2, [r7, #8]
 8004306:	8979      	ldrh	r1, [r7, #10]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	4603      	mov	r3, r0
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f7ff fb6d 	bl	80039ec <_ZN7ILI93419SetWindowEtttt>
  Flood(color, (uint32_t)w * (uint32_t)h);
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	8c3a      	ldrh	r2, [r7, #32]
 8004316:	fb03 f202 	mul.w	r2, r3, r2
 800431a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800431c:	4619      	mov	r1, r3
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f7ff fc16 	bl	8003b50 <_ZN7ILI93415FloodEtm>
 8004324:	e000      	b.n	8004328 <_ZN7ILI93418FillRectEttttt+0xec>
    return;
 8004326:	bf00      	nop
}
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <_ZN7ILI934110FillCircleEtttt>:
void ILI9341::FillCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) {
 800432e:	b580      	push	{r7, lr}
 8004330:	b088      	sub	sp, #32
 8004332:	af02      	add	r7, sp, #8
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	4608      	mov	r0, r1
 8004338:	4611      	mov	r1, r2
 800433a:	461a      	mov	r2, r3
 800433c:	4603      	mov	r3, r0
 800433e:	817b      	strh	r3, [r7, #10]
 8004340:	460b      	mov	r3, r1
 8004342:	813b      	strh	r3, [r7, #8]
 8004344:	4613      	mov	r3, r2
 8004346:	80fb      	strh	r3, [r7, #6]
    int16_t x = 0, y = r;
 8004348:	2300      	movs	r3, #0
 800434a:	82fb      	strh	r3, [r7, #22]
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	82bb      	strh	r3, [r7, #20]
    int16_t d = 1 - r;
 8004350:	88fb      	ldrh	r3, [r7, #6]
 8004352:	f1c3 0301 	rsb	r3, r3, #1
 8004356:	b29b      	uxth	r3, r3
 8004358:	827b      	strh	r3, [r7, #18]

    // Draw initial center line
    DrawFastHLine(x0 - r, y0, 2 * r + 1, color);
 800435a:	897a      	ldrh	r2, [r7, #10]
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	b299      	uxth	r1, r3
 8004362:	88fb      	ldrh	r3, [r7, #6]
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	b29b      	uxth	r3, r3
 8004368:	3301      	adds	r3, #1
 800436a:	b298      	uxth	r0, r3
 800436c:	893a      	ldrh	r2, [r7, #8]
 800436e:	8c3b      	ldrh	r3, [r7, #32]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	4603      	mov	r3, r0
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f7ff fc7d 	bl	8003c74 <_ZN7ILI934113DrawFastHLineEtttt>

    while (y >= x) {
 800437a:	e073      	b.n	8004464 <_ZN7ILI934110FillCircleEtttt+0x136>
        // Draw horizontal spans
        DrawFastHLine(x0 - x, y0 + y, 2 * x + 1, color);
 800437c:	8afb      	ldrh	r3, [r7, #22]
 800437e:	897a      	ldrh	r2, [r7, #10]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	b299      	uxth	r1, r3
 8004384:	8aba      	ldrh	r2, [r7, #20]
 8004386:	893b      	ldrh	r3, [r7, #8]
 8004388:	4413      	add	r3, r2
 800438a:	b29a      	uxth	r2, r3
 800438c:	8afb      	ldrh	r3, [r7, #22]
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	b29b      	uxth	r3, r3
 8004392:	3301      	adds	r3, #1
 8004394:	b298      	uxth	r0, r3
 8004396:	8c3b      	ldrh	r3, [r7, #32]
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	4603      	mov	r3, r0
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7ff fc69 	bl	8003c74 <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - x, y0 - y, 2 * x + 1, color);
 80043a2:	8afb      	ldrh	r3, [r7, #22]
 80043a4:	897a      	ldrh	r2, [r7, #10]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	b299      	uxth	r1, r3
 80043aa:	8abb      	ldrh	r3, [r7, #20]
 80043ac:	893a      	ldrh	r2, [r7, #8]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	8afb      	ldrh	r3, [r7, #22]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3301      	adds	r3, #1
 80043ba:	b298      	uxth	r0, r3
 80043bc:	8c3b      	ldrh	r3, [r7, #32]
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	4603      	mov	r3, r0
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f7ff fc56 	bl	8003c74 <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - y, y0 + x, 2 * y + 1, color);
 80043c8:	8abb      	ldrh	r3, [r7, #20]
 80043ca:	897a      	ldrh	r2, [r7, #10]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	b299      	uxth	r1, r3
 80043d0:	8afa      	ldrh	r2, [r7, #22]
 80043d2:	893b      	ldrh	r3, [r7, #8]
 80043d4:	4413      	add	r3, r2
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	8abb      	ldrh	r3, [r7, #20]
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3301      	adds	r3, #1
 80043e0:	b298      	uxth	r0, r3
 80043e2:	8c3b      	ldrh	r3, [r7, #32]
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	4603      	mov	r3, r0
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f7ff fc43 	bl	8003c74 <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - y, y0 - x, 2 * y + 1, color);
 80043ee:	8abb      	ldrh	r3, [r7, #20]
 80043f0:	897a      	ldrh	r2, [r7, #10]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	b299      	uxth	r1, r3
 80043f6:	8afb      	ldrh	r3, [r7, #22]
 80043f8:	893a      	ldrh	r2, [r7, #8]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	8abb      	ldrh	r3, [r7, #20]
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	b29b      	uxth	r3, r3
 8004404:	3301      	adds	r3, #1
 8004406:	b298      	uxth	r0, r3
 8004408:	8c3b      	ldrh	r3, [r7, #32]
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	4603      	mov	r3, r0
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f7ff fc30 	bl	8003c74 <_ZN7ILI934113DrawFastHLineEtttt>

        x++;
 8004414:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004418:	b29b      	uxth	r3, r3
 800441a:	3301      	adds	r3, #1
 800441c:	b29b      	uxth	r3, r3
 800441e:	82fb      	strh	r3, [r7, #22]
        if (d < 0) {
 8004420:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004424:	2b00      	cmp	r3, #0
 8004426:	da09      	bge.n	800443c <_ZN7ILI934110FillCircleEtttt+0x10e>
            d += 2 * x + 1;
 8004428:	8afb      	ldrh	r3, [r7, #22]
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	8a7b      	ldrh	r3, [r7, #18]
 8004430:	4413      	add	r3, r2
 8004432:	b29b      	uxth	r3, r3
 8004434:	3301      	adds	r3, #1
 8004436:	b29b      	uxth	r3, r3
 8004438:	827b      	strh	r3, [r7, #18]
 800443a:	e013      	b.n	8004464 <_ZN7ILI934110FillCircleEtttt+0x136>
        } else {
            y--;
 800443c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29b      	uxth	r3, r3
 8004446:	82bb      	strh	r3, [r7, #20]
            d += 2 * (x - y) + 1;
 8004448:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800444c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	b29b      	uxth	r3, r3
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	8a7b      	ldrh	r3, [r7, #18]
 800445a:	4413      	add	r3, r2
 800445c:	b29b      	uxth	r3, r3
 800445e:	3301      	adds	r3, #1
 8004460:	b29b      	uxth	r3, r3
 8004462:	827b      	strh	r3, [r7, #18]
    while (y >= x) {
 8004464:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004468:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800446c:	429a      	cmp	r2, r3
 800446e:	da85      	bge.n	800437c <_ZN7ILI934110FillCircleEtttt+0x4e>
        }
    }
}
 8004470:	bf00      	nop
 8004472:	bf00      	nop
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <TCAL9538RSVR_INIT>:
*/



uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b086      	sub	sp, #24
 800447e:	af00      	add	r7, sp, #0
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	4611      	mov	r1, r2
 8004486:	461a      	mov	r2, r3
 8004488:	460b      	mov	r3, r1
 800448a:	71fb      	strb	r3, [r7, #7]
 800448c:	4613      	mov	r3, r2
 800448e:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;
	dev->input = direction_bitMask;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	79ba      	ldrb	r2, [r7, #6]
 8004498:	719a      	strb	r2, [r3, #6]


    dev->i2cHandle = i2cHandle;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	601a      	str	r2, [r3, #0]
    dev->portValues = 0;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 80044a6:	79fb      	ldrb	r3, [r7, #7]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress<<1);
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	b25b      	sxtb	r3, r3
 80044b4:	f063 031f 	orn	r3, r3, #31
 80044b8:	b25b      	sxtb	r3, r3
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	711a      	strb	r2, [r3, #4]
    uint8_t hold_bitMask = direction_bitMask;
 80044c0:	79bb      	ldrb	r3, [r7, #6]
 80044c2:	757b      	strb	r3, [r7, #21]

    status = TCAL9538RSVR_SetDirection(dev, &hold_bitMask);
 80044c4:	f107 0315 	add.w	r3, r7, #21
 80044c8:	4619      	mov	r1, r3
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f83b 	bl	8004546 <TCAL9538RSVR_SetDirection>
 80044d0:	4603      	mov	r3, r0
 80044d2:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 80044d4:	7dbb      	ldrb	r3, [r7, #22]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	bf14      	ite	ne
 80044da:	2301      	movne	r3, #1
 80044dc:	2300      	moveq	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	461a      	mov	r2, r3
 80044e2:	7dfb      	ldrb	r3, [r7, #23]
 80044e4:	4413      	add	r3, r2
 80044e6:	75fb      	strb	r3, [r7, #23]

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 80044e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80044ec:	4619      	mov	r1, r3
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 f838 	bl	8004564 <TCAL9538RSVR_SetInterrupts>
 80044f4:	4603      	mov	r3, r0
 80044f6:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 80044f8:	7dbb      	ldrb	r3, [r7, #22]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bf14      	ite	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	2300      	moveq	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	7dfb      	ldrb	r3, [r7, #23]
 8004508:	4413      	add	r3, r2
 800450a:	75fb      	strb	r3, [r7, #23]

    // if all pins are inputs, invert all pins
    if (direction_bitMask == 0xFF) {
 800450c:	79bb      	ldrb	r3, [r7, #6]
 800450e:	2bff      	cmp	r3, #255	@ 0xff
 8004510:	d114      	bne.n	800453c <TCAL9538RSVR_INIT+0xc2>
        uint8_t full = 0xFF;
 8004512:	23ff      	movs	r3, #255	@ 0xff
 8004514:	753b      	strb	r3, [r7, #20]
        status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_INVERSION, &full);
 8004516:	f107 0314 	add.w	r3, r7, #20
 800451a:	461a      	mov	r2, r3
 800451c:	2102      	movs	r1, #2
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f894 	bl	800464c <TCAL9538RSVR_WriteRegister>
 8004524:	4603      	mov	r3, r0
 8004526:	75bb      	strb	r3, [r7, #22]
        errNum += (status != HAL_OK);
 8004528:	7dbb      	ldrb	r3, [r7, #22]
 800452a:	2b00      	cmp	r3, #0
 800452c:	bf14      	ite	ne
 800452e:	2301      	movne	r3, #1
 8004530:	2300      	moveq	r3, #0
 8004532:	b2db      	uxtb	r3, r3
 8004534:	461a      	mov	r2, r3
 8004536:	7dfb      	ldrb	r3, [r7, #23]
 8004538:	4413      	add	r3, r2
 800453a:	75fb      	strb	r3, [r7, #23]
    }
    

    return (errNum);
 800453c:	7dfb      	ldrb	r3, [r7, #23]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t* bitMask)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, bitMask);
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	2103      	movs	r1, #3
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f879 	bl	800464c <TCAL9538RSVR_WriteRegister>
 800455a:	4603      	mov	r3, r0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 8004570:	1cfb      	adds	r3, r7, #3
 8004572:	461a      	mov	r2, r3
 8004574:	2145      	movs	r1, #69	@ 0x45
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f868 	bl	800464c <TCAL9538RSVR_WriteRegister>
 800457c:	4603      	mov	r3, r0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 800458e:	2300      	movs	r3, #0
 8004590:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    uint8_t triggeredInterrupts = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	737b      	strb	r3, [r7, #13]


    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 8004596:	f107 030d 	add.w	r3, r7, #13
 800459a:	461a      	mov	r2, r3
 800459c:	2146      	movs	r1, #70	@ 0x46
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f837 	bl	8004612 <TCAL9538RSVR_ReadRegister>
 80045a4:	4603      	mov	r3, r0
 80045a6:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 80045a8:	7bbb      	ldrb	r3, [r7, #14]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bf14      	ite	ne
 80045ae:	2301      	movne	r3, #1
 80045b0:	2300      	moveq	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	4413      	add	r3, r2
 80045ba:	73fb      	strb	r3, [r7, #15]

    // Read updated input values
    status = TCAL9538RSVR_ReadInput(dev, &dev->portValues);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3305      	adds	r3, #5
 80045c0:	4619      	mov	r1, r3
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f807 	bl	80045d6 <TCAL9538RSVR_ReadInput>
 80045c8:	4603      	mov	r3, r0
 80045ca:	73bb      	strb	r3, [r7, #14]


    return (errNum);
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <TCAL9538RSVR_ReadInput>:




HAL_StatusTypeDef TCAL9538RSVR_ReadInput(TCAL9538RSVR* dev, uint8_t *data)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, data);
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	2100      	movs	r1, #0
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f814 	bl	8004612 <TCAL9538RSVR_ReadRegister>
 80045ea:	4603      	mov	r3, r0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <TCAL9538RSVR_SetOutput>:
HAL_StatusTypeDef TCAL9538RSVR_SetOutput(TCAL9538RSVR* dev, uint8_t *data)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	2101      	movs	r1, #1
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f822 	bl	800464c <TCAL9538RSVR_WriteRegister>
 8004608:	4603      	mov	r3, r0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <TCAL9538RSVR_ReadRegister>:

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b088      	sub	sp, #32
 8004616:	af04      	add	r7, sp, #16
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	460b      	mov	r3, r1
 800461c:	607a      	str	r2, [r7, #4]
 800461e:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	791b      	ldrb	r3, [r3, #4]
 8004628:	4619      	mov	r1, r3
 800462a:	7afb      	ldrb	r3, [r7, #11]
 800462c:	b29a      	uxth	r2, r3
 800462e:	f04f 33ff 	mov.w	r3, #4294967295
 8004632:	9302      	str	r3, [sp, #8]
 8004634:	2301      	movs	r3, #1
 8004636:	9301      	str	r3, [sp, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	2301      	movs	r3, #1
 800463e:	f003 f9fd 	bl	8007a3c <HAL_I2C_Mem_Read>
 8004642:	4603      	mov	r3, r0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af04      	add	r7, sp, #16
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	460b      	mov	r3, r1
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Write(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	791b      	ldrb	r3, [r3, #4]
 8004662:	4619      	mov	r1, r3
 8004664:	7afb      	ldrb	r3, [r7, #11]
 8004666:	b29a      	uxth	r2, r3
 8004668:	f04f 33ff 	mov.w	r3, #4294967295
 800466c:	9302      	str	r3, [sp, #8]
 800466e:	2301      	movs	r3, #1
 8004670:	9301      	str	r3, [sp, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	2301      	movs	r3, #1
 8004678:	f003 f8cc 	bl	8007814 <HAL_I2C_Mem_Write>
 800467c:	4603      	mov	r3, r0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004688:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80046c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800468c:	f7fe ff44 	bl	8003518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004690:	480c      	ldr	r0, [pc, #48]	@ (80046c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004692:	490d      	ldr	r1, [pc, #52]	@ (80046c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004694:	4a0d      	ldr	r2, [pc, #52]	@ (80046cc <LoopForever+0xe>)
  movs r3, #0
 8004696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004698:	e002      	b.n	80046a0 <LoopCopyDataInit>

0800469a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800469a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800469c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800469e:	3304      	adds	r3, #4

080046a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046a4:	d3f9      	bcc.n	800469a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046a6:	4a0a      	ldr	r2, [pc, #40]	@ (80046d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80046a8:	4c0a      	ldr	r4, [pc, #40]	@ (80046d4 <LoopForever+0x16>)
  movs r3, #0
 80046aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046ac:	e001      	b.n	80046b2 <LoopFillZerobss>

080046ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046b0:	3204      	adds	r2, #4

080046b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046b4:	d3fb      	bcc.n	80046ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80046b6:	f00a fb51 	bl	800ed5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80046ba:	f7fd fec7 	bl	800244c <main>

080046be <LoopForever>:

LoopForever:
    b LoopForever
 80046be:	e7fe      	b.n	80046be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80046c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80046c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046c8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80046cc:	0800fc68 	.word	0x0800fc68
  ldr r2, =_sbss
 80046d0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80046d4:	20002b30 	.word	0x20002b30

080046d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80046d8:	e7fe      	b.n	80046d8 <ADC1_2_IRQHandler>

080046da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046e4:	2003      	movs	r0, #3
 80046e6:	f002 fb72 	bl	8006dce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046ea:	200f      	movs	r0, #15
 80046ec:	f7fe fe06 	bl	80032fc <HAL_InitTick>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	71fb      	strb	r3, [r7, #7]
 80046fa:	e001      	b.n	8004700 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80046fc:	f7fe fb12 	bl	8002d24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004700:	79fb      	ldrb	r3, [r7, #7]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004710:	4b06      	ldr	r3, [pc, #24]	@ (800472c <HAL_IncTick+0x20>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	4b06      	ldr	r3, [pc, #24]	@ (8004730 <HAL_IncTick+0x24>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4413      	add	r3, r2
 800471c:	4a04      	ldr	r2, [pc, #16]	@ (8004730 <HAL_IncTick+0x24>)
 800471e:	6013      	str	r3, [r2, #0]
}
 8004720:	bf00      	nop
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000034 	.word	0x20000034
 8004730:	2000048c 	.word	0x2000048c

08004734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  return uwTick;
 8004738:	4b03      	ldr	r3, [pc, #12]	@ (8004748 <HAL_GetTick+0x14>)
 800473a:	681b      	ldr	r3, [r3, #0]
}
 800473c:	4618      	mov	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	2000048c 	.word	0x2000048c

0800474c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004754:	f7ff ffee 	bl	8004734 <HAL_GetTick>
 8004758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004764:	d005      	beq.n	8004772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004766:	4b0a      	ldr	r3, [pc, #40]	@ (8004790 <HAL_Delay+0x44>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004772:	bf00      	nop
 8004774:	f7ff ffde 	bl	8004734 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	429a      	cmp	r2, r3
 8004782:	d8f7      	bhi.n	8004774 <HAL_Delay+0x28>
  {
  }
}
 8004784:	bf00      	nop
 8004786:	bf00      	nop
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	20000034 	.word	0x20000034

08004794 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	609a      	str	r2, [r3, #8]
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	609a      	str	r2, [r3, #8]
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3360      	adds	r3, #96	@ 0x60
 800480e:	461a      	mov	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	4b08      	ldr	r3, [pc, #32]	@ (8004840 <LL_ADC_SetOffset+0x44>)
 800481e:	4013      	ands	r3, r2
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	4313      	orrs	r3, r2
 800482c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004834:	bf00      	nop
 8004836:	371c      	adds	r7, #28
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	03fff000 	.word	0x03fff000

08004844 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3360      	adds	r3, #96	@ 0x60
 8004852:	461a      	mov	r2, r3
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3360      	adds	r3, #96	@ 0x60
 8004880:	461a      	mov	r2, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	431a      	orrs	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	615a      	str	r2, [r3, #20]
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b087      	sub	sp, #28
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3330      	adds	r3, #48	@ 0x30
 8004902:	461a      	mov	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	0a1b      	lsrs	r3, r3, #8
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	f003 030c 	and.w	r3, r3, #12
 800490e:	4413      	add	r3, r2
 8004910:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f003 031f 	and.w	r3, r3, #31
 800491c:	211f      	movs	r1, #31
 800491e:	fa01 f303 	lsl.w	r3, r1, r3
 8004922:	43db      	mvns	r3, r3
 8004924:	401a      	ands	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	0e9b      	lsrs	r3, r3, #26
 800492a:	f003 011f 	and.w	r1, r3, #31
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	fa01 f303 	lsl.w	r3, r1, r3
 8004938:	431a      	orrs	r2, r3
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800493e:	bf00      	nop
 8004940:	371c      	adds	r7, #28
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800494a:	b480      	push	{r7}
 800494c:	b087      	sub	sp, #28
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3314      	adds	r3, #20
 800495a:	461a      	mov	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	0e5b      	lsrs	r3, r3, #25
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	4413      	add	r3, r2
 8004968:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	0d1b      	lsrs	r3, r3, #20
 8004972:	f003 031f 	and.w	r3, r3, #31
 8004976:	2107      	movs	r1, #7
 8004978:	fa01 f303 	lsl.w	r3, r1, r3
 800497c:	43db      	mvns	r3, r3
 800497e:	401a      	ands	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	0d1b      	lsrs	r3, r3, #20
 8004984:	f003 031f 	and.w	r3, r3, #31
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	fa01 f303 	lsl.w	r3, r1, r3
 800498e:	431a      	orrs	r2, r3
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004994:	bf00      	nop
 8004996:	371c      	adds	r7, #28
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b8:	43db      	mvns	r3, r3
 80049ba:	401a      	ands	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f003 0318 	and.w	r3, r3, #24
 80049c2:	4908      	ldr	r1, [pc, #32]	@ (80049e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80049c4:	40d9      	lsrs	r1, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	400b      	ands	r3, r1
 80049ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ce:	431a      	orrs	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80049d6:	bf00      	nop
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	0007ffff 	.word	0x0007ffff

080049e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 031f 	and.w	r3, r3, #31
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004a14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6093      	str	r3, [r2, #8]
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a3c:	d101      	bne.n	8004a42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e000      	b.n	8004a44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004a60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a64:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a8c:	d101      	bne.n	8004a92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e000      	b.n	8004a94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ab0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ab4:	f043 0201 	orr.w	r2, r3, #1
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ad8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004adc:	f043 0202 	orr.w	r2, r3, #2
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <LL_ADC_IsEnabled+0x18>
 8004b04:	2301      	movs	r3, #1
 8004b06:	e000      	b.n	8004b0a <LL_ADC_IsEnabled+0x1a>
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d101      	bne.n	8004b2e <LL_ADC_IsDisableOngoing+0x18>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e000      	b.n	8004b30 <LL_ADC_IsDisableOngoing+0x1a>
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b50:	f043 0204 	orr.w	r2, r3, #4
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b78:	f043 0210 	orr.w	r2, r3, #16
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d101      	bne.n	8004ba4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004bc2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004bc6:	f043 0220 	orr.w	r2, r3, #32
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d101      	bne.n	8004bf2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e000      	b.n	8004bf4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b089      	sub	sp, #36	@ 0x24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e133      	b.n	8004e82 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d109      	bne.n	8004c3c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7fe f8a3 	bl	8002d74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff fef1 	bl	8004a28 <LL_ADC_IsDeepPowerDownEnabled>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d004      	beq.n	8004c56 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff fed7 	bl	8004a04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff ff0c 	bl	8004a78 <LL_ADC_IsInternalRegulatorEnabled>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d115      	bne.n	8004c92 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff fef0 	bl	8004a50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c70:	4b86      	ldr	r3, [pc, #536]	@ (8004e8c <HAL_ADC_Init+0x28c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	099b      	lsrs	r3, r3, #6
 8004c76:	4a86      	ldr	r2, [pc, #536]	@ (8004e90 <HAL_ADC_Init+0x290>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	099b      	lsrs	r3, r3, #6
 8004c7e:	3301      	adds	r3, #1
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004c84:	e002      	b.n	8004c8c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f9      	bne.n	8004c86 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7ff feee 	bl	8004a78 <LL_ADC_IsInternalRegulatorEnabled>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10d      	bne.n	8004cbe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca6:	f043 0210 	orr.w	r2, r3, #16
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb2:	f043 0201 	orr.w	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff ff62 	bl	8004b8c <LL_ADC_REG_IsConversionOngoing>
 8004cc8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f040 80cc 	bne.w	8004e70 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f040 80c8 	bne.w	8004e70 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004ce8:	f043 0202 	orr.w	r2, r3, #2
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff fefb 	bl	8004af0 <LL_ADC_IsEnabled>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d115      	bne.n	8004d2c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d00:	4864      	ldr	r0, [pc, #400]	@ (8004e94 <HAL_ADC_Init+0x294>)
 8004d02:	f7ff fef5 	bl	8004af0 <LL_ADC_IsEnabled>
 8004d06:	4604      	mov	r4, r0
 8004d08:	4863      	ldr	r0, [pc, #396]	@ (8004e98 <HAL_ADC_Init+0x298>)
 8004d0a:	f7ff fef1 	bl	8004af0 <LL_ADC_IsEnabled>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	431c      	orrs	r4, r3
 8004d12:	4862      	ldr	r0, [pc, #392]	@ (8004e9c <HAL_ADC_Init+0x29c>)
 8004d14:	f7ff feec 	bl	8004af0 <LL_ADC_IsEnabled>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	4323      	orrs	r3, r4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d105      	bne.n	8004d2c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	4619      	mov	r1, r3
 8004d26:	485e      	ldr	r0, [pc, #376]	@ (8004ea0 <HAL_ADC_Init+0x2a0>)
 8004d28:	f7ff fd34 	bl	8004794 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	7e5b      	ldrb	r3, [r3, #25]
 8004d30:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d36:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004d3c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004d42:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d4a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d106      	bne.n	8004d68 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	045b      	lsls	r3, r3, #17
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d009      	beq.n	8004d84 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d74:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	4b46      	ldr	r3, [pc, #280]	@ (8004ea4 <HAL_ADC_Init+0x2a4>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6812      	ldr	r2, [r2, #0]
 8004d92:	69b9      	ldr	r1, [r7, #24]
 8004d94:	430b      	orrs	r3, r1
 8004d96:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff ff1c 	bl	8004bda <LL_ADC_INJ_IsConversionOngoing>
 8004da2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d140      	bne.n	8004e2c <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d13d      	bne.n	8004e2c <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	7e1b      	ldrb	r3, [r3, #24]
 8004db8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004dba:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004dc2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dd2:	f023 0306 	bic.w	r3, r3, #6
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6812      	ldr	r2, [r2, #0]
 8004dda:	69b9      	ldr	r1, [r7, #24]
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d118      	bne.n	8004e1c <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004df4:	f023 0304 	bic.w	r3, r3, #4
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004e00:	4311      	orrs	r1, r2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004e06:	4311      	orrs	r1, r2
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0201 	orr.w	r2, r2, #1
 8004e18:	611a      	str	r2, [r3, #16]
 8004e1a:	e007      	b.n	8004e2c <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0201 	bic.w	r2, r2, #1
 8004e2a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d10c      	bne.n	8004e4e <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3a:	f023 010f 	bic.w	r1, r3, #15
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	1e5a      	subs	r2, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e4c:	e007      	b.n	8004e5e <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 020f 	bic.w	r2, r2, #15
 8004e5c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e62:	f023 0303 	bic.w	r3, r3, #3
 8004e66:	f043 0201 	orr.w	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e6e:	e007      	b.n	8004e80 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e74:	f043 0210 	orr.w	r2, r3, #16
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e80:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3724      	adds	r7, #36	@ 0x24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd90      	pop	{r4, r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	2000002c 	.word	0x2000002c
 8004e90:	053e2d63 	.word	0x053e2d63
 8004e94:	50040000 	.word	0x50040000
 8004e98:	50040100 	.word	0x50040100
 8004e9c:	50040200 	.word	0x50040200
 8004ea0:	50040300 	.word	0x50040300
 8004ea4:	fff0c007 	.word	0xfff0c007

08004ea8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004eb4:	4853      	ldr	r0, [pc, #332]	@ (8005004 <HAL_ADC_Start_DMA+0x15c>)
 8004eb6:	f7ff fd97 	bl	80049e8 <LL_ADC_GetMultimode>
 8004eba:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff fe63 	bl	8004b8c <LL_ADC_REG_IsConversionOngoing>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f040 8093 	bne.w	8004ff4 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_ADC_Start_DMA+0x34>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e08e      	b.n	8004ffa <HAL_ADC_Start_DMA+0x152>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a47      	ldr	r2, [pc, #284]	@ (8005008 <HAL_ADC_Start_DMA+0x160>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d008      	beq.n	8004f00 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	2b05      	cmp	r3, #5
 8004ef8:	d002      	beq.n	8004f00 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b09      	cmp	r3, #9
 8004efe:	d172      	bne.n	8004fe6 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 fdcb 	bl	8005a9c <ADC_Enable>
 8004f06:	4603      	mov	r3, r0
 8004f08:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d165      	bne.n	8004fdc <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004f18:	f023 0301 	bic.w	r3, r3, #1
 8004f1c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a38      	ldr	r2, [pc, #224]	@ (800500c <HAL_ADC_Start_DMA+0x164>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d002      	beq.n	8004f34 <HAL_ADC_Start_DMA+0x8c>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	e000      	b.n	8004f36 <HAL_ADC_Start_DMA+0x8e>
 8004f34:	4b36      	ldr	r3, [pc, #216]	@ (8005010 <HAL_ADC_Start_DMA+0x168>)
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d002      	beq.n	8004f44 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d105      	bne.n	8004f50 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f48:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d006      	beq.n	8004f6a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f60:	f023 0206 	bic.w	r2, r3, #6
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004f68:	e002      	b.n	8004f70 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f74:	4a27      	ldr	r2, [pc, #156]	@ (8005014 <HAL_ADC_Start_DMA+0x16c>)
 8004f76:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f7c:	4a26      	ldr	r2, [pc, #152]	@ (8005018 <HAL_ADC_Start_DMA+0x170>)
 8004f7e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f84:	4a25      	ldr	r2, [pc, #148]	@ (800501c <HAL_ADC_Start_DMA+0x174>)
 8004f86:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	221c      	movs	r2, #28
 8004f8e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0210 	orr.w	r2, r2, #16
 8004fa6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0201 	orr.w	r2, r2, #1
 8004fb6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3340      	adds	r3, #64	@ 0x40
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f001 ffee 	bl	8006fa8 <HAL_DMA_Start_IT>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff fdb1 	bl	8004b3c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004fda:	e00d      	b.n	8004ff8 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8004fe4:	e008      	b.n	8004ff8 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8004ff2:	e001      	b.n	8004ff8 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	50040300 	.word	0x50040300
 8005008:	50040200 	.word	0x50040200
 800500c:	50040100 	.word	0x50040100
 8005010:	50040000 	.word	0x50040000
 8005014:	08005c67 	.word	0x08005c67
 8005018:	08005d3f 	.word	0x08005d3f
 800501c:	08005d5b 	.word	0x08005d5b

08005020 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <HAL_ADC_Stop_DMA+0x16>
 8005032:	2302      	movs	r3, #2
 8005034:	e051      	b.n	80050da <HAL_ADC_Stop_DMA+0xba>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800503e:	2103      	movs	r1, #3
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fc6f 	bl	8005924 <ADC_ConversionStop>
 8005046:	4603      	mov	r3, r0
 8005048:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d13f      	bne.n	80050d0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0201 	bic.w	r2, r2, #1
 800505e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005064:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d10f      	bne.n	800508e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005072:	4618      	mov	r0, r3
 8005074:	f001 fff8 	bl	8007068 <HAL_DMA_Abort>
 8005078:	4603      	mov	r3, r0
 800507a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d005      	beq.n	800508e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005086:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0210 	bic.w	r2, r2, #16
 800509c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800509e:	7bfb      	ldrb	r3, [r7, #15]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d105      	bne.n	80050b0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fd7f 	bl	8005ba8 <ADC_Disable>
 80050aa:	4603      	mov	r3, r0
 80050ac:	73fb      	strb	r3, [r7, #15]
 80050ae:	e002      	b.n	80050b6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fd79 	bl	8005ba8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d109      	bne.n	80050d0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80050c4:	f023 0301 	bic.w	r3, r3, #1
 80050c8:	f043 0201 	orr.w	r2, r3, #1
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
	...

0800510c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b0b6      	sub	sp, #216	@ 0xd8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800511c:	2300      	movs	r3, #0
 800511e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_ADC_ConfigChannel+0x22>
 800512a:	2302      	movs	r3, #2
 800512c:	e3e3      	b.n	80058f6 <HAL_ADC_ConfigChannel+0x7ea>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff fd26 	bl	8004b8c <LL_ADC_REG_IsConversionOngoing>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	f040 83c4 	bne.w	80058d0 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b05      	cmp	r3, #5
 8005156:	d824      	bhi.n	80051a2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	3b02      	subs	r3, #2
 800515e:	2b03      	cmp	r3, #3
 8005160:	d81b      	bhi.n	800519a <HAL_ADC_ConfigChannel+0x8e>
 8005162:	a201      	add	r2, pc, #4	@ (adr r2, 8005168 <HAL_ADC_ConfigChannel+0x5c>)
 8005164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005168:	08005179 	.word	0x08005179
 800516c:	08005181 	.word	0x08005181
 8005170:	08005189 	.word	0x08005189
 8005174:	08005191 	.word	0x08005191
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8005178:	230c      	movs	r3, #12
 800517a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800517e:	e010      	b.n	80051a2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8005180:	2312      	movs	r3, #18
 8005182:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005186:	e00c      	b.n	80051a2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8005188:	2318      	movs	r3, #24
 800518a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800518e:	e008      	b.n	80051a2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8005190:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005194:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005198:	e003      	b.n	80051a2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800519a:	2306      	movs	r3, #6
 800519c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80051a0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	461a      	mov	r2, r3
 80051ac:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80051b0:	f7ff fb9f 	bl	80048f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff fce7 	bl	8004b8c <LL_ADC_REG_IsConversionOngoing>
 80051be:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff fd07 	bl	8004bda <LL_ADC_INJ_IsConversionOngoing>
 80051cc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80051d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f040 81bf 	bne.w	8005558 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80051da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f040 81ba 	bne.w	8005558 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051ec:	d10f      	bne.n	800520e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6818      	ldr	r0, [r3, #0]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2200      	movs	r2, #0
 80051f8:	4619      	mov	r1, r3
 80051fa:	f7ff fba6 	bl	800494a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff fb4d 	bl	80048a6 <LL_ADC_SetSamplingTimeCommonConfig>
 800520c:	e00e      	b.n	800522c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6819      	ldr	r1, [r3, #0]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	461a      	mov	r2, r3
 800521c:	f7ff fb95 	bl	800494a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2100      	movs	r1, #0
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff fb3d 	bl	80048a6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	695a      	ldr	r2, [r3, #20]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	08db      	lsrs	r3, r3, #3
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b04      	cmp	r3, #4
 800524c:	d00a      	beq.n	8005264 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6818      	ldr	r0, [r3, #0]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	6919      	ldr	r1, [r3, #16]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800525e:	f7ff facd 	bl	80047fc <LL_ADC_SetOffset>
 8005262:	e179      	b.n	8005558 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2100      	movs	r1, #0
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff faea 	bl	8004844 <LL_ADC_GetOffsetChannel>
 8005270:	4603      	mov	r3, r0
 8005272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <HAL_ADC_ConfigChannel+0x184>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2100      	movs	r1, #0
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fadf 	bl	8004844 <LL_ADC_GetOffsetChannel>
 8005286:	4603      	mov	r3, r0
 8005288:	0e9b      	lsrs	r3, r3, #26
 800528a:	f003 021f 	and.w	r2, r3, #31
 800528e:	e01e      	b.n	80052ce <HAL_ADC_ConfigChannel+0x1c2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2100      	movs	r1, #0
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff fad4 	bl	8004844 <LL_ADC_GetOffsetChannel>
 800529c:	4603      	mov	r3, r0
 800529e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80052a6:	fa93 f3a3 	rbit	r3, r3
 80052aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80052ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80052b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80052b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80052be:	2320      	movs	r3, #32
 80052c0:	e004      	b.n	80052cc <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80052c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80052c6:	fab3 f383 	clz	r3, r3
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d105      	bne.n	80052e6 <HAL_ADC_ConfigChannel+0x1da>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	0e9b      	lsrs	r3, r3, #26
 80052e0:	f003 031f 	and.w	r3, r3, #31
 80052e4:	e018      	b.n	8005318 <HAL_ADC_ConfigChannel+0x20c>
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052f2:	fa93 f3a3 	rbit	r3, r3
 80052f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80052fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80052fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005302:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800530a:	2320      	movs	r3, #32
 800530c:	e004      	b.n	8005318 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800530e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005312:	fab3 f383 	clz	r3, r3
 8005316:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005318:	429a      	cmp	r2, r3
 800531a:	d106      	bne.n	800532a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2200      	movs	r2, #0
 8005322:	2100      	movs	r1, #0
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff faa3 	bl	8004870 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2101      	movs	r1, #1
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff fa87 	bl	8004844 <LL_ADC_GetOffsetChannel>
 8005336:	4603      	mov	r3, r0
 8005338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <HAL_ADC_ConfigChannel+0x24a>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2101      	movs	r1, #1
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff fa7c 	bl	8004844 <LL_ADC_GetOffsetChannel>
 800534c:	4603      	mov	r3, r0
 800534e:	0e9b      	lsrs	r3, r3, #26
 8005350:	f003 021f 	and.w	r2, r3, #31
 8005354:	e01e      	b.n	8005394 <HAL_ADC_ConfigChannel+0x288>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2101      	movs	r1, #1
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff fa71 	bl	8004844 <LL_ADC_GetOffsetChannel>
 8005362:	4603      	mov	r3, r0
 8005364:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005368:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800536c:	fa93 f3a3 	rbit	r3, r3
 8005370:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005374:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005378:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800537c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8005384:	2320      	movs	r3, #32
 8005386:	e004      	b.n	8005392 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8005388:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800538c:	fab3 f383 	clz	r3, r3
 8005390:	b2db      	uxtb	r3, r3
 8005392:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800539c:	2b00      	cmp	r3, #0
 800539e:	d105      	bne.n	80053ac <HAL_ADC_ConfigChannel+0x2a0>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	0e9b      	lsrs	r3, r3, #26
 80053a6:	f003 031f 	and.w	r3, r3, #31
 80053aa:	e018      	b.n	80053de <HAL_ADC_ConfigChannel+0x2d2>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053b8:	fa93 f3a3 	rbit	r3, r3
 80053bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80053c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80053c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80053d0:	2320      	movs	r3, #32
 80053d2:	e004      	b.n	80053de <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80053d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053d8:	fab3 f383 	clz	r3, r3
 80053dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80053de:	429a      	cmp	r2, r3
 80053e0:	d106      	bne.n	80053f0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2200      	movs	r2, #0
 80053e8:	2101      	movs	r1, #1
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff fa40 	bl	8004870 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2102      	movs	r1, #2
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7ff fa24 	bl	8004844 <LL_ADC_GetOffsetChannel>
 80053fc:	4603      	mov	r3, r0
 80053fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10a      	bne.n	800541c <HAL_ADC_ConfigChannel+0x310>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2102      	movs	r1, #2
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff fa19 	bl	8004844 <LL_ADC_GetOffsetChannel>
 8005412:	4603      	mov	r3, r0
 8005414:	0e9b      	lsrs	r3, r3, #26
 8005416:	f003 021f 	and.w	r2, r3, #31
 800541a:	e01e      	b.n	800545a <HAL_ADC_ConfigChannel+0x34e>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2102      	movs	r1, #2
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff fa0e 	bl	8004844 <LL_ADC_GetOffsetChannel>
 8005428:	4603      	mov	r3, r0
 800542a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800542e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005432:	fa93 f3a3 	rbit	r3, r3
 8005436:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800543a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800543e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005442:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800544a:	2320      	movs	r3, #32
 800544c:	e004      	b.n	8005458 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800544e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005452:	fab3 f383 	clz	r3, r3
 8005456:	b2db      	uxtb	r3, r3
 8005458:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005462:	2b00      	cmp	r3, #0
 8005464:	d105      	bne.n	8005472 <HAL_ADC_ConfigChannel+0x366>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	0e9b      	lsrs	r3, r3, #26
 800546c:	f003 031f 	and.w	r3, r3, #31
 8005470:	e014      	b.n	800549c <HAL_ADC_ConfigChannel+0x390>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005478:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800547a:	fa93 f3a3 	rbit	r3, r3
 800547e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8005480:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005482:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005486:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800548e:	2320      	movs	r3, #32
 8005490:	e004      	b.n	800549c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8005492:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005496:	fab3 f383 	clz	r3, r3
 800549a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800549c:	429a      	cmp	r2, r3
 800549e:	d106      	bne.n	80054ae <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2200      	movs	r2, #0
 80054a6:	2102      	movs	r1, #2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff f9e1 	bl	8004870 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2103      	movs	r1, #3
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff f9c5 	bl	8004844 <LL_ADC_GetOffsetChannel>
 80054ba:	4603      	mov	r3, r0
 80054bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <HAL_ADC_ConfigChannel+0x3ce>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2103      	movs	r1, #3
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff f9ba 	bl	8004844 <LL_ADC_GetOffsetChannel>
 80054d0:	4603      	mov	r3, r0
 80054d2:	0e9b      	lsrs	r3, r3, #26
 80054d4:	f003 021f 	and.w	r2, r3, #31
 80054d8:	e017      	b.n	800550a <HAL_ADC_ConfigChannel+0x3fe>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2103      	movs	r1, #3
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff f9af 	bl	8004844 <LL_ADC_GetOffsetChannel>
 80054e6:	4603      	mov	r3, r0
 80054e8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054ec:	fa93 f3a3 	rbit	r3, r3
 80054f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80054f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054f4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80054f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80054fc:	2320      	movs	r3, #32
 80054fe:	e003      	b.n	8005508 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8005500:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005502:	fab3 f383 	clz	r3, r3
 8005506:	b2db      	uxtb	r3, r3
 8005508:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005512:	2b00      	cmp	r3, #0
 8005514:	d105      	bne.n	8005522 <HAL_ADC_ConfigChannel+0x416>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	0e9b      	lsrs	r3, r3, #26
 800551c:	f003 031f 	and.w	r3, r3, #31
 8005520:	e011      	b.n	8005546 <HAL_ADC_ConfigChannel+0x43a>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005528:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800552a:	fa93 f3a3 	rbit	r3, r3
 800552e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8005530:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005532:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005534:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800553a:	2320      	movs	r3, #32
 800553c:	e003      	b.n	8005546 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800553e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005540:	fab3 f383 	clz	r3, r3
 8005544:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005546:	429a      	cmp	r2, r3
 8005548:	d106      	bne.n	8005558 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2200      	movs	r2, #0
 8005550:	2103      	movs	r1, #3
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff f98c 	bl	8004870 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff fac7 	bl	8004af0 <LL_ADC_IsEnabled>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	f040 813f 	bne.w	80057e8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6818      	ldr	r0, [r3, #0]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6819      	ldr	r1, [r3, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	461a      	mov	r2, r3
 8005578:	f7ff fa12 	bl	80049a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	4a8e      	ldr	r2, [pc, #568]	@ (80057bc <HAL_ADC_ConfigChannel+0x6b0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	f040 8130 	bne.w	80057e8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10b      	bne.n	80055b0 <HAL_ADC_ConfigChannel+0x4a4>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	0e9b      	lsrs	r3, r3, #26
 800559e:	3301      	adds	r3, #1
 80055a0:	f003 031f 	and.w	r3, r3, #31
 80055a4:	2b09      	cmp	r3, #9
 80055a6:	bf94      	ite	ls
 80055a8:	2301      	movls	r3, #1
 80055aa:	2300      	movhi	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	e019      	b.n	80055e4 <HAL_ADC_ConfigChannel+0x4d8>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055b8:	fa93 f3a3 	rbit	r3, r3
 80055bc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80055be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80055c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80055c8:	2320      	movs	r3, #32
 80055ca:	e003      	b.n	80055d4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80055cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055ce:	fab3 f383 	clz	r3, r3
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	3301      	adds	r3, #1
 80055d6:	f003 031f 	and.w	r3, r3, #31
 80055da:	2b09      	cmp	r3, #9
 80055dc:	bf94      	ite	ls
 80055de:	2301      	movls	r3, #1
 80055e0:	2300      	movhi	r3, #0
 80055e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d079      	beq.n	80056dc <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d107      	bne.n	8005604 <HAL_ADC_ConfigChannel+0x4f8>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	0e9b      	lsrs	r3, r3, #26
 80055fa:	3301      	adds	r3, #1
 80055fc:	069b      	lsls	r3, r3, #26
 80055fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005602:	e015      	b.n	8005630 <HAL_ADC_ConfigChannel+0x524>
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800560c:	fa93 f3a3 	rbit	r3, r3
 8005610:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005614:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800561c:	2320      	movs	r3, #32
 800561e:	e003      	b.n	8005628 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8005620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005622:	fab3 f383 	clz	r3, r3
 8005626:	b2db      	uxtb	r3, r3
 8005628:	3301      	adds	r3, #1
 800562a:	069b      	lsls	r3, r3, #26
 800562c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005638:	2b00      	cmp	r3, #0
 800563a:	d109      	bne.n	8005650 <HAL_ADC_ConfigChannel+0x544>
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	0e9b      	lsrs	r3, r3, #26
 8005642:	3301      	adds	r3, #1
 8005644:	f003 031f 	and.w	r3, r3, #31
 8005648:	2101      	movs	r1, #1
 800564a:	fa01 f303 	lsl.w	r3, r1, r3
 800564e:	e017      	b.n	8005680 <HAL_ADC_ConfigChannel+0x574>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005658:	fa93 f3a3 	rbit	r3, r3
 800565c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800565e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005660:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8005668:	2320      	movs	r3, #32
 800566a:	e003      	b.n	8005674 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800566c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800566e:	fab3 f383 	clz	r3, r3
 8005672:	b2db      	uxtb	r3, r3
 8005674:	3301      	adds	r3, #1
 8005676:	f003 031f 	and.w	r3, r3, #31
 800567a:	2101      	movs	r1, #1
 800567c:	fa01 f303 	lsl.w	r3, r1, r3
 8005680:	ea42 0103 	orr.w	r1, r2, r3
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <HAL_ADC_ConfigChannel+0x59a>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	0e9b      	lsrs	r3, r3, #26
 8005696:	3301      	adds	r3, #1
 8005698:	f003 021f 	and.w	r2, r3, #31
 800569c:	4613      	mov	r3, r2
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	4413      	add	r3, r2
 80056a2:	051b      	lsls	r3, r3, #20
 80056a4:	e018      	b.n	80056d8 <HAL_ADC_ConfigChannel+0x5cc>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ae:	fa93 f3a3 	rbit	r3, r3
 80056b2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80056b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80056b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80056be:	2320      	movs	r3, #32
 80056c0:	e003      	b.n	80056ca <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80056c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c4:	fab3 f383 	clz	r3, r3
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	3301      	adds	r3, #1
 80056cc:	f003 021f 	and.w	r2, r3, #31
 80056d0:	4613      	mov	r3, r2
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	4413      	add	r3, r2
 80056d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056d8:	430b      	orrs	r3, r1
 80056da:	e080      	b.n	80057de <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d107      	bne.n	80056f8 <HAL_ADC_ConfigChannel+0x5ec>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	0e9b      	lsrs	r3, r3, #26
 80056ee:	3301      	adds	r3, #1
 80056f0:	069b      	lsls	r3, r3, #26
 80056f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056f6:	e015      	b.n	8005724 <HAL_ADC_ConfigChannel+0x618>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005700:	fa93 f3a3 	rbit	r3, r3
 8005704:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005708:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800570a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8005710:	2320      	movs	r3, #32
 8005712:	e003      	b.n	800571c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8005714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005716:	fab3 f383 	clz	r3, r3
 800571a:	b2db      	uxtb	r3, r3
 800571c:	3301      	adds	r3, #1
 800571e:	069b      	lsls	r3, r3, #26
 8005720:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800572c:	2b00      	cmp	r3, #0
 800572e:	d109      	bne.n	8005744 <HAL_ADC_ConfigChannel+0x638>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	0e9b      	lsrs	r3, r3, #26
 8005736:	3301      	adds	r3, #1
 8005738:	f003 031f 	and.w	r3, r3, #31
 800573c:	2101      	movs	r1, #1
 800573e:	fa01 f303 	lsl.w	r3, r1, r3
 8005742:	e017      	b.n	8005774 <HAL_ADC_ConfigChannel+0x668>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	fa93 f3a3 	rbit	r3, r3
 8005750:	61bb      	str	r3, [r7, #24]
  return result;
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800575c:	2320      	movs	r3, #32
 800575e:	e003      	b.n	8005768 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	fab3 f383 	clz	r3, r3
 8005766:	b2db      	uxtb	r3, r3
 8005768:	3301      	adds	r3, #1
 800576a:	f003 031f 	and.w	r3, r3, #31
 800576e:	2101      	movs	r1, #1
 8005770:	fa01 f303 	lsl.w	r3, r1, r3
 8005774:	ea42 0103 	orr.w	r1, r2, r3
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10d      	bne.n	80057a0 <HAL_ADC_ConfigChannel+0x694>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	0e9b      	lsrs	r3, r3, #26
 800578a:	3301      	adds	r3, #1
 800578c:	f003 021f 	and.w	r2, r3, #31
 8005790:	4613      	mov	r3, r2
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	4413      	add	r3, r2
 8005796:	3b1e      	subs	r3, #30
 8005798:	051b      	lsls	r3, r3, #20
 800579a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800579e:	e01d      	b.n	80057dc <HAL_ADC_ConfigChannel+0x6d0>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	fa93 f3a3 	rbit	r3, r3
 80057ac:	60fb      	str	r3, [r7, #12]
  return result;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d103      	bne.n	80057c0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80057b8:	2320      	movs	r3, #32
 80057ba:	e005      	b.n	80057c8 <HAL_ADC_ConfigChannel+0x6bc>
 80057bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	fab3 f383 	clz	r3, r3
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	3301      	adds	r3, #1
 80057ca:	f003 021f 	and.w	r2, r3, #31
 80057ce:	4613      	mov	r3, r2
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	4413      	add	r3, r2
 80057d4:	3b1e      	subs	r3, #30
 80057d6:	051b      	lsls	r3, r3, #20
 80057d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057dc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057e2:	4619      	mov	r1, r3
 80057e4:	f7ff f8b1 	bl	800494a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	4b44      	ldr	r3, [pc, #272]	@ (8005900 <HAL_ADC_ConfigChannel+0x7f4>)
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d07a      	beq.n	80058ea <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057f4:	4843      	ldr	r0, [pc, #268]	@ (8005904 <HAL_ADC_ConfigChannel+0x7f8>)
 80057f6:	f7fe fff3 	bl	80047e0 <LL_ADC_GetCommonPathInternalCh>
 80057fa:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a41      	ldr	r2, [pc, #260]	@ (8005908 <HAL_ADC_ConfigChannel+0x7fc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d12c      	bne.n	8005862 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005808:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800580c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d126      	bne.n	8005862 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a3c      	ldr	r2, [pc, #240]	@ (800590c <HAL_ADC_ConfigChannel+0x800>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d004      	beq.n	8005828 <HAL_ADC_ConfigChannel+0x71c>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a3b      	ldr	r2, [pc, #236]	@ (8005910 <HAL_ADC_ConfigChannel+0x804>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d15d      	bne.n	80058e4 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005828:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800582c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005830:	4619      	mov	r1, r3
 8005832:	4834      	ldr	r0, [pc, #208]	@ (8005904 <HAL_ADC_ConfigChannel+0x7f8>)
 8005834:	f7fe ffc1 	bl	80047ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005838:	4b36      	ldr	r3, [pc, #216]	@ (8005914 <HAL_ADC_ConfigChannel+0x808>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	099b      	lsrs	r3, r3, #6
 800583e:	4a36      	ldr	r2, [pc, #216]	@ (8005918 <HAL_ADC_ConfigChannel+0x80c>)
 8005840:	fba2 2303 	umull	r2, r3, r2, r3
 8005844:	099b      	lsrs	r3, r3, #6
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	4613      	mov	r3, r2
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005852:	e002      	b.n	800585a <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	3b01      	subs	r3, #1
 8005858:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1f9      	bne.n	8005854 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005860:	e040      	b.n	80058e4 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a2d      	ldr	r2, [pc, #180]	@ (800591c <HAL_ADC_ConfigChannel+0x810>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d118      	bne.n	800589e <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800586c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005870:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d112      	bne.n	800589e <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a23      	ldr	r2, [pc, #140]	@ (800590c <HAL_ADC_ConfigChannel+0x800>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d004      	beq.n	800588c <HAL_ADC_ConfigChannel+0x780>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a22      	ldr	r2, [pc, #136]	@ (8005910 <HAL_ADC_ConfigChannel+0x804>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d12d      	bne.n	80058e8 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800588c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005890:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005894:	4619      	mov	r1, r3
 8005896:	481b      	ldr	r0, [pc, #108]	@ (8005904 <HAL_ADC_ConfigChannel+0x7f8>)
 8005898:	f7fe ff8f 	bl	80047ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800589c:	e024      	b.n	80058e8 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005920 <HAL_ADC_ConfigChannel+0x814>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d120      	bne.n	80058ea <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80058a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80058ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d11a      	bne.n	80058ea <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a14      	ldr	r2, [pc, #80]	@ (800590c <HAL_ADC_ConfigChannel+0x800>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d115      	bne.n	80058ea <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80058c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80058c6:	4619      	mov	r1, r3
 80058c8:	480e      	ldr	r0, [pc, #56]	@ (8005904 <HAL_ADC_ConfigChannel+0x7f8>)
 80058ca:	f7fe ff76 	bl	80047ba <LL_ADC_SetCommonPathInternalCh>
 80058ce:	e00c      	b.n	80058ea <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d4:	f043 0220 	orr.w	r2, r3, #32
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80058e2:	e002      	b.n	80058ea <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80058e4:	bf00      	nop
 80058e6:	e000      	b.n	80058ea <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80058f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	37d8      	adds	r7, #216	@ 0xd8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	80080000 	.word	0x80080000
 8005904:	50040300 	.word	0x50040300
 8005908:	c7520000 	.word	0xc7520000
 800590c:	50040000 	.word	0x50040000
 8005910:	50040200 	.word	0x50040200
 8005914:	2000002c 	.word	0x2000002c
 8005918:	053e2d63 	.word	0x053e2d63
 800591c:	cb840000 	.word	0xcb840000
 8005920:	80000001 	.word	0x80000001

08005924 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800592e:	2300      	movs	r3, #0
 8005930:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff f926 	bl	8004b8c <LL_ADC_REG_IsConversionOngoing>
 8005940:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff f947 	bl	8004bda <LL_ADC_INJ_IsConversionOngoing>
 800594c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d103      	bne.n	800595c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 8098 	beq.w	8005a8c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d02a      	beq.n	80059c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	7e5b      	ldrb	r3, [r3, #25]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d126      	bne.n	80059c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	7e1b      	ldrb	r3, [r3, #24]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d122      	bne.n	80059c0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800597a:	2301      	movs	r3, #1
 800597c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800597e:	e014      	b.n	80059aa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	4a45      	ldr	r2, [pc, #276]	@ (8005a98 <ADC_ConversionStop+0x174>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d90d      	bls.n	80059a4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800598c:	f043 0210 	orr.w	r2, r3, #16
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005998:	f043 0201 	orr.w	r2, r3, #1
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e074      	b.n	8005a8e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	3301      	adds	r3, #1
 80059a8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b4:	2b40      	cmp	r3, #64	@ 0x40
 80059b6:	d1e3      	bne.n	8005980 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2240      	movs	r2, #64	@ 0x40
 80059be:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d014      	beq.n	80059f0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7ff f8de 	bl	8004b8c <LL_ADC_REG_IsConversionOngoing>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00c      	beq.n	80059f0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f7ff f89b 	bl	8004b16 <LL_ADC_IsDisableOngoing>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d104      	bne.n	80059f0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff f8ba 	bl	8004b64 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d014      	beq.n	8005a20 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff f8ed 	bl	8004bda <LL_ADC_INJ_IsConversionOngoing>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00c      	beq.n	8005a20 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7ff f883 	bl	8004b16 <LL_ADC_IsDisableOngoing>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d104      	bne.n	8005a20 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7ff f8c9 	bl	8004bb2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d005      	beq.n	8005a32 <ADC_ConversionStop+0x10e>
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	2b03      	cmp	r3, #3
 8005a2a:	d105      	bne.n	8005a38 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005a2c:	230c      	movs	r3, #12
 8005a2e:	617b      	str	r3, [r7, #20]
        break;
 8005a30:	e005      	b.n	8005a3e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005a32:	2308      	movs	r3, #8
 8005a34:	617b      	str	r3, [r7, #20]
        break;
 8005a36:	e002      	b.n	8005a3e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005a38:	2304      	movs	r3, #4
 8005a3a:	617b      	str	r3, [r7, #20]
        break;
 8005a3c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005a3e:	f7fe fe79 	bl	8004734 <HAL_GetTick>
 8005a42:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005a44:	e01b      	b.n	8005a7e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005a46:	f7fe fe75 	bl	8004734 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b05      	cmp	r3, #5
 8005a52:	d914      	bls.n	8005a7e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00d      	beq.n	8005a7e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a66:	f043 0210 	orr.w	r2, r3, #16
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a72:	f043 0201 	orr.w	r2, r3, #1
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e007      	b.n	8005a8e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	4013      	ands	r3, r2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1dc      	bne.n	8005a46 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3720      	adds	r7, #32
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	a33fffff 	.word	0xa33fffff

08005a9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7ff f81f 	bl	8004af0 <LL_ADC_IsEnabled>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d169      	bne.n	8005b8c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	4b36      	ldr	r3, [pc, #216]	@ (8005b98 <ADC_Enable+0xfc>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00d      	beq.n	8005ae2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aca:	f043 0210 	orr.w	r2, r3, #16
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad6:	f043 0201 	orr.w	r2, r3, #1
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e055      	b.n	8005b8e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fe ffda 	bl	8004aa0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005aec:	482b      	ldr	r0, [pc, #172]	@ (8005b9c <ADC_Enable+0x100>)
 8005aee:	f7fe fe77 	bl	80047e0 <LL_ADC_GetCommonPathInternalCh>
 8005af2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005af4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d013      	beq.n	8005b24 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005afc:	4b28      	ldr	r3, [pc, #160]	@ (8005ba0 <ADC_Enable+0x104>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	099b      	lsrs	r3, r3, #6
 8005b02:	4a28      	ldr	r2, [pc, #160]	@ (8005ba4 <ADC_Enable+0x108>)
 8005b04:	fba2 2303 	umull	r2, r3, r2, r3
 8005b08:	099b      	lsrs	r3, r3, #6
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005b16:	e002      	b.n	8005b1e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1f9      	bne.n	8005b18 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005b24:	f7fe fe06 	bl	8004734 <HAL_GetTick>
 8005b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b2a:	e028      	b.n	8005b7e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fe ffdd 	bl	8004af0 <LL_ADC_IsEnabled>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d104      	bne.n	8005b46 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fe ffad 	bl	8004aa0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005b46:	f7fe fdf5 	bl	8004734 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d914      	bls.n	8005b7e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d00d      	beq.n	8005b7e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b66:	f043 0210 	orr.w	r2, r3, #16
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b72:	f043 0201 	orr.w	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e007      	b.n	8005b8e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d1cf      	bne.n	8005b2c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	8000003f 	.word	0x8000003f
 8005b9c:	50040300 	.word	0x50040300
 8005ba0:	2000002c 	.word	0x2000002c
 8005ba4:	053e2d63 	.word	0x053e2d63

08005ba8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7fe ffae 	bl	8004b16 <LL_ADC_IsDisableOngoing>
 8005bba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fe ff95 	bl	8004af0 <LL_ADC_IsEnabled>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d047      	beq.n	8005c5c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d144      	bne.n	8005c5c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f003 030d 	and.w	r3, r3, #13
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d10c      	bne.n	8005bfa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7fe ff6f 	bl	8004ac8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2203      	movs	r2, #3
 8005bf0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005bf2:	f7fe fd9f 	bl	8004734 <HAL_GetTick>
 8005bf6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005bf8:	e029      	b.n	8005c4e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bfe:	f043 0210 	orr.w	r2, r3, #16
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c0a:	f043 0201 	orr.w	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e023      	b.n	8005c5e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005c16:	f7fe fd8d 	bl	8004734 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d914      	bls.n	8005c4e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00d      	beq.n	8005c4e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c36:	f043 0210 	orr.w	r2, r3, #16
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c42:	f043 0201 	orr.w	r2, r3, #1
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e007      	b.n	8005c5e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1dc      	bne.n	8005c16 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d14b      	bne.n	8005d18 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c84:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0308 	and.w	r3, r3, #8
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d021      	beq.n	8005cde <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fe fe14 	bl	80048cc <LL_ADC_REG_IsTriggerSourceSWStart>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d032      	beq.n	8005d10 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d12b      	bne.n	8005d10 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d11f      	bne.n	8005d10 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd4:	f043 0201 	orr.w	r2, r3, #1
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	659a      	str	r2, [r3, #88]	@ 0x58
 8005cdc:	e018      	b.n	8005d10 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d111      	bne.n	8005d10 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d105      	bne.n	8005d10 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d08:	f043 0201 	orr.w	r2, r3, #1
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f7fc fa49 	bl	80021a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005d16:	e00e      	b.n	8005d36 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d1c:	f003 0310 	and.w	r3, r3, #16
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f7ff f9e6 	bl	80050f6 <HAL_ADC_ErrorCallback>
}
 8005d2a:	e004      	b.n	8005d36 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	4798      	blx	r3
}
 8005d36:	bf00      	nop
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b084      	sub	sp, #16
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f7ff f9c8 	bl	80050e2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d52:	bf00      	nop
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d6c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d78:	f043 0204 	orr.w	r2, r3, #4
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f7ff f9b8 	bl	80050f6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d86:	bf00      	nop
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <LL_ADC_IsEnabled>:
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <LL_ADC_IsEnabled+0x18>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e000      	b.n	8005da8 <LL_ADC_IsEnabled+0x1a>
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <LL_ADC_REG_IsConversionOngoing>:
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	d101      	bne.n	8005dcc <LL_ADC_REG_IsConversionOngoing+0x18>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e000      	b.n	8005dce <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
	...

08005ddc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005ddc:	b590      	push	{r4, r7, lr}
 8005dde:	b0a1      	sub	sp, #132	@ 0x84
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e093      	b.n	8005f22 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005e02:	2300      	movs	r3, #0
 8005e04:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005e06:	2300      	movs	r3, #0
 8005e08:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a47      	ldr	r2, [pc, #284]	@ (8005f2c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d102      	bne.n	8005e1a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005e14:	4b46      	ldr	r3, [pc, #280]	@ (8005f30 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e001      	b.n	8005e1e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10b      	bne.n	8005e3c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e28:	f043 0220 	orr.w	r2, r3, #32
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e072      	b.n	8005f22 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7ff ffb8 	bl	8005db4 <LL_ADC_REG_IsConversionOngoing>
 8005e44:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff ffb2 	bl	8005db4 <LL_ADC_REG_IsConversionOngoing>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d154      	bne.n	8005f00 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005e56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d151      	bne.n	8005f00 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005e5c:	4b35      	ldr	r3, [pc, #212]	@ (8005f34 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005e5e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d02c      	beq.n	8005ec2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005e68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	6859      	ldr	r1, [r3, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005e7a:	035b      	lsls	r3, r3, #13
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e84:	4829      	ldr	r0, [pc, #164]	@ (8005f2c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005e86:	f7ff ff82 	bl	8005d8e <LL_ADC_IsEnabled>
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	4828      	ldr	r0, [pc, #160]	@ (8005f30 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005e8e:	f7ff ff7e 	bl	8005d8e <LL_ADC_IsEnabled>
 8005e92:	4603      	mov	r3, r0
 8005e94:	431c      	orrs	r4, r3
 8005e96:	4828      	ldr	r0, [pc, #160]	@ (8005f38 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005e98:	f7ff ff79 	bl	8005d8e <LL_ADC_IsEnabled>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	4323      	orrs	r3, r4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d137      	bne.n	8005f14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005ea4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005eac:	f023 030f 	bic.w	r3, r3, #15
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	6811      	ldr	r1, [r2, #0]
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	6892      	ldr	r2, [r2, #8]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ebe:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005ec0:	e028      	b.n	8005f14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005ec2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005eca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ecc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ece:	4817      	ldr	r0, [pc, #92]	@ (8005f2c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005ed0:	f7ff ff5d 	bl	8005d8e <LL_ADC_IsEnabled>
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	4816      	ldr	r0, [pc, #88]	@ (8005f30 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005ed8:	f7ff ff59 	bl	8005d8e <LL_ADC_IsEnabled>
 8005edc:	4603      	mov	r3, r0
 8005ede:	431c      	orrs	r4, r3
 8005ee0:	4815      	ldr	r0, [pc, #84]	@ (8005f38 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005ee2:	f7ff ff54 	bl	8005d8e <LL_ADC_IsEnabled>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	4323      	orrs	r3, r4
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d112      	bne.n	8005f14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005eee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005ef6:	f023 030f 	bic.w	r3, r3, #15
 8005efa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005efc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005efe:	e009      	b.n	8005f14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f04:	f043 0220 	orr.w	r2, r3, #32
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005f12:	e000      	b.n	8005f16 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8005f1e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3784      	adds	r7, #132	@ 0x84
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd90      	pop	{r4, r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	50040000 	.word	0x50040000
 8005f30:	50040100 	.word	0x50040100
 8005f34:	50040300 	.word	0x50040300
 8005f38:	50040200 	.word	0x50040200

08005f3c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e0ed      	b.n	800612a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d102      	bne.n	8005f60 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fc ff94 	bl	8002e88 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0201 	orr.w	r2, r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f70:	f7fe fbe0 	bl	8004734 <HAL_GetTick>
 8005f74:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005f76:	e012      	b.n	8005f9e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005f78:	f7fe fbdc 	bl	8004734 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b0a      	cmp	r3, #10
 8005f84:	d90b      	bls.n	8005f9e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2205      	movs	r2, #5
 8005f96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e0c5      	b.n	800612a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d0e5      	beq.n	8005f78 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0202 	bic.w	r2, r2, #2
 8005fba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fbc:	f7fe fbba 	bl	8004734 <HAL_GetTick>
 8005fc0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005fc2:	e012      	b.n	8005fea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005fc4:	f7fe fbb6 	bl	8004734 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b0a      	cmp	r3, #10
 8005fd0:	d90b      	bls.n	8005fea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2205      	movs	r2, #5
 8005fe2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e09f      	b.n	800612a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e5      	bne.n	8005fc4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	7e1b      	ldrb	r3, [r3, #24]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d108      	bne.n	8006012 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	e007      	b.n	8006022 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006020:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	7e5b      	ldrb	r3, [r3, #25]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d108      	bne.n	800603c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	e007      	b.n	800604c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800604a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	7e9b      	ldrb	r3, [r3, #26]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d108      	bne.n	8006066 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0220 	orr.w	r2, r2, #32
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	e007      	b.n	8006076 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0220 	bic.w	r2, r2, #32
 8006074:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	7edb      	ldrb	r3, [r3, #27]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d108      	bne.n	8006090 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0210 	bic.w	r2, r2, #16
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	e007      	b.n	80060a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0210 	orr.w	r2, r2, #16
 800609e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	7f1b      	ldrb	r3, [r3, #28]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d108      	bne.n	80060ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 0208 	orr.w	r2, r2, #8
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	e007      	b.n	80060ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0208 	bic.w	r2, r2, #8
 80060c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	7f5b      	ldrb	r3, [r3, #29]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d108      	bne.n	80060e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f042 0204 	orr.w	r2, r2, #4
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	e007      	b.n	80060f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 0204 	bic.w	r2, r2, #4
 80060f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	ea42 0103 	orr.w	r1, r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	1e5a      	subs	r2, r3, #1
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
	...

08006134 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 3020 	ldrb.w	r3, [r3, #32]
 800614a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800614c:	7cfb      	ldrb	r3, [r7, #19]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d003      	beq.n	800615a <HAL_CAN_ConfigFilter+0x26>
 8006152:	7cfb      	ldrb	r3, [r7, #19]
 8006154:	2b02      	cmp	r3, #2
 8006156:	f040 80be 	bne.w	80062d6 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800615a:	4b65      	ldr	r3, [pc, #404]	@ (80062f0 <HAL_CAN_ConfigFilter+0x1bc>)
 800615c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006164:	f043 0201 	orr.w	r2, r3, #1
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006174:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006188:	021b      	lsls	r3, r3, #8
 800618a:	431a      	orrs	r2, r3
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	f003 031f 	and.w	r3, r3, #31
 800619a:	2201      	movs	r2, #1
 800619c:	fa02 f303 	lsl.w	r3, r2, r3
 80061a0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	43db      	mvns	r3, r3
 80061ac:	401a      	ands	r2, r3
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d123      	bne.n	8006204 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	43db      	mvns	r3, r3
 80061c6:	401a      	ands	r2, r3
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80061de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	3248      	adds	r2, #72	@ 0x48
 80061e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80061f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80061fa:	6979      	ldr	r1, [r7, #20]
 80061fc:	3348      	adds	r3, #72	@ 0x48
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	440b      	add	r3, r1
 8006202:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d122      	bne.n	8006252 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	431a      	orrs	r2, r3
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800622c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	3248      	adds	r2, #72	@ 0x48
 8006232:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006246:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006248:	6979      	ldr	r1, [r7, #20]
 800624a:	3348      	adds	r3, #72	@ 0x48
 800624c:	00db      	lsls	r3, r3, #3
 800624e:	440b      	add	r3, r1
 8006250:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d109      	bne.n	800626e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	43db      	mvns	r3, r3
 8006264:	401a      	ands	r2, r3
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800626c:	e007      	b.n	800627e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	431a      	orrs	r2, r3
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d109      	bne.n	800629a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	43db      	mvns	r3, r3
 8006290:	401a      	ands	r2, r3
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8006298:	e007      	b.n	80062aa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d107      	bne.n	80062c2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	431a      	orrs	r2, r3
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80062c8:	f023 0201 	bic.w	r2, r3, #1
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	e006      	b.n	80062e4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062da:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
  }
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	40006400 	.word	0x40006400

080062f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b01      	cmp	r3, #1
 8006306:	d12e      	bne.n	8006366 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0201 	bic.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006320:	f7fe fa08 	bl	8004734 <HAL_GetTick>
 8006324:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006326:	e012      	b.n	800634e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006328:	f7fe fa04 	bl	8004734 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b0a      	cmp	r3, #10
 8006334:	d90b      	bls.n	800634e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2205      	movs	r2, #5
 8006346:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e012      	b.n	8006374 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1e5      	bne.n	8006328 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	e006      	b.n	8006374 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
  }
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800637c:	b480      	push	{r7}
 800637e:	b089      	sub	sp, #36	@ 0x24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
 8006388:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006390:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800639a:	7ffb      	ldrb	r3, [r7, #31]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d003      	beq.n	80063a8 <HAL_CAN_AddTxMessage+0x2c>
 80063a0:	7ffb      	ldrb	r3, [r7, #31]
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	f040 80ad 	bne.w	8006502 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10a      	bne.n	80063c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d105      	bne.n	80063c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 8095 	beq.w	80064f2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	0e1b      	lsrs	r3, r3, #24
 80063cc:	f003 0303 	and.w	r3, r3, #3
 80063d0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80063d2:	2201      	movs	r2, #1
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	409a      	lsls	r2, r3
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10d      	bne.n	8006400 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80063ee:	68f9      	ldr	r1, [r7, #12]
 80063f0:	6809      	ldr	r1, [r1, #0]
 80063f2:	431a      	orrs	r2, r3
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	3318      	adds	r3, #24
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	440b      	add	r3, r1
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	e00f      	b.n	8006420 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800640a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006410:	68f9      	ldr	r1, [r7, #12]
 8006412:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006414:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	3318      	adds	r3, #24
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	440b      	add	r3, r1
 800641e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	691a      	ldr	r2, [r3, #16]
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	3318      	adds	r3, #24
 800642c:	011b      	lsls	r3, r3, #4
 800642e:	440b      	add	r3, r1
 8006430:	3304      	adds	r3, #4
 8006432:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	7d1b      	ldrb	r3, [r3, #20]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d111      	bne.n	8006460 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	3318      	adds	r3, #24
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	4413      	add	r3, r2
 8006448:	3304      	adds	r3, #4
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	6811      	ldr	r1, [r2, #0]
 8006450:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	3318      	adds	r3, #24
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	440b      	add	r3, r1
 800645c:	3304      	adds	r3, #4
 800645e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3307      	adds	r3, #7
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	061a      	lsls	r2, r3, #24
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3306      	adds	r3, #6
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	041b      	lsls	r3, r3, #16
 8006470:	431a      	orrs	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3305      	adds	r3, #5
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	021b      	lsls	r3, r3, #8
 800647a:	4313      	orrs	r3, r2
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	3204      	adds	r2, #4
 8006480:	7812      	ldrb	r2, [r2, #0]
 8006482:	4610      	mov	r0, r2
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	6811      	ldr	r1, [r2, #0]
 8006488:	ea43 0200 	orr.w	r2, r3, r0
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	011b      	lsls	r3, r3, #4
 8006490:	440b      	add	r3, r1
 8006492:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8006496:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3303      	adds	r3, #3
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	061a      	lsls	r2, r3, #24
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3302      	adds	r3, #2
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	041b      	lsls	r3, r3, #16
 80064a8:	431a      	orrs	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3301      	adds	r3, #1
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	021b      	lsls	r3, r3, #8
 80064b2:	4313      	orrs	r3, r2
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	7812      	ldrb	r2, [r2, #0]
 80064b8:	4610      	mov	r0, r2
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	6811      	ldr	r1, [r2, #0]
 80064be:	ea43 0200 	orr.w	r2, r3, r0
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	011b      	lsls	r3, r3, #4
 80064c6:	440b      	add	r3, r1
 80064c8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80064cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	3318      	adds	r3, #24
 80064d6:	011b      	lsls	r3, r3, #4
 80064d8:	4413      	add	r3, r2
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	6811      	ldr	r1, [r2, #0]
 80064e0:	f043 0201 	orr.w	r2, r3, #1
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	3318      	adds	r3, #24
 80064e8:	011b      	lsls	r3, r3, #4
 80064ea:	440b      	add	r3, r1
 80064ec:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	e00e      	b.n	8006510 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e006      	b.n	8006510 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006506:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
  }
}
 8006510:	4618      	mov	r0, r3
 8006512:	3724      	adds	r7, #36	@ 0x24
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800652e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8006530:	7afb      	ldrb	r3, [r7, #11]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d002      	beq.n	800653c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8006536:	7afb      	ldrb	r3, [r7, #11]
 8006538:	2b02      	cmp	r3, #2
 800653a:	d11d      	bne.n	8006578 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	3301      	adds	r3, #1
 800654e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d002      	beq.n	8006564 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3301      	adds	r3, #1
 8006562:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3301      	adds	r3, #1
 8006576:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8006578:	68fb      	ldr	r3, [r7, #12]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006586:	b480      	push	{r7}
 8006588:	b087      	sub	sp, #28
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	607a      	str	r2, [r7, #4]
 8006592:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800659a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800659c:	7dfb      	ldrb	r3, [r7, #23]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d003      	beq.n	80065aa <HAL_CAN_GetRxMessage+0x24>
 80065a2:	7dfb      	ldrb	r3, [r7, #23]
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	f040 8103 	bne.w	80067b0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10e      	bne.n	80065ce <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f003 0303 	and.w	r3, r3, #3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d116      	bne.n	80065ec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e0f7      	b.n	80067be <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	f003 0303 	and.w	r3, r3, #3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d107      	bne.n	80065ec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e0e8      	b.n	80067be <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	331b      	adds	r3, #27
 80065f4:	011b      	lsls	r3, r3, #4
 80065f6:	4413      	add	r3, r2
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0204 	and.w	r2, r3, #4
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10c      	bne.n	8006624 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	331b      	adds	r3, #27
 8006612:	011b      	lsls	r3, r3, #4
 8006614:	4413      	add	r3, r2
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	0d5b      	lsrs	r3, r3, #21
 800661a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	e00b      	b.n	800663c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	331b      	adds	r3, #27
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	4413      	add	r3, r2
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	08db      	lsrs	r3, r3, #3
 8006634:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	331b      	adds	r3, #27
 8006644:	011b      	lsls	r3, r3, #4
 8006646:	4413      	add	r3, r2
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0202 	and.w	r2, r3, #2
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	331b      	adds	r3, #27
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	4413      	add	r3, r2
 800665e:	3304      	adds	r3, #4
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0308 	and.w	r3, r3, #8
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2208      	movs	r2, #8
 800666e:	611a      	str	r2, [r3, #16]
 8006670:	e00b      	b.n	800668a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	331b      	adds	r3, #27
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	4413      	add	r3, r2
 800667e:	3304      	adds	r3, #4
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 020f 	and.w	r2, r3, #15
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	331b      	adds	r3, #27
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	4413      	add	r3, r2
 8006696:	3304      	adds	r3, #4
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	0a1b      	lsrs	r3, r3, #8
 800669c:	b2da      	uxtb	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	331b      	adds	r3, #27
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	4413      	add	r3, r2
 80066ae:	3304      	adds	r3, #4
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	0c1b      	lsrs	r3, r3, #16
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	4413      	add	r3, r2
 80066da:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	0a1a      	lsrs	r2, r3, #8
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	3301      	adds	r3, #1
 80066e6:	b2d2      	uxtb	r2, r2
 80066e8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	011b      	lsls	r3, r3, #4
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	0c1a      	lsrs	r2, r3, #16
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	3302      	adds	r3, #2
 8006700:	b2d2      	uxtb	r2, r2
 8006702:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	011b      	lsls	r3, r3, #4
 800670c:	4413      	add	r3, r2
 800670e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	0e1a      	lsrs	r2, r3, #24
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	3303      	adds	r3, #3
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	011b      	lsls	r3, r3, #4
 8006726:	4413      	add	r3, r2
 8006728:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	3304      	adds	r3, #4
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	4413      	add	r3, r2
 8006740:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	0a1a      	lsrs	r2, r3, #8
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	3305      	adds	r3, #5
 800674c:	b2d2      	uxtb	r2, r2
 800674e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	011b      	lsls	r3, r3, #4
 8006758:	4413      	add	r3, r2
 800675a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	0c1a      	lsrs	r2, r3, #16
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	3306      	adds	r3, #6
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	4413      	add	r3, r2
 8006774:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	0e1a      	lsrs	r2, r3, #24
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	3307      	adds	r3, #7
 8006780:	b2d2      	uxtb	r2, r2
 8006782:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d108      	bne.n	800679c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f042 0220 	orr.w	r2, r2, #32
 8006798:	60da      	str	r2, [r3, #12]
 800679a:	e007      	b.n	80067ac <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691a      	ldr	r2, [r3, #16]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f042 0220 	orr.w	r2, r2, #32
 80067aa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	e006      	b.n	80067be <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
  }
}
 80067be:	4618      	mov	r0, r3
 80067c0:	371c      	adds	r7, #28
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b085      	sub	sp, #20
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067da:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d002      	beq.n	80067e8 <HAL_CAN_ActivateNotification+0x1e>
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d109      	bne.n	80067fc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6959      	ldr	r1, [r3, #20]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	e006      	b.n	800680a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006800:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
  }
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b08a      	sub	sp, #40	@ 0x28
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800681e:	2300      	movs	r3, #0
 8006820:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d07c      	beq.n	8006956 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d023      	beq.n	80068ae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2201      	movs	r2, #1
 800686c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d003      	beq.n	8006880 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f983 	bl	8006b84 <HAL_CAN_TxMailbox0CompleteCallback>
 800687e:	e016      	b.n	80068ae <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	f003 0304 	and.w	r3, r3, #4
 8006886:	2b00      	cmp	r3, #0
 8006888:	d004      	beq.n	8006894 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800688a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006890:	627b      	str	r3, [r7, #36]	@ 0x24
 8006892:	e00c      	b.n	80068ae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	f003 0308 	and.w	r3, r3, #8
 800689a:	2b00      	cmp	r3, #0
 800689c:	d004      	beq.n	80068a8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800689e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80068a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80068a6:	e002      	b.n	80068ae <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f989 	bl	8006bc0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d024      	beq.n	8006902 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f963 	bl	8006b98 <HAL_CAN_TxMailbox1CompleteCallback>
 80068d2:	e016      	b.n	8006902 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d004      	beq.n	80068e8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80068e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80068e6:	e00c      	b.n	8006902 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d004      	beq.n	80068fc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80068f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068fa:	e002      	b.n	8006902 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f969 	bl	8006bd4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d024      	beq.n	8006956 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006914:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f943 	bl	8006bac <HAL_CAN_TxMailbox2CompleteCallback>
 8006926:	e016      	b.n	8006956 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d004      	beq.n	800693c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006934:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006938:	627b      	str	r3, [r7, #36]	@ 0x24
 800693a:	e00c      	b.n	8006956 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d004      	beq.n	8006950 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800694c:	627b      	str	r3, [r7, #36]	@ 0x24
 800694e:	e002      	b.n	8006956 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f949 	bl	8006be8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	f003 0308 	and.w	r3, r3, #8
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00c      	beq.n	800697a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f003 0310 	and.w	r3, r3, #16
 8006966:	2b00      	cmp	r3, #0
 8006968:	d007      	beq.n	800697a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006970:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2210      	movs	r2, #16
 8006978:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	f003 0304 	and.w	r3, r3, #4
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00b      	beq.n	800699c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f003 0308 	and.w	r3, r3, #8
 800698a:	2b00      	cmp	r3, #0
 800698c:	d006      	beq.n	800699c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2208      	movs	r2, #8
 8006994:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f930 	bl	8006bfc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d009      	beq.n	80069ba <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f003 0303 	and.w	r3, r3, #3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7fb fc17 	bl	80021e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00c      	beq.n	80069de <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f003 0310 	and.w	r3, r3, #16
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d007      	beq.n	80069de <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80069ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80069d4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2210      	movs	r2, #16
 80069dc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	f003 0320 	and.w	r3, r3, #32
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00b      	beq.n	8006a00 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d006      	beq.n	8006a00 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2208      	movs	r2, #8
 80069f8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f912 	bl	8006c24 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	f003 0310 	and.w	r3, r3, #16
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d009      	beq.n	8006a1e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	f003 0303 	and.w	r3, r3, #3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f8f9 	bl	8006c10 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00b      	beq.n	8006a40 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	f003 0310 	and.w	r3, r3, #16
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d006      	beq.n	8006a40 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2210      	movs	r2, #16
 8006a38:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f8fc 	bl	8006c38 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00b      	beq.n	8006a62 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	f003 0308 	and.w	r3, r3, #8
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d006      	beq.n	8006a62 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2208      	movs	r2, #8
 8006a5a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f8f5 	bl	8006c4c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d07b      	beq.n	8006b64 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	f003 0304 	and.w	r3, r3, #4
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d072      	beq.n	8006b5c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d008      	beq.n	8006a92 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d003      	beq.n	8006a92 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8c:	f043 0301 	orr.w	r3, r3, #1
 8006a90:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d008      	beq.n	8006aae <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa8:	f043 0302 	orr.w	r3, r3, #2
 8006aac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d008      	beq.n	8006aca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac4:	f043 0304 	orr.w	r3, r3, #4
 8006ac8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d043      	beq.n	8006b5c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d03e      	beq.n	8006b5c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ae4:	2b60      	cmp	r3, #96	@ 0x60
 8006ae6:	d02b      	beq.n	8006b40 <HAL_CAN_IRQHandler+0x32a>
 8006ae8:	2b60      	cmp	r3, #96	@ 0x60
 8006aea:	d82e      	bhi.n	8006b4a <HAL_CAN_IRQHandler+0x334>
 8006aec:	2b50      	cmp	r3, #80	@ 0x50
 8006aee:	d022      	beq.n	8006b36 <HAL_CAN_IRQHandler+0x320>
 8006af0:	2b50      	cmp	r3, #80	@ 0x50
 8006af2:	d82a      	bhi.n	8006b4a <HAL_CAN_IRQHandler+0x334>
 8006af4:	2b40      	cmp	r3, #64	@ 0x40
 8006af6:	d019      	beq.n	8006b2c <HAL_CAN_IRQHandler+0x316>
 8006af8:	2b40      	cmp	r3, #64	@ 0x40
 8006afa:	d826      	bhi.n	8006b4a <HAL_CAN_IRQHandler+0x334>
 8006afc:	2b30      	cmp	r3, #48	@ 0x30
 8006afe:	d010      	beq.n	8006b22 <HAL_CAN_IRQHandler+0x30c>
 8006b00:	2b30      	cmp	r3, #48	@ 0x30
 8006b02:	d822      	bhi.n	8006b4a <HAL_CAN_IRQHandler+0x334>
 8006b04:	2b10      	cmp	r3, #16
 8006b06:	d002      	beq.n	8006b0e <HAL_CAN_IRQHandler+0x2f8>
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d005      	beq.n	8006b18 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006b0c:	e01d      	b.n	8006b4a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b10:	f043 0308 	orr.w	r3, r3, #8
 8006b14:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b16:	e019      	b.n	8006b4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1a:	f043 0310 	orr.w	r3, r3, #16
 8006b1e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b20:	e014      	b.n	8006b4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b24:	f043 0320 	orr.w	r3, r3, #32
 8006b28:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b2a:	e00f      	b.n	8006b4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b32:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b34:	e00a      	b.n	8006b4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b3c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b3e:	e005      	b.n	8006b4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b46:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b48:	e000      	b.n	8006b4c <HAL_CAN_IRQHandler+0x336>
            break;
 8006b4a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699a      	ldr	r2, [r3, #24]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006b5a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2204      	movs	r2, #4
 8006b62:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d008      	beq.n	8006b7c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f872 	bl	8006c60 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006b7c:	bf00      	nop
 8006b7e:	3728      	adds	r7, #40	@ 0x28
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c84:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006c90:	4013      	ands	r3, r2
 8006c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ca6:	4a04      	ldr	r2, [pc, #16]	@ (8006cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	60d3      	str	r3, [r2, #12]
}
 8006cac:	bf00      	nop
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	e000ed00 	.word	0xe000ed00

08006cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006cc0:	4b04      	ldr	r3, [pc, #16]	@ (8006cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	0a1b      	lsrs	r3, r3, #8
 8006cc6:	f003 0307 	and.w	r3, r3, #7
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	e000ed00 	.word	0xe000ed00

08006cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	4603      	mov	r3, r0
 8006ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	db0b      	blt.n	8006d02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cea:	79fb      	ldrb	r3, [r7, #7]
 8006cec:	f003 021f 	and.w	r2, r3, #31
 8006cf0:	4907      	ldr	r1, [pc, #28]	@ (8006d10 <__NVIC_EnableIRQ+0x38>)
 8006cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cf6:	095b      	lsrs	r3, r3, #5
 8006cf8:	2001      	movs	r0, #1
 8006cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8006cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	e000e100 	.word	0xe000e100

08006d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	6039      	str	r1, [r7, #0]
 8006d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	db0a      	blt.n	8006d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	490c      	ldr	r1, [pc, #48]	@ (8006d60 <__NVIC_SetPriority+0x4c>)
 8006d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d32:	0112      	lsls	r2, r2, #4
 8006d34:	b2d2      	uxtb	r2, r2
 8006d36:	440b      	add	r3, r1
 8006d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d3c:	e00a      	b.n	8006d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	4908      	ldr	r1, [pc, #32]	@ (8006d64 <__NVIC_SetPriority+0x50>)
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	f003 030f 	and.w	r3, r3, #15
 8006d4a:	3b04      	subs	r3, #4
 8006d4c:	0112      	lsls	r2, r2, #4
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	440b      	add	r3, r1
 8006d52:	761a      	strb	r2, [r3, #24]
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	e000e100 	.word	0xe000e100
 8006d64:	e000ed00 	.word	0xe000ed00

08006d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b089      	sub	sp, #36	@ 0x24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	f1c3 0307 	rsb	r3, r3, #7
 8006d82:	2b04      	cmp	r3, #4
 8006d84:	bf28      	it	cs
 8006d86:	2304      	movcs	r3, #4
 8006d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	2b06      	cmp	r3, #6
 8006d90:	d902      	bls.n	8006d98 <NVIC_EncodePriority+0x30>
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	3b03      	subs	r3, #3
 8006d96:	e000      	b.n	8006d9a <NVIC_EncodePriority+0x32>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	fa02 f303 	lsl.w	r3, r2, r3
 8006da6:	43da      	mvns	r2, r3
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	401a      	ands	r2, r3
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006db0:	f04f 31ff 	mov.w	r1, #4294967295
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dba:	43d9      	mvns	r1, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006dc0:	4313      	orrs	r3, r2
         );
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3724      	adds	r7, #36	@ 0x24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff ff4c 	bl	8006c74 <__NVIC_SetPriorityGrouping>
}
 8006ddc:	bf00      	nop
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	4603      	mov	r3, r0
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006df2:	2300      	movs	r3, #0
 8006df4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006df6:	f7ff ff61 	bl	8006cbc <__NVIC_GetPriorityGrouping>
 8006dfa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	68b9      	ldr	r1, [r7, #8]
 8006e00:	6978      	ldr	r0, [r7, #20]
 8006e02:	f7ff ffb1 	bl	8006d68 <NVIC_EncodePriority>
 8006e06:	4602      	mov	r2, r0
 8006e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7ff ff80 	bl	8006d14 <__NVIC_SetPriority>
}
 8006e14:	bf00      	nop
 8006e16:	3718      	adds	r7, #24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	4603      	mov	r3, r0
 8006e24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff ff54 	bl	8006cd8 <__NVIC_EnableIRQ>
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e098      	b.n	8006f7c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	4b4d      	ldr	r3, [pc, #308]	@ (8006f88 <HAL_DMA_Init+0x150>)
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d80f      	bhi.n	8006e76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	4b4b      	ldr	r3, [pc, #300]	@ (8006f8c <HAL_DMA_Init+0x154>)
 8006e5e:	4413      	add	r3, r2
 8006e60:	4a4b      	ldr	r2, [pc, #300]	@ (8006f90 <HAL_DMA_Init+0x158>)
 8006e62:	fba2 2303 	umull	r2, r3, r2, r3
 8006e66:	091b      	lsrs	r3, r3, #4
 8006e68:	009a      	lsls	r2, r3, #2
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a48      	ldr	r2, [pc, #288]	@ (8006f94 <HAL_DMA_Init+0x15c>)
 8006e72:	641a      	str	r2, [r3, #64]	@ 0x40
 8006e74:	e00e      	b.n	8006e94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	4b46      	ldr	r3, [pc, #280]	@ (8006f98 <HAL_DMA_Init+0x160>)
 8006e7e:	4413      	add	r3, r2
 8006e80:	4a43      	ldr	r2, [pc, #268]	@ (8006f90 <HAL_DMA_Init+0x158>)
 8006e82:	fba2 2303 	umull	r2, r3, r2, r3
 8006e86:	091b      	lsrs	r3, r3, #4
 8006e88:	009a      	lsls	r2, r3, #2
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a42      	ldr	r2, [pc, #264]	@ (8006f9c <HAL_DMA_Init+0x164>)
 8006e92:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2202      	movs	r2, #2
 8006e98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ed0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006eee:	d039      	beq.n	8006f64 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef4:	4a27      	ldr	r2, [pc, #156]	@ (8006f94 <HAL_DMA_Init+0x15c>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d11a      	bne.n	8006f30 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006efa:	4b29      	ldr	r3, [pc, #164]	@ (8006fa0 <HAL_DMA_Init+0x168>)
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f02:	f003 031c 	and.w	r3, r3, #28
 8006f06:	210f      	movs	r1, #15
 8006f08:	fa01 f303 	lsl.w	r3, r1, r3
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	4924      	ldr	r1, [pc, #144]	@ (8006fa0 <HAL_DMA_Init+0x168>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006f14:	4b22      	ldr	r3, [pc, #136]	@ (8006fa0 <HAL_DMA_Init+0x168>)
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6859      	ldr	r1, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f20:	f003 031c 	and.w	r3, r3, #28
 8006f24:	fa01 f303 	lsl.w	r3, r1, r3
 8006f28:	491d      	ldr	r1, [pc, #116]	@ (8006fa0 <HAL_DMA_Init+0x168>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	600b      	str	r3, [r1, #0]
 8006f2e:	e019      	b.n	8006f64 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006f30:	4b1c      	ldr	r3, [pc, #112]	@ (8006fa4 <HAL_DMA_Init+0x16c>)
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f38:	f003 031c 	and.w	r3, r3, #28
 8006f3c:	210f      	movs	r1, #15
 8006f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f42:	43db      	mvns	r3, r3
 8006f44:	4917      	ldr	r1, [pc, #92]	@ (8006fa4 <HAL_DMA_Init+0x16c>)
 8006f46:	4013      	ands	r3, r2
 8006f48:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006f4a:	4b16      	ldr	r3, [pc, #88]	@ (8006fa4 <HAL_DMA_Init+0x16c>)
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6859      	ldr	r1, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f56:	f003 031c 	and.w	r3, r3, #28
 8006f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f5e:	4911      	ldr	r1, [pc, #68]	@ (8006fa4 <HAL_DMA_Init+0x16c>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	40020407 	.word	0x40020407
 8006f8c:	bffdfff8 	.word	0xbffdfff8
 8006f90:	cccccccd 	.word	0xcccccccd
 8006f94:	40020000 	.word	0x40020000
 8006f98:	bffdfbf8 	.word	0xbffdfbf8
 8006f9c:	40020400 	.word	0x40020400
 8006fa0:	400200a8 	.word	0x400200a8
 8006fa4:	400204a8 	.word	0x400204a8

08006fa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
 8006fb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d101      	bne.n	8006fc8 <HAL_DMA_Start_IT+0x20>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	e04b      	b.n	8007060 <HAL_DMA_Start_IT+0xb8>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d13a      	bne.n	8007052 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 0201 	bic.w	r2, r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	68b9      	ldr	r1, [r7, #8]
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 f95f 	bl	80072c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800700a:	2b00      	cmp	r3, #0
 800700c:	d008      	beq.n	8007020 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f042 020e 	orr.w	r2, r2, #14
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	e00f      	b.n	8007040 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 0204 	bic.w	r2, r2, #4
 800702e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 020a 	orr.w	r2, r2, #10
 800703e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f042 0201 	orr.w	r2, r2, #1
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	e005      	b.n	800705e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800705a:	2302      	movs	r3, #2
 800705c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800705e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3718      	adds	r7, #24
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b02      	cmp	r3, #2
 800707e:	d008      	beq.n	8007092 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2204      	movs	r2, #4
 8007084:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e022      	b.n	80070d8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f022 020e 	bic.w	r2, r2, #14
 80070a0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 0201 	bic.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b6:	f003 021c 	and.w	r2, r3, #28
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070be:	2101      	movs	r1, #1
 80070c0:	fa01 f202 	lsl.w	r2, r1, r2
 80070c4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d005      	beq.n	8007108 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2204      	movs	r2, #4
 8007100:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	73fb      	strb	r3, [r7, #15]
 8007106:	e029      	b.n	800715c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f022 020e 	bic.w	r2, r2, #14
 8007116:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f022 0201 	bic.w	r2, r2, #1
 8007126:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800712c:	f003 021c 	and.w	r2, r3, #28
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007134:	2101      	movs	r1, #1
 8007136:	fa01 f202 	lsl.w	r2, r1, r2
 800713a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007150:	2b00      	cmp	r3, #0
 8007152:	d003      	beq.n	800715c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	4798      	blx	r3
    }
  }
  return status;
 800715c:	7bfb      	ldrb	r3, [r7, #15]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b084      	sub	sp, #16
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007182:	f003 031c 	and.w	r3, r3, #28
 8007186:	2204      	movs	r2, #4
 8007188:	409a      	lsls	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	4013      	ands	r3, r2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d026      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x7a>
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d021      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d107      	bne.n	80071ba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 0204 	bic.w	r2, r2, #4
 80071b8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071be:	f003 021c 	and.w	r2, r3, #28
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c6:	2104      	movs	r1, #4
 80071c8:	fa01 f202 	lsl.w	r2, r1, r2
 80071cc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d071      	beq.n	80072ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80071de:	e06c      	b.n	80072ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071e4:	f003 031c 	and.w	r3, r3, #28
 80071e8:	2202      	movs	r2, #2
 80071ea:	409a      	lsls	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4013      	ands	r3, r2
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d02e      	beq.n	8007252 <HAL_DMA_IRQHandler+0xec>
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d029      	beq.n	8007252 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0320 	and.w	r3, r3, #32
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10b      	bne.n	8007224 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 020a 	bic.w	r2, r2, #10
 800721a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007228:	f003 021c 	and.w	r2, r3, #28
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007230:	2102      	movs	r1, #2
 8007232:	fa01 f202 	lsl.w	r2, r1, r2
 8007236:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007244:	2b00      	cmp	r3, #0
 8007246:	d038      	beq.n	80072ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007250:	e033      	b.n	80072ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007256:	f003 031c 	and.w	r3, r3, #28
 800725a:	2208      	movs	r2, #8
 800725c:	409a      	lsls	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4013      	ands	r3, r2
 8007262:	2b00      	cmp	r3, #0
 8007264:	d02a      	beq.n	80072bc <HAL_DMA_IRQHandler+0x156>
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f003 0308 	and.w	r3, r3, #8
 800726c:	2b00      	cmp	r3, #0
 800726e:	d025      	beq.n	80072bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 020e 	bic.w	r2, r2, #14
 800727e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007284:	f003 021c 	and.w	r2, r3, #28
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728c:	2101      	movs	r1, #1
 800728e:	fa01 f202 	lsl.w	r2, r1, r2
 8007292:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d004      	beq.n	80072bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80072ba:	bf00      	nop
 80072bc:	bf00      	nop
}
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072d6:	f003 021c 	and.w	r2, r3, #28
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072de:	2101      	movs	r1, #1
 80072e0:	fa01 f202 	lsl.w	r2, r1, r2
 80072e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	2b10      	cmp	r3, #16
 80072f4:	d108      	bne.n	8007308 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007306:	e007      	b.n	8007318 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	60da      	str	r2, [r3, #12]
}
 8007318:	bf00      	nop
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800732e:	2300      	movs	r3, #0
 8007330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007332:	e166      	b.n	8007602 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	2101      	movs	r1, #1
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	fa01 f303 	lsl.w	r3, r1, r3
 8007340:	4013      	ands	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 8158 	beq.w	80075fc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f003 0303 	and.w	r3, r3, #3
 8007354:	2b01      	cmp	r3, #1
 8007356:	d005      	beq.n	8007364 <HAL_GPIO_Init+0x40>
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f003 0303 	and.w	r3, r3, #3
 8007360:	2b02      	cmp	r3, #2
 8007362:	d130      	bne.n	80073c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	005b      	lsls	r3, r3, #1
 800736e:	2203      	movs	r2, #3
 8007370:	fa02 f303 	lsl.w	r3, r2, r3
 8007374:	43db      	mvns	r3, r3
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	4013      	ands	r3, r2
 800737a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	68da      	ldr	r2, [r3, #12]
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	fa02 f303 	lsl.w	r3, r2, r3
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	4313      	orrs	r3, r2
 800738c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800739a:	2201      	movs	r2, #1
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	fa02 f303 	lsl.w	r3, r2, r3
 80073a2:	43db      	mvns	r3, r3
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	4013      	ands	r3, r2
 80073a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	091b      	lsrs	r3, r3, #4
 80073b0:	f003 0201 	and.w	r2, r3, #1
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	4313      	orrs	r3, r2
 80073be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f003 0303 	and.w	r3, r3, #3
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d017      	beq.n	8007402 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	2203      	movs	r2, #3
 80073de:	fa02 f303 	lsl.w	r3, r2, r3
 80073e2:	43db      	mvns	r3, r3
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	4013      	ands	r3, r2
 80073e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	689a      	ldr	r2, [r3, #8]
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	005b      	lsls	r3, r3, #1
 80073f2:	fa02 f303 	lsl.w	r3, r2, r3
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f003 0303 	and.w	r3, r3, #3
 800740a:	2b02      	cmp	r3, #2
 800740c:	d123      	bne.n	8007456 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	08da      	lsrs	r2, r3, #3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	3208      	adds	r2, #8
 8007416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f003 0307 	and.w	r3, r3, #7
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	220f      	movs	r2, #15
 8007426:	fa02 f303 	lsl.w	r3, r2, r3
 800742a:	43db      	mvns	r3, r3
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	4013      	ands	r3, r2
 8007430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	691a      	ldr	r2, [r3, #16]
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	fa02 f303 	lsl.w	r3, r2, r3
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	4313      	orrs	r3, r2
 8007446:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	08da      	lsrs	r2, r3, #3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3208      	adds	r2, #8
 8007450:	6939      	ldr	r1, [r7, #16]
 8007452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	005b      	lsls	r3, r3, #1
 8007460:	2203      	movs	r2, #3
 8007462:	fa02 f303 	lsl.w	r3, r2, r3
 8007466:	43db      	mvns	r3, r3
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	4013      	ands	r3, r2
 800746c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f003 0203 	and.w	r2, r3, #3
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	005b      	lsls	r3, r3, #1
 800747a:	fa02 f303 	lsl.w	r3, r2, r3
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	4313      	orrs	r3, r2
 8007482:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 80b2 	beq.w	80075fc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007498:	4b61      	ldr	r3, [pc, #388]	@ (8007620 <HAL_GPIO_Init+0x2fc>)
 800749a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800749c:	4a60      	ldr	r2, [pc, #384]	@ (8007620 <HAL_GPIO_Init+0x2fc>)
 800749e:	f043 0301 	orr.w	r3, r3, #1
 80074a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80074a4:	4b5e      	ldr	r3, [pc, #376]	@ (8007620 <HAL_GPIO_Init+0x2fc>)
 80074a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	60bb      	str	r3, [r7, #8]
 80074ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80074b0:	4a5c      	ldr	r2, [pc, #368]	@ (8007624 <HAL_GPIO_Init+0x300>)
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	089b      	lsrs	r3, r3, #2
 80074b6:	3302      	adds	r3, #2
 80074b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f003 0303 	and.w	r3, r3, #3
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	220f      	movs	r2, #15
 80074c8:	fa02 f303 	lsl.w	r3, r2, r3
 80074cc:	43db      	mvns	r3, r3
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	4013      	ands	r3, r2
 80074d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80074da:	d02b      	beq.n	8007534 <HAL_GPIO_Init+0x210>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a52      	ldr	r2, [pc, #328]	@ (8007628 <HAL_GPIO_Init+0x304>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d025      	beq.n	8007530 <HAL_GPIO_Init+0x20c>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a51      	ldr	r2, [pc, #324]	@ (800762c <HAL_GPIO_Init+0x308>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d01f      	beq.n	800752c <HAL_GPIO_Init+0x208>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a50      	ldr	r2, [pc, #320]	@ (8007630 <HAL_GPIO_Init+0x30c>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d019      	beq.n	8007528 <HAL_GPIO_Init+0x204>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a4f      	ldr	r2, [pc, #316]	@ (8007634 <HAL_GPIO_Init+0x310>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d013      	beq.n	8007524 <HAL_GPIO_Init+0x200>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a4e      	ldr	r2, [pc, #312]	@ (8007638 <HAL_GPIO_Init+0x314>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d00d      	beq.n	8007520 <HAL_GPIO_Init+0x1fc>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a4d      	ldr	r2, [pc, #308]	@ (800763c <HAL_GPIO_Init+0x318>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d007      	beq.n	800751c <HAL_GPIO_Init+0x1f8>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a4c      	ldr	r2, [pc, #304]	@ (8007640 <HAL_GPIO_Init+0x31c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d101      	bne.n	8007518 <HAL_GPIO_Init+0x1f4>
 8007514:	2307      	movs	r3, #7
 8007516:	e00e      	b.n	8007536 <HAL_GPIO_Init+0x212>
 8007518:	2308      	movs	r3, #8
 800751a:	e00c      	b.n	8007536 <HAL_GPIO_Init+0x212>
 800751c:	2306      	movs	r3, #6
 800751e:	e00a      	b.n	8007536 <HAL_GPIO_Init+0x212>
 8007520:	2305      	movs	r3, #5
 8007522:	e008      	b.n	8007536 <HAL_GPIO_Init+0x212>
 8007524:	2304      	movs	r3, #4
 8007526:	e006      	b.n	8007536 <HAL_GPIO_Init+0x212>
 8007528:	2303      	movs	r3, #3
 800752a:	e004      	b.n	8007536 <HAL_GPIO_Init+0x212>
 800752c:	2302      	movs	r3, #2
 800752e:	e002      	b.n	8007536 <HAL_GPIO_Init+0x212>
 8007530:	2301      	movs	r3, #1
 8007532:	e000      	b.n	8007536 <HAL_GPIO_Init+0x212>
 8007534:	2300      	movs	r3, #0
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	f002 0203 	and.w	r2, r2, #3
 800753c:	0092      	lsls	r2, r2, #2
 800753e:	4093      	lsls	r3, r2
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	4313      	orrs	r3, r2
 8007544:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007546:	4937      	ldr	r1, [pc, #220]	@ (8007624 <HAL_GPIO_Init+0x300>)
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	089b      	lsrs	r3, r3, #2
 800754c:	3302      	adds	r3, #2
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007554:	4b3b      	ldr	r3, [pc, #236]	@ (8007644 <HAL_GPIO_Init+0x320>)
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	43db      	mvns	r3, r3
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	4013      	ands	r3, r2
 8007562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d003      	beq.n	8007578 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	4313      	orrs	r3, r2
 8007576:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007578:	4a32      	ldr	r2, [pc, #200]	@ (8007644 <HAL_GPIO_Init+0x320>)
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800757e:	4b31      	ldr	r3, [pc, #196]	@ (8007644 <HAL_GPIO_Init+0x320>)
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	43db      	mvns	r3, r3
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	4013      	ands	r3, r2
 800758c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4313      	orrs	r3, r2
 80075a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80075a2:	4a28      	ldr	r2, [pc, #160]	@ (8007644 <HAL_GPIO_Init+0x320>)
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80075a8:	4b26      	ldr	r3, [pc, #152]	@ (8007644 <HAL_GPIO_Init+0x320>)
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	43db      	mvns	r3, r3
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	4013      	ands	r3, r2
 80075b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80075cc:	4a1d      	ldr	r2, [pc, #116]	@ (8007644 <HAL_GPIO_Init+0x320>)
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80075d2:	4b1c      	ldr	r3, [pc, #112]	@ (8007644 <HAL_GPIO_Init+0x320>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	43db      	mvns	r3, r3
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	4013      	ands	r3, r2
 80075e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80075f6:	4a13      	ldr	r2, [pc, #76]	@ (8007644 <HAL_GPIO_Init+0x320>)
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	3301      	adds	r3, #1
 8007600:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	fa22 f303 	lsr.w	r3, r2, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	f47f ae91 	bne.w	8007334 <HAL_GPIO_Init+0x10>
  }
}
 8007612:	bf00      	nop
 8007614:	bf00      	nop
 8007616:	371c      	adds	r7, #28
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	40021000 	.word	0x40021000
 8007624:	40010000 	.word	0x40010000
 8007628:	48000400 	.word	0x48000400
 800762c:	48000800 	.word	0x48000800
 8007630:	48000c00 	.word	0x48000c00
 8007634:	48001000 	.word	0x48001000
 8007638:	48001400 	.word	0x48001400
 800763c:	48001800 	.word	0x48001800
 8007640:	48001c00 	.word	0x48001c00
 8007644:	40010400 	.word	0x40010400

08007648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	460b      	mov	r3, r1
 8007652:	807b      	strh	r3, [r7, #2]
 8007654:	4613      	mov	r3, r2
 8007656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007658:	787b      	ldrb	r3, [r7, #1]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d003      	beq.n	8007666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800765e:	887a      	ldrh	r2, [r7, #2]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007664:	e002      	b.n	800766c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007666:	887a      	ldrh	r2, [r7, #2]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	695b      	ldr	r3, [r3, #20]
 8007688:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800768a:	887a      	ldrh	r2, [r7, #2]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4013      	ands	r3, r2
 8007690:	041a      	lsls	r2, r3, #16
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	43d9      	mvns	r1, r3
 8007696:	887b      	ldrh	r3, [r7, #2]
 8007698:	400b      	ands	r3, r1
 800769a:	431a      	orrs	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	619a      	str	r2, [r3, #24]
}
 80076a0:	bf00      	nop
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	4603      	mov	r3, r0
 80076b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80076b6:	4b08      	ldr	r3, [pc, #32]	@ (80076d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80076b8:	695a      	ldr	r2, [r3, #20]
 80076ba:	88fb      	ldrh	r3, [r7, #6]
 80076bc:	4013      	ands	r3, r2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d006      	beq.n	80076d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80076c2:	4a05      	ldr	r2, [pc, #20]	@ (80076d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80076c4:	88fb      	ldrh	r3, [r7, #6]
 80076c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80076c8:	88fb      	ldrh	r3, [r7, #6]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fa fd7c 	bl	80021c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80076d0:	bf00      	nop
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	40010400 	.word	0x40010400

080076dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e08d      	b.n	800780a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d106      	bne.n	8007708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7fb fc7e 	bl	8003004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2224      	movs	r2, #36	@ 0x24
 800770c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0201 	bic.w	r2, r2, #1
 800771e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800772c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	689a      	ldr	r2, [r3, #8]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800773c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d107      	bne.n	8007756 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	689a      	ldr	r2, [r3, #8]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007752:	609a      	str	r2, [r3, #8]
 8007754:	e006      	b.n	8007764 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	689a      	ldr	r2, [r3, #8]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007762:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	2b02      	cmp	r3, #2
 800776a:	d108      	bne.n	800777e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800777a:	605a      	str	r2, [r3, #4]
 800777c:	e007      	b.n	800778e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800778c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	6812      	ldr	r2, [r2, #0]
 8007798:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800779c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68da      	ldr	r2, [r3, #12]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691a      	ldr	r2, [r3, #16]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	69d9      	ldr	r1, [r3, #28]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a1a      	ldr	r2, [r3, #32]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f042 0201 	orr.w	r2, r2, #1
 80077ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af02      	add	r7, sp, #8
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	4608      	mov	r0, r1
 800781e:	4611      	mov	r1, r2
 8007820:	461a      	mov	r2, r3
 8007822:	4603      	mov	r3, r0
 8007824:	817b      	strh	r3, [r7, #10]
 8007826:	460b      	mov	r3, r1
 8007828:	813b      	strh	r3, [r7, #8]
 800782a:	4613      	mov	r3, r2
 800782c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b20      	cmp	r3, #32
 8007838:	f040 80f9 	bne.w	8007a2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800783c:	6a3b      	ldr	r3, [r7, #32]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d002      	beq.n	8007848 <HAL_I2C_Mem_Write+0x34>
 8007842:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007844:	2b00      	cmp	r3, #0
 8007846:	d105      	bne.n	8007854 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800784e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e0ed      	b.n	8007a30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800785a:	2b01      	cmp	r3, #1
 800785c:	d101      	bne.n	8007862 <HAL_I2C_Mem_Write+0x4e>
 800785e:	2302      	movs	r3, #2
 8007860:	e0e6      	b.n	8007a30 <HAL_I2C_Mem_Write+0x21c>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800786a:	f7fc ff63 	bl	8004734 <HAL_GetTick>
 800786e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	2319      	movs	r3, #25
 8007876:	2201      	movs	r2, #1
 8007878:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f000 fac3 	bl	8007e08 <I2C_WaitOnFlagUntilTimeout>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e0d1      	b.n	8007a30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2221      	movs	r2, #33	@ 0x21
 8007890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2240      	movs	r2, #64	@ 0x40
 8007898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6a3a      	ldr	r2, [r7, #32]
 80078a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80078ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078b4:	88f8      	ldrh	r0, [r7, #6]
 80078b6:	893a      	ldrh	r2, [r7, #8]
 80078b8:	8979      	ldrh	r1, [r7, #10]
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	9301      	str	r3, [sp, #4]
 80078be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	4603      	mov	r3, r0
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f000 f9d3 	bl	8007c70 <I2C_RequestMemoryWrite>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d005      	beq.n	80078dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e0a9      	b.n	8007a30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	2bff      	cmp	r3, #255	@ 0xff
 80078e4:	d90e      	bls.n	8007904 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	22ff      	movs	r2, #255	@ 0xff
 80078ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	8979      	ldrh	r1, [r7, #10]
 80078f4:	2300      	movs	r3, #0
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 fc47 	bl	8008190 <I2C_TransferConfig>
 8007902:	e00f      	b.n	8007924 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007908:	b29a      	uxth	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007912:	b2da      	uxtb	r2, r3
 8007914:	8979      	ldrh	r1, [r7, #10]
 8007916:	2300      	movs	r3, #0
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 fc36 	bl	8008190 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 fac6 	bl	8007eba <I2C_WaitOnTXISFlagUntilTimeout>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e07b      	b.n	8007a30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800793c:	781a      	ldrb	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007952:	b29b      	uxth	r3, r3
 8007954:	3b01      	subs	r3, #1
 8007956:	b29a      	uxth	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007960:	3b01      	subs	r3, #1
 8007962:	b29a      	uxth	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800796c:	b29b      	uxth	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d034      	beq.n	80079dc <HAL_I2C_Mem_Write+0x1c8>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007976:	2b00      	cmp	r3, #0
 8007978:	d130      	bne.n	80079dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007980:	2200      	movs	r2, #0
 8007982:	2180      	movs	r1, #128	@ 0x80
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 fa3f 	bl	8007e08 <I2C_WaitOnFlagUntilTimeout>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e04d      	b.n	8007a30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007998:	b29b      	uxth	r3, r3
 800799a:	2bff      	cmp	r3, #255	@ 0xff
 800799c:	d90e      	bls.n	80079bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	22ff      	movs	r2, #255	@ 0xff
 80079a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	8979      	ldrh	r1, [r7, #10]
 80079ac:	2300      	movs	r3, #0
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 fbeb 	bl	8008190 <I2C_TransferConfig>
 80079ba:	e00f      	b.n	80079dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ca:	b2da      	uxtb	r2, r3
 80079cc:	8979      	ldrh	r1, [r7, #10]
 80079ce:	2300      	movs	r3, #0
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 fbda 	bl	8008190 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d19e      	bne.n	8007924 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 faac 	bl	8007f48 <I2C_WaitOnSTOPFlagUntilTimeout>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e01a      	b.n	8007a30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2220      	movs	r2, #32
 8007a00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6859      	ldr	r1, [r3, #4]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a38 <HAL_I2C_Mem_Write+0x224>)
 8007a0e:	400b      	ands	r3, r1
 8007a10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2220      	movs	r2, #32
 8007a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e000      	b.n	8007a30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007a2e:	2302      	movs	r3, #2
  }
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3718      	adds	r7, #24
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	fe00e800 	.word	0xfe00e800

08007a3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b088      	sub	sp, #32
 8007a40:	af02      	add	r7, sp, #8
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	4608      	mov	r0, r1
 8007a46:	4611      	mov	r1, r2
 8007a48:	461a      	mov	r2, r3
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	817b      	strh	r3, [r7, #10]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	813b      	strh	r3, [r7, #8]
 8007a52:	4613      	mov	r3, r2
 8007a54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b20      	cmp	r3, #32
 8007a60:	f040 80fd 	bne.w	8007c5e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <HAL_I2C_Mem_Read+0x34>
 8007a6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d105      	bne.n	8007a7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a76:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e0f1      	b.n	8007c60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d101      	bne.n	8007a8a <HAL_I2C_Mem_Read+0x4e>
 8007a86:	2302      	movs	r3, #2
 8007a88:	e0ea      	b.n	8007c60 <HAL_I2C_Mem_Read+0x224>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a92:	f7fc fe4f 	bl	8004734 <HAL_GetTick>
 8007a96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	2319      	movs	r3, #25
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 f9af 	bl	8007e08 <I2C_WaitOnFlagUntilTimeout>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d001      	beq.n	8007ab4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e0d5      	b.n	8007c60 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2222      	movs	r2, #34	@ 0x22
 8007ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2240      	movs	r2, #64	@ 0x40
 8007ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6a3a      	ldr	r2, [r7, #32]
 8007ace:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007adc:	88f8      	ldrh	r0, [r7, #6]
 8007ade:	893a      	ldrh	r2, [r7, #8]
 8007ae0:	8979      	ldrh	r1, [r7, #10]
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	9301      	str	r3, [sp, #4]
 8007ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	4603      	mov	r3, r0
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f000 f913 	bl	8007d18 <I2C_RequestMemoryRead>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d005      	beq.n	8007b04 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e0ad      	b.n	8007c60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	2bff      	cmp	r3, #255	@ 0xff
 8007b0c:	d90e      	bls.n	8007b2c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2201      	movs	r2, #1
 8007b12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	8979      	ldrh	r1, [r7, #10]
 8007b1c:	4b52      	ldr	r3, [pc, #328]	@ (8007c68 <HAL_I2C_Mem_Read+0x22c>)
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f000 fb33 	bl	8008190 <I2C_TransferConfig>
 8007b2a:	e00f      	b.n	8007b4c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	8979      	ldrh	r1, [r7, #10]
 8007b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8007c68 <HAL_I2C_Mem_Read+0x22c>)
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f000 fb22 	bl	8008190 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b52:	2200      	movs	r2, #0
 8007b54:	2104      	movs	r1, #4
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 f956 	bl	8007e08 <I2C_WaitOnFlagUntilTimeout>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e07c      	b.n	8007c60 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b70:	b2d2      	uxtb	r2, r2
 8007b72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b78:	1c5a      	adds	r2, r3, #1
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b82:	3b01      	subs	r3, #1
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	3b01      	subs	r3, #1
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d034      	beq.n	8007c0c <HAL_I2C_Mem_Read+0x1d0>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d130      	bne.n	8007c0c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	2180      	movs	r1, #128	@ 0x80
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f000 f927 	bl	8007e08 <I2C_WaitOnFlagUntilTimeout>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e04d      	b.n	8007c60 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	2bff      	cmp	r3, #255	@ 0xff
 8007bcc:	d90e      	bls.n	8007bec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	8979      	ldrh	r1, [r7, #10]
 8007bdc:	2300      	movs	r3, #0
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 fad3 	bl	8008190 <I2C_TransferConfig>
 8007bea:	e00f      	b.n	8007c0c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	8979      	ldrh	r1, [r7, #10]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 fac2 	bl	8008190 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d19a      	bne.n	8007b4c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 f994 	bl	8007f48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e01a      	b.n	8007c60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2220      	movs	r2, #32
 8007c30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6859      	ldr	r1, [r3, #4]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c6c <HAL_I2C_Mem_Read+0x230>)
 8007c3e:	400b      	ands	r3, r1
 8007c40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2220      	movs	r2, #32
 8007c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	e000      	b.n	8007c60 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007c5e:	2302      	movs	r3, #2
  }
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	80002400 	.word	0x80002400
 8007c6c:	fe00e800 	.word	0xfe00e800

08007c70 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af02      	add	r7, sp, #8
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	4608      	mov	r0, r1
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	4603      	mov	r3, r0
 8007c80:	817b      	strh	r3, [r7, #10]
 8007c82:	460b      	mov	r3, r1
 8007c84:	813b      	strh	r3, [r7, #8]
 8007c86:	4613      	mov	r3, r2
 8007c88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007c8a:	88fb      	ldrh	r3, [r7, #6]
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	8979      	ldrh	r1, [r7, #10]
 8007c90:	4b20      	ldr	r3, [pc, #128]	@ (8007d14 <I2C_RequestMemoryWrite+0xa4>)
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 fa79 	bl	8008190 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c9e:	69fa      	ldr	r2, [r7, #28]
 8007ca0:	69b9      	ldr	r1, [r7, #24]
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 f909 	bl	8007eba <I2C_WaitOnTXISFlagUntilTimeout>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d001      	beq.n	8007cb2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e02c      	b.n	8007d0c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007cb2:	88fb      	ldrh	r3, [r7, #6]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d105      	bne.n	8007cc4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007cb8:	893b      	ldrh	r3, [r7, #8]
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	629a      	str	r2, [r3, #40]	@ 0x28
 8007cc2:	e015      	b.n	8007cf0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007cc4:	893b      	ldrh	r3, [r7, #8]
 8007cc6:	0a1b      	lsrs	r3, r3, #8
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cd2:	69fa      	ldr	r2, [r7, #28]
 8007cd4:	69b9      	ldr	r1, [r7, #24]
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f000 f8ef 	bl	8007eba <I2C_WaitOnTXISFlagUntilTimeout>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e012      	b.n	8007d0c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ce6:	893b      	ldrh	r3, [r7, #8]
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	2180      	movs	r1, #128	@ 0x80
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 f884 	bl	8007e08 <I2C_WaitOnFlagUntilTimeout>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e000      	b.n	8007d0c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	80002000 	.word	0x80002000

08007d18 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af02      	add	r7, sp, #8
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	4608      	mov	r0, r1
 8007d22:	4611      	mov	r1, r2
 8007d24:	461a      	mov	r2, r3
 8007d26:	4603      	mov	r3, r0
 8007d28:	817b      	strh	r3, [r7, #10]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	813b      	strh	r3, [r7, #8]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007d32:	88fb      	ldrh	r3, [r7, #6]
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	8979      	ldrh	r1, [r7, #10]
 8007d38:	4b20      	ldr	r3, [pc, #128]	@ (8007dbc <I2C_RequestMemoryRead+0xa4>)
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f000 fa26 	bl	8008190 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d44:	69fa      	ldr	r2, [r7, #28]
 8007d46:	69b9      	ldr	r1, [r7, #24]
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f000 f8b6 	bl	8007eba <I2C_WaitOnTXISFlagUntilTimeout>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e02c      	b.n	8007db2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d58:	88fb      	ldrh	r3, [r7, #6]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d105      	bne.n	8007d6a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d5e:	893b      	ldrh	r3, [r7, #8]
 8007d60:	b2da      	uxtb	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d68:	e015      	b.n	8007d96 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007d6a:	893b      	ldrh	r3, [r7, #8]
 8007d6c:	0a1b      	lsrs	r3, r3, #8
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d78:	69fa      	ldr	r2, [r7, #28]
 8007d7a:	69b9      	ldr	r1, [r7, #24]
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 f89c 	bl	8007eba <I2C_WaitOnTXISFlagUntilTimeout>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e012      	b.n	8007db2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d8c:	893b      	ldrh	r3, [r7, #8]
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	2140      	movs	r1, #64	@ 0x40
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 f831 	bl	8007e08 <I2C_WaitOnFlagUntilTimeout>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e000      	b.n	8007db2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	80002000 	.word	0x80002000

08007dc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d103      	bne.n	8007dde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	f003 0301 	and.w	r3, r3, #1
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d007      	beq.n	8007dfc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	699a      	ldr	r2, [r3, #24]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0201 	orr.w	r2, r2, #1
 8007dfa:	619a      	str	r2, [r3, #24]
  }
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	603b      	str	r3, [r7, #0]
 8007e14:	4613      	mov	r3, r2
 8007e16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e18:	e03b      	b.n	8007e92 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f000 f8d6 	bl	8007fd0 <I2C_IsErrorOccurred>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e041      	b.n	8007eb2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e34:	d02d      	beq.n	8007e92 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e36:	f7fc fc7d 	bl	8004734 <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d302      	bcc.n	8007e4c <I2C_WaitOnFlagUntilTimeout+0x44>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d122      	bne.n	8007e92 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	699a      	ldr	r2, [r3, #24]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	4013      	ands	r3, r2
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	bf0c      	ite	eq
 8007e5c:	2301      	moveq	r3, #1
 8007e5e:	2300      	movne	r3, #0
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	461a      	mov	r2, r3
 8007e64:	79fb      	ldrb	r3, [r7, #7]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d113      	bne.n	8007e92 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e6e:	f043 0220 	orr.w	r2, r3, #32
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e00f      	b.n	8007eb2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	699a      	ldr	r2, [r3, #24]
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	bf0c      	ite	eq
 8007ea2:	2301      	moveq	r3, #1
 8007ea4:	2300      	movne	r3, #0
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	79fb      	ldrb	r3, [r7, #7]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d0b4      	beq.n	8007e1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	60f8      	str	r0, [r7, #12]
 8007ec2:	60b9      	str	r1, [r7, #8]
 8007ec4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007ec6:	e033      	b.n	8007f30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	68b9      	ldr	r1, [r7, #8]
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 f87f 	bl	8007fd0 <I2C_IsErrorOccurred>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e031      	b.n	8007f40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee2:	d025      	beq.n	8007f30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ee4:	f7fc fc26 	bl	8004734 <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d302      	bcc.n	8007efa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d11a      	bne.n	8007f30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d013      	beq.n	8007f30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f0c:	f043 0220 	orr.w	r2, r3, #32
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2220      	movs	r2, #32
 8007f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e007      	b.n	8007f40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	f003 0302 	and.w	r3, r3, #2
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d1c4      	bne.n	8007ec8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f54:	e02f      	b.n	8007fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	68b9      	ldr	r1, [r7, #8]
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 f838 	bl	8007fd0 <I2C_IsErrorOccurred>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e02d      	b.n	8007fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f6a:	f7fc fbe3 	bl	8004734 <HAL_GetTick>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d302      	bcc.n	8007f80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d11a      	bne.n	8007fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	f003 0320 	and.w	r3, r3, #32
 8007f8a:	2b20      	cmp	r3, #32
 8007f8c:	d013      	beq.n	8007fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f92:	f043 0220 	orr.w	r2, r3, #32
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2220      	movs	r2, #32
 8007f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e007      	b.n	8007fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	f003 0320 	and.w	r3, r3, #32
 8007fc0:	2b20      	cmp	r3, #32
 8007fc2:	d1c8      	bne.n	8007f56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
	...

08007fd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b08a      	sub	sp, #40	@ 0x28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	f003 0310 	and.w	r3, r3, #16
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d068      	beq.n	80080ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2210      	movs	r2, #16
 8008002:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008004:	e049      	b.n	800809a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800c:	d045      	beq.n	800809a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800800e:	f7fc fb91 	bl	8004734 <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	429a      	cmp	r2, r3
 800801c:	d302      	bcc.n	8008024 <I2C_IsErrorOccurred+0x54>
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d13a      	bne.n	800809a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800802e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008036:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008046:	d121      	bne.n	800808c <I2C_IsErrorOccurred+0xbc>
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800804e:	d01d      	beq.n	800808c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008050:	7cfb      	ldrb	r3, [r7, #19]
 8008052:	2b20      	cmp	r3, #32
 8008054:	d01a      	beq.n	800808c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008064:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008066:	f7fc fb65 	bl	8004734 <HAL_GetTick>
 800806a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800806c:	e00e      	b.n	800808c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800806e:	f7fc fb61 	bl	8004734 <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	2b19      	cmp	r3, #25
 800807a:	d907      	bls.n	800808c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	f043 0320 	orr.w	r3, r3, #32
 8008082:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800808a:	e006      	b.n	800809a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	f003 0320 	and.w	r3, r3, #32
 8008096:	2b20      	cmp	r3, #32
 8008098:	d1e9      	bne.n	800806e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	f003 0320 	and.w	r3, r3, #32
 80080a4:	2b20      	cmp	r3, #32
 80080a6:	d003      	beq.n	80080b0 <I2C_IsErrorOccurred+0xe0>
 80080a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d0aa      	beq.n	8008006 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80080b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d103      	bne.n	80080c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2220      	movs	r2, #32
 80080be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80080c0:	6a3b      	ldr	r3, [r7, #32]
 80080c2:	f043 0304 	orr.w	r3, r3, #4
 80080c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00b      	beq.n	80080f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80080e0:	6a3b      	ldr	r3, [r7, #32]
 80080e2:	f043 0301 	orr.w	r3, r3, #1
 80080e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80080f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00b      	beq.n	800811a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	f043 0308 	orr.w	r3, r3, #8
 8008108:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008112:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00b      	beq.n	800813c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	f043 0302 	orr.w	r3, r3, #2
 800812a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008134:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800813c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008140:	2b00      	cmp	r3, #0
 8008142:	d01c      	beq.n	800817e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f7ff fe3b 	bl	8007dc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	6859      	ldr	r1, [r3, #4]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	4b0d      	ldr	r3, [pc, #52]	@ (800818c <I2C_IsErrorOccurred+0x1bc>)
 8008156:	400b      	ands	r3, r1
 8008158:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800815e:	6a3b      	ldr	r3, [r7, #32]
 8008160:	431a      	orrs	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2220      	movs	r2, #32
 800816a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800817e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008182:	4618      	mov	r0, r3
 8008184:	3728      	adds	r7, #40	@ 0x28
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	fe00e800 	.word	0xfe00e800

08008190 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008190:	b480      	push	{r7}
 8008192:	b087      	sub	sp, #28
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	607b      	str	r3, [r7, #4]
 800819a:	460b      	mov	r3, r1
 800819c:	817b      	strh	r3, [r7, #10]
 800819e:	4613      	mov	r3, r2
 80081a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80081a2:	897b      	ldrh	r3, [r7, #10]
 80081a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80081a8:	7a7b      	ldrb	r3, [r7, #9]
 80081aa:	041b      	lsls	r3, r3, #16
 80081ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80081b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	6a3b      	ldr	r3, [r7, #32]
 80081c8:	0d5b      	lsrs	r3, r3, #21
 80081ca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80081ce:	4b08      	ldr	r3, [pc, #32]	@ (80081f0 <I2C_TransferConfig+0x60>)
 80081d0:	430b      	orrs	r3, r1
 80081d2:	43db      	mvns	r3, r3
 80081d4:	ea02 0103 	and.w	r1, r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	430a      	orrs	r2, r1
 80081e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80081e2:	bf00      	nop
 80081e4:	371c      	adds	r7, #28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	03ff63ff 	.word	0x03ff63ff

080081f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b20      	cmp	r3, #32
 8008208:	d138      	bne.n	800827c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008210:	2b01      	cmp	r3, #1
 8008212:	d101      	bne.n	8008218 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008214:	2302      	movs	r3, #2
 8008216:	e032      	b.n	800827e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2224      	movs	r2, #36	@ 0x24
 8008224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0201 	bic.w	r2, r2, #1
 8008236:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008246:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6819      	ldr	r1, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	430a      	orrs	r2, r1
 8008256:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f042 0201 	orr.w	r2, r2, #1
 8008266:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2220      	movs	r2, #32
 800826c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	e000      	b.n	800827e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800827c:	2302      	movs	r3, #2
  }
}
 800827e:	4618      	mov	r0, r3
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800828a:	b480      	push	{r7}
 800828c:	b085      	sub	sp, #20
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b20      	cmp	r3, #32
 800829e:	d139      	bne.n	8008314 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d101      	bne.n	80082ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80082aa:	2302      	movs	r3, #2
 80082ac:	e033      	b.n	8008316 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2224      	movs	r2, #36	@ 0x24
 80082ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f022 0201 	bic.w	r2, r2, #1
 80082cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80082dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	021b      	lsls	r3, r3, #8
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0201 	orr.w	r2, r2, #1
 80082fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2220      	movs	r2, #32
 8008304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	e000      	b.n	8008316 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008314:	2302      	movs	r3, #2
  }
}
 8008316:	4618      	mov	r0, r3
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
	...

08008324 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008324:	b480      	push	{r7}
 8008326:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008328:	4b04      	ldr	r3, [pc, #16]	@ (800833c <HAL_PWREx_GetVoltageRange+0x18>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8008330:	4618      	mov	r0, r3
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	40007000 	.word	0x40007000

08008340 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800834e:	d130      	bne.n	80083b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008350:	4b23      	ldr	r3, [pc, #140]	@ (80083e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800835c:	d038      	beq.n	80083d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800835e:	4b20      	ldr	r3, [pc, #128]	@ (80083e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008366:	4a1e      	ldr	r2, [pc, #120]	@ (80083e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008368:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800836c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800836e:	4b1d      	ldr	r3, [pc, #116]	@ (80083e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2232      	movs	r2, #50	@ 0x32
 8008374:	fb02 f303 	mul.w	r3, r2, r3
 8008378:	4a1b      	ldr	r2, [pc, #108]	@ (80083e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800837a:	fba2 2303 	umull	r2, r3, r2, r3
 800837e:	0c9b      	lsrs	r3, r3, #18
 8008380:	3301      	adds	r3, #1
 8008382:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008384:	e002      	b.n	800838c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	3b01      	subs	r3, #1
 800838a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800838c:	4b14      	ldr	r3, [pc, #80]	@ (80083e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008398:	d102      	bne.n	80083a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1f2      	bne.n	8008386 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80083a0:	4b0f      	ldr	r3, [pc, #60]	@ (80083e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083ac:	d110      	bne.n	80083d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e00f      	b.n	80083d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80083b2:	4b0b      	ldr	r3, [pc, #44]	@ (80083e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80083ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083be:	d007      	beq.n	80083d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80083c0:	4b07      	ldr	r3, [pc, #28]	@ (80083e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80083c8:	4a05      	ldr	r2, [pc, #20]	@ (80083e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80083ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	40007000 	.word	0x40007000
 80083e4:	2000002c 	.word	0x2000002c
 80083e8:	431bde83 	.word	0x431bde83

080083ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b088      	sub	sp, #32
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d102      	bne.n	8008400 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	f000 bc08 	b.w	8008c10 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008400:	4b96      	ldr	r3, [pc, #600]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f003 030c 	and.w	r3, r3, #12
 8008408:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800840a:	4b94      	ldr	r3, [pc, #592]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f003 0303 	and.w	r3, r3, #3
 8008412:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0310 	and.w	r3, r3, #16
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 80e4 	beq.w	80085ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d007      	beq.n	8008438 <HAL_RCC_OscConfig+0x4c>
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	2b0c      	cmp	r3, #12
 800842c:	f040 808b 	bne.w	8008546 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2b01      	cmp	r3, #1
 8008434:	f040 8087 	bne.w	8008546 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008438:	4b88      	ldr	r3, [pc, #544]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 0302 	and.w	r3, r3, #2
 8008440:	2b00      	cmp	r3, #0
 8008442:	d005      	beq.n	8008450 <HAL_RCC_OscConfig+0x64>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d101      	bne.n	8008450 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	e3df      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a1a      	ldr	r2, [r3, #32]
 8008454:	4b81      	ldr	r3, [pc, #516]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0308 	and.w	r3, r3, #8
 800845c:	2b00      	cmp	r3, #0
 800845e:	d004      	beq.n	800846a <HAL_RCC_OscConfig+0x7e>
 8008460:	4b7e      	ldr	r3, [pc, #504]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008468:	e005      	b.n	8008476 <HAL_RCC_OscConfig+0x8a>
 800846a:	4b7c      	ldr	r3, [pc, #496]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 800846c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008470:	091b      	lsrs	r3, r3, #4
 8008472:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008476:	4293      	cmp	r3, r2
 8008478:	d223      	bcs.n	80084c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	4618      	mov	r0, r3
 8008480:	f000 fdc4 	bl	800900c <RCC_SetFlashLatencyFromMSIRange>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e3c0      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800848e:	4b73      	ldr	r3, [pc, #460]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a72      	ldr	r2, [pc, #456]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 8008494:	f043 0308 	orr.w	r3, r3, #8
 8008498:	6013      	str	r3, [r2, #0]
 800849a:	4b70      	ldr	r3, [pc, #448]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a1b      	ldr	r3, [r3, #32]
 80084a6:	496d      	ldr	r1, [pc, #436]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 80084a8:	4313      	orrs	r3, r2
 80084aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084ac:	4b6b      	ldr	r3, [pc, #428]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	69db      	ldr	r3, [r3, #28]
 80084b8:	021b      	lsls	r3, r3, #8
 80084ba:	4968      	ldr	r1, [pc, #416]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	604b      	str	r3, [r1, #4]
 80084c0:	e025      	b.n	800850e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80084c2:	4b66      	ldr	r3, [pc, #408]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a65      	ldr	r2, [pc, #404]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 80084c8:	f043 0308 	orr.w	r3, r3, #8
 80084cc:	6013      	str	r3, [r2, #0]
 80084ce:	4b63      	ldr	r3, [pc, #396]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a1b      	ldr	r3, [r3, #32]
 80084da:	4960      	ldr	r1, [pc, #384]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 80084dc:	4313      	orrs	r3, r2
 80084de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084e0:	4b5e      	ldr	r3, [pc, #376]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	69db      	ldr	r3, [r3, #28]
 80084ec:	021b      	lsls	r3, r3, #8
 80084ee:	495b      	ldr	r1, [pc, #364]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 80084f0:	4313      	orrs	r3, r2
 80084f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d109      	bne.n	800850e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 fd84 	bl	800900c <RCC_SetFlashLatencyFromMSIRange>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e380      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800850e:	f000 fc87 	bl	8008e20 <HAL_RCC_GetSysClockFreq>
 8008512:	4602      	mov	r2, r0
 8008514:	4b51      	ldr	r3, [pc, #324]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	091b      	lsrs	r3, r3, #4
 800851a:	f003 030f 	and.w	r3, r3, #15
 800851e:	4950      	ldr	r1, [pc, #320]	@ (8008660 <HAL_RCC_OscConfig+0x274>)
 8008520:	5ccb      	ldrb	r3, [r1, r3]
 8008522:	f003 031f 	and.w	r3, r3, #31
 8008526:	fa22 f303 	lsr.w	r3, r2, r3
 800852a:	4a4e      	ldr	r2, [pc, #312]	@ (8008664 <HAL_RCC_OscConfig+0x278>)
 800852c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800852e:	4b4e      	ldr	r3, [pc, #312]	@ (8008668 <HAL_RCC_OscConfig+0x27c>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4618      	mov	r0, r3
 8008534:	f7fa fee2 	bl	80032fc <HAL_InitTick>
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d052      	beq.n	80085e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008542:	7bfb      	ldrb	r3, [r7, #15]
 8008544:	e364      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d032      	beq.n	80085b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800854e:	4b43      	ldr	r3, [pc, #268]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a42      	ldr	r2, [pc, #264]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 8008554:	f043 0301 	orr.w	r3, r3, #1
 8008558:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800855a:	f7fc f8eb 	bl	8004734 <HAL_GetTick>
 800855e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008560:	e008      	b.n	8008574 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008562:	f7fc f8e7 	bl	8004734 <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	2b02      	cmp	r3, #2
 800856e:	d901      	bls.n	8008574 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e34d      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008574:	4b39      	ldr	r3, [pc, #228]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0302 	and.w	r3, r3, #2
 800857c:	2b00      	cmp	r3, #0
 800857e:	d0f0      	beq.n	8008562 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008580:	4b36      	ldr	r3, [pc, #216]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a35      	ldr	r2, [pc, #212]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 8008586:	f043 0308 	orr.w	r3, r3, #8
 800858a:	6013      	str	r3, [r2, #0]
 800858c:	4b33      	ldr	r3, [pc, #204]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a1b      	ldr	r3, [r3, #32]
 8008598:	4930      	ldr	r1, [pc, #192]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 800859a:	4313      	orrs	r3, r2
 800859c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800859e:	4b2f      	ldr	r3, [pc, #188]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	021b      	lsls	r3, r3, #8
 80085ac:	492b      	ldr	r1, [pc, #172]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 80085ae:	4313      	orrs	r3, r2
 80085b0:	604b      	str	r3, [r1, #4]
 80085b2:	e01a      	b.n	80085ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80085b4:	4b29      	ldr	r3, [pc, #164]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a28      	ldr	r2, [pc, #160]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 80085ba:	f023 0301 	bic.w	r3, r3, #1
 80085be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80085c0:	f7fc f8b8 	bl	8004734 <HAL_GetTick>
 80085c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80085c6:	e008      	b.n	80085da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80085c8:	f7fc f8b4 	bl	8004734 <HAL_GetTick>
 80085cc:	4602      	mov	r2, r0
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d901      	bls.n	80085da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e31a      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80085da:	4b20      	ldr	r3, [pc, #128]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1f0      	bne.n	80085c8 <HAL_RCC_OscConfig+0x1dc>
 80085e6:	e000      	b.n	80085ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80085e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d073      	beq.n	80086de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	2b08      	cmp	r3, #8
 80085fa:	d005      	beq.n	8008608 <HAL_RCC_OscConfig+0x21c>
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	2b0c      	cmp	r3, #12
 8008600:	d10e      	bne.n	8008620 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2b03      	cmp	r3, #3
 8008606:	d10b      	bne.n	8008620 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008608:	4b14      	ldr	r3, [pc, #80]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d063      	beq.n	80086dc <HAL_RCC_OscConfig+0x2f0>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d15f      	bne.n	80086dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	e2f7      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008628:	d106      	bne.n	8008638 <HAL_RCC_OscConfig+0x24c>
 800862a:	4b0c      	ldr	r3, [pc, #48]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a0b      	ldr	r2, [pc, #44]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 8008630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	e025      	b.n	8008684 <HAL_RCC_OscConfig+0x298>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008640:	d114      	bne.n	800866c <HAL_RCC_OscConfig+0x280>
 8008642:	4b06      	ldr	r3, [pc, #24]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a05      	ldr	r2, [pc, #20]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 8008648:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800864c:	6013      	str	r3, [r2, #0]
 800864e:	4b03      	ldr	r3, [pc, #12]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a02      	ldr	r2, [pc, #8]	@ (800865c <HAL_RCC_OscConfig+0x270>)
 8008654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008658:	6013      	str	r3, [r2, #0]
 800865a:	e013      	b.n	8008684 <HAL_RCC_OscConfig+0x298>
 800865c:	40021000 	.word	0x40021000
 8008660:	0800f6a0 	.word	0x0800f6a0
 8008664:	2000002c 	.word	0x2000002c
 8008668:	20000030 	.word	0x20000030
 800866c:	4ba0      	ldr	r3, [pc, #640]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a9f      	ldr	r2, [pc, #636]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 8008672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008676:	6013      	str	r3, [r2, #0]
 8008678:	4b9d      	ldr	r3, [pc, #628]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a9c      	ldr	r2, [pc, #624]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 800867e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d013      	beq.n	80086b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800868c:	f7fc f852 	bl	8004734 <HAL_GetTick>
 8008690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008692:	e008      	b.n	80086a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008694:	f7fc f84e 	bl	8004734 <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	2b64      	cmp	r3, #100	@ 0x64
 80086a0:	d901      	bls.n	80086a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	e2b4      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80086a6:	4b92      	ldr	r3, [pc, #584]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d0f0      	beq.n	8008694 <HAL_RCC_OscConfig+0x2a8>
 80086b2:	e014      	b.n	80086de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086b4:	f7fc f83e 	bl	8004734 <HAL_GetTick>
 80086b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80086ba:	e008      	b.n	80086ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086bc:	f7fc f83a 	bl	8004734 <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	2b64      	cmp	r3, #100	@ 0x64
 80086c8:	d901      	bls.n	80086ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e2a0      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80086ce:	4b88      	ldr	r3, [pc, #544]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1f0      	bne.n	80086bc <HAL_RCC_OscConfig+0x2d0>
 80086da:	e000      	b.n	80086de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0302 	and.w	r3, r3, #2
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d060      	beq.n	80087ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	d005      	beq.n	80086fc <HAL_RCC_OscConfig+0x310>
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	2b0c      	cmp	r3, #12
 80086f4:	d119      	bne.n	800872a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d116      	bne.n	800872a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086fc:	4b7c      	ldr	r3, [pc, #496]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008704:	2b00      	cmp	r3, #0
 8008706:	d005      	beq.n	8008714 <HAL_RCC_OscConfig+0x328>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d101      	bne.n	8008714 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e27d      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008714:	4b76      	ldr	r3, [pc, #472]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	061b      	lsls	r3, r3, #24
 8008722:	4973      	ldr	r1, [pc, #460]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 8008724:	4313      	orrs	r3, r2
 8008726:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008728:	e040      	b.n	80087ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d023      	beq.n	800877a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008732:	4b6f      	ldr	r3, [pc, #444]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a6e      	ldr	r2, [pc, #440]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 8008738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800873c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800873e:	f7fb fff9 	bl	8004734 <HAL_GetTick>
 8008742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008744:	e008      	b.n	8008758 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008746:	f7fb fff5 	bl	8004734 <HAL_GetTick>
 800874a:	4602      	mov	r2, r0
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	1ad3      	subs	r3, r2, r3
 8008750:	2b02      	cmp	r3, #2
 8008752:	d901      	bls.n	8008758 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e25b      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008758:	4b65      	ldr	r3, [pc, #404]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008760:	2b00      	cmp	r3, #0
 8008762:	d0f0      	beq.n	8008746 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008764:	4b62      	ldr	r3, [pc, #392]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	061b      	lsls	r3, r3, #24
 8008772:	495f      	ldr	r1, [pc, #380]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 8008774:	4313      	orrs	r3, r2
 8008776:	604b      	str	r3, [r1, #4]
 8008778:	e018      	b.n	80087ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800877a:	4b5d      	ldr	r3, [pc, #372]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a5c      	ldr	r2, [pc, #368]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 8008780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008786:	f7fb ffd5 	bl	8004734 <HAL_GetTick>
 800878a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800878c:	e008      	b.n	80087a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800878e:	f7fb ffd1 	bl	8004734 <HAL_GetTick>
 8008792:	4602      	mov	r2, r0
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	2b02      	cmp	r3, #2
 800879a:	d901      	bls.n	80087a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e237      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80087a0:	4b53      	ldr	r3, [pc, #332]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1f0      	bne.n	800878e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0308 	and.w	r3, r3, #8
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d03c      	beq.n	8008832 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	695b      	ldr	r3, [r3, #20]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d01c      	beq.n	80087fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087c0:	4b4b      	ldr	r3, [pc, #300]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 80087c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087c6:	4a4a      	ldr	r2, [pc, #296]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 80087c8:	f043 0301 	orr.w	r3, r3, #1
 80087cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087d0:	f7fb ffb0 	bl	8004734 <HAL_GetTick>
 80087d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80087d6:	e008      	b.n	80087ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087d8:	f7fb ffac 	bl	8004734 <HAL_GetTick>
 80087dc:	4602      	mov	r2, r0
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d901      	bls.n	80087ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e212      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80087ea:	4b41      	ldr	r3, [pc, #260]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 80087ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d0ef      	beq.n	80087d8 <HAL_RCC_OscConfig+0x3ec>
 80087f8:	e01b      	b.n	8008832 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087fa:	4b3d      	ldr	r3, [pc, #244]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 80087fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008800:	4a3b      	ldr	r2, [pc, #236]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 8008802:	f023 0301 	bic.w	r3, r3, #1
 8008806:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800880a:	f7fb ff93 	bl	8004734 <HAL_GetTick>
 800880e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008810:	e008      	b.n	8008824 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008812:	f7fb ff8f 	bl	8004734 <HAL_GetTick>
 8008816:	4602      	mov	r2, r0
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	2b02      	cmp	r3, #2
 800881e:	d901      	bls.n	8008824 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e1f5      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008824:	4b32      	ldr	r3, [pc, #200]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 8008826:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800882a:	f003 0302 	and.w	r3, r3, #2
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1ef      	bne.n	8008812 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0304 	and.w	r3, r3, #4
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 80a6 	beq.w	800898c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008840:	2300      	movs	r3, #0
 8008842:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008844:	4b2a      	ldr	r3, [pc, #168]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 8008846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10d      	bne.n	800886c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008850:	4b27      	ldr	r3, [pc, #156]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 8008852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008854:	4a26      	ldr	r2, [pc, #152]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 8008856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800885a:	6593      	str	r3, [r2, #88]	@ 0x58
 800885c:	4b24      	ldr	r3, [pc, #144]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 800885e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008864:	60bb      	str	r3, [r7, #8]
 8008866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008868:	2301      	movs	r3, #1
 800886a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800886c:	4b21      	ldr	r3, [pc, #132]	@ (80088f4 <HAL_RCC_OscConfig+0x508>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008874:	2b00      	cmp	r3, #0
 8008876:	d118      	bne.n	80088aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008878:	4b1e      	ldr	r3, [pc, #120]	@ (80088f4 <HAL_RCC_OscConfig+0x508>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a1d      	ldr	r2, [pc, #116]	@ (80088f4 <HAL_RCC_OscConfig+0x508>)
 800887e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008882:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008884:	f7fb ff56 	bl	8004734 <HAL_GetTick>
 8008888:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800888a:	e008      	b.n	800889e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800888c:	f7fb ff52 	bl	8004734 <HAL_GetTick>
 8008890:	4602      	mov	r2, r0
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	2b02      	cmp	r3, #2
 8008898:	d901      	bls.n	800889e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e1b8      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800889e:	4b15      	ldr	r3, [pc, #84]	@ (80088f4 <HAL_RCC_OscConfig+0x508>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d0f0      	beq.n	800888c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d108      	bne.n	80088c4 <HAL_RCC_OscConfig+0x4d8>
 80088b2:	4b0f      	ldr	r3, [pc, #60]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 80088b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088b8:	4a0d      	ldr	r2, [pc, #52]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 80088ba:	f043 0301 	orr.w	r3, r3, #1
 80088be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80088c2:	e029      	b.n	8008918 <HAL_RCC_OscConfig+0x52c>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	2b05      	cmp	r3, #5
 80088ca:	d115      	bne.n	80088f8 <HAL_RCC_OscConfig+0x50c>
 80088cc:	4b08      	ldr	r3, [pc, #32]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 80088ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088d2:	4a07      	ldr	r2, [pc, #28]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 80088d4:	f043 0304 	orr.w	r3, r3, #4
 80088d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80088dc:	4b04      	ldr	r3, [pc, #16]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 80088de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088e2:	4a03      	ldr	r2, [pc, #12]	@ (80088f0 <HAL_RCC_OscConfig+0x504>)
 80088e4:	f043 0301 	orr.w	r3, r3, #1
 80088e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80088ec:	e014      	b.n	8008918 <HAL_RCC_OscConfig+0x52c>
 80088ee:	bf00      	nop
 80088f0:	40021000 	.word	0x40021000
 80088f4:	40007000 	.word	0x40007000
 80088f8:	4b9d      	ldr	r3, [pc, #628]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 80088fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088fe:	4a9c      	ldr	r2, [pc, #624]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 8008900:	f023 0301 	bic.w	r3, r3, #1
 8008904:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008908:	4b99      	ldr	r3, [pc, #612]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 800890a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800890e:	4a98      	ldr	r2, [pc, #608]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 8008910:	f023 0304 	bic.w	r3, r3, #4
 8008914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d016      	beq.n	800894e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008920:	f7fb ff08 	bl	8004734 <HAL_GetTick>
 8008924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008926:	e00a      	b.n	800893e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008928:	f7fb ff04 	bl	8004734 <HAL_GetTick>
 800892c:	4602      	mov	r2, r0
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008936:	4293      	cmp	r3, r2
 8008938:	d901      	bls.n	800893e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	e168      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800893e:	4b8c      	ldr	r3, [pc, #560]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 8008940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008944:	f003 0302 	and.w	r3, r3, #2
 8008948:	2b00      	cmp	r3, #0
 800894a:	d0ed      	beq.n	8008928 <HAL_RCC_OscConfig+0x53c>
 800894c:	e015      	b.n	800897a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800894e:	f7fb fef1 	bl	8004734 <HAL_GetTick>
 8008952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008954:	e00a      	b.n	800896c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008956:	f7fb feed 	bl	8004734 <HAL_GetTick>
 800895a:	4602      	mov	r2, r0
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008964:	4293      	cmp	r3, r2
 8008966:	d901      	bls.n	800896c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	e151      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800896c:	4b80      	ldr	r3, [pc, #512]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 800896e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008972:	f003 0302 	and.w	r3, r3, #2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1ed      	bne.n	8008956 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800897a:	7ffb      	ldrb	r3, [r7, #31]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d105      	bne.n	800898c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008980:	4b7b      	ldr	r3, [pc, #492]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 8008982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008984:	4a7a      	ldr	r2, [pc, #488]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 8008986:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800898a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 0320 	and.w	r3, r3, #32
 8008994:	2b00      	cmp	r3, #0
 8008996:	d03c      	beq.n	8008a12 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800899c:	2b00      	cmp	r3, #0
 800899e:	d01c      	beq.n	80089da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80089a0:	4b73      	ldr	r3, [pc, #460]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 80089a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089a6:	4a72      	ldr	r2, [pc, #456]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 80089a8:	f043 0301 	orr.w	r3, r3, #1
 80089ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089b0:	f7fb fec0 	bl	8004734 <HAL_GetTick>
 80089b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80089b6:	e008      	b.n	80089ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089b8:	f7fb febc 	bl	8004734 <HAL_GetTick>
 80089bc:	4602      	mov	r2, r0
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d901      	bls.n	80089ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e122      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80089ca:	4b69      	ldr	r3, [pc, #420]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 80089cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d0ef      	beq.n	80089b8 <HAL_RCC_OscConfig+0x5cc>
 80089d8:	e01b      	b.n	8008a12 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80089da:	4b65      	ldr	r3, [pc, #404]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 80089dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089e0:	4a63      	ldr	r2, [pc, #396]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 80089e2:	f023 0301 	bic.w	r3, r3, #1
 80089e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089ea:	f7fb fea3 	bl	8004734 <HAL_GetTick>
 80089ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80089f0:	e008      	b.n	8008a04 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089f2:	f7fb fe9f 	bl	8004734 <HAL_GetTick>
 80089f6:	4602      	mov	r2, r0
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d901      	bls.n	8008a04 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008a00:	2303      	movs	r3, #3
 8008a02:	e105      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008a04:	4b5a      	ldr	r3, [pc, #360]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 8008a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a0a:	f003 0302 	and.w	r3, r3, #2
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1ef      	bne.n	80089f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 80f9 	beq.w	8008c0e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	f040 80cf 	bne.w	8008bc4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008a26:	4b52      	ldr	r3, [pc, #328]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f003 0203 	and.w	r2, r3, #3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d12c      	bne.n	8008a94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a44:	3b01      	subs	r3, #1
 8008a46:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d123      	bne.n	8008a94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a56:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d11b      	bne.n	8008a94 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a66:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d113      	bne.n	8008a94 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a76:	085b      	lsrs	r3, r3, #1
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d109      	bne.n	8008a94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a8a:	085b      	lsrs	r3, r3, #1
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d071      	beq.n	8008b78 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	2b0c      	cmp	r3, #12
 8008a98:	d068      	beq.n	8008b6c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008a9a:	4b35      	ldr	r3, [pc, #212]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d105      	bne.n	8008ab2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008aa6:	4b32      	ldr	r3, [pc, #200]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e0ac      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008ab6:	4b2e      	ldr	r3, [pc, #184]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a2d      	ldr	r2, [pc, #180]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 8008abc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ac0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008ac2:	f7fb fe37 	bl	8004734 <HAL_GetTick>
 8008ac6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ac8:	e008      	b.n	8008adc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aca:	f7fb fe33 	bl	8004734 <HAL_GetTick>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d901      	bls.n	8008adc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e099      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008adc:	4b24      	ldr	r3, [pc, #144]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1f0      	bne.n	8008aca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ae8:	4b21      	ldr	r3, [pc, #132]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 8008aea:	68da      	ldr	r2, [r3, #12]
 8008aec:	4b21      	ldr	r3, [pc, #132]	@ (8008b74 <HAL_RCC_OscConfig+0x788>)
 8008aee:	4013      	ands	r3, r2
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008af8:	3a01      	subs	r2, #1
 8008afa:	0112      	lsls	r2, r2, #4
 8008afc:	4311      	orrs	r1, r2
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008b02:	0212      	lsls	r2, r2, #8
 8008b04:	4311      	orrs	r1, r2
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008b0a:	0852      	lsrs	r2, r2, #1
 8008b0c:	3a01      	subs	r2, #1
 8008b0e:	0552      	lsls	r2, r2, #21
 8008b10:	4311      	orrs	r1, r2
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008b16:	0852      	lsrs	r2, r2, #1
 8008b18:	3a01      	subs	r2, #1
 8008b1a:	0652      	lsls	r2, r2, #25
 8008b1c:	4311      	orrs	r1, r2
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008b22:	06d2      	lsls	r2, r2, #27
 8008b24:	430a      	orrs	r2, r1
 8008b26:	4912      	ldr	r1, [pc, #72]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008b2c:	4b10      	ldr	r3, [pc, #64]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a0f      	ldr	r2, [pc, #60]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 8008b32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008b38:	4b0d      	ldr	r3, [pc, #52]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 8008b3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008b44:	f7fb fdf6 	bl	8004734 <HAL_GetTick>
 8008b48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b4a:	e008      	b.n	8008b5e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b4c:	f7fb fdf2 	bl	8004734 <HAL_GetTick>
 8008b50:	4602      	mov	r2, r0
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d901      	bls.n	8008b5e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e058      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b5e:	4b04      	ldr	r3, [pc, #16]	@ (8008b70 <HAL_RCC_OscConfig+0x784>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d0f0      	beq.n	8008b4c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008b6a:	e050      	b.n	8008c0e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e04f      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
 8008b70:	40021000 	.word	0x40021000
 8008b74:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b78:	4b27      	ldr	r3, [pc, #156]	@ (8008c18 <HAL_RCC_OscConfig+0x82c>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d144      	bne.n	8008c0e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008b84:	4b24      	ldr	r3, [pc, #144]	@ (8008c18 <HAL_RCC_OscConfig+0x82c>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a23      	ldr	r2, [pc, #140]	@ (8008c18 <HAL_RCC_OscConfig+0x82c>)
 8008b8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008b90:	4b21      	ldr	r3, [pc, #132]	@ (8008c18 <HAL_RCC_OscConfig+0x82c>)
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	4a20      	ldr	r2, [pc, #128]	@ (8008c18 <HAL_RCC_OscConfig+0x82c>)
 8008b96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008b9c:	f7fb fdca 	bl	8004734 <HAL_GetTick>
 8008ba0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ba2:	e008      	b.n	8008bb6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ba4:	f7fb fdc6 	bl	8004734 <HAL_GetTick>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d901      	bls.n	8008bb6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e02c      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bb6:	4b18      	ldr	r3, [pc, #96]	@ (8008c18 <HAL_RCC_OscConfig+0x82c>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d0f0      	beq.n	8008ba4 <HAL_RCC_OscConfig+0x7b8>
 8008bc2:	e024      	b.n	8008c0e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	2b0c      	cmp	r3, #12
 8008bc8:	d01f      	beq.n	8008c0a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bca:	4b13      	ldr	r3, [pc, #76]	@ (8008c18 <HAL_RCC_OscConfig+0x82c>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a12      	ldr	r2, [pc, #72]	@ (8008c18 <HAL_RCC_OscConfig+0x82c>)
 8008bd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bd6:	f7fb fdad 	bl	8004734 <HAL_GetTick>
 8008bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bdc:	e008      	b.n	8008bf0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bde:	f7fb fda9 	bl	8004734 <HAL_GetTick>
 8008be2:	4602      	mov	r2, r0
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	1ad3      	subs	r3, r2, r3
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d901      	bls.n	8008bf0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e00f      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bf0:	4b09      	ldr	r3, [pc, #36]	@ (8008c18 <HAL_RCC_OscConfig+0x82c>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1f0      	bne.n	8008bde <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008bfc:	4b06      	ldr	r3, [pc, #24]	@ (8008c18 <HAL_RCC_OscConfig+0x82c>)
 8008bfe:	68da      	ldr	r2, [r3, #12]
 8008c00:	4905      	ldr	r1, [pc, #20]	@ (8008c18 <HAL_RCC_OscConfig+0x82c>)
 8008c02:	4b06      	ldr	r3, [pc, #24]	@ (8008c1c <HAL_RCC_OscConfig+0x830>)
 8008c04:	4013      	ands	r3, r2
 8008c06:	60cb      	str	r3, [r1, #12]
 8008c08:	e001      	b.n	8008c0e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e000      	b.n	8008c10 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3720      	adds	r7, #32
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	40021000 	.word	0x40021000
 8008c1c:	feeefffc 	.word	0xfeeefffc

08008c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d101      	bne.n	8008c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e0e7      	b.n	8008e04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c34:	4b75      	ldr	r3, [pc, #468]	@ (8008e0c <HAL_RCC_ClockConfig+0x1ec>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d910      	bls.n	8008c64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c42:	4b72      	ldr	r3, [pc, #456]	@ (8008e0c <HAL_RCC_ClockConfig+0x1ec>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f023 0207 	bic.w	r2, r3, #7
 8008c4a:	4970      	ldr	r1, [pc, #448]	@ (8008e0c <HAL_RCC_ClockConfig+0x1ec>)
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c52:	4b6e      	ldr	r3, [pc, #440]	@ (8008e0c <HAL_RCC_ClockConfig+0x1ec>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 0307 	and.w	r3, r3, #7
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d001      	beq.n	8008c64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e0cf      	b.n	8008e04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0302 	and.w	r3, r3, #2
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d010      	beq.n	8008c92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	689a      	ldr	r2, [r3, #8]
 8008c74:	4b66      	ldr	r3, [pc, #408]	@ (8008e10 <HAL_RCC_ClockConfig+0x1f0>)
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d908      	bls.n	8008c92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c80:	4b63      	ldr	r3, [pc, #396]	@ (8008e10 <HAL_RCC_ClockConfig+0x1f0>)
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	4960      	ldr	r1, [pc, #384]	@ (8008e10 <HAL_RCC_ClockConfig+0x1f0>)
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d04c      	beq.n	8008d38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d107      	bne.n	8008cb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ca6:	4b5a      	ldr	r3, [pc, #360]	@ (8008e10 <HAL_RCC_ClockConfig+0x1f0>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d121      	bne.n	8008cf6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e0a6      	b.n	8008e04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d107      	bne.n	8008cce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008cbe:	4b54      	ldr	r3, [pc, #336]	@ (8008e10 <HAL_RCC_ClockConfig+0x1f0>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d115      	bne.n	8008cf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e09a      	b.n	8008e04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d107      	bne.n	8008ce6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008cd6:	4b4e      	ldr	r3, [pc, #312]	@ (8008e10 <HAL_RCC_ClockConfig+0x1f0>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d109      	bne.n	8008cf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e08e      	b.n	8008e04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ce6:	4b4a      	ldr	r3, [pc, #296]	@ (8008e10 <HAL_RCC_ClockConfig+0x1f0>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e086      	b.n	8008e04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008cf6:	4b46      	ldr	r3, [pc, #280]	@ (8008e10 <HAL_RCC_ClockConfig+0x1f0>)
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	f023 0203 	bic.w	r2, r3, #3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	4943      	ldr	r1, [pc, #268]	@ (8008e10 <HAL_RCC_ClockConfig+0x1f0>)
 8008d04:	4313      	orrs	r3, r2
 8008d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d08:	f7fb fd14 	bl	8004734 <HAL_GetTick>
 8008d0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d0e:	e00a      	b.n	8008d26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d10:	f7fb fd10 	bl	8004734 <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d901      	bls.n	8008d26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e06e      	b.n	8008e04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d26:	4b3a      	ldr	r3, [pc, #232]	@ (8008e10 <HAL_RCC_ClockConfig+0x1f0>)
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f003 020c 	and.w	r2, r3, #12
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d1eb      	bne.n	8008d10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d010      	beq.n	8008d66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689a      	ldr	r2, [r3, #8]
 8008d48:	4b31      	ldr	r3, [pc, #196]	@ (8008e10 <HAL_RCC_ClockConfig+0x1f0>)
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d208      	bcs.n	8008d66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d54:	4b2e      	ldr	r3, [pc, #184]	@ (8008e10 <HAL_RCC_ClockConfig+0x1f0>)
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	492b      	ldr	r1, [pc, #172]	@ (8008e10 <HAL_RCC_ClockConfig+0x1f0>)
 8008d62:	4313      	orrs	r3, r2
 8008d64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d66:	4b29      	ldr	r3, [pc, #164]	@ (8008e0c <HAL_RCC_ClockConfig+0x1ec>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 0307 	and.w	r3, r3, #7
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d210      	bcs.n	8008d96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d74:	4b25      	ldr	r3, [pc, #148]	@ (8008e0c <HAL_RCC_ClockConfig+0x1ec>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f023 0207 	bic.w	r2, r3, #7
 8008d7c:	4923      	ldr	r1, [pc, #140]	@ (8008e0c <HAL_RCC_ClockConfig+0x1ec>)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d84:	4b21      	ldr	r3, [pc, #132]	@ (8008e0c <HAL_RCC_ClockConfig+0x1ec>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 0307 	and.w	r3, r3, #7
 8008d8c:	683a      	ldr	r2, [r7, #0]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d001      	beq.n	8008d96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e036      	b.n	8008e04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0304 	and.w	r3, r3, #4
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d008      	beq.n	8008db4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008da2:	4b1b      	ldr	r3, [pc, #108]	@ (8008e10 <HAL_RCC_ClockConfig+0x1f0>)
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	4918      	ldr	r1, [pc, #96]	@ (8008e10 <HAL_RCC_ClockConfig+0x1f0>)
 8008db0:	4313      	orrs	r3, r2
 8008db2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 0308 	and.w	r3, r3, #8
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d009      	beq.n	8008dd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008dc0:	4b13      	ldr	r3, [pc, #76]	@ (8008e10 <HAL_RCC_ClockConfig+0x1f0>)
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	00db      	lsls	r3, r3, #3
 8008dce:	4910      	ldr	r1, [pc, #64]	@ (8008e10 <HAL_RCC_ClockConfig+0x1f0>)
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008dd4:	f000 f824 	bl	8008e20 <HAL_RCC_GetSysClockFreq>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	4b0d      	ldr	r3, [pc, #52]	@ (8008e10 <HAL_RCC_ClockConfig+0x1f0>)
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	091b      	lsrs	r3, r3, #4
 8008de0:	f003 030f 	and.w	r3, r3, #15
 8008de4:	490b      	ldr	r1, [pc, #44]	@ (8008e14 <HAL_RCC_ClockConfig+0x1f4>)
 8008de6:	5ccb      	ldrb	r3, [r1, r3]
 8008de8:	f003 031f 	and.w	r3, r3, #31
 8008dec:	fa22 f303 	lsr.w	r3, r2, r3
 8008df0:	4a09      	ldr	r2, [pc, #36]	@ (8008e18 <HAL_RCC_ClockConfig+0x1f8>)
 8008df2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008df4:	4b09      	ldr	r3, [pc, #36]	@ (8008e1c <HAL_RCC_ClockConfig+0x1fc>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fa fa7f 	bl	80032fc <HAL_InitTick>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	72fb      	strb	r3, [r7, #11]

  return status;
 8008e02:	7afb      	ldrb	r3, [r7, #11]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	40022000 	.word	0x40022000
 8008e10:	40021000 	.word	0x40021000
 8008e14:	0800f6a0 	.word	0x0800f6a0
 8008e18:	2000002c 	.word	0x2000002c
 8008e1c:	20000030 	.word	0x20000030

08008e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b089      	sub	sp, #36	@ 0x24
 8008e24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008e26:	2300      	movs	r3, #0
 8008e28:	61fb      	str	r3, [r7, #28]
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e2e:	4b3e      	ldr	r3, [pc, #248]	@ (8008f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	f003 030c 	and.w	r3, r3, #12
 8008e36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008e38:	4b3b      	ldr	r3, [pc, #236]	@ (8008f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	f003 0303 	and.w	r3, r3, #3
 8008e40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d005      	beq.n	8008e54 <HAL_RCC_GetSysClockFreq+0x34>
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	2b0c      	cmp	r3, #12
 8008e4c:	d121      	bne.n	8008e92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d11e      	bne.n	8008e92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008e54:	4b34      	ldr	r3, [pc, #208]	@ (8008f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 0308 	and.w	r3, r3, #8
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d107      	bne.n	8008e70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008e60:	4b31      	ldr	r3, [pc, #196]	@ (8008f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e66:	0a1b      	lsrs	r3, r3, #8
 8008e68:	f003 030f 	and.w	r3, r3, #15
 8008e6c:	61fb      	str	r3, [r7, #28]
 8008e6e:	e005      	b.n	8008e7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008e70:	4b2d      	ldr	r3, [pc, #180]	@ (8008f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	091b      	lsrs	r3, r3, #4
 8008e76:	f003 030f 	and.w	r3, r3, #15
 8008e7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8008f2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10d      	bne.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008e90:	e00a      	b.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	2b04      	cmp	r3, #4
 8008e96:	d102      	bne.n	8008e9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008e98:	4b25      	ldr	r3, [pc, #148]	@ (8008f30 <HAL_RCC_GetSysClockFreq+0x110>)
 8008e9a:	61bb      	str	r3, [r7, #24]
 8008e9c:	e004      	b.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	2b08      	cmp	r3, #8
 8008ea2:	d101      	bne.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008ea4:	4b23      	ldr	r3, [pc, #140]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0x114>)
 8008ea6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	2b0c      	cmp	r3, #12
 8008eac:	d134      	bne.n	8008f18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008eae:	4b1e      	ldr	r3, [pc, #120]	@ (8008f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	f003 0303 	and.w	r3, r3, #3
 8008eb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d003      	beq.n	8008ec6 <HAL_RCC_GetSysClockFreq+0xa6>
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d003      	beq.n	8008ecc <HAL_RCC_GetSysClockFreq+0xac>
 8008ec4:	e005      	b.n	8008ed2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8008f30 <HAL_RCC_GetSysClockFreq+0x110>)
 8008ec8:	617b      	str	r3, [r7, #20]
      break;
 8008eca:	e005      	b.n	8008ed8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008ecc:	4b19      	ldr	r3, [pc, #100]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0x114>)
 8008ece:	617b      	str	r3, [r7, #20]
      break;
 8008ed0:	e002      	b.n	8008ed8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	617b      	str	r3, [r7, #20]
      break;
 8008ed6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008ed8:	4b13      	ldr	r3, [pc, #76]	@ (8008f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	091b      	lsrs	r3, r3, #4
 8008ede:	f003 0307 	and.w	r3, r3, #7
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008ee6:	4b10      	ldr	r3, [pc, #64]	@ (8008f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	0a1b      	lsrs	r3, r3, #8
 8008eec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	fb03 f202 	mul.w	r2, r3, r2
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008efc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008efe:	4b0a      	ldr	r3, [pc, #40]	@ (8008f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	0e5b      	lsrs	r3, r3, #25
 8008f04:	f003 0303 	and.w	r3, r3, #3
 8008f08:	3301      	adds	r3, #1
 8008f0a:	005b      	lsls	r3, r3, #1
 8008f0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008f18:	69bb      	ldr	r3, [r7, #24]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3724      	adds	r7, #36	@ 0x24
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	40021000 	.word	0x40021000
 8008f2c:	0800f6b8 	.word	0x0800f6b8
 8008f30:	00f42400 	.word	0x00f42400
 8008f34:	007a1200 	.word	0x007a1200

08008f38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f3c:	4b03      	ldr	r3, [pc, #12]	@ (8008f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	2000002c 	.word	0x2000002c

08008f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008f54:	f7ff fff0 	bl	8008f38 <HAL_RCC_GetHCLKFreq>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	4b06      	ldr	r3, [pc, #24]	@ (8008f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	0a1b      	lsrs	r3, r3, #8
 8008f60:	f003 0307 	and.w	r3, r3, #7
 8008f64:	4904      	ldr	r1, [pc, #16]	@ (8008f78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f66:	5ccb      	ldrb	r3, [r1, r3]
 8008f68:	f003 031f 	and.w	r3, r3, #31
 8008f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	40021000 	.word	0x40021000
 8008f78:	0800f6b0 	.word	0x0800f6b0

08008f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008f80:	f7ff ffda 	bl	8008f38 <HAL_RCC_GetHCLKFreq>
 8008f84:	4602      	mov	r2, r0
 8008f86:	4b06      	ldr	r3, [pc, #24]	@ (8008fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	0adb      	lsrs	r3, r3, #11
 8008f8c:	f003 0307 	and.w	r3, r3, #7
 8008f90:	4904      	ldr	r1, [pc, #16]	@ (8008fa4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008f92:	5ccb      	ldrb	r3, [r1, r3]
 8008f94:	f003 031f 	and.w	r3, r3, #31
 8008f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	40021000 	.word	0x40021000
 8008fa4:	0800f6b0 	.word	0x0800f6b0

08008fa8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	220f      	movs	r2, #15
 8008fb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008fb8:	4b12      	ldr	r3, [pc, #72]	@ (8009004 <HAL_RCC_GetClockConfig+0x5c>)
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	f003 0203 	and.w	r2, r3, #3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8008fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8009004 <HAL_RCC_GetClockConfig+0x5c>)
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8009004 <HAL_RCC_GetClockConfig+0x5c>)
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008fdc:	4b09      	ldr	r3, [pc, #36]	@ (8009004 <HAL_RCC_GetClockConfig+0x5c>)
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	08db      	lsrs	r3, r3, #3
 8008fe2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008fea:	4b07      	ldr	r3, [pc, #28]	@ (8009008 <HAL_RCC_GetClockConfig+0x60>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 0207 	and.w	r2, r3, #7
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	601a      	str	r2, [r3, #0]
}
 8008ff6:	bf00      	nop
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	40021000 	.word	0x40021000
 8009008:	40022000 	.word	0x40022000

0800900c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b086      	sub	sp, #24
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009014:	2300      	movs	r3, #0
 8009016:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009018:	4b2a      	ldr	r3, [pc, #168]	@ (80090c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800901a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800901c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009020:	2b00      	cmp	r3, #0
 8009022:	d003      	beq.n	800902c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009024:	f7ff f97e 	bl	8008324 <HAL_PWREx_GetVoltageRange>
 8009028:	6178      	str	r0, [r7, #20]
 800902a:	e014      	b.n	8009056 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800902c:	4b25      	ldr	r3, [pc, #148]	@ (80090c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800902e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009030:	4a24      	ldr	r2, [pc, #144]	@ (80090c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009036:	6593      	str	r3, [r2, #88]	@ 0x58
 8009038:	4b22      	ldr	r3, [pc, #136]	@ (80090c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800903a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800903c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009040:	60fb      	str	r3, [r7, #12]
 8009042:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009044:	f7ff f96e 	bl	8008324 <HAL_PWREx_GetVoltageRange>
 8009048:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800904a:	4b1e      	ldr	r3, [pc, #120]	@ (80090c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800904c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800904e:	4a1d      	ldr	r2, [pc, #116]	@ (80090c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009050:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009054:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800905c:	d10b      	bne.n	8009076 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b80      	cmp	r3, #128	@ 0x80
 8009062:	d919      	bls.n	8009098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2ba0      	cmp	r3, #160	@ 0xa0
 8009068:	d902      	bls.n	8009070 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800906a:	2302      	movs	r3, #2
 800906c:	613b      	str	r3, [r7, #16]
 800906e:	e013      	b.n	8009098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009070:	2301      	movs	r3, #1
 8009072:	613b      	str	r3, [r7, #16]
 8009074:	e010      	b.n	8009098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2b80      	cmp	r3, #128	@ 0x80
 800907a:	d902      	bls.n	8009082 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800907c:	2303      	movs	r3, #3
 800907e:	613b      	str	r3, [r7, #16]
 8009080:	e00a      	b.n	8009098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b80      	cmp	r3, #128	@ 0x80
 8009086:	d102      	bne.n	800908e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009088:	2302      	movs	r3, #2
 800908a:	613b      	str	r3, [r7, #16]
 800908c:	e004      	b.n	8009098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2b70      	cmp	r3, #112	@ 0x70
 8009092:	d101      	bne.n	8009098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009094:	2301      	movs	r3, #1
 8009096:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009098:	4b0b      	ldr	r3, [pc, #44]	@ (80090c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f023 0207 	bic.w	r2, r3, #7
 80090a0:	4909      	ldr	r1, [pc, #36]	@ (80090c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80090a8:	4b07      	ldr	r3, [pc, #28]	@ (80090c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 0307 	and.w	r3, r3, #7
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d001      	beq.n	80090ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e000      	b.n	80090bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	40021000 	.word	0x40021000
 80090c8:	40022000 	.word	0x40022000

080090cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80090d4:	2300      	movs	r3, #0
 80090d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80090d8:	2300      	movs	r3, #0
 80090da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d041      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80090f0:	d02a      	beq.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80090f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80090f6:	d824      	bhi.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80090f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80090fc:	d008      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80090fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009102:	d81e      	bhi.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00a      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009108:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800910c:	d010      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800910e:	e018      	b.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009110:	4b86      	ldr	r3, [pc, #536]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	4a85      	ldr	r2, [pc, #532]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800911a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800911c:	e015      	b.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	3304      	adds	r3, #4
 8009122:	2100      	movs	r1, #0
 8009124:	4618      	mov	r0, r3
 8009126:	f000 facd 	bl	80096c4 <RCCEx_PLLSAI1_Config>
 800912a:	4603      	mov	r3, r0
 800912c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800912e:	e00c      	b.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	3320      	adds	r3, #32
 8009134:	2100      	movs	r1, #0
 8009136:	4618      	mov	r0, r3
 8009138:	f000 fbb6 	bl	80098a8 <RCCEx_PLLSAI2_Config>
 800913c:	4603      	mov	r3, r0
 800913e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009140:	e003      	b.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	74fb      	strb	r3, [r7, #19]
      break;
 8009146:	e000      	b.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800914a:	7cfb      	ldrb	r3, [r7, #19]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10b      	bne.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009150:	4b76      	ldr	r3, [pc, #472]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009156:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800915e:	4973      	ldr	r1, [pc, #460]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009160:	4313      	orrs	r3, r2
 8009162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8009166:	e001      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009168:	7cfb      	ldrb	r3, [r7, #19]
 800916a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d041      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800917c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009180:	d02a      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8009182:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009186:	d824      	bhi.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009188:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800918c:	d008      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800918e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009192:	d81e      	bhi.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00a      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009198:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800919c:	d010      	beq.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800919e:	e018      	b.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80091a0:	4b62      	ldr	r3, [pc, #392]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	4a61      	ldr	r2, [pc, #388]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80091ac:	e015      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	3304      	adds	r3, #4
 80091b2:	2100      	movs	r1, #0
 80091b4:	4618      	mov	r0, r3
 80091b6:	f000 fa85 	bl	80096c4 <RCCEx_PLLSAI1_Config>
 80091ba:	4603      	mov	r3, r0
 80091bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80091be:	e00c      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3320      	adds	r3, #32
 80091c4:	2100      	movs	r1, #0
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 fb6e 	bl	80098a8 <RCCEx_PLLSAI2_Config>
 80091cc:	4603      	mov	r3, r0
 80091ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80091d0:	e003      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	74fb      	strb	r3, [r7, #19]
      break;
 80091d6:	e000      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80091d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091da:	7cfb      	ldrb	r3, [r7, #19]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10b      	bne.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80091e0:	4b52      	ldr	r3, [pc, #328]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091ee:	494f      	ldr	r1, [pc, #316]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091f0:	4313      	orrs	r3, r2
 80091f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80091f6:	e001      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091f8:	7cfb      	ldrb	r3, [r7, #19]
 80091fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009204:	2b00      	cmp	r3, #0
 8009206:	f000 80a0 	beq.w	800934a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800920a:	2300      	movs	r3, #0
 800920c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800920e:	4b47      	ldr	r3, [pc, #284]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009216:	2b00      	cmp	r3, #0
 8009218:	d101      	bne.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800921a:	2301      	movs	r3, #1
 800921c:	e000      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800921e:	2300      	movs	r3, #0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00d      	beq.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009224:	4b41      	ldr	r3, [pc, #260]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009228:	4a40      	ldr	r2, [pc, #256]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800922a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800922e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009230:	4b3e      	ldr	r3, [pc, #248]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009234:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009238:	60bb      	str	r3, [r7, #8]
 800923a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800923c:	2301      	movs	r3, #1
 800923e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009240:	4b3b      	ldr	r3, [pc, #236]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a3a      	ldr	r2, [pc, #232]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009246:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800924a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800924c:	f7fb fa72 	bl	8004734 <HAL_GetTick>
 8009250:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009252:	e009      	b.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009254:	f7fb fa6e 	bl	8004734 <HAL_GetTick>
 8009258:	4602      	mov	r2, r0
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	2b02      	cmp	r3, #2
 8009260:	d902      	bls.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8009262:	2303      	movs	r3, #3
 8009264:	74fb      	strb	r3, [r7, #19]
        break;
 8009266:	e005      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009268:	4b31      	ldr	r3, [pc, #196]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009270:	2b00      	cmp	r3, #0
 8009272:	d0ef      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009274:	7cfb      	ldrb	r3, [r7, #19]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d15c      	bne.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800927a:	4b2c      	ldr	r3, [pc, #176]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800927c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009280:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009284:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d01f      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	429a      	cmp	r2, r3
 8009296:	d019      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009298:	4b24      	ldr	r3, [pc, #144]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800929a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800929e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80092a4:	4b21      	ldr	r3, [pc, #132]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092aa:	4a20      	ldr	r2, [pc, #128]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80092b4:	4b1d      	ldr	r3, [pc, #116]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ba:	4a1c      	ldr	r2, [pc, #112]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80092c4:	4a19      	ldr	r2, [pc, #100]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d016      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092d6:	f7fb fa2d 	bl	8004734 <HAL_GetTick>
 80092da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092dc:	e00b      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092de:	f7fb fa29 	bl	8004734 <HAL_GetTick>
 80092e2:	4602      	mov	r2, r0
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d902      	bls.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	74fb      	strb	r3, [r7, #19]
            break;
 80092f4:	e006      	b.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092f6:	4b0d      	ldr	r3, [pc, #52]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092fc:	f003 0302 	and.w	r3, r3, #2
 8009300:	2b00      	cmp	r3, #0
 8009302:	d0ec      	beq.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8009304:	7cfb      	ldrb	r3, [r7, #19]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10c      	bne.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800930a:	4b08      	ldr	r3, [pc, #32]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800930c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009310:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800931a:	4904      	ldr	r1, [pc, #16]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800931c:	4313      	orrs	r3, r2
 800931e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009322:	e009      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009324:	7cfb      	ldrb	r3, [r7, #19]
 8009326:	74bb      	strb	r3, [r7, #18]
 8009328:	e006      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800932a:	bf00      	nop
 800932c:	40021000 	.word	0x40021000
 8009330:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009334:	7cfb      	ldrb	r3, [r7, #19]
 8009336:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009338:	7c7b      	ldrb	r3, [r7, #17]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d105      	bne.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800933e:	4ba6      	ldr	r3, [pc, #664]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009342:	4aa5      	ldr	r2, [pc, #660]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009344:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009348:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00a      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009356:	4ba0      	ldr	r3, [pc, #640]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800935c:	f023 0203 	bic.w	r2, r3, #3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009364:	499c      	ldr	r1, [pc, #624]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009366:	4313      	orrs	r3, r2
 8009368:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 0302 	and.w	r3, r3, #2
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00a      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009378:	4b97      	ldr	r3, [pc, #604]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800937a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800937e:	f023 020c 	bic.w	r2, r3, #12
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009386:	4994      	ldr	r1, [pc, #592]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009388:	4313      	orrs	r3, r2
 800938a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0304 	and.w	r3, r3, #4
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00a      	beq.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800939a:	4b8f      	ldr	r3, [pc, #572]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800939c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093a8:	498b      	ldr	r1, [pc, #556]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80093aa:	4313      	orrs	r3, r2
 80093ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 0308 	and.w	r3, r3, #8
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00a      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80093bc:	4b86      	ldr	r3, [pc, #536]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80093be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093ca:	4983      	ldr	r1, [pc, #524]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 0310 	and.w	r3, r3, #16
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00a      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80093de:	4b7e      	ldr	r3, [pc, #504]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80093e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093ec:	497a      	ldr	r1, [pc, #488]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80093ee:	4313      	orrs	r3, r2
 80093f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 0320 	and.w	r3, r3, #32
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00a      	beq.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009400:	4b75      	ldr	r3, [pc, #468]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009406:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800940e:	4972      	ldr	r1, [pc, #456]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009410:	4313      	orrs	r3, r2
 8009412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00a      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009422:	4b6d      	ldr	r3, [pc, #436]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009428:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009430:	4969      	ldr	r1, [pc, #420]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009432:	4313      	orrs	r3, r2
 8009434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00a      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009444:	4b64      	ldr	r3, [pc, #400]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800944a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009452:	4961      	ldr	r1, [pc, #388]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009454:	4313      	orrs	r3, r2
 8009456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00a      	beq.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009466:	4b5c      	ldr	r3, [pc, #368]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800946c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009474:	4958      	ldr	r1, [pc, #352]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009476:	4313      	orrs	r3, r2
 8009478:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00a      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009488:	4b53      	ldr	r3, [pc, #332]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800948a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800948e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009496:	4950      	ldr	r1, [pc, #320]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009498:	4313      	orrs	r3, r2
 800949a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00a      	beq.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80094aa:	4b4b      	ldr	r3, [pc, #300]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80094ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094b8:	4947      	ldr	r1, [pc, #284]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00a      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80094cc:	4b42      	ldr	r3, [pc, #264]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80094ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80094d2:	f023 0203 	bic.w	r2, r3, #3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094da:	493f      	ldr	r1, [pc, #252]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80094dc:	4313      	orrs	r3, r2
 80094de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d028      	beq.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80094ee:	4b3a      	ldr	r3, [pc, #232]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80094f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094fc:	4936      	ldr	r1, [pc, #216]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80094fe:	4313      	orrs	r3, r2
 8009500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009508:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800950c:	d106      	bne.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800950e:	4b32      	ldr	r3, [pc, #200]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	4a31      	ldr	r2, [pc, #196]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009518:	60d3      	str	r3, [r2, #12]
 800951a:	e011      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009520:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009524:	d10c      	bne.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	3304      	adds	r3, #4
 800952a:	2101      	movs	r1, #1
 800952c:	4618      	mov	r0, r3
 800952e:	f000 f8c9 	bl	80096c4 <RCCEx_PLLSAI1_Config>
 8009532:	4603      	mov	r3, r0
 8009534:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009536:	7cfb      	ldrb	r3, [r7, #19]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d001      	beq.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800953c:	7cfb      	ldrb	r3, [r7, #19]
 800953e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009548:	2b00      	cmp	r3, #0
 800954a:	d028      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800954c:	4b22      	ldr	r3, [pc, #136]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800954e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009552:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800955a:	491f      	ldr	r1, [pc, #124]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800955c:	4313      	orrs	r3, r2
 800955e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009566:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800956a:	d106      	bne.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800956c:	4b1a      	ldr	r3, [pc, #104]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	4a19      	ldr	r2, [pc, #100]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009572:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009576:	60d3      	str	r3, [r2, #12]
 8009578:	e011      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800957e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009582:	d10c      	bne.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	3304      	adds	r3, #4
 8009588:	2101      	movs	r1, #1
 800958a:	4618      	mov	r0, r3
 800958c:	f000 f89a 	bl	80096c4 <RCCEx_PLLSAI1_Config>
 8009590:	4603      	mov	r3, r0
 8009592:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009594:	7cfb      	ldrb	r3, [r7, #19]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800959a:	7cfb      	ldrb	r3, [r7, #19]
 800959c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d02a      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80095aa:	4b0b      	ldr	r3, [pc, #44]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80095ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095b8:	4907      	ldr	r1, [pc, #28]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80095ba:	4313      	orrs	r3, r2
 80095bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095c8:	d108      	bne.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095ca:	4b03      	ldr	r3, [pc, #12]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	4a02      	ldr	r2, [pc, #8]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80095d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095d4:	60d3      	str	r3, [r2, #12]
 80095d6:	e013      	b.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80095d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80095e4:	d10c      	bne.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	3304      	adds	r3, #4
 80095ea:	2101      	movs	r1, #1
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 f869 	bl	80096c4 <RCCEx_PLLSAI1_Config>
 80095f2:	4603      	mov	r3, r0
 80095f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80095f6:	7cfb      	ldrb	r3, [r7, #19]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80095fc:	7cfb      	ldrb	r3, [r7, #19]
 80095fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009608:	2b00      	cmp	r3, #0
 800960a:	d02f      	beq.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800960c:	4b2c      	ldr	r3, [pc, #176]	@ (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800960e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009612:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800961a:	4929      	ldr	r1, [pc, #164]	@ (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800961c:	4313      	orrs	r3, r2
 800961e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009626:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800962a:	d10d      	bne.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	3304      	adds	r3, #4
 8009630:	2102      	movs	r1, #2
 8009632:	4618      	mov	r0, r3
 8009634:	f000 f846 	bl	80096c4 <RCCEx_PLLSAI1_Config>
 8009638:	4603      	mov	r3, r0
 800963a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800963c:	7cfb      	ldrb	r3, [r7, #19]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d014      	beq.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8009642:	7cfb      	ldrb	r3, [r7, #19]
 8009644:	74bb      	strb	r3, [r7, #18]
 8009646:	e011      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800964c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009650:	d10c      	bne.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	3320      	adds	r3, #32
 8009656:	2102      	movs	r1, #2
 8009658:	4618      	mov	r0, r3
 800965a:	f000 f925 	bl	80098a8 <RCCEx_PLLSAI2_Config>
 800965e:	4603      	mov	r3, r0
 8009660:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009662:	7cfb      	ldrb	r3, [r7, #19]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d001      	beq.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8009668:	7cfb      	ldrb	r3, [r7, #19]
 800966a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00b      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009678:	4b11      	ldr	r3, [pc, #68]	@ (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800967a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800967e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009688:	490d      	ldr	r1, [pc, #52]	@ (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800968a:	4313      	orrs	r3, r2
 800968c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00b      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800969c:	4b08      	ldr	r3, [pc, #32]	@ (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800969e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096ac:	4904      	ldr	r1, [pc, #16]	@ (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80096ae:	4313      	orrs	r3, r2
 80096b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80096b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	40021000 	.word	0x40021000

080096c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096ce:	2300      	movs	r3, #0
 80096d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80096d2:	4b74      	ldr	r3, [pc, #464]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	f003 0303 	and.w	r3, r3, #3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d018      	beq.n	8009710 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80096de:	4b71      	ldr	r3, [pc, #452]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	f003 0203 	and.w	r2, r3, #3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d10d      	bne.n	800970a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
       ||
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d009      	beq.n	800970a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80096f6:	4b6b      	ldr	r3, [pc, #428]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	091b      	lsrs	r3, r3, #4
 80096fc:	f003 0307 	and.w	r3, r3, #7
 8009700:	1c5a      	adds	r2, r3, #1
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	685b      	ldr	r3, [r3, #4]
       ||
 8009706:	429a      	cmp	r2, r3
 8009708:	d047      	beq.n	800979a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	73fb      	strb	r3, [r7, #15]
 800970e:	e044      	b.n	800979a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2b03      	cmp	r3, #3
 8009716:	d018      	beq.n	800974a <RCCEx_PLLSAI1_Config+0x86>
 8009718:	2b03      	cmp	r3, #3
 800971a:	d825      	bhi.n	8009768 <RCCEx_PLLSAI1_Config+0xa4>
 800971c:	2b01      	cmp	r3, #1
 800971e:	d002      	beq.n	8009726 <RCCEx_PLLSAI1_Config+0x62>
 8009720:	2b02      	cmp	r3, #2
 8009722:	d009      	beq.n	8009738 <RCCEx_PLLSAI1_Config+0x74>
 8009724:	e020      	b.n	8009768 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009726:	4b5f      	ldr	r3, [pc, #380]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 0302 	and.w	r3, r3, #2
 800972e:	2b00      	cmp	r3, #0
 8009730:	d11d      	bne.n	800976e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009736:	e01a      	b.n	800976e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009738:	4b5a      	ldr	r3, [pc, #360]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009740:	2b00      	cmp	r3, #0
 8009742:	d116      	bne.n	8009772 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009748:	e013      	b.n	8009772 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800974a:	4b56      	ldr	r3, [pc, #344]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10f      	bne.n	8009776 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009756:	4b53      	ldr	r3, [pc, #332]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800975e:	2b00      	cmp	r3, #0
 8009760:	d109      	bne.n	8009776 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009766:	e006      	b.n	8009776 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	73fb      	strb	r3, [r7, #15]
      break;
 800976c:	e004      	b.n	8009778 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800976e:	bf00      	nop
 8009770:	e002      	b.n	8009778 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009772:	bf00      	nop
 8009774:	e000      	b.n	8009778 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009776:	bf00      	nop
    }

    if(status == HAL_OK)
 8009778:	7bfb      	ldrb	r3, [r7, #15]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d10d      	bne.n	800979a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800977e:	4b49      	ldr	r3, [pc, #292]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6819      	ldr	r1, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	3b01      	subs	r3, #1
 8009790:	011b      	lsls	r3, r3, #4
 8009792:	430b      	orrs	r3, r1
 8009794:	4943      	ldr	r1, [pc, #268]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009796:	4313      	orrs	r3, r2
 8009798:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800979a:	7bfb      	ldrb	r3, [r7, #15]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d17c      	bne.n	800989a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80097a0:	4b40      	ldr	r3, [pc, #256]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a3f      	ldr	r2, [pc, #252]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80097a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80097aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097ac:	f7fa ffc2 	bl	8004734 <HAL_GetTick>
 80097b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80097b2:	e009      	b.n	80097c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80097b4:	f7fa ffbe 	bl	8004734 <HAL_GetTick>
 80097b8:	4602      	mov	r2, r0
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	2b02      	cmp	r3, #2
 80097c0:	d902      	bls.n	80097c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80097c2:	2303      	movs	r3, #3
 80097c4:	73fb      	strb	r3, [r7, #15]
        break;
 80097c6:	e005      	b.n	80097d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80097c8:	4b36      	ldr	r3, [pc, #216]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1ef      	bne.n	80097b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d15f      	bne.n	800989a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d110      	bne.n	8009802 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80097e0:	4b30      	ldr	r3, [pc, #192]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80097e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	6892      	ldr	r2, [r2, #8]
 80097f0:	0211      	lsls	r1, r2, #8
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	68d2      	ldr	r2, [r2, #12]
 80097f6:	06d2      	lsls	r2, r2, #27
 80097f8:	430a      	orrs	r2, r1
 80097fa:	492a      	ldr	r1, [pc, #168]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80097fc:	4313      	orrs	r3, r2
 80097fe:	610b      	str	r3, [r1, #16]
 8009800:	e027      	b.n	8009852 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d112      	bne.n	800982e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009808:	4b26      	ldr	r3, [pc, #152]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8009810:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	6892      	ldr	r2, [r2, #8]
 8009818:	0211      	lsls	r1, r2, #8
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	6912      	ldr	r2, [r2, #16]
 800981e:	0852      	lsrs	r2, r2, #1
 8009820:	3a01      	subs	r2, #1
 8009822:	0552      	lsls	r2, r2, #21
 8009824:	430a      	orrs	r2, r1
 8009826:	491f      	ldr	r1, [pc, #124]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009828:	4313      	orrs	r3, r2
 800982a:	610b      	str	r3, [r1, #16]
 800982c:	e011      	b.n	8009852 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800982e:	4b1d      	ldr	r3, [pc, #116]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8009836:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	6892      	ldr	r2, [r2, #8]
 800983e:	0211      	lsls	r1, r2, #8
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	6952      	ldr	r2, [r2, #20]
 8009844:	0852      	lsrs	r2, r2, #1
 8009846:	3a01      	subs	r2, #1
 8009848:	0652      	lsls	r2, r2, #25
 800984a:	430a      	orrs	r2, r1
 800984c:	4915      	ldr	r1, [pc, #84]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800984e:	4313      	orrs	r3, r2
 8009850:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009852:	4b14      	ldr	r3, [pc, #80]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a13      	ldr	r2, [pc, #76]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009858:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800985c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800985e:	f7fa ff69 	bl	8004734 <HAL_GetTick>
 8009862:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009864:	e009      	b.n	800987a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009866:	f7fa ff65 	bl	8004734 <HAL_GetTick>
 800986a:	4602      	mov	r2, r0
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	1ad3      	subs	r3, r2, r3
 8009870:	2b02      	cmp	r3, #2
 8009872:	d902      	bls.n	800987a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8009874:	2303      	movs	r3, #3
 8009876:	73fb      	strb	r3, [r7, #15]
          break;
 8009878:	e005      	b.n	8009886 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800987a:	4b0a      	ldr	r3, [pc, #40]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009882:	2b00      	cmp	r3, #0
 8009884:	d0ef      	beq.n	8009866 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8009886:	7bfb      	ldrb	r3, [r7, #15]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d106      	bne.n	800989a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800988c:	4b05      	ldr	r3, [pc, #20]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800988e:	691a      	ldr	r2, [r3, #16]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	699b      	ldr	r3, [r3, #24]
 8009894:	4903      	ldr	r1, [pc, #12]	@ (80098a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009896:	4313      	orrs	r3, r2
 8009898:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800989a:	7bfb      	ldrb	r3, [r7, #15]
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	40021000 	.word	0x40021000

080098a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80098b6:	4b69      	ldr	r3, [pc, #420]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	f003 0303 	and.w	r3, r3, #3
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d018      	beq.n	80098f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80098c2:	4b66      	ldr	r3, [pc, #408]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	f003 0203 	and.w	r2, r3, #3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d10d      	bne.n	80098ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
       ||
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d009      	beq.n	80098ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80098da:	4b60      	ldr	r3, [pc, #384]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	091b      	lsrs	r3, r3, #4
 80098e0:	f003 0307 	and.w	r3, r3, #7
 80098e4:	1c5a      	adds	r2, r3, #1
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	685b      	ldr	r3, [r3, #4]
       ||
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d047      	beq.n	800997e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	73fb      	strb	r3, [r7, #15]
 80098f2:	e044      	b.n	800997e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b03      	cmp	r3, #3
 80098fa:	d018      	beq.n	800992e <RCCEx_PLLSAI2_Config+0x86>
 80098fc:	2b03      	cmp	r3, #3
 80098fe:	d825      	bhi.n	800994c <RCCEx_PLLSAI2_Config+0xa4>
 8009900:	2b01      	cmp	r3, #1
 8009902:	d002      	beq.n	800990a <RCCEx_PLLSAI2_Config+0x62>
 8009904:	2b02      	cmp	r3, #2
 8009906:	d009      	beq.n	800991c <RCCEx_PLLSAI2_Config+0x74>
 8009908:	e020      	b.n	800994c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800990a:	4b54      	ldr	r3, [pc, #336]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 0302 	and.w	r3, r3, #2
 8009912:	2b00      	cmp	r3, #0
 8009914:	d11d      	bne.n	8009952 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800991a:	e01a      	b.n	8009952 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800991c:	4b4f      	ldr	r3, [pc, #316]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009924:	2b00      	cmp	r3, #0
 8009926:	d116      	bne.n	8009956 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800992c:	e013      	b.n	8009956 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800992e:	4b4b      	ldr	r3, [pc, #300]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10f      	bne.n	800995a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800993a:	4b48      	ldr	r3, [pc, #288]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009942:	2b00      	cmp	r3, #0
 8009944:	d109      	bne.n	800995a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800994a:	e006      	b.n	800995a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	73fb      	strb	r3, [r7, #15]
      break;
 8009950:	e004      	b.n	800995c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009952:	bf00      	nop
 8009954:	e002      	b.n	800995c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009956:	bf00      	nop
 8009958:	e000      	b.n	800995c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800995a:	bf00      	nop
    }

    if(status == HAL_OK)
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10d      	bne.n	800997e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009962:	4b3e      	ldr	r3, [pc, #248]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6819      	ldr	r1, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	3b01      	subs	r3, #1
 8009974:	011b      	lsls	r3, r3, #4
 8009976:	430b      	orrs	r3, r1
 8009978:	4938      	ldr	r1, [pc, #224]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 800997a:	4313      	orrs	r3, r2
 800997c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800997e:	7bfb      	ldrb	r3, [r7, #15]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d166      	bne.n	8009a52 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009984:	4b35      	ldr	r3, [pc, #212]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a34      	ldr	r2, [pc, #208]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 800998a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800998e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009990:	f7fa fed0 	bl	8004734 <HAL_GetTick>
 8009994:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009996:	e009      	b.n	80099ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009998:	f7fa fecc 	bl	8004734 <HAL_GetTick>
 800999c:	4602      	mov	r2, r0
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d902      	bls.n	80099ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80099a6:	2303      	movs	r3, #3
 80099a8:	73fb      	strb	r3, [r7, #15]
        break;
 80099aa:	e005      	b.n	80099b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80099ac:	4b2b      	ldr	r3, [pc, #172]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1ef      	bne.n	8009998 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d149      	bne.n	8009a52 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d110      	bne.n	80099e6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80099c4:	4b25      	ldr	r3, [pc, #148]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 80099c6:	695b      	ldr	r3, [r3, #20]
 80099c8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80099cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	6892      	ldr	r2, [r2, #8]
 80099d4:	0211      	lsls	r1, r2, #8
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	68d2      	ldr	r2, [r2, #12]
 80099da:	06d2      	lsls	r2, r2, #27
 80099dc:	430a      	orrs	r2, r1
 80099de:	491f      	ldr	r1, [pc, #124]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 80099e0:	4313      	orrs	r3, r2
 80099e2:	614b      	str	r3, [r1, #20]
 80099e4:	e011      	b.n	8009a0a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80099e6:	4b1d      	ldr	r3, [pc, #116]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80099ee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	6892      	ldr	r2, [r2, #8]
 80099f6:	0211      	lsls	r1, r2, #8
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	6912      	ldr	r2, [r2, #16]
 80099fc:	0852      	lsrs	r2, r2, #1
 80099fe:	3a01      	subs	r2, #1
 8009a00:	0652      	lsls	r2, r2, #25
 8009a02:	430a      	orrs	r2, r1
 8009a04:	4915      	ldr	r1, [pc, #84]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009a0a:	4b14      	ldr	r3, [pc, #80]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a13      	ldr	r2, [pc, #76]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a14:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a16:	f7fa fe8d 	bl	8004734 <HAL_GetTick>
 8009a1a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009a1c:	e009      	b.n	8009a32 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009a1e:	f7fa fe89 	bl	8004734 <HAL_GetTick>
 8009a22:	4602      	mov	r2, r0
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	1ad3      	subs	r3, r2, r3
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d902      	bls.n	8009a32 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	73fb      	strb	r3, [r7, #15]
          break;
 8009a30:	e005      	b.n	8009a3e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009a32:	4b0a      	ldr	r3, [pc, #40]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d0ef      	beq.n	8009a1e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d106      	bne.n	8009a52 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009a44:	4b05      	ldr	r3, [pc, #20]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009a46:	695a      	ldr	r2, [r3, #20]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	695b      	ldr	r3, [r3, #20]
 8009a4c:	4903      	ldr	r1, [pc, #12]	@ (8009a5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	40021000 	.word	0x40021000

08009a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d101      	bne.n	8009a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e095      	b.n	8009b9e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d108      	bne.n	8009a8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a82:	d009      	beq.n	8009a98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	61da      	str	r2, [r3, #28]
 8009a8a:	e005      	b.n	8009a98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d106      	bne.n	8009ab8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7f9 fb06 	bl	80030c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2202      	movs	r2, #2
 8009abc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ace:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009ad8:	d902      	bls.n	8009ae0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009ada:	2300      	movs	r3, #0
 8009adc:	60fb      	str	r3, [r7, #12]
 8009ade:	e002      	b.n	8009ae6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009ae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009ae4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009aee:	d007      	beq.n	8009b00 <HAL_SPI_Init+0xa0>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009af8:	d002      	beq.n	8009b00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009b10:	431a      	orrs	r2, r3
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	f003 0302 	and.w	r3, r3, #2
 8009b1a:	431a      	orrs	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	695b      	ldr	r3, [r3, #20]
 8009b20:	f003 0301 	and.w	r3, r3, #1
 8009b24:	431a      	orrs	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b2e:	431a      	orrs	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	69db      	ldr	r3, [r3, #28]
 8009b34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b38:	431a      	orrs	r2, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b42:	ea42 0103 	orr.w	r1, r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b4a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	430a      	orrs	r2, r1
 8009b54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	0c1b      	lsrs	r3, r3, #16
 8009b5c:	f003 0204 	and.w	r2, r3, #4
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b64:	f003 0310 	and.w	r3, r3, #16
 8009b68:	431a      	orrs	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b6e:	f003 0308 	and.w	r3, r3, #8
 8009b72:	431a      	orrs	r2, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009b7c:	ea42 0103 	orr.w	r1, r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b082      	sub	sp, #8
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d101      	bne.n	8009bb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e049      	b.n	8009c4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d106      	bne.n	8009bd2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f7f9 fb09 	bl	80031e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2202      	movs	r2, #2
 8009bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	3304      	adds	r3, #4
 8009be2:	4619      	mov	r1, r3
 8009be4:	4610      	mov	r0, r2
 8009be6:	f000 fa9d 	bl	800a124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2201      	movs	r2, #1
 8009c16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2201      	movs	r2, #1
 8009c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d001      	beq.n	8009c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e04f      	b.n	8009d0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2202      	movs	r2, #2
 8009c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68da      	ldr	r2, [r3, #12]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f042 0201 	orr.w	r2, r2, #1
 8009c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a23      	ldr	r2, [pc, #140]	@ (8009d18 <HAL_TIM_Base_Start_IT+0xc4>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d01d      	beq.n	8009cca <HAL_TIM_Base_Start_IT+0x76>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c96:	d018      	beq.n	8009cca <HAL_TIM_Base_Start_IT+0x76>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8009d1c <HAL_TIM_Base_Start_IT+0xc8>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d013      	beq.n	8009cca <HAL_TIM_Base_Start_IT+0x76>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8009d20 <HAL_TIM_Base_Start_IT+0xcc>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d00e      	beq.n	8009cca <HAL_TIM_Base_Start_IT+0x76>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a1c      	ldr	r2, [pc, #112]	@ (8009d24 <HAL_TIM_Base_Start_IT+0xd0>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d009      	beq.n	8009cca <HAL_TIM_Base_Start_IT+0x76>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a1b      	ldr	r2, [pc, #108]	@ (8009d28 <HAL_TIM_Base_Start_IT+0xd4>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d004      	beq.n	8009cca <HAL_TIM_Base_Start_IT+0x76>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a19      	ldr	r2, [pc, #100]	@ (8009d2c <HAL_TIM_Base_Start_IT+0xd8>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d115      	bne.n	8009cf6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	689a      	ldr	r2, [r3, #8]
 8009cd0:	4b17      	ldr	r3, [pc, #92]	@ (8009d30 <HAL_TIM_Base_Start_IT+0xdc>)
 8009cd2:	4013      	ands	r3, r2
 8009cd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2b06      	cmp	r3, #6
 8009cda:	d015      	beq.n	8009d08 <HAL_TIM_Base_Start_IT+0xb4>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ce2:	d011      	beq.n	8009d08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f042 0201 	orr.w	r2, r2, #1
 8009cf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cf4:	e008      	b.n	8009d08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f042 0201 	orr.w	r2, r2, #1
 8009d04:	601a      	str	r2, [r3, #0]
 8009d06:	e000      	b.n	8009d0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	40012c00 	.word	0x40012c00
 8009d1c:	40000400 	.word	0x40000400
 8009d20:	40000800 	.word	0x40000800
 8009d24:	40000c00 	.word	0x40000c00
 8009d28:	40013400 	.word	0x40013400
 8009d2c:	40014000 	.word	0x40014000
 8009d30:	00010007 	.word	0x00010007

08009d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	f003 0302 	and.w	r3, r3, #2
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d020      	beq.n	8009d98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f003 0302 	and.w	r3, r3, #2
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d01b      	beq.n	8009d98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f06f 0202 	mvn.w	r2, #2
 8009d68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	699b      	ldr	r3, [r3, #24]
 8009d76:	f003 0303 	and.w	r3, r3, #3
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d003      	beq.n	8009d86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f9b2 	bl	800a0e8 <HAL_TIM_IC_CaptureCallback>
 8009d84:	e005      	b.n	8009d92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 f9a4 	bl	800a0d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 f9b5 	bl	800a0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	f003 0304 	and.w	r3, r3, #4
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d020      	beq.n	8009de4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f003 0304 	and.w	r3, r3, #4
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d01b      	beq.n	8009de4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f06f 0204 	mvn.w	r2, #4
 8009db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2202      	movs	r2, #2
 8009dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	699b      	ldr	r3, [r3, #24]
 8009dc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d003      	beq.n	8009dd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f98c 	bl	800a0e8 <HAL_TIM_IC_CaptureCallback>
 8009dd0:	e005      	b.n	8009dde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f97e 	bl	800a0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 f98f 	bl	800a0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	f003 0308 	and.w	r3, r3, #8
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d020      	beq.n	8009e30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f003 0308 	and.w	r3, r3, #8
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d01b      	beq.n	8009e30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f06f 0208 	mvn.w	r2, #8
 8009e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2204      	movs	r2, #4
 8009e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	69db      	ldr	r3, [r3, #28]
 8009e0e:	f003 0303 	and.w	r3, r3, #3
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d003      	beq.n	8009e1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f966 	bl	800a0e8 <HAL_TIM_IC_CaptureCallback>
 8009e1c:	e005      	b.n	8009e2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f958 	bl	800a0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f969 	bl	800a0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	f003 0310 	and.w	r3, r3, #16
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d020      	beq.n	8009e7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f003 0310 	and.w	r3, r3, #16
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d01b      	beq.n	8009e7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f06f 0210 	mvn.w	r2, #16
 8009e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2208      	movs	r2, #8
 8009e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	69db      	ldr	r3, [r3, #28]
 8009e5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d003      	beq.n	8009e6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f940 	bl	800a0e8 <HAL_TIM_IC_CaptureCallback>
 8009e68:	e005      	b.n	8009e76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f932 	bl	800a0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f943 	bl	800a0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	f003 0301 	and.w	r3, r3, #1
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00c      	beq.n	8009ea0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f003 0301 	and.w	r3, r3, #1
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d007      	beq.n	8009ea0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f06f 0201 	mvn.w	r2, #1
 8009e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7f8 ff2a 	bl	8002cf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d104      	bne.n	8009eb4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00c      	beq.n	8009ece <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d007      	beq.n	8009ece <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 fafd 	bl	800a4c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00c      	beq.n	8009ef2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d007      	beq.n	8009ef2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 faf5 	bl	800a4dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00c      	beq.n	8009f16 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d007      	beq.n	8009f16 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f8fd 	bl	800a110 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	f003 0320 	and.w	r3, r3, #32
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00c      	beq.n	8009f3a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f003 0320 	and.w	r3, r3, #32
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d007      	beq.n	8009f3a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f06f 0220 	mvn.w	r2, #32
 8009f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fabd 	bl	800a4b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f3a:	bf00      	nop
 8009f3c:	3710      	adds	r7, #16
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b084      	sub	sp, #16
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d101      	bne.n	8009f5e <HAL_TIM_ConfigClockSource+0x1c>
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	e0b6      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x18a>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2201      	movs	r2, #1
 8009f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2202      	movs	r2, #2
 8009f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f7c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009f80:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f88:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f9a:	d03e      	beq.n	800a01a <HAL_TIM_ConfigClockSource+0xd8>
 8009f9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fa0:	f200 8087 	bhi.w	800a0b2 <HAL_TIM_ConfigClockSource+0x170>
 8009fa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fa8:	f000 8086 	beq.w	800a0b8 <HAL_TIM_ConfigClockSource+0x176>
 8009fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fb0:	d87f      	bhi.n	800a0b2 <HAL_TIM_ConfigClockSource+0x170>
 8009fb2:	2b70      	cmp	r3, #112	@ 0x70
 8009fb4:	d01a      	beq.n	8009fec <HAL_TIM_ConfigClockSource+0xaa>
 8009fb6:	2b70      	cmp	r3, #112	@ 0x70
 8009fb8:	d87b      	bhi.n	800a0b2 <HAL_TIM_ConfigClockSource+0x170>
 8009fba:	2b60      	cmp	r3, #96	@ 0x60
 8009fbc:	d050      	beq.n	800a060 <HAL_TIM_ConfigClockSource+0x11e>
 8009fbe:	2b60      	cmp	r3, #96	@ 0x60
 8009fc0:	d877      	bhi.n	800a0b2 <HAL_TIM_ConfigClockSource+0x170>
 8009fc2:	2b50      	cmp	r3, #80	@ 0x50
 8009fc4:	d03c      	beq.n	800a040 <HAL_TIM_ConfigClockSource+0xfe>
 8009fc6:	2b50      	cmp	r3, #80	@ 0x50
 8009fc8:	d873      	bhi.n	800a0b2 <HAL_TIM_ConfigClockSource+0x170>
 8009fca:	2b40      	cmp	r3, #64	@ 0x40
 8009fcc:	d058      	beq.n	800a080 <HAL_TIM_ConfigClockSource+0x13e>
 8009fce:	2b40      	cmp	r3, #64	@ 0x40
 8009fd0:	d86f      	bhi.n	800a0b2 <HAL_TIM_ConfigClockSource+0x170>
 8009fd2:	2b30      	cmp	r3, #48	@ 0x30
 8009fd4:	d064      	beq.n	800a0a0 <HAL_TIM_ConfigClockSource+0x15e>
 8009fd6:	2b30      	cmp	r3, #48	@ 0x30
 8009fd8:	d86b      	bhi.n	800a0b2 <HAL_TIM_ConfigClockSource+0x170>
 8009fda:	2b20      	cmp	r3, #32
 8009fdc:	d060      	beq.n	800a0a0 <HAL_TIM_ConfigClockSource+0x15e>
 8009fde:	2b20      	cmp	r3, #32
 8009fe0:	d867      	bhi.n	800a0b2 <HAL_TIM_ConfigClockSource+0x170>
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d05c      	beq.n	800a0a0 <HAL_TIM_ConfigClockSource+0x15e>
 8009fe6:	2b10      	cmp	r3, #16
 8009fe8:	d05a      	beq.n	800a0a0 <HAL_TIM_ConfigClockSource+0x15e>
 8009fea:	e062      	b.n	800a0b2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009ffc:	f000 f9b2 	bl	800a364 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a00e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68ba      	ldr	r2, [r7, #8]
 800a016:	609a      	str	r2, [r3, #8]
      break;
 800a018:	e04f      	b.n	800a0ba <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a02a:	f000 f99b 	bl	800a364 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	689a      	ldr	r2, [r3, #8]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a03c:	609a      	str	r2, [r3, #8]
      break;
 800a03e:	e03c      	b.n	800a0ba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a04c:	461a      	mov	r2, r3
 800a04e:	f000 f90f 	bl	800a270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2150      	movs	r1, #80	@ 0x50
 800a058:	4618      	mov	r0, r3
 800a05a:	f000 f968 	bl	800a32e <TIM_ITRx_SetConfig>
      break;
 800a05e:	e02c      	b.n	800a0ba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a06c:	461a      	mov	r2, r3
 800a06e:	f000 f92e 	bl	800a2ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2160      	movs	r1, #96	@ 0x60
 800a078:	4618      	mov	r0, r3
 800a07a:	f000 f958 	bl	800a32e <TIM_ITRx_SetConfig>
      break;
 800a07e:	e01c      	b.n	800a0ba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a08c:	461a      	mov	r2, r3
 800a08e:	f000 f8ef 	bl	800a270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2140      	movs	r1, #64	@ 0x40
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 f948 	bl	800a32e <TIM_ITRx_SetConfig>
      break;
 800a09e:	e00c      	b.n	800a0ba <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	f000 f93f 	bl	800a32e <TIM_ITRx_SetConfig>
      break;
 800a0b0:	e003      	b.n	800a0ba <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a0b6:	e000      	b.n	800a0ba <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a0b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0dc:	bf00      	nop
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a46      	ldr	r2, [pc, #280]	@ (800a250 <TIM_Base_SetConfig+0x12c>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d013      	beq.n	800a164 <TIM_Base_SetConfig+0x40>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a142:	d00f      	beq.n	800a164 <TIM_Base_SetConfig+0x40>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4a43      	ldr	r2, [pc, #268]	@ (800a254 <TIM_Base_SetConfig+0x130>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d00b      	beq.n	800a164 <TIM_Base_SetConfig+0x40>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a42      	ldr	r2, [pc, #264]	@ (800a258 <TIM_Base_SetConfig+0x134>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d007      	beq.n	800a164 <TIM_Base_SetConfig+0x40>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a41      	ldr	r2, [pc, #260]	@ (800a25c <TIM_Base_SetConfig+0x138>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d003      	beq.n	800a164 <TIM_Base_SetConfig+0x40>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a40      	ldr	r2, [pc, #256]	@ (800a260 <TIM_Base_SetConfig+0x13c>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d108      	bne.n	800a176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a16a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	4313      	orrs	r3, r2
 800a174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a35      	ldr	r2, [pc, #212]	@ (800a250 <TIM_Base_SetConfig+0x12c>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d01f      	beq.n	800a1be <TIM_Base_SetConfig+0x9a>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a184:	d01b      	beq.n	800a1be <TIM_Base_SetConfig+0x9a>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a32      	ldr	r2, [pc, #200]	@ (800a254 <TIM_Base_SetConfig+0x130>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d017      	beq.n	800a1be <TIM_Base_SetConfig+0x9a>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a31      	ldr	r2, [pc, #196]	@ (800a258 <TIM_Base_SetConfig+0x134>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d013      	beq.n	800a1be <TIM_Base_SetConfig+0x9a>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a30      	ldr	r2, [pc, #192]	@ (800a25c <TIM_Base_SetConfig+0x138>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d00f      	beq.n	800a1be <TIM_Base_SetConfig+0x9a>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a2f      	ldr	r2, [pc, #188]	@ (800a260 <TIM_Base_SetConfig+0x13c>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d00b      	beq.n	800a1be <TIM_Base_SetConfig+0x9a>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a2e      	ldr	r2, [pc, #184]	@ (800a264 <TIM_Base_SetConfig+0x140>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d007      	beq.n	800a1be <TIM_Base_SetConfig+0x9a>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a2d      	ldr	r2, [pc, #180]	@ (800a268 <TIM_Base_SetConfig+0x144>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d003      	beq.n	800a1be <TIM_Base_SetConfig+0x9a>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a2c      	ldr	r2, [pc, #176]	@ (800a26c <TIM_Base_SetConfig+0x148>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d108      	bne.n	800a1d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	695b      	ldr	r3, [r3, #20]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	689a      	ldr	r2, [r3, #8]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a16      	ldr	r2, [pc, #88]	@ (800a250 <TIM_Base_SetConfig+0x12c>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d00f      	beq.n	800a21c <TIM_Base_SetConfig+0xf8>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4a18      	ldr	r2, [pc, #96]	@ (800a260 <TIM_Base_SetConfig+0x13c>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d00b      	beq.n	800a21c <TIM_Base_SetConfig+0xf8>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a17      	ldr	r2, [pc, #92]	@ (800a264 <TIM_Base_SetConfig+0x140>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d007      	beq.n	800a21c <TIM_Base_SetConfig+0xf8>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a16      	ldr	r2, [pc, #88]	@ (800a268 <TIM_Base_SetConfig+0x144>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d003      	beq.n	800a21c <TIM_Base_SetConfig+0xf8>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4a15      	ldr	r2, [pc, #84]	@ (800a26c <TIM_Base_SetConfig+0x148>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d103      	bne.n	800a224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	691a      	ldr	r2, [r3, #16]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	f003 0301 	and.w	r3, r3, #1
 800a232:	2b01      	cmp	r3, #1
 800a234:	d105      	bne.n	800a242 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	f023 0201 	bic.w	r2, r3, #1
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	611a      	str	r2, [r3, #16]
  }
}
 800a242:	bf00      	nop
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	40012c00 	.word	0x40012c00
 800a254:	40000400 	.word	0x40000400
 800a258:	40000800 	.word	0x40000800
 800a25c:	40000c00 	.word	0x40000c00
 800a260:	40013400 	.word	0x40013400
 800a264:	40014000 	.word	0x40014000
 800a268:	40014400 	.word	0x40014400
 800a26c:	40014800 	.word	0x40014800

0800a270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a270:	b480      	push	{r7}
 800a272:	b087      	sub	sp, #28
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6a1b      	ldr	r3, [r3, #32]
 800a280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6a1b      	ldr	r3, [r3, #32]
 800a286:	f023 0201 	bic.w	r2, r3, #1
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	699b      	ldr	r3, [r3, #24]
 800a292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a29a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	011b      	lsls	r3, r3, #4
 800a2a0:	693a      	ldr	r2, [r7, #16]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	f023 030a 	bic.w	r3, r3, #10
 800a2ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	693a      	ldr	r2, [r7, #16]
 800a2ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	621a      	str	r2, [r3, #32]
}
 800a2c2:	bf00      	nop
 800a2c4:	371c      	adds	r7, #28
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr

0800a2ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2ce:	b480      	push	{r7}
 800a2d0:	b087      	sub	sp, #28
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	60f8      	str	r0, [r7, #12]
 800a2d6:	60b9      	str	r1, [r7, #8]
 800a2d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6a1b      	ldr	r3, [r3, #32]
 800a2de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6a1b      	ldr	r3, [r3, #32]
 800a2e4:	f023 0210 	bic.w	r2, r3, #16
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a2f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	031b      	lsls	r3, r3, #12
 800a2fe:	693a      	ldr	r2, [r7, #16]
 800a300:	4313      	orrs	r3, r2
 800a302:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a30a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	011b      	lsls	r3, r3, #4
 800a310:	697a      	ldr	r2, [r7, #20]
 800a312:	4313      	orrs	r3, r2
 800a314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	693a      	ldr	r2, [r7, #16]
 800a31a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	697a      	ldr	r2, [r7, #20]
 800a320:	621a      	str	r2, [r3, #32]
}
 800a322:	bf00      	nop
 800a324:	371c      	adds	r7, #28
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a32e:	b480      	push	{r7}
 800a330:	b085      	sub	sp, #20
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	f043 0307 	orr.w	r3, r3, #7
 800a350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	609a      	str	r2, [r3, #8]
}
 800a358:	bf00      	nop
 800a35a:	3714      	adds	r7, #20
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a364:	b480      	push	{r7}
 800a366:	b087      	sub	sp, #28
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	607a      	str	r2, [r7, #4]
 800a370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a37e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	021a      	lsls	r2, r3, #8
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	431a      	orrs	r2, r3
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	4313      	orrs	r3, r2
 800a390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	697a      	ldr	r2, [r7, #20]
 800a396:	609a      	str	r2, [r3, #8]
}
 800a398:	bf00      	nop
 800a39a:	371c      	adds	r7, #28
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d101      	bne.n	800a3bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	e068      	b.n	800a48e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a2e      	ldr	r2, [pc, #184]	@ (800a49c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d004      	beq.n	800a3f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a2d      	ldr	r2, [pc, #180]	@ (800a4a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d108      	bne.n	800a402 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a3f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	4313      	orrs	r3, r2
 800a400:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a408:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	4313      	orrs	r3, r2
 800a412:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a1e      	ldr	r2, [pc, #120]	@ (800a49c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d01d      	beq.n	800a462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a42e:	d018      	beq.n	800a462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a1b      	ldr	r2, [pc, #108]	@ (800a4a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d013      	beq.n	800a462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a1a      	ldr	r2, [pc, #104]	@ (800a4a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d00e      	beq.n	800a462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a18      	ldr	r2, [pc, #96]	@ (800a4ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d009      	beq.n	800a462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a13      	ldr	r2, [pc, #76]	@ (800a4a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d004      	beq.n	800a462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a14      	ldr	r2, [pc, #80]	@ (800a4b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d10c      	bne.n	800a47c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	68ba      	ldr	r2, [r7, #8]
 800a470:	4313      	orrs	r3, r2
 800a472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3714      	adds	r7, #20
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop
 800a49c:	40012c00 	.word	0x40012c00
 800a4a0:	40013400 	.word	0x40013400
 800a4a4:	40000400 	.word	0x40000400
 800a4a8:	40000800 	.word	0x40000800
 800a4ac:	40000c00 	.word	0x40000c00
 800a4b0:	40014000 	.word	0x40014000

0800a4b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4bc:	bf00      	nop
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d101      	bne.n	800a502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e040      	b.n	800a584 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a506:	2b00      	cmp	r3, #0
 800a508:	d106      	bne.n	800a518 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f7f8 fe8c 	bl	8003230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2224      	movs	r2, #36	@ 0x24
 800a51c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f022 0201 	bic.w	r2, r2, #1
 800a52c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a532:	2b00      	cmp	r3, #0
 800a534:	d002      	beq.n	800a53c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 fe52 	bl	800b1e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 fb97 	bl	800ac70 <UART_SetConfig>
 800a542:	4603      	mov	r3, r0
 800a544:	2b01      	cmp	r3, #1
 800a546:	d101      	bne.n	800a54c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	e01b      	b.n	800a584 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	685a      	ldr	r2, [r3, #4]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a55a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	689a      	ldr	r2, [r3, #8]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a56a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f042 0201 	orr.w	r2, r2, #1
 800a57a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 fed1 	bl	800b324 <UART_CheckIdleState>
 800a582:	4603      	mov	r3, r0
}
 800a584:	4618      	mov	r0, r3
 800a586:	3708      	adds	r7, #8
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b08a      	sub	sp, #40	@ 0x28
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	4613      	mov	r3, r2
 800a598:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5a0:	2b20      	cmp	r3, #32
 800a5a2:	d137      	bne.n	800a614 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d002      	beq.n	800a5b0 <HAL_UART_Receive_IT+0x24>
 800a5aa:	88fb      	ldrh	r3, [r7, #6]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d101      	bne.n	800a5b4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e030      	b.n	800a616 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a18      	ldr	r2, [pc, #96]	@ (800a620 <HAL_UART_Receive_IT+0x94>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d01f      	beq.n	800a604 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d018      	beq.n	800a604 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	e853 3f00 	ldrex	r3, [r3]
 800a5de:	613b      	str	r3, [r7, #16]
   return(result);
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a5e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f0:	623b      	str	r3, [r7, #32]
 800a5f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f4:	69f9      	ldr	r1, [r7, #28]
 800a5f6:	6a3a      	ldr	r2, [r7, #32]
 800a5f8:	e841 2300 	strex	r3, r2, [r1]
 800a5fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d1e6      	bne.n	800a5d2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a604:	88fb      	ldrh	r3, [r7, #6]
 800a606:	461a      	mov	r2, r3
 800a608:	68b9      	ldr	r1, [r7, #8]
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f000 ffa0 	bl	800b550 <UART_Start_Receive_IT>
 800a610:	4603      	mov	r3, r0
 800a612:	e000      	b.n	800a616 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a614:	2302      	movs	r3, #2
  }
}
 800a616:	4618      	mov	r0, r3
 800a618:	3728      	adds	r7, #40	@ 0x28
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	40008000 	.word	0x40008000

0800a624 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b0ba      	sub	sp, #232	@ 0xe8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	69db      	ldr	r3, [r3, #28]
 800a632:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a64a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a64e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a652:	4013      	ands	r3, r2
 800a654:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a658:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d115      	bne.n	800a68c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a664:	f003 0320 	and.w	r3, r3, #32
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00f      	beq.n	800a68c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a66c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a670:	f003 0320 	and.w	r3, r3, #32
 800a674:	2b00      	cmp	r3, #0
 800a676:	d009      	beq.n	800a68c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f000 82ca 	beq.w	800ac16 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	4798      	blx	r3
      }
      return;
 800a68a:	e2c4      	b.n	800ac16 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800a68c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a690:	2b00      	cmp	r3, #0
 800a692:	f000 8117 	beq.w	800a8c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a69a:	f003 0301 	and.w	r3, r3, #1
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d106      	bne.n	800a6b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a6a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a6a6:	4b85      	ldr	r3, [pc, #532]	@ (800a8bc <HAL_UART_IRQHandler+0x298>)
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 810a 	beq.w	800a8c4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a6b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6b4:	f003 0301 	and.w	r3, r3, #1
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d011      	beq.n	800a6e0 <HAL_UART_IRQHandler+0xbc>
 800a6bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d00b      	beq.n	800a6e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6d6:	f043 0201 	orr.w	r2, r3, #1
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6e4:	f003 0302 	and.w	r3, r3, #2
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d011      	beq.n	800a710 <HAL_UART_IRQHandler+0xec>
 800a6ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6f0:	f003 0301 	and.w	r3, r3, #1
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00b      	beq.n	800a710 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2202      	movs	r2, #2
 800a6fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a706:	f043 0204 	orr.w	r2, r3, #4
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a714:	f003 0304 	and.w	r3, r3, #4
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d011      	beq.n	800a740 <HAL_UART_IRQHandler+0x11c>
 800a71c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a720:	f003 0301 	and.w	r3, r3, #1
 800a724:	2b00      	cmp	r3, #0
 800a726:	d00b      	beq.n	800a740 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2204      	movs	r2, #4
 800a72e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a736:	f043 0202 	orr.w	r2, r3, #2
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a744:	f003 0308 	and.w	r3, r3, #8
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d017      	beq.n	800a77c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a74c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a750:	f003 0320 	and.w	r3, r3, #32
 800a754:	2b00      	cmp	r3, #0
 800a756:	d105      	bne.n	800a764 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a75c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00b      	beq.n	800a77c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2208      	movs	r2, #8
 800a76a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a772:	f043 0208 	orr.w	r2, r3, #8
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a77c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a784:	2b00      	cmp	r3, #0
 800a786:	d012      	beq.n	800a7ae <HAL_UART_IRQHandler+0x18a>
 800a788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a78c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00c      	beq.n	800a7ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a79c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7a4:	f043 0220 	orr.w	r2, r3, #32
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f000 8230 	beq.w	800ac1a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a7ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7be:	f003 0320 	and.w	r3, r3, #32
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00d      	beq.n	800a7e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a7c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7ca:	f003 0320 	and.w	r3, r3, #32
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d007      	beq.n	800a7e2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d003      	beq.n	800a7e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7f6:	2b40      	cmp	r3, #64	@ 0x40
 800a7f8:	d005      	beq.n	800a806 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a7fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a7fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a802:	2b00      	cmp	r3, #0
 800a804:	d04f      	beq.n	800a8a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 ff68 	bl	800b6dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a816:	2b40      	cmp	r3, #64	@ 0x40
 800a818:	d141      	bne.n	800a89e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	3308      	adds	r3, #8
 800a820:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a824:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a828:	e853 3f00 	ldrex	r3, [r3]
 800a82c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a830:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a838:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3308      	adds	r3, #8
 800a842:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a846:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a84a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a852:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a856:	e841 2300 	strex	r3, r2, [r1]
 800a85a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a85e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1d9      	bne.n	800a81a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d013      	beq.n	800a896 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a872:	4a13      	ldr	r2, [pc, #76]	@ (800a8c0 <HAL_UART_IRQHandler+0x29c>)
 800a874:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fc fc32 	bl	80070e4 <HAL_DMA_Abort_IT>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d017      	beq.n	800a8b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a88a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a890:	4610      	mov	r0, r2
 800a892:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a894:	e00f      	b.n	800a8b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f9d4 	bl	800ac44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a89c:	e00b      	b.n	800a8b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f9d0 	bl	800ac44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8a4:	e007      	b.n	800a8b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 f9cc 	bl	800ac44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800a8b4:	e1b1      	b.n	800ac1a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8b6:	bf00      	nop
    return;
 800a8b8:	e1af      	b.n	800ac1a <HAL_UART_IRQHandler+0x5f6>
 800a8ba:	bf00      	nop
 800a8bc:	04000120 	.word	0x04000120
 800a8c0:	0800b7a5 	.word	0x0800b7a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	f040 816a 	bne.w	800aba2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a8ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8d2:	f003 0310 	and.w	r3, r3, #16
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f000 8163 	beq.w	800aba2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a8dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8e0:	f003 0310 	and.w	r3, r3, #16
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f000 815c 	beq.w	800aba2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2210      	movs	r2, #16
 800a8f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8fc:	2b40      	cmp	r3, #64	@ 0x40
 800a8fe:	f040 80d4 	bne.w	800aaaa <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a90e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a912:	2b00      	cmp	r3, #0
 800a914:	f000 80ad 	beq.w	800aa72 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a91e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a922:	429a      	cmp	r2, r3
 800a924:	f080 80a5 	bcs.w	800aa72 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a92e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f003 0320 	and.w	r3, r3, #32
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f040 8086 	bne.w	800aa50 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a950:	e853 3f00 	ldrex	r3, [r3]
 800a954:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a958:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a95c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a960:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	461a      	mov	r2, r3
 800a96a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a96e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a972:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a976:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a97a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a97e:	e841 2300 	strex	r3, r2, [r1]
 800a982:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a986:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d1da      	bne.n	800a944 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	3308      	adds	r3, #8
 800a994:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a996:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a998:	e853 3f00 	ldrex	r3, [r3]
 800a99c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a99e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a9a0:	f023 0301 	bic.w	r3, r3, #1
 800a9a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3308      	adds	r3, #8
 800a9ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a9b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a9b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a9ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a9be:	e841 2300 	strex	r3, r2, [r1]
 800a9c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a9c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1e1      	bne.n	800a98e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	3308      	adds	r3, #8
 800a9d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a9d4:	e853 3f00 	ldrex	r3, [r3]
 800a9d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a9da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	3308      	adds	r3, #8
 800a9ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a9ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a9f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a9f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a9f6:	e841 2300 	strex	r3, r2, [r1]
 800a9fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a9fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d1e3      	bne.n	800a9ca <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2220      	movs	r2, #32
 800aa06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa18:	e853 3f00 	ldrex	r3, [r3]
 800aa1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa20:	f023 0310 	bic.w	r3, r3, #16
 800aa24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa32:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa34:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa3a:	e841 2300 	strex	r3, r2, [r1]
 800aa3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d1e4      	bne.n	800aa10 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7fc fb0c 	bl	8007068 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2202      	movs	r2, #2
 800aa54:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	1ad3      	subs	r3, r2, r3
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	4619      	mov	r1, r3
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 f8f4 	bl	800ac58 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800aa70:	e0d5      	b.n	800ac1e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800aa78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	f040 80ce 	bne.w	800ac1e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f003 0320 	and.w	r3, r3, #32
 800aa8e:	2b20      	cmp	r3, #32
 800aa90:	f040 80c5 	bne.w	800ac1e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2202      	movs	r2, #2
 800aa98:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f8d8 	bl	800ac58 <HAL_UARTEx_RxEventCallback>
      return;
 800aaa8:	e0b9      	b.n	800ac1e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f000 80ab 	beq.w	800ac22 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800aacc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f000 80a6 	beq.w	800ac22 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aade:	e853 3f00 	ldrex	r3, [r3]
 800aae2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aae6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aaea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aaf8:	647b      	str	r3, [r7, #68]	@ 0x44
 800aafa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aafc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aafe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab00:	e841 2300 	strex	r3, r2, [r1]
 800ab04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d1e4      	bne.n	800aad6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	3308      	adds	r3, #8
 800ab12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab16:	e853 3f00 	ldrex	r3, [r3]
 800ab1a:	623b      	str	r3, [r7, #32]
   return(result);
 800ab1c:	6a3b      	ldr	r3, [r7, #32]
 800ab1e:	f023 0301 	bic.w	r3, r3, #1
 800ab22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	3308      	adds	r3, #8
 800ab2c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ab30:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab38:	e841 2300 	strex	r3, r2, [r1]
 800ab3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1e3      	bne.n	800ab0c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2220      	movs	r2, #32
 800ab48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	e853 3f00 	ldrex	r3, [r3]
 800ab64:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f023 0310 	bic.w	r3, r3, #16
 800ab6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	461a      	mov	r2, r3
 800ab76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ab7a:	61fb      	str	r3, [r7, #28]
 800ab7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7e:	69b9      	ldr	r1, [r7, #24]
 800ab80:	69fa      	ldr	r2, [r7, #28]
 800ab82:	e841 2300 	strex	r3, r2, [r1]
 800ab86:	617b      	str	r3, [r7, #20]
   return(result);
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1e4      	bne.n	800ab58 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2202      	movs	r2, #2
 800ab92:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ab98:	4619      	mov	r1, r3
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 f85c 	bl	800ac58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aba0:	e03f      	b.n	800ac22 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aba6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00e      	beq.n	800abcc <HAL_UART_IRQHandler+0x5a8>
 800abae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d008      	beq.n	800abcc <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800abc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 ffe9 	bl	800bb9c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800abca:	e02d      	b.n	800ac28 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800abcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d00e      	beq.n	800abf6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800abd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d008      	beq.n	800abf6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d01c      	beq.n	800ac26 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	4798      	blx	r3
    }
    return;
 800abf4:	e017      	b.n	800ac26 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800abf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d012      	beq.n	800ac28 <HAL_UART_IRQHandler+0x604>
 800ac02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00c      	beq.n	800ac28 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 fdde 	bl	800b7d0 <UART_EndTransmit_IT>
    return;
 800ac14:	e008      	b.n	800ac28 <HAL_UART_IRQHandler+0x604>
      return;
 800ac16:	bf00      	nop
 800ac18:	e006      	b.n	800ac28 <HAL_UART_IRQHandler+0x604>
    return;
 800ac1a:	bf00      	nop
 800ac1c:	e004      	b.n	800ac28 <HAL_UART_IRQHandler+0x604>
      return;
 800ac1e:	bf00      	nop
 800ac20:	e002      	b.n	800ac28 <HAL_UART_IRQHandler+0x604>
      return;
 800ac22:	bf00      	nop
 800ac24:	e000      	b.n	800ac28 <HAL_UART_IRQHandler+0x604>
    return;
 800ac26:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800ac28:	37e8      	adds	r7, #232	@ 0xe8
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop

0800ac30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ac38:	bf00      	nop
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ac4c:	bf00      	nop
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	460b      	mov	r3, r1
 800ac62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ac64:	bf00      	nop
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac74:	b08a      	sub	sp, #40	@ 0x28
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	689a      	ldr	r2, [r3, #8]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	431a      	orrs	r2, r3
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	431a      	orrs	r2, r3
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	69db      	ldr	r3, [r3, #28]
 800ac94:	4313      	orrs	r3, r2
 800ac96:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	4ba4      	ldr	r3, [pc, #656]	@ (800af30 <UART_SetConfig+0x2c0>)
 800aca0:	4013      	ands	r3, r2
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	6812      	ldr	r2, [r2, #0]
 800aca6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aca8:	430b      	orrs	r3, r1
 800acaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	68da      	ldr	r2, [r3, #12]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	430a      	orrs	r2, r1
 800acc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a99      	ldr	r2, [pc, #612]	@ (800af34 <UART_SetConfig+0x2c4>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d004      	beq.n	800acdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6a1b      	ldr	r3, [r3, #32]
 800acd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acd8:	4313      	orrs	r3, r2
 800acda:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acec:	430a      	orrs	r2, r1
 800acee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a90      	ldr	r2, [pc, #576]	@ (800af38 <UART_SetConfig+0x2c8>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d126      	bne.n	800ad48 <UART_SetConfig+0xd8>
 800acfa:	4b90      	ldr	r3, [pc, #576]	@ (800af3c <UART_SetConfig+0x2cc>)
 800acfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad00:	f003 0303 	and.w	r3, r3, #3
 800ad04:	2b03      	cmp	r3, #3
 800ad06:	d81b      	bhi.n	800ad40 <UART_SetConfig+0xd0>
 800ad08:	a201      	add	r2, pc, #4	@ (adr r2, 800ad10 <UART_SetConfig+0xa0>)
 800ad0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad0e:	bf00      	nop
 800ad10:	0800ad21 	.word	0x0800ad21
 800ad14:	0800ad31 	.word	0x0800ad31
 800ad18:	0800ad29 	.word	0x0800ad29
 800ad1c:	0800ad39 	.word	0x0800ad39
 800ad20:	2301      	movs	r3, #1
 800ad22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad26:	e116      	b.n	800af56 <UART_SetConfig+0x2e6>
 800ad28:	2302      	movs	r3, #2
 800ad2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad2e:	e112      	b.n	800af56 <UART_SetConfig+0x2e6>
 800ad30:	2304      	movs	r3, #4
 800ad32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad36:	e10e      	b.n	800af56 <UART_SetConfig+0x2e6>
 800ad38:	2308      	movs	r3, #8
 800ad3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad3e:	e10a      	b.n	800af56 <UART_SetConfig+0x2e6>
 800ad40:	2310      	movs	r3, #16
 800ad42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad46:	e106      	b.n	800af56 <UART_SetConfig+0x2e6>
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a7c      	ldr	r2, [pc, #496]	@ (800af40 <UART_SetConfig+0x2d0>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d138      	bne.n	800adc4 <UART_SetConfig+0x154>
 800ad52:	4b7a      	ldr	r3, [pc, #488]	@ (800af3c <UART_SetConfig+0x2cc>)
 800ad54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad58:	f003 030c 	and.w	r3, r3, #12
 800ad5c:	2b0c      	cmp	r3, #12
 800ad5e:	d82d      	bhi.n	800adbc <UART_SetConfig+0x14c>
 800ad60:	a201      	add	r2, pc, #4	@ (adr r2, 800ad68 <UART_SetConfig+0xf8>)
 800ad62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad66:	bf00      	nop
 800ad68:	0800ad9d 	.word	0x0800ad9d
 800ad6c:	0800adbd 	.word	0x0800adbd
 800ad70:	0800adbd 	.word	0x0800adbd
 800ad74:	0800adbd 	.word	0x0800adbd
 800ad78:	0800adad 	.word	0x0800adad
 800ad7c:	0800adbd 	.word	0x0800adbd
 800ad80:	0800adbd 	.word	0x0800adbd
 800ad84:	0800adbd 	.word	0x0800adbd
 800ad88:	0800ada5 	.word	0x0800ada5
 800ad8c:	0800adbd 	.word	0x0800adbd
 800ad90:	0800adbd 	.word	0x0800adbd
 800ad94:	0800adbd 	.word	0x0800adbd
 800ad98:	0800adb5 	.word	0x0800adb5
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ada2:	e0d8      	b.n	800af56 <UART_SetConfig+0x2e6>
 800ada4:	2302      	movs	r3, #2
 800ada6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800adaa:	e0d4      	b.n	800af56 <UART_SetConfig+0x2e6>
 800adac:	2304      	movs	r3, #4
 800adae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800adb2:	e0d0      	b.n	800af56 <UART_SetConfig+0x2e6>
 800adb4:	2308      	movs	r3, #8
 800adb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800adba:	e0cc      	b.n	800af56 <UART_SetConfig+0x2e6>
 800adbc:	2310      	movs	r3, #16
 800adbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800adc2:	e0c8      	b.n	800af56 <UART_SetConfig+0x2e6>
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a5e      	ldr	r2, [pc, #376]	@ (800af44 <UART_SetConfig+0x2d4>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d125      	bne.n	800ae1a <UART_SetConfig+0x1aa>
 800adce:	4b5b      	ldr	r3, [pc, #364]	@ (800af3c <UART_SetConfig+0x2cc>)
 800add0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800add4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800add8:	2b30      	cmp	r3, #48	@ 0x30
 800adda:	d016      	beq.n	800ae0a <UART_SetConfig+0x19a>
 800addc:	2b30      	cmp	r3, #48	@ 0x30
 800adde:	d818      	bhi.n	800ae12 <UART_SetConfig+0x1a2>
 800ade0:	2b20      	cmp	r3, #32
 800ade2:	d00a      	beq.n	800adfa <UART_SetConfig+0x18a>
 800ade4:	2b20      	cmp	r3, #32
 800ade6:	d814      	bhi.n	800ae12 <UART_SetConfig+0x1a2>
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d002      	beq.n	800adf2 <UART_SetConfig+0x182>
 800adec:	2b10      	cmp	r3, #16
 800adee:	d008      	beq.n	800ae02 <UART_SetConfig+0x192>
 800adf0:	e00f      	b.n	800ae12 <UART_SetConfig+0x1a2>
 800adf2:	2300      	movs	r3, #0
 800adf4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800adf8:	e0ad      	b.n	800af56 <UART_SetConfig+0x2e6>
 800adfa:	2302      	movs	r3, #2
 800adfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae00:	e0a9      	b.n	800af56 <UART_SetConfig+0x2e6>
 800ae02:	2304      	movs	r3, #4
 800ae04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae08:	e0a5      	b.n	800af56 <UART_SetConfig+0x2e6>
 800ae0a:	2308      	movs	r3, #8
 800ae0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae10:	e0a1      	b.n	800af56 <UART_SetConfig+0x2e6>
 800ae12:	2310      	movs	r3, #16
 800ae14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae18:	e09d      	b.n	800af56 <UART_SetConfig+0x2e6>
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a4a      	ldr	r2, [pc, #296]	@ (800af48 <UART_SetConfig+0x2d8>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d125      	bne.n	800ae70 <UART_SetConfig+0x200>
 800ae24:	4b45      	ldr	r3, [pc, #276]	@ (800af3c <UART_SetConfig+0x2cc>)
 800ae26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ae2e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ae30:	d016      	beq.n	800ae60 <UART_SetConfig+0x1f0>
 800ae32:	2bc0      	cmp	r3, #192	@ 0xc0
 800ae34:	d818      	bhi.n	800ae68 <UART_SetConfig+0x1f8>
 800ae36:	2b80      	cmp	r3, #128	@ 0x80
 800ae38:	d00a      	beq.n	800ae50 <UART_SetConfig+0x1e0>
 800ae3a:	2b80      	cmp	r3, #128	@ 0x80
 800ae3c:	d814      	bhi.n	800ae68 <UART_SetConfig+0x1f8>
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d002      	beq.n	800ae48 <UART_SetConfig+0x1d8>
 800ae42:	2b40      	cmp	r3, #64	@ 0x40
 800ae44:	d008      	beq.n	800ae58 <UART_SetConfig+0x1e8>
 800ae46:	e00f      	b.n	800ae68 <UART_SetConfig+0x1f8>
 800ae48:	2300      	movs	r3, #0
 800ae4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae4e:	e082      	b.n	800af56 <UART_SetConfig+0x2e6>
 800ae50:	2302      	movs	r3, #2
 800ae52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae56:	e07e      	b.n	800af56 <UART_SetConfig+0x2e6>
 800ae58:	2304      	movs	r3, #4
 800ae5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae5e:	e07a      	b.n	800af56 <UART_SetConfig+0x2e6>
 800ae60:	2308      	movs	r3, #8
 800ae62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae66:	e076      	b.n	800af56 <UART_SetConfig+0x2e6>
 800ae68:	2310      	movs	r3, #16
 800ae6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae6e:	e072      	b.n	800af56 <UART_SetConfig+0x2e6>
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a35      	ldr	r2, [pc, #212]	@ (800af4c <UART_SetConfig+0x2dc>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d12a      	bne.n	800aed0 <UART_SetConfig+0x260>
 800ae7a:	4b30      	ldr	r3, [pc, #192]	@ (800af3c <UART_SetConfig+0x2cc>)
 800ae7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae88:	d01a      	beq.n	800aec0 <UART_SetConfig+0x250>
 800ae8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae8e:	d81b      	bhi.n	800aec8 <UART_SetConfig+0x258>
 800ae90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae94:	d00c      	beq.n	800aeb0 <UART_SetConfig+0x240>
 800ae96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae9a:	d815      	bhi.n	800aec8 <UART_SetConfig+0x258>
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d003      	beq.n	800aea8 <UART_SetConfig+0x238>
 800aea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aea4:	d008      	beq.n	800aeb8 <UART_SetConfig+0x248>
 800aea6:	e00f      	b.n	800aec8 <UART_SetConfig+0x258>
 800aea8:	2300      	movs	r3, #0
 800aeaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aeae:	e052      	b.n	800af56 <UART_SetConfig+0x2e6>
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aeb6:	e04e      	b.n	800af56 <UART_SetConfig+0x2e6>
 800aeb8:	2304      	movs	r3, #4
 800aeba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aebe:	e04a      	b.n	800af56 <UART_SetConfig+0x2e6>
 800aec0:	2308      	movs	r3, #8
 800aec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aec6:	e046      	b.n	800af56 <UART_SetConfig+0x2e6>
 800aec8:	2310      	movs	r3, #16
 800aeca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aece:	e042      	b.n	800af56 <UART_SetConfig+0x2e6>
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a17      	ldr	r2, [pc, #92]	@ (800af34 <UART_SetConfig+0x2c4>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d13a      	bne.n	800af50 <UART_SetConfig+0x2e0>
 800aeda:	4b18      	ldr	r3, [pc, #96]	@ (800af3c <UART_SetConfig+0x2cc>)
 800aedc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aee0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800aee4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aee8:	d01a      	beq.n	800af20 <UART_SetConfig+0x2b0>
 800aeea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aeee:	d81b      	bhi.n	800af28 <UART_SetConfig+0x2b8>
 800aef0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aef4:	d00c      	beq.n	800af10 <UART_SetConfig+0x2a0>
 800aef6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aefa:	d815      	bhi.n	800af28 <UART_SetConfig+0x2b8>
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d003      	beq.n	800af08 <UART_SetConfig+0x298>
 800af00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af04:	d008      	beq.n	800af18 <UART_SetConfig+0x2a8>
 800af06:	e00f      	b.n	800af28 <UART_SetConfig+0x2b8>
 800af08:	2300      	movs	r3, #0
 800af0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af0e:	e022      	b.n	800af56 <UART_SetConfig+0x2e6>
 800af10:	2302      	movs	r3, #2
 800af12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af16:	e01e      	b.n	800af56 <UART_SetConfig+0x2e6>
 800af18:	2304      	movs	r3, #4
 800af1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af1e:	e01a      	b.n	800af56 <UART_SetConfig+0x2e6>
 800af20:	2308      	movs	r3, #8
 800af22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af26:	e016      	b.n	800af56 <UART_SetConfig+0x2e6>
 800af28:	2310      	movs	r3, #16
 800af2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af2e:	e012      	b.n	800af56 <UART_SetConfig+0x2e6>
 800af30:	efff69f3 	.word	0xefff69f3
 800af34:	40008000 	.word	0x40008000
 800af38:	40013800 	.word	0x40013800
 800af3c:	40021000 	.word	0x40021000
 800af40:	40004400 	.word	0x40004400
 800af44:	40004800 	.word	0x40004800
 800af48:	40004c00 	.word	0x40004c00
 800af4c:	40005000 	.word	0x40005000
 800af50:	2310      	movs	r3, #16
 800af52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a9f      	ldr	r2, [pc, #636]	@ (800b1d8 <UART_SetConfig+0x568>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d17a      	bne.n	800b056 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800af60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800af64:	2b08      	cmp	r3, #8
 800af66:	d824      	bhi.n	800afb2 <UART_SetConfig+0x342>
 800af68:	a201      	add	r2, pc, #4	@ (adr r2, 800af70 <UART_SetConfig+0x300>)
 800af6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6e:	bf00      	nop
 800af70:	0800af95 	.word	0x0800af95
 800af74:	0800afb3 	.word	0x0800afb3
 800af78:	0800af9d 	.word	0x0800af9d
 800af7c:	0800afb3 	.word	0x0800afb3
 800af80:	0800afa3 	.word	0x0800afa3
 800af84:	0800afb3 	.word	0x0800afb3
 800af88:	0800afb3 	.word	0x0800afb3
 800af8c:	0800afb3 	.word	0x0800afb3
 800af90:	0800afab 	.word	0x0800afab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af94:	f7fd ffdc 	bl	8008f50 <HAL_RCC_GetPCLK1Freq>
 800af98:	61f8      	str	r0, [r7, #28]
        break;
 800af9a:	e010      	b.n	800afbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af9c:	4b8f      	ldr	r3, [pc, #572]	@ (800b1dc <UART_SetConfig+0x56c>)
 800af9e:	61fb      	str	r3, [r7, #28]
        break;
 800afa0:	e00d      	b.n	800afbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afa2:	f7fd ff3d 	bl	8008e20 <HAL_RCC_GetSysClockFreq>
 800afa6:	61f8      	str	r0, [r7, #28]
        break;
 800afa8:	e009      	b.n	800afbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afae:	61fb      	str	r3, [r7, #28]
        break;
 800afb0:	e005      	b.n	800afbe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800afb2:	2300      	movs	r3, #0
 800afb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800afb6:	2301      	movs	r3, #1
 800afb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800afbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f000 80fb 	beq.w	800b1bc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	685a      	ldr	r2, [r3, #4]
 800afca:	4613      	mov	r3, r2
 800afcc:	005b      	lsls	r3, r3, #1
 800afce:	4413      	add	r3, r2
 800afd0:	69fa      	ldr	r2, [r7, #28]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d305      	bcc.n	800afe2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800afdc:	69fa      	ldr	r2, [r7, #28]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d903      	bls.n	800afea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800afe8:	e0e8      	b.n	800b1bc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	2200      	movs	r2, #0
 800afee:	461c      	mov	r4, r3
 800aff0:	4615      	mov	r5, r2
 800aff2:	f04f 0200 	mov.w	r2, #0
 800aff6:	f04f 0300 	mov.w	r3, #0
 800affa:	022b      	lsls	r3, r5, #8
 800affc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b000:	0222      	lsls	r2, r4, #8
 800b002:	68f9      	ldr	r1, [r7, #12]
 800b004:	6849      	ldr	r1, [r1, #4]
 800b006:	0849      	lsrs	r1, r1, #1
 800b008:	2000      	movs	r0, #0
 800b00a:	4688      	mov	r8, r1
 800b00c:	4681      	mov	r9, r0
 800b00e:	eb12 0a08 	adds.w	sl, r2, r8
 800b012:	eb43 0b09 	adc.w	fp, r3, r9
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	603b      	str	r3, [r7, #0]
 800b01e:	607a      	str	r2, [r7, #4]
 800b020:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b024:	4650      	mov	r0, sl
 800b026:	4659      	mov	r1, fp
 800b028:	f7f5 fd50 	bl	8000acc <__aeabi_uldivmod>
 800b02c:	4602      	mov	r2, r0
 800b02e:	460b      	mov	r3, r1
 800b030:	4613      	mov	r3, r2
 800b032:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b03a:	d308      	bcc.n	800b04e <UART_SetConfig+0x3de>
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b042:	d204      	bcs.n	800b04e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	69ba      	ldr	r2, [r7, #24]
 800b04a:	60da      	str	r2, [r3, #12]
 800b04c:	e0b6      	b.n	800b1bc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800b04e:	2301      	movs	r3, #1
 800b050:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800b054:	e0b2      	b.n	800b1bc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	69db      	ldr	r3, [r3, #28]
 800b05a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b05e:	d15e      	bne.n	800b11e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800b060:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b064:	2b08      	cmp	r3, #8
 800b066:	d828      	bhi.n	800b0ba <UART_SetConfig+0x44a>
 800b068:	a201      	add	r2, pc, #4	@ (adr r2, 800b070 <UART_SetConfig+0x400>)
 800b06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b06e:	bf00      	nop
 800b070:	0800b095 	.word	0x0800b095
 800b074:	0800b09d 	.word	0x0800b09d
 800b078:	0800b0a5 	.word	0x0800b0a5
 800b07c:	0800b0bb 	.word	0x0800b0bb
 800b080:	0800b0ab 	.word	0x0800b0ab
 800b084:	0800b0bb 	.word	0x0800b0bb
 800b088:	0800b0bb 	.word	0x0800b0bb
 800b08c:	0800b0bb 	.word	0x0800b0bb
 800b090:	0800b0b3 	.word	0x0800b0b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b094:	f7fd ff5c 	bl	8008f50 <HAL_RCC_GetPCLK1Freq>
 800b098:	61f8      	str	r0, [r7, #28]
        break;
 800b09a:	e014      	b.n	800b0c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b09c:	f7fd ff6e 	bl	8008f7c <HAL_RCC_GetPCLK2Freq>
 800b0a0:	61f8      	str	r0, [r7, #28]
        break;
 800b0a2:	e010      	b.n	800b0c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b0a4:	4b4d      	ldr	r3, [pc, #308]	@ (800b1dc <UART_SetConfig+0x56c>)
 800b0a6:	61fb      	str	r3, [r7, #28]
        break;
 800b0a8:	e00d      	b.n	800b0c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0aa:	f7fd feb9 	bl	8008e20 <HAL_RCC_GetSysClockFreq>
 800b0ae:	61f8      	str	r0, [r7, #28]
        break;
 800b0b0:	e009      	b.n	800b0c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0b6:	61fb      	str	r3, [r7, #28]
        break;
 800b0b8:	e005      	b.n	800b0c6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800b0c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d077      	beq.n	800b1bc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	005a      	lsls	r2, r3, #1
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	085b      	lsrs	r3, r3, #1
 800b0d6:	441a      	add	r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	2b0f      	cmp	r3, #15
 800b0e6:	d916      	bls.n	800b116 <UART_SetConfig+0x4a6>
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0ee:	d212      	bcs.n	800b116 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	f023 030f 	bic.w	r3, r3, #15
 800b0f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	085b      	lsrs	r3, r3, #1
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	f003 0307 	and.w	r3, r3, #7
 800b104:	b29a      	uxth	r2, r3
 800b106:	8afb      	ldrh	r3, [r7, #22]
 800b108:	4313      	orrs	r3, r2
 800b10a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	8afa      	ldrh	r2, [r7, #22]
 800b112:	60da      	str	r2, [r3, #12]
 800b114:	e052      	b.n	800b1bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800b11c:	e04e      	b.n	800b1bc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b11e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b122:	2b08      	cmp	r3, #8
 800b124:	d827      	bhi.n	800b176 <UART_SetConfig+0x506>
 800b126:	a201      	add	r2, pc, #4	@ (adr r2, 800b12c <UART_SetConfig+0x4bc>)
 800b128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b12c:	0800b151 	.word	0x0800b151
 800b130:	0800b159 	.word	0x0800b159
 800b134:	0800b161 	.word	0x0800b161
 800b138:	0800b177 	.word	0x0800b177
 800b13c:	0800b167 	.word	0x0800b167
 800b140:	0800b177 	.word	0x0800b177
 800b144:	0800b177 	.word	0x0800b177
 800b148:	0800b177 	.word	0x0800b177
 800b14c:	0800b16f 	.word	0x0800b16f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b150:	f7fd fefe 	bl	8008f50 <HAL_RCC_GetPCLK1Freq>
 800b154:	61f8      	str	r0, [r7, #28]
        break;
 800b156:	e014      	b.n	800b182 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b158:	f7fd ff10 	bl	8008f7c <HAL_RCC_GetPCLK2Freq>
 800b15c:	61f8      	str	r0, [r7, #28]
        break;
 800b15e:	e010      	b.n	800b182 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b160:	4b1e      	ldr	r3, [pc, #120]	@ (800b1dc <UART_SetConfig+0x56c>)
 800b162:	61fb      	str	r3, [r7, #28]
        break;
 800b164:	e00d      	b.n	800b182 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b166:	f7fd fe5b 	bl	8008e20 <HAL_RCC_GetSysClockFreq>
 800b16a:	61f8      	str	r0, [r7, #28]
        break;
 800b16c:	e009      	b.n	800b182 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b16e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b172:	61fb      	str	r3, [r7, #28]
        break;
 800b174:	e005      	b.n	800b182 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800b176:	2300      	movs	r3, #0
 800b178:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b17a:	2301      	movs	r3, #1
 800b17c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800b180:	bf00      	nop
    }

    if (pclk != 0U)
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d019      	beq.n	800b1bc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	085a      	lsrs	r2, r3, #1
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	441a      	add	r2, r3
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	fbb2 f3f3 	udiv	r3, r2, r3
 800b19a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	2b0f      	cmp	r3, #15
 800b1a0:	d909      	bls.n	800b1b6 <UART_SetConfig+0x546>
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1a8:	d205      	bcs.n	800b1b6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	b29a      	uxth	r2, r3
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	60da      	str	r2, [r3, #12]
 800b1b4:	e002      	b.n	800b1bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b1c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3728      	adds	r7, #40	@ 0x28
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1d6:	bf00      	nop
 800b1d8:	40008000 	.word	0x40008000
 800b1dc:	00f42400 	.word	0x00f42400

0800b1e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ec:	f003 0308 	and.w	r3, r3, #8
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00a      	beq.n	800b20a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	430a      	orrs	r2, r1
 800b208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b20e:	f003 0301 	and.w	r3, r3, #1
 800b212:	2b00      	cmp	r3, #0
 800b214:	d00a      	beq.n	800b22c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	430a      	orrs	r2, r1
 800b22a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b230:	f003 0302 	and.w	r3, r3, #2
 800b234:	2b00      	cmp	r3, #0
 800b236:	d00a      	beq.n	800b24e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	430a      	orrs	r2, r1
 800b24c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b252:	f003 0304 	and.w	r3, r3, #4
 800b256:	2b00      	cmp	r3, #0
 800b258:	d00a      	beq.n	800b270 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	430a      	orrs	r2, r1
 800b26e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b274:	f003 0310 	and.w	r3, r3, #16
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00a      	beq.n	800b292 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	430a      	orrs	r2, r1
 800b290:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b296:	f003 0320 	and.w	r3, r3, #32
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d00a      	beq.n	800b2b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	430a      	orrs	r2, r1
 800b2b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d01a      	beq.n	800b2f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	430a      	orrs	r2, r1
 800b2d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2de:	d10a      	bne.n	800b2f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	430a      	orrs	r2, r1
 800b2f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00a      	beq.n	800b318 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	430a      	orrs	r2, r1
 800b316:	605a      	str	r2, [r3, #4]
  }
}
 800b318:	bf00      	nop
 800b31a:	370c      	adds	r7, #12
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b098      	sub	sp, #96	@ 0x60
 800b328:	af02      	add	r7, sp, #8
 800b32a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b334:	f7f9 f9fe 	bl	8004734 <HAL_GetTick>
 800b338:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f003 0308 	and.w	r3, r3, #8
 800b344:	2b08      	cmp	r3, #8
 800b346:	d12e      	bne.n	800b3a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b348:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b34c:	9300      	str	r3, [sp, #0]
 800b34e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b350:	2200      	movs	r2, #0
 800b352:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 f88c 	bl	800b474 <UART_WaitOnFlagUntilTimeout>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d021      	beq.n	800b3a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b36a:	e853 3f00 	ldrex	r3, [r3]
 800b36e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b372:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b376:	653b      	str	r3, [r7, #80]	@ 0x50
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	461a      	mov	r2, r3
 800b37e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b380:	647b      	str	r3, [r7, #68]	@ 0x44
 800b382:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b384:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b386:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b388:	e841 2300 	strex	r3, r2, [r1]
 800b38c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b38e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1e6      	bne.n	800b362 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2220      	movs	r2, #32
 800b398:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2200      	movs	r2, #0
 800b39e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	e062      	b.n	800b46c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f003 0304 	and.w	r3, r3, #4
 800b3b0:	2b04      	cmp	r3, #4
 800b3b2:	d149      	bne.n	800b448 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b3b8:	9300      	str	r3, [sp, #0]
 800b3ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 f856 	bl	800b474 <UART_WaitOnFlagUntilTimeout>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d03c      	beq.n	800b448 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d6:	e853 3f00 	ldrex	r3, [r3]
 800b3da:	623b      	str	r3, [r7, #32]
   return(result);
 800b3dc:	6a3b      	ldr	r3, [r7, #32]
 800b3de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3f4:	e841 2300 	strex	r3, r2, [r1]
 800b3f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1e6      	bne.n	800b3ce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	3308      	adds	r3, #8
 800b406:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	e853 3f00 	ldrex	r3, [r3]
 800b40e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f023 0301 	bic.w	r3, r3, #1
 800b416:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	3308      	adds	r3, #8
 800b41e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b420:	61fa      	str	r2, [r7, #28]
 800b422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b424:	69b9      	ldr	r1, [r7, #24]
 800b426:	69fa      	ldr	r2, [r7, #28]
 800b428:	e841 2300 	strex	r3, r2, [r1]
 800b42c:	617b      	str	r3, [r7, #20]
   return(result);
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1e5      	bne.n	800b400 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2220      	movs	r2, #32
 800b438:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b444:	2303      	movs	r3, #3
 800b446:	e011      	b.n	800b46c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2220      	movs	r2, #32
 800b44c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2220      	movs	r2, #32
 800b452:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3758      	adds	r7, #88	@ 0x58
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	60b9      	str	r1, [r7, #8]
 800b47e:	603b      	str	r3, [r7, #0]
 800b480:	4613      	mov	r3, r2
 800b482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b484:	e04f      	b.n	800b526 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b48c:	d04b      	beq.n	800b526 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b48e:	f7f9 f951 	bl	8004734 <HAL_GetTick>
 800b492:	4602      	mov	r2, r0
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	1ad3      	subs	r3, r2, r3
 800b498:	69ba      	ldr	r2, [r7, #24]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d302      	bcc.n	800b4a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d101      	bne.n	800b4a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b4a4:	2303      	movs	r3, #3
 800b4a6:	e04e      	b.n	800b546 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f003 0304 	and.w	r3, r3, #4
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d037      	beq.n	800b526 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	2b80      	cmp	r3, #128	@ 0x80
 800b4ba:	d034      	beq.n	800b526 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	2b40      	cmp	r3, #64	@ 0x40
 800b4c0:	d031      	beq.n	800b526 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	69db      	ldr	r3, [r3, #28]
 800b4c8:	f003 0308 	and.w	r3, r3, #8
 800b4cc:	2b08      	cmp	r3, #8
 800b4ce:	d110      	bne.n	800b4f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2208      	movs	r2, #8
 800b4d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	f000 f8ff 	bl	800b6dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2208      	movs	r2, #8
 800b4e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e029      	b.n	800b546 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	69db      	ldr	r3, [r3, #28]
 800b4f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b500:	d111      	bne.n	800b526 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b50a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b50c:	68f8      	ldr	r0, [r7, #12]
 800b50e:	f000 f8e5 	bl	800b6dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2220      	movs	r2, #32
 800b516:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b522:	2303      	movs	r3, #3
 800b524:	e00f      	b.n	800b546 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	69da      	ldr	r2, [r3, #28]
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	4013      	ands	r3, r2
 800b530:	68ba      	ldr	r2, [r7, #8]
 800b532:	429a      	cmp	r2, r3
 800b534:	bf0c      	ite	eq
 800b536:	2301      	moveq	r3, #1
 800b538:	2300      	movne	r3, #0
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	461a      	mov	r2, r3
 800b53e:	79fb      	ldrb	r3, [r7, #7]
 800b540:	429a      	cmp	r2, r3
 800b542:	d0a0      	beq.n	800b486 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
	...

0800b550 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b550:	b480      	push	{r7}
 800b552:	b097      	sub	sp, #92	@ 0x5c
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	4613      	mov	r3, r2
 800b55c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	68ba      	ldr	r2, [r7, #8]
 800b562:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	88fa      	ldrh	r2, [r7, #6]
 800b568:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	88fa      	ldrh	r2, [r7, #6]
 800b570:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2200      	movs	r2, #0
 800b578:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b582:	d10e      	bne.n	800b5a2 <UART_Start_Receive_IT+0x52>
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d105      	bne.n	800b598 <UART_Start_Receive_IT+0x48>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b592:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b596:	e02d      	b.n	800b5f4 <UART_Start_Receive_IT+0xa4>
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	22ff      	movs	r2, #255	@ 0xff
 800b59c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b5a0:	e028      	b.n	800b5f4 <UART_Start_Receive_IT+0xa4>
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d10d      	bne.n	800b5c6 <UART_Start_Receive_IT+0x76>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	691b      	ldr	r3, [r3, #16]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d104      	bne.n	800b5bc <UART_Start_Receive_IT+0x6c>
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	22ff      	movs	r2, #255	@ 0xff
 800b5b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b5ba:	e01b      	b.n	800b5f4 <UART_Start_Receive_IT+0xa4>
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	227f      	movs	r2, #127	@ 0x7f
 800b5c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b5c4:	e016      	b.n	800b5f4 <UART_Start_Receive_IT+0xa4>
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5ce:	d10d      	bne.n	800b5ec <UART_Start_Receive_IT+0x9c>
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	691b      	ldr	r3, [r3, #16]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d104      	bne.n	800b5e2 <UART_Start_Receive_IT+0x92>
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	227f      	movs	r2, #127	@ 0x7f
 800b5dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b5e0:	e008      	b.n	800b5f4 <UART_Start_Receive_IT+0xa4>
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	223f      	movs	r2, #63	@ 0x3f
 800b5e6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b5ea:	e003      	b.n	800b5f4 <UART_Start_Receive_IT+0xa4>
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2222      	movs	r2, #34	@ 0x22
 800b600:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	3308      	adds	r3, #8
 800b60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b60e:	e853 3f00 	ldrex	r3, [r3]
 800b612:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b616:	f043 0301 	orr.w	r3, r3, #1
 800b61a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	3308      	adds	r3, #8
 800b622:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b624:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b626:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b628:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b62a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b62c:	e841 2300 	strex	r3, r2, [r1]
 800b630:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b634:	2b00      	cmp	r3, #0
 800b636:	d1e5      	bne.n	800b604 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b640:	d107      	bne.n	800b652 <UART_Start_Receive_IT+0x102>
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	691b      	ldr	r3, [r3, #16]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d103      	bne.n	800b652 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	4a21      	ldr	r2, [pc, #132]	@ (800b6d4 <UART_Start_Receive_IT+0x184>)
 800b64e:	669a      	str	r2, [r3, #104]	@ 0x68
 800b650:	e002      	b.n	800b658 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	4a20      	ldr	r2, [pc, #128]	@ (800b6d8 <UART_Start_Receive_IT+0x188>)
 800b656:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	691b      	ldr	r3, [r3, #16]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d019      	beq.n	800b694 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b668:	e853 3f00 	ldrex	r3, [r3]
 800b66c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b670:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b674:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	461a      	mov	r2, r3
 800b67c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b67e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b680:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b682:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b684:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b686:	e841 2300 	strex	r3, r2, [r1]
 800b68a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1e6      	bne.n	800b660 <UART_Start_Receive_IT+0x110>
 800b692:	e018      	b.n	800b6c6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	e853 3f00 	ldrex	r3, [r3]
 800b6a0:	613b      	str	r3, [r7, #16]
   return(result);
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	f043 0320 	orr.w	r3, r3, #32
 800b6a8:	653b      	str	r3, [r7, #80]	@ 0x50
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6b2:	623b      	str	r3, [r7, #32]
 800b6b4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b6:	69f9      	ldr	r1, [r7, #28]
 800b6b8:	6a3a      	ldr	r2, [r7, #32]
 800b6ba:	e841 2300 	strex	r3, r2, [r1]
 800b6be:	61bb      	str	r3, [r7, #24]
   return(result);
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1e6      	bne.n	800b694 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	375c      	adds	r7, #92	@ 0x5c
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr
 800b6d4:	0800b9e1 	.word	0x0800b9e1
 800b6d8:	0800b825 	.word	0x0800b825

0800b6dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b095      	sub	sp, #84	@ 0x54
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6ec:	e853 3f00 	ldrex	r3, [r3]
 800b6f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	461a      	mov	r2, r3
 800b700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b702:	643b      	str	r3, [r7, #64]	@ 0x40
 800b704:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b706:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b708:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b70a:	e841 2300 	strex	r3, r2, [r1]
 800b70e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b712:	2b00      	cmp	r3, #0
 800b714:	d1e6      	bne.n	800b6e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	3308      	adds	r3, #8
 800b71c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b71e:	6a3b      	ldr	r3, [r7, #32]
 800b720:	e853 3f00 	ldrex	r3, [r3]
 800b724:	61fb      	str	r3, [r7, #28]
   return(result);
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	f023 0301 	bic.w	r3, r3, #1
 800b72c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	3308      	adds	r3, #8
 800b734:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b736:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b738:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b73c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b73e:	e841 2300 	strex	r3, r2, [r1]
 800b742:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b746:	2b00      	cmp	r3, #0
 800b748:	d1e5      	bne.n	800b716 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d118      	bne.n	800b784 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	e853 3f00 	ldrex	r3, [r3]
 800b75e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	f023 0310 	bic.w	r3, r3, #16
 800b766:	647b      	str	r3, [r7, #68]	@ 0x44
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	461a      	mov	r2, r3
 800b76e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b770:	61bb      	str	r3, [r7, #24]
 800b772:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b774:	6979      	ldr	r1, [r7, #20]
 800b776:	69ba      	ldr	r2, [r7, #24]
 800b778:	e841 2300 	strex	r3, r2, [r1]
 800b77c:	613b      	str	r3, [r7, #16]
   return(result);
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d1e6      	bne.n	800b752 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2220      	movs	r2, #32
 800b788:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2200      	movs	r2, #0
 800b790:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b798:	bf00      	nop
 800b79a:	3754      	adds	r7, #84	@ 0x54
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f7ff fa3e 	bl	800ac44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7c8:	bf00      	nop
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b088      	sub	sp, #32
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	e853 3f00 	ldrex	r3, [r3]
 800b7e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7ec:	61fb      	str	r3, [r7, #28]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	69fb      	ldr	r3, [r7, #28]
 800b7f6:	61bb      	str	r3, [r7, #24]
 800b7f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fa:	6979      	ldr	r1, [r7, #20]
 800b7fc:	69ba      	ldr	r2, [r7, #24]
 800b7fe:	e841 2300 	strex	r3, r2, [r1]
 800b802:	613b      	str	r3, [r7, #16]
   return(result);
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d1e6      	bne.n	800b7d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2220      	movs	r2, #32
 800b80e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7ff fa0a 	bl	800ac30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b81c:	bf00      	nop
 800b81e:	3720      	adds	r7, #32
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b09c      	sub	sp, #112	@ 0x70
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b832:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b83c:	2b22      	cmp	r3, #34	@ 0x22
 800b83e:	f040 80be 	bne.w	800b9be <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b848:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b84c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b850:	b2d9      	uxtb	r1, r3
 800b852:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b856:	b2da      	uxtb	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b85c:	400a      	ands	r2, r1
 800b85e:	b2d2      	uxtb	r2, r2
 800b860:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b866:	1c5a      	adds	r2, r3, #1
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b872:	b29b      	uxth	r3, r3
 800b874:	3b01      	subs	r3, #1
 800b876:	b29a      	uxth	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b884:	b29b      	uxth	r3, r3
 800b886:	2b00      	cmp	r3, #0
 800b888:	f040 80a3 	bne.w	800b9d2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b894:	e853 3f00 	ldrex	r3, [r3]
 800b898:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b89a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b89c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b8aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b8ac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b8b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b8b2:	e841 2300 	strex	r3, r2, [r1]
 800b8b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b8b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d1e6      	bne.n	800b88c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	3308      	adds	r3, #8
 800b8c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8c8:	e853 3f00 	ldrex	r3, [r3]
 800b8cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b8ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8d0:	f023 0301 	bic.w	r3, r3, #1
 800b8d4:	667b      	str	r3, [r7, #100]	@ 0x64
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	3308      	adds	r3, #8
 800b8dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b8de:	647a      	str	r2, [r7, #68]	@ 0x44
 800b8e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b8e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8e6:	e841 2300 	strex	r3, r2, [r1]
 800b8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b8ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1e5      	bne.n	800b8be <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2220      	movs	r2, #32
 800b8f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2200      	movs	r2, #0
 800b904:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a34      	ldr	r2, [pc, #208]	@ (800b9dc <UART_RxISR_8BIT+0x1b8>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d01f      	beq.n	800b950 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d018      	beq.n	800b950 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b926:	e853 3f00 	ldrex	r3, [r3]
 800b92a:	623b      	str	r3, [r7, #32]
   return(result);
 800b92c:	6a3b      	ldr	r3, [r7, #32]
 800b92e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b932:	663b      	str	r3, [r7, #96]	@ 0x60
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	461a      	mov	r2, r3
 800b93a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b93c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b93e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b940:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b944:	e841 2300 	strex	r3, r2, [r1]
 800b948:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d1e6      	bne.n	800b91e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b954:	2b01      	cmp	r3, #1
 800b956:	d12e      	bne.n	800b9b6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	e853 3f00 	ldrex	r3, [r3]
 800b96a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f023 0310 	bic.w	r3, r3, #16
 800b972:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	461a      	mov	r2, r3
 800b97a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b97c:	61fb      	str	r3, [r7, #28]
 800b97e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b980:	69b9      	ldr	r1, [r7, #24]
 800b982:	69fa      	ldr	r2, [r7, #28]
 800b984:	e841 2300 	strex	r3, r2, [r1]
 800b988:	617b      	str	r3, [r7, #20]
   return(result);
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d1e6      	bne.n	800b95e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	69db      	ldr	r3, [r3, #28]
 800b996:	f003 0310 	and.w	r3, r3, #16
 800b99a:	2b10      	cmp	r3, #16
 800b99c:	d103      	bne.n	800b9a6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2210      	movs	r2, #16
 800b9a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f7ff f952 	bl	800ac58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b9b4:	e00d      	b.n	800b9d2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f7f6 fbce 	bl	8002158 <HAL_UART_RxCpltCallback>
}
 800b9bc:	e009      	b.n	800b9d2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	8b1b      	ldrh	r3, [r3, #24]
 800b9c4:	b29a      	uxth	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f042 0208 	orr.w	r2, r2, #8
 800b9ce:	b292      	uxth	r2, r2
 800b9d0:	831a      	strh	r2, [r3, #24]
}
 800b9d2:	bf00      	nop
 800b9d4:	3770      	adds	r7, #112	@ 0x70
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	40008000 	.word	0x40008000

0800b9e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b09c      	sub	sp, #112	@ 0x70
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b9ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9f8:	2b22      	cmp	r3, #34	@ 0x22
 800b9fa:	f040 80be 	bne.w	800bb7a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ba04:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ba0e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ba12:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ba16:	4013      	ands	r3, r2
 800ba18:	b29a      	uxth	r2, r3
 800ba1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba1c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba22:	1c9a      	adds	r2, r3, #2
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	3b01      	subs	r3, #1
 800ba32:	b29a      	uxth	r2, r3
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f040 80a3 	bne.w	800bb8e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba50:	e853 3f00 	ldrex	r3, [r3]
 800ba54:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ba56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba5c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	461a      	mov	r2, r3
 800ba64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba66:	657b      	str	r3, [r7, #84]	@ 0x54
 800ba68:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba6e:	e841 2300 	strex	r3, r2, [r1]
 800ba72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ba74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d1e6      	bne.n	800ba48 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	3308      	adds	r3, #8
 800ba80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba84:	e853 3f00 	ldrex	r3, [r3]
 800ba88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba8c:	f023 0301 	bic.w	r3, r3, #1
 800ba90:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	3308      	adds	r3, #8
 800ba98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ba9a:	643a      	str	r2, [r7, #64]	@ 0x40
 800ba9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800baa0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800baa2:	e841 2300 	strex	r3, r2, [r1]
 800baa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800baa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d1e5      	bne.n	800ba7a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2220      	movs	r2, #32
 800bab2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a34      	ldr	r2, [pc, #208]	@ (800bb98 <UART_RxISR_16BIT+0x1b8>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d01f      	beq.n	800bb0c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d018      	beq.n	800bb0c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae0:	6a3b      	ldr	r3, [r7, #32]
 800bae2:	e853 3f00 	ldrex	r3, [r3]
 800bae6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bae8:	69fb      	ldr	r3, [r7, #28]
 800baea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800baee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	461a      	mov	r2, r3
 800baf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800baf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bafa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bafe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb00:	e841 2300 	strex	r3, r2, [r1]
 800bb04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d1e6      	bne.n	800bada <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d12e      	bne.n	800bb72 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	e853 3f00 	ldrex	r3, [r3]
 800bb26:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	f023 0310 	bic.w	r3, r3, #16
 800bb2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	461a      	mov	r2, r3
 800bb36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb38:	61bb      	str	r3, [r7, #24]
 800bb3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3c:	6979      	ldr	r1, [r7, #20]
 800bb3e:	69ba      	ldr	r2, [r7, #24]
 800bb40:	e841 2300 	strex	r3, r2, [r1]
 800bb44:	613b      	str	r3, [r7, #16]
   return(result);
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d1e6      	bne.n	800bb1a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	f003 0310 	and.w	r3, r3, #16
 800bb56:	2b10      	cmp	r3, #16
 800bb58:	d103      	bne.n	800bb62 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2210      	movs	r2, #16
 800bb60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bb68:	4619      	mov	r1, r3
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f7ff f874 	bl	800ac58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bb70:	e00d      	b.n	800bb8e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7f6 faf0 	bl	8002158 <HAL_UART_RxCpltCallback>
}
 800bb78:	e009      	b.n	800bb8e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	8b1b      	ldrh	r3, [r3, #24]
 800bb80:	b29a      	uxth	r2, r3
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f042 0208 	orr.w	r2, r2, #8
 800bb8a:	b292      	uxth	r2, r2
 800bb8c:	831a      	strh	r2, [r3, #24]
}
 800bb8e:	bf00      	nop
 800bb90:	3770      	adds	r7, #112	@ 0x70
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	40008000 	.word	0x40008000

0800bb9c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bba4:	bf00      	nop
 800bba6:	370c      	adds	r7, #12
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <__NVIC_SetPriority>:
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b083      	sub	sp, #12
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	6039      	str	r1, [r7, #0]
 800bbba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bbbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	db0a      	blt.n	800bbda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	b2da      	uxtb	r2, r3
 800bbc8:	490c      	ldr	r1, [pc, #48]	@ (800bbfc <__NVIC_SetPriority+0x4c>)
 800bbca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbce:	0112      	lsls	r2, r2, #4
 800bbd0:	b2d2      	uxtb	r2, r2
 800bbd2:	440b      	add	r3, r1
 800bbd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bbd8:	e00a      	b.n	800bbf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	b2da      	uxtb	r2, r3
 800bbde:	4908      	ldr	r1, [pc, #32]	@ (800bc00 <__NVIC_SetPriority+0x50>)
 800bbe0:	79fb      	ldrb	r3, [r7, #7]
 800bbe2:	f003 030f 	and.w	r3, r3, #15
 800bbe6:	3b04      	subs	r3, #4
 800bbe8:	0112      	lsls	r2, r2, #4
 800bbea:	b2d2      	uxtb	r2, r2
 800bbec:	440b      	add	r3, r1
 800bbee:	761a      	strb	r2, [r3, #24]
}
 800bbf0:	bf00      	nop
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr
 800bbfc:	e000e100 	.word	0xe000e100
 800bc00:	e000ed00 	.word	0xe000ed00

0800bc04 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bc04:	b580      	push	{r7, lr}
 800bc06:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bc08:	4b05      	ldr	r3, [pc, #20]	@ (800bc20 <SysTick_Handler+0x1c>)
 800bc0a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bc0c:	f001 fec6 	bl	800d99c <xTaskGetSchedulerState>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d001      	beq.n	800bc1a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bc16:	f002 fcbf 	bl	800e598 <xPortSysTickHandler>
  }
}
 800bc1a:	bf00      	nop
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	e000e010 	.word	0xe000e010

0800bc24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bc24:	b580      	push	{r7, lr}
 800bc26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bc28:	2100      	movs	r1, #0
 800bc2a:	f06f 0004 	mvn.w	r0, #4
 800bc2e:	f7ff ffbf 	bl	800bbb0 <__NVIC_SetPriority>
#endif
}
 800bc32:	bf00      	nop
 800bc34:	bd80      	pop	{r7, pc}
	...

0800bc38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc3e:	f3ef 8305 	mrs	r3, IPSR
 800bc42:	603b      	str	r3, [r7, #0]
  return(result);
 800bc44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d003      	beq.n	800bc52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bc4a:	f06f 0305 	mvn.w	r3, #5
 800bc4e:	607b      	str	r3, [r7, #4]
 800bc50:	e00c      	b.n	800bc6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bc52:	4b0a      	ldr	r3, [pc, #40]	@ (800bc7c <osKernelInitialize+0x44>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d105      	bne.n	800bc66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bc5a:	4b08      	ldr	r3, [pc, #32]	@ (800bc7c <osKernelInitialize+0x44>)
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bc60:	2300      	movs	r3, #0
 800bc62:	607b      	str	r3, [r7, #4]
 800bc64:	e002      	b.n	800bc6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bc66:	f04f 33ff 	mov.w	r3, #4294967295
 800bc6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bc6c:	687b      	ldr	r3, [r7, #4]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	370c      	adds	r7, #12
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	20000490 	.word	0x20000490

0800bc80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc86:	f3ef 8305 	mrs	r3, IPSR
 800bc8a:	603b      	str	r3, [r7, #0]
  return(result);
 800bc8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d003      	beq.n	800bc9a <osKernelStart+0x1a>
    stat = osErrorISR;
 800bc92:	f06f 0305 	mvn.w	r3, #5
 800bc96:	607b      	str	r3, [r7, #4]
 800bc98:	e010      	b.n	800bcbc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bc9a:	4b0b      	ldr	r3, [pc, #44]	@ (800bcc8 <osKernelStart+0x48>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d109      	bne.n	800bcb6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bca2:	f7ff ffbf 	bl	800bc24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bca6:	4b08      	ldr	r3, [pc, #32]	@ (800bcc8 <osKernelStart+0x48>)
 800bca8:	2202      	movs	r2, #2
 800bcaa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bcac:	f001 fa12 	bl	800d0d4 <vTaskStartScheduler>
      stat = osOK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	607b      	str	r3, [r7, #4]
 800bcb4:	e002      	b.n	800bcbc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bcb6:	f04f 33ff 	mov.w	r3, #4294967295
 800bcba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bcbc:	687b      	ldr	r3, [r7, #4]
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3708      	adds	r7, #8
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	20000490 	.word	0x20000490

0800bccc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b08e      	sub	sp, #56	@ 0x38
 800bcd0:	af04      	add	r7, sp, #16
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcdc:	f3ef 8305 	mrs	r3, IPSR
 800bce0:	617b      	str	r3, [r7, #20]
  return(result);
 800bce2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d17e      	bne.n	800bde6 <osThreadNew+0x11a>
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d07b      	beq.n	800bde6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bcee:	2380      	movs	r3, #128	@ 0x80
 800bcf0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bcf2:	2318      	movs	r3, #24
 800bcf4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bcfa:	f04f 33ff 	mov.w	r3, #4294967295
 800bcfe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d045      	beq.n	800bd92 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d002      	beq.n	800bd14 <osThreadNew+0x48>
        name = attr->name;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	699b      	ldr	r3, [r3, #24]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d002      	beq.n	800bd22 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	699b      	ldr	r3, [r3, #24]
 800bd20:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bd22:	69fb      	ldr	r3, [r7, #28]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d008      	beq.n	800bd3a <osThreadNew+0x6e>
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	2b38      	cmp	r3, #56	@ 0x38
 800bd2c:	d805      	bhi.n	800bd3a <osThreadNew+0x6e>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	f003 0301 	and.w	r3, r3, #1
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d001      	beq.n	800bd3e <osThreadNew+0x72>
        return (NULL);
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	e054      	b.n	800bde8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	695b      	ldr	r3, [r3, #20]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d003      	beq.n	800bd4e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	695b      	ldr	r3, [r3, #20]
 800bd4a:	089b      	lsrs	r3, r3, #2
 800bd4c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00e      	beq.n	800bd74 <osThreadNew+0xa8>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	68db      	ldr	r3, [r3, #12]
 800bd5a:	2ba7      	cmp	r3, #167	@ 0xa7
 800bd5c:	d90a      	bls.n	800bd74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d006      	beq.n	800bd74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	695b      	ldr	r3, [r3, #20]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d002      	beq.n	800bd74 <osThreadNew+0xa8>
        mem = 1;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	61bb      	str	r3, [r7, #24]
 800bd72:	e010      	b.n	800bd96 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	689b      	ldr	r3, [r3, #8]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d10c      	bne.n	800bd96 <osThreadNew+0xca>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d108      	bne.n	800bd96 <osThreadNew+0xca>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	691b      	ldr	r3, [r3, #16]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d104      	bne.n	800bd96 <osThreadNew+0xca>
          mem = 0;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	61bb      	str	r3, [r7, #24]
 800bd90:	e001      	b.n	800bd96 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d110      	bne.n	800bdbe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bda4:	9202      	str	r2, [sp, #8]
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	9300      	str	r3, [sp, #0]
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	6a3a      	ldr	r2, [r7, #32]
 800bdb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f000 ff9a 	bl	800ccec <xTaskCreateStatic>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	613b      	str	r3, [r7, #16]
 800bdbc:	e013      	b.n	800bde6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bdbe:	69bb      	ldr	r3, [r7, #24]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d110      	bne.n	800bde6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bdc4:	6a3b      	ldr	r3, [r7, #32]
 800bdc6:	b29a      	uxth	r2, r3
 800bdc8:	f107 0310 	add.w	r3, r7, #16
 800bdcc:	9301      	str	r3, [sp, #4]
 800bdce:	69fb      	ldr	r3, [r7, #28]
 800bdd0:	9300      	str	r3, [sp, #0]
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bdd6:	68f8      	ldr	r0, [r7, #12]
 800bdd8:	f000 ffe8 	bl	800cdac <xTaskCreate>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d001      	beq.n	800bde6 <osThreadNew+0x11a>
            hTask = NULL;
 800bde2:	2300      	movs	r3, #0
 800bde4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bde6:	693b      	ldr	r3, [r7, #16]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3728      	adds	r7, #40	@ 0x28
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdf8:	f3ef 8305 	mrs	r3, IPSR
 800bdfc:	60bb      	str	r3, [r7, #8]
  return(result);
 800bdfe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be00:	2b00      	cmp	r3, #0
 800be02:	d003      	beq.n	800be0c <osDelay+0x1c>
    stat = osErrorISR;
 800be04:	f06f 0305 	mvn.w	r3, #5
 800be08:	60fb      	str	r3, [r7, #12]
 800be0a:	e007      	b.n	800be1c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800be0c:	2300      	movs	r3, #0
 800be0e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d002      	beq.n	800be1c <osDelay+0x2c>
      vTaskDelay(ticks);
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f001 f926 	bl	800d068 <vTaskDelay>
    }
  }

  return (stat);
 800be1c:	68fb      	ldr	r3, [r7, #12]
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800be26:	b580      	push	{r7, lr}
 800be28:	b08a      	sub	sp, #40	@ 0x28
 800be2a:	af02      	add	r7, sp, #8
 800be2c:	60f8      	str	r0, [r7, #12]
 800be2e:	60b9      	str	r1, [r7, #8]
 800be30:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800be32:	2300      	movs	r3, #0
 800be34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be36:	f3ef 8305 	mrs	r3, IPSR
 800be3a:	613b      	str	r3, [r7, #16]
  return(result);
 800be3c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d175      	bne.n	800bf2e <osSemaphoreNew+0x108>
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d072      	beq.n	800bf2e <osSemaphoreNew+0x108>
 800be48:	68ba      	ldr	r2, [r7, #8]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d86e      	bhi.n	800bf2e <osSemaphoreNew+0x108>
    mem = -1;
 800be50:	f04f 33ff 	mov.w	r3, #4294967295
 800be54:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d015      	beq.n	800be88 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	689b      	ldr	r3, [r3, #8]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d006      	beq.n	800be72 <osSemaphoreNew+0x4c>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	68db      	ldr	r3, [r3, #12]
 800be68:	2b4f      	cmp	r3, #79	@ 0x4f
 800be6a:	d902      	bls.n	800be72 <osSemaphoreNew+0x4c>
        mem = 1;
 800be6c:	2301      	movs	r3, #1
 800be6e:	61bb      	str	r3, [r7, #24]
 800be70:	e00c      	b.n	800be8c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d108      	bne.n	800be8c <osSemaphoreNew+0x66>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	68db      	ldr	r3, [r3, #12]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d104      	bne.n	800be8c <osSemaphoreNew+0x66>
          mem = 0;
 800be82:	2300      	movs	r3, #0
 800be84:	61bb      	str	r3, [r7, #24]
 800be86:	e001      	b.n	800be8c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800be88:	2300      	movs	r3, #0
 800be8a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be92:	d04c      	beq.n	800bf2e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2b01      	cmp	r3, #1
 800be98:	d128      	bne.n	800beec <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d10a      	bne.n	800beb6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	2203      	movs	r2, #3
 800bea6:	9200      	str	r2, [sp, #0]
 800bea8:	2200      	movs	r2, #0
 800beaa:	2100      	movs	r1, #0
 800beac:	2001      	movs	r0, #1
 800beae:	f000 f995 	bl	800c1dc <xQueueGenericCreateStatic>
 800beb2:	61f8      	str	r0, [r7, #28]
 800beb4:	e005      	b.n	800bec2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800beb6:	2203      	movs	r2, #3
 800beb8:	2100      	movs	r1, #0
 800beba:	2001      	movs	r0, #1
 800bebc:	f000 fa0b 	bl	800c2d6 <xQueueGenericCreate>
 800bec0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d022      	beq.n	800bf0e <osSemaphoreNew+0xe8>
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d01f      	beq.n	800bf0e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bece:	2300      	movs	r3, #0
 800bed0:	2200      	movs	r2, #0
 800bed2:	2100      	movs	r1, #0
 800bed4:	69f8      	ldr	r0, [r7, #28]
 800bed6:	f000 facb 	bl	800c470 <xQueueGenericSend>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d016      	beq.n	800bf0e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800bee0:	69f8      	ldr	r0, [r7, #28]
 800bee2:	f000 fd47 	bl	800c974 <vQueueDelete>
            hSemaphore = NULL;
 800bee6:	2300      	movs	r3, #0
 800bee8:	61fb      	str	r3, [r7, #28]
 800beea:	e010      	b.n	800bf0e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800beec:	69bb      	ldr	r3, [r7, #24]
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d108      	bne.n	800bf04 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	461a      	mov	r2, r3
 800bef8:	68b9      	ldr	r1, [r7, #8]
 800befa:	68f8      	ldr	r0, [r7, #12]
 800befc:	f000 fa49 	bl	800c392 <xQueueCreateCountingSemaphoreStatic>
 800bf00:	61f8      	str	r0, [r7, #28]
 800bf02:	e004      	b.n	800bf0e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800bf04:	68b9      	ldr	r1, [r7, #8]
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f000 fa7c 	bl	800c404 <xQueueCreateCountingSemaphore>
 800bf0c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d00c      	beq.n	800bf2e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d003      	beq.n	800bf22 <osSemaphoreNew+0xfc>
          name = attr->name;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	617b      	str	r3, [r7, #20]
 800bf20:	e001      	b.n	800bf26 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800bf22:	2300      	movs	r3, #0
 800bf24:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800bf26:	6979      	ldr	r1, [r7, #20]
 800bf28:	69f8      	ldr	r0, [r7, #28]
 800bf2a:	f000 fe57 	bl	800cbdc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800bf2e:	69fb      	ldr	r3, [r7, #28]
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3720      	adds	r7, #32
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bf38:	b480      	push	{r7}
 800bf3a:	b085      	sub	sp, #20
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	4a07      	ldr	r2, [pc, #28]	@ (800bf64 <vApplicationGetIdleTaskMemory+0x2c>)
 800bf48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	4a06      	ldr	r2, [pc, #24]	@ (800bf68 <vApplicationGetIdleTaskMemory+0x30>)
 800bf4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2280      	movs	r2, #128	@ 0x80
 800bf54:	601a      	str	r2, [r3, #0]
}
 800bf56:	bf00      	nop
 800bf58:	3714      	adds	r7, #20
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop
 800bf64:	20000494 	.word	0x20000494
 800bf68:	2000053c 	.word	0x2000053c

0800bf6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bf6c:	b480      	push	{r7}
 800bf6e:	b085      	sub	sp, #20
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	4a07      	ldr	r2, [pc, #28]	@ (800bf98 <vApplicationGetTimerTaskMemory+0x2c>)
 800bf7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	4a06      	ldr	r2, [pc, #24]	@ (800bf9c <vApplicationGetTimerTaskMemory+0x30>)
 800bf82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bf8a:	601a      	str	r2, [r3, #0]
}
 800bf8c:	bf00      	nop
 800bf8e:	3714      	adds	r7, #20
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr
 800bf98:	2000073c 	.word	0x2000073c
 800bf9c:	200007e4 	.word	0x200007e4

0800bfa0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f103 0208 	add.w	r2, r3, #8
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f04f 32ff 	mov.w	r2, #4294967295
 800bfb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f103 0208 	add.w	r2, r3, #8
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f103 0208 	add.w	r2, r3, #8
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bfd4:	bf00      	nop
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bfee:	bf00      	nop
 800bff0:	370c      	adds	r7, #12
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr

0800bffa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bffa:	b480      	push	{r7}
 800bffc:	b085      	sub	sp, #20
 800bffe:	af00      	add	r7, sp, #0
 800c000:	6078      	str	r0, [r7, #4]
 800c002:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	68fa      	ldr	r2, [r7, #12]
 800c00e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	689a      	ldr	r2, [r3, #8]
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	683a      	ldr	r2, [r7, #0]
 800c01e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	683a      	ldr	r2, [r7, #0]
 800c024:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	1c5a      	adds	r2, r3, #1
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	601a      	str	r2, [r3, #0]
}
 800c036:	bf00      	nop
 800c038:	3714      	adds	r7, #20
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr

0800c042 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c042:	b480      	push	{r7}
 800c044:	b085      	sub	sp, #20
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
 800c04a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c058:	d103      	bne.n	800c062 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	691b      	ldr	r3, [r3, #16]
 800c05e:	60fb      	str	r3, [r7, #12]
 800c060:	e00c      	b.n	800c07c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	3308      	adds	r3, #8
 800c066:	60fb      	str	r3, [r7, #12]
 800c068:	e002      	b.n	800c070 <vListInsert+0x2e>
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	60fb      	str	r3, [r7, #12]
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	429a      	cmp	r2, r3
 800c07a:	d2f6      	bcs.n	800c06a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	685a      	ldr	r2, [r3, #4]
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	683a      	ldr	r2, [r7, #0]
 800c08a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	683a      	ldr	r2, [r7, #0]
 800c096:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	1c5a      	adds	r2, r3, #1
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	601a      	str	r2, [r3, #0]
}
 800c0a8:	bf00      	nop
 800c0aa:	3714      	adds	r7, #20
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	6892      	ldr	r2, [r2, #8]
 800c0ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	6852      	ldr	r2, [r2, #4]
 800c0d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d103      	bne.n	800c0e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	689a      	ldr	r2, [r3, #8]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	1e5a      	subs	r2, r3, #1
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3714      	adds	r7, #20
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d10b      	bne.n	800c134 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c11c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c120:	f383 8811 	msr	BASEPRI, r3
 800c124:	f3bf 8f6f 	isb	sy
 800c128:	f3bf 8f4f 	dsb	sy
 800c12c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c12e:	bf00      	nop
 800c130:	bf00      	nop
 800c132:	e7fd      	b.n	800c130 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c134:	f002 f9a0 	bl	800e478 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c140:	68f9      	ldr	r1, [r7, #12]
 800c142:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c144:	fb01 f303 	mul.w	r3, r1, r3
 800c148:	441a      	add	r2, r3
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2200      	movs	r2, #0
 800c152:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681a      	ldr	r2, [r3, #0]
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c164:	3b01      	subs	r3, #1
 800c166:	68f9      	ldr	r1, [r7, #12]
 800c168:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c16a:	fb01 f303 	mul.w	r3, r1, r3
 800c16e:	441a      	add	r2, r3
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	22ff      	movs	r2, #255	@ 0xff
 800c178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	22ff      	movs	r2, #255	@ 0xff
 800c180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d114      	bne.n	800c1b4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	691b      	ldr	r3, [r3, #16]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d01a      	beq.n	800c1c8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	3310      	adds	r3, #16
 800c196:	4618      	mov	r0, r3
 800c198:	f001 fa3a 	bl	800d610 <xTaskRemoveFromEventList>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d012      	beq.n	800c1c8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c1a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c1d8 <xQueueGenericReset+0xd0>)
 800c1a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1a8:	601a      	str	r2, [r3, #0]
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	f3bf 8f6f 	isb	sy
 800c1b2:	e009      	b.n	800c1c8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	3310      	adds	r3, #16
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7ff fef1 	bl	800bfa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	3324      	adds	r3, #36	@ 0x24
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7ff feec 	bl	800bfa0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c1c8:	f002 f988 	bl	800e4dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c1cc:	2301      	movs	r3, #1
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	e000ed04 	.word	0xe000ed04

0800c1dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b08e      	sub	sp, #56	@ 0x38
 800c1e0:	af02      	add	r7, sp, #8
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	60b9      	str	r1, [r7, #8]
 800c1e6:	607a      	str	r2, [r7, #4]
 800c1e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d10b      	bne.n	800c208 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f4:	f383 8811 	msr	BASEPRI, r3
 800c1f8:	f3bf 8f6f 	isb	sy
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c202:	bf00      	nop
 800c204:	bf00      	nop
 800c206:	e7fd      	b.n	800c204 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d10b      	bne.n	800c226 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c212:	f383 8811 	msr	BASEPRI, r3
 800c216:	f3bf 8f6f 	isb	sy
 800c21a:	f3bf 8f4f 	dsb	sy
 800c21e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c220:	bf00      	nop
 800c222:	bf00      	nop
 800c224:	e7fd      	b.n	800c222 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d002      	beq.n	800c232 <xQueueGenericCreateStatic+0x56>
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d001      	beq.n	800c236 <xQueueGenericCreateStatic+0x5a>
 800c232:	2301      	movs	r3, #1
 800c234:	e000      	b.n	800c238 <xQueueGenericCreateStatic+0x5c>
 800c236:	2300      	movs	r3, #0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d10b      	bne.n	800c254 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c240:	f383 8811 	msr	BASEPRI, r3
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	623b      	str	r3, [r7, #32]
}
 800c24e:	bf00      	nop
 800c250:	bf00      	nop
 800c252:	e7fd      	b.n	800c250 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d102      	bne.n	800c260 <xQueueGenericCreateStatic+0x84>
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d101      	bne.n	800c264 <xQueueGenericCreateStatic+0x88>
 800c260:	2301      	movs	r3, #1
 800c262:	e000      	b.n	800c266 <xQueueGenericCreateStatic+0x8a>
 800c264:	2300      	movs	r3, #0
 800c266:	2b00      	cmp	r3, #0
 800c268:	d10b      	bne.n	800c282 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c26a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c26e:	f383 8811 	msr	BASEPRI, r3
 800c272:	f3bf 8f6f 	isb	sy
 800c276:	f3bf 8f4f 	dsb	sy
 800c27a:	61fb      	str	r3, [r7, #28]
}
 800c27c:	bf00      	nop
 800c27e:	bf00      	nop
 800c280:	e7fd      	b.n	800c27e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c282:	2350      	movs	r3, #80	@ 0x50
 800c284:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	2b50      	cmp	r3, #80	@ 0x50
 800c28a:	d00b      	beq.n	800c2a4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c28c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c290:	f383 8811 	msr	BASEPRI, r3
 800c294:	f3bf 8f6f 	isb	sy
 800c298:	f3bf 8f4f 	dsb	sy
 800c29c:	61bb      	str	r3, [r7, #24]
}
 800c29e:	bf00      	nop
 800c2a0:	bf00      	nop
 800c2a2:	e7fd      	b.n	800c2a0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c2a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c2aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d00d      	beq.n	800c2cc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c2b8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2be:	9300      	str	r3, [sp, #0]
 800c2c0:	4613      	mov	r3, r2
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	68b9      	ldr	r1, [r7, #8]
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	f000 f840 	bl	800c34c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3730      	adds	r7, #48	@ 0x30
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b08a      	sub	sp, #40	@ 0x28
 800c2da:	af02      	add	r7, sp, #8
 800c2dc:	60f8      	str	r0, [r7, #12]
 800c2de:	60b9      	str	r1, [r7, #8]
 800c2e0:	4613      	mov	r3, r2
 800c2e2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d10b      	bne.n	800c302 <xQueueGenericCreate+0x2c>
	__asm volatile
 800c2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ee:	f383 8811 	msr	BASEPRI, r3
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	f3bf 8f4f 	dsb	sy
 800c2fa:	613b      	str	r3, [r7, #16]
}
 800c2fc:	bf00      	nop
 800c2fe:	bf00      	nop
 800c300:	e7fd      	b.n	800c2fe <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	68ba      	ldr	r2, [r7, #8]
 800c306:	fb02 f303 	mul.w	r3, r2, r3
 800c30a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	3350      	adds	r3, #80	@ 0x50
 800c310:	4618      	mov	r0, r3
 800c312:	f002 f9d3 	bl	800e6bc <pvPortMalloc>
 800c316:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d011      	beq.n	800c342 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	3350      	adds	r3, #80	@ 0x50
 800c326:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c328:	69bb      	ldr	r3, [r7, #24]
 800c32a:	2200      	movs	r2, #0
 800c32c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c330:	79fa      	ldrb	r2, [r7, #7]
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	9300      	str	r3, [sp, #0]
 800c336:	4613      	mov	r3, r2
 800c338:	697a      	ldr	r2, [r7, #20]
 800c33a:	68b9      	ldr	r1, [r7, #8]
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	f000 f805 	bl	800c34c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c342:	69bb      	ldr	r3, [r7, #24]
	}
 800c344:	4618      	mov	r0, r3
 800c346:	3720      	adds	r7, #32
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	60f8      	str	r0, [r7, #12]
 800c354:	60b9      	str	r1, [r7, #8]
 800c356:	607a      	str	r2, [r7, #4]
 800c358:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d103      	bne.n	800c368 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	69ba      	ldr	r2, [r7, #24]
 800c364:	601a      	str	r2, [r3, #0]
 800c366:	e002      	b.n	800c36e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	68ba      	ldr	r2, [r7, #8]
 800c378:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c37a:	2101      	movs	r1, #1
 800c37c:	69b8      	ldr	r0, [r7, #24]
 800c37e:	f7ff fec3 	bl	800c108 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	78fa      	ldrb	r2, [r7, #3]
 800c386:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c38a:	bf00      	nop
 800c38c:	3710      	adds	r7, #16
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c392:	b580      	push	{r7, lr}
 800c394:	b08a      	sub	sp, #40	@ 0x28
 800c396:	af02      	add	r7, sp, #8
 800c398:	60f8      	str	r0, [r7, #12]
 800c39a:	60b9      	str	r1, [r7, #8]
 800c39c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d10b      	bne.n	800c3bc <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800c3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	61bb      	str	r3, [r7, #24]
}
 800c3b6:	bf00      	nop
 800c3b8:	bf00      	nop
 800c3ba:	e7fd      	b.n	800c3b8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c3bc:	68ba      	ldr	r2, [r7, #8]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d90b      	bls.n	800c3dc <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800c3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c8:	f383 8811 	msr	BASEPRI, r3
 800c3cc:	f3bf 8f6f 	isb	sy
 800c3d0:	f3bf 8f4f 	dsb	sy
 800c3d4:	617b      	str	r3, [r7, #20]
}
 800c3d6:	bf00      	nop
 800c3d8:	bf00      	nop
 800c3da:	e7fd      	b.n	800c3d8 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c3dc:	2302      	movs	r3, #2
 800c3de:	9300      	str	r3, [sp, #0]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	68f8      	ldr	r0, [r7, #12]
 800c3e8:	f7ff fef8 	bl	800c1dc <xQueueGenericCreateStatic>
 800c3ec:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d002      	beq.n	800c3fa <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	68ba      	ldr	r2, [r7, #8]
 800c3f8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c3fa:	69fb      	ldr	r3, [r7, #28]
	}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3720      	adds	r7, #32
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c404:	b580      	push	{r7, lr}
 800c406:	b086      	sub	sp, #24
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d10b      	bne.n	800c42c <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800c414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c418:	f383 8811 	msr	BASEPRI, r3
 800c41c:	f3bf 8f6f 	isb	sy
 800c420:	f3bf 8f4f 	dsb	sy
 800c424:	613b      	str	r3, [r7, #16]
}
 800c426:	bf00      	nop
 800c428:	bf00      	nop
 800c42a:	e7fd      	b.n	800c428 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c42c:	683a      	ldr	r2, [r7, #0]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	429a      	cmp	r2, r3
 800c432:	d90b      	bls.n	800c44c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800c434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c438:	f383 8811 	msr	BASEPRI, r3
 800c43c:	f3bf 8f6f 	isb	sy
 800c440:	f3bf 8f4f 	dsb	sy
 800c444:	60fb      	str	r3, [r7, #12]
}
 800c446:	bf00      	nop
 800c448:	bf00      	nop
 800c44a:	e7fd      	b.n	800c448 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c44c:	2202      	movs	r2, #2
 800c44e:	2100      	movs	r1, #0
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f7ff ff40 	bl	800c2d6 <xQueueGenericCreate>
 800c456:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d002      	beq.n	800c464 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	683a      	ldr	r2, [r7, #0]
 800c462:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c464:	697b      	ldr	r3, [r7, #20]
	}
 800c466:	4618      	mov	r0, r3
 800c468:	3718      	adds	r7, #24
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
	...

0800c470 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b08e      	sub	sp, #56	@ 0x38
 800c474:	af00      	add	r7, sp, #0
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	607a      	str	r2, [r7, #4]
 800c47c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c47e:	2300      	movs	r3, #0
 800c480:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10b      	bne.n	800c4a4 <xQueueGenericSend+0x34>
	__asm volatile
 800c48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c490:	f383 8811 	msr	BASEPRI, r3
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c49e:	bf00      	nop
 800c4a0:	bf00      	nop
 800c4a2:	e7fd      	b.n	800c4a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d103      	bne.n	800c4b2 <xQueueGenericSend+0x42>
 800c4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d101      	bne.n	800c4b6 <xQueueGenericSend+0x46>
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e000      	b.n	800c4b8 <xQueueGenericSend+0x48>
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d10b      	bne.n	800c4d4 <xQueueGenericSend+0x64>
	__asm volatile
 800c4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4c0:	f383 8811 	msr	BASEPRI, r3
 800c4c4:	f3bf 8f6f 	isb	sy
 800c4c8:	f3bf 8f4f 	dsb	sy
 800c4cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c4ce:	bf00      	nop
 800c4d0:	bf00      	nop
 800c4d2:	e7fd      	b.n	800c4d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	d103      	bne.n	800c4e2 <xQueueGenericSend+0x72>
 800c4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d101      	bne.n	800c4e6 <xQueueGenericSend+0x76>
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e000      	b.n	800c4e8 <xQueueGenericSend+0x78>
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d10b      	bne.n	800c504 <xQueueGenericSend+0x94>
	__asm volatile
 800c4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4f0:	f383 8811 	msr	BASEPRI, r3
 800c4f4:	f3bf 8f6f 	isb	sy
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	623b      	str	r3, [r7, #32]
}
 800c4fe:	bf00      	nop
 800c500:	bf00      	nop
 800c502:	e7fd      	b.n	800c500 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c504:	f001 fa4a 	bl	800d99c <xTaskGetSchedulerState>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d102      	bne.n	800c514 <xQueueGenericSend+0xa4>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d101      	bne.n	800c518 <xQueueGenericSend+0xa8>
 800c514:	2301      	movs	r3, #1
 800c516:	e000      	b.n	800c51a <xQueueGenericSend+0xaa>
 800c518:	2300      	movs	r3, #0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d10b      	bne.n	800c536 <xQueueGenericSend+0xc6>
	__asm volatile
 800c51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c522:	f383 8811 	msr	BASEPRI, r3
 800c526:	f3bf 8f6f 	isb	sy
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	61fb      	str	r3, [r7, #28]
}
 800c530:	bf00      	nop
 800c532:	bf00      	nop
 800c534:	e7fd      	b.n	800c532 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c536:	f001 ff9f 	bl	800e478 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c53c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c542:	429a      	cmp	r2, r3
 800c544:	d302      	bcc.n	800c54c <xQueueGenericSend+0xdc>
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	2b02      	cmp	r3, #2
 800c54a:	d129      	bne.n	800c5a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c54c:	683a      	ldr	r2, [r7, #0]
 800c54e:	68b9      	ldr	r1, [r7, #8]
 800c550:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c552:	f000 fa33 	bl	800c9bc <prvCopyDataToQueue>
 800c556:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c55a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d010      	beq.n	800c582 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c562:	3324      	adds	r3, #36	@ 0x24
 800c564:	4618      	mov	r0, r3
 800c566:	f001 f853 	bl	800d610 <xTaskRemoveFromEventList>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d013      	beq.n	800c598 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c570:	4b3f      	ldr	r3, [pc, #252]	@ (800c670 <xQueueGenericSend+0x200>)
 800c572:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c576:	601a      	str	r2, [r3, #0]
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	f3bf 8f6f 	isb	sy
 800c580:	e00a      	b.n	800c598 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c584:	2b00      	cmp	r3, #0
 800c586:	d007      	beq.n	800c598 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c588:	4b39      	ldr	r3, [pc, #228]	@ (800c670 <xQueueGenericSend+0x200>)
 800c58a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c58e:	601a      	str	r2, [r3, #0]
 800c590:	f3bf 8f4f 	dsb	sy
 800c594:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c598:	f001 ffa0 	bl	800e4dc <vPortExitCritical>
				return pdPASS;
 800c59c:	2301      	movs	r3, #1
 800c59e:	e063      	b.n	800c668 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d103      	bne.n	800c5ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c5a6:	f001 ff99 	bl	800e4dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	e05c      	b.n	800c668 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d106      	bne.n	800c5c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c5b4:	f107 0314 	add.w	r3, r7, #20
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f001 f88d 	bl	800d6d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c5c2:	f001 ff8b 	bl	800e4dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c5c6:	f000 fdf5 	bl	800d1b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c5ca:	f001 ff55 	bl	800e478 <vPortEnterCritical>
 800c5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c5d4:	b25b      	sxtb	r3, r3
 800c5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5da:	d103      	bne.n	800c5e4 <xQueueGenericSend+0x174>
 800c5dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c5ea:	b25b      	sxtb	r3, r3
 800c5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f0:	d103      	bne.n	800c5fa <xQueueGenericSend+0x18a>
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c5fa:	f001 ff6f 	bl	800e4dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c5fe:	1d3a      	adds	r2, r7, #4
 800c600:	f107 0314 	add.w	r3, r7, #20
 800c604:	4611      	mov	r1, r2
 800c606:	4618      	mov	r0, r3
 800c608:	f001 f87c 	bl	800d704 <xTaskCheckForTimeOut>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d124      	bne.n	800c65c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c612:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c614:	f000 faca 	bl	800cbac <prvIsQueueFull>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d018      	beq.n	800c650 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c620:	3310      	adds	r3, #16
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	4611      	mov	r1, r2
 800c626:	4618      	mov	r0, r3
 800c628:	f000 ffa0 	bl	800d56c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c62c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c62e:	f000 fa55 	bl	800cadc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c632:	f000 fdcd 	bl	800d1d0 <xTaskResumeAll>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f47f af7c 	bne.w	800c536 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c63e:	4b0c      	ldr	r3, [pc, #48]	@ (800c670 <xQueueGenericSend+0x200>)
 800c640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c644:	601a      	str	r2, [r3, #0]
 800c646:	f3bf 8f4f 	dsb	sy
 800c64a:	f3bf 8f6f 	isb	sy
 800c64e:	e772      	b.n	800c536 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c650:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c652:	f000 fa43 	bl	800cadc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c656:	f000 fdbb 	bl	800d1d0 <xTaskResumeAll>
 800c65a:	e76c      	b.n	800c536 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c65c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c65e:	f000 fa3d 	bl	800cadc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c662:	f000 fdb5 	bl	800d1d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c666:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3738      	adds	r7, #56	@ 0x38
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	e000ed04 	.word	0xe000ed04

0800c674 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b090      	sub	sp, #64	@ 0x40
 800c678:	af00      	add	r7, sp, #0
 800c67a:	60f8      	str	r0, [r7, #12]
 800c67c:	60b9      	str	r1, [r7, #8]
 800c67e:	607a      	str	r2, [r7, #4]
 800c680:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d10b      	bne.n	800c6a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c690:	f383 8811 	msr	BASEPRI, r3
 800c694:	f3bf 8f6f 	isb	sy
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c69e:	bf00      	nop
 800c6a0:	bf00      	nop
 800c6a2:	e7fd      	b.n	800c6a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d103      	bne.n	800c6b2 <xQueueGenericSendFromISR+0x3e>
 800c6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d101      	bne.n	800c6b6 <xQueueGenericSendFromISR+0x42>
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	e000      	b.n	800c6b8 <xQueueGenericSendFromISR+0x44>
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d10b      	bne.n	800c6d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c6bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c0:	f383 8811 	msr	BASEPRI, r3
 800c6c4:	f3bf 8f6f 	isb	sy
 800c6c8:	f3bf 8f4f 	dsb	sy
 800c6cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c6ce:	bf00      	nop
 800c6d0:	bf00      	nop
 800c6d2:	e7fd      	b.n	800c6d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d103      	bne.n	800c6e2 <xQueueGenericSendFromISR+0x6e>
 800c6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d101      	bne.n	800c6e6 <xQueueGenericSendFromISR+0x72>
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	e000      	b.n	800c6e8 <xQueueGenericSendFromISR+0x74>
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d10b      	bne.n	800c704 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c6ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6f0:	f383 8811 	msr	BASEPRI, r3
 800c6f4:	f3bf 8f6f 	isb	sy
 800c6f8:	f3bf 8f4f 	dsb	sy
 800c6fc:	623b      	str	r3, [r7, #32]
}
 800c6fe:	bf00      	nop
 800c700:	bf00      	nop
 800c702:	e7fd      	b.n	800c700 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c704:	f001 ff98 	bl	800e638 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c708:	f3ef 8211 	mrs	r2, BASEPRI
 800c70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c710:	f383 8811 	msr	BASEPRI, r3
 800c714:	f3bf 8f6f 	isb	sy
 800c718:	f3bf 8f4f 	dsb	sy
 800c71c:	61fa      	str	r2, [r7, #28]
 800c71e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c720:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c722:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c726:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c72a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d302      	bcc.n	800c736 <xQueueGenericSendFromISR+0xc2>
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	2b02      	cmp	r3, #2
 800c734:	d12f      	bne.n	800c796 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c738:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c73c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c744:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c746:	683a      	ldr	r2, [r7, #0]
 800c748:	68b9      	ldr	r1, [r7, #8]
 800c74a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c74c:	f000 f936 	bl	800c9bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c750:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c758:	d112      	bne.n	800c780 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c75c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d016      	beq.n	800c790 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c764:	3324      	adds	r3, #36	@ 0x24
 800c766:	4618      	mov	r0, r3
 800c768:	f000 ff52 	bl	800d610 <xTaskRemoveFromEventList>
 800c76c:	4603      	mov	r3, r0
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00e      	beq.n	800c790 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d00b      	beq.n	800c790 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	601a      	str	r2, [r3, #0]
 800c77e:	e007      	b.n	800c790 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c780:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c784:	3301      	adds	r3, #1
 800c786:	b2db      	uxtb	r3, r3
 800c788:	b25a      	sxtb	r2, r3
 800c78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c78c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c790:	2301      	movs	r3, #1
 800c792:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c794:	e001      	b.n	800c79a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c796:	2300      	movs	r3, #0
 800c798:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c79a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c79c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c7a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c7a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3740      	adds	r7, #64	@ 0x40
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b08c      	sub	sp, #48	@ 0x30
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d10b      	bne.n	800c7e2 <xQueueReceive+0x32>
	__asm volatile
 800c7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ce:	f383 8811 	msr	BASEPRI, r3
 800c7d2:	f3bf 8f6f 	isb	sy
 800c7d6:	f3bf 8f4f 	dsb	sy
 800c7da:	623b      	str	r3, [r7, #32]
}
 800c7dc:	bf00      	nop
 800c7de:	bf00      	nop
 800c7e0:	e7fd      	b.n	800c7de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d103      	bne.n	800c7f0 <xQueueReceive+0x40>
 800c7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d101      	bne.n	800c7f4 <xQueueReceive+0x44>
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	e000      	b.n	800c7f6 <xQueueReceive+0x46>
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d10b      	bne.n	800c812 <xQueueReceive+0x62>
	__asm volatile
 800c7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7fe:	f383 8811 	msr	BASEPRI, r3
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	f3bf 8f4f 	dsb	sy
 800c80a:	61fb      	str	r3, [r7, #28]
}
 800c80c:	bf00      	nop
 800c80e:	bf00      	nop
 800c810:	e7fd      	b.n	800c80e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c812:	f001 f8c3 	bl	800d99c <xTaskGetSchedulerState>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d102      	bne.n	800c822 <xQueueReceive+0x72>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d101      	bne.n	800c826 <xQueueReceive+0x76>
 800c822:	2301      	movs	r3, #1
 800c824:	e000      	b.n	800c828 <xQueueReceive+0x78>
 800c826:	2300      	movs	r3, #0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d10b      	bne.n	800c844 <xQueueReceive+0x94>
	__asm volatile
 800c82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c830:	f383 8811 	msr	BASEPRI, r3
 800c834:	f3bf 8f6f 	isb	sy
 800c838:	f3bf 8f4f 	dsb	sy
 800c83c:	61bb      	str	r3, [r7, #24]
}
 800c83e:	bf00      	nop
 800c840:	bf00      	nop
 800c842:	e7fd      	b.n	800c840 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c844:	f001 fe18 	bl	800e478 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c84a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c84c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c850:	2b00      	cmp	r3, #0
 800c852:	d01f      	beq.n	800c894 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c854:	68b9      	ldr	r1, [r7, #8]
 800c856:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c858:	f000 f91a 	bl	800ca90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c85e:	1e5a      	subs	r2, r3, #1
 800c860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c862:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c866:	691b      	ldr	r3, [r3, #16]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00f      	beq.n	800c88c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c86e:	3310      	adds	r3, #16
 800c870:	4618      	mov	r0, r3
 800c872:	f000 fecd 	bl	800d610 <xTaskRemoveFromEventList>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d007      	beq.n	800c88c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c87c:	4b3c      	ldr	r3, [pc, #240]	@ (800c970 <xQueueReceive+0x1c0>)
 800c87e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c882:	601a      	str	r2, [r3, #0]
 800c884:	f3bf 8f4f 	dsb	sy
 800c888:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c88c:	f001 fe26 	bl	800e4dc <vPortExitCritical>
				return pdPASS;
 800c890:	2301      	movs	r3, #1
 800c892:	e069      	b.n	800c968 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d103      	bne.n	800c8a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c89a:	f001 fe1f 	bl	800e4dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	e062      	b.n	800c968 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d106      	bne.n	800c8b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c8a8:	f107 0310 	add.w	r3, r7, #16
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f000 ff13 	bl	800d6d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c8b6:	f001 fe11 	bl	800e4dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8ba:	f000 fc7b 	bl	800d1b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8be:	f001 fddb 	bl	800e478 <vPortEnterCritical>
 800c8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c8c8:	b25b      	sxtb	r3, r3
 800c8ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ce:	d103      	bne.n	800c8d8 <xQueueReceive+0x128>
 800c8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c8d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c8de:	b25b      	sxtb	r3, r3
 800c8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e4:	d103      	bne.n	800c8ee <xQueueReceive+0x13e>
 800c8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c8ee:	f001 fdf5 	bl	800e4dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8f2:	1d3a      	adds	r2, r7, #4
 800c8f4:	f107 0310 	add.w	r3, r7, #16
 800c8f8:	4611      	mov	r1, r2
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f000 ff02 	bl	800d704 <xTaskCheckForTimeOut>
 800c900:	4603      	mov	r3, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d123      	bne.n	800c94e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c908:	f000 f93a 	bl	800cb80 <prvIsQueueEmpty>
 800c90c:	4603      	mov	r3, r0
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d017      	beq.n	800c942 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c914:	3324      	adds	r3, #36	@ 0x24
 800c916:	687a      	ldr	r2, [r7, #4]
 800c918:	4611      	mov	r1, r2
 800c91a:	4618      	mov	r0, r3
 800c91c:	f000 fe26 	bl	800d56c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c920:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c922:	f000 f8db 	bl	800cadc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c926:	f000 fc53 	bl	800d1d0 <xTaskResumeAll>
 800c92a:	4603      	mov	r3, r0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d189      	bne.n	800c844 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c930:	4b0f      	ldr	r3, [pc, #60]	@ (800c970 <xQueueReceive+0x1c0>)
 800c932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c936:	601a      	str	r2, [r3, #0]
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	f3bf 8f6f 	isb	sy
 800c940:	e780      	b.n	800c844 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c944:	f000 f8ca 	bl	800cadc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c948:	f000 fc42 	bl	800d1d0 <xTaskResumeAll>
 800c94c:	e77a      	b.n	800c844 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c94e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c950:	f000 f8c4 	bl	800cadc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c954:	f000 fc3c 	bl	800d1d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c958:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c95a:	f000 f911 	bl	800cb80 <prvIsQueueEmpty>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	f43f af6f 	beq.w	800c844 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c966:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3730      	adds	r7, #48	@ 0x30
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	e000ed04 	.word	0xe000ed04

0800c974 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d10b      	bne.n	800c99e <vQueueDelete+0x2a>
	__asm volatile
 800c986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c98a:	f383 8811 	msr	BASEPRI, r3
 800c98e:	f3bf 8f6f 	isb	sy
 800c992:	f3bf 8f4f 	dsb	sy
 800c996:	60bb      	str	r3, [r7, #8]
}
 800c998:	bf00      	nop
 800c99a:	bf00      	nop
 800c99c:	e7fd      	b.n	800c99a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c99e:	68f8      	ldr	r0, [r7, #12]
 800c9a0:	f000 f946 	bl	800cc30 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d102      	bne.n	800c9b4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800c9ae:	68f8      	ldr	r0, [r7, #12]
 800c9b0:	f001 ff52 	bl	800e858 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c9b4:	bf00      	nop
 800c9b6:	3710      	adds	r7, #16
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b086      	sub	sp, #24
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d10d      	bne.n	800c9f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d14d      	bne.n	800ca7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	689b      	ldr	r3, [r3, #8]
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f000 fff6 	bl	800d9d8 <xTaskPriorityDisinherit>
 800c9ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	609a      	str	r2, [r3, #8]
 800c9f4:	e043      	b.n	800ca7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d119      	bne.n	800ca30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	6858      	ldr	r0, [r3, #4]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca04:	461a      	mov	r2, r3
 800ca06:	68b9      	ldr	r1, [r7, #8]
 800ca08:	f002 f9ce 	bl	800eda8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	685a      	ldr	r2, [r3, #4]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca14:	441a      	add	r2, r3
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	685a      	ldr	r2, [r3, #4]
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	689b      	ldr	r3, [r3, #8]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d32b      	bcc.n	800ca7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	605a      	str	r2, [r3, #4]
 800ca2e:	e026      	b.n	800ca7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	68d8      	ldr	r0, [r3, #12]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca38:	461a      	mov	r2, r3
 800ca3a:	68b9      	ldr	r1, [r7, #8]
 800ca3c:	f002 f9b4 	bl	800eda8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	68da      	ldr	r2, [r3, #12]
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca48:	425b      	negs	r3, r3
 800ca4a:	441a      	add	r2, r3
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	68da      	ldr	r2, [r3, #12]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d207      	bcs.n	800ca6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	689a      	ldr	r2, [r3, #8]
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca64:	425b      	negs	r3, r3
 800ca66:	441a      	add	r2, r3
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b02      	cmp	r3, #2
 800ca70:	d105      	bne.n	800ca7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d002      	beq.n	800ca7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	3b01      	subs	r3, #1
 800ca7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	1c5a      	adds	r2, r3, #1
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ca86:	697b      	ldr	r3, [r7, #20]
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3718      	adds	r7, #24
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d018      	beq.n	800cad4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	68da      	ldr	r2, [r3, #12]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caaa:	441a      	add	r2, r3
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	68da      	ldr	r2, [r3, #12]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	689b      	ldr	r3, [r3, #8]
 800cab8:	429a      	cmp	r2, r3
 800caba:	d303      	bcc.n	800cac4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681a      	ldr	r2, [r3, #0]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	68d9      	ldr	r1, [r3, #12]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cacc:	461a      	mov	r2, r3
 800cace:	6838      	ldr	r0, [r7, #0]
 800cad0:	f002 f96a 	bl	800eda8 <memcpy>
	}
}
 800cad4:	bf00      	nop
 800cad6:	3708      	adds	r7, #8
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cae4:	f001 fcc8 	bl	800e478 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800caee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800caf0:	e011      	b.n	800cb16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d012      	beq.n	800cb20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	3324      	adds	r3, #36	@ 0x24
 800cafe:	4618      	mov	r0, r3
 800cb00:	f000 fd86 	bl	800d610 <xTaskRemoveFromEventList>
 800cb04:	4603      	mov	r3, r0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d001      	beq.n	800cb0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cb0a:	f000 fe5f 	bl	800d7cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cb0e:	7bfb      	ldrb	r3, [r7, #15]
 800cb10:	3b01      	subs	r3, #1
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	dce9      	bgt.n	800caf2 <prvUnlockQueue+0x16>
 800cb1e:	e000      	b.n	800cb22 <prvUnlockQueue+0x46>
					break;
 800cb20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	22ff      	movs	r2, #255	@ 0xff
 800cb26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cb2a:	f001 fcd7 	bl	800e4dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cb2e:	f001 fca3 	bl	800e478 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb3a:	e011      	b.n	800cb60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	691b      	ldr	r3, [r3, #16]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d012      	beq.n	800cb6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	3310      	adds	r3, #16
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f000 fd61 	bl	800d610 <xTaskRemoveFromEventList>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d001      	beq.n	800cb58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cb54:	f000 fe3a 	bl	800d7cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cb58:	7bbb      	ldrb	r3, [r7, #14]
 800cb5a:	3b01      	subs	r3, #1
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	dce9      	bgt.n	800cb3c <prvUnlockQueue+0x60>
 800cb68:	e000      	b.n	800cb6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cb6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	22ff      	movs	r2, #255	@ 0xff
 800cb70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cb74:	f001 fcb2 	bl	800e4dc <vPortExitCritical>
}
 800cb78:	bf00      	nop
 800cb7a:	3710      	adds	r7, #16
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb88:	f001 fc76 	bl	800e478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d102      	bne.n	800cb9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cb94:	2301      	movs	r3, #1
 800cb96:	60fb      	str	r3, [r7, #12]
 800cb98:	e001      	b.n	800cb9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb9e:	f001 fc9d 	bl	800e4dc <vPortExitCritical>

	return xReturn;
 800cba2:	68fb      	ldr	r3, [r7, #12]
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3710      	adds	r7, #16
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cbb4:	f001 fc60 	bl	800e478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d102      	bne.n	800cbca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	60fb      	str	r3, [r7, #12]
 800cbc8:	e001      	b.n	800cbce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cbce:	f001 fc85 	bl	800e4dc <vPortExitCritical>

	return xReturn;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3710      	adds	r7, #16
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cbdc:	b480      	push	{r7}
 800cbde:	b085      	sub	sp, #20
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	60fb      	str	r3, [r7, #12]
 800cbea:	e014      	b.n	800cc16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cbec:	4a0f      	ldr	r2, [pc, #60]	@ (800cc2c <vQueueAddToRegistry+0x50>)
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d10b      	bne.n	800cc10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cbf8:	490c      	ldr	r1, [pc, #48]	@ (800cc2c <vQueueAddToRegistry+0x50>)
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	683a      	ldr	r2, [r7, #0]
 800cbfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cc02:	4a0a      	ldr	r2, [pc, #40]	@ (800cc2c <vQueueAddToRegistry+0x50>)
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	00db      	lsls	r3, r3, #3
 800cc08:	4413      	add	r3, r2
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cc0e:	e006      	b.n	800cc1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	3301      	adds	r3, #1
 800cc14:	60fb      	str	r3, [r7, #12]
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2b07      	cmp	r3, #7
 800cc1a:	d9e7      	bls.n	800cbec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cc1c:	bf00      	nop
 800cc1e:	bf00      	nop
 800cc20:	3714      	adds	r7, #20
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr
 800cc2a:	bf00      	nop
 800cc2c:	20000be4 	.word	0x20000be4

0800cc30 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cc30:	b480      	push	{r7}
 800cc32:	b085      	sub	sp, #20
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc38:	2300      	movs	r3, #0
 800cc3a:	60fb      	str	r3, [r7, #12]
 800cc3c:	e016      	b.n	800cc6c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cc3e:	4a10      	ldr	r2, [pc, #64]	@ (800cc80 <vQueueUnregisterQueue+0x50>)
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	00db      	lsls	r3, r3, #3
 800cc44:	4413      	add	r3, r2
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d10b      	bne.n	800cc66 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cc4e:	4a0c      	ldr	r2, [pc, #48]	@ (800cc80 <vQueueUnregisterQueue+0x50>)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2100      	movs	r1, #0
 800cc54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cc58:	4a09      	ldr	r2, [pc, #36]	@ (800cc80 <vQueueUnregisterQueue+0x50>)
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	00db      	lsls	r3, r3, #3
 800cc5e:	4413      	add	r3, r2
 800cc60:	2200      	movs	r2, #0
 800cc62:	605a      	str	r2, [r3, #4]
				break;
 800cc64:	e006      	b.n	800cc74 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	60fb      	str	r3, [r7, #12]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2b07      	cmp	r3, #7
 800cc70:	d9e5      	bls.n	800cc3e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cc72:	bf00      	nop
 800cc74:	bf00      	nop
 800cc76:	3714      	adds	r7, #20
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr
 800cc80:	20000be4 	.word	0x20000be4

0800cc84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b086      	sub	sp, #24
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cc94:	f001 fbf0 	bl	800e478 <vPortEnterCritical>
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc9e:	b25b      	sxtb	r3, r3
 800cca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cca4:	d103      	bne.n	800ccae <vQueueWaitForMessageRestricted+0x2a>
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ccb4:	b25b      	sxtb	r3, r3
 800ccb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccba:	d103      	bne.n	800ccc4 <vQueueWaitForMessageRestricted+0x40>
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ccc4:	f001 fc0a 	bl	800e4dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d106      	bne.n	800ccde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	3324      	adds	r3, #36	@ 0x24
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	68b9      	ldr	r1, [r7, #8]
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f000 fc6d 	bl	800d5b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ccde:	6978      	ldr	r0, [r7, #20]
 800cce0:	f7ff fefc 	bl	800cadc <prvUnlockQueue>
	}
 800cce4:	bf00      	nop
 800cce6:	3718      	adds	r7, #24
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b08e      	sub	sp, #56	@ 0x38
 800ccf0:	af04      	add	r7, sp, #16
 800ccf2:	60f8      	str	r0, [r7, #12]
 800ccf4:	60b9      	str	r1, [r7, #8]
 800ccf6:	607a      	str	r2, [r7, #4]
 800ccf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ccfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d10b      	bne.n	800cd18 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd04:	f383 8811 	msr	BASEPRI, r3
 800cd08:	f3bf 8f6f 	isb	sy
 800cd0c:	f3bf 8f4f 	dsb	sy
 800cd10:	623b      	str	r3, [r7, #32]
}
 800cd12:	bf00      	nop
 800cd14:	bf00      	nop
 800cd16:	e7fd      	b.n	800cd14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d10b      	bne.n	800cd36 <xTaskCreateStatic+0x4a>
	__asm volatile
 800cd1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd22:	f383 8811 	msr	BASEPRI, r3
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	61fb      	str	r3, [r7, #28]
}
 800cd30:	bf00      	nop
 800cd32:	bf00      	nop
 800cd34:	e7fd      	b.n	800cd32 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cd36:	23a8      	movs	r3, #168	@ 0xa8
 800cd38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	2ba8      	cmp	r3, #168	@ 0xa8
 800cd3e:	d00b      	beq.n	800cd58 <xTaskCreateStatic+0x6c>
	__asm volatile
 800cd40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd44:	f383 8811 	msr	BASEPRI, r3
 800cd48:	f3bf 8f6f 	isb	sy
 800cd4c:	f3bf 8f4f 	dsb	sy
 800cd50:	61bb      	str	r3, [r7, #24]
}
 800cd52:	bf00      	nop
 800cd54:	bf00      	nop
 800cd56:	e7fd      	b.n	800cd54 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cd58:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d01e      	beq.n	800cd9e <xTaskCreateStatic+0xb2>
 800cd60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d01b      	beq.n	800cd9e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd68:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd6e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cd70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd72:	2202      	movs	r2, #2
 800cd74:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cd78:	2300      	movs	r3, #0
 800cd7a:	9303      	str	r3, [sp, #12]
 800cd7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd7e:	9302      	str	r3, [sp, #8]
 800cd80:	f107 0314 	add.w	r3, r7, #20
 800cd84:	9301      	str	r3, [sp, #4]
 800cd86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd88:	9300      	str	r3, [sp, #0]
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	68b9      	ldr	r1, [r7, #8]
 800cd90:	68f8      	ldr	r0, [r7, #12]
 800cd92:	f000 f851 	bl	800ce38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd98:	f000 f8f6 	bl	800cf88 <prvAddNewTaskToReadyList>
 800cd9c:	e001      	b.n	800cda2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cda2:	697b      	ldr	r3, [r7, #20]
	}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3728      	adds	r7, #40	@ 0x28
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b08c      	sub	sp, #48	@ 0x30
 800cdb0:	af04      	add	r7, sp, #16
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	603b      	str	r3, [r7, #0]
 800cdb8:	4613      	mov	r3, r2
 800cdba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cdbc:	88fb      	ldrh	r3, [r7, #6]
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f001 fc7b 	bl	800e6bc <pvPortMalloc>
 800cdc6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d00e      	beq.n	800cdec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cdce:	20a8      	movs	r0, #168	@ 0xa8
 800cdd0:	f001 fc74 	bl	800e6bc <pvPortMalloc>
 800cdd4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cdd6:	69fb      	ldr	r3, [r7, #28]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d003      	beq.n	800cde4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cddc:	69fb      	ldr	r3, [r7, #28]
 800cdde:	697a      	ldr	r2, [r7, #20]
 800cde0:	631a      	str	r2, [r3, #48]	@ 0x30
 800cde2:	e005      	b.n	800cdf0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cde4:	6978      	ldr	r0, [r7, #20]
 800cde6:	f001 fd37 	bl	800e858 <vPortFree>
 800cdea:	e001      	b.n	800cdf0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cdec:	2300      	movs	r3, #0
 800cdee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d017      	beq.n	800ce26 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cdfe:	88fa      	ldrh	r2, [r7, #6]
 800ce00:	2300      	movs	r3, #0
 800ce02:	9303      	str	r3, [sp, #12]
 800ce04:	69fb      	ldr	r3, [r7, #28]
 800ce06:	9302      	str	r3, [sp, #8]
 800ce08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce0a:	9301      	str	r3, [sp, #4]
 800ce0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce0e:	9300      	str	r3, [sp, #0]
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	68b9      	ldr	r1, [r7, #8]
 800ce14:	68f8      	ldr	r0, [r7, #12]
 800ce16:	f000 f80f 	bl	800ce38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce1a:	69f8      	ldr	r0, [r7, #28]
 800ce1c:	f000 f8b4 	bl	800cf88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ce20:	2301      	movs	r3, #1
 800ce22:	61bb      	str	r3, [r7, #24]
 800ce24:	e002      	b.n	800ce2c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ce26:	f04f 33ff 	mov.w	r3, #4294967295
 800ce2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ce2c:	69bb      	ldr	r3, [r7, #24]
	}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3720      	adds	r7, #32
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
	...

0800ce38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b088      	sub	sp, #32
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
 800ce44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ce46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce48:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	009b      	lsls	r3, r3, #2
 800ce4e:	461a      	mov	r2, r3
 800ce50:	21a5      	movs	r1, #165	@ 0xa5
 800ce52:	f001 ff0f 	bl	800ec74 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ce56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce60:	3b01      	subs	r3, #1
 800ce62:	009b      	lsls	r3, r3, #2
 800ce64:	4413      	add	r3, r2
 800ce66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	f023 0307 	bic.w	r3, r3, #7
 800ce6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	f003 0307 	and.w	r3, r3, #7
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d00b      	beq.n	800ce92 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ce7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce7e:	f383 8811 	msr	BASEPRI, r3
 800ce82:	f3bf 8f6f 	isb	sy
 800ce86:	f3bf 8f4f 	dsb	sy
 800ce8a:	617b      	str	r3, [r7, #20]
}
 800ce8c:	bf00      	nop
 800ce8e:	bf00      	nop
 800ce90:	e7fd      	b.n	800ce8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d01f      	beq.n	800ced8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce98:	2300      	movs	r3, #0
 800ce9a:	61fb      	str	r3, [r7, #28]
 800ce9c:	e012      	b.n	800cec4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ce9e:	68ba      	ldr	r2, [r7, #8]
 800cea0:	69fb      	ldr	r3, [r7, #28]
 800cea2:	4413      	add	r3, r2
 800cea4:	7819      	ldrb	r1, [r3, #0]
 800cea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	4413      	add	r3, r2
 800ceac:	3334      	adds	r3, #52	@ 0x34
 800ceae:	460a      	mov	r2, r1
 800ceb0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ceb2:	68ba      	ldr	r2, [r7, #8]
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	4413      	add	r3, r2
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d006      	beq.n	800cecc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cebe:	69fb      	ldr	r3, [r7, #28]
 800cec0:	3301      	adds	r3, #1
 800cec2:	61fb      	str	r3, [r7, #28]
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	2b0f      	cmp	r3, #15
 800cec8:	d9e9      	bls.n	800ce9e <prvInitialiseNewTask+0x66>
 800ceca:	e000      	b.n	800cece <prvInitialiseNewTask+0x96>
			{
				break;
 800cecc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced0:	2200      	movs	r2, #0
 800ced2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ced6:	e003      	b.n	800cee0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ced8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceda:	2200      	movs	r2, #0
 800cedc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee2:	2b37      	cmp	r3, #55	@ 0x37
 800cee4:	d901      	bls.n	800ceea <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cee6:	2337      	movs	r3, #55	@ 0x37
 800cee8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ceea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ceee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cef4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef8:	2200      	movs	r2, #0
 800cefa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cefc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cefe:	3304      	adds	r3, #4
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7ff f86d 	bl	800bfe0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cf06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf08:	3318      	adds	r3, #24
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7ff f868 	bl	800bfe0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cf10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf18:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cf1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cf20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf24:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cf26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf30:	2200      	movs	r2, #0
 800cf32:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cf36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf38:	3354      	adds	r3, #84	@ 0x54
 800cf3a:	224c      	movs	r2, #76	@ 0x4c
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f001 fe98 	bl	800ec74 <memset>
 800cf44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf46:	4a0d      	ldr	r2, [pc, #52]	@ (800cf7c <prvInitialiseNewTask+0x144>)
 800cf48:	659a      	str	r2, [r3, #88]	@ 0x58
 800cf4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf4c:	4a0c      	ldr	r2, [pc, #48]	@ (800cf80 <prvInitialiseNewTask+0x148>)
 800cf4e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800cf50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf52:	4a0c      	ldr	r2, [pc, #48]	@ (800cf84 <prvInitialiseNewTask+0x14c>)
 800cf54:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cf56:	683a      	ldr	r2, [r7, #0]
 800cf58:	68f9      	ldr	r1, [r7, #12]
 800cf5a:	69b8      	ldr	r0, [r7, #24]
 800cf5c:	f001 f95a 	bl	800e214 <pxPortInitialiseStack>
 800cf60:	4602      	mov	r2, r0
 800cf62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf64:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cf66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d002      	beq.n	800cf72 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cf6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf72:	bf00      	nop
 800cf74:	3720      	adds	r7, #32
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	200029f0 	.word	0x200029f0
 800cf80:	20002a58 	.word	0x20002a58
 800cf84:	20002ac0 	.word	0x20002ac0

0800cf88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cf90:	f001 fa72 	bl	800e478 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cf94:	4b2d      	ldr	r3, [pc, #180]	@ (800d04c <prvAddNewTaskToReadyList+0xc4>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	4a2c      	ldr	r2, [pc, #176]	@ (800d04c <prvAddNewTaskToReadyList+0xc4>)
 800cf9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cf9e:	4b2c      	ldr	r3, [pc, #176]	@ (800d050 <prvAddNewTaskToReadyList+0xc8>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d109      	bne.n	800cfba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cfa6:	4a2a      	ldr	r2, [pc, #168]	@ (800d050 <prvAddNewTaskToReadyList+0xc8>)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cfac:	4b27      	ldr	r3, [pc, #156]	@ (800d04c <prvAddNewTaskToReadyList+0xc4>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2b01      	cmp	r3, #1
 800cfb2:	d110      	bne.n	800cfd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cfb4:	f000 fc2e 	bl	800d814 <prvInitialiseTaskLists>
 800cfb8:	e00d      	b.n	800cfd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cfba:	4b26      	ldr	r3, [pc, #152]	@ (800d054 <prvAddNewTaskToReadyList+0xcc>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d109      	bne.n	800cfd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cfc2:	4b23      	ldr	r3, [pc, #140]	@ (800d050 <prvAddNewTaskToReadyList+0xc8>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d802      	bhi.n	800cfd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cfd0:	4a1f      	ldr	r2, [pc, #124]	@ (800d050 <prvAddNewTaskToReadyList+0xc8>)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cfd6:	4b20      	ldr	r3, [pc, #128]	@ (800d058 <prvAddNewTaskToReadyList+0xd0>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	3301      	adds	r3, #1
 800cfdc:	4a1e      	ldr	r2, [pc, #120]	@ (800d058 <prvAddNewTaskToReadyList+0xd0>)
 800cfde:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cfe0:	4b1d      	ldr	r3, [pc, #116]	@ (800d058 <prvAddNewTaskToReadyList+0xd0>)
 800cfe2:	681a      	ldr	r2, [r3, #0]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfec:	4b1b      	ldr	r3, [pc, #108]	@ (800d05c <prvAddNewTaskToReadyList+0xd4>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d903      	bls.n	800cffc <prvAddNewTaskToReadyList+0x74>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cff8:	4a18      	ldr	r2, [pc, #96]	@ (800d05c <prvAddNewTaskToReadyList+0xd4>)
 800cffa:	6013      	str	r3, [r2, #0]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d000:	4613      	mov	r3, r2
 800d002:	009b      	lsls	r3, r3, #2
 800d004:	4413      	add	r3, r2
 800d006:	009b      	lsls	r3, r3, #2
 800d008:	4a15      	ldr	r2, [pc, #84]	@ (800d060 <prvAddNewTaskToReadyList+0xd8>)
 800d00a:	441a      	add	r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	3304      	adds	r3, #4
 800d010:	4619      	mov	r1, r3
 800d012:	4610      	mov	r0, r2
 800d014:	f7fe fff1 	bl	800bffa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d018:	f001 fa60 	bl	800e4dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d01c:	4b0d      	ldr	r3, [pc, #52]	@ (800d054 <prvAddNewTaskToReadyList+0xcc>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d00e      	beq.n	800d042 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d024:	4b0a      	ldr	r3, [pc, #40]	@ (800d050 <prvAddNewTaskToReadyList+0xc8>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d02e:	429a      	cmp	r2, r3
 800d030:	d207      	bcs.n	800d042 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d032:	4b0c      	ldr	r3, [pc, #48]	@ (800d064 <prvAddNewTaskToReadyList+0xdc>)
 800d034:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d038:	601a      	str	r2, [r3, #0]
 800d03a:	f3bf 8f4f 	dsb	sy
 800d03e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d042:	bf00      	nop
 800d044:	3708      	adds	r7, #8
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	200010f8 	.word	0x200010f8
 800d050:	20000c24 	.word	0x20000c24
 800d054:	20001104 	.word	0x20001104
 800d058:	20001114 	.word	0x20001114
 800d05c:	20001100 	.word	0x20001100
 800d060:	20000c28 	.word	0x20000c28
 800d064:	e000ed04 	.word	0xe000ed04

0800d068 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d070:	2300      	movs	r3, #0
 800d072:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d018      	beq.n	800d0ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d07a:	4b14      	ldr	r3, [pc, #80]	@ (800d0cc <vTaskDelay+0x64>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d00b      	beq.n	800d09a <vTaskDelay+0x32>
	__asm volatile
 800d082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d086:	f383 8811 	msr	BASEPRI, r3
 800d08a:	f3bf 8f6f 	isb	sy
 800d08e:	f3bf 8f4f 	dsb	sy
 800d092:	60bb      	str	r3, [r7, #8]
}
 800d094:	bf00      	nop
 800d096:	bf00      	nop
 800d098:	e7fd      	b.n	800d096 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d09a:	f000 f88b 	bl	800d1b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d09e:	2100      	movs	r1, #0
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 fd09 	bl	800dab8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d0a6:	f000 f893 	bl	800d1d0 <xTaskResumeAll>
 800d0aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d107      	bne.n	800d0c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d0b2:	4b07      	ldr	r3, [pc, #28]	@ (800d0d0 <vTaskDelay+0x68>)
 800d0b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0b8:	601a      	str	r2, [r3, #0]
 800d0ba:	f3bf 8f4f 	dsb	sy
 800d0be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0c2:	bf00      	nop
 800d0c4:	3710      	adds	r7, #16
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	20001120 	.word	0x20001120
 800d0d0:	e000ed04 	.word	0xe000ed04

0800d0d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b08a      	sub	sp, #40	@ 0x28
 800d0d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d0e2:	463a      	mov	r2, r7
 800d0e4:	1d39      	adds	r1, r7, #4
 800d0e6:	f107 0308 	add.w	r3, r7, #8
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7fe ff24 	bl	800bf38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d0f0:	6839      	ldr	r1, [r7, #0]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	68ba      	ldr	r2, [r7, #8]
 800d0f6:	9202      	str	r2, [sp, #8]
 800d0f8:	9301      	str	r3, [sp, #4]
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	9300      	str	r3, [sp, #0]
 800d0fe:	2300      	movs	r3, #0
 800d100:	460a      	mov	r2, r1
 800d102:	4924      	ldr	r1, [pc, #144]	@ (800d194 <vTaskStartScheduler+0xc0>)
 800d104:	4824      	ldr	r0, [pc, #144]	@ (800d198 <vTaskStartScheduler+0xc4>)
 800d106:	f7ff fdf1 	bl	800ccec <xTaskCreateStatic>
 800d10a:	4603      	mov	r3, r0
 800d10c:	4a23      	ldr	r2, [pc, #140]	@ (800d19c <vTaskStartScheduler+0xc8>)
 800d10e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d110:	4b22      	ldr	r3, [pc, #136]	@ (800d19c <vTaskStartScheduler+0xc8>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d002      	beq.n	800d11e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d118:	2301      	movs	r3, #1
 800d11a:	617b      	str	r3, [r7, #20]
 800d11c:	e001      	b.n	800d122 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d11e:	2300      	movs	r3, #0
 800d120:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	2b01      	cmp	r3, #1
 800d126:	d102      	bne.n	800d12e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d128:	f000 fd1a 	bl	800db60 <xTimerCreateTimerTask>
 800d12c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	2b01      	cmp	r3, #1
 800d132:	d11b      	bne.n	800d16c <vTaskStartScheduler+0x98>
	__asm volatile
 800d134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d138:	f383 8811 	msr	BASEPRI, r3
 800d13c:	f3bf 8f6f 	isb	sy
 800d140:	f3bf 8f4f 	dsb	sy
 800d144:	613b      	str	r3, [r7, #16]
}
 800d146:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d148:	4b15      	ldr	r3, [pc, #84]	@ (800d1a0 <vTaskStartScheduler+0xcc>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	3354      	adds	r3, #84	@ 0x54
 800d14e:	4a15      	ldr	r2, [pc, #84]	@ (800d1a4 <vTaskStartScheduler+0xd0>)
 800d150:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d152:	4b15      	ldr	r3, [pc, #84]	@ (800d1a8 <vTaskStartScheduler+0xd4>)
 800d154:	f04f 32ff 	mov.w	r2, #4294967295
 800d158:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d15a:	4b14      	ldr	r3, [pc, #80]	@ (800d1ac <vTaskStartScheduler+0xd8>)
 800d15c:	2201      	movs	r2, #1
 800d15e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d160:	4b13      	ldr	r3, [pc, #76]	@ (800d1b0 <vTaskStartScheduler+0xdc>)
 800d162:	2200      	movs	r2, #0
 800d164:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d166:	f001 f8e3 	bl	800e330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d16a:	e00f      	b.n	800d18c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d172:	d10b      	bne.n	800d18c <vTaskStartScheduler+0xb8>
	__asm volatile
 800d174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d178:	f383 8811 	msr	BASEPRI, r3
 800d17c:	f3bf 8f6f 	isb	sy
 800d180:	f3bf 8f4f 	dsb	sy
 800d184:	60fb      	str	r3, [r7, #12]
}
 800d186:	bf00      	nop
 800d188:	bf00      	nop
 800d18a:	e7fd      	b.n	800d188 <vTaskStartScheduler+0xb4>
}
 800d18c:	bf00      	nop
 800d18e:	3718      	adds	r7, #24
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}
 800d194:	0800f5c4 	.word	0x0800f5c4
 800d198:	0800d7e5 	.word	0x0800d7e5
 800d19c:	2000111c 	.word	0x2000111c
 800d1a0:	20000c24 	.word	0x20000c24
 800d1a4:	2000003c 	.word	0x2000003c
 800d1a8:	20001118 	.word	0x20001118
 800d1ac:	20001104 	.word	0x20001104
 800d1b0:	200010fc 	.word	0x200010fc

0800d1b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d1b8:	4b04      	ldr	r3, [pc, #16]	@ (800d1cc <vTaskSuspendAll+0x18>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	3301      	adds	r3, #1
 800d1be:	4a03      	ldr	r2, [pc, #12]	@ (800d1cc <vTaskSuspendAll+0x18>)
 800d1c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d1c2:	bf00      	nop
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr
 800d1cc:	20001120 	.word	0x20001120

0800d1d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b084      	sub	sp, #16
 800d1d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d1de:	4b42      	ldr	r3, [pc, #264]	@ (800d2e8 <xTaskResumeAll+0x118>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d10b      	bne.n	800d1fe <xTaskResumeAll+0x2e>
	__asm volatile
 800d1e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1ea:	f383 8811 	msr	BASEPRI, r3
 800d1ee:	f3bf 8f6f 	isb	sy
 800d1f2:	f3bf 8f4f 	dsb	sy
 800d1f6:	603b      	str	r3, [r7, #0]
}
 800d1f8:	bf00      	nop
 800d1fa:	bf00      	nop
 800d1fc:	e7fd      	b.n	800d1fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d1fe:	f001 f93b 	bl	800e478 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d202:	4b39      	ldr	r3, [pc, #228]	@ (800d2e8 <xTaskResumeAll+0x118>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	3b01      	subs	r3, #1
 800d208:	4a37      	ldr	r2, [pc, #220]	@ (800d2e8 <xTaskResumeAll+0x118>)
 800d20a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d20c:	4b36      	ldr	r3, [pc, #216]	@ (800d2e8 <xTaskResumeAll+0x118>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d162      	bne.n	800d2da <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d214:	4b35      	ldr	r3, [pc, #212]	@ (800d2ec <xTaskResumeAll+0x11c>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d05e      	beq.n	800d2da <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d21c:	e02f      	b.n	800d27e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d21e:	4b34      	ldr	r3, [pc, #208]	@ (800d2f0 <xTaskResumeAll+0x120>)
 800d220:	68db      	ldr	r3, [r3, #12]
 800d222:	68db      	ldr	r3, [r3, #12]
 800d224:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	3318      	adds	r3, #24
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fe ff42 	bl	800c0b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	3304      	adds	r3, #4
 800d234:	4618      	mov	r0, r3
 800d236:	f7fe ff3d 	bl	800c0b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d23e:	4b2d      	ldr	r3, [pc, #180]	@ (800d2f4 <xTaskResumeAll+0x124>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	429a      	cmp	r2, r3
 800d244:	d903      	bls.n	800d24e <xTaskResumeAll+0x7e>
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d24a:	4a2a      	ldr	r2, [pc, #168]	@ (800d2f4 <xTaskResumeAll+0x124>)
 800d24c:	6013      	str	r3, [r2, #0]
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d252:	4613      	mov	r3, r2
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	4413      	add	r3, r2
 800d258:	009b      	lsls	r3, r3, #2
 800d25a:	4a27      	ldr	r2, [pc, #156]	@ (800d2f8 <xTaskResumeAll+0x128>)
 800d25c:	441a      	add	r2, r3
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	3304      	adds	r3, #4
 800d262:	4619      	mov	r1, r3
 800d264:	4610      	mov	r0, r2
 800d266:	f7fe fec8 	bl	800bffa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d26e:	4b23      	ldr	r3, [pc, #140]	@ (800d2fc <xTaskResumeAll+0x12c>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d274:	429a      	cmp	r2, r3
 800d276:	d302      	bcc.n	800d27e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d278:	4b21      	ldr	r3, [pc, #132]	@ (800d300 <xTaskResumeAll+0x130>)
 800d27a:	2201      	movs	r2, #1
 800d27c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d27e:	4b1c      	ldr	r3, [pc, #112]	@ (800d2f0 <xTaskResumeAll+0x120>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d1cb      	bne.n	800d21e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d001      	beq.n	800d290 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d28c:	f000 fb66 	bl	800d95c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d290:	4b1c      	ldr	r3, [pc, #112]	@ (800d304 <xTaskResumeAll+0x134>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d010      	beq.n	800d2be <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d29c:	f000 f846 	bl	800d32c <xTaskIncrementTick>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d002      	beq.n	800d2ac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d2a6:	4b16      	ldr	r3, [pc, #88]	@ (800d300 <xTaskResumeAll+0x130>)
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	3b01      	subs	r3, #1
 800d2b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d1f1      	bne.n	800d29c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d2b8:	4b12      	ldr	r3, [pc, #72]	@ (800d304 <xTaskResumeAll+0x134>)
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d2be:	4b10      	ldr	r3, [pc, #64]	@ (800d300 <xTaskResumeAll+0x130>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d009      	beq.n	800d2da <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d2ca:	4b0f      	ldr	r3, [pc, #60]	@ (800d308 <xTaskResumeAll+0x138>)
 800d2cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2d0:	601a      	str	r2, [r3, #0]
 800d2d2:	f3bf 8f4f 	dsb	sy
 800d2d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d2da:	f001 f8ff 	bl	800e4dc <vPortExitCritical>

	return xAlreadyYielded;
 800d2de:	68bb      	ldr	r3, [r7, #8]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3710      	adds	r7, #16
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	20001120 	.word	0x20001120
 800d2ec:	200010f8 	.word	0x200010f8
 800d2f0:	200010b8 	.word	0x200010b8
 800d2f4:	20001100 	.word	0x20001100
 800d2f8:	20000c28 	.word	0x20000c28
 800d2fc:	20000c24 	.word	0x20000c24
 800d300:	2000110c 	.word	0x2000110c
 800d304:	20001108 	.word	0x20001108
 800d308:	e000ed04 	.word	0xe000ed04

0800d30c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d312:	4b05      	ldr	r3, [pc, #20]	@ (800d328 <xTaskGetTickCount+0x1c>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d318:	687b      	ldr	r3, [r7, #4]
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	370c      	adds	r7, #12
 800d31e:	46bd      	mov	sp, r7
 800d320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d324:	4770      	bx	lr
 800d326:	bf00      	nop
 800d328:	200010fc 	.word	0x200010fc

0800d32c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b086      	sub	sp, #24
 800d330:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d332:	2300      	movs	r3, #0
 800d334:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d336:	4b4f      	ldr	r3, [pc, #316]	@ (800d474 <xTaskIncrementTick+0x148>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	f040 8090 	bne.w	800d460 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d340:	4b4d      	ldr	r3, [pc, #308]	@ (800d478 <xTaskIncrementTick+0x14c>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	3301      	adds	r3, #1
 800d346:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d348:	4a4b      	ldr	r2, [pc, #300]	@ (800d478 <xTaskIncrementTick+0x14c>)
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d121      	bne.n	800d398 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d354:	4b49      	ldr	r3, [pc, #292]	@ (800d47c <xTaskIncrementTick+0x150>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00b      	beq.n	800d376 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d362:	f383 8811 	msr	BASEPRI, r3
 800d366:	f3bf 8f6f 	isb	sy
 800d36a:	f3bf 8f4f 	dsb	sy
 800d36e:	603b      	str	r3, [r7, #0]
}
 800d370:	bf00      	nop
 800d372:	bf00      	nop
 800d374:	e7fd      	b.n	800d372 <xTaskIncrementTick+0x46>
 800d376:	4b41      	ldr	r3, [pc, #260]	@ (800d47c <xTaskIncrementTick+0x150>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	60fb      	str	r3, [r7, #12]
 800d37c:	4b40      	ldr	r3, [pc, #256]	@ (800d480 <xTaskIncrementTick+0x154>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4a3e      	ldr	r2, [pc, #248]	@ (800d47c <xTaskIncrementTick+0x150>)
 800d382:	6013      	str	r3, [r2, #0]
 800d384:	4a3e      	ldr	r2, [pc, #248]	@ (800d480 <xTaskIncrementTick+0x154>)
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	6013      	str	r3, [r2, #0]
 800d38a:	4b3e      	ldr	r3, [pc, #248]	@ (800d484 <xTaskIncrementTick+0x158>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	3301      	adds	r3, #1
 800d390:	4a3c      	ldr	r2, [pc, #240]	@ (800d484 <xTaskIncrementTick+0x158>)
 800d392:	6013      	str	r3, [r2, #0]
 800d394:	f000 fae2 	bl	800d95c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d398:	4b3b      	ldr	r3, [pc, #236]	@ (800d488 <xTaskIncrementTick+0x15c>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	693a      	ldr	r2, [r7, #16]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d349      	bcc.n	800d436 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d3a2:	4b36      	ldr	r3, [pc, #216]	@ (800d47c <xTaskIncrementTick+0x150>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d104      	bne.n	800d3b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3ac:	4b36      	ldr	r3, [pc, #216]	@ (800d488 <xTaskIncrementTick+0x15c>)
 800d3ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b2:	601a      	str	r2, [r3, #0]
					break;
 800d3b4:	e03f      	b.n	800d436 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3b6:	4b31      	ldr	r3, [pc, #196]	@ (800d47c <xTaskIncrementTick+0x150>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	68db      	ldr	r3, [r3, #12]
 800d3bc:	68db      	ldr	r3, [r3, #12]
 800d3be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d3c6:	693a      	ldr	r2, [r7, #16]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d203      	bcs.n	800d3d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d3ce:	4a2e      	ldr	r2, [pc, #184]	@ (800d488 <xTaskIncrementTick+0x15c>)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d3d4:	e02f      	b.n	800d436 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	3304      	adds	r3, #4
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7fe fe6a 	bl	800c0b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d004      	beq.n	800d3f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	3318      	adds	r3, #24
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7fe fe61 	bl	800c0b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3f6:	4b25      	ldr	r3, [pc, #148]	@ (800d48c <xTaskIncrementTick+0x160>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d903      	bls.n	800d406 <xTaskIncrementTick+0xda>
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d402:	4a22      	ldr	r2, [pc, #136]	@ (800d48c <xTaskIncrementTick+0x160>)
 800d404:	6013      	str	r3, [r2, #0]
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d40a:	4613      	mov	r3, r2
 800d40c:	009b      	lsls	r3, r3, #2
 800d40e:	4413      	add	r3, r2
 800d410:	009b      	lsls	r3, r3, #2
 800d412:	4a1f      	ldr	r2, [pc, #124]	@ (800d490 <xTaskIncrementTick+0x164>)
 800d414:	441a      	add	r2, r3
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	3304      	adds	r3, #4
 800d41a:	4619      	mov	r1, r3
 800d41c:	4610      	mov	r0, r2
 800d41e:	f7fe fdec 	bl	800bffa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d426:	4b1b      	ldr	r3, [pc, #108]	@ (800d494 <xTaskIncrementTick+0x168>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d3b8      	bcc.n	800d3a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d430:	2301      	movs	r3, #1
 800d432:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d434:	e7b5      	b.n	800d3a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d436:	4b17      	ldr	r3, [pc, #92]	@ (800d494 <xTaskIncrementTick+0x168>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d43c:	4914      	ldr	r1, [pc, #80]	@ (800d490 <xTaskIncrementTick+0x164>)
 800d43e:	4613      	mov	r3, r2
 800d440:	009b      	lsls	r3, r3, #2
 800d442:	4413      	add	r3, r2
 800d444:	009b      	lsls	r3, r3, #2
 800d446:	440b      	add	r3, r1
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	2b01      	cmp	r3, #1
 800d44c:	d901      	bls.n	800d452 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d44e:	2301      	movs	r3, #1
 800d450:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d452:	4b11      	ldr	r3, [pc, #68]	@ (800d498 <xTaskIncrementTick+0x16c>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d007      	beq.n	800d46a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d45a:	2301      	movs	r3, #1
 800d45c:	617b      	str	r3, [r7, #20]
 800d45e:	e004      	b.n	800d46a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d460:	4b0e      	ldr	r3, [pc, #56]	@ (800d49c <xTaskIncrementTick+0x170>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	3301      	adds	r3, #1
 800d466:	4a0d      	ldr	r2, [pc, #52]	@ (800d49c <xTaskIncrementTick+0x170>)
 800d468:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d46a:	697b      	ldr	r3, [r7, #20]
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3718      	adds	r7, #24
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}
 800d474:	20001120 	.word	0x20001120
 800d478:	200010fc 	.word	0x200010fc
 800d47c:	200010b0 	.word	0x200010b0
 800d480:	200010b4 	.word	0x200010b4
 800d484:	20001110 	.word	0x20001110
 800d488:	20001118 	.word	0x20001118
 800d48c:	20001100 	.word	0x20001100
 800d490:	20000c28 	.word	0x20000c28
 800d494:	20000c24 	.word	0x20000c24
 800d498:	2000110c 	.word	0x2000110c
 800d49c:	20001108 	.word	0x20001108

0800d4a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b085      	sub	sp, #20
 800d4a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d4a6:	4b2b      	ldr	r3, [pc, #172]	@ (800d554 <vTaskSwitchContext+0xb4>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d003      	beq.n	800d4b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d4ae:	4b2a      	ldr	r3, [pc, #168]	@ (800d558 <vTaskSwitchContext+0xb8>)
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d4b4:	e047      	b.n	800d546 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d4b6:	4b28      	ldr	r3, [pc, #160]	@ (800d558 <vTaskSwitchContext+0xb8>)
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4bc:	4b27      	ldr	r3, [pc, #156]	@ (800d55c <vTaskSwitchContext+0xbc>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	60fb      	str	r3, [r7, #12]
 800d4c2:	e011      	b.n	800d4e8 <vTaskSwitchContext+0x48>
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d10b      	bne.n	800d4e2 <vTaskSwitchContext+0x42>
	__asm volatile
 800d4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ce:	f383 8811 	msr	BASEPRI, r3
 800d4d2:	f3bf 8f6f 	isb	sy
 800d4d6:	f3bf 8f4f 	dsb	sy
 800d4da:	607b      	str	r3, [r7, #4]
}
 800d4dc:	bf00      	nop
 800d4de:	bf00      	nop
 800d4e0:	e7fd      	b.n	800d4de <vTaskSwitchContext+0x3e>
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	60fb      	str	r3, [r7, #12]
 800d4e8:	491d      	ldr	r1, [pc, #116]	@ (800d560 <vTaskSwitchContext+0xc0>)
 800d4ea:	68fa      	ldr	r2, [r7, #12]
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	4413      	add	r3, r2
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	440b      	add	r3, r1
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d0e3      	beq.n	800d4c4 <vTaskSwitchContext+0x24>
 800d4fc:	68fa      	ldr	r2, [r7, #12]
 800d4fe:	4613      	mov	r3, r2
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	4413      	add	r3, r2
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	4a16      	ldr	r2, [pc, #88]	@ (800d560 <vTaskSwitchContext+0xc0>)
 800d508:	4413      	add	r3, r2
 800d50a:	60bb      	str	r3, [r7, #8]
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	685a      	ldr	r2, [r3, #4]
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	605a      	str	r2, [r3, #4]
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	685a      	ldr	r2, [r3, #4]
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	3308      	adds	r3, #8
 800d51e:	429a      	cmp	r2, r3
 800d520:	d104      	bne.n	800d52c <vTaskSwitchContext+0x8c>
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	685a      	ldr	r2, [r3, #4]
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	605a      	str	r2, [r3, #4]
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	68db      	ldr	r3, [r3, #12]
 800d532:	4a0c      	ldr	r2, [pc, #48]	@ (800d564 <vTaskSwitchContext+0xc4>)
 800d534:	6013      	str	r3, [r2, #0]
 800d536:	4a09      	ldr	r2, [pc, #36]	@ (800d55c <vTaskSwitchContext+0xbc>)
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d53c:	4b09      	ldr	r3, [pc, #36]	@ (800d564 <vTaskSwitchContext+0xc4>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	3354      	adds	r3, #84	@ 0x54
 800d542:	4a09      	ldr	r2, [pc, #36]	@ (800d568 <vTaskSwitchContext+0xc8>)
 800d544:	6013      	str	r3, [r2, #0]
}
 800d546:	bf00      	nop
 800d548:	3714      	adds	r7, #20
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr
 800d552:	bf00      	nop
 800d554:	20001120 	.word	0x20001120
 800d558:	2000110c 	.word	0x2000110c
 800d55c:	20001100 	.word	0x20001100
 800d560:	20000c28 	.word	0x20000c28
 800d564:	20000c24 	.word	0x20000c24
 800d568:	2000003c 	.word	0x2000003c

0800d56c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d10b      	bne.n	800d594 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d57c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d580:	f383 8811 	msr	BASEPRI, r3
 800d584:	f3bf 8f6f 	isb	sy
 800d588:	f3bf 8f4f 	dsb	sy
 800d58c:	60fb      	str	r3, [r7, #12]
}
 800d58e:	bf00      	nop
 800d590:	bf00      	nop
 800d592:	e7fd      	b.n	800d590 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d594:	4b07      	ldr	r3, [pc, #28]	@ (800d5b4 <vTaskPlaceOnEventList+0x48>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	3318      	adds	r3, #24
 800d59a:	4619      	mov	r1, r3
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f7fe fd50 	bl	800c042 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d5a2:	2101      	movs	r1, #1
 800d5a4:	6838      	ldr	r0, [r7, #0]
 800d5a6:	f000 fa87 	bl	800dab8 <prvAddCurrentTaskToDelayedList>
}
 800d5aa:	bf00      	nop
 800d5ac:	3710      	adds	r7, #16
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	20000c24 	.word	0x20000c24

0800d5b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b086      	sub	sp, #24
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d10b      	bne.n	800d5e2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d5ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ce:	f383 8811 	msr	BASEPRI, r3
 800d5d2:	f3bf 8f6f 	isb	sy
 800d5d6:	f3bf 8f4f 	dsb	sy
 800d5da:	617b      	str	r3, [r7, #20]
}
 800d5dc:	bf00      	nop
 800d5de:	bf00      	nop
 800d5e0:	e7fd      	b.n	800d5de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d5e2:	4b0a      	ldr	r3, [pc, #40]	@ (800d60c <vTaskPlaceOnEventListRestricted+0x54>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	3318      	adds	r3, #24
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	68f8      	ldr	r0, [r7, #12]
 800d5ec:	f7fe fd05 	bl	800bffa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d002      	beq.n	800d5fc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d5f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d5fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d5fc:	6879      	ldr	r1, [r7, #4]
 800d5fe:	68b8      	ldr	r0, [r7, #8]
 800d600:	f000 fa5a 	bl	800dab8 <prvAddCurrentTaskToDelayedList>
	}
 800d604:	bf00      	nop
 800d606:	3718      	adds	r7, #24
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	20000c24 	.word	0x20000c24

0800d610 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b086      	sub	sp, #24
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	68db      	ldr	r3, [r3, #12]
 800d61c:	68db      	ldr	r3, [r3, #12]
 800d61e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d10b      	bne.n	800d63e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d62a:	f383 8811 	msr	BASEPRI, r3
 800d62e:	f3bf 8f6f 	isb	sy
 800d632:	f3bf 8f4f 	dsb	sy
 800d636:	60fb      	str	r3, [r7, #12]
}
 800d638:	bf00      	nop
 800d63a:	bf00      	nop
 800d63c:	e7fd      	b.n	800d63a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	3318      	adds	r3, #24
 800d642:	4618      	mov	r0, r3
 800d644:	f7fe fd36 	bl	800c0b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d648:	4b1d      	ldr	r3, [pc, #116]	@ (800d6c0 <xTaskRemoveFromEventList+0xb0>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d11d      	bne.n	800d68c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	3304      	adds	r3, #4
 800d654:	4618      	mov	r0, r3
 800d656:	f7fe fd2d 	bl	800c0b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d65e:	4b19      	ldr	r3, [pc, #100]	@ (800d6c4 <xTaskRemoveFromEventList+0xb4>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	429a      	cmp	r2, r3
 800d664:	d903      	bls.n	800d66e <xTaskRemoveFromEventList+0x5e>
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d66a:	4a16      	ldr	r2, [pc, #88]	@ (800d6c4 <xTaskRemoveFromEventList+0xb4>)
 800d66c:	6013      	str	r3, [r2, #0]
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d672:	4613      	mov	r3, r2
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	4413      	add	r3, r2
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	4a13      	ldr	r2, [pc, #76]	@ (800d6c8 <xTaskRemoveFromEventList+0xb8>)
 800d67c:	441a      	add	r2, r3
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	3304      	adds	r3, #4
 800d682:	4619      	mov	r1, r3
 800d684:	4610      	mov	r0, r2
 800d686:	f7fe fcb8 	bl	800bffa <vListInsertEnd>
 800d68a:	e005      	b.n	800d698 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d68c:	693b      	ldr	r3, [r7, #16]
 800d68e:	3318      	adds	r3, #24
 800d690:	4619      	mov	r1, r3
 800d692:	480e      	ldr	r0, [pc, #56]	@ (800d6cc <xTaskRemoveFromEventList+0xbc>)
 800d694:	f7fe fcb1 	bl	800bffa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d69c:	4b0c      	ldr	r3, [pc, #48]	@ (800d6d0 <xTaskRemoveFromEventList+0xc0>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d905      	bls.n	800d6b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d6aa:	4b0a      	ldr	r3, [pc, #40]	@ (800d6d4 <xTaskRemoveFromEventList+0xc4>)
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	601a      	str	r2, [r3, #0]
 800d6b0:	e001      	b.n	800d6b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d6b6:	697b      	ldr	r3, [r7, #20]
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3718      	adds	r7, #24
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	20001120 	.word	0x20001120
 800d6c4:	20001100 	.word	0x20001100
 800d6c8:	20000c28 	.word	0x20000c28
 800d6cc:	200010b8 	.word	0x200010b8
 800d6d0:	20000c24 	.word	0x20000c24
 800d6d4:	2000110c 	.word	0x2000110c

0800d6d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d6e0:	4b06      	ldr	r3, [pc, #24]	@ (800d6fc <vTaskInternalSetTimeOutState+0x24>)
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d6e8:	4b05      	ldr	r3, [pc, #20]	@ (800d700 <vTaskInternalSetTimeOutState+0x28>)
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	605a      	str	r2, [r3, #4]
}
 800d6f0:	bf00      	nop
 800d6f2:	370c      	adds	r7, #12
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr
 800d6fc:	20001110 	.word	0x20001110
 800d700:	200010fc 	.word	0x200010fc

0800d704 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b088      	sub	sp, #32
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d10b      	bne.n	800d72c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d718:	f383 8811 	msr	BASEPRI, r3
 800d71c:	f3bf 8f6f 	isb	sy
 800d720:	f3bf 8f4f 	dsb	sy
 800d724:	613b      	str	r3, [r7, #16]
}
 800d726:	bf00      	nop
 800d728:	bf00      	nop
 800d72a:	e7fd      	b.n	800d728 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d10b      	bne.n	800d74a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d736:	f383 8811 	msr	BASEPRI, r3
 800d73a:	f3bf 8f6f 	isb	sy
 800d73e:	f3bf 8f4f 	dsb	sy
 800d742:	60fb      	str	r3, [r7, #12]
}
 800d744:	bf00      	nop
 800d746:	bf00      	nop
 800d748:	e7fd      	b.n	800d746 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d74a:	f000 fe95 	bl	800e478 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d74e:	4b1d      	ldr	r3, [pc, #116]	@ (800d7c4 <xTaskCheckForTimeOut+0xc0>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	69ba      	ldr	r2, [r7, #24]
 800d75a:	1ad3      	subs	r3, r2, r3
 800d75c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d766:	d102      	bne.n	800d76e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d768:	2300      	movs	r3, #0
 800d76a:	61fb      	str	r3, [r7, #28]
 800d76c:	e023      	b.n	800d7b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	4b15      	ldr	r3, [pc, #84]	@ (800d7c8 <xTaskCheckForTimeOut+0xc4>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	429a      	cmp	r2, r3
 800d778:	d007      	beq.n	800d78a <xTaskCheckForTimeOut+0x86>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	685b      	ldr	r3, [r3, #4]
 800d77e:	69ba      	ldr	r2, [r7, #24]
 800d780:	429a      	cmp	r2, r3
 800d782:	d302      	bcc.n	800d78a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d784:	2301      	movs	r3, #1
 800d786:	61fb      	str	r3, [r7, #28]
 800d788:	e015      	b.n	800d7b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	697a      	ldr	r2, [r7, #20]
 800d790:	429a      	cmp	r2, r3
 800d792:	d20b      	bcs.n	800d7ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	681a      	ldr	r2, [r3, #0]
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	1ad2      	subs	r2, r2, r3
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f7ff ff99 	bl	800d6d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	61fb      	str	r3, [r7, #28]
 800d7aa:	e004      	b.n	800d7b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d7b6:	f000 fe91 	bl	800e4dc <vPortExitCritical>

	return xReturn;
 800d7ba:	69fb      	ldr	r3, [r7, #28]
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3720      	adds	r7, #32
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	200010fc 	.word	0x200010fc
 800d7c8:	20001110 	.word	0x20001110

0800d7cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d7d0:	4b03      	ldr	r3, [pc, #12]	@ (800d7e0 <vTaskMissedYield+0x14>)
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	601a      	str	r2, [r3, #0]
}
 800d7d6:	bf00      	nop
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr
 800d7e0:	2000110c 	.word	0x2000110c

0800d7e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d7ec:	f000 f852 	bl	800d894 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d7f0:	4b06      	ldr	r3, [pc, #24]	@ (800d80c <prvIdleTask+0x28>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d9f9      	bls.n	800d7ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800d7f8:	4b05      	ldr	r3, [pc, #20]	@ (800d810 <prvIdleTask+0x2c>)
 800d7fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7fe:	601a      	str	r2, [r3, #0]
 800d800:	f3bf 8f4f 	dsb	sy
 800d804:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d808:	e7f0      	b.n	800d7ec <prvIdleTask+0x8>
 800d80a:	bf00      	nop
 800d80c:	20000c28 	.word	0x20000c28
 800d810:	e000ed04 	.word	0xe000ed04

0800d814 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b082      	sub	sp, #8
 800d818:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d81a:	2300      	movs	r3, #0
 800d81c:	607b      	str	r3, [r7, #4]
 800d81e:	e00c      	b.n	800d83a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	4613      	mov	r3, r2
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	4413      	add	r3, r2
 800d828:	009b      	lsls	r3, r3, #2
 800d82a:	4a12      	ldr	r2, [pc, #72]	@ (800d874 <prvInitialiseTaskLists+0x60>)
 800d82c:	4413      	add	r3, r2
 800d82e:	4618      	mov	r0, r3
 800d830:	f7fe fbb6 	bl	800bfa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	3301      	adds	r3, #1
 800d838:	607b      	str	r3, [r7, #4]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2b37      	cmp	r3, #55	@ 0x37
 800d83e:	d9ef      	bls.n	800d820 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d840:	480d      	ldr	r0, [pc, #52]	@ (800d878 <prvInitialiseTaskLists+0x64>)
 800d842:	f7fe fbad 	bl	800bfa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d846:	480d      	ldr	r0, [pc, #52]	@ (800d87c <prvInitialiseTaskLists+0x68>)
 800d848:	f7fe fbaa 	bl	800bfa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d84c:	480c      	ldr	r0, [pc, #48]	@ (800d880 <prvInitialiseTaskLists+0x6c>)
 800d84e:	f7fe fba7 	bl	800bfa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d852:	480c      	ldr	r0, [pc, #48]	@ (800d884 <prvInitialiseTaskLists+0x70>)
 800d854:	f7fe fba4 	bl	800bfa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d858:	480b      	ldr	r0, [pc, #44]	@ (800d888 <prvInitialiseTaskLists+0x74>)
 800d85a:	f7fe fba1 	bl	800bfa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d85e:	4b0b      	ldr	r3, [pc, #44]	@ (800d88c <prvInitialiseTaskLists+0x78>)
 800d860:	4a05      	ldr	r2, [pc, #20]	@ (800d878 <prvInitialiseTaskLists+0x64>)
 800d862:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d864:	4b0a      	ldr	r3, [pc, #40]	@ (800d890 <prvInitialiseTaskLists+0x7c>)
 800d866:	4a05      	ldr	r2, [pc, #20]	@ (800d87c <prvInitialiseTaskLists+0x68>)
 800d868:	601a      	str	r2, [r3, #0]
}
 800d86a:	bf00      	nop
 800d86c:	3708      	adds	r7, #8
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	20000c28 	.word	0x20000c28
 800d878:	20001088 	.word	0x20001088
 800d87c:	2000109c 	.word	0x2000109c
 800d880:	200010b8 	.word	0x200010b8
 800d884:	200010cc 	.word	0x200010cc
 800d888:	200010e4 	.word	0x200010e4
 800d88c:	200010b0 	.word	0x200010b0
 800d890:	200010b4 	.word	0x200010b4

0800d894 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b082      	sub	sp, #8
 800d898:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d89a:	e019      	b.n	800d8d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d89c:	f000 fdec 	bl	800e478 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8a0:	4b10      	ldr	r3, [pc, #64]	@ (800d8e4 <prvCheckTasksWaitingTermination+0x50>)
 800d8a2:	68db      	ldr	r3, [r3, #12]
 800d8a4:	68db      	ldr	r3, [r3, #12]
 800d8a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	3304      	adds	r3, #4
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7fe fc01 	bl	800c0b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d8b2:	4b0d      	ldr	r3, [pc, #52]	@ (800d8e8 <prvCheckTasksWaitingTermination+0x54>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	3b01      	subs	r3, #1
 800d8b8:	4a0b      	ldr	r2, [pc, #44]	@ (800d8e8 <prvCheckTasksWaitingTermination+0x54>)
 800d8ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d8bc:	4b0b      	ldr	r3, [pc, #44]	@ (800d8ec <prvCheckTasksWaitingTermination+0x58>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	4a0a      	ldr	r2, [pc, #40]	@ (800d8ec <prvCheckTasksWaitingTermination+0x58>)
 800d8c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d8c6:	f000 fe09 	bl	800e4dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f000 f810 	bl	800d8f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8d0:	4b06      	ldr	r3, [pc, #24]	@ (800d8ec <prvCheckTasksWaitingTermination+0x58>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d1e1      	bne.n	800d89c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d8d8:	bf00      	nop
 800d8da:	bf00      	nop
 800d8dc:	3708      	adds	r7, #8
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	200010cc 	.word	0x200010cc
 800d8e8:	200010f8 	.word	0x200010f8
 800d8ec:	200010e0 	.word	0x200010e0

0800d8f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	3354      	adds	r3, #84	@ 0x54
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f001 f9c1 	bl	800ec84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d108      	bne.n	800d91e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d910:	4618      	mov	r0, r3
 800d912:	f000 ffa1 	bl	800e858 <vPortFree>
				vPortFree( pxTCB );
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 ff9e 	bl	800e858 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d91c:	e019      	b.n	800d952 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d924:	2b01      	cmp	r3, #1
 800d926:	d103      	bne.n	800d930 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f000 ff95 	bl	800e858 <vPortFree>
	}
 800d92e:	e010      	b.n	800d952 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d936:	2b02      	cmp	r3, #2
 800d938:	d00b      	beq.n	800d952 <prvDeleteTCB+0x62>
	__asm volatile
 800d93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d93e:	f383 8811 	msr	BASEPRI, r3
 800d942:	f3bf 8f6f 	isb	sy
 800d946:	f3bf 8f4f 	dsb	sy
 800d94a:	60fb      	str	r3, [r7, #12]
}
 800d94c:	bf00      	nop
 800d94e:	bf00      	nop
 800d950:	e7fd      	b.n	800d94e <prvDeleteTCB+0x5e>
	}
 800d952:	bf00      	nop
 800d954:	3710      	adds	r7, #16
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}
	...

0800d95c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d95c:	b480      	push	{r7}
 800d95e:	b083      	sub	sp, #12
 800d960:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d962:	4b0c      	ldr	r3, [pc, #48]	@ (800d994 <prvResetNextTaskUnblockTime+0x38>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d104      	bne.n	800d976 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d96c:	4b0a      	ldr	r3, [pc, #40]	@ (800d998 <prvResetNextTaskUnblockTime+0x3c>)
 800d96e:	f04f 32ff 	mov.w	r2, #4294967295
 800d972:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d974:	e008      	b.n	800d988 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d976:	4b07      	ldr	r3, [pc, #28]	@ (800d994 <prvResetNextTaskUnblockTime+0x38>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	68db      	ldr	r3, [r3, #12]
 800d97c:	68db      	ldr	r3, [r3, #12]
 800d97e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	4a04      	ldr	r2, [pc, #16]	@ (800d998 <prvResetNextTaskUnblockTime+0x3c>)
 800d986:	6013      	str	r3, [r2, #0]
}
 800d988:	bf00      	nop
 800d98a:	370c      	adds	r7, #12
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr
 800d994:	200010b0 	.word	0x200010b0
 800d998:	20001118 	.word	0x20001118

0800d99c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d99c:	b480      	push	{r7}
 800d99e:	b083      	sub	sp, #12
 800d9a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d9a2:	4b0b      	ldr	r3, [pc, #44]	@ (800d9d0 <xTaskGetSchedulerState+0x34>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d102      	bne.n	800d9b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	607b      	str	r3, [r7, #4]
 800d9ae:	e008      	b.n	800d9c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9b0:	4b08      	ldr	r3, [pc, #32]	@ (800d9d4 <xTaskGetSchedulerState+0x38>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d102      	bne.n	800d9be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d9b8:	2302      	movs	r3, #2
 800d9ba:	607b      	str	r3, [r7, #4]
 800d9bc:	e001      	b.n	800d9c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d9c2:	687b      	ldr	r3, [r7, #4]
	}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	370c      	adds	r7, #12
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr
 800d9d0:	20001104 	.word	0x20001104
 800d9d4:	20001120 	.word	0x20001120

0800d9d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b086      	sub	sp, #24
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d058      	beq.n	800daa0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d9ee:	4b2f      	ldr	r3, [pc, #188]	@ (800daac <xTaskPriorityDisinherit+0xd4>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	693a      	ldr	r2, [r7, #16]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d00b      	beq.n	800da10 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d9f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9fc:	f383 8811 	msr	BASEPRI, r3
 800da00:	f3bf 8f6f 	isb	sy
 800da04:	f3bf 8f4f 	dsb	sy
 800da08:	60fb      	str	r3, [r7, #12]
}
 800da0a:	bf00      	nop
 800da0c:	bf00      	nop
 800da0e:	e7fd      	b.n	800da0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da14:	2b00      	cmp	r3, #0
 800da16:	d10b      	bne.n	800da30 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800da18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da1c:	f383 8811 	msr	BASEPRI, r3
 800da20:	f3bf 8f6f 	isb	sy
 800da24:	f3bf 8f4f 	dsb	sy
 800da28:	60bb      	str	r3, [r7, #8]
}
 800da2a:	bf00      	nop
 800da2c:	bf00      	nop
 800da2e:	e7fd      	b.n	800da2c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da34:	1e5a      	subs	r2, r3, #1
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da42:	429a      	cmp	r2, r3
 800da44:	d02c      	beq.n	800daa0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d128      	bne.n	800daa0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	3304      	adds	r3, #4
 800da52:	4618      	mov	r0, r3
 800da54:	f7fe fb2e 	bl	800c0b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da64:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da70:	4b0f      	ldr	r3, [pc, #60]	@ (800dab0 <xTaskPriorityDisinherit+0xd8>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	429a      	cmp	r2, r3
 800da76:	d903      	bls.n	800da80 <xTaskPriorityDisinherit+0xa8>
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da7c:	4a0c      	ldr	r2, [pc, #48]	@ (800dab0 <xTaskPriorityDisinherit+0xd8>)
 800da7e:	6013      	str	r3, [r2, #0]
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da84:	4613      	mov	r3, r2
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	4413      	add	r3, r2
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	4a09      	ldr	r2, [pc, #36]	@ (800dab4 <xTaskPriorityDisinherit+0xdc>)
 800da8e:	441a      	add	r2, r3
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	3304      	adds	r3, #4
 800da94:	4619      	mov	r1, r3
 800da96:	4610      	mov	r0, r2
 800da98:	f7fe faaf 	bl	800bffa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800da9c:	2301      	movs	r3, #1
 800da9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800daa0:	697b      	ldr	r3, [r7, #20]
	}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3718      	adds	r7, #24
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	bf00      	nop
 800daac:	20000c24 	.word	0x20000c24
 800dab0:	20001100 	.word	0x20001100
 800dab4:	20000c28 	.word	0x20000c28

0800dab8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dac2:	4b21      	ldr	r3, [pc, #132]	@ (800db48 <prvAddCurrentTaskToDelayedList+0x90>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dac8:	4b20      	ldr	r3, [pc, #128]	@ (800db4c <prvAddCurrentTaskToDelayedList+0x94>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	3304      	adds	r3, #4
 800dace:	4618      	mov	r0, r3
 800dad0:	f7fe faf0 	bl	800c0b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dada:	d10a      	bne.n	800daf2 <prvAddCurrentTaskToDelayedList+0x3a>
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d007      	beq.n	800daf2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dae2:	4b1a      	ldr	r3, [pc, #104]	@ (800db4c <prvAddCurrentTaskToDelayedList+0x94>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	3304      	adds	r3, #4
 800dae8:	4619      	mov	r1, r3
 800daea:	4819      	ldr	r0, [pc, #100]	@ (800db50 <prvAddCurrentTaskToDelayedList+0x98>)
 800daec:	f7fe fa85 	bl	800bffa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800daf0:	e026      	b.n	800db40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800daf2:	68fa      	ldr	r2, [r7, #12]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	4413      	add	r3, r2
 800daf8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dafa:	4b14      	ldr	r3, [pc, #80]	@ (800db4c <prvAddCurrentTaskToDelayedList+0x94>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	68ba      	ldr	r2, [r7, #8]
 800db00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800db02:	68ba      	ldr	r2, [r7, #8]
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	429a      	cmp	r2, r3
 800db08:	d209      	bcs.n	800db1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db0a:	4b12      	ldr	r3, [pc, #72]	@ (800db54 <prvAddCurrentTaskToDelayedList+0x9c>)
 800db0c:	681a      	ldr	r2, [r3, #0]
 800db0e:	4b0f      	ldr	r3, [pc, #60]	@ (800db4c <prvAddCurrentTaskToDelayedList+0x94>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	3304      	adds	r3, #4
 800db14:	4619      	mov	r1, r3
 800db16:	4610      	mov	r0, r2
 800db18:	f7fe fa93 	bl	800c042 <vListInsert>
}
 800db1c:	e010      	b.n	800db40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db1e:	4b0e      	ldr	r3, [pc, #56]	@ (800db58 <prvAddCurrentTaskToDelayedList+0xa0>)
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	4b0a      	ldr	r3, [pc, #40]	@ (800db4c <prvAddCurrentTaskToDelayedList+0x94>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	3304      	adds	r3, #4
 800db28:	4619      	mov	r1, r3
 800db2a:	4610      	mov	r0, r2
 800db2c:	f7fe fa89 	bl	800c042 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800db30:	4b0a      	ldr	r3, [pc, #40]	@ (800db5c <prvAddCurrentTaskToDelayedList+0xa4>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	68ba      	ldr	r2, [r7, #8]
 800db36:	429a      	cmp	r2, r3
 800db38:	d202      	bcs.n	800db40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800db3a:	4a08      	ldr	r2, [pc, #32]	@ (800db5c <prvAddCurrentTaskToDelayedList+0xa4>)
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	6013      	str	r3, [r2, #0]
}
 800db40:	bf00      	nop
 800db42:	3710      	adds	r7, #16
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	200010fc 	.word	0x200010fc
 800db4c:	20000c24 	.word	0x20000c24
 800db50:	200010e4 	.word	0x200010e4
 800db54:	200010b4 	.word	0x200010b4
 800db58:	200010b0 	.word	0x200010b0
 800db5c:	20001118 	.word	0x20001118

0800db60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b08a      	sub	sp, #40	@ 0x28
 800db64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800db66:	2300      	movs	r3, #0
 800db68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800db6a:	f000 fb13 	bl	800e194 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800db6e:	4b1d      	ldr	r3, [pc, #116]	@ (800dbe4 <xTimerCreateTimerTask+0x84>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d021      	beq.n	800dbba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800db76:	2300      	movs	r3, #0
 800db78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800db7a:	2300      	movs	r3, #0
 800db7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800db7e:	1d3a      	adds	r2, r7, #4
 800db80:	f107 0108 	add.w	r1, r7, #8
 800db84:	f107 030c 	add.w	r3, r7, #12
 800db88:	4618      	mov	r0, r3
 800db8a:	f7fe f9ef 	bl	800bf6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800db8e:	6879      	ldr	r1, [r7, #4]
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	68fa      	ldr	r2, [r7, #12]
 800db94:	9202      	str	r2, [sp, #8]
 800db96:	9301      	str	r3, [sp, #4]
 800db98:	2302      	movs	r3, #2
 800db9a:	9300      	str	r3, [sp, #0]
 800db9c:	2300      	movs	r3, #0
 800db9e:	460a      	mov	r2, r1
 800dba0:	4911      	ldr	r1, [pc, #68]	@ (800dbe8 <xTimerCreateTimerTask+0x88>)
 800dba2:	4812      	ldr	r0, [pc, #72]	@ (800dbec <xTimerCreateTimerTask+0x8c>)
 800dba4:	f7ff f8a2 	bl	800ccec <xTaskCreateStatic>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	4a11      	ldr	r2, [pc, #68]	@ (800dbf0 <xTimerCreateTimerTask+0x90>)
 800dbac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dbae:	4b10      	ldr	r3, [pc, #64]	@ (800dbf0 <xTimerCreateTimerTask+0x90>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d001      	beq.n	800dbba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d10b      	bne.n	800dbd8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800dbc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc4:	f383 8811 	msr	BASEPRI, r3
 800dbc8:	f3bf 8f6f 	isb	sy
 800dbcc:	f3bf 8f4f 	dsb	sy
 800dbd0:	613b      	str	r3, [r7, #16]
}
 800dbd2:	bf00      	nop
 800dbd4:	bf00      	nop
 800dbd6:	e7fd      	b.n	800dbd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dbd8:	697b      	ldr	r3, [r7, #20]
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3718      	adds	r7, #24
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
 800dbe2:	bf00      	nop
 800dbe4:	20001154 	.word	0x20001154
 800dbe8:	0800f5cc 	.word	0x0800f5cc
 800dbec:	0800dd2d 	.word	0x0800dd2d
 800dbf0:	20001158 	.word	0x20001158

0800dbf4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b08a      	sub	sp, #40	@ 0x28
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	607a      	str	r2, [r7, #4]
 800dc00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dc02:	2300      	movs	r3, #0
 800dc04:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d10b      	bne.n	800dc24 <xTimerGenericCommand+0x30>
	__asm volatile
 800dc0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc10:	f383 8811 	msr	BASEPRI, r3
 800dc14:	f3bf 8f6f 	isb	sy
 800dc18:	f3bf 8f4f 	dsb	sy
 800dc1c:	623b      	str	r3, [r7, #32]
}
 800dc1e:	bf00      	nop
 800dc20:	bf00      	nop
 800dc22:	e7fd      	b.n	800dc20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dc24:	4b19      	ldr	r3, [pc, #100]	@ (800dc8c <xTimerGenericCommand+0x98>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d02a      	beq.n	800dc82 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	2b05      	cmp	r3, #5
 800dc3c:	dc18      	bgt.n	800dc70 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dc3e:	f7ff fead 	bl	800d99c <xTaskGetSchedulerState>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b02      	cmp	r3, #2
 800dc46:	d109      	bne.n	800dc5c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dc48:	4b10      	ldr	r3, [pc, #64]	@ (800dc8c <xTimerGenericCommand+0x98>)
 800dc4a:	6818      	ldr	r0, [r3, #0]
 800dc4c:	f107 0110 	add.w	r1, r7, #16
 800dc50:	2300      	movs	r3, #0
 800dc52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc54:	f7fe fc0c 	bl	800c470 <xQueueGenericSend>
 800dc58:	6278      	str	r0, [r7, #36]	@ 0x24
 800dc5a:	e012      	b.n	800dc82 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dc5c:	4b0b      	ldr	r3, [pc, #44]	@ (800dc8c <xTimerGenericCommand+0x98>)
 800dc5e:	6818      	ldr	r0, [r3, #0]
 800dc60:	f107 0110 	add.w	r1, r7, #16
 800dc64:	2300      	movs	r3, #0
 800dc66:	2200      	movs	r2, #0
 800dc68:	f7fe fc02 	bl	800c470 <xQueueGenericSend>
 800dc6c:	6278      	str	r0, [r7, #36]	@ 0x24
 800dc6e:	e008      	b.n	800dc82 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dc70:	4b06      	ldr	r3, [pc, #24]	@ (800dc8c <xTimerGenericCommand+0x98>)
 800dc72:	6818      	ldr	r0, [r3, #0]
 800dc74:	f107 0110 	add.w	r1, r7, #16
 800dc78:	2300      	movs	r3, #0
 800dc7a:	683a      	ldr	r2, [r7, #0]
 800dc7c:	f7fe fcfa 	bl	800c674 <xQueueGenericSendFromISR>
 800dc80:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dc82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3728      	adds	r7, #40	@ 0x28
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	20001154 	.word	0x20001154

0800dc90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b088      	sub	sp, #32
 800dc94:	af02      	add	r7, sp, #8
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc9a:	4b23      	ldr	r3, [pc, #140]	@ (800dd28 <prvProcessExpiredTimer+0x98>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	68db      	ldr	r3, [r3, #12]
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	3304      	adds	r3, #4
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7fe fa03 	bl	800c0b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dcb4:	f003 0304 	and.w	r3, r3, #4
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d023      	beq.n	800dd04 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	699a      	ldr	r2, [r3, #24]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	18d1      	adds	r1, r2, r3
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	683a      	ldr	r2, [r7, #0]
 800dcc8:	6978      	ldr	r0, [r7, #20]
 800dcca:	f000 f8d5 	bl	800de78 <prvInsertTimerInActiveList>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d020      	beq.n	800dd16 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	9300      	str	r3, [sp, #0]
 800dcd8:	2300      	movs	r3, #0
 800dcda:	687a      	ldr	r2, [r7, #4]
 800dcdc:	2100      	movs	r1, #0
 800dcde:	6978      	ldr	r0, [r7, #20]
 800dce0:	f7ff ff88 	bl	800dbf4 <xTimerGenericCommand>
 800dce4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d114      	bne.n	800dd16 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800dcec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcf0:	f383 8811 	msr	BASEPRI, r3
 800dcf4:	f3bf 8f6f 	isb	sy
 800dcf8:	f3bf 8f4f 	dsb	sy
 800dcfc:	60fb      	str	r3, [r7, #12]
}
 800dcfe:	bf00      	nop
 800dd00:	bf00      	nop
 800dd02:	e7fd      	b.n	800dd00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd0a:	f023 0301 	bic.w	r3, r3, #1
 800dd0e:	b2da      	uxtb	r2, r3
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	6a1b      	ldr	r3, [r3, #32]
 800dd1a:	6978      	ldr	r0, [r7, #20]
 800dd1c:	4798      	blx	r3
}
 800dd1e:	bf00      	nop
 800dd20:	3718      	adds	r7, #24
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	bf00      	nop
 800dd28:	2000114c 	.word	0x2000114c

0800dd2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b084      	sub	sp, #16
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd34:	f107 0308 	add.w	r3, r7, #8
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f000 f859 	bl	800ddf0 <prvGetNextExpireTime>
 800dd3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	4619      	mov	r1, r3
 800dd44:	68f8      	ldr	r0, [r7, #12]
 800dd46:	f000 f805 	bl	800dd54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dd4a:	f000 f8d7 	bl	800defc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd4e:	bf00      	nop
 800dd50:	e7f0      	b.n	800dd34 <prvTimerTask+0x8>
	...

0800dd54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dd5e:	f7ff fa29 	bl	800d1b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd62:	f107 0308 	add.w	r3, r7, #8
 800dd66:	4618      	mov	r0, r3
 800dd68:	f000 f866 	bl	800de38 <prvSampleTimeNow>
 800dd6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d130      	bne.n	800ddd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d10a      	bne.n	800dd90 <prvProcessTimerOrBlockTask+0x3c>
 800dd7a:	687a      	ldr	r2, [r7, #4]
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	429a      	cmp	r2, r3
 800dd80:	d806      	bhi.n	800dd90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dd82:	f7ff fa25 	bl	800d1d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dd86:	68f9      	ldr	r1, [r7, #12]
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f7ff ff81 	bl	800dc90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dd8e:	e024      	b.n	800ddda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d008      	beq.n	800dda8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dd96:	4b13      	ldr	r3, [pc, #76]	@ (800dde4 <prvProcessTimerOrBlockTask+0x90>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d101      	bne.n	800dda4 <prvProcessTimerOrBlockTask+0x50>
 800dda0:	2301      	movs	r3, #1
 800dda2:	e000      	b.n	800dda6 <prvProcessTimerOrBlockTask+0x52>
 800dda4:	2300      	movs	r3, #0
 800dda6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dda8:	4b0f      	ldr	r3, [pc, #60]	@ (800dde8 <prvProcessTimerOrBlockTask+0x94>)
 800ddaa:	6818      	ldr	r0, [r3, #0]
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	1ad3      	subs	r3, r2, r3
 800ddb2:	683a      	ldr	r2, [r7, #0]
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	f7fe ff65 	bl	800cc84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ddba:	f7ff fa09 	bl	800d1d0 <xTaskResumeAll>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d10a      	bne.n	800ddda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ddc4:	4b09      	ldr	r3, [pc, #36]	@ (800ddec <prvProcessTimerOrBlockTask+0x98>)
 800ddc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddca:	601a      	str	r2, [r3, #0]
 800ddcc:	f3bf 8f4f 	dsb	sy
 800ddd0:	f3bf 8f6f 	isb	sy
}
 800ddd4:	e001      	b.n	800ddda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ddd6:	f7ff f9fb 	bl	800d1d0 <xTaskResumeAll>
}
 800ddda:	bf00      	nop
 800dddc:	3710      	adds	r7, #16
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	20001150 	.word	0x20001150
 800dde8:	20001154 	.word	0x20001154
 800ddec:	e000ed04 	.word	0xe000ed04

0800ddf0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b085      	sub	sp, #20
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ddf8:	4b0e      	ldr	r3, [pc, #56]	@ (800de34 <prvGetNextExpireTime+0x44>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d101      	bne.n	800de06 <prvGetNextExpireTime+0x16>
 800de02:	2201      	movs	r2, #1
 800de04:	e000      	b.n	800de08 <prvGetNextExpireTime+0x18>
 800de06:	2200      	movs	r2, #0
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d105      	bne.n	800de20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de14:	4b07      	ldr	r3, [pc, #28]	@ (800de34 <prvGetNextExpireTime+0x44>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	68db      	ldr	r3, [r3, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	60fb      	str	r3, [r7, #12]
 800de1e:	e001      	b.n	800de24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800de20:	2300      	movs	r3, #0
 800de22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800de24:	68fb      	ldr	r3, [r7, #12]
}
 800de26:	4618      	mov	r0, r3
 800de28:	3714      	adds	r7, #20
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr
 800de32:	bf00      	nop
 800de34:	2000114c 	.word	0x2000114c

0800de38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800de40:	f7ff fa64 	bl	800d30c <xTaskGetTickCount>
 800de44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800de46:	4b0b      	ldr	r3, [pc, #44]	@ (800de74 <prvSampleTimeNow+0x3c>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	68fa      	ldr	r2, [r7, #12]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d205      	bcs.n	800de5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800de50:	f000 f93a 	bl	800e0c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2201      	movs	r2, #1
 800de58:	601a      	str	r2, [r3, #0]
 800de5a:	e002      	b.n	800de62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2200      	movs	r2, #0
 800de60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800de62:	4a04      	ldr	r2, [pc, #16]	@ (800de74 <prvSampleTimeNow+0x3c>)
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800de68:	68fb      	ldr	r3, [r7, #12]
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3710      	adds	r7, #16
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	2000115c 	.word	0x2000115c

0800de78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b086      	sub	sp, #24
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	607a      	str	r2, [r7, #4]
 800de84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800de86:	2300      	movs	r3, #0
 800de88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	68ba      	ldr	r2, [r7, #8]
 800de8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	68fa      	ldr	r2, [r7, #12]
 800de94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800de96:	68ba      	ldr	r2, [r7, #8]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d812      	bhi.n	800dec4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	1ad2      	subs	r2, r2, r3
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	699b      	ldr	r3, [r3, #24]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d302      	bcc.n	800deb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800deac:	2301      	movs	r3, #1
 800deae:	617b      	str	r3, [r7, #20]
 800deb0:	e01b      	b.n	800deea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800deb2:	4b10      	ldr	r3, [pc, #64]	@ (800def4 <prvInsertTimerInActiveList+0x7c>)
 800deb4:	681a      	ldr	r2, [r3, #0]
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	3304      	adds	r3, #4
 800deba:	4619      	mov	r1, r3
 800debc:	4610      	mov	r0, r2
 800debe:	f7fe f8c0 	bl	800c042 <vListInsert>
 800dec2:	e012      	b.n	800deea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dec4:	687a      	ldr	r2, [r7, #4]
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d206      	bcs.n	800deda <prvInsertTimerInActiveList+0x62>
 800decc:	68ba      	ldr	r2, [r7, #8]
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d302      	bcc.n	800deda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ded4:	2301      	movs	r3, #1
 800ded6:	617b      	str	r3, [r7, #20]
 800ded8:	e007      	b.n	800deea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800deda:	4b07      	ldr	r3, [pc, #28]	@ (800def8 <prvInsertTimerInActiveList+0x80>)
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	3304      	adds	r3, #4
 800dee2:	4619      	mov	r1, r3
 800dee4:	4610      	mov	r0, r2
 800dee6:	f7fe f8ac 	bl	800c042 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800deea:	697b      	ldr	r3, [r7, #20]
}
 800deec:	4618      	mov	r0, r3
 800deee:	3718      	adds	r7, #24
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	20001150 	.word	0x20001150
 800def8:	2000114c 	.word	0x2000114c

0800defc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b08e      	sub	sp, #56	@ 0x38
 800df00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df02:	e0ce      	b.n	800e0a2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	da19      	bge.n	800df3e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800df0a:	1d3b      	adds	r3, r7, #4
 800df0c:	3304      	adds	r3, #4
 800df0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800df10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df12:	2b00      	cmp	r3, #0
 800df14:	d10b      	bne.n	800df2e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800df16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df1a:	f383 8811 	msr	BASEPRI, r3
 800df1e:	f3bf 8f6f 	isb	sy
 800df22:	f3bf 8f4f 	dsb	sy
 800df26:	61fb      	str	r3, [r7, #28]
}
 800df28:	bf00      	nop
 800df2a:	bf00      	nop
 800df2c:	e7fd      	b.n	800df2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800df2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df34:	6850      	ldr	r0, [r2, #4]
 800df36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df38:	6892      	ldr	r2, [r2, #8]
 800df3a:	4611      	mov	r1, r2
 800df3c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2b00      	cmp	r3, #0
 800df42:	f2c0 80ae 	blt.w	800e0a2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800df4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df4c:	695b      	ldr	r3, [r3, #20]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d004      	beq.n	800df5c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df54:	3304      	adds	r3, #4
 800df56:	4618      	mov	r0, r3
 800df58:	f7fe f8ac 	bl	800c0b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df5c:	463b      	mov	r3, r7
 800df5e:	4618      	mov	r0, r3
 800df60:	f7ff ff6a 	bl	800de38 <prvSampleTimeNow>
 800df64:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2b09      	cmp	r3, #9
 800df6a:	f200 8097 	bhi.w	800e09c <prvProcessReceivedCommands+0x1a0>
 800df6e:	a201      	add	r2, pc, #4	@ (adr r2, 800df74 <prvProcessReceivedCommands+0x78>)
 800df70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df74:	0800df9d 	.word	0x0800df9d
 800df78:	0800df9d 	.word	0x0800df9d
 800df7c:	0800df9d 	.word	0x0800df9d
 800df80:	0800e013 	.word	0x0800e013
 800df84:	0800e027 	.word	0x0800e027
 800df88:	0800e073 	.word	0x0800e073
 800df8c:	0800df9d 	.word	0x0800df9d
 800df90:	0800df9d 	.word	0x0800df9d
 800df94:	0800e013 	.word	0x0800e013
 800df98:	0800e027 	.word	0x0800e027
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dfa2:	f043 0301 	orr.w	r3, r3, #1
 800dfa6:	b2da      	uxtb	r2, r3
 800dfa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfaa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dfae:	68ba      	ldr	r2, [r7, #8]
 800dfb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfb2:	699b      	ldr	r3, [r3, #24]
 800dfb4:	18d1      	adds	r1, r2, r3
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dfbc:	f7ff ff5c 	bl	800de78 <prvInsertTimerInActiveList>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d06c      	beq.n	800e0a0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfc8:	6a1b      	ldr	r3, [r3, #32]
 800dfca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dfcc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dfd4:	f003 0304 	and.w	r3, r3, #4
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d061      	beq.n	800e0a0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dfdc:	68ba      	ldr	r2, [r7, #8]
 800dfde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfe0:	699b      	ldr	r3, [r3, #24]
 800dfe2:	441a      	add	r2, r3
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	9300      	str	r3, [sp, #0]
 800dfe8:	2300      	movs	r3, #0
 800dfea:	2100      	movs	r1, #0
 800dfec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dfee:	f7ff fe01 	bl	800dbf4 <xTimerGenericCommand>
 800dff2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dff4:	6a3b      	ldr	r3, [r7, #32]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d152      	bne.n	800e0a0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800dffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dffe:	f383 8811 	msr	BASEPRI, r3
 800e002:	f3bf 8f6f 	isb	sy
 800e006:	f3bf 8f4f 	dsb	sy
 800e00a:	61bb      	str	r3, [r7, #24]
}
 800e00c:	bf00      	nop
 800e00e:	bf00      	nop
 800e010:	e7fd      	b.n	800e00e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e014:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e018:	f023 0301 	bic.w	r3, r3, #1
 800e01c:	b2da      	uxtb	r2, r3
 800e01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e020:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e024:	e03d      	b.n	800e0a2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e028:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e02c:	f043 0301 	orr.w	r3, r3, #1
 800e030:	b2da      	uxtb	r2, r3
 800e032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e034:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e038:	68ba      	ldr	r2, [r7, #8]
 800e03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e03c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e03e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e040:	699b      	ldr	r3, [r3, #24]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d10b      	bne.n	800e05e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e04a:	f383 8811 	msr	BASEPRI, r3
 800e04e:	f3bf 8f6f 	isb	sy
 800e052:	f3bf 8f4f 	dsb	sy
 800e056:	617b      	str	r3, [r7, #20]
}
 800e058:	bf00      	nop
 800e05a:	bf00      	nop
 800e05c:	e7fd      	b.n	800e05a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e05e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e060:	699a      	ldr	r2, [r3, #24]
 800e062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e064:	18d1      	adds	r1, r2, r3
 800e066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e06a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e06c:	f7ff ff04 	bl	800de78 <prvInsertTimerInActiveList>
					break;
 800e070:	e017      	b.n	800e0a2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e074:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e078:	f003 0302 	and.w	r3, r3, #2
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d103      	bne.n	800e088 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e080:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e082:	f000 fbe9 	bl	800e858 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e086:	e00c      	b.n	800e0a2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e08a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e08e:	f023 0301 	bic.w	r3, r3, #1
 800e092:	b2da      	uxtb	r2, r3
 800e094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e096:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e09a:	e002      	b.n	800e0a2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e09c:	bf00      	nop
 800e09e:	e000      	b.n	800e0a2 <prvProcessReceivedCommands+0x1a6>
					break;
 800e0a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e0a2:	4b08      	ldr	r3, [pc, #32]	@ (800e0c4 <prvProcessReceivedCommands+0x1c8>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	1d39      	adds	r1, r7, #4
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7fe fb80 	bl	800c7b0 <xQueueReceive>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	f47f af26 	bne.w	800df04 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e0b8:	bf00      	nop
 800e0ba:	bf00      	nop
 800e0bc:	3730      	adds	r7, #48	@ 0x30
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	20001154 	.word	0x20001154

0800e0c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b088      	sub	sp, #32
 800e0cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e0ce:	e049      	b.n	800e164 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e0d0:	4b2e      	ldr	r3, [pc, #184]	@ (800e18c <prvSwitchTimerLists+0xc4>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	68db      	ldr	r3, [r3, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0da:	4b2c      	ldr	r3, [pc, #176]	@ (800e18c <prvSwitchTimerLists+0xc4>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	68db      	ldr	r3, [r3, #12]
 800e0e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	3304      	adds	r3, #4
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7fd ffe3 	bl	800c0b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	6a1b      	ldr	r3, [r3, #32]
 800e0f2:	68f8      	ldr	r0, [r7, #12]
 800e0f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e0fc:	f003 0304 	and.w	r3, r3, #4
 800e100:	2b00      	cmp	r3, #0
 800e102:	d02f      	beq.n	800e164 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	699b      	ldr	r3, [r3, #24]
 800e108:	693a      	ldr	r2, [r7, #16]
 800e10a:	4413      	add	r3, r2
 800e10c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e10e:	68ba      	ldr	r2, [r7, #8]
 800e110:	693b      	ldr	r3, [r7, #16]
 800e112:	429a      	cmp	r2, r3
 800e114:	d90e      	bls.n	800e134 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	68ba      	ldr	r2, [r7, #8]
 800e11a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	68fa      	ldr	r2, [r7, #12]
 800e120:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e122:	4b1a      	ldr	r3, [pc, #104]	@ (800e18c <prvSwitchTimerLists+0xc4>)
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	3304      	adds	r3, #4
 800e12a:	4619      	mov	r1, r3
 800e12c:	4610      	mov	r0, r2
 800e12e:	f7fd ff88 	bl	800c042 <vListInsert>
 800e132:	e017      	b.n	800e164 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e134:	2300      	movs	r3, #0
 800e136:	9300      	str	r3, [sp, #0]
 800e138:	2300      	movs	r3, #0
 800e13a:	693a      	ldr	r2, [r7, #16]
 800e13c:	2100      	movs	r1, #0
 800e13e:	68f8      	ldr	r0, [r7, #12]
 800e140:	f7ff fd58 	bl	800dbf4 <xTimerGenericCommand>
 800e144:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d10b      	bne.n	800e164 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e14c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e150:	f383 8811 	msr	BASEPRI, r3
 800e154:	f3bf 8f6f 	isb	sy
 800e158:	f3bf 8f4f 	dsb	sy
 800e15c:	603b      	str	r3, [r7, #0]
}
 800e15e:	bf00      	nop
 800e160:	bf00      	nop
 800e162:	e7fd      	b.n	800e160 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e164:	4b09      	ldr	r3, [pc, #36]	@ (800e18c <prvSwitchTimerLists+0xc4>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d1b0      	bne.n	800e0d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e16e:	4b07      	ldr	r3, [pc, #28]	@ (800e18c <prvSwitchTimerLists+0xc4>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e174:	4b06      	ldr	r3, [pc, #24]	@ (800e190 <prvSwitchTimerLists+0xc8>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	4a04      	ldr	r2, [pc, #16]	@ (800e18c <prvSwitchTimerLists+0xc4>)
 800e17a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e17c:	4a04      	ldr	r2, [pc, #16]	@ (800e190 <prvSwitchTimerLists+0xc8>)
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	6013      	str	r3, [r2, #0]
}
 800e182:	bf00      	nop
 800e184:	3718      	adds	r7, #24
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	2000114c 	.word	0x2000114c
 800e190:	20001150 	.word	0x20001150

0800e194 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e19a:	f000 f96d 	bl	800e478 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e19e:	4b15      	ldr	r3, [pc, #84]	@ (800e1f4 <prvCheckForValidListAndQueue+0x60>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d120      	bne.n	800e1e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e1a6:	4814      	ldr	r0, [pc, #80]	@ (800e1f8 <prvCheckForValidListAndQueue+0x64>)
 800e1a8:	f7fd fefa 	bl	800bfa0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e1ac:	4813      	ldr	r0, [pc, #76]	@ (800e1fc <prvCheckForValidListAndQueue+0x68>)
 800e1ae:	f7fd fef7 	bl	800bfa0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e1b2:	4b13      	ldr	r3, [pc, #76]	@ (800e200 <prvCheckForValidListAndQueue+0x6c>)
 800e1b4:	4a10      	ldr	r2, [pc, #64]	@ (800e1f8 <prvCheckForValidListAndQueue+0x64>)
 800e1b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e1b8:	4b12      	ldr	r3, [pc, #72]	@ (800e204 <prvCheckForValidListAndQueue+0x70>)
 800e1ba:	4a10      	ldr	r2, [pc, #64]	@ (800e1fc <prvCheckForValidListAndQueue+0x68>)
 800e1bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e1be:	2300      	movs	r3, #0
 800e1c0:	9300      	str	r3, [sp, #0]
 800e1c2:	4b11      	ldr	r3, [pc, #68]	@ (800e208 <prvCheckForValidListAndQueue+0x74>)
 800e1c4:	4a11      	ldr	r2, [pc, #68]	@ (800e20c <prvCheckForValidListAndQueue+0x78>)
 800e1c6:	2110      	movs	r1, #16
 800e1c8:	200a      	movs	r0, #10
 800e1ca:	f7fe f807 	bl	800c1dc <xQueueGenericCreateStatic>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	4a08      	ldr	r2, [pc, #32]	@ (800e1f4 <prvCheckForValidListAndQueue+0x60>)
 800e1d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e1d4:	4b07      	ldr	r3, [pc, #28]	@ (800e1f4 <prvCheckForValidListAndQueue+0x60>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d005      	beq.n	800e1e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e1dc:	4b05      	ldr	r3, [pc, #20]	@ (800e1f4 <prvCheckForValidListAndQueue+0x60>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	490b      	ldr	r1, [pc, #44]	@ (800e210 <prvCheckForValidListAndQueue+0x7c>)
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7fe fcfa 	bl	800cbdc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e1e8:	f000 f978 	bl	800e4dc <vPortExitCritical>
}
 800e1ec:	bf00      	nop
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	20001154 	.word	0x20001154
 800e1f8:	20001124 	.word	0x20001124
 800e1fc:	20001138 	.word	0x20001138
 800e200:	2000114c 	.word	0x2000114c
 800e204:	20001150 	.word	0x20001150
 800e208:	20001200 	.word	0x20001200
 800e20c:	20001160 	.word	0x20001160
 800e210:	0800f5d4 	.word	0x0800f5d4

0800e214 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e214:	b480      	push	{r7}
 800e216:	b085      	sub	sp, #20
 800e218:	af00      	add	r7, sp, #0
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	3b04      	subs	r3, #4
 800e224:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e22c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	3b04      	subs	r3, #4
 800e232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	f023 0201 	bic.w	r2, r3, #1
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	3b04      	subs	r3, #4
 800e242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e244:	4a0c      	ldr	r2, [pc, #48]	@ (800e278 <pxPortInitialiseStack+0x64>)
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	3b14      	subs	r3, #20
 800e24e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	3b04      	subs	r3, #4
 800e25a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	f06f 0202 	mvn.w	r2, #2
 800e262:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	3b20      	subs	r3, #32
 800e268:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e26a:	68fb      	ldr	r3, [r7, #12]
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3714      	adds	r7, #20
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr
 800e278:	0800e27d 	.word	0x0800e27d

0800e27c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e27c:	b480      	push	{r7}
 800e27e:	b085      	sub	sp, #20
 800e280:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e282:	2300      	movs	r3, #0
 800e284:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e286:	4b13      	ldr	r3, [pc, #76]	@ (800e2d4 <prvTaskExitError+0x58>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e28e:	d00b      	beq.n	800e2a8 <prvTaskExitError+0x2c>
	__asm volatile
 800e290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e294:	f383 8811 	msr	BASEPRI, r3
 800e298:	f3bf 8f6f 	isb	sy
 800e29c:	f3bf 8f4f 	dsb	sy
 800e2a0:	60fb      	str	r3, [r7, #12]
}
 800e2a2:	bf00      	nop
 800e2a4:	bf00      	nop
 800e2a6:	e7fd      	b.n	800e2a4 <prvTaskExitError+0x28>
	__asm volatile
 800e2a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ac:	f383 8811 	msr	BASEPRI, r3
 800e2b0:	f3bf 8f6f 	isb	sy
 800e2b4:	f3bf 8f4f 	dsb	sy
 800e2b8:	60bb      	str	r3, [r7, #8]
}
 800e2ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e2bc:	bf00      	nop
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d0fc      	beq.n	800e2be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e2c4:	bf00      	nop
 800e2c6:	bf00      	nop
 800e2c8:	3714      	adds	r7, #20
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d0:	4770      	bx	lr
 800e2d2:	bf00      	nop
 800e2d4:	20000038 	.word	0x20000038
	...

0800e2e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e2e0:	4b07      	ldr	r3, [pc, #28]	@ (800e300 <pxCurrentTCBConst2>)
 800e2e2:	6819      	ldr	r1, [r3, #0]
 800e2e4:	6808      	ldr	r0, [r1, #0]
 800e2e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ea:	f380 8809 	msr	PSP, r0
 800e2ee:	f3bf 8f6f 	isb	sy
 800e2f2:	f04f 0000 	mov.w	r0, #0
 800e2f6:	f380 8811 	msr	BASEPRI, r0
 800e2fa:	4770      	bx	lr
 800e2fc:	f3af 8000 	nop.w

0800e300 <pxCurrentTCBConst2>:
 800e300:	20000c24 	.word	0x20000c24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e304:	bf00      	nop
 800e306:	bf00      	nop

0800e308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e308:	4808      	ldr	r0, [pc, #32]	@ (800e32c <prvPortStartFirstTask+0x24>)
 800e30a:	6800      	ldr	r0, [r0, #0]
 800e30c:	6800      	ldr	r0, [r0, #0]
 800e30e:	f380 8808 	msr	MSP, r0
 800e312:	f04f 0000 	mov.w	r0, #0
 800e316:	f380 8814 	msr	CONTROL, r0
 800e31a:	b662      	cpsie	i
 800e31c:	b661      	cpsie	f
 800e31e:	f3bf 8f4f 	dsb	sy
 800e322:	f3bf 8f6f 	isb	sy
 800e326:	df00      	svc	0
 800e328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e32a:	bf00      	nop
 800e32c:	e000ed08 	.word	0xe000ed08

0800e330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b086      	sub	sp, #24
 800e334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e336:	4b47      	ldr	r3, [pc, #284]	@ (800e454 <xPortStartScheduler+0x124>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4a47      	ldr	r2, [pc, #284]	@ (800e458 <xPortStartScheduler+0x128>)
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d10b      	bne.n	800e358 <xPortStartScheduler+0x28>
	__asm volatile
 800e340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e344:	f383 8811 	msr	BASEPRI, r3
 800e348:	f3bf 8f6f 	isb	sy
 800e34c:	f3bf 8f4f 	dsb	sy
 800e350:	613b      	str	r3, [r7, #16]
}
 800e352:	bf00      	nop
 800e354:	bf00      	nop
 800e356:	e7fd      	b.n	800e354 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e358:	4b3e      	ldr	r3, [pc, #248]	@ (800e454 <xPortStartScheduler+0x124>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4a3f      	ldr	r2, [pc, #252]	@ (800e45c <xPortStartScheduler+0x12c>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d10b      	bne.n	800e37a <xPortStartScheduler+0x4a>
	__asm volatile
 800e362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e366:	f383 8811 	msr	BASEPRI, r3
 800e36a:	f3bf 8f6f 	isb	sy
 800e36e:	f3bf 8f4f 	dsb	sy
 800e372:	60fb      	str	r3, [r7, #12]
}
 800e374:	bf00      	nop
 800e376:	bf00      	nop
 800e378:	e7fd      	b.n	800e376 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e37a:	4b39      	ldr	r3, [pc, #228]	@ (800e460 <xPortStartScheduler+0x130>)
 800e37c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	781b      	ldrb	r3, [r3, #0]
 800e382:	b2db      	uxtb	r3, r3
 800e384:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	22ff      	movs	r2, #255	@ 0xff
 800e38a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	b2db      	uxtb	r3, r3
 800e392:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e394:	78fb      	ldrb	r3, [r7, #3]
 800e396:	b2db      	uxtb	r3, r3
 800e398:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e39c:	b2da      	uxtb	r2, r3
 800e39e:	4b31      	ldr	r3, [pc, #196]	@ (800e464 <xPortStartScheduler+0x134>)
 800e3a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e3a2:	4b31      	ldr	r3, [pc, #196]	@ (800e468 <xPortStartScheduler+0x138>)
 800e3a4:	2207      	movs	r2, #7
 800e3a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e3a8:	e009      	b.n	800e3be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e3aa:	4b2f      	ldr	r3, [pc, #188]	@ (800e468 <xPortStartScheduler+0x138>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	3b01      	subs	r3, #1
 800e3b0:	4a2d      	ldr	r2, [pc, #180]	@ (800e468 <xPortStartScheduler+0x138>)
 800e3b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e3b4:	78fb      	ldrb	r3, [r7, #3]
 800e3b6:	b2db      	uxtb	r3, r3
 800e3b8:	005b      	lsls	r3, r3, #1
 800e3ba:	b2db      	uxtb	r3, r3
 800e3bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e3be:	78fb      	ldrb	r3, [r7, #3]
 800e3c0:	b2db      	uxtb	r3, r3
 800e3c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e3c6:	2b80      	cmp	r3, #128	@ 0x80
 800e3c8:	d0ef      	beq.n	800e3aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e3ca:	4b27      	ldr	r3, [pc, #156]	@ (800e468 <xPortStartScheduler+0x138>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f1c3 0307 	rsb	r3, r3, #7
 800e3d2:	2b04      	cmp	r3, #4
 800e3d4:	d00b      	beq.n	800e3ee <xPortStartScheduler+0xbe>
	__asm volatile
 800e3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3da:	f383 8811 	msr	BASEPRI, r3
 800e3de:	f3bf 8f6f 	isb	sy
 800e3e2:	f3bf 8f4f 	dsb	sy
 800e3e6:	60bb      	str	r3, [r7, #8]
}
 800e3e8:	bf00      	nop
 800e3ea:	bf00      	nop
 800e3ec:	e7fd      	b.n	800e3ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e3ee:	4b1e      	ldr	r3, [pc, #120]	@ (800e468 <xPortStartScheduler+0x138>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	021b      	lsls	r3, r3, #8
 800e3f4:	4a1c      	ldr	r2, [pc, #112]	@ (800e468 <xPortStartScheduler+0x138>)
 800e3f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e3f8:	4b1b      	ldr	r3, [pc, #108]	@ (800e468 <xPortStartScheduler+0x138>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e400:	4a19      	ldr	r2, [pc, #100]	@ (800e468 <xPortStartScheduler+0x138>)
 800e402:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	b2da      	uxtb	r2, r3
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e40c:	4b17      	ldr	r3, [pc, #92]	@ (800e46c <xPortStartScheduler+0x13c>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	4a16      	ldr	r2, [pc, #88]	@ (800e46c <xPortStartScheduler+0x13c>)
 800e412:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e416:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e418:	4b14      	ldr	r3, [pc, #80]	@ (800e46c <xPortStartScheduler+0x13c>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	4a13      	ldr	r2, [pc, #76]	@ (800e46c <xPortStartScheduler+0x13c>)
 800e41e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e422:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e424:	f000 f8da 	bl	800e5dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e428:	4b11      	ldr	r3, [pc, #68]	@ (800e470 <xPortStartScheduler+0x140>)
 800e42a:	2200      	movs	r2, #0
 800e42c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e42e:	f000 f8f9 	bl	800e624 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e432:	4b10      	ldr	r3, [pc, #64]	@ (800e474 <xPortStartScheduler+0x144>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4a0f      	ldr	r2, [pc, #60]	@ (800e474 <xPortStartScheduler+0x144>)
 800e438:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e43c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e43e:	f7ff ff63 	bl	800e308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e442:	f7ff f82d 	bl	800d4a0 <vTaskSwitchContext>
	prvTaskExitError();
 800e446:	f7ff ff19 	bl	800e27c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e44a:	2300      	movs	r3, #0
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3718      	adds	r7, #24
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	e000ed00 	.word	0xe000ed00
 800e458:	410fc271 	.word	0x410fc271
 800e45c:	410fc270 	.word	0x410fc270
 800e460:	e000e400 	.word	0xe000e400
 800e464:	20001250 	.word	0x20001250
 800e468:	20001254 	.word	0x20001254
 800e46c:	e000ed20 	.word	0xe000ed20
 800e470:	20000038 	.word	0x20000038
 800e474:	e000ef34 	.word	0xe000ef34

0800e478 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e478:	b480      	push	{r7}
 800e47a:	b083      	sub	sp, #12
 800e47c:	af00      	add	r7, sp, #0
	__asm volatile
 800e47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e482:	f383 8811 	msr	BASEPRI, r3
 800e486:	f3bf 8f6f 	isb	sy
 800e48a:	f3bf 8f4f 	dsb	sy
 800e48e:	607b      	str	r3, [r7, #4]
}
 800e490:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e492:	4b10      	ldr	r3, [pc, #64]	@ (800e4d4 <vPortEnterCritical+0x5c>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	3301      	adds	r3, #1
 800e498:	4a0e      	ldr	r2, [pc, #56]	@ (800e4d4 <vPortEnterCritical+0x5c>)
 800e49a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e49c:	4b0d      	ldr	r3, [pc, #52]	@ (800e4d4 <vPortEnterCritical+0x5c>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d110      	bne.n	800e4c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e4a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e4d8 <vPortEnterCritical+0x60>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	b2db      	uxtb	r3, r3
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00b      	beq.n	800e4c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4b2:	f383 8811 	msr	BASEPRI, r3
 800e4b6:	f3bf 8f6f 	isb	sy
 800e4ba:	f3bf 8f4f 	dsb	sy
 800e4be:	603b      	str	r3, [r7, #0]
}
 800e4c0:	bf00      	nop
 800e4c2:	bf00      	nop
 800e4c4:	e7fd      	b.n	800e4c2 <vPortEnterCritical+0x4a>
	}
}
 800e4c6:	bf00      	nop
 800e4c8:	370c      	adds	r7, #12
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr
 800e4d2:	bf00      	nop
 800e4d4:	20000038 	.word	0x20000038
 800e4d8:	e000ed04 	.word	0xe000ed04

0800e4dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e4e2:	4b12      	ldr	r3, [pc, #72]	@ (800e52c <vPortExitCritical+0x50>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d10b      	bne.n	800e502 <vPortExitCritical+0x26>
	__asm volatile
 800e4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ee:	f383 8811 	msr	BASEPRI, r3
 800e4f2:	f3bf 8f6f 	isb	sy
 800e4f6:	f3bf 8f4f 	dsb	sy
 800e4fa:	607b      	str	r3, [r7, #4]
}
 800e4fc:	bf00      	nop
 800e4fe:	bf00      	nop
 800e500:	e7fd      	b.n	800e4fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e502:	4b0a      	ldr	r3, [pc, #40]	@ (800e52c <vPortExitCritical+0x50>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	3b01      	subs	r3, #1
 800e508:	4a08      	ldr	r2, [pc, #32]	@ (800e52c <vPortExitCritical+0x50>)
 800e50a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e50c:	4b07      	ldr	r3, [pc, #28]	@ (800e52c <vPortExitCritical+0x50>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d105      	bne.n	800e520 <vPortExitCritical+0x44>
 800e514:	2300      	movs	r3, #0
 800e516:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	f383 8811 	msr	BASEPRI, r3
}
 800e51e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e520:	bf00      	nop
 800e522:	370c      	adds	r7, #12
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr
 800e52c:	20000038 	.word	0x20000038

0800e530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e530:	f3ef 8009 	mrs	r0, PSP
 800e534:	f3bf 8f6f 	isb	sy
 800e538:	4b15      	ldr	r3, [pc, #84]	@ (800e590 <pxCurrentTCBConst>)
 800e53a:	681a      	ldr	r2, [r3, #0]
 800e53c:	f01e 0f10 	tst.w	lr, #16
 800e540:	bf08      	it	eq
 800e542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e54a:	6010      	str	r0, [r2, #0]
 800e54c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e550:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e554:	f380 8811 	msr	BASEPRI, r0
 800e558:	f3bf 8f4f 	dsb	sy
 800e55c:	f3bf 8f6f 	isb	sy
 800e560:	f7fe ff9e 	bl	800d4a0 <vTaskSwitchContext>
 800e564:	f04f 0000 	mov.w	r0, #0
 800e568:	f380 8811 	msr	BASEPRI, r0
 800e56c:	bc09      	pop	{r0, r3}
 800e56e:	6819      	ldr	r1, [r3, #0]
 800e570:	6808      	ldr	r0, [r1, #0]
 800e572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e576:	f01e 0f10 	tst.w	lr, #16
 800e57a:	bf08      	it	eq
 800e57c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e580:	f380 8809 	msr	PSP, r0
 800e584:	f3bf 8f6f 	isb	sy
 800e588:	4770      	bx	lr
 800e58a:	bf00      	nop
 800e58c:	f3af 8000 	nop.w

0800e590 <pxCurrentTCBConst>:
 800e590:	20000c24 	.word	0x20000c24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e594:	bf00      	nop
 800e596:	bf00      	nop

0800e598 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
	__asm volatile
 800e59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5a2:	f383 8811 	msr	BASEPRI, r3
 800e5a6:	f3bf 8f6f 	isb	sy
 800e5aa:	f3bf 8f4f 	dsb	sy
 800e5ae:	607b      	str	r3, [r7, #4]
}
 800e5b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e5b2:	f7fe febb 	bl	800d32c <xTaskIncrementTick>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d003      	beq.n	800e5c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e5bc:	4b06      	ldr	r3, [pc, #24]	@ (800e5d8 <xPortSysTickHandler+0x40>)
 800e5be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5c2:	601a      	str	r2, [r3, #0]
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	f383 8811 	msr	BASEPRI, r3
}
 800e5ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e5d0:	bf00      	nop
 800e5d2:	3708      	adds	r7, #8
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	e000ed04 	.word	0xe000ed04

0800e5dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e5dc:	b480      	push	{r7}
 800e5de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e5e0:	4b0b      	ldr	r3, [pc, #44]	@ (800e610 <vPortSetupTimerInterrupt+0x34>)
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e5e6:	4b0b      	ldr	r3, [pc, #44]	@ (800e614 <vPortSetupTimerInterrupt+0x38>)
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e5ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e618 <vPortSetupTimerInterrupt+0x3c>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	4a0a      	ldr	r2, [pc, #40]	@ (800e61c <vPortSetupTimerInterrupt+0x40>)
 800e5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e5f6:	099b      	lsrs	r3, r3, #6
 800e5f8:	4a09      	ldr	r2, [pc, #36]	@ (800e620 <vPortSetupTimerInterrupt+0x44>)
 800e5fa:	3b01      	subs	r3, #1
 800e5fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e5fe:	4b04      	ldr	r3, [pc, #16]	@ (800e610 <vPortSetupTimerInterrupt+0x34>)
 800e600:	2207      	movs	r2, #7
 800e602:	601a      	str	r2, [r3, #0]
}
 800e604:	bf00      	nop
 800e606:	46bd      	mov	sp, r7
 800e608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60c:	4770      	bx	lr
 800e60e:	bf00      	nop
 800e610:	e000e010 	.word	0xe000e010
 800e614:	e000e018 	.word	0xe000e018
 800e618:	2000002c 	.word	0x2000002c
 800e61c:	10624dd3 	.word	0x10624dd3
 800e620:	e000e014 	.word	0xe000e014

0800e624 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e624:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e634 <vPortEnableVFP+0x10>
 800e628:	6801      	ldr	r1, [r0, #0]
 800e62a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e62e:	6001      	str	r1, [r0, #0]
 800e630:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e632:	bf00      	nop
 800e634:	e000ed88 	.word	0xe000ed88

0800e638 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e638:	b480      	push	{r7}
 800e63a:	b085      	sub	sp, #20
 800e63c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e63e:	f3ef 8305 	mrs	r3, IPSR
 800e642:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2b0f      	cmp	r3, #15
 800e648:	d915      	bls.n	800e676 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e64a:	4a18      	ldr	r2, [pc, #96]	@ (800e6ac <vPortValidateInterruptPriority+0x74>)
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	4413      	add	r3, r2
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e654:	4b16      	ldr	r3, [pc, #88]	@ (800e6b0 <vPortValidateInterruptPriority+0x78>)
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	7afa      	ldrb	r2, [r7, #11]
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d20b      	bcs.n	800e676 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e662:	f383 8811 	msr	BASEPRI, r3
 800e666:	f3bf 8f6f 	isb	sy
 800e66a:	f3bf 8f4f 	dsb	sy
 800e66e:	607b      	str	r3, [r7, #4]
}
 800e670:	bf00      	nop
 800e672:	bf00      	nop
 800e674:	e7fd      	b.n	800e672 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e676:	4b0f      	ldr	r3, [pc, #60]	@ (800e6b4 <vPortValidateInterruptPriority+0x7c>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e67e:	4b0e      	ldr	r3, [pc, #56]	@ (800e6b8 <vPortValidateInterruptPriority+0x80>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	429a      	cmp	r2, r3
 800e684:	d90b      	bls.n	800e69e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e68a:	f383 8811 	msr	BASEPRI, r3
 800e68e:	f3bf 8f6f 	isb	sy
 800e692:	f3bf 8f4f 	dsb	sy
 800e696:	603b      	str	r3, [r7, #0]
}
 800e698:	bf00      	nop
 800e69a:	bf00      	nop
 800e69c:	e7fd      	b.n	800e69a <vPortValidateInterruptPriority+0x62>
	}
 800e69e:	bf00      	nop
 800e6a0:	3714      	adds	r7, #20
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a8:	4770      	bx	lr
 800e6aa:	bf00      	nop
 800e6ac:	e000e3f0 	.word	0xe000e3f0
 800e6b0:	20001250 	.word	0x20001250
 800e6b4:	e000ed0c 	.word	0xe000ed0c
 800e6b8:	20001254 	.word	0x20001254

0800e6bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b08a      	sub	sp, #40	@ 0x28
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e6c8:	f7fe fd74 	bl	800d1b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e6cc:	4b5c      	ldr	r3, [pc, #368]	@ (800e840 <pvPortMalloc+0x184>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d101      	bne.n	800e6d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e6d4:	f000 f924 	bl	800e920 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e6d8:	4b5a      	ldr	r3, [pc, #360]	@ (800e844 <pvPortMalloc+0x188>)
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	4013      	ands	r3, r2
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	f040 8095 	bne.w	800e810 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d01e      	beq.n	800e72a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e6ec:	2208      	movs	r2, #8
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	4413      	add	r3, r2
 800e6f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f003 0307 	and.w	r3, r3, #7
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d015      	beq.n	800e72a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f023 0307 	bic.w	r3, r3, #7
 800e704:	3308      	adds	r3, #8
 800e706:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f003 0307 	and.w	r3, r3, #7
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d00b      	beq.n	800e72a <pvPortMalloc+0x6e>
	__asm volatile
 800e712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e716:	f383 8811 	msr	BASEPRI, r3
 800e71a:	f3bf 8f6f 	isb	sy
 800e71e:	f3bf 8f4f 	dsb	sy
 800e722:	617b      	str	r3, [r7, #20]
}
 800e724:	bf00      	nop
 800e726:	bf00      	nop
 800e728:	e7fd      	b.n	800e726 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d06f      	beq.n	800e810 <pvPortMalloc+0x154>
 800e730:	4b45      	ldr	r3, [pc, #276]	@ (800e848 <pvPortMalloc+0x18c>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	687a      	ldr	r2, [r7, #4]
 800e736:	429a      	cmp	r2, r3
 800e738:	d86a      	bhi.n	800e810 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e73a:	4b44      	ldr	r3, [pc, #272]	@ (800e84c <pvPortMalloc+0x190>)
 800e73c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e73e:	4b43      	ldr	r3, [pc, #268]	@ (800e84c <pvPortMalloc+0x190>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e744:	e004      	b.n	800e750 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e748:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	429a      	cmp	r2, r3
 800e758:	d903      	bls.n	800e762 <pvPortMalloc+0xa6>
 800e75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d1f1      	bne.n	800e746 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e762:	4b37      	ldr	r3, [pc, #220]	@ (800e840 <pvPortMalloc+0x184>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e768:	429a      	cmp	r2, r3
 800e76a:	d051      	beq.n	800e810 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e76c:	6a3b      	ldr	r3, [r7, #32]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	2208      	movs	r2, #8
 800e772:	4413      	add	r3, r2
 800e774:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e778:	681a      	ldr	r2, [r3, #0]
 800e77a:	6a3b      	ldr	r3, [r7, #32]
 800e77c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e780:	685a      	ldr	r2, [r3, #4]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	1ad2      	subs	r2, r2, r3
 800e786:	2308      	movs	r3, #8
 800e788:	005b      	lsls	r3, r3, #1
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d920      	bls.n	800e7d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e78e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	4413      	add	r3, r2
 800e794:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e796:	69bb      	ldr	r3, [r7, #24]
 800e798:	f003 0307 	and.w	r3, r3, #7
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d00b      	beq.n	800e7b8 <pvPortMalloc+0xfc>
	__asm volatile
 800e7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7a4:	f383 8811 	msr	BASEPRI, r3
 800e7a8:	f3bf 8f6f 	isb	sy
 800e7ac:	f3bf 8f4f 	dsb	sy
 800e7b0:	613b      	str	r3, [r7, #16]
}
 800e7b2:	bf00      	nop
 800e7b4:	bf00      	nop
 800e7b6:	e7fd      	b.n	800e7b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ba:	685a      	ldr	r2, [r3, #4]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	1ad2      	subs	r2, r2, r3
 800e7c0:	69bb      	ldr	r3, [r7, #24]
 800e7c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7c6:	687a      	ldr	r2, [r7, #4]
 800e7c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e7ca:	69b8      	ldr	r0, [r7, #24]
 800e7cc:	f000 f90a 	bl	800e9e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e7d0:	4b1d      	ldr	r3, [pc, #116]	@ (800e848 <pvPortMalloc+0x18c>)
 800e7d2:	681a      	ldr	r2, [r3, #0]
 800e7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	1ad3      	subs	r3, r2, r3
 800e7da:	4a1b      	ldr	r2, [pc, #108]	@ (800e848 <pvPortMalloc+0x18c>)
 800e7dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e7de:	4b1a      	ldr	r3, [pc, #104]	@ (800e848 <pvPortMalloc+0x18c>)
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	4b1b      	ldr	r3, [pc, #108]	@ (800e850 <pvPortMalloc+0x194>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	d203      	bcs.n	800e7f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e7ea:	4b17      	ldr	r3, [pc, #92]	@ (800e848 <pvPortMalloc+0x18c>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	4a18      	ldr	r2, [pc, #96]	@ (800e850 <pvPortMalloc+0x194>)
 800e7f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7f4:	685a      	ldr	r2, [r3, #4]
 800e7f6:	4b13      	ldr	r3, [pc, #76]	@ (800e844 <pvPortMalloc+0x188>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	431a      	orrs	r2, r3
 800e7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e802:	2200      	movs	r2, #0
 800e804:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e806:	4b13      	ldr	r3, [pc, #76]	@ (800e854 <pvPortMalloc+0x198>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	3301      	adds	r3, #1
 800e80c:	4a11      	ldr	r2, [pc, #68]	@ (800e854 <pvPortMalloc+0x198>)
 800e80e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e810:	f7fe fcde 	bl	800d1d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e814:	69fb      	ldr	r3, [r7, #28]
 800e816:	f003 0307 	and.w	r3, r3, #7
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d00b      	beq.n	800e836 <pvPortMalloc+0x17a>
	__asm volatile
 800e81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e822:	f383 8811 	msr	BASEPRI, r3
 800e826:	f3bf 8f6f 	isb	sy
 800e82a:	f3bf 8f4f 	dsb	sy
 800e82e:	60fb      	str	r3, [r7, #12]
}
 800e830:	bf00      	nop
 800e832:	bf00      	nop
 800e834:	e7fd      	b.n	800e832 <pvPortMalloc+0x176>
	return pvReturn;
 800e836:	69fb      	ldr	r3, [r7, #28]
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3728      	adds	r7, #40	@ 0x28
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}
 800e840:	200029d0 	.word	0x200029d0
 800e844:	200029e4 	.word	0x200029e4
 800e848:	200029d4 	.word	0x200029d4
 800e84c:	200029c8 	.word	0x200029c8
 800e850:	200029d8 	.word	0x200029d8
 800e854:	200029dc 	.word	0x200029dc

0800e858 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b086      	sub	sp, #24
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d04f      	beq.n	800e90a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e86a:	2308      	movs	r3, #8
 800e86c:	425b      	negs	r3, r3
 800e86e:	697a      	ldr	r2, [r7, #20]
 800e870:	4413      	add	r3, r2
 800e872:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	685a      	ldr	r2, [r3, #4]
 800e87c:	4b25      	ldr	r3, [pc, #148]	@ (800e914 <vPortFree+0xbc>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4013      	ands	r3, r2
 800e882:	2b00      	cmp	r3, #0
 800e884:	d10b      	bne.n	800e89e <vPortFree+0x46>
	__asm volatile
 800e886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e88a:	f383 8811 	msr	BASEPRI, r3
 800e88e:	f3bf 8f6f 	isb	sy
 800e892:	f3bf 8f4f 	dsb	sy
 800e896:	60fb      	str	r3, [r7, #12]
}
 800e898:	bf00      	nop
 800e89a:	bf00      	nop
 800e89c:	e7fd      	b.n	800e89a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e89e:	693b      	ldr	r3, [r7, #16]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d00b      	beq.n	800e8be <vPortFree+0x66>
	__asm volatile
 800e8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8aa:	f383 8811 	msr	BASEPRI, r3
 800e8ae:	f3bf 8f6f 	isb	sy
 800e8b2:	f3bf 8f4f 	dsb	sy
 800e8b6:	60bb      	str	r3, [r7, #8]
}
 800e8b8:	bf00      	nop
 800e8ba:	bf00      	nop
 800e8bc:	e7fd      	b.n	800e8ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	685a      	ldr	r2, [r3, #4]
 800e8c2:	4b14      	ldr	r3, [pc, #80]	@ (800e914 <vPortFree+0xbc>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4013      	ands	r3, r2
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d01e      	beq.n	800e90a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d11a      	bne.n	800e90a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	685a      	ldr	r2, [r3, #4]
 800e8d8:	4b0e      	ldr	r3, [pc, #56]	@ (800e914 <vPortFree+0xbc>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	43db      	mvns	r3, r3
 800e8de:	401a      	ands	r2, r3
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e8e4:	f7fe fc66 	bl	800d1b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	685a      	ldr	r2, [r3, #4]
 800e8ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e918 <vPortFree+0xc0>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4413      	add	r3, r2
 800e8f2:	4a09      	ldr	r2, [pc, #36]	@ (800e918 <vPortFree+0xc0>)
 800e8f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e8f6:	6938      	ldr	r0, [r7, #16]
 800e8f8:	f000 f874 	bl	800e9e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e8fc:	4b07      	ldr	r3, [pc, #28]	@ (800e91c <vPortFree+0xc4>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	3301      	adds	r3, #1
 800e902:	4a06      	ldr	r2, [pc, #24]	@ (800e91c <vPortFree+0xc4>)
 800e904:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e906:	f7fe fc63 	bl	800d1d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e90a:	bf00      	nop
 800e90c:	3718      	adds	r7, #24
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	200029e4 	.word	0x200029e4
 800e918:	200029d4 	.word	0x200029d4
 800e91c:	200029e0 	.word	0x200029e0

0800e920 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e920:	b480      	push	{r7}
 800e922:	b085      	sub	sp, #20
 800e924:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e926:	f241 7370 	movw	r3, #6000	@ 0x1770
 800e92a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e92c:	4b27      	ldr	r3, [pc, #156]	@ (800e9cc <prvHeapInit+0xac>)
 800e92e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	f003 0307 	and.w	r3, r3, #7
 800e936:	2b00      	cmp	r3, #0
 800e938:	d00c      	beq.n	800e954 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	3307      	adds	r3, #7
 800e93e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f023 0307 	bic.w	r3, r3, #7
 800e946:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e948:	68ba      	ldr	r2, [r7, #8]
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	1ad3      	subs	r3, r2, r3
 800e94e:	4a1f      	ldr	r2, [pc, #124]	@ (800e9cc <prvHeapInit+0xac>)
 800e950:	4413      	add	r3, r2
 800e952:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e958:	4a1d      	ldr	r2, [pc, #116]	@ (800e9d0 <prvHeapInit+0xb0>)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e95e:	4b1c      	ldr	r3, [pc, #112]	@ (800e9d0 <prvHeapInit+0xb0>)
 800e960:	2200      	movs	r2, #0
 800e962:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	68ba      	ldr	r2, [r7, #8]
 800e968:	4413      	add	r3, r2
 800e96a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e96c:	2208      	movs	r2, #8
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	1a9b      	subs	r3, r3, r2
 800e972:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f023 0307 	bic.w	r3, r3, #7
 800e97a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	4a15      	ldr	r2, [pc, #84]	@ (800e9d4 <prvHeapInit+0xb4>)
 800e980:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e982:	4b14      	ldr	r3, [pc, #80]	@ (800e9d4 <prvHeapInit+0xb4>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	2200      	movs	r2, #0
 800e988:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e98a:	4b12      	ldr	r3, [pc, #72]	@ (800e9d4 <prvHeapInit+0xb4>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	2200      	movs	r2, #0
 800e990:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	68fa      	ldr	r2, [r7, #12]
 800e99a:	1ad2      	subs	r2, r2, r3
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e9a0:	4b0c      	ldr	r3, [pc, #48]	@ (800e9d4 <prvHeapInit+0xb4>)
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	685b      	ldr	r3, [r3, #4]
 800e9ac:	4a0a      	ldr	r2, [pc, #40]	@ (800e9d8 <prvHeapInit+0xb8>)
 800e9ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	685b      	ldr	r3, [r3, #4]
 800e9b4:	4a09      	ldr	r2, [pc, #36]	@ (800e9dc <prvHeapInit+0xbc>)
 800e9b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e9b8:	4b09      	ldr	r3, [pc, #36]	@ (800e9e0 <prvHeapInit+0xc0>)
 800e9ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e9be:	601a      	str	r2, [r3, #0]
}
 800e9c0:	bf00      	nop
 800e9c2:	3714      	adds	r7, #20
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr
 800e9cc:	20001258 	.word	0x20001258
 800e9d0:	200029c8 	.word	0x200029c8
 800e9d4:	200029d0 	.word	0x200029d0
 800e9d8:	200029d8 	.word	0x200029d8
 800e9dc:	200029d4 	.word	0x200029d4
 800e9e0:	200029e4 	.word	0x200029e4

0800e9e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b085      	sub	sp, #20
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e9ec:	4b28      	ldr	r3, [pc, #160]	@ (800ea90 <prvInsertBlockIntoFreeList+0xac>)
 800e9ee:	60fb      	str	r3, [r7, #12]
 800e9f0:	e002      	b.n	800e9f8 <prvInsertBlockIntoFreeList+0x14>
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	60fb      	str	r3, [r7, #12]
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	687a      	ldr	r2, [r7, #4]
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d8f7      	bhi.n	800e9f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	68ba      	ldr	r2, [r7, #8]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	687a      	ldr	r2, [r7, #4]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d108      	bne.n	800ea26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	685a      	ldr	r2, [r3, #4]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	685b      	ldr	r3, [r3, #4]
 800ea1c:	441a      	add	r2, r3
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	685b      	ldr	r3, [r3, #4]
 800ea2e:	68ba      	ldr	r2, [r7, #8]
 800ea30:	441a      	add	r2, r3
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d118      	bne.n	800ea6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	4b15      	ldr	r3, [pc, #84]	@ (800ea94 <prvInsertBlockIntoFreeList+0xb0>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d00d      	beq.n	800ea62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	685a      	ldr	r2, [r3, #4]
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	441a      	add	r2, r3
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	601a      	str	r2, [r3, #0]
 800ea60:	e008      	b.n	800ea74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ea62:	4b0c      	ldr	r3, [pc, #48]	@ (800ea94 <prvInsertBlockIntoFreeList+0xb0>)
 800ea64:	681a      	ldr	r2, [r3, #0]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	601a      	str	r2, [r3, #0]
 800ea6a:	e003      	b.n	800ea74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ea74:	68fa      	ldr	r2, [r7, #12]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d002      	beq.n	800ea82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	687a      	ldr	r2, [r7, #4]
 800ea80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea82:	bf00      	nop
 800ea84:	3714      	adds	r7, #20
 800ea86:	46bd      	mov	sp, r7
 800ea88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8c:	4770      	bx	lr
 800ea8e:	bf00      	nop
 800ea90:	200029c8 	.word	0x200029c8
 800ea94:	200029d0 	.word	0x200029d0

0800ea98 <_ZdlPvj>:
 800ea98:	f000 b800 	b.w	800ea9c <_ZdlPv>

0800ea9c <_ZdlPv>:
 800ea9c:	f000 b800 	b.w	800eaa0 <free>

0800eaa0 <free>:
 800eaa0:	4b02      	ldr	r3, [pc, #8]	@ (800eaac <free+0xc>)
 800eaa2:	4601      	mov	r1, r0
 800eaa4:	6818      	ldr	r0, [r3, #0]
 800eaa6:	f000 b98d 	b.w	800edc4 <_free_r>
 800eaaa:	bf00      	nop
 800eaac:	2000003c 	.word	0x2000003c

0800eab0 <sbrk_aligned>:
 800eab0:	b570      	push	{r4, r5, r6, lr}
 800eab2:	4e0f      	ldr	r6, [pc, #60]	@ (800eaf0 <sbrk_aligned+0x40>)
 800eab4:	460c      	mov	r4, r1
 800eab6:	6831      	ldr	r1, [r6, #0]
 800eab8:	4605      	mov	r5, r0
 800eaba:	b911      	cbnz	r1, 800eac2 <sbrk_aligned+0x12>
 800eabc:	f000 f938 	bl	800ed30 <_sbrk_r>
 800eac0:	6030      	str	r0, [r6, #0]
 800eac2:	4621      	mov	r1, r4
 800eac4:	4628      	mov	r0, r5
 800eac6:	f000 f933 	bl	800ed30 <_sbrk_r>
 800eaca:	1c43      	adds	r3, r0, #1
 800eacc:	d103      	bne.n	800ead6 <sbrk_aligned+0x26>
 800eace:	f04f 34ff 	mov.w	r4, #4294967295
 800ead2:	4620      	mov	r0, r4
 800ead4:	bd70      	pop	{r4, r5, r6, pc}
 800ead6:	1cc4      	adds	r4, r0, #3
 800ead8:	f024 0403 	bic.w	r4, r4, #3
 800eadc:	42a0      	cmp	r0, r4
 800eade:	d0f8      	beq.n	800ead2 <sbrk_aligned+0x22>
 800eae0:	1a21      	subs	r1, r4, r0
 800eae2:	4628      	mov	r0, r5
 800eae4:	f000 f924 	bl	800ed30 <_sbrk_r>
 800eae8:	3001      	adds	r0, #1
 800eaea:	d1f2      	bne.n	800ead2 <sbrk_aligned+0x22>
 800eaec:	e7ef      	b.n	800eace <sbrk_aligned+0x1e>
 800eaee:	bf00      	nop
 800eaf0:	200029e8 	.word	0x200029e8

0800eaf4 <_malloc_r>:
 800eaf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eaf8:	1ccd      	adds	r5, r1, #3
 800eafa:	f025 0503 	bic.w	r5, r5, #3
 800eafe:	3508      	adds	r5, #8
 800eb00:	2d0c      	cmp	r5, #12
 800eb02:	bf38      	it	cc
 800eb04:	250c      	movcc	r5, #12
 800eb06:	2d00      	cmp	r5, #0
 800eb08:	4606      	mov	r6, r0
 800eb0a:	db01      	blt.n	800eb10 <_malloc_r+0x1c>
 800eb0c:	42a9      	cmp	r1, r5
 800eb0e:	d904      	bls.n	800eb1a <_malloc_r+0x26>
 800eb10:	230c      	movs	r3, #12
 800eb12:	6033      	str	r3, [r6, #0]
 800eb14:	2000      	movs	r0, #0
 800eb16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ebf0 <_malloc_r+0xfc>
 800eb1e:	f000 f869 	bl	800ebf4 <__malloc_lock>
 800eb22:	f8d8 3000 	ldr.w	r3, [r8]
 800eb26:	461c      	mov	r4, r3
 800eb28:	bb44      	cbnz	r4, 800eb7c <_malloc_r+0x88>
 800eb2a:	4629      	mov	r1, r5
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	f7ff ffbf 	bl	800eab0 <sbrk_aligned>
 800eb32:	1c43      	adds	r3, r0, #1
 800eb34:	4604      	mov	r4, r0
 800eb36:	d158      	bne.n	800ebea <_malloc_r+0xf6>
 800eb38:	f8d8 4000 	ldr.w	r4, [r8]
 800eb3c:	4627      	mov	r7, r4
 800eb3e:	2f00      	cmp	r7, #0
 800eb40:	d143      	bne.n	800ebca <_malloc_r+0xd6>
 800eb42:	2c00      	cmp	r4, #0
 800eb44:	d04b      	beq.n	800ebde <_malloc_r+0xea>
 800eb46:	6823      	ldr	r3, [r4, #0]
 800eb48:	4639      	mov	r1, r7
 800eb4a:	4630      	mov	r0, r6
 800eb4c:	eb04 0903 	add.w	r9, r4, r3
 800eb50:	f000 f8ee 	bl	800ed30 <_sbrk_r>
 800eb54:	4581      	cmp	r9, r0
 800eb56:	d142      	bne.n	800ebde <_malloc_r+0xea>
 800eb58:	6821      	ldr	r1, [r4, #0]
 800eb5a:	1a6d      	subs	r5, r5, r1
 800eb5c:	4629      	mov	r1, r5
 800eb5e:	4630      	mov	r0, r6
 800eb60:	f7ff ffa6 	bl	800eab0 <sbrk_aligned>
 800eb64:	3001      	adds	r0, #1
 800eb66:	d03a      	beq.n	800ebde <_malloc_r+0xea>
 800eb68:	6823      	ldr	r3, [r4, #0]
 800eb6a:	442b      	add	r3, r5
 800eb6c:	6023      	str	r3, [r4, #0]
 800eb6e:	f8d8 3000 	ldr.w	r3, [r8]
 800eb72:	685a      	ldr	r2, [r3, #4]
 800eb74:	bb62      	cbnz	r2, 800ebd0 <_malloc_r+0xdc>
 800eb76:	f8c8 7000 	str.w	r7, [r8]
 800eb7a:	e00f      	b.n	800eb9c <_malloc_r+0xa8>
 800eb7c:	6822      	ldr	r2, [r4, #0]
 800eb7e:	1b52      	subs	r2, r2, r5
 800eb80:	d420      	bmi.n	800ebc4 <_malloc_r+0xd0>
 800eb82:	2a0b      	cmp	r2, #11
 800eb84:	d917      	bls.n	800ebb6 <_malloc_r+0xc2>
 800eb86:	1961      	adds	r1, r4, r5
 800eb88:	42a3      	cmp	r3, r4
 800eb8a:	6025      	str	r5, [r4, #0]
 800eb8c:	bf18      	it	ne
 800eb8e:	6059      	strne	r1, [r3, #4]
 800eb90:	6863      	ldr	r3, [r4, #4]
 800eb92:	bf08      	it	eq
 800eb94:	f8c8 1000 	streq.w	r1, [r8]
 800eb98:	5162      	str	r2, [r4, r5]
 800eb9a:	604b      	str	r3, [r1, #4]
 800eb9c:	4630      	mov	r0, r6
 800eb9e:	f000 f82f 	bl	800ec00 <__malloc_unlock>
 800eba2:	f104 000b 	add.w	r0, r4, #11
 800eba6:	1d23      	adds	r3, r4, #4
 800eba8:	f020 0007 	bic.w	r0, r0, #7
 800ebac:	1ac2      	subs	r2, r0, r3
 800ebae:	bf1c      	itt	ne
 800ebb0:	1a1b      	subne	r3, r3, r0
 800ebb2:	50a3      	strne	r3, [r4, r2]
 800ebb4:	e7af      	b.n	800eb16 <_malloc_r+0x22>
 800ebb6:	6862      	ldr	r2, [r4, #4]
 800ebb8:	42a3      	cmp	r3, r4
 800ebba:	bf0c      	ite	eq
 800ebbc:	f8c8 2000 	streq.w	r2, [r8]
 800ebc0:	605a      	strne	r2, [r3, #4]
 800ebc2:	e7eb      	b.n	800eb9c <_malloc_r+0xa8>
 800ebc4:	4623      	mov	r3, r4
 800ebc6:	6864      	ldr	r4, [r4, #4]
 800ebc8:	e7ae      	b.n	800eb28 <_malloc_r+0x34>
 800ebca:	463c      	mov	r4, r7
 800ebcc:	687f      	ldr	r7, [r7, #4]
 800ebce:	e7b6      	b.n	800eb3e <_malloc_r+0x4a>
 800ebd0:	461a      	mov	r2, r3
 800ebd2:	685b      	ldr	r3, [r3, #4]
 800ebd4:	42a3      	cmp	r3, r4
 800ebd6:	d1fb      	bne.n	800ebd0 <_malloc_r+0xdc>
 800ebd8:	2300      	movs	r3, #0
 800ebda:	6053      	str	r3, [r2, #4]
 800ebdc:	e7de      	b.n	800eb9c <_malloc_r+0xa8>
 800ebde:	230c      	movs	r3, #12
 800ebe0:	6033      	str	r3, [r6, #0]
 800ebe2:	4630      	mov	r0, r6
 800ebe4:	f000 f80c 	bl	800ec00 <__malloc_unlock>
 800ebe8:	e794      	b.n	800eb14 <_malloc_r+0x20>
 800ebea:	6005      	str	r5, [r0, #0]
 800ebec:	e7d6      	b.n	800eb9c <_malloc_r+0xa8>
 800ebee:	bf00      	nop
 800ebf0:	200029ec 	.word	0x200029ec

0800ebf4 <__malloc_lock>:
 800ebf4:	4801      	ldr	r0, [pc, #4]	@ (800ebfc <__malloc_lock+0x8>)
 800ebf6:	f000 b8d5 	b.w	800eda4 <__retarget_lock_acquire_recursive>
 800ebfa:	bf00      	nop
 800ebfc:	20002b2c 	.word	0x20002b2c

0800ec00 <__malloc_unlock>:
 800ec00:	4801      	ldr	r0, [pc, #4]	@ (800ec08 <__malloc_unlock+0x8>)
 800ec02:	f000 b8d0 	b.w	800eda6 <__retarget_lock_release_recursive>
 800ec06:	bf00      	nop
 800ec08:	20002b2c 	.word	0x20002b2c

0800ec0c <sniprintf>:
 800ec0c:	b40c      	push	{r2, r3}
 800ec0e:	b530      	push	{r4, r5, lr}
 800ec10:	4b17      	ldr	r3, [pc, #92]	@ (800ec70 <sniprintf+0x64>)
 800ec12:	1e0c      	subs	r4, r1, #0
 800ec14:	681d      	ldr	r5, [r3, #0]
 800ec16:	b09d      	sub	sp, #116	@ 0x74
 800ec18:	da08      	bge.n	800ec2c <sniprintf+0x20>
 800ec1a:	238b      	movs	r3, #139	@ 0x8b
 800ec1c:	602b      	str	r3, [r5, #0]
 800ec1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec22:	b01d      	add	sp, #116	@ 0x74
 800ec24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec28:	b002      	add	sp, #8
 800ec2a:	4770      	bx	lr
 800ec2c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ec30:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ec34:	bf14      	ite	ne
 800ec36:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ec3a:	4623      	moveq	r3, r4
 800ec3c:	9304      	str	r3, [sp, #16]
 800ec3e:	9307      	str	r3, [sp, #28]
 800ec40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ec44:	9002      	str	r0, [sp, #8]
 800ec46:	9006      	str	r0, [sp, #24]
 800ec48:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ec4c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ec4e:	ab21      	add	r3, sp, #132	@ 0x84
 800ec50:	a902      	add	r1, sp, #8
 800ec52:	4628      	mov	r0, r5
 800ec54:	9301      	str	r3, [sp, #4]
 800ec56:	f000 f95b 	bl	800ef10 <_svfiprintf_r>
 800ec5a:	1c43      	adds	r3, r0, #1
 800ec5c:	bfbc      	itt	lt
 800ec5e:	238b      	movlt	r3, #139	@ 0x8b
 800ec60:	602b      	strlt	r3, [r5, #0]
 800ec62:	2c00      	cmp	r4, #0
 800ec64:	d0dd      	beq.n	800ec22 <sniprintf+0x16>
 800ec66:	9b02      	ldr	r3, [sp, #8]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	701a      	strb	r2, [r3, #0]
 800ec6c:	e7d9      	b.n	800ec22 <sniprintf+0x16>
 800ec6e:	bf00      	nop
 800ec70:	2000003c 	.word	0x2000003c

0800ec74 <memset>:
 800ec74:	4402      	add	r2, r0
 800ec76:	4603      	mov	r3, r0
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d100      	bne.n	800ec7e <memset+0xa>
 800ec7c:	4770      	bx	lr
 800ec7e:	f803 1b01 	strb.w	r1, [r3], #1
 800ec82:	e7f9      	b.n	800ec78 <memset+0x4>

0800ec84 <_reclaim_reent>:
 800ec84:	4b29      	ldr	r3, [pc, #164]	@ (800ed2c <_reclaim_reent+0xa8>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	4283      	cmp	r3, r0
 800ec8a:	b570      	push	{r4, r5, r6, lr}
 800ec8c:	4604      	mov	r4, r0
 800ec8e:	d04b      	beq.n	800ed28 <_reclaim_reent+0xa4>
 800ec90:	69c3      	ldr	r3, [r0, #28]
 800ec92:	b1ab      	cbz	r3, 800ecc0 <_reclaim_reent+0x3c>
 800ec94:	68db      	ldr	r3, [r3, #12]
 800ec96:	b16b      	cbz	r3, 800ecb4 <_reclaim_reent+0x30>
 800ec98:	2500      	movs	r5, #0
 800ec9a:	69e3      	ldr	r3, [r4, #28]
 800ec9c:	68db      	ldr	r3, [r3, #12]
 800ec9e:	5959      	ldr	r1, [r3, r5]
 800eca0:	2900      	cmp	r1, #0
 800eca2:	d13b      	bne.n	800ed1c <_reclaim_reent+0x98>
 800eca4:	3504      	adds	r5, #4
 800eca6:	2d80      	cmp	r5, #128	@ 0x80
 800eca8:	d1f7      	bne.n	800ec9a <_reclaim_reent+0x16>
 800ecaa:	69e3      	ldr	r3, [r4, #28]
 800ecac:	4620      	mov	r0, r4
 800ecae:	68d9      	ldr	r1, [r3, #12]
 800ecb0:	f000 f888 	bl	800edc4 <_free_r>
 800ecb4:	69e3      	ldr	r3, [r4, #28]
 800ecb6:	6819      	ldr	r1, [r3, #0]
 800ecb8:	b111      	cbz	r1, 800ecc0 <_reclaim_reent+0x3c>
 800ecba:	4620      	mov	r0, r4
 800ecbc:	f000 f882 	bl	800edc4 <_free_r>
 800ecc0:	6961      	ldr	r1, [r4, #20]
 800ecc2:	b111      	cbz	r1, 800ecca <_reclaim_reent+0x46>
 800ecc4:	4620      	mov	r0, r4
 800ecc6:	f000 f87d 	bl	800edc4 <_free_r>
 800ecca:	69e1      	ldr	r1, [r4, #28]
 800eccc:	b111      	cbz	r1, 800ecd4 <_reclaim_reent+0x50>
 800ecce:	4620      	mov	r0, r4
 800ecd0:	f000 f878 	bl	800edc4 <_free_r>
 800ecd4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ecd6:	b111      	cbz	r1, 800ecde <_reclaim_reent+0x5a>
 800ecd8:	4620      	mov	r0, r4
 800ecda:	f000 f873 	bl	800edc4 <_free_r>
 800ecde:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ece0:	b111      	cbz	r1, 800ece8 <_reclaim_reent+0x64>
 800ece2:	4620      	mov	r0, r4
 800ece4:	f000 f86e 	bl	800edc4 <_free_r>
 800ece8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ecea:	b111      	cbz	r1, 800ecf2 <_reclaim_reent+0x6e>
 800ecec:	4620      	mov	r0, r4
 800ecee:	f000 f869 	bl	800edc4 <_free_r>
 800ecf2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ecf4:	b111      	cbz	r1, 800ecfc <_reclaim_reent+0x78>
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	f000 f864 	bl	800edc4 <_free_r>
 800ecfc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ecfe:	b111      	cbz	r1, 800ed06 <_reclaim_reent+0x82>
 800ed00:	4620      	mov	r0, r4
 800ed02:	f000 f85f 	bl	800edc4 <_free_r>
 800ed06:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ed08:	b111      	cbz	r1, 800ed10 <_reclaim_reent+0x8c>
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f000 f85a 	bl	800edc4 <_free_r>
 800ed10:	6a23      	ldr	r3, [r4, #32]
 800ed12:	b14b      	cbz	r3, 800ed28 <_reclaim_reent+0xa4>
 800ed14:	4620      	mov	r0, r4
 800ed16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed1a:	4718      	bx	r3
 800ed1c:	680e      	ldr	r6, [r1, #0]
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f000 f850 	bl	800edc4 <_free_r>
 800ed24:	4631      	mov	r1, r6
 800ed26:	e7bb      	b.n	800eca0 <_reclaim_reent+0x1c>
 800ed28:	bd70      	pop	{r4, r5, r6, pc}
 800ed2a:	bf00      	nop
 800ed2c:	2000003c 	.word	0x2000003c

0800ed30 <_sbrk_r>:
 800ed30:	b538      	push	{r3, r4, r5, lr}
 800ed32:	4d06      	ldr	r5, [pc, #24]	@ (800ed4c <_sbrk_r+0x1c>)
 800ed34:	2300      	movs	r3, #0
 800ed36:	4604      	mov	r4, r0
 800ed38:	4608      	mov	r0, r1
 800ed3a:	602b      	str	r3, [r5, #0]
 800ed3c:	f7f4 fbb6 	bl	80034ac <_sbrk>
 800ed40:	1c43      	adds	r3, r0, #1
 800ed42:	d102      	bne.n	800ed4a <_sbrk_r+0x1a>
 800ed44:	682b      	ldr	r3, [r5, #0]
 800ed46:	b103      	cbz	r3, 800ed4a <_sbrk_r+0x1a>
 800ed48:	6023      	str	r3, [r4, #0]
 800ed4a:	bd38      	pop	{r3, r4, r5, pc}
 800ed4c:	20002b28 	.word	0x20002b28

0800ed50 <__errno>:
 800ed50:	4b01      	ldr	r3, [pc, #4]	@ (800ed58 <__errno+0x8>)
 800ed52:	6818      	ldr	r0, [r3, #0]
 800ed54:	4770      	bx	lr
 800ed56:	bf00      	nop
 800ed58:	2000003c 	.word	0x2000003c

0800ed5c <__libc_init_array>:
 800ed5c:	b570      	push	{r4, r5, r6, lr}
 800ed5e:	4d0d      	ldr	r5, [pc, #52]	@ (800ed94 <__libc_init_array+0x38>)
 800ed60:	4c0d      	ldr	r4, [pc, #52]	@ (800ed98 <__libc_init_array+0x3c>)
 800ed62:	1b64      	subs	r4, r4, r5
 800ed64:	10a4      	asrs	r4, r4, #2
 800ed66:	2600      	movs	r6, #0
 800ed68:	42a6      	cmp	r6, r4
 800ed6a:	d109      	bne.n	800ed80 <__libc_init_array+0x24>
 800ed6c:	4d0b      	ldr	r5, [pc, #44]	@ (800ed9c <__libc_init_array+0x40>)
 800ed6e:	4c0c      	ldr	r4, [pc, #48]	@ (800eda0 <__libc_init_array+0x44>)
 800ed70:	f000 fba8 	bl	800f4c4 <_init>
 800ed74:	1b64      	subs	r4, r4, r5
 800ed76:	10a4      	asrs	r4, r4, #2
 800ed78:	2600      	movs	r6, #0
 800ed7a:	42a6      	cmp	r6, r4
 800ed7c:	d105      	bne.n	800ed8a <__libc_init_array+0x2e>
 800ed7e:	bd70      	pop	{r4, r5, r6, pc}
 800ed80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed84:	4798      	blx	r3
 800ed86:	3601      	adds	r6, #1
 800ed88:	e7ee      	b.n	800ed68 <__libc_init_array+0xc>
 800ed8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed8e:	4798      	blx	r3
 800ed90:	3601      	adds	r6, #1
 800ed92:	e7f2      	b.n	800ed7a <__libc_init_array+0x1e>
 800ed94:	0800fc58 	.word	0x0800fc58
 800ed98:	0800fc58 	.word	0x0800fc58
 800ed9c:	0800fc58 	.word	0x0800fc58
 800eda0:	0800fc60 	.word	0x0800fc60

0800eda4 <__retarget_lock_acquire_recursive>:
 800eda4:	4770      	bx	lr

0800eda6 <__retarget_lock_release_recursive>:
 800eda6:	4770      	bx	lr

0800eda8 <memcpy>:
 800eda8:	440a      	add	r2, r1
 800edaa:	4291      	cmp	r1, r2
 800edac:	f100 33ff 	add.w	r3, r0, #4294967295
 800edb0:	d100      	bne.n	800edb4 <memcpy+0xc>
 800edb2:	4770      	bx	lr
 800edb4:	b510      	push	{r4, lr}
 800edb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800edbe:	4291      	cmp	r1, r2
 800edc0:	d1f9      	bne.n	800edb6 <memcpy+0xe>
 800edc2:	bd10      	pop	{r4, pc}

0800edc4 <_free_r>:
 800edc4:	b538      	push	{r3, r4, r5, lr}
 800edc6:	4605      	mov	r5, r0
 800edc8:	2900      	cmp	r1, #0
 800edca:	d041      	beq.n	800ee50 <_free_r+0x8c>
 800edcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edd0:	1f0c      	subs	r4, r1, #4
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	bfb8      	it	lt
 800edd6:	18e4      	addlt	r4, r4, r3
 800edd8:	f7ff ff0c 	bl	800ebf4 <__malloc_lock>
 800eddc:	4a1d      	ldr	r2, [pc, #116]	@ (800ee54 <_free_r+0x90>)
 800edde:	6813      	ldr	r3, [r2, #0]
 800ede0:	b933      	cbnz	r3, 800edf0 <_free_r+0x2c>
 800ede2:	6063      	str	r3, [r4, #4]
 800ede4:	6014      	str	r4, [r2, #0]
 800ede6:	4628      	mov	r0, r5
 800ede8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edec:	f7ff bf08 	b.w	800ec00 <__malloc_unlock>
 800edf0:	42a3      	cmp	r3, r4
 800edf2:	d908      	bls.n	800ee06 <_free_r+0x42>
 800edf4:	6820      	ldr	r0, [r4, #0]
 800edf6:	1821      	adds	r1, r4, r0
 800edf8:	428b      	cmp	r3, r1
 800edfa:	bf01      	itttt	eq
 800edfc:	6819      	ldreq	r1, [r3, #0]
 800edfe:	685b      	ldreq	r3, [r3, #4]
 800ee00:	1809      	addeq	r1, r1, r0
 800ee02:	6021      	streq	r1, [r4, #0]
 800ee04:	e7ed      	b.n	800ede2 <_free_r+0x1e>
 800ee06:	461a      	mov	r2, r3
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	b10b      	cbz	r3, 800ee10 <_free_r+0x4c>
 800ee0c:	42a3      	cmp	r3, r4
 800ee0e:	d9fa      	bls.n	800ee06 <_free_r+0x42>
 800ee10:	6811      	ldr	r1, [r2, #0]
 800ee12:	1850      	adds	r0, r2, r1
 800ee14:	42a0      	cmp	r0, r4
 800ee16:	d10b      	bne.n	800ee30 <_free_r+0x6c>
 800ee18:	6820      	ldr	r0, [r4, #0]
 800ee1a:	4401      	add	r1, r0
 800ee1c:	1850      	adds	r0, r2, r1
 800ee1e:	4283      	cmp	r3, r0
 800ee20:	6011      	str	r1, [r2, #0]
 800ee22:	d1e0      	bne.n	800ede6 <_free_r+0x22>
 800ee24:	6818      	ldr	r0, [r3, #0]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	6053      	str	r3, [r2, #4]
 800ee2a:	4408      	add	r0, r1
 800ee2c:	6010      	str	r0, [r2, #0]
 800ee2e:	e7da      	b.n	800ede6 <_free_r+0x22>
 800ee30:	d902      	bls.n	800ee38 <_free_r+0x74>
 800ee32:	230c      	movs	r3, #12
 800ee34:	602b      	str	r3, [r5, #0]
 800ee36:	e7d6      	b.n	800ede6 <_free_r+0x22>
 800ee38:	6820      	ldr	r0, [r4, #0]
 800ee3a:	1821      	adds	r1, r4, r0
 800ee3c:	428b      	cmp	r3, r1
 800ee3e:	bf04      	itt	eq
 800ee40:	6819      	ldreq	r1, [r3, #0]
 800ee42:	685b      	ldreq	r3, [r3, #4]
 800ee44:	6063      	str	r3, [r4, #4]
 800ee46:	bf04      	itt	eq
 800ee48:	1809      	addeq	r1, r1, r0
 800ee4a:	6021      	streq	r1, [r4, #0]
 800ee4c:	6054      	str	r4, [r2, #4]
 800ee4e:	e7ca      	b.n	800ede6 <_free_r+0x22>
 800ee50:	bd38      	pop	{r3, r4, r5, pc}
 800ee52:	bf00      	nop
 800ee54:	200029ec 	.word	0x200029ec

0800ee58 <__ssputs_r>:
 800ee58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee5c:	688e      	ldr	r6, [r1, #8]
 800ee5e:	461f      	mov	r7, r3
 800ee60:	42be      	cmp	r6, r7
 800ee62:	680b      	ldr	r3, [r1, #0]
 800ee64:	4682      	mov	sl, r0
 800ee66:	460c      	mov	r4, r1
 800ee68:	4690      	mov	r8, r2
 800ee6a:	d82d      	bhi.n	800eec8 <__ssputs_r+0x70>
 800ee6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ee70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ee74:	d026      	beq.n	800eec4 <__ssputs_r+0x6c>
 800ee76:	6965      	ldr	r5, [r4, #20]
 800ee78:	6909      	ldr	r1, [r1, #16]
 800ee7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee7e:	eba3 0901 	sub.w	r9, r3, r1
 800ee82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee86:	1c7b      	adds	r3, r7, #1
 800ee88:	444b      	add	r3, r9
 800ee8a:	106d      	asrs	r5, r5, #1
 800ee8c:	429d      	cmp	r5, r3
 800ee8e:	bf38      	it	cc
 800ee90:	461d      	movcc	r5, r3
 800ee92:	0553      	lsls	r3, r2, #21
 800ee94:	d527      	bpl.n	800eee6 <__ssputs_r+0x8e>
 800ee96:	4629      	mov	r1, r5
 800ee98:	f7ff fe2c 	bl	800eaf4 <_malloc_r>
 800ee9c:	4606      	mov	r6, r0
 800ee9e:	b360      	cbz	r0, 800eefa <__ssputs_r+0xa2>
 800eea0:	6921      	ldr	r1, [r4, #16]
 800eea2:	464a      	mov	r2, r9
 800eea4:	f7ff ff80 	bl	800eda8 <memcpy>
 800eea8:	89a3      	ldrh	r3, [r4, #12]
 800eeaa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800eeae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eeb2:	81a3      	strh	r3, [r4, #12]
 800eeb4:	6126      	str	r6, [r4, #16]
 800eeb6:	6165      	str	r5, [r4, #20]
 800eeb8:	444e      	add	r6, r9
 800eeba:	eba5 0509 	sub.w	r5, r5, r9
 800eebe:	6026      	str	r6, [r4, #0]
 800eec0:	60a5      	str	r5, [r4, #8]
 800eec2:	463e      	mov	r6, r7
 800eec4:	42be      	cmp	r6, r7
 800eec6:	d900      	bls.n	800eeca <__ssputs_r+0x72>
 800eec8:	463e      	mov	r6, r7
 800eeca:	6820      	ldr	r0, [r4, #0]
 800eecc:	4632      	mov	r2, r6
 800eece:	4641      	mov	r1, r8
 800eed0:	f000 faa8 	bl	800f424 <memmove>
 800eed4:	68a3      	ldr	r3, [r4, #8]
 800eed6:	1b9b      	subs	r3, r3, r6
 800eed8:	60a3      	str	r3, [r4, #8]
 800eeda:	6823      	ldr	r3, [r4, #0]
 800eedc:	4433      	add	r3, r6
 800eede:	6023      	str	r3, [r4, #0]
 800eee0:	2000      	movs	r0, #0
 800eee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eee6:	462a      	mov	r2, r5
 800eee8:	f000 fab6 	bl	800f458 <_realloc_r>
 800eeec:	4606      	mov	r6, r0
 800eeee:	2800      	cmp	r0, #0
 800eef0:	d1e0      	bne.n	800eeb4 <__ssputs_r+0x5c>
 800eef2:	6921      	ldr	r1, [r4, #16]
 800eef4:	4650      	mov	r0, sl
 800eef6:	f7ff ff65 	bl	800edc4 <_free_r>
 800eefa:	230c      	movs	r3, #12
 800eefc:	f8ca 3000 	str.w	r3, [sl]
 800ef00:	89a3      	ldrh	r3, [r4, #12]
 800ef02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef06:	81a3      	strh	r3, [r4, #12]
 800ef08:	f04f 30ff 	mov.w	r0, #4294967295
 800ef0c:	e7e9      	b.n	800eee2 <__ssputs_r+0x8a>
	...

0800ef10 <_svfiprintf_r>:
 800ef10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef14:	4698      	mov	r8, r3
 800ef16:	898b      	ldrh	r3, [r1, #12]
 800ef18:	061b      	lsls	r3, r3, #24
 800ef1a:	b09d      	sub	sp, #116	@ 0x74
 800ef1c:	4607      	mov	r7, r0
 800ef1e:	460d      	mov	r5, r1
 800ef20:	4614      	mov	r4, r2
 800ef22:	d510      	bpl.n	800ef46 <_svfiprintf_r+0x36>
 800ef24:	690b      	ldr	r3, [r1, #16]
 800ef26:	b973      	cbnz	r3, 800ef46 <_svfiprintf_r+0x36>
 800ef28:	2140      	movs	r1, #64	@ 0x40
 800ef2a:	f7ff fde3 	bl	800eaf4 <_malloc_r>
 800ef2e:	6028      	str	r0, [r5, #0]
 800ef30:	6128      	str	r0, [r5, #16]
 800ef32:	b930      	cbnz	r0, 800ef42 <_svfiprintf_r+0x32>
 800ef34:	230c      	movs	r3, #12
 800ef36:	603b      	str	r3, [r7, #0]
 800ef38:	f04f 30ff 	mov.w	r0, #4294967295
 800ef3c:	b01d      	add	sp, #116	@ 0x74
 800ef3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef42:	2340      	movs	r3, #64	@ 0x40
 800ef44:	616b      	str	r3, [r5, #20]
 800ef46:	2300      	movs	r3, #0
 800ef48:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef4a:	2320      	movs	r3, #32
 800ef4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef50:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef54:	2330      	movs	r3, #48	@ 0x30
 800ef56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f0f4 <_svfiprintf_r+0x1e4>
 800ef5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ef5e:	f04f 0901 	mov.w	r9, #1
 800ef62:	4623      	mov	r3, r4
 800ef64:	469a      	mov	sl, r3
 800ef66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef6a:	b10a      	cbz	r2, 800ef70 <_svfiprintf_r+0x60>
 800ef6c:	2a25      	cmp	r2, #37	@ 0x25
 800ef6e:	d1f9      	bne.n	800ef64 <_svfiprintf_r+0x54>
 800ef70:	ebba 0b04 	subs.w	fp, sl, r4
 800ef74:	d00b      	beq.n	800ef8e <_svfiprintf_r+0x7e>
 800ef76:	465b      	mov	r3, fp
 800ef78:	4622      	mov	r2, r4
 800ef7a:	4629      	mov	r1, r5
 800ef7c:	4638      	mov	r0, r7
 800ef7e:	f7ff ff6b 	bl	800ee58 <__ssputs_r>
 800ef82:	3001      	adds	r0, #1
 800ef84:	f000 80a7 	beq.w	800f0d6 <_svfiprintf_r+0x1c6>
 800ef88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef8a:	445a      	add	r2, fp
 800ef8c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef8e:	f89a 3000 	ldrb.w	r3, [sl]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	f000 809f 	beq.w	800f0d6 <_svfiprintf_r+0x1c6>
 800ef98:	2300      	movs	r3, #0
 800ef9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efa2:	f10a 0a01 	add.w	sl, sl, #1
 800efa6:	9304      	str	r3, [sp, #16]
 800efa8:	9307      	str	r3, [sp, #28]
 800efaa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800efae:	931a      	str	r3, [sp, #104]	@ 0x68
 800efb0:	4654      	mov	r4, sl
 800efb2:	2205      	movs	r2, #5
 800efb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efb8:	484e      	ldr	r0, [pc, #312]	@ (800f0f4 <_svfiprintf_r+0x1e4>)
 800efba:	f7f1 f919 	bl	80001f0 <memchr>
 800efbe:	9a04      	ldr	r2, [sp, #16]
 800efc0:	b9d8      	cbnz	r0, 800effa <_svfiprintf_r+0xea>
 800efc2:	06d0      	lsls	r0, r2, #27
 800efc4:	bf44      	itt	mi
 800efc6:	2320      	movmi	r3, #32
 800efc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efcc:	0711      	lsls	r1, r2, #28
 800efce:	bf44      	itt	mi
 800efd0:	232b      	movmi	r3, #43	@ 0x2b
 800efd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efd6:	f89a 3000 	ldrb.w	r3, [sl]
 800efda:	2b2a      	cmp	r3, #42	@ 0x2a
 800efdc:	d015      	beq.n	800f00a <_svfiprintf_r+0xfa>
 800efde:	9a07      	ldr	r2, [sp, #28]
 800efe0:	4654      	mov	r4, sl
 800efe2:	2000      	movs	r0, #0
 800efe4:	f04f 0c0a 	mov.w	ip, #10
 800efe8:	4621      	mov	r1, r4
 800efea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efee:	3b30      	subs	r3, #48	@ 0x30
 800eff0:	2b09      	cmp	r3, #9
 800eff2:	d94b      	bls.n	800f08c <_svfiprintf_r+0x17c>
 800eff4:	b1b0      	cbz	r0, 800f024 <_svfiprintf_r+0x114>
 800eff6:	9207      	str	r2, [sp, #28]
 800eff8:	e014      	b.n	800f024 <_svfiprintf_r+0x114>
 800effa:	eba0 0308 	sub.w	r3, r0, r8
 800effe:	fa09 f303 	lsl.w	r3, r9, r3
 800f002:	4313      	orrs	r3, r2
 800f004:	9304      	str	r3, [sp, #16]
 800f006:	46a2      	mov	sl, r4
 800f008:	e7d2      	b.n	800efb0 <_svfiprintf_r+0xa0>
 800f00a:	9b03      	ldr	r3, [sp, #12]
 800f00c:	1d19      	adds	r1, r3, #4
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	9103      	str	r1, [sp, #12]
 800f012:	2b00      	cmp	r3, #0
 800f014:	bfbb      	ittet	lt
 800f016:	425b      	neglt	r3, r3
 800f018:	f042 0202 	orrlt.w	r2, r2, #2
 800f01c:	9307      	strge	r3, [sp, #28]
 800f01e:	9307      	strlt	r3, [sp, #28]
 800f020:	bfb8      	it	lt
 800f022:	9204      	strlt	r2, [sp, #16]
 800f024:	7823      	ldrb	r3, [r4, #0]
 800f026:	2b2e      	cmp	r3, #46	@ 0x2e
 800f028:	d10a      	bne.n	800f040 <_svfiprintf_r+0x130>
 800f02a:	7863      	ldrb	r3, [r4, #1]
 800f02c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f02e:	d132      	bne.n	800f096 <_svfiprintf_r+0x186>
 800f030:	9b03      	ldr	r3, [sp, #12]
 800f032:	1d1a      	adds	r2, r3, #4
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	9203      	str	r2, [sp, #12]
 800f038:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f03c:	3402      	adds	r4, #2
 800f03e:	9305      	str	r3, [sp, #20]
 800f040:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f104 <_svfiprintf_r+0x1f4>
 800f044:	7821      	ldrb	r1, [r4, #0]
 800f046:	2203      	movs	r2, #3
 800f048:	4650      	mov	r0, sl
 800f04a:	f7f1 f8d1 	bl	80001f0 <memchr>
 800f04e:	b138      	cbz	r0, 800f060 <_svfiprintf_r+0x150>
 800f050:	9b04      	ldr	r3, [sp, #16]
 800f052:	eba0 000a 	sub.w	r0, r0, sl
 800f056:	2240      	movs	r2, #64	@ 0x40
 800f058:	4082      	lsls	r2, r0
 800f05a:	4313      	orrs	r3, r2
 800f05c:	3401      	adds	r4, #1
 800f05e:	9304      	str	r3, [sp, #16]
 800f060:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f064:	4824      	ldr	r0, [pc, #144]	@ (800f0f8 <_svfiprintf_r+0x1e8>)
 800f066:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f06a:	2206      	movs	r2, #6
 800f06c:	f7f1 f8c0 	bl	80001f0 <memchr>
 800f070:	2800      	cmp	r0, #0
 800f072:	d036      	beq.n	800f0e2 <_svfiprintf_r+0x1d2>
 800f074:	4b21      	ldr	r3, [pc, #132]	@ (800f0fc <_svfiprintf_r+0x1ec>)
 800f076:	bb1b      	cbnz	r3, 800f0c0 <_svfiprintf_r+0x1b0>
 800f078:	9b03      	ldr	r3, [sp, #12]
 800f07a:	3307      	adds	r3, #7
 800f07c:	f023 0307 	bic.w	r3, r3, #7
 800f080:	3308      	adds	r3, #8
 800f082:	9303      	str	r3, [sp, #12]
 800f084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f086:	4433      	add	r3, r6
 800f088:	9309      	str	r3, [sp, #36]	@ 0x24
 800f08a:	e76a      	b.n	800ef62 <_svfiprintf_r+0x52>
 800f08c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f090:	460c      	mov	r4, r1
 800f092:	2001      	movs	r0, #1
 800f094:	e7a8      	b.n	800efe8 <_svfiprintf_r+0xd8>
 800f096:	2300      	movs	r3, #0
 800f098:	3401      	adds	r4, #1
 800f09a:	9305      	str	r3, [sp, #20]
 800f09c:	4619      	mov	r1, r3
 800f09e:	f04f 0c0a 	mov.w	ip, #10
 800f0a2:	4620      	mov	r0, r4
 800f0a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0a8:	3a30      	subs	r2, #48	@ 0x30
 800f0aa:	2a09      	cmp	r2, #9
 800f0ac:	d903      	bls.n	800f0b6 <_svfiprintf_r+0x1a6>
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d0c6      	beq.n	800f040 <_svfiprintf_r+0x130>
 800f0b2:	9105      	str	r1, [sp, #20]
 800f0b4:	e7c4      	b.n	800f040 <_svfiprintf_r+0x130>
 800f0b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0ba:	4604      	mov	r4, r0
 800f0bc:	2301      	movs	r3, #1
 800f0be:	e7f0      	b.n	800f0a2 <_svfiprintf_r+0x192>
 800f0c0:	ab03      	add	r3, sp, #12
 800f0c2:	9300      	str	r3, [sp, #0]
 800f0c4:	462a      	mov	r2, r5
 800f0c6:	4b0e      	ldr	r3, [pc, #56]	@ (800f100 <_svfiprintf_r+0x1f0>)
 800f0c8:	a904      	add	r1, sp, #16
 800f0ca:	4638      	mov	r0, r7
 800f0cc:	f3af 8000 	nop.w
 800f0d0:	1c42      	adds	r2, r0, #1
 800f0d2:	4606      	mov	r6, r0
 800f0d4:	d1d6      	bne.n	800f084 <_svfiprintf_r+0x174>
 800f0d6:	89ab      	ldrh	r3, [r5, #12]
 800f0d8:	065b      	lsls	r3, r3, #25
 800f0da:	f53f af2d 	bmi.w	800ef38 <_svfiprintf_r+0x28>
 800f0de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f0e0:	e72c      	b.n	800ef3c <_svfiprintf_r+0x2c>
 800f0e2:	ab03      	add	r3, sp, #12
 800f0e4:	9300      	str	r3, [sp, #0]
 800f0e6:	462a      	mov	r2, r5
 800f0e8:	4b05      	ldr	r3, [pc, #20]	@ (800f100 <_svfiprintf_r+0x1f0>)
 800f0ea:	a904      	add	r1, sp, #16
 800f0ec:	4638      	mov	r0, r7
 800f0ee:	f000 f879 	bl	800f1e4 <_printf_i>
 800f0f2:	e7ed      	b.n	800f0d0 <_svfiprintf_r+0x1c0>
 800f0f4:	0800fc1c 	.word	0x0800fc1c
 800f0f8:	0800fc26 	.word	0x0800fc26
 800f0fc:	00000000 	.word	0x00000000
 800f100:	0800ee59 	.word	0x0800ee59
 800f104:	0800fc22 	.word	0x0800fc22

0800f108 <_printf_common>:
 800f108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f10c:	4616      	mov	r6, r2
 800f10e:	4698      	mov	r8, r3
 800f110:	688a      	ldr	r2, [r1, #8]
 800f112:	690b      	ldr	r3, [r1, #16]
 800f114:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f118:	4293      	cmp	r3, r2
 800f11a:	bfb8      	it	lt
 800f11c:	4613      	movlt	r3, r2
 800f11e:	6033      	str	r3, [r6, #0]
 800f120:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f124:	4607      	mov	r7, r0
 800f126:	460c      	mov	r4, r1
 800f128:	b10a      	cbz	r2, 800f12e <_printf_common+0x26>
 800f12a:	3301      	adds	r3, #1
 800f12c:	6033      	str	r3, [r6, #0]
 800f12e:	6823      	ldr	r3, [r4, #0]
 800f130:	0699      	lsls	r1, r3, #26
 800f132:	bf42      	ittt	mi
 800f134:	6833      	ldrmi	r3, [r6, #0]
 800f136:	3302      	addmi	r3, #2
 800f138:	6033      	strmi	r3, [r6, #0]
 800f13a:	6825      	ldr	r5, [r4, #0]
 800f13c:	f015 0506 	ands.w	r5, r5, #6
 800f140:	d106      	bne.n	800f150 <_printf_common+0x48>
 800f142:	f104 0a19 	add.w	sl, r4, #25
 800f146:	68e3      	ldr	r3, [r4, #12]
 800f148:	6832      	ldr	r2, [r6, #0]
 800f14a:	1a9b      	subs	r3, r3, r2
 800f14c:	42ab      	cmp	r3, r5
 800f14e:	dc26      	bgt.n	800f19e <_printf_common+0x96>
 800f150:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f154:	6822      	ldr	r2, [r4, #0]
 800f156:	3b00      	subs	r3, #0
 800f158:	bf18      	it	ne
 800f15a:	2301      	movne	r3, #1
 800f15c:	0692      	lsls	r2, r2, #26
 800f15e:	d42b      	bmi.n	800f1b8 <_printf_common+0xb0>
 800f160:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f164:	4641      	mov	r1, r8
 800f166:	4638      	mov	r0, r7
 800f168:	47c8      	blx	r9
 800f16a:	3001      	adds	r0, #1
 800f16c:	d01e      	beq.n	800f1ac <_printf_common+0xa4>
 800f16e:	6823      	ldr	r3, [r4, #0]
 800f170:	6922      	ldr	r2, [r4, #16]
 800f172:	f003 0306 	and.w	r3, r3, #6
 800f176:	2b04      	cmp	r3, #4
 800f178:	bf02      	ittt	eq
 800f17a:	68e5      	ldreq	r5, [r4, #12]
 800f17c:	6833      	ldreq	r3, [r6, #0]
 800f17e:	1aed      	subeq	r5, r5, r3
 800f180:	68a3      	ldr	r3, [r4, #8]
 800f182:	bf0c      	ite	eq
 800f184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f188:	2500      	movne	r5, #0
 800f18a:	4293      	cmp	r3, r2
 800f18c:	bfc4      	itt	gt
 800f18e:	1a9b      	subgt	r3, r3, r2
 800f190:	18ed      	addgt	r5, r5, r3
 800f192:	2600      	movs	r6, #0
 800f194:	341a      	adds	r4, #26
 800f196:	42b5      	cmp	r5, r6
 800f198:	d11a      	bne.n	800f1d0 <_printf_common+0xc8>
 800f19a:	2000      	movs	r0, #0
 800f19c:	e008      	b.n	800f1b0 <_printf_common+0xa8>
 800f19e:	2301      	movs	r3, #1
 800f1a0:	4652      	mov	r2, sl
 800f1a2:	4641      	mov	r1, r8
 800f1a4:	4638      	mov	r0, r7
 800f1a6:	47c8      	blx	r9
 800f1a8:	3001      	adds	r0, #1
 800f1aa:	d103      	bne.n	800f1b4 <_printf_common+0xac>
 800f1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1b4:	3501      	adds	r5, #1
 800f1b6:	e7c6      	b.n	800f146 <_printf_common+0x3e>
 800f1b8:	18e1      	adds	r1, r4, r3
 800f1ba:	1c5a      	adds	r2, r3, #1
 800f1bc:	2030      	movs	r0, #48	@ 0x30
 800f1be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f1c2:	4422      	add	r2, r4
 800f1c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f1c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f1cc:	3302      	adds	r3, #2
 800f1ce:	e7c7      	b.n	800f160 <_printf_common+0x58>
 800f1d0:	2301      	movs	r3, #1
 800f1d2:	4622      	mov	r2, r4
 800f1d4:	4641      	mov	r1, r8
 800f1d6:	4638      	mov	r0, r7
 800f1d8:	47c8      	blx	r9
 800f1da:	3001      	adds	r0, #1
 800f1dc:	d0e6      	beq.n	800f1ac <_printf_common+0xa4>
 800f1de:	3601      	adds	r6, #1
 800f1e0:	e7d9      	b.n	800f196 <_printf_common+0x8e>
	...

0800f1e4 <_printf_i>:
 800f1e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f1e8:	7e0f      	ldrb	r7, [r1, #24]
 800f1ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f1ec:	2f78      	cmp	r7, #120	@ 0x78
 800f1ee:	4691      	mov	r9, r2
 800f1f0:	4680      	mov	r8, r0
 800f1f2:	460c      	mov	r4, r1
 800f1f4:	469a      	mov	sl, r3
 800f1f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f1fa:	d807      	bhi.n	800f20c <_printf_i+0x28>
 800f1fc:	2f62      	cmp	r7, #98	@ 0x62
 800f1fe:	d80a      	bhi.n	800f216 <_printf_i+0x32>
 800f200:	2f00      	cmp	r7, #0
 800f202:	f000 80d2 	beq.w	800f3aa <_printf_i+0x1c6>
 800f206:	2f58      	cmp	r7, #88	@ 0x58
 800f208:	f000 80b9 	beq.w	800f37e <_printf_i+0x19a>
 800f20c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f210:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f214:	e03a      	b.n	800f28c <_printf_i+0xa8>
 800f216:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f21a:	2b15      	cmp	r3, #21
 800f21c:	d8f6      	bhi.n	800f20c <_printf_i+0x28>
 800f21e:	a101      	add	r1, pc, #4	@ (adr r1, 800f224 <_printf_i+0x40>)
 800f220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f224:	0800f27d 	.word	0x0800f27d
 800f228:	0800f291 	.word	0x0800f291
 800f22c:	0800f20d 	.word	0x0800f20d
 800f230:	0800f20d 	.word	0x0800f20d
 800f234:	0800f20d 	.word	0x0800f20d
 800f238:	0800f20d 	.word	0x0800f20d
 800f23c:	0800f291 	.word	0x0800f291
 800f240:	0800f20d 	.word	0x0800f20d
 800f244:	0800f20d 	.word	0x0800f20d
 800f248:	0800f20d 	.word	0x0800f20d
 800f24c:	0800f20d 	.word	0x0800f20d
 800f250:	0800f391 	.word	0x0800f391
 800f254:	0800f2bb 	.word	0x0800f2bb
 800f258:	0800f34b 	.word	0x0800f34b
 800f25c:	0800f20d 	.word	0x0800f20d
 800f260:	0800f20d 	.word	0x0800f20d
 800f264:	0800f3b3 	.word	0x0800f3b3
 800f268:	0800f20d 	.word	0x0800f20d
 800f26c:	0800f2bb 	.word	0x0800f2bb
 800f270:	0800f20d 	.word	0x0800f20d
 800f274:	0800f20d 	.word	0x0800f20d
 800f278:	0800f353 	.word	0x0800f353
 800f27c:	6833      	ldr	r3, [r6, #0]
 800f27e:	1d1a      	adds	r2, r3, #4
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	6032      	str	r2, [r6, #0]
 800f284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f288:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f28c:	2301      	movs	r3, #1
 800f28e:	e09d      	b.n	800f3cc <_printf_i+0x1e8>
 800f290:	6833      	ldr	r3, [r6, #0]
 800f292:	6820      	ldr	r0, [r4, #0]
 800f294:	1d19      	adds	r1, r3, #4
 800f296:	6031      	str	r1, [r6, #0]
 800f298:	0606      	lsls	r6, r0, #24
 800f29a:	d501      	bpl.n	800f2a0 <_printf_i+0xbc>
 800f29c:	681d      	ldr	r5, [r3, #0]
 800f29e:	e003      	b.n	800f2a8 <_printf_i+0xc4>
 800f2a0:	0645      	lsls	r5, r0, #25
 800f2a2:	d5fb      	bpl.n	800f29c <_printf_i+0xb8>
 800f2a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f2a8:	2d00      	cmp	r5, #0
 800f2aa:	da03      	bge.n	800f2b4 <_printf_i+0xd0>
 800f2ac:	232d      	movs	r3, #45	@ 0x2d
 800f2ae:	426d      	negs	r5, r5
 800f2b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2b4:	4859      	ldr	r0, [pc, #356]	@ (800f41c <_printf_i+0x238>)
 800f2b6:	230a      	movs	r3, #10
 800f2b8:	e011      	b.n	800f2de <_printf_i+0xfa>
 800f2ba:	6821      	ldr	r1, [r4, #0]
 800f2bc:	6833      	ldr	r3, [r6, #0]
 800f2be:	0608      	lsls	r0, r1, #24
 800f2c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800f2c4:	d402      	bmi.n	800f2cc <_printf_i+0xe8>
 800f2c6:	0649      	lsls	r1, r1, #25
 800f2c8:	bf48      	it	mi
 800f2ca:	b2ad      	uxthmi	r5, r5
 800f2cc:	2f6f      	cmp	r7, #111	@ 0x6f
 800f2ce:	4853      	ldr	r0, [pc, #332]	@ (800f41c <_printf_i+0x238>)
 800f2d0:	6033      	str	r3, [r6, #0]
 800f2d2:	bf14      	ite	ne
 800f2d4:	230a      	movne	r3, #10
 800f2d6:	2308      	moveq	r3, #8
 800f2d8:	2100      	movs	r1, #0
 800f2da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f2de:	6866      	ldr	r6, [r4, #4]
 800f2e0:	60a6      	str	r6, [r4, #8]
 800f2e2:	2e00      	cmp	r6, #0
 800f2e4:	bfa2      	ittt	ge
 800f2e6:	6821      	ldrge	r1, [r4, #0]
 800f2e8:	f021 0104 	bicge.w	r1, r1, #4
 800f2ec:	6021      	strge	r1, [r4, #0]
 800f2ee:	b90d      	cbnz	r5, 800f2f4 <_printf_i+0x110>
 800f2f0:	2e00      	cmp	r6, #0
 800f2f2:	d04b      	beq.n	800f38c <_printf_i+0x1a8>
 800f2f4:	4616      	mov	r6, r2
 800f2f6:	fbb5 f1f3 	udiv	r1, r5, r3
 800f2fa:	fb03 5711 	mls	r7, r3, r1, r5
 800f2fe:	5dc7      	ldrb	r7, [r0, r7]
 800f300:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f304:	462f      	mov	r7, r5
 800f306:	42bb      	cmp	r3, r7
 800f308:	460d      	mov	r5, r1
 800f30a:	d9f4      	bls.n	800f2f6 <_printf_i+0x112>
 800f30c:	2b08      	cmp	r3, #8
 800f30e:	d10b      	bne.n	800f328 <_printf_i+0x144>
 800f310:	6823      	ldr	r3, [r4, #0]
 800f312:	07df      	lsls	r7, r3, #31
 800f314:	d508      	bpl.n	800f328 <_printf_i+0x144>
 800f316:	6923      	ldr	r3, [r4, #16]
 800f318:	6861      	ldr	r1, [r4, #4]
 800f31a:	4299      	cmp	r1, r3
 800f31c:	bfde      	ittt	le
 800f31e:	2330      	movle	r3, #48	@ 0x30
 800f320:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f324:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f328:	1b92      	subs	r2, r2, r6
 800f32a:	6122      	str	r2, [r4, #16]
 800f32c:	f8cd a000 	str.w	sl, [sp]
 800f330:	464b      	mov	r3, r9
 800f332:	aa03      	add	r2, sp, #12
 800f334:	4621      	mov	r1, r4
 800f336:	4640      	mov	r0, r8
 800f338:	f7ff fee6 	bl	800f108 <_printf_common>
 800f33c:	3001      	adds	r0, #1
 800f33e:	d14a      	bne.n	800f3d6 <_printf_i+0x1f2>
 800f340:	f04f 30ff 	mov.w	r0, #4294967295
 800f344:	b004      	add	sp, #16
 800f346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f34a:	6823      	ldr	r3, [r4, #0]
 800f34c:	f043 0320 	orr.w	r3, r3, #32
 800f350:	6023      	str	r3, [r4, #0]
 800f352:	4833      	ldr	r0, [pc, #204]	@ (800f420 <_printf_i+0x23c>)
 800f354:	2778      	movs	r7, #120	@ 0x78
 800f356:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f35a:	6823      	ldr	r3, [r4, #0]
 800f35c:	6831      	ldr	r1, [r6, #0]
 800f35e:	061f      	lsls	r7, r3, #24
 800f360:	f851 5b04 	ldr.w	r5, [r1], #4
 800f364:	d402      	bmi.n	800f36c <_printf_i+0x188>
 800f366:	065f      	lsls	r7, r3, #25
 800f368:	bf48      	it	mi
 800f36a:	b2ad      	uxthmi	r5, r5
 800f36c:	6031      	str	r1, [r6, #0]
 800f36e:	07d9      	lsls	r1, r3, #31
 800f370:	bf44      	itt	mi
 800f372:	f043 0320 	orrmi.w	r3, r3, #32
 800f376:	6023      	strmi	r3, [r4, #0]
 800f378:	b11d      	cbz	r5, 800f382 <_printf_i+0x19e>
 800f37a:	2310      	movs	r3, #16
 800f37c:	e7ac      	b.n	800f2d8 <_printf_i+0xf4>
 800f37e:	4827      	ldr	r0, [pc, #156]	@ (800f41c <_printf_i+0x238>)
 800f380:	e7e9      	b.n	800f356 <_printf_i+0x172>
 800f382:	6823      	ldr	r3, [r4, #0]
 800f384:	f023 0320 	bic.w	r3, r3, #32
 800f388:	6023      	str	r3, [r4, #0]
 800f38a:	e7f6      	b.n	800f37a <_printf_i+0x196>
 800f38c:	4616      	mov	r6, r2
 800f38e:	e7bd      	b.n	800f30c <_printf_i+0x128>
 800f390:	6833      	ldr	r3, [r6, #0]
 800f392:	6825      	ldr	r5, [r4, #0]
 800f394:	6961      	ldr	r1, [r4, #20]
 800f396:	1d18      	adds	r0, r3, #4
 800f398:	6030      	str	r0, [r6, #0]
 800f39a:	062e      	lsls	r6, r5, #24
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	d501      	bpl.n	800f3a4 <_printf_i+0x1c0>
 800f3a0:	6019      	str	r1, [r3, #0]
 800f3a2:	e002      	b.n	800f3aa <_printf_i+0x1c6>
 800f3a4:	0668      	lsls	r0, r5, #25
 800f3a6:	d5fb      	bpl.n	800f3a0 <_printf_i+0x1bc>
 800f3a8:	8019      	strh	r1, [r3, #0]
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	6123      	str	r3, [r4, #16]
 800f3ae:	4616      	mov	r6, r2
 800f3b0:	e7bc      	b.n	800f32c <_printf_i+0x148>
 800f3b2:	6833      	ldr	r3, [r6, #0]
 800f3b4:	1d1a      	adds	r2, r3, #4
 800f3b6:	6032      	str	r2, [r6, #0]
 800f3b8:	681e      	ldr	r6, [r3, #0]
 800f3ba:	6862      	ldr	r2, [r4, #4]
 800f3bc:	2100      	movs	r1, #0
 800f3be:	4630      	mov	r0, r6
 800f3c0:	f7f0 ff16 	bl	80001f0 <memchr>
 800f3c4:	b108      	cbz	r0, 800f3ca <_printf_i+0x1e6>
 800f3c6:	1b80      	subs	r0, r0, r6
 800f3c8:	6060      	str	r0, [r4, #4]
 800f3ca:	6863      	ldr	r3, [r4, #4]
 800f3cc:	6123      	str	r3, [r4, #16]
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f3d4:	e7aa      	b.n	800f32c <_printf_i+0x148>
 800f3d6:	6923      	ldr	r3, [r4, #16]
 800f3d8:	4632      	mov	r2, r6
 800f3da:	4649      	mov	r1, r9
 800f3dc:	4640      	mov	r0, r8
 800f3de:	47d0      	blx	sl
 800f3e0:	3001      	adds	r0, #1
 800f3e2:	d0ad      	beq.n	800f340 <_printf_i+0x15c>
 800f3e4:	6823      	ldr	r3, [r4, #0]
 800f3e6:	079b      	lsls	r3, r3, #30
 800f3e8:	d413      	bmi.n	800f412 <_printf_i+0x22e>
 800f3ea:	68e0      	ldr	r0, [r4, #12]
 800f3ec:	9b03      	ldr	r3, [sp, #12]
 800f3ee:	4298      	cmp	r0, r3
 800f3f0:	bfb8      	it	lt
 800f3f2:	4618      	movlt	r0, r3
 800f3f4:	e7a6      	b.n	800f344 <_printf_i+0x160>
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	4632      	mov	r2, r6
 800f3fa:	4649      	mov	r1, r9
 800f3fc:	4640      	mov	r0, r8
 800f3fe:	47d0      	blx	sl
 800f400:	3001      	adds	r0, #1
 800f402:	d09d      	beq.n	800f340 <_printf_i+0x15c>
 800f404:	3501      	adds	r5, #1
 800f406:	68e3      	ldr	r3, [r4, #12]
 800f408:	9903      	ldr	r1, [sp, #12]
 800f40a:	1a5b      	subs	r3, r3, r1
 800f40c:	42ab      	cmp	r3, r5
 800f40e:	dcf2      	bgt.n	800f3f6 <_printf_i+0x212>
 800f410:	e7eb      	b.n	800f3ea <_printf_i+0x206>
 800f412:	2500      	movs	r5, #0
 800f414:	f104 0619 	add.w	r6, r4, #25
 800f418:	e7f5      	b.n	800f406 <_printf_i+0x222>
 800f41a:	bf00      	nop
 800f41c:	0800fc2d 	.word	0x0800fc2d
 800f420:	0800fc3e 	.word	0x0800fc3e

0800f424 <memmove>:
 800f424:	4288      	cmp	r0, r1
 800f426:	b510      	push	{r4, lr}
 800f428:	eb01 0402 	add.w	r4, r1, r2
 800f42c:	d902      	bls.n	800f434 <memmove+0x10>
 800f42e:	4284      	cmp	r4, r0
 800f430:	4623      	mov	r3, r4
 800f432:	d807      	bhi.n	800f444 <memmove+0x20>
 800f434:	1e43      	subs	r3, r0, #1
 800f436:	42a1      	cmp	r1, r4
 800f438:	d008      	beq.n	800f44c <memmove+0x28>
 800f43a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f43e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f442:	e7f8      	b.n	800f436 <memmove+0x12>
 800f444:	4402      	add	r2, r0
 800f446:	4601      	mov	r1, r0
 800f448:	428a      	cmp	r2, r1
 800f44a:	d100      	bne.n	800f44e <memmove+0x2a>
 800f44c:	bd10      	pop	{r4, pc}
 800f44e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f456:	e7f7      	b.n	800f448 <memmove+0x24>

0800f458 <_realloc_r>:
 800f458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f45c:	4680      	mov	r8, r0
 800f45e:	4615      	mov	r5, r2
 800f460:	460c      	mov	r4, r1
 800f462:	b921      	cbnz	r1, 800f46e <_realloc_r+0x16>
 800f464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f468:	4611      	mov	r1, r2
 800f46a:	f7ff bb43 	b.w	800eaf4 <_malloc_r>
 800f46e:	b92a      	cbnz	r2, 800f47c <_realloc_r+0x24>
 800f470:	f7ff fca8 	bl	800edc4 <_free_r>
 800f474:	2400      	movs	r4, #0
 800f476:	4620      	mov	r0, r4
 800f478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f47c:	f000 f81a 	bl	800f4b4 <_malloc_usable_size_r>
 800f480:	4285      	cmp	r5, r0
 800f482:	4606      	mov	r6, r0
 800f484:	d802      	bhi.n	800f48c <_realloc_r+0x34>
 800f486:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f48a:	d8f4      	bhi.n	800f476 <_realloc_r+0x1e>
 800f48c:	4629      	mov	r1, r5
 800f48e:	4640      	mov	r0, r8
 800f490:	f7ff fb30 	bl	800eaf4 <_malloc_r>
 800f494:	4607      	mov	r7, r0
 800f496:	2800      	cmp	r0, #0
 800f498:	d0ec      	beq.n	800f474 <_realloc_r+0x1c>
 800f49a:	42b5      	cmp	r5, r6
 800f49c:	462a      	mov	r2, r5
 800f49e:	4621      	mov	r1, r4
 800f4a0:	bf28      	it	cs
 800f4a2:	4632      	movcs	r2, r6
 800f4a4:	f7ff fc80 	bl	800eda8 <memcpy>
 800f4a8:	4621      	mov	r1, r4
 800f4aa:	4640      	mov	r0, r8
 800f4ac:	f7ff fc8a 	bl	800edc4 <_free_r>
 800f4b0:	463c      	mov	r4, r7
 800f4b2:	e7e0      	b.n	800f476 <_realloc_r+0x1e>

0800f4b4 <_malloc_usable_size_r>:
 800f4b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4b8:	1f18      	subs	r0, r3, #4
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	bfbc      	itt	lt
 800f4be:	580b      	ldrlt	r3, [r1, r0]
 800f4c0:	18c0      	addlt	r0, r0, r3
 800f4c2:	4770      	bx	lr

0800f4c4 <_init>:
 800f4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4c6:	bf00      	nop
 800f4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4ca:	bc08      	pop	{r3}
 800f4cc:	469e      	mov	lr, r3
 800f4ce:	4770      	bx	lr

0800f4d0 <_fini>:
 800f4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4d2:	bf00      	nop
 800f4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4d6:	bc08      	pop	{r3}
 800f4d8:	469e      	mov	lr, r3
 800f4da:	4770      	bx	lr
