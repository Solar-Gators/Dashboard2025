
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cb0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08009e60  08009e60  0000ae60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f60  08009f60  0000b060  2**0
                  CONTENTS
  4 .ARM          00000008  08009f60  08009f60  0000af60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f68  08009f68  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f68  08009f68  0000af68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f6c  08009f6c  0000af6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009f70  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d1c  20000060  08009fd0  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d7c  08009fd0  0000bd7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000264bc  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000497f  00000000  00000000  0003154c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002078  00000000  00000000  00035ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000196b  00000000  00000000  00037f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd6f  00000000  00000000  000398b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023cb3  00000000  00000000  00067622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012432c  00000000  00000000  0008b2d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001af601  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f00  00000000  00000000  001af644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  001b8544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009e48 	.word	0x08009e48

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08009e48 	.word	0x08009e48

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <TCAL9538RSVR_INIT>:
*/



uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	4611      	mov	r1, r2
 80004ec:	461a      	mov	r2, r3
 80004ee:	460b      	mov	r3, r1
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	4613      	mov	r3, r2
 80004f4:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;
	dev->input = direction_bitMask;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	79ba      	ldrb	r2, [r7, #6]
 80004fe:	719a      	strb	r2, [r3, #6]


    dev->i2cHandle = i2cHandle;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	601a      	str	r2, [r3, #0]
    dev->portValues = 0;
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	2200      	movs	r2, #0
 800050a:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	f003 0303 	and.w	r3, r3, #3
 8000512:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress<<1);
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	b25b      	sxtb	r3, r3
 800051a:	f063 031f 	orn	r3, r3, #31
 800051e:	b25b      	sxtb	r3, r3
 8000520:	b2da      	uxtb	r2, r3
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	711a      	strb	r2, [r3, #4]
    uint8_t hold_bitMask = direction_bitMask;
 8000526:	79bb      	ldrb	r3, [r7, #6]
 8000528:	757b      	strb	r3, [r7, #21]

    status = TCAL9538RSVR_SetDirection(dev, &hold_bitMask);
 800052a:	f107 0315 	add.w	r3, r7, #21
 800052e:	4619      	mov	r1, r3
 8000530:	68f8      	ldr	r0, [r7, #12]
 8000532:	f000 f838 	bl	80005a6 <TCAL9538RSVR_SetDirection>
 8000536:	4603      	mov	r3, r0
 8000538:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 800053a:	7dbb      	ldrb	r3, [r7, #22]
 800053c:	2b00      	cmp	r3, #0
 800053e:	bf14      	ite	ne
 8000540:	2301      	movne	r3, #1
 8000542:	2300      	moveq	r3, #0
 8000544:	b2db      	uxtb	r3, r3
 8000546:	461a      	mov	r2, r3
 8000548:	7dfb      	ldrb	r3, [r7, #23]
 800054a:	4413      	add	r3, r2
 800054c:	75fb      	strb	r3, [r7, #23]

//    TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, &hold_bitMask);

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 800054e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000552:	4619      	mov	r1, r3
 8000554:	68f8      	ldr	r0, [r7, #12]
 8000556:	f000 f835 	bl	80005c4 <TCAL9538RSVR_SetInterrupts>
 800055a:	4603      	mov	r3, r0
 800055c:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 800055e:	7dbb      	ldrb	r3, [r7, #22]
 8000560:	2b00      	cmp	r3, #0
 8000562:	bf14      	ite	ne
 8000564:	2301      	movne	r3, #1
 8000566:	2300      	moveq	r3, #0
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	7dfb      	ldrb	r3, [r7, #23]
 800056e:	4413      	add	r3, r2
 8000570:	75fb      	strb	r3, [r7, #23]

    uint8_t full = 0xFF;
 8000572:	23ff      	movs	r3, #255	@ 0xff
 8000574:	753b      	strb	r3, [r7, #20]
//    {
//    	status = TCAL9538RSVR_WriteRegister(dev, 0x42, &full);
//    	errNum += (status != HAL_OK);
//    }

    status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_INVERSION, &full);
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	461a      	mov	r2, r3
 800057c:	2102      	movs	r1, #2
 800057e:	68f8      	ldr	r0, [r7, #12]
 8000580:	f000 f885 	bl	800068e <TCAL9538RSVR_WriteRegister>
 8000584:	4603      	mov	r3, r0
 8000586:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8000588:	7dbb      	ldrb	r3, [r7, #22]
 800058a:	2b00      	cmp	r3, #0
 800058c:	bf14      	ite	ne
 800058e:	2301      	movne	r3, #1
 8000590:	2300      	moveq	r3, #0
 8000592:	b2db      	uxtb	r3, r3
 8000594:	461a      	mov	r2, r3
 8000596:	7dfb      	ldrb	r3, [r7, #23]
 8000598:	4413      	add	r3, r2
 800059a:	75fb      	strb	r3, [r7, #23]

    return (errNum);
 800059c:	7dfb      	ldrb	r3, [r7, #23]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3718      	adds	r7, #24
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t* bitMask)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
 80005ae:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, bitMask);
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	2103      	movs	r1, #3
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f000 f86a 	bl	800068e <TCAL9538RSVR_WriteRegister>
 80005ba:	4603      	mov	r3, r0
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 80005d0:	1cfb      	adds	r3, r7, #3
 80005d2:	461a      	mov	r2, r3
 80005d4:	2145      	movs	r1, #69	@ 0x45
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 f859 	bl	800068e <TCAL9538RSVR_WriteRegister>
 80005dc:	4603      	mov	r3, r0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b084      	sub	sp, #16
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    uint8_t triggeredInterrupts = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	737b      	strb	r3, [r7, #13]


    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 80005f6:	f107 030d 	add.w	r3, r7, #13
 80005fa:	461a      	mov	r2, r3
 80005fc:	2146      	movs	r1, #70	@ 0x46
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 f828 	bl	8000654 <TCAL9538RSVR_ReadRegister>
 8000604:	4603      	mov	r3, r0
 8000606:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	2b00      	cmp	r3, #0
 800060c:	bf14      	ite	ne
 800060e:	2301      	movne	r3, #1
 8000610:	2300      	moveq	r3, #0
 8000612:	b2db      	uxtb	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	4413      	add	r3, r2
 800061a:	73fb      	strb	r3, [r7, #15]

    // Read updated input values
    status = TCAL9538RSVR_ReadInput(dev, &dev->portValues);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3305      	adds	r3, #5
 8000620:	4619      	mov	r1, r3
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f000 f807 	bl	8000636 <TCAL9538RSVR_ReadInput>
 8000628:	4603      	mov	r3, r0
 800062a:	73bb      	strb	r3, [r7, #14]
    {
    	status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
    	errNum += (status != HAL_OK);
    }*/

    return (errNum);
 800062c:	7bfb      	ldrb	r3, [r7, #15]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <TCAL9538RSVR_ReadInput>:




HAL_StatusTypeDef TCAL9538RSVR_ReadInput(TCAL9538RSVR* dev, uint8_t *data)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
 800063e:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, data);
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	2100      	movs	r1, #0
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f000 f805 	bl	8000654 <TCAL9538RSVR_ReadRegister>
 800064a:	4603      	mov	r3, r0
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <TCAL9538RSVR_ReadRegister>:
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
}

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af04      	add	r7, sp, #16
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	460b      	mov	r3, r1
 800065e:	607a      	str	r2, [r7, #4]
 8000660:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	6818      	ldr	r0, [r3, #0]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	791b      	ldrb	r3, [r3, #4]
 800066a:	4619      	mov	r1, r3
 800066c:	7afb      	ldrb	r3, [r7, #11]
 800066e:	b29a      	uxth	r2, r3
 8000670:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000674:	9302      	str	r3, [sp, #8]
 8000676:	2301      	movs	r3, #1
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2301      	movs	r3, #1
 8000680:	f002 fd4e 	bl	8003120 <HAL_I2C_Mem_Read>
 8000684:	4603      	mov	r3, r0
}
 8000686:	4618      	mov	r0, r3
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b088      	sub	sp, #32
 8000692:	af04      	add	r7, sp, #16
 8000694:	60f8      	str	r0, [r7, #12]
 8000696:	460b      	mov	r3, r1
 8000698:	607a      	str	r2, [r7, #4]
 800069a:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Write(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	6818      	ldr	r0, [r3, #0]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	4619      	mov	r1, r3
 80006a6:	7afb      	ldrb	r3, [r7, #11]
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006ae:	9302      	str	r3, [sp, #8]
 80006b0:	2301      	movs	r3, #1
 80006b2:	9301      	str	r3, [sp, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2301      	movs	r3, #1
 80006ba:	f002 fc1d 	bl	8002ef8 <HAL_I2C_Mem_Write>
 80006be:	4603      	mov	r3, r0
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <Update_CAN_Message1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Update_CAN_Message1(uint8_t flags[8], uint8_t* Input1, uint8_t* Input2)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b087      	sub	sp, #28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]

	static uint8_t prev_input1 = 0;
	static uint8_t prev_input2 = 0;


	flags[3] = 0;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3303      	adds	r3, #3
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
	flags[4] = 0;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	3304      	adds	r3, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]

	uint8_t risingEdges_flag1 = (~prev_input1) & *Input1;
 80006e4:	4b77      	ldr	r3, [pc, #476]	@ (80008c4 <Update_CAN_Message1+0x1fc>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	43db      	mvns	r3, r3
 80006ec:	b25a      	sxtb	r2, r3
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	4013      	ands	r3, r2
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	75fb      	strb	r3, [r7, #23]
	uint8_t risingEdges_flag2 = (~prev_input2) & *Input2;
 80006fa:	4b73      	ldr	r3, [pc, #460]	@ (80008c8 <Update_CAN_Message1+0x200>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b25b      	sxtb	r3, r3
 8000700:	43db      	mvns	r3, r3
 8000702:	b25a      	sxtb	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b25b      	sxtb	r3, r3
 800070a:	4013      	ands	r3, r2
 800070c:	b25b      	sxtb	r3, r3
 800070e:	75bb      	strb	r3, [r7, #22]


	flags[1] ^= CHECK_BIT(risingEdges_flag2, 4) << 0; // Main
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	3301      	adds	r3, #1
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b25a      	sxtb	r2, r3
 8000718:	7dbb      	ldrb	r3, [r7, #22]
 800071a:	f003 0310 	and.w	r3, r3, #16
 800071e:	2b00      	cmp	r3, #0
 8000720:	bf14      	ite	ne
 8000722:	2301      	movne	r3, #1
 8000724:	2300      	moveq	r3, #0
 8000726:	b2db      	uxtb	r3, r3
 8000728:	b25b      	sxtb	r3, r3
 800072a:	4053      	eors	r3, r2
 800072c:	b25a      	sxtb	r2, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	3301      	adds	r3, #1
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 5) << 1; // Break
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3301      	adds	r3, #1
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	b25a      	sxtb	r2, r3
 800073e:	7dbb      	ldrb	r3, [r7, #22]
 8000740:	111b      	asrs	r3, r3, #4
 8000742:	b25b      	sxtb	r3, r3
 8000744:	f003 0302 	and.w	r3, r3, #2
 8000748:	b25b      	sxtb	r3, r3
 800074a:	4053      	eors	r3, r2
 800074c:	b25a      	sxtb	r2, r3
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	3301      	adds	r3, #1
 8000752:	b2d2      	uxtb	r2, r2
 8000754:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 0) << 2; // Mode
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	3301      	adds	r3, #1
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b25a      	sxtb	r2, r3
 800075e:	7dbb      	ldrb	r3, [r7, #22]
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	b25b      	sxtb	r3, r3
 8000764:	f003 0304 	and.w	r3, r3, #4
 8000768:	b25b      	sxtb	r3, r3
 800076a:	4053      	eors	r3, r2
 800076c:	b25a      	sxtb	r2, r3
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3301      	adds	r3, #1
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 5) << 3; // MC
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	3301      	adds	r3, #1
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	b25a      	sxtb	r2, r3
 800077e:	7dfb      	ldrb	r3, [r7, #23]
 8000780:	109b      	asrs	r3, r3, #2
 8000782:	b25b      	sxtb	r3, r3
 8000784:	f003 0308 	and.w	r3, r3, #8
 8000788:	b25b      	sxtb	r3, r3
 800078a:	4053      	eors	r3, r2
 800078c:	b25a      	sxtb	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3301      	adds	r3, #1
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 6) << 4; // Array
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	3301      	adds	r3, #1
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b25a      	sxtb	r2, r3
 800079e:	7dfb      	ldrb	r3, [r7, #23]
 80007a0:	109b      	asrs	r3, r3, #2
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	f003 0310 	and.w	r3, r3, #16
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	4053      	eors	r3, r2
 80007ac:	b25a      	sxtb	r2, r3
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3301      	adds	r3, #1
 80007b2:	b2d2      	uxtb	r2, r2
 80007b4:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 4) << 5; // Extra 1
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	3301      	adds	r3, #1
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b25a      	sxtb	r2, r3
 80007be:	7dfb      	ldrb	r3, [r7, #23]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	b25b      	sxtb	r3, r3
 80007c4:	f003 0320 	and.w	r3, r3, #32
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	4053      	eors	r3, r2
 80007cc:	b25a      	sxtb	r2, r3
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	3301      	adds	r3, #1
 80007d2:	b2d2      	uxtb	r2, r2
 80007d4:	701a      	strb	r2, [r3, #0]
	flags[1] |= CHECK_BIT(outputPortState, 5) << 6; // Horn
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	3301      	adds	r3, #1
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b25a      	sxtb	r2, r3
 80007de:	4b3b      	ldr	r3, [pc, #236]	@ (80008cc <Update_CAN_Message1+0x204>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b25a      	sxtb	r2, r3
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3301      	adds	r3, #1
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	701a      	strb	r2, [r3, #0]
	flags[1] |= CHECK_BIT(outputPortState, 6) << 7; // PTT
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3301      	adds	r3, #1
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b25a      	sxtb	r2, r3
 8000800:	4b32      	ldr	r3, [pc, #200]	@ (80008cc <Update_CAN_Message1+0x204>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	b25b      	sxtb	r3, r3
 8000808:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800080c:	b25b      	sxtb	r3, r3
 800080e:	4313      	orrs	r3, r2
 8000810:	b25a      	sxtb	r2, r3
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	3301      	adds	r3, #1
 8000816:	b2d2      	uxtb	r2, r2
 8000818:	701a      	strb	r2, [r3, #0]


	flags[2] |= CHECK_BIT(outputPortState, 2) << 0; // Blinkers
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	3302      	adds	r3, #2
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	b25a      	sxtb	r2, r3
 8000822:	4b2a      	ldr	r3, [pc, #168]	@ (80008cc <Update_CAN_Message1+0x204>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	2b00      	cmp	r3, #0
 800082c:	bf14      	ite	ne
 800082e:	2301      	movne	r3, #1
 8000830:	2300      	moveq	r3, #0
 8000832:	b2db      	uxtb	r3, r3
 8000834:	b25b      	sxtb	r3, r3
 8000836:	4313      	orrs	r3, r2
 8000838:	b25a      	sxtb	r2, r3
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	3302      	adds	r3, #2
 800083e:	b2d2      	uxtb	r2, r2
 8000840:	701a      	strb	r2, [r3, #0]
	flags[2] |= CHECK_BIT(outputPortState, 0) << 1; // Left Turn Signal
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	3302      	adds	r3, #2
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b25a      	sxtb	r2, r3
 800084a:	4b20      	ldr	r3, [pc, #128]	@ (80008cc <Update_CAN_Message1+0x204>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	b25b      	sxtb	r3, r3
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	b25b      	sxtb	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b25a      	sxtb	r2, r3
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	3302      	adds	r3, #2
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	701a      	strb	r2, [r3, #0]
	flags[2] |= CHECK_BIT(outputPortState, 1) << 2; // Right Turn Signal
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	3302      	adds	r3, #2
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	b25a      	sxtb	r2, r3
 800086c:	4b17      	ldr	r3, [pc, #92]	@ (80008cc <Update_CAN_Message1+0x204>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	b25b      	sxtb	r3, r3
 8000874:	f003 0304 	and.w	r3, r3, #4
 8000878:	b25b      	sxtb	r3, r3
 800087a:	4313      	orrs	r3, r2
 800087c:	b25a      	sxtb	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	3302      	adds	r3, #2
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	701a      	strb	r2, [r3, #0]
	flags[2] ^= CHECK_BIT(risingEdges_flag1, 7) << 3; //?
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	3302      	adds	r3, #2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b25a      	sxtb	r2, r3
 800088e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000892:	111b      	asrs	r3, r3, #4
 8000894:	b25b      	sxtb	r3, r3
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	b25b      	sxtb	r3, r3
 800089c:	4053      	eors	r3, r2
 800089e:	b25a      	sxtb	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	3302      	adds	r3, #2
 80008a4:	b2d2      	uxtb	r2, r2
 80008a6:	701a      	strb	r2, [r3, #0]

	// Detect rising edges for each flag



	prev_input1 = *Input1;
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	781a      	ldrb	r2, [r3, #0]
 80008ac:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <Update_CAN_Message1+0x1fc>)
 80008ae:	701a      	strb	r2, [r3, #0]
	prev_input2 = *Input2;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	4b04      	ldr	r3, [pc, #16]	@ (80008c8 <Update_CAN_Message1+0x200>)
 80008b6:	701a      	strb	r2, [r3, #0]

}
 80008b8:	bf00      	nop
 80008ba:	371c      	adds	r7, #28
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	20000243 	.word	0x20000243
 80008c8:	20000244 	.word	0x20000244
 80008cc:	20000240 	.word	0x20000240

080008d0 <HAL_GPIO_EXTI_Callback>:
	// -> if off,
}

// GPIO Expander Interrupt Handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	80fb      	strh	r3, [r7, #6]
	GPIO_Interrupt_Triggered = 1;
 80008da:	4b04      	ldr	r3, [pc, #16]	@ (80008ec <HAL_GPIO_EXTI_Callback+0x1c>)
 80008dc:	2201      	movs	r2, #1
 80008de:	701a      	strb	r2, [r3, #0]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	20000234 	.word	0x20000234

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f6:	f000 fdd6 	bl	80014a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fa:	f000 f86f 	bl	80009dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fe:	f000 fa01 	bl	8000d04 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000902:	f000 f8b1 	bl	8000a68 <MX_ADC1_Init>
  MX_I2C4_Init();
 8000906:	f000 f98d 	bl	8000c24 <MX_I2C4_Init>
  MX_CAN1_Init();
 800090a:	f000 f923 	bl	8000b54 <MX_CAN1_Init>
  MX_CAN2_Init();
 800090e:	f000 f955 	bl	8000bbc <MX_CAN2_Init>
  MX_UART4_Init();
 8000912:	f000 f9c7 	bl	8000ca4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  if (TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0xFF, 0x00) != HAL_OK) { Error_Handler(); } // inputs
 8000916:	2300      	movs	r3, #0
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	23ff      	movs	r3, #255	@ 0xff
 800091c:	2202      	movs	r2, #2
 800091e:	4921      	ldr	r1, [pc, #132]	@ (80009a4 <main+0xb4>)
 8000920:	4821      	ldr	r0, [pc, #132]	@ (80009a8 <main+0xb8>)
 8000922:	f7ff fddd 	bl	80004e0 <TCAL9538RSVR_INIT>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <main+0x40>
 800092c:	f000 fade 	bl	8000eec <Error_Handler>
  uint8_t reg_read_hold;
  TCAL9538RSVR_ReadRegister(&U5, 0x45, &reg_read_hold);
 8000930:	1dfb      	adds	r3, r7, #7
 8000932:	461a      	mov	r2, r3
 8000934:	2145      	movs	r1, #69	@ 0x45
 8000936:	481c      	ldr	r0, [pc, #112]	@ (80009a8 <main+0xb8>)
 8000938:	f7ff fe8c 	bl	8000654 <TCAL9538RSVR_ReadRegister>
  //if (TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b00111111, 0b11000000) != HAL_OK) { Error_Handler(); }
  if (TCAL9538RSVR_INIT(&U7, &hi2c4, 0x00, 0b00000000, 0b00000000) != HAL_OK) { Error_Handler(); } // output
 800093c:	2300      	movs	r3, #0
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	2300      	movs	r3, #0
 8000942:	2200      	movs	r2, #0
 8000944:	4917      	ldr	r1, [pc, #92]	@ (80009a4 <main+0xb4>)
 8000946:	4819      	ldr	r0, [pc, #100]	@ (80009ac <main+0xbc>)
 8000948:	f7ff fdca 	bl	80004e0 <TCAL9538RSVR_INIT>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <main+0x66>
 8000952:	f000 facb 	bl	8000eec <Error_Handler>

  HAL_CAN_Start(&hcan1);
 8000956:	4816      	ldr	r0, [pc, #88]	@ (80009b0 <main+0xc0>)
 8000958:	f001 feaf 	bl	80026ba <HAL_CAN_Start>


  HAL_UART_Receive_IT(&huart4, &uart_rx, 1); // enables uart interrupt, it will call the interrupt when one byte is recieved
 800095c:	2201      	movs	r2, #1
 800095e:	4915      	ldr	r1, [pc, #84]	@ (80009b4 <main+0xc4>)
 8000960:	4815      	ldr	r0, [pc, #84]	@ (80009b8 <main+0xc8>)
 8000962:	f004 ff03 	bl	800576c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000966:	f006 fa57 	bl	8006e18 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CAN_Mutex */
  CAN_MutexHandle = osSemaphoreNew(1, 1, &CAN_Mutex_attributes);
 800096a:	4a14      	ldr	r2, [pc, #80]	@ (80009bc <main+0xcc>)
 800096c:	2101      	movs	r1, #1
 800096e:	2001      	movs	r0, #1
 8000970:	f006 fb49 	bl	8007006 <osSemaphoreNew>
 8000974:	4603      	mov	r3, r0
 8000976:	4a12      	ldr	r2, [pc, #72]	@ (80009c0 <main+0xd0>)
 8000978:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartTask01, NULL, &HeartBeat_attributes);
 800097a:	4a12      	ldr	r2, [pc, #72]	@ (80009c4 <main+0xd4>)
 800097c:	2100      	movs	r1, #0
 800097e:	4812      	ldr	r0, [pc, #72]	@ (80009c8 <main+0xd8>)
 8000980:	f006 fa94 	bl	8006eac <osThreadNew>
 8000984:	4603      	mov	r3, r0
 8000986:	4a11      	ldr	r2, [pc, #68]	@ (80009cc <main+0xdc>)
 8000988:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  //Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 800098a:	4a11      	ldr	r2, [pc, #68]	@ (80009d0 <main+0xe0>)
 800098c:	2100      	movs	r1, #0
 800098e:	4811      	ldr	r0, [pc, #68]	@ (80009d4 <main+0xe4>)
 8000990:	f006 fa8c 	bl	8006eac <osThreadNew>
 8000994:	4603      	mov	r3, r0
 8000996:	4a10      	ldr	r2, [pc, #64]	@ (80009d8 <main+0xe8>)
 8000998:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800099a:	f006 fa61 	bl	8006e60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800099e:	bf00      	nop
 80009a0:	e7fd      	b.n	800099e <main+0xae>
 80009a2:	bf00      	nop
 80009a4:	20000134 	.word	0x20000134
 80009a8:	2000021c 	.word	0x2000021c
 80009ac:	2000022c 	.word	0x2000022c
 80009b0:	200000e4 	.word	0x200000e4
 80009b4:	20000241 	.word	0x20000241
 80009b8:	20000188 	.word	0x20000188
 80009bc:	08009f08 	.word	0x08009f08
 80009c0:	20000218 	.word	0x20000218
 80009c4:	08009ec0 	.word	0x08009ec0
 80009c8:	08000e09 	.word	0x08000e09
 80009cc:	20000210 	.word	0x20000210
 80009d0:	08009ee4 	.word	0x08009ee4
 80009d4:	08000e39 	.word	0x08000e39
 80009d8:	20000214 	.word	0x20000214

080009dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b096      	sub	sp, #88	@ 0x58
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2244      	movs	r2, #68	@ 0x44
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f009 f944 	bl	8009c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	463b      	mov	r3, r7
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a02:	f003 f80f 	bl	8003a24 <HAL_PWREx_ControlVoltageScaling>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a0c:	f000 fa6e 	bl	8000eec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a10:	2310      	movs	r3, #16
 8000a12:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a14:	2301      	movs	r3, #1
 8000a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a1c:	2360      	movs	r3, #96	@ 0x60
 8000a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f003 f851 	bl	8003ad0 <HAL_RCC_OscConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000a34:	f000 fa5a 	bl	8000eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a38:	230f      	movs	r3, #15
 8000a3a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f003 fc57 	bl	8004304 <HAL_RCC_ClockConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a5c:	f000 fa46 	bl	8000eec <Error_Handler>
  }
}
 8000a60:	bf00      	nop
 8000a62:	3758      	adds	r7, #88	@ 0x58
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
 8000a88:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b48 <MX_ADC1_Init+0xe0>)
 8000a8c:	4a2f      	ldr	r2, [pc, #188]	@ (8000b4c <MX_ADC1_Init+0xe4>)
 8000a8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a90:	4b2d      	ldr	r3, [pc, #180]	@ (8000b48 <MX_ADC1_Init+0xe0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a96:	4b2c      	ldr	r3, [pc, #176]	@ (8000b48 <MX_ADC1_Init+0xe0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b48 <MX_ADC1_Init+0xe0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aa2:	4b29      	ldr	r3, [pc, #164]	@ (8000b48 <MX_ADC1_Init+0xe0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aa8:	4b27      	ldr	r3, [pc, #156]	@ (8000b48 <MX_ADC1_Init+0xe0>)
 8000aaa:	2204      	movs	r2, #4
 8000aac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aae:	4b26      	ldr	r3, [pc, #152]	@ (8000b48 <MX_ADC1_Init+0xe0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ab4:	4b24      	ldr	r3, [pc, #144]	@ (8000b48 <MX_ADC1_Init+0xe0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000aba:	4b23      	ldr	r3, [pc, #140]	@ (8000b48 <MX_ADC1_Init+0xe0>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ac0:	4b21      	ldr	r3, [pc, #132]	@ (8000b48 <MX_ADC1_Init+0xe0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <MX_ADC1_Init+0xe0>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ace:	4b1e      	ldr	r3, [pc, #120]	@ (8000b48 <MX_ADC1_Init+0xe0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <MX_ADC1_Init+0xe0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <MX_ADC1_Init+0xe0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <MX_ADC1_Init+0xe0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aea:	4817      	ldr	r0, [pc, #92]	@ (8000b48 <MX_ADC1_Init+0xe0>)
 8000aec:	f000 feb4 	bl	8001858 <HAL_ADC_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000af6:	f000 f9f9 	bl	8000eec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	4810      	ldr	r0, [pc, #64]	@ (8000b48 <MX_ADC1_Init+0xe0>)
 8000b06:	f001 fc2d 	bl	8002364 <HAL_ADCEx_MultiModeConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b10:	f000 f9ec 	bl	8000eec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b14:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <MX_ADC1_Init+0xe8>)
 8000b16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b18:	2306      	movs	r3, #6
 8000b1a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b20:	237f      	movs	r3, #127	@ 0x7f
 8000b22:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b24:	2304      	movs	r3, #4
 8000b26:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <MX_ADC1_Init+0xe0>)
 8000b32:	f000 ffe5 	bl	8001b00 <HAL_ADC_ConfigChannel>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000b3c:	f000 f9d6 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	@ 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000007c 	.word	0x2000007c
 8000b4c:	50040000 	.word	0x50040000
 8000b50:	04300002 	.word	0x04300002

08000b54 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b58:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <MX_CAN1_Init+0x60>)
 8000b5a:	4a17      	ldr	r2, [pc, #92]	@ (8000bb8 <MX_CAN1_Init+0x64>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <MX_CAN1_Init+0x60>)
 8000b60:	2210      	movs	r2, #16
 8000b62:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <MX_CAN1_Init+0x60>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b6a:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <MX_CAN1_Init+0x60>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000b70:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <MX_CAN1_Init+0x60>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_CAN1_Init+0x60>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <MX_CAN1_Init+0x60>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000b82:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <MX_CAN1_Init+0x60>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000b88:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <MX_CAN1_Init+0x60>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <MX_CAN1_Init+0x60>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b94:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <MX_CAN1_Init+0x60>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <MX_CAN1_Init+0x60>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	@ (8000bb4 <MX_CAN1_Init+0x60>)
 8000ba2:	f001 fc8f 	bl	80024c4 <HAL_CAN_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000bac:	f000 f99e 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200000e4 	.word	0x200000e4
 8000bb8:	40006400 	.word	0x40006400

08000bbc <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <MX_CAN2_Init+0x60>)
 8000bc2:	4a17      	ldr	r2, [pc, #92]	@ (8000c20 <MX_CAN2_Init+0x64>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <MX_CAN2_Init+0x60>)
 8000bc8:	2210      	movs	r2, #16
 8000bca:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000bcc:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <MX_CAN2_Init+0x60>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bd2:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <MX_CAN2_Init+0x60>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000bd8:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <MX_CAN2_Init+0x60>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000bde:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <MX_CAN2_Init+0x60>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000be4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <MX_CAN2_Init+0x60>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_CAN2_Init+0x60>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <MX_CAN2_Init+0x60>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_CAN2_Init+0x60>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <MX_CAN2_Init+0x60>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_CAN2_Init+0x60>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	@ (8000c1c <MX_CAN2_Init+0x60>)
 8000c0a:	f001 fc5b 	bl	80024c4 <HAL_CAN_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000c14:	f000 f96a 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	2000010c 	.word	0x2000010c
 8000c20:	40006800 	.word	0x40006800

08000c24 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	@ (8000c98 <MX_I2C4_Init+0x74>)
 8000c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c9c <MX_I2C4_Init+0x78>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <MX_I2C4_Init+0x74>)
 8000c30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca0 <MX_I2C4_Init+0x7c>)
 8000c32:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000c34:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <MX_I2C4_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <MX_I2C4_Init+0x74>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c40:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <MX_I2C4_Init+0x74>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c46:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <MX_I2C4_Init+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <MX_I2C4_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <MX_I2C4_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <MX_I2C4_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000c5e:	480e      	ldr	r0, [pc, #56]	@ (8000c98 <MX_I2C4_Init+0x74>)
 8000c60:	f002 f8ae 	bl	8002dc0 <HAL_I2C_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000c6a:	f000 f93f 	bl	8000eec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4809      	ldr	r0, [pc, #36]	@ (8000c98 <MX_I2C4_Init+0x74>)
 8000c72:	f002 fe31 	bl	80038d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000c7c:	f000 f936 	bl	8000eec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000c80:	2100      	movs	r1, #0
 8000c82:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <MX_I2C4_Init+0x74>)
 8000c84:	f002 fe73 	bl	800396e <HAL_I2CEx_ConfigDigitalFilter>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000c8e:	f000 f92d 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000134 	.word	0x20000134
 8000c9c:	40008400 	.word	0x40008400
 8000ca0:	00100d14 	.word	0x00100d14

08000ca4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <MX_UART4_Init+0x58>)
 8000caa:	4a15      	ldr	r2, [pc, #84]	@ (8000d00 <MX_UART4_Init+0x5c>)
 8000cac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000cae:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <MX_UART4_Init+0x58>)
 8000cb0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000cb4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <MX_UART4_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <MX_UART4_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <MX_UART4_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <MX_UART4_Init+0x58>)
 8000cca:	220c      	movs	r2, #12
 8000ccc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <MX_UART4_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <MX_UART4_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <MX_UART4_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <MX_UART4_Init+0x58>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <MX_UART4_Init+0x58>)
 8000ce8:	f004 fcf2 	bl	80056d0 <HAL_UART_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000cf2:	f000 f8fb 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000188 	.word	0x20000188
 8000d00:	40004c00 	.word	0x40004c00

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 030c 	add.w	r3, r7, #12
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc4 <MX_GPIO_Init+0xc0>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1e:	4a29      	ldr	r2, [pc, #164]	@ (8000dc4 <MX_GPIO_Init+0xc0>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d26:	4b27      	ldr	r3, [pc, #156]	@ (8000dc4 <MX_GPIO_Init+0xc0>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	4b24      	ldr	r3, [pc, #144]	@ (8000dc4 <MX_GPIO_Init+0xc0>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d36:	4a23      	ldr	r2, [pc, #140]	@ (8000dc4 <MX_GPIO_Init+0xc0>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3e:	4b21      	ldr	r3, [pc, #132]	@ (8000dc4 <MX_GPIO_Init+0xc0>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc4 <MX_GPIO_Init+0xc0>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4e:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc4 <MX_GPIO_Init+0xc0>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d56:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <MX_GPIO_Init+0xc0>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OK_LED_GPIO_Port, OK_LED_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6c:	f001 ffde 	bl	8002d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Alert1_Pin */
  GPIO_InitStruct.Pin = Alert1_Pin;
 8000d70:	2304      	movs	r3, #4
 8000d72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d74:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Alert1_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	4619      	mov	r1, r3
 8000d84:	4810      	ldr	r0, [pc, #64]	@ (8000dc8 <MX_GPIO_Init+0xc4>)
 8000d86:	f001 fe3f 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : OK_LED_Pin */
  GPIO_InitStruct.Pin = OK_LED_Pin;
 8000d8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OK_LED_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	4619      	mov	r1, r3
 8000da2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da6:	f001 fe2f 	bl	8002a08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2105      	movs	r1, #5
 8000dae:	2008      	movs	r0, #8
 8000db0:	f001 fd80 	bl	80028b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000db4:	2008      	movs	r0, #8
 8000db6:	f001 fd99 	bl	80028ec <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dba:	bf00      	nop
 8000dbc:	3720      	adds	r7, #32
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	48000800 	.word	0x48000800

08000dcc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  // code for handling the data received over uart
  if(huart->Instance == UART4)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	@ (8000df8 <HAL_UART_RxCpltCallback+0x2c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d103      	bne.n	8000de6 <HAL_UART_RxCpltCallback+0x1a>
    }
    */



    prev_uart_rx = uart_rx;
 8000dde:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <HAL_UART_RxCpltCallback+0x30>)
 8000de0:	781a      	ldrb	r2, [r3, #0]
 8000de2:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <HAL_UART_RxCpltCallback+0x34>)
 8000de4:	701a      	strb	r2, [r3, #0]
  }

  HAL_UART_Receive_IT(&huart4, &uart_rx, 1); // reenables uart interrupt
 8000de6:	2201      	movs	r2, #1
 8000de8:	4904      	ldr	r1, [pc, #16]	@ (8000dfc <HAL_UART_RxCpltCallback+0x30>)
 8000dea:	4806      	ldr	r0, [pc, #24]	@ (8000e04 <HAL_UART_RxCpltCallback+0x38>)
 8000dec:	f004 fcbe 	bl	800576c <HAL_UART_Receive_IT>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40004c00 	.word	0x40004c00
 8000dfc:	20000241 	.word	0x20000241
 8000e00:	20000242 	.word	0x20000242
 8000e04:	20000188 	.word	0x20000188

08000e08 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	//uint8_t var = 0b11111111;
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000e10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e18:	f001 ffa0 	bl	8002d5c <HAL_GPIO_TogglePin>
	//var = ~var;
	//TCAL9538RSVR_SetOutput(&U7, &var);
	uint8_t val = TxData[1];
 8000e1c:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <StartTask01+0x2c>)
 8000e1e:	785b      	ldrb	r3, [r3, #1]
 8000e20:	73fb      	strb	r3, [r7, #15]
	uint8_t val2 = TxData[2];
 8000e22:	4b04      	ldr	r3, [pc, #16]	@ (8000e34 <StartTask01+0x2c>)
 8000e24:	789b      	ldrb	r3, [r3, #2]
 8000e26:	73bb      	strb	r3, [r7, #14]
    osDelay(500);
 8000e28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e2c:	f006 f8d0 	bl	8006fd0 <osDelay>
  {
 8000e30:	bf00      	nop
 8000e32:	e7ed      	b.n	8000e10 <StartTask01+0x8>
 8000e34:	20000238 	.word	0x20000238

08000e38 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	@ 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */

	int debounce_count = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24

	CAN_TxHeaderTypeDef TxHeader;
	//uint8_t TxData[8] = { 0 };
	uint32_t TxMailbox;

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
	TxHeader.StdId = 0x3FF; // 11 bit Identifier !!Change!!
 8000e48:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8000e4c:	60bb      	str	r3, [r7, #8]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8000e52:	2308      	movs	r3, #8
 8000e54:	61bb      	str	r3, [r7, #24]

	Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000e56:	4a17      	ldr	r2, [pc, #92]	@ (8000eb4 <StartTask03+0x7c>)
 8000e58:	4917      	ldr	r1, [pc, #92]	@ (8000eb8 <StartTask03+0x80>)
 8000e5a:	4818      	ldr	r0, [pc, #96]	@ (8000ebc <StartTask03+0x84>)
 8000e5c:	f7ff fc34 	bl	80006c8 <Update_CAN_Message1>

	/* Infinite loop */
	for(;;)
	{
	  // Read TCAL Input and update flags
	  if (GPIO_Interrupt_Triggered)
 8000e60:	4b17      	ldr	r3, [pc, #92]	@ (8000ec0 <StartTask03+0x88>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d01e      	beq.n	8000ea6 <StartTask03+0x6e>
	  {
		  if (debounce_count++ <= 2) {continue;}
 8000e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6a:	1c5a      	adds	r2, r3, #1
 8000e6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	dd1d      	ble.n	8000eae <StartTask03+0x76>
		  if (TCAL9538RSVR_HandleInterrupt(&U5) != HAL_OK){ Error_Handler(); }
 8000e72:	4814      	ldr	r0, [pc, #80]	@ (8000ec4 <StartTask03+0x8c>)
 8000e74:	f7ff fbb7 	bl	80005e6 <TCAL9538RSVR_HandleInterrupt>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <StartTask03+0x4a>
 8000e7e:	f000 f835 	bl	8000eec <Error_Handler>
		  //if (TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK){ Error_Handler(); }


		  Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000e82:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb4 <StartTask03+0x7c>)
 8000e84:	490c      	ldr	r1, [pc, #48]	@ (8000eb8 <StartTask03+0x80>)
 8000e86:	480d      	ldr	r0, [pc, #52]	@ (8000ebc <StartTask03+0x84>)
 8000e88:	f7ff fc1e 	bl	80006c8 <Update_CAN_Message1>
		  uint8_t val = TxData[1];
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <StartTask03+0x84>)
 8000e8e:	785b      	ldrb	r3, [r3, #1]
 8000e90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  uint8_t val2 = TxData[2];
 8000e94:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <StartTask03+0x84>)
 8000e96:	789b      	ldrb	r3, [r3, #2]
 8000e98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		  GPIO_Interrupt_Triggered = 0;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <StartTask03+0x88>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
		  debounce_count = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
//	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
//	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
//	  {
//		  Error_Handler();
//	  }
	  osDelay(1);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f006 f892 	bl	8006fd0 <osDelay>
 8000eac:	e7d8      	b.n	8000e60 <StartTask03+0x28>
		  if (debounce_count++ <= 2) {continue;}
 8000eae:	bf00      	nop
	  if (GPIO_Interrupt_Triggered)
 8000eb0:	e7d6      	b.n	8000e60 <StartTask03+0x28>
 8000eb2:	bf00      	nop
 8000eb4:	20000229 	.word	0x20000229
 8000eb8:	20000221 	.word	0x20000221
 8000ebc:	20000238 	.word	0x20000238
 8000ec0:	20000234 	.word	0x20000234
 8000ec4:	2000021c 	.word	0x2000021c

08000ec8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	@ (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eda:	f000 fafd 	bl	80014d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40000400 	.word	0x40000400

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <Error_Handler+0x8>

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <HAL_MspInit+0x4c>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f02:	4a10      	ldr	r2, [pc, #64]	@ (8000f44 <HAL_MspInit+0x4c>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <HAL_MspInit+0x4c>)
 8000f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <HAL_MspInit+0x4c>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <HAL_MspInit+0x4c>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <HAL_MspInit+0x4c>)
 8000f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	210f      	movs	r1, #15
 8000f32:	f06f 0001 	mvn.w	r0, #1
 8000f36:	f001 fcbd 	bl	80028b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000

08000f48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0ac      	sub	sp, #176	@ 0xb0
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	228c      	movs	r2, #140	@ 0x8c
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f008 fe85 	bl	8009c78 <memset>
  if(hadc->Instance==ADC1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff0 <HAL_ADC_MspInit+0xa8>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d137      	bne.n	8000fe8 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f7c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000f7e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8000f82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f003 fc10 	bl	80047b0 <HAL_RCCEx_PeriphCLKConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000f96:	f7ff ffa9 	bl	8000eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f9a:	4b16      	ldr	r3, [pc, #88]	@ (8000ff4 <HAL_ADC_MspInit+0xac>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9e:	4a15      	ldr	r2, [pc, #84]	@ (8000ff4 <HAL_ADC_MspInit+0xac>)
 8000fa0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa6:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <HAL_ADC_MspInit+0xac>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000faa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <HAL_ADC_MspInit+0xac>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff4 <HAL_ADC_MspInit+0xac>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <HAL_ADC_MspInit+0xac>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fdc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <HAL_ADC_MspInit+0xb0>)
 8000fe4:	f001 fd10 	bl	8002a08 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fe8:	bf00      	nop
 8000fea:	37b0      	adds	r7, #176	@ 0xb0
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	50040000 	.word	0x50040000
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	48000800 	.word	0x48000800

08000ffc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	@ 0x30
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a45      	ldr	r2, [pc, #276]	@ (8001130 <HAL_CAN_MspInit+0x134>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d132      	bne.n	8001084 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800101e:	4b45      	ldr	r3, [pc, #276]	@ (8001134 <HAL_CAN_MspInit+0x138>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	4a43      	ldr	r2, [pc, #268]	@ (8001134 <HAL_CAN_MspInit+0x138>)
 8001026:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001028:	4b42      	ldr	r3, [pc, #264]	@ (8001134 <HAL_CAN_MspInit+0x138>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d10b      	bne.n	8001048 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001030:	4b41      	ldr	r3, [pc, #260]	@ (8001138 <HAL_CAN_MspInit+0x13c>)
 8001032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001034:	4a40      	ldr	r2, [pc, #256]	@ (8001138 <HAL_CAN_MspInit+0x13c>)
 8001036:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800103a:	6593      	str	r3, [r2, #88]	@ 0x58
 800103c:	4b3e      	ldr	r3, [pc, #248]	@ (8001138 <HAL_CAN_MspInit+0x13c>)
 800103e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001044:	61bb      	str	r3, [r7, #24]
 8001046:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001048:	4b3b      	ldr	r3, [pc, #236]	@ (8001138 <HAL_CAN_MspInit+0x13c>)
 800104a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104c:	4a3a      	ldr	r2, [pc, #232]	@ (8001138 <HAL_CAN_MspInit+0x13c>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001054:	4b38      	ldr	r3, [pc, #224]	@ (8001138 <HAL_CAN_MspInit+0x13c>)
 8001056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001060:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001072:	2309      	movs	r3, #9
 8001074:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	4619      	mov	r1, r3
 800107c:	482f      	ldr	r0, [pc, #188]	@ (800113c <HAL_CAN_MspInit+0x140>)
 800107e:	f001 fcc3 	bl	8002a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001082:	e051      	b.n	8001128 <HAL_CAN_MspInit+0x12c>
  else if(hcan->Instance==CAN2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a2d      	ldr	r2, [pc, #180]	@ (8001140 <HAL_CAN_MspInit+0x144>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d14c      	bne.n	8001128 <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800108e:	4b2a      	ldr	r3, [pc, #168]	@ (8001138 <HAL_CAN_MspInit+0x13c>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001092:	4a29      	ldr	r2, [pc, #164]	@ (8001138 <HAL_CAN_MspInit+0x13c>)
 8001094:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001098:	6593      	str	r3, [r2, #88]	@ 0x58
 800109a:	4b27      	ldr	r3, [pc, #156]	@ (8001138 <HAL_CAN_MspInit+0x13c>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80010a6:	4b23      	ldr	r3, [pc, #140]	@ (8001134 <HAL_CAN_MspInit+0x138>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	4a21      	ldr	r2, [pc, #132]	@ (8001134 <HAL_CAN_MspInit+0x138>)
 80010ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80010b0:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <HAL_CAN_MspInit+0x138>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d10b      	bne.n	80010d0 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80010b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001138 <HAL_CAN_MspInit+0x13c>)
 80010ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001138 <HAL_CAN_MspInit+0x13c>)
 80010be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80010c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001138 <HAL_CAN_MspInit+0x13c>)
 80010c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d0:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <HAL_CAN_MspInit+0x13c>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d4:	4a18      	ldr	r2, [pc, #96]	@ (8001138 <HAL_CAN_MspInit+0x13c>)
 80010d6:	f043 0302 	orr.w	r3, r3, #2
 80010da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010dc:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <HAL_CAN_MspInit+0x13c>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010e8:	2320      	movs	r3, #32
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 80010f8:	2303      	movs	r3, #3
 80010fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	480e      	ldr	r0, [pc, #56]	@ (800113c <HAL_CAN_MspInit+0x140>)
 8001104:	f001 fc80 	bl	8002a08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001108:	2340      	movs	r3, #64	@ 0x40
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8001118:	2308      	movs	r3, #8
 800111a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <HAL_CAN_MspInit+0x140>)
 8001124:	f001 fc70 	bl	8002a08 <HAL_GPIO_Init>
}
 8001128:	bf00      	nop
 800112a:	3730      	adds	r7, #48	@ 0x30
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40006400 	.word	0x40006400
 8001134:	20000248 	.word	0x20000248
 8001138:	40021000 	.word	0x40021000
 800113c:	48000400 	.word	0x48000400
 8001140:	40006800 	.word	0x40006800

08001144 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b0ac      	sub	sp, #176	@ 0xb0
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	228c      	movs	r2, #140	@ 0x8c
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f008 fd87 	bl	8009c78 <memset>
  if(hi2c->Instance==I2C4)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a22      	ldr	r2, [pc, #136]	@ (80011f8 <HAL_I2C_MspInit+0xb4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d13c      	bne.n	80011ee <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001174:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001178:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800117a:	2300      	movs	r3, #0
 800117c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	4618      	mov	r0, r3
 8001184:	f003 fb14 	bl	80047b0 <HAL_RCCEx_PeriphCLKConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800118e:	f7ff fead 	bl	8000eec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <HAL_I2C_MspInit+0xb8>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	4a19      	ldr	r2, [pc, #100]	@ (80011fc <HAL_I2C_MspInit+0xb8>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119e:	4b17      	ldr	r3, [pc, #92]	@ (80011fc <HAL_I2C_MspInit+0xb8>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b2:	2312      	movs	r3, #18
 80011b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 80011c4:	2303      	movs	r3, #3
 80011c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011ce:	4619      	mov	r1, r3
 80011d0:	480b      	ldr	r0, [pc, #44]	@ (8001200 <HAL_I2C_MspInit+0xbc>)
 80011d2:	f001 fc19 	bl	8002a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <HAL_I2C_MspInit+0xb8>)
 80011d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011da:	4a08      	ldr	r2, [pc, #32]	@ (80011fc <HAL_I2C_MspInit+0xb8>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <HAL_I2C_MspInit+0xb8>)
 80011e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 80011ee:	bf00      	nop
 80011f0:	37b0      	adds	r7, #176	@ 0xb0
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40008400 	.word	0x40008400
 80011fc:	40021000 	.word	0x40021000
 8001200:	48000400 	.word	0x48000400

08001204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b0ac      	sub	sp, #176	@ 0xb0
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	228c      	movs	r2, #140	@ 0x8c
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f008 fd27 	bl	8009c78 <memset>
  if(huart->Instance==UART4)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a25      	ldr	r2, [pc, #148]	@ (80012c4 <HAL_UART_MspInit+0xc0>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d143      	bne.n	80012bc <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001234:	2308      	movs	r3, #8
 8001236:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001238:	2300      	movs	r3, #0
 800123a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fab5 	bl	80047b0 <HAL_RCCEx_PeriphCLKConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800124c:	f7ff fe4e 	bl	8000eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001250:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <HAL_UART_MspInit+0xc4>)
 8001252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001254:	4a1c      	ldr	r2, [pc, #112]	@ (80012c8 <HAL_UART_MspInit+0xc4>)
 8001256:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800125a:	6593      	str	r3, [r2, #88]	@ 0x58
 800125c:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <HAL_UART_MspInit+0xc4>)
 800125e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001260:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001268:	4b17      	ldr	r3, [pc, #92]	@ (80012c8 <HAL_UART_MspInit+0xc4>)
 800126a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126c:	4a16      	ldr	r2, [pc, #88]	@ (80012c8 <HAL_UART_MspInit+0xc4>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001274:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <HAL_UART_MspInit+0xc4>)
 8001276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001280:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001284:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800129a:	2308      	movs	r3, #8
 800129c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012a4:	4619      	mov	r1, r3
 80012a6:	4809      	ldr	r0, [pc, #36]	@ (80012cc <HAL_UART_MspInit+0xc8>)
 80012a8:	f001 fbae 	bl	8002a08 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2105      	movs	r1, #5
 80012b0:	2034      	movs	r0, #52	@ 0x34
 80012b2:	f001 faff 	bl	80028b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80012b6:	2034      	movs	r0, #52	@ 0x34
 80012b8:	f001 fb18 	bl	80028ec <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80012bc:	bf00      	nop
 80012be:	37b0      	adds	r7, #176	@ 0xb0
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40004c00 	.word	0x40004c00
 80012c8:	40021000 	.word	0x40021000
 80012cc:	48000800 	.word	0x48000800

080012d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08e      	sub	sp, #56	@ 0x38
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80012de:	4b34      	ldr	r3, [pc, #208]	@ (80013b0 <HAL_InitTick+0xe0>)
 80012e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e2:	4a33      	ldr	r2, [pc, #204]	@ (80013b0 <HAL_InitTick+0xe0>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ea:	4b31      	ldr	r3, [pc, #196]	@ (80013b0 <HAL_InitTick+0xe0>)
 80012ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012f6:	f107 0210 	add.w	r2, r7, #16
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f003 f9c3 	bl	800468c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800130a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800130c:	2b00      	cmp	r3, #0
 800130e:	d103      	bne.n	8001318 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001310:	f003 f990 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 8001314:	6378      	str	r0, [r7, #52]	@ 0x34
 8001316:	e004      	b.n	8001322 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001318:	f003 f98c 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 800131c:	4603      	mov	r3, r0
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001324:	4a23      	ldr	r2, [pc, #140]	@ (80013b4 <HAL_InitTick+0xe4>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	0c9b      	lsrs	r3, r3, #18
 800132c:	3b01      	subs	r3, #1
 800132e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001330:	4b21      	ldr	r3, [pc, #132]	@ (80013b8 <HAL_InitTick+0xe8>)
 8001332:	4a22      	ldr	r2, [pc, #136]	@ (80013bc <HAL_InitTick+0xec>)
 8001334:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001336:	4b20      	ldr	r3, [pc, #128]	@ (80013b8 <HAL_InitTick+0xe8>)
 8001338:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800133c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800133e:	4a1e      	ldr	r2, [pc, #120]	@ (80013b8 <HAL_InitTick+0xe8>)
 8001340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001342:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001344:	4b1c      	ldr	r3, [pc, #112]	@ (80013b8 <HAL_InitTick+0xe8>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134a:	4b1b      	ldr	r3, [pc, #108]	@ (80013b8 <HAL_InitTick+0xe8>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001350:	4b19      	ldr	r3, [pc, #100]	@ (80013b8 <HAL_InitTick+0xe8>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001356:	4818      	ldr	r0, [pc, #96]	@ (80013b8 <HAL_InitTick+0xe8>)
 8001358:	f003 fef4 	bl	8005144 <HAL_TIM_Base_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001362:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001366:	2b00      	cmp	r3, #0
 8001368:	d11b      	bne.n	80013a2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800136a:	4813      	ldr	r0, [pc, #76]	@ (80013b8 <HAL_InitTick+0xe8>)
 800136c:	f003 ff4c 	bl	8005208 <HAL_TIM_Base_Start_IT>
 8001370:	4603      	mov	r3, r0
 8001372:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001376:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800137a:	2b00      	cmp	r3, #0
 800137c:	d111      	bne.n	80013a2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800137e:	201d      	movs	r0, #29
 8001380:	f001 fab4 	bl	80028ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b0f      	cmp	r3, #15
 8001388:	d808      	bhi.n	800139c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800138a:	2200      	movs	r2, #0
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	201d      	movs	r0, #29
 8001390:	f001 fa90 	bl	80028b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001394:	4a0a      	ldr	r2, [pc, #40]	@ (80013c0 <HAL_InitTick+0xf0>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e002      	b.n	80013a2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3738      	adds	r7, #56	@ 0x38
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40021000 	.word	0x40021000
 80013b4:	431bde83 	.word	0x431bde83
 80013b8:	2000024c 	.word	0x2000024c
 80013bc:	40000400 	.word	0x40000400
 80013c0:	20000004 	.word	0x20000004

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <NMI_Handler+0x4>

080013cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <HardFault_Handler+0x4>

080013d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <MemManage_Handler+0x4>

080013dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alert1_Pin);
 80013fe:	2004      	movs	r0, #4
 8001400:	f001 fcc6 	bl	8002d90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}

08001408 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800140c:	4802      	ldr	r0, [pc, #8]	@ (8001418 <TIM3_IRQHandler+0x10>)
 800140e:	f003 ff6b 	bl	80052e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000024c 	.word	0x2000024c

0800141c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001420:	4802      	ldr	r0, [pc, #8]	@ (800142c <UART4_IRQHandler+0x10>)
 8001422:	f004 f9ef 	bl	8005804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000188 	.word	0x20000188

08001430 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <SystemInit+0x20>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800143a:	4a05      	ldr	r2, [pc, #20]	@ (8001450 <SystemInit+0x20>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001454:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800148c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001458:	f7ff ffea 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800145c:	480c      	ldr	r0, [pc, #48]	@ (8001490 <LoopForever+0x6>)
  ldr r1, =_edata
 800145e:	490d      	ldr	r1, [pc, #52]	@ (8001494 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001460:	4a0d      	ldr	r2, [pc, #52]	@ (8001498 <LoopForever+0xe>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001474:	4c0a      	ldr	r4, [pc, #40]	@ (80014a0 <LoopForever+0x16>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001482:	f008 fc57 	bl	8009d34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001486:	f7ff fa33 	bl	80008f0 <main>

0800148a <LoopForever>:

LoopForever:
    b LoopForever
 800148a:	e7fe      	b.n	800148a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800148c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001494:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001498:	08009f70 	.word	0x08009f70
  ldr r2, =_sbss
 800149c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80014a0:	20001d7c 	.word	0x20001d7c

080014a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014a4:	e7fe      	b.n	80014a4 <ADC1_2_IRQHandler>

080014a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f001 f9f4 	bl	800289e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b6:	200f      	movs	r0, #15
 80014b8:	f7ff ff0a 	bl	80012d0 <HAL_InitTick>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d002      	beq.n	80014c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	71fb      	strb	r3, [r7, #7]
 80014c6:	e001      	b.n	80014cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014c8:	f7ff fd16 	bl	8000ef8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014cc:	79fb      	ldrb	r3, [r7, #7]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <HAL_IncTick+0x20>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <HAL_IncTick+0x24>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	4a04      	ldr	r2, [pc, #16]	@ (80014fc <HAL_IncTick+0x24>)
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000008 	.word	0x20000008
 80014fc:	20000298 	.word	0x20000298

08001500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return uwTick;
 8001504:	4b03      	ldr	r3, [pc, #12]	@ (8001514 <HAL_GetTick+0x14>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000298 	.word	0x20000298

08001518 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	609a      	str	r2, [r3, #8]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	609a      	str	r2, [r3, #8]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3360      	adds	r3, #96	@ 0x60
 8001592:	461a      	mov	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b08      	ldr	r3, [pc, #32]	@ (80015c4 <LL_ADC_SetOffset+0x44>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	4313      	orrs	r3, r2
 80015b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015b8:	bf00      	nop
 80015ba:	371c      	adds	r7, #28
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	03fff000 	.word	0x03fff000

080015c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3360      	adds	r3, #96	@ 0x60
 80015d6:	461a      	mov	r2, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	3360      	adds	r3, #96	@ 0x60
 8001604:	461a      	mov	r2, r3
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	431a      	orrs	r2, r3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800161e:	bf00      	nop
 8001620:	371c      	adds	r7, #28
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	615a      	str	r2, [r3, #20]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3330      	adds	r3, #48	@ 0x30
 8001660:	461a      	mov	r2, r3
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	4413      	add	r3, r2
 800166e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	211f      	movs	r1, #31
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	401a      	ands	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	0e9b      	lsrs	r3, r3, #26
 8001688:	f003 011f 	and.w	r1, r3, #31
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	431a      	orrs	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800169c:	bf00      	nop
 800169e:	371c      	adds	r7, #28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3314      	adds	r3, #20
 80016b8:	461a      	mov	r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	0e5b      	lsrs	r3, r3, #25
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	4413      	add	r3, r2
 80016c6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	0d1b      	lsrs	r3, r3, #20
 80016d0:	f003 031f 	and.w	r3, r3, #31
 80016d4:	2107      	movs	r1, #7
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	401a      	ands	r2, r3
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	0d1b      	lsrs	r3, r3, #20
 80016e2:	f003 031f 	and.w	r3, r3, #31
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ec:	431a      	orrs	r2, r3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016f2:	bf00      	nop
 80016f4:	371c      	adds	r7, #28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001718:	43db      	mvns	r3, r3
 800171a:	401a      	ands	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0318 	and.w	r3, r3, #24
 8001722:	4908      	ldr	r1, [pc, #32]	@ (8001744 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001724:	40d9      	lsrs	r1, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	400b      	ands	r3, r1
 800172a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800172e:	431a      	orrs	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	0007ffff 	.word	0x0007ffff

08001748 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001758:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6093      	str	r3, [r2, #8]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800177c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001780:	d101      	bne.n	8001786 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80017a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80017d0:	d101      	bne.n	80017d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <LL_ADC_IsEnabled+0x18>
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <LL_ADC_IsEnabled+0x1a>
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	2b04      	cmp	r3, #4
 800181c:	d101      	bne.n	8001822 <LL_ADC_REG_IsConversionOngoing+0x18>
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b08      	cmp	r3, #8
 8001842:	d101      	bne.n	8001848 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b089      	sub	sp, #36	@ 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e133      	b.n	8001ada <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187c:	2b00      	cmp	r3, #0
 800187e:	d109      	bne.n	8001894 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff fb61 	bl	8000f48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff67 	bl	800176c <LL_ADC_IsDeepPowerDownEnabled>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff4d 	bl	8001748 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff ff82 	bl	80017bc <LL_ADC_IsInternalRegulatorEnabled>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d115      	bne.n	80018ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ff66 	bl	8001794 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018c8:	4b86      	ldr	r3, [pc, #536]	@ (8001ae4 <HAL_ADC_Init+0x28c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	099b      	lsrs	r3, r3, #6
 80018ce:	4a86      	ldr	r2, [pc, #536]	@ (8001ae8 <HAL_ADC_Init+0x290>)
 80018d0:	fba2 2303 	umull	r2, r3, r2, r3
 80018d4:	099b      	lsrs	r3, r3, #6
 80018d6:	3301      	adds	r3, #1
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018dc:	e002      	b.n	80018e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f9      	bne.n	80018de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff64 	bl	80017bc <LL_ADC_IsInternalRegulatorEnabled>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10d      	bne.n	8001916 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fe:	f043 0210 	orr.w	r2, r3, #16
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800190a:	f043 0201 	orr.w	r2, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff75 	bl	800180a <LL_ADC_REG_IsConversionOngoing>
 8001920:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001926:	f003 0310 	and.w	r3, r3, #16
 800192a:	2b00      	cmp	r3, #0
 800192c:	f040 80cc 	bne.w	8001ac8 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b00      	cmp	r3, #0
 8001934:	f040 80c8 	bne.w	8001ac8 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001940:	f043 0202 	orr.w	r2, r3, #2
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff49 	bl	80017e4 <LL_ADC_IsEnabled>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d115      	bne.n	8001984 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001958:	4864      	ldr	r0, [pc, #400]	@ (8001aec <HAL_ADC_Init+0x294>)
 800195a:	f7ff ff43 	bl	80017e4 <LL_ADC_IsEnabled>
 800195e:	4604      	mov	r4, r0
 8001960:	4863      	ldr	r0, [pc, #396]	@ (8001af0 <HAL_ADC_Init+0x298>)
 8001962:	f7ff ff3f 	bl	80017e4 <LL_ADC_IsEnabled>
 8001966:	4603      	mov	r3, r0
 8001968:	431c      	orrs	r4, r3
 800196a:	4862      	ldr	r0, [pc, #392]	@ (8001af4 <HAL_ADC_Init+0x29c>)
 800196c:	f7ff ff3a 	bl	80017e4 <LL_ADC_IsEnabled>
 8001970:	4603      	mov	r3, r0
 8001972:	4323      	orrs	r3, r4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d105      	bne.n	8001984 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	4619      	mov	r1, r3
 800197e:	485e      	ldr	r0, [pc, #376]	@ (8001af8 <HAL_ADC_Init+0x2a0>)
 8001980:	f7ff fdca 	bl	8001518 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7e5b      	ldrb	r3, [r3, #25]
 8001988:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800198e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001994:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800199a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d106      	bne.n	80019c0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b6:	3b01      	subs	r3, #1
 80019b8:	045b      	lsls	r3, r3, #17
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d009      	beq.n	80019dc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019cc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	4b46      	ldr	r3, [pc, #280]	@ (8001afc <HAL_ADC_Init+0x2a4>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	69b9      	ldr	r1, [r7, #24]
 80019ec:	430b      	orrs	r3, r1
 80019ee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff1b 	bl	8001830 <LL_ADC_INJ_IsConversionOngoing>
 80019fa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d140      	bne.n	8001a84 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d13d      	bne.n	8001a84 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7e1b      	ldrb	r3, [r3, #24]
 8001a10:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a12:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a1a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a2a:	f023 0306 	bic.w	r3, r3, #6
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	69b9      	ldr	r1, [r7, #24]
 8001a34:	430b      	orrs	r3, r1
 8001a36:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d118      	bne.n	8001a74 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001a4c:	f023 0304 	bic.w	r3, r3, #4
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a58:	4311      	orrs	r1, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001a5e:	4311      	orrs	r1, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a64:	430a      	orrs	r2, r1
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 0201 	orr.w	r2, r2, #1
 8001a70:	611a      	str	r2, [r3, #16]
 8001a72:	e007      	b.n	8001a84 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0201 	bic.w	r2, r2, #1
 8001a82:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d10c      	bne.n	8001aa6 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	f023 010f 	bic.w	r1, r3, #15
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	1e5a      	subs	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001aa4:	e007      	b.n	8001ab6 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 020f 	bic.w	r2, r2, #15
 8001ab4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aba:	f023 0303 	bic.w	r3, r3, #3
 8001abe:	f043 0201 	orr.w	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ac6:	e007      	b.n	8001ad8 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001acc:	f043 0210 	orr.w	r2, r3, #16
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ad8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	@ 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd90      	pop	{r4, r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	053e2d63 	.word	0x053e2d63
 8001aec:	50040000 	.word	0x50040000
 8001af0:	50040100 	.word	0x50040100
 8001af4:	50040200 	.word	0x50040200
 8001af8:	50040300 	.word	0x50040300
 8001afc:	fff0c007 	.word	0xfff0c007

08001b00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b0b6      	sub	sp, #216	@ 0xd8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x22>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e3e3      	b.n	80022ea <HAL_ADC_ConfigChannel+0x7ea>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fe6b 	bl	800180a <LL_ADC_REG_IsConversionOngoing>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f040 83c4 	bne.w	80022c4 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d824      	bhi.n	8001b96 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	3b02      	subs	r3, #2
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d81b      	bhi.n	8001b8e <HAL_ADC_ConfigChannel+0x8e>
 8001b56:	a201      	add	r2, pc, #4	@ (adr r2, 8001b5c <HAL_ADC_ConfigChannel+0x5c>)
 8001b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5c:	08001b6d 	.word	0x08001b6d
 8001b60:	08001b75 	.word	0x08001b75
 8001b64:	08001b7d 	.word	0x08001b7d
 8001b68:	08001b85 	.word	0x08001b85
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b72:	e010      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001b74:	2312      	movs	r3, #18
 8001b76:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b7a:	e00c      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001b7c:	2318      	movs	r3, #24
 8001b7e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b82:	e008      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001b84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b8c:	e003      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001b8e:	2306      	movs	r3, #6
 8001b90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b94:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001ba4:	f7ff fd54 	bl	8001650 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fe2c 	bl	800180a <LL_ADC_REG_IsConversionOngoing>
 8001bb2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fe38 	bl	8001830 <LL_ADC_INJ_IsConversionOngoing>
 8001bc0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f040 81bf 	bne.w	8001f4c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f040 81ba 	bne.w	8001f4c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001be0:	d10f      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2200      	movs	r2, #0
 8001bec:	4619      	mov	r1, r3
 8001bee:	f7ff fd5b 	bl	80016a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fd15 	bl	800162a <LL_ADC_SetSamplingTimeCommonConfig>
 8001c00:	e00e      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	6819      	ldr	r1, [r3, #0]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f7ff fd4a 	bl	80016a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fd05 	bl	800162a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	695a      	ldr	r2, [r3, #20]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	08db      	lsrs	r3, r3, #3
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d00a      	beq.n	8001c58 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6919      	ldr	r1, [r3, #16]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c52:	f7ff fc95 	bl	8001580 <LL_ADC_SetOffset>
 8001c56:	e179      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fcb2 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10a      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x184>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fca7 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	0e9b      	lsrs	r3, r3, #26
 8001c7e:	f003 021f 	and.w	r2, r3, #31
 8001c82:	e01e      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x1c2>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fc9c 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ca2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ca6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001caa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001cb2:	2320      	movs	r3, #32
 8001cb4:	e004      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001cb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cba:	fab3 f383 	clz	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x1da>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	0e9b      	lsrs	r3, r3, #26
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	e018      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x20c>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001cee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001cf6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001cfe:	2320      	movs	r3, #32
 8001d00:	e004      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001d02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d106      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fc6b 	bl	80015f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2101      	movs	r1, #1
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fc4f 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10a      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x24a>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2101      	movs	r1, #1
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fc44 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8001d40:	4603      	mov	r3, r0
 8001d42:	0e9b      	lsrs	r3, r3, #26
 8001d44:	f003 021f 	and.w	r2, r3, #31
 8001d48:	e01e      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x288>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2101      	movs	r1, #1
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fc39 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001d70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001d78:	2320      	movs	r3, #32
 8001d7a:	e004      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001d7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d80:	fab3 f383 	clz	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d105      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x2a0>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	0e9b      	lsrs	r3, r3, #26
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	e018      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x2d2>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001db4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001db8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001dbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	e004      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d106      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2101      	movs	r1, #1
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fc08 	bl	80015f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2102      	movs	r1, #2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fbec 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10a      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x310>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2102      	movs	r1, #2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fbe1 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	0e9b      	lsrs	r3, r3, #26
 8001e0a:	f003 021f 	and.w	r2, r3, #31
 8001e0e:	e01e      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x34e>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2102      	movs	r1, #2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fbd6 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001e2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001e3e:	2320      	movs	r3, #32
 8001e40:	e004      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d105      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x366>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	0e9b      	lsrs	r3, r3, #26
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	e014      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x390>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001e74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001e7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001e82:	2320      	movs	r3, #32
 8001e84:	e004      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001e86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d106      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fba9 	bl	80015f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2103      	movs	r1, #3
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fb8d 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10a      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x3ce>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2103      	movs	r1, #3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fb82 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	0e9b      	lsrs	r3, r3, #26
 8001ec8:	f003 021f 	and.w	r2, r3, #31
 8001ecc:	e017      	b.n	8001efe <HAL_ADC_ConfigChannel+0x3fe>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2103      	movs	r1, #3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fb77 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8001eda:	4603      	mov	r3, r0
 8001edc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ee0:	fa93 f3a3 	rbit	r3, r3
 8001ee4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001ee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ee8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001ef0:	2320      	movs	r3, #32
 8001ef2:	e003      	b.n	8001efc <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001ef4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d105      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x416>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	0e9b      	lsrs	r3, r3, #26
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	e011      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x43a>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001f24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f26:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001f28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001f2e:	2320      	movs	r3, #32
 8001f30:	e003      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001f32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f34:	fab3 f383 	clz	r3, r3
 8001f38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d106      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2200      	movs	r2, #0
 8001f44:	2103      	movs	r1, #3
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fb54 	bl	80015f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fc47 	bl	80017e4 <LL_ADC_IsEnabled>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f040 813f 	bne.w	80021dc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	6819      	ldr	r1, [r3, #0]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	f7ff fbc8 	bl	8001700 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4a8e      	ldr	r2, [pc, #568]	@ (80021b0 <HAL_ADC_ConfigChannel+0x6b0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	f040 8130 	bne.w	80021dc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10b      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x4a4>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	0e9b      	lsrs	r3, r3, #26
 8001f92:	3301      	adds	r3, #1
 8001f94:	f003 031f 	and.w	r3, r3, #31
 8001f98:	2b09      	cmp	r3, #9
 8001f9a:	bf94      	ite	ls
 8001f9c:	2301      	movls	r3, #1
 8001f9e:	2300      	movhi	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	e019      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x4d8>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fac:	fa93 f3a3 	rbit	r3, r3
 8001fb0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001fb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001fbc:	2320      	movs	r3, #32
 8001fbe:	e003      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001fc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	3301      	adds	r3, #1
 8001fca:	f003 031f 	and.w	r3, r3, #31
 8001fce:	2b09      	cmp	r3, #9
 8001fd0:	bf94      	ite	ls
 8001fd2:	2301      	movls	r3, #1
 8001fd4:	2300      	movhi	r3, #0
 8001fd6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d079      	beq.n	80020d0 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d107      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x4f8>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0e9b      	lsrs	r3, r3, #26
 8001fee:	3301      	adds	r3, #1
 8001ff0:	069b      	lsls	r3, r3, #26
 8001ff2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ff6:	e015      	b.n	8002024 <HAL_ADC_ConfigChannel+0x524>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002000:	fa93 f3a3 	rbit	r3, r3
 8002004:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002006:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002008:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800200a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002010:	2320      	movs	r3, #32
 8002012:	e003      	b.n	800201c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002014:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	3301      	adds	r3, #1
 800201e:	069b      	lsls	r3, r3, #26
 8002020:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202c:	2b00      	cmp	r3, #0
 800202e:	d109      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x544>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	0e9b      	lsrs	r3, r3, #26
 8002036:	3301      	adds	r3, #1
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	2101      	movs	r1, #1
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	e017      	b.n	8002074 <HAL_ADC_ConfigChannel+0x574>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002054:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002056:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800205c:	2320      	movs	r3, #32
 800205e:	e003      	b.n	8002068 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	3301      	adds	r3, #1
 800206a:	f003 031f 	and.w	r3, r3, #31
 800206e:	2101      	movs	r1, #1
 8002070:	fa01 f303 	lsl.w	r3, r1, r3
 8002074:	ea42 0103 	orr.w	r1, r2, r3
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10a      	bne.n	800209a <HAL_ADC_ConfigChannel+0x59a>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	0e9b      	lsrs	r3, r3, #26
 800208a:	3301      	adds	r3, #1
 800208c:	f003 021f 	and.w	r2, r3, #31
 8002090:	4613      	mov	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4413      	add	r3, r2
 8002096:	051b      	lsls	r3, r3, #20
 8002098:	e018      	b.n	80020cc <HAL_ADC_ConfigChannel+0x5cc>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80020a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80020ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80020b2:	2320      	movs	r3, #32
 80020b4:	e003      	b.n	80020be <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80020b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020b8:	fab3 f383 	clz	r3, r3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	3301      	adds	r3, #1
 80020c0:	f003 021f 	and.w	r2, r3, #31
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020cc:	430b      	orrs	r3, r1
 80020ce:	e080      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d107      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x5ec>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	0e9b      	lsrs	r3, r3, #26
 80020e2:	3301      	adds	r3, #1
 80020e4:	069b      	lsls	r3, r3, #26
 80020e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020ea:	e015      	b.n	8002118 <HAL_ADC_ConfigChannel+0x618>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80020fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002104:	2320      	movs	r3, #32
 8002106:	e003      	b.n	8002110 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	3301      	adds	r3, #1
 8002112:	069b      	lsls	r3, r3, #26
 8002114:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002120:	2b00      	cmp	r3, #0
 8002122:	d109      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x638>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	0e9b      	lsrs	r3, r3, #26
 800212a:	3301      	adds	r3, #1
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	2101      	movs	r1, #1
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	e017      	b.n	8002168 <HAL_ADC_ConfigChannel+0x668>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	61bb      	str	r3, [r7, #24]
  return result;
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002150:	2320      	movs	r3, #32
 8002152:	e003      	b.n	800215c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	3301      	adds	r3, #1
 800215e:	f003 031f 	and.w	r3, r3, #31
 8002162:	2101      	movs	r1, #1
 8002164:	fa01 f303 	lsl.w	r3, r1, r3
 8002168:	ea42 0103 	orr.w	r1, r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10d      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x694>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	0e9b      	lsrs	r3, r3, #26
 800217e:	3301      	adds	r3, #1
 8002180:	f003 021f 	and.w	r2, r3, #31
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	3b1e      	subs	r3, #30
 800218c:	051b      	lsls	r3, r3, #20
 800218e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002192:	e01d      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x6d0>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	60fb      	str	r3, [r7, #12]
  return result;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d103      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80021ac:	2320      	movs	r3, #32
 80021ae:	e005      	b.n	80021bc <HAL_ADC_ConfigChannel+0x6bc>
 80021b0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	3301      	adds	r3, #1
 80021be:	f003 021f 	and.w	r2, r3, #31
 80021c2:	4613      	mov	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	3b1e      	subs	r3, #30
 80021ca:	051b      	lsls	r3, r3, #20
 80021cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021d0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021d6:	4619      	mov	r1, r3
 80021d8:	f7ff fa66 	bl	80016a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b44      	ldr	r3, [pc, #272]	@ (80022f4 <HAL_ADC_ConfigChannel+0x7f4>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d07a      	beq.n	80022de <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021e8:	4843      	ldr	r0, [pc, #268]	@ (80022f8 <HAL_ADC_ConfigChannel+0x7f8>)
 80021ea:	f7ff f9bb 	bl	8001564 <LL_ADC_GetCommonPathInternalCh>
 80021ee:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a41      	ldr	r2, [pc, #260]	@ (80022fc <HAL_ADC_ConfigChannel+0x7fc>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d12c      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002200:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d126      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a3c      	ldr	r2, [pc, #240]	@ (8002300 <HAL_ADC_ConfigChannel+0x800>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d004      	beq.n	800221c <HAL_ADC_ConfigChannel+0x71c>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a3b      	ldr	r2, [pc, #236]	@ (8002304 <HAL_ADC_ConfigChannel+0x804>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d15d      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800221c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002220:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002224:	4619      	mov	r1, r3
 8002226:	4834      	ldr	r0, [pc, #208]	@ (80022f8 <HAL_ADC_ConfigChannel+0x7f8>)
 8002228:	f7ff f989 	bl	800153e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800222c:	4b36      	ldr	r3, [pc, #216]	@ (8002308 <HAL_ADC_ConfigChannel+0x808>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	099b      	lsrs	r3, r3, #6
 8002232:	4a36      	ldr	r2, [pc, #216]	@ (800230c <HAL_ADC_ConfigChannel+0x80c>)
 8002234:	fba2 2303 	umull	r2, r3, r2, r3
 8002238:	099b      	lsrs	r3, r3, #6
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002246:	e002      	b.n	800224e <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	3b01      	subs	r3, #1
 800224c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f9      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002254:	e040      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a2d      	ldr	r2, [pc, #180]	@ (8002310 <HAL_ADC_ConfigChannel+0x810>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d118      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002260:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002264:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d112      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a23      	ldr	r2, [pc, #140]	@ (8002300 <HAL_ADC_ConfigChannel+0x800>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d004      	beq.n	8002280 <HAL_ADC_ConfigChannel+0x780>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a22      	ldr	r2, [pc, #136]	@ (8002304 <HAL_ADC_ConfigChannel+0x804>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d12d      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002280:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002284:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002288:	4619      	mov	r1, r3
 800228a:	481b      	ldr	r0, [pc, #108]	@ (80022f8 <HAL_ADC_ConfigChannel+0x7f8>)
 800228c:	f7ff f957 	bl	800153e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002290:	e024      	b.n	80022dc <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a1f      	ldr	r2, [pc, #124]	@ (8002314 <HAL_ADC_ConfigChannel+0x814>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d120      	bne.n	80022de <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800229c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d11a      	bne.n	80022de <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a14      	ldr	r2, [pc, #80]	@ (8002300 <HAL_ADC_ConfigChannel+0x800>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d115      	bne.n	80022de <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022ba:	4619      	mov	r1, r3
 80022bc:	480e      	ldr	r0, [pc, #56]	@ (80022f8 <HAL_ADC_ConfigChannel+0x7f8>)
 80022be:	f7ff f93e 	bl	800153e <LL_ADC_SetCommonPathInternalCh>
 80022c2:	e00c      	b.n	80022de <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c8:	f043 0220 	orr.w	r2, r3, #32
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80022d6:	e002      	b.n	80022de <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022d8:	bf00      	nop
 80022da:	e000      	b.n	80022de <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80022e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	37d8      	adds	r7, #216	@ 0xd8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	80080000 	.word	0x80080000
 80022f8:	50040300 	.word	0x50040300
 80022fc:	c7520000 	.word	0xc7520000
 8002300:	50040000 	.word	0x50040000
 8002304:	50040200 	.word	0x50040200
 8002308:	20000000 	.word	0x20000000
 800230c:	053e2d63 	.word	0x053e2d63
 8002310:	cb840000 	.word	0xcb840000
 8002314:	80000001 	.word	0x80000001

08002318 <LL_ADC_IsEnabled>:
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <LL_ADC_IsEnabled+0x18>
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <LL_ADC_IsEnabled+0x1a>
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <LL_ADC_REG_IsConversionOngoing>:
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b04      	cmp	r3, #4
 8002350:	d101      	bne.n	8002356 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b0a1      	sub	sp, #132	@ 0x84
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800237e:	2302      	movs	r3, #2
 8002380:	e093      	b.n	80024aa <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800238a:	2300      	movs	r3, #0
 800238c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800238e:	2300      	movs	r3, #0
 8002390:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a47      	ldr	r2, [pc, #284]	@ (80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d102      	bne.n	80023a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800239c:	4b46      	ldr	r3, [pc, #280]	@ (80024b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	e001      	b.n	80023a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10b      	bne.n	80023c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b0:	f043 0220 	orr.w	r2, r3, #32
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e072      	b.n	80024aa <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ffb9 	bl	800233e <LL_ADC_REG_IsConversionOngoing>
 80023cc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff ffb3 	bl	800233e <LL_ADC_REG_IsConversionOngoing>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d154      	bne.n	8002488 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80023de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d151      	bne.n	8002488 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023e4:	4b35      	ldr	r3, [pc, #212]	@ (80024bc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80023e6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d02c      	beq.n	800244a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	6859      	ldr	r1, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002402:	035b      	lsls	r3, r3, #13
 8002404:	430b      	orrs	r3, r1
 8002406:	431a      	orrs	r2, r3
 8002408:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800240a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800240c:	4829      	ldr	r0, [pc, #164]	@ (80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800240e:	f7ff ff83 	bl	8002318 <LL_ADC_IsEnabled>
 8002412:	4604      	mov	r4, r0
 8002414:	4828      	ldr	r0, [pc, #160]	@ (80024b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002416:	f7ff ff7f 	bl	8002318 <LL_ADC_IsEnabled>
 800241a:	4603      	mov	r3, r0
 800241c:	431c      	orrs	r4, r3
 800241e:	4828      	ldr	r0, [pc, #160]	@ (80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002420:	f7ff ff7a 	bl	8002318 <LL_ADC_IsEnabled>
 8002424:	4603      	mov	r3, r0
 8002426:	4323      	orrs	r3, r4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d137      	bne.n	800249c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800242c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002434:	f023 030f 	bic.w	r3, r3, #15
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	6811      	ldr	r1, [r2, #0]
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	6892      	ldr	r2, [r2, #8]
 8002440:	430a      	orrs	r2, r1
 8002442:	431a      	orrs	r2, r3
 8002444:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002446:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002448:	e028      	b.n	800249c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800244a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002452:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002454:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002456:	4817      	ldr	r0, [pc, #92]	@ (80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002458:	f7ff ff5e 	bl	8002318 <LL_ADC_IsEnabled>
 800245c:	4604      	mov	r4, r0
 800245e:	4816      	ldr	r0, [pc, #88]	@ (80024b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002460:	f7ff ff5a 	bl	8002318 <LL_ADC_IsEnabled>
 8002464:	4603      	mov	r3, r0
 8002466:	431c      	orrs	r4, r3
 8002468:	4815      	ldr	r0, [pc, #84]	@ (80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800246a:	f7ff ff55 	bl	8002318 <LL_ADC_IsEnabled>
 800246e:	4603      	mov	r3, r0
 8002470:	4323      	orrs	r3, r4
 8002472:	2b00      	cmp	r3, #0
 8002474:	d112      	bne.n	800249c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002476:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800247e:	f023 030f 	bic.w	r3, r3, #15
 8002482:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002484:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002486:	e009      	b.n	800249c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248c:	f043 0220 	orr.w	r2, r3, #32
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800249a:	e000      	b.n	800249e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800249c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80024a6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3784      	adds	r7, #132	@ 0x84
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd90      	pop	{r4, r7, pc}
 80024b2:	bf00      	nop
 80024b4:	50040000 	.word	0x50040000
 80024b8:	50040100 	.word	0x50040100
 80024bc:	50040300 	.word	0x50040300
 80024c0:	50040200 	.word	0x50040200

080024c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e0ed      	b.n	80026b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d102      	bne.n	80024e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7fe fd8a 	bl	8000ffc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024f8:	f7ff f802 	bl	8001500 <HAL_GetTick>
 80024fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024fe:	e012      	b.n	8002526 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002500:	f7fe fffe 	bl	8001500 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b0a      	cmp	r3, #10
 800250c:	d90b      	bls.n	8002526 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002512:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2205      	movs	r2, #5
 800251e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e0c5      	b.n	80026b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0e5      	beq.n	8002500 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0202 	bic.w	r2, r2, #2
 8002542:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002544:	f7fe ffdc 	bl	8001500 <HAL_GetTick>
 8002548:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800254a:	e012      	b.n	8002572 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800254c:	f7fe ffd8 	bl	8001500 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b0a      	cmp	r3, #10
 8002558:	d90b      	bls.n	8002572 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2205      	movs	r2, #5
 800256a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e09f      	b.n	80026b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1e5      	bne.n	800254c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7e1b      	ldrb	r3, [r3, #24]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d108      	bne.n	800259a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	e007      	b.n	80025aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	7e5b      	ldrb	r3, [r3, #25]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d108      	bne.n	80025c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e007      	b.n	80025d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	7e9b      	ldrb	r3, [r3, #26]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d108      	bne.n	80025ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0220 	orr.w	r2, r2, #32
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	e007      	b.n	80025fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0220 	bic.w	r2, r2, #32
 80025fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7edb      	ldrb	r3, [r3, #27]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d108      	bne.n	8002618 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0210 	bic.w	r2, r2, #16
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e007      	b.n	8002628 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0210 	orr.w	r2, r2, #16
 8002626:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	7f1b      	ldrb	r3, [r3, #28]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d108      	bne.n	8002642 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0208 	orr.w	r2, r2, #8
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	e007      	b.n	8002652 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0208 	bic.w	r2, r2, #8
 8002650:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	7f5b      	ldrb	r3, [r3, #29]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d108      	bne.n	800266c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0204 	orr.w	r2, r2, #4
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e007      	b.n	800267c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0204 	bic.w	r2, r2, #4
 800267a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	ea42 0103 	orr.w	r1, r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	1e5a      	subs	r2, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d12e      	bne.n	800272c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2202      	movs	r2, #2
 80026d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0201 	bic.w	r2, r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026e6:	f7fe ff0b 	bl	8001500 <HAL_GetTick>
 80026ea:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026ec:	e012      	b.n	8002714 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026ee:	f7fe ff07 	bl	8001500 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b0a      	cmp	r3, #10
 80026fa:	d90b      	bls.n	8002714 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002700:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2205      	movs	r2, #5
 800270c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e012      	b.n	800273a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1e5      	bne.n	80026ee <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	e006      	b.n	800273a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002730:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
  }
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002754:	4b0c      	ldr	r3, [pc, #48]	@ (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002760:	4013      	ands	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800276c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002776:	4a04      	ldr	r2, [pc, #16]	@ (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	60d3      	str	r3, [r2, #12]
}
 800277c:	bf00      	nop
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002790:	4b04      	ldr	r3, [pc, #16]	@ (80027a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	f003 0307 	and.w	r3, r3, #7
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	db0b      	blt.n	80027d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	f003 021f 	and.w	r2, r3, #31
 80027c0:	4907      	ldr	r1, [pc, #28]	@ (80027e0 <__NVIC_EnableIRQ+0x38>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	2001      	movs	r0, #1
 80027ca:	fa00 f202 	lsl.w	r2, r0, r2
 80027ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000e100 	.word	0xe000e100

080027e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	db0a      	blt.n	800280e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	490c      	ldr	r1, [pc, #48]	@ (8002830 <__NVIC_SetPriority+0x4c>)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	0112      	lsls	r2, r2, #4
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	440b      	add	r3, r1
 8002808:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800280c:	e00a      	b.n	8002824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4908      	ldr	r1, [pc, #32]	@ (8002834 <__NVIC_SetPriority+0x50>)
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	3b04      	subs	r3, #4
 800281c:	0112      	lsls	r2, r2, #4
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	440b      	add	r3, r1
 8002822:	761a      	strb	r2, [r3, #24]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000e100 	.word	0xe000e100
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	@ 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f1c3 0307 	rsb	r3, r3, #7
 8002852:	2b04      	cmp	r3, #4
 8002854:	bf28      	it	cs
 8002856:	2304      	movcs	r3, #4
 8002858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3304      	adds	r3, #4
 800285e:	2b06      	cmp	r3, #6
 8002860:	d902      	bls.n	8002868 <NVIC_EncodePriority+0x30>
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3b03      	subs	r3, #3
 8002866:	e000      	b.n	800286a <NVIC_EncodePriority+0x32>
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	401a      	ands	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002880:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	43d9      	mvns	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	4313      	orrs	r3, r2
         );
}
 8002892:	4618      	mov	r0, r3
 8002894:	3724      	adds	r7, #36	@ 0x24
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff ff4c 	bl	8002744 <__NVIC_SetPriorityGrouping>
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028c6:	f7ff ff61 	bl	800278c <__NVIC_GetPriorityGrouping>
 80028ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	6978      	ldr	r0, [r7, #20]
 80028d2:	f7ff ffb1 	bl	8002838 <NVIC_EncodePriority>
 80028d6:	4602      	mov	r2, r0
 80028d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ff80 	bl	80027e4 <__NVIC_SetPriority>
}
 80028e4:	bf00      	nop
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff54 	bl	80027a8 <__NVIC_EnableIRQ>
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d008      	beq.n	8002932 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2204      	movs	r2, #4
 8002924:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e022      	b.n	8002978 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 020e 	bic.w	r2, r2, #14
 8002940:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0201 	bic.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002956:	f003 021c 	and.w	r2, r3, #28
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	2101      	movs	r1, #1
 8002960:	fa01 f202 	lsl.w	r2, r1, r2
 8002964:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002976:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d005      	beq.n	80029a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2204      	movs	r2, #4
 80029a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
 80029a6:	e029      	b.n	80029fc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 020e 	bic.w	r2, r2, #14
 80029b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0201 	bic.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029cc:	f003 021c 	and.w	r2, r3, #28
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d4:	2101      	movs	r1, #1
 80029d6:	fa01 f202 	lsl.w	r2, r1, r2
 80029da:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	4798      	blx	r3
    }
  }
  return status;
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a16:	e166      	b.n	8002ce6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	fa01 f303 	lsl.w	r3, r1, r3
 8002a24:	4013      	ands	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8158 	beq.w	8002ce0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d005      	beq.n	8002a48 <HAL_GPIO_Init+0x40>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d130      	bne.n	8002aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	2203      	movs	r2, #3
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a7e:	2201      	movs	r2, #1
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	091b      	lsrs	r3, r3, #4
 8002a94:	f003 0201 	and.w	r2, r3, #1
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d017      	beq.n	8002ae6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d123      	bne.n	8002b3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	08da      	lsrs	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3208      	adds	r2, #8
 8002afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	220f      	movs	r2, #15
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4013      	ands	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	08da      	lsrs	r2, r3, #3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3208      	adds	r2, #8
 8002b34:	6939      	ldr	r1, [r7, #16]
 8002b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	2203      	movs	r2, #3
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 0203 	and.w	r2, r3, #3
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 80b2 	beq.w	8002ce0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7c:	4b61      	ldr	r3, [pc, #388]	@ (8002d04 <HAL_GPIO_Init+0x2fc>)
 8002b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b80:	4a60      	ldr	r2, [pc, #384]	@ (8002d04 <HAL_GPIO_Init+0x2fc>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b88:	4b5e      	ldr	r3, [pc, #376]	@ (8002d04 <HAL_GPIO_Init+0x2fc>)
 8002b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b94:	4a5c      	ldr	r2, [pc, #368]	@ (8002d08 <HAL_GPIO_Init+0x300>)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	089b      	lsrs	r3, r3, #2
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	220f      	movs	r2, #15
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002bbe:	d02b      	beq.n	8002c18 <HAL_GPIO_Init+0x210>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a52      	ldr	r2, [pc, #328]	@ (8002d0c <HAL_GPIO_Init+0x304>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d025      	beq.n	8002c14 <HAL_GPIO_Init+0x20c>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a51      	ldr	r2, [pc, #324]	@ (8002d10 <HAL_GPIO_Init+0x308>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d01f      	beq.n	8002c10 <HAL_GPIO_Init+0x208>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a50      	ldr	r2, [pc, #320]	@ (8002d14 <HAL_GPIO_Init+0x30c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d019      	beq.n	8002c0c <HAL_GPIO_Init+0x204>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a4f      	ldr	r2, [pc, #316]	@ (8002d18 <HAL_GPIO_Init+0x310>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d013      	beq.n	8002c08 <HAL_GPIO_Init+0x200>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a4e      	ldr	r2, [pc, #312]	@ (8002d1c <HAL_GPIO_Init+0x314>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00d      	beq.n	8002c04 <HAL_GPIO_Init+0x1fc>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a4d      	ldr	r2, [pc, #308]	@ (8002d20 <HAL_GPIO_Init+0x318>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d007      	beq.n	8002c00 <HAL_GPIO_Init+0x1f8>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a4c      	ldr	r2, [pc, #304]	@ (8002d24 <HAL_GPIO_Init+0x31c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d101      	bne.n	8002bfc <HAL_GPIO_Init+0x1f4>
 8002bf8:	2307      	movs	r3, #7
 8002bfa:	e00e      	b.n	8002c1a <HAL_GPIO_Init+0x212>
 8002bfc:	2308      	movs	r3, #8
 8002bfe:	e00c      	b.n	8002c1a <HAL_GPIO_Init+0x212>
 8002c00:	2306      	movs	r3, #6
 8002c02:	e00a      	b.n	8002c1a <HAL_GPIO_Init+0x212>
 8002c04:	2305      	movs	r3, #5
 8002c06:	e008      	b.n	8002c1a <HAL_GPIO_Init+0x212>
 8002c08:	2304      	movs	r3, #4
 8002c0a:	e006      	b.n	8002c1a <HAL_GPIO_Init+0x212>
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e004      	b.n	8002c1a <HAL_GPIO_Init+0x212>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e002      	b.n	8002c1a <HAL_GPIO_Init+0x212>
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <HAL_GPIO_Init+0x212>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	f002 0203 	and.w	r2, r2, #3
 8002c20:	0092      	lsls	r2, r2, #2
 8002c22:	4093      	lsls	r3, r2
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c2a:	4937      	ldr	r1, [pc, #220]	@ (8002d08 <HAL_GPIO_Init+0x300>)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	3302      	adds	r3, #2
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c38:	4b3b      	ldr	r3, [pc, #236]	@ (8002d28 <HAL_GPIO_Init+0x320>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4013      	ands	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c5c:	4a32      	ldr	r2, [pc, #200]	@ (8002d28 <HAL_GPIO_Init+0x320>)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c62:	4b31      	ldr	r3, [pc, #196]	@ (8002d28 <HAL_GPIO_Init+0x320>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c86:	4a28      	ldr	r2, [pc, #160]	@ (8002d28 <HAL_GPIO_Init+0x320>)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c8c:	4b26      	ldr	r3, [pc, #152]	@ (8002d28 <HAL_GPIO_Init+0x320>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8002d28 <HAL_GPIO_Init+0x320>)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d28 <HAL_GPIO_Init+0x320>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cda:	4a13      	ldr	r2, [pc, #76]	@ (8002d28 <HAL_GPIO_Init+0x320>)
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f47f ae91 	bne.w	8002a18 <HAL_GPIO_Init+0x10>
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	bf00      	nop
 8002cfa:	371c      	adds	r7, #28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40010000 	.word	0x40010000
 8002d0c:	48000400 	.word	0x48000400
 8002d10:	48000800 	.word	0x48000800
 8002d14:	48000c00 	.word	0x48000c00
 8002d18:	48001000 	.word	0x48001000
 8002d1c:	48001400 	.word	0x48001400
 8002d20:	48001800 	.word	0x48001800
 8002d24:	48001c00 	.word	0x48001c00
 8002d28:	40010400 	.word	0x40010400

08002d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	807b      	strh	r3, [r7, #2]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d3c:	787b      	ldrb	r3, [r7, #1]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d42:	887a      	ldrh	r2, [r7, #2]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d48:	e002      	b.n	8002d50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d4a:	887a      	ldrh	r2, [r7, #2]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4013      	ands	r3, r2
 8002d74:	041a      	lsls	r2, r3, #16
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	43d9      	mvns	r1, r3
 8002d7a:	887b      	ldrh	r3, [r7, #2]
 8002d7c:	400b      	ands	r3, r1
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	619a      	str	r2, [r3, #24]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d9a:	4b08      	ldr	r3, [pc, #32]	@ (8002dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d006      	beq.n	8002db4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002da6:	4a05      	ldr	r2, [pc, #20]	@ (8002dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fd fd8e 	bl	80008d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40010400 	.word	0x40010400

08002dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e08d      	b.n	8002eee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fe f9ac 	bl	8001144 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2224      	movs	r2, #36	@ 0x24
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0201 	bic.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d107      	bne.n	8002e3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	e006      	b.n	8002e48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002e46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d108      	bne.n	8002e62 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	e007      	b.n	8002e72 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69d9      	ldr	r1, [r3, #28]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1a      	ldr	r2, [r3, #32]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	4608      	mov	r0, r1
 8002f02:	4611      	mov	r1, r2
 8002f04:	461a      	mov	r2, r3
 8002f06:	4603      	mov	r3, r0
 8002f08:	817b      	strh	r3, [r7, #10]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	813b      	strh	r3, [r7, #8]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	f040 80f9 	bne.w	8003112 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <HAL_I2C_Mem_Write+0x34>
 8002f26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d105      	bne.n	8002f38 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f32:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0ed      	b.n	8003114 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_I2C_Mem_Write+0x4e>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e0e6      	b.n	8003114 <HAL_I2C_Mem_Write+0x21c>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f4e:	f7fe fad7 	bl	8001500 <HAL_GetTick>
 8002f52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	2319      	movs	r3, #25
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fac3 	bl	80034ec <I2C_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0d1      	b.n	8003114 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2221      	movs	r2, #33	@ 0x21
 8002f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2240      	movs	r2, #64	@ 0x40
 8002f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a3a      	ldr	r2, [r7, #32]
 8002f8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f98:	88f8      	ldrh	r0, [r7, #6]
 8002f9a:	893a      	ldrh	r2, [r7, #8]
 8002f9c:	8979      	ldrh	r1, [r7, #10]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f9d3 	bl	8003354 <I2C_RequestMemoryWrite>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0a9      	b.n	8003114 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2bff      	cmp	r3, #255	@ 0xff
 8002fc8:	d90e      	bls.n	8002fe8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	22ff      	movs	r2, #255	@ 0xff
 8002fce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	8979      	ldrh	r1, [r7, #10]
 8002fd8:	2300      	movs	r3, #0
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 fc47 	bl	8003874 <I2C_TransferConfig>
 8002fe6:	e00f      	b.n	8003008 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	8979      	ldrh	r1, [r7, #10]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 fc36 	bl	8003874 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 fac6 	bl	800359e <I2C_WaitOnTXISFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e07b      	b.n	8003114 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	781a      	ldrb	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d034      	beq.n	80030c0 <HAL_I2C_Mem_Write+0x1c8>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800305a:	2b00      	cmp	r3, #0
 800305c:	d130      	bne.n	80030c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003064:	2200      	movs	r2, #0
 8003066:	2180      	movs	r1, #128	@ 0x80
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 fa3f 	bl	80034ec <I2C_WaitOnFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e04d      	b.n	8003114 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	2bff      	cmp	r3, #255	@ 0xff
 8003080:	d90e      	bls.n	80030a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	22ff      	movs	r2, #255	@ 0xff
 8003086:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800308c:	b2da      	uxtb	r2, r3
 800308e:	8979      	ldrh	r1, [r7, #10]
 8003090:	2300      	movs	r3, #0
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 fbeb 	bl	8003874 <I2C_TransferConfig>
 800309e:	e00f      	b.n	80030c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	8979      	ldrh	r1, [r7, #10]
 80030b2:	2300      	movs	r3, #0
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fbda 	bl	8003874 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d19e      	bne.n	8003008 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 faac 	bl	800362c <I2C_WaitOnSTOPFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e01a      	b.n	8003114 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2220      	movs	r2, #32
 80030e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6859      	ldr	r1, [r3, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4b0a      	ldr	r3, [pc, #40]	@ (800311c <HAL_I2C_Mem_Write+0x224>)
 80030f2:	400b      	ands	r3, r1
 80030f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	e000      	b.n	8003114 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003112:	2302      	movs	r3, #2
  }
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	fe00e800 	.word	0xfe00e800

08003120 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af02      	add	r7, sp, #8
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	4608      	mov	r0, r1
 800312a:	4611      	mov	r1, r2
 800312c:	461a      	mov	r2, r3
 800312e:	4603      	mov	r3, r0
 8003130:	817b      	strh	r3, [r7, #10]
 8003132:	460b      	mov	r3, r1
 8003134:	813b      	strh	r3, [r7, #8]
 8003136:	4613      	mov	r3, r2
 8003138:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b20      	cmp	r3, #32
 8003144:	f040 80fd 	bne.w	8003342 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <HAL_I2C_Mem_Read+0x34>
 800314e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003150:	2b00      	cmp	r3, #0
 8003152:	d105      	bne.n	8003160 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800315a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0f1      	b.n	8003344 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_I2C_Mem_Read+0x4e>
 800316a:	2302      	movs	r3, #2
 800316c:	e0ea      	b.n	8003344 <HAL_I2C_Mem_Read+0x224>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003176:	f7fe f9c3 	bl	8001500 <HAL_GetTick>
 800317a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	2319      	movs	r3, #25
 8003182:	2201      	movs	r2, #1
 8003184:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f9af 	bl	80034ec <I2C_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0d5      	b.n	8003344 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2222      	movs	r2, #34	@ 0x22
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2240      	movs	r2, #64	@ 0x40
 80031a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a3a      	ldr	r2, [r7, #32]
 80031b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80031b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031c0:	88f8      	ldrh	r0, [r7, #6]
 80031c2:	893a      	ldrh	r2, [r7, #8]
 80031c4:	8979      	ldrh	r1, [r7, #10]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	4603      	mov	r3, r0
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f913 	bl	80033fc <I2C_RequestMemoryRead>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0ad      	b.n	8003344 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2bff      	cmp	r3, #255	@ 0xff
 80031f0:	d90e      	bls.n	8003210 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2201      	movs	r2, #1
 80031f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	8979      	ldrh	r1, [r7, #10]
 8003200:	4b52      	ldr	r3, [pc, #328]	@ (800334c <HAL_I2C_Mem_Read+0x22c>)
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 fb33 	bl	8003874 <I2C_TransferConfig>
 800320e:	e00f      	b.n	8003230 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800321e:	b2da      	uxtb	r2, r3
 8003220:	8979      	ldrh	r1, [r7, #10]
 8003222:	4b4a      	ldr	r3, [pc, #296]	@ (800334c <HAL_I2C_Mem_Read+0x22c>)
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 fb22 	bl	8003874 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003236:	2200      	movs	r2, #0
 8003238:	2104      	movs	r1, #4
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f956 	bl	80034ec <I2C_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e07c      	b.n	8003344 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003272:	b29b      	uxth	r3, r3
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d034      	beq.n	80032f0 <HAL_I2C_Mem_Read+0x1d0>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328a:	2b00      	cmp	r3, #0
 800328c:	d130      	bne.n	80032f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003294:	2200      	movs	r2, #0
 8003296:	2180      	movs	r1, #128	@ 0x80
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f927 	bl	80034ec <I2C_WaitOnFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e04d      	b.n	8003344 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2bff      	cmp	r3, #255	@ 0xff
 80032b0:	d90e      	bls.n	80032d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	8979      	ldrh	r1, [r7, #10]
 80032c0:	2300      	movs	r3, #0
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 fad3 	bl	8003874 <I2C_TransferConfig>
 80032ce:	e00f      	b.n	80032f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	8979      	ldrh	r1, [r7, #10]
 80032e2:	2300      	movs	r3, #0
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 fac2 	bl	8003874 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d19a      	bne.n	8003230 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f994 	bl	800362c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e01a      	b.n	8003344 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2220      	movs	r2, #32
 8003314:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6859      	ldr	r1, [r3, #4]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <HAL_I2C_Mem_Read+0x230>)
 8003322:	400b      	ands	r3, r1
 8003324:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	e000      	b.n	8003344 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003342:	2302      	movs	r3, #2
  }
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	80002400 	.word	0x80002400
 8003350:	fe00e800 	.word	0xfe00e800

08003354 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	4608      	mov	r0, r1
 800335e:	4611      	mov	r1, r2
 8003360:	461a      	mov	r2, r3
 8003362:	4603      	mov	r3, r0
 8003364:	817b      	strh	r3, [r7, #10]
 8003366:	460b      	mov	r3, r1
 8003368:	813b      	strh	r3, [r7, #8]
 800336a:	4613      	mov	r3, r2
 800336c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	b2da      	uxtb	r2, r3
 8003372:	8979      	ldrh	r1, [r7, #10]
 8003374:	4b20      	ldr	r3, [pc, #128]	@ (80033f8 <I2C_RequestMemoryWrite+0xa4>)
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 fa79 	bl	8003874 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003382:	69fa      	ldr	r2, [r7, #28]
 8003384:	69b9      	ldr	r1, [r7, #24]
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f909 	bl	800359e <I2C_WaitOnTXISFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e02c      	b.n	80033f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003396:	88fb      	ldrh	r3, [r7, #6]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d105      	bne.n	80033a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800339c:	893b      	ldrh	r3, [r7, #8]
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80033a6:	e015      	b.n	80033d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033a8:	893b      	ldrh	r3, [r7, #8]
 80033aa:	0a1b      	lsrs	r3, r3, #8
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	69b9      	ldr	r1, [r7, #24]
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f8ef 	bl	800359e <I2C_WaitOnTXISFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e012      	b.n	80033f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033ca:	893b      	ldrh	r3, [r7, #8]
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2200      	movs	r2, #0
 80033dc:	2180      	movs	r1, #128	@ 0x80
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f884 	bl	80034ec <I2C_WaitOnFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	80002000 	.word	0x80002000

080033fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af02      	add	r7, sp, #8
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	4608      	mov	r0, r1
 8003406:	4611      	mov	r1, r2
 8003408:	461a      	mov	r2, r3
 800340a:	4603      	mov	r3, r0
 800340c:	817b      	strh	r3, [r7, #10]
 800340e:	460b      	mov	r3, r1
 8003410:	813b      	strh	r3, [r7, #8]
 8003412:	4613      	mov	r3, r2
 8003414:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	b2da      	uxtb	r2, r3
 800341a:	8979      	ldrh	r1, [r7, #10]
 800341c:	4b20      	ldr	r3, [pc, #128]	@ (80034a0 <I2C_RequestMemoryRead+0xa4>)
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	2300      	movs	r3, #0
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 fa26 	bl	8003874 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	69b9      	ldr	r1, [r7, #24]
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f8b6 	bl	800359e <I2C_WaitOnTXISFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e02c      	b.n	8003496 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d105      	bne.n	800344e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003442:	893b      	ldrh	r3, [r7, #8]
 8003444:	b2da      	uxtb	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	629a      	str	r2, [r3, #40]	@ 0x28
 800344c:	e015      	b.n	800347a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800344e:	893b      	ldrh	r3, [r7, #8]
 8003450:	0a1b      	lsrs	r3, r3, #8
 8003452:	b29b      	uxth	r3, r3
 8003454:	b2da      	uxtb	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	69b9      	ldr	r1, [r7, #24]
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 f89c 	bl	800359e <I2C_WaitOnTXISFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e012      	b.n	8003496 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003470:	893b      	ldrh	r3, [r7, #8]
 8003472:	b2da      	uxtb	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	2200      	movs	r2, #0
 8003482:	2140      	movs	r1, #64	@ 0x40
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f831 	bl	80034ec <I2C_WaitOnFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	80002000 	.word	0x80002000

080034a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d103      	bne.n	80034c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2200      	movs	r2, #0
 80034c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d007      	beq.n	80034e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699a      	ldr	r2, [r3, #24]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	619a      	str	r2, [r3, #24]
  }
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034fc:	e03b      	b.n	8003576 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	6839      	ldr	r1, [r7, #0]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f8d6 	bl	80036b4 <I2C_IsErrorOccurred>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e041      	b.n	8003596 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003518:	d02d      	beq.n	8003576 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351a:	f7fd fff1 	bl	8001500 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d302      	bcc.n	8003530 <I2C_WaitOnFlagUntilTimeout+0x44>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d122      	bne.n	8003576 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	4013      	ands	r3, r2
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	429a      	cmp	r2, r3
 800353e:	bf0c      	ite	eq
 8003540:	2301      	moveq	r3, #1
 8003542:	2300      	movne	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	429a      	cmp	r2, r3
 800354c:	d113      	bne.n	8003576 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003552:	f043 0220 	orr.w	r2, r3, #32
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e00f      	b.n	8003596 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699a      	ldr	r2, [r3, #24]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4013      	ands	r3, r2
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	429a      	cmp	r2, r3
 8003584:	bf0c      	ite	eq
 8003586:	2301      	moveq	r3, #1
 8003588:	2300      	movne	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	429a      	cmp	r2, r3
 8003592:	d0b4      	beq.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035aa:	e033      	b.n	8003614 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	68b9      	ldr	r1, [r7, #8]
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f87f 	bl	80036b4 <I2C_IsErrorOccurred>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e031      	b.n	8003624 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035c6:	d025      	beq.n	8003614 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c8:	f7fd ff9a 	bl	8001500 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d302      	bcc.n	80035de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d11a      	bne.n	8003614 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d013      	beq.n	8003614 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f0:	f043 0220 	orr.w	r2, r3, #32
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e007      	b.n	8003624 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b02      	cmp	r3, #2
 8003620:	d1c4      	bne.n	80035ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003638:	e02f      	b.n	800369a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f838 	bl	80036b4 <I2C_IsErrorOccurred>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e02d      	b.n	80036aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364e:	f7fd ff57 	bl	8001500 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	429a      	cmp	r2, r3
 800365c:	d302      	bcc.n	8003664 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d11a      	bne.n	800369a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b20      	cmp	r3, #32
 8003670:	d013      	beq.n	800369a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e007      	b.n	80036aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d1c8      	bne.n	800363a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	@ 0x28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036ce:	2300      	movs	r3, #0
 80036d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	f003 0310 	and.w	r3, r3, #16
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d068      	beq.n	80037b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2210      	movs	r2, #16
 80036e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036e8:	e049      	b.n	800377e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036f0:	d045      	beq.n	800377e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036f2:	f7fd ff05 	bl	8001500 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d302      	bcc.n	8003708 <I2C_IsErrorOccurred+0x54>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d13a      	bne.n	800377e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003712:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800371a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003726:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800372a:	d121      	bne.n	8003770 <I2C_IsErrorOccurred+0xbc>
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003732:	d01d      	beq.n	8003770 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003734:	7cfb      	ldrb	r3, [r7, #19]
 8003736:	2b20      	cmp	r3, #32
 8003738:	d01a      	beq.n	8003770 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003748:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800374a:	f7fd fed9 	bl	8001500 <HAL_GetTick>
 800374e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003750:	e00e      	b.n	8003770 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003752:	f7fd fed5 	bl	8001500 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b19      	cmp	r3, #25
 800375e:	d907      	bls.n	8003770 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	f043 0320 	orr.w	r3, r3, #32
 8003766:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800376e:	e006      	b.n	800377e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b20      	cmp	r3, #32
 800377c:	d1e9      	bne.n	8003752 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b20      	cmp	r3, #32
 800378a:	d003      	beq.n	8003794 <I2C_IsErrorOccurred+0xe0>
 800378c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0aa      	beq.n	80036ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003798:	2b00      	cmp	r3, #0
 800379a:	d103      	bne.n	80037a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2220      	movs	r2, #32
 80037a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	f043 0304 	orr.w	r3, r3, #4
 80037aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	f043 0308 	orr.w	r3, r3, #8
 80037ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00b      	beq.n	8003820 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	f043 0302 	orr.w	r3, r3, #2
 800380e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003818:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01c      	beq.n	8003862 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f7ff fe3b 	bl	80034a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4b0d      	ldr	r3, [pc, #52]	@ (8003870 <I2C_IsErrorOccurred+0x1bc>)
 800383a:	400b      	ands	r3, r1
 800383c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	431a      	orrs	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003862:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003866:	4618      	mov	r0, r3
 8003868:	3728      	adds	r7, #40	@ 0x28
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	fe00e800 	.word	0xfe00e800

08003874 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	607b      	str	r3, [r7, #4]
 800387e:	460b      	mov	r3, r1
 8003880:	817b      	strh	r3, [r7, #10]
 8003882:	4613      	mov	r3, r2
 8003884:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003886:	897b      	ldrh	r3, [r7, #10]
 8003888:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800388c:	7a7b      	ldrb	r3, [r7, #9]
 800388e:	041b      	lsls	r3, r3, #16
 8003890:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003894:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	4313      	orrs	r3, r2
 800389e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	0d5b      	lsrs	r3, r3, #21
 80038ae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80038b2:	4b08      	ldr	r3, [pc, #32]	@ (80038d4 <I2C_TransferConfig+0x60>)
 80038b4:	430b      	orrs	r3, r1
 80038b6:	43db      	mvns	r3, r3
 80038b8:	ea02 0103 	and.w	r1, r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038c6:	bf00      	nop
 80038c8:	371c      	adds	r7, #28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	03ff63ff 	.word	0x03ff63ff

080038d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d138      	bne.n	8003960 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e032      	b.n	8003962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2224      	movs	r2, #36	@ 0x24
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0201 	bic.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800392a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6819      	ldr	r1, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	e000      	b.n	8003962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003960:	2302      	movs	r3, #2
  }
}
 8003962:	4618      	mov	r0, r3
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800396e:	b480      	push	{r7}
 8003970:	b085      	sub	sp, #20
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b20      	cmp	r3, #32
 8003982:	d139      	bne.n	80039f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800398e:	2302      	movs	r3, #2
 8003990:	e033      	b.n	80039fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2224      	movs	r2, #36	@ 0x24
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	e000      	b.n	80039fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039f8:	2302      	movs	r3, #2
  }
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a0c:	4b04      	ldr	r3, [pc, #16]	@ (8003a20 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40007000 	.word	0x40007000

08003a24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a32:	d130      	bne.n	8003a96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a34:	4b23      	ldr	r3, [pc, #140]	@ (8003ac4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a40:	d038      	beq.n	8003ab4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a42:	4b20      	ldr	r3, [pc, #128]	@ (8003ac4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ac4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a50:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a52:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2232      	movs	r2, #50	@ 0x32
 8003a58:	fb02 f303 	mul.w	r3, r2, r3
 8003a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003acc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	0c9b      	lsrs	r3, r3, #18
 8003a64:	3301      	adds	r3, #1
 8003a66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a68:	e002      	b.n	8003a70 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a70:	4b14      	ldr	r3, [pc, #80]	@ (8003ac4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a7c:	d102      	bne.n	8003a84 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1f2      	bne.n	8003a6a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a84:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a90:	d110      	bne.n	8003ab4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e00f      	b.n	8003ab6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a96:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa2:	d007      	beq.n	8003ab4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003aa4:	4b07      	ldr	r3, [pc, #28]	@ (8003ac4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003aac:	4a05      	ldr	r2, [pc, #20]	@ (8003ac4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ab2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40007000 	.word	0x40007000
 8003ac8:	20000000 	.word	0x20000000
 8003acc:	431bde83 	.word	0x431bde83

08003ad0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d102      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f000 bc08 	b.w	80042f4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ae4:	4b96      	ldr	r3, [pc, #600]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 030c 	and.w	r3, r3, #12
 8003aec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aee:	4b94      	ldr	r3, [pc, #592]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80e4 	beq.w	8003cce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <HAL_RCC_OscConfig+0x4c>
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2b0c      	cmp	r3, #12
 8003b10:	f040 808b 	bne.w	8003c2a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	f040 8087 	bne.w	8003c2a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b1c:	4b88      	ldr	r3, [pc, #544]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_OscConfig+0x64>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e3df      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1a      	ldr	r2, [r3, #32]
 8003b38:	4b81      	ldr	r3, [pc, #516]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d004      	beq.n	8003b4e <HAL_RCC_OscConfig+0x7e>
 8003b44:	4b7e      	ldr	r3, [pc, #504]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b4c:	e005      	b.n	8003b5a <HAL_RCC_OscConfig+0x8a>
 8003b4e:	4b7c      	ldr	r3, [pc, #496]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b54:	091b      	lsrs	r3, r3, #4
 8003b56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d223      	bcs.n	8003ba6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fdc4 	bl	80046f0 <RCC_SetFlashLatencyFromMSIRange>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e3c0      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b72:	4b73      	ldr	r3, [pc, #460]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a72      	ldr	r2, [pc, #456]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b78:	f043 0308 	orr.w	r3, r3, #8
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	4b70      	ldr	r3, [pc, #448]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	496d      	ldr	r1, [pc, #436]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b90:	4b6b      	ldr	r3, [pc, #428]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	4968      	ldr	r1, [pc, #416]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	604b      	str	r3, [r1, #4]
 8003ba4:	e025      	b.n	8003bf2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ba6:	4b66      	ldr	r3, [pc, #408]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a65      	ldr	r2, [pc, #404]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003bac:	f043 0308 	orr.w	r3, r3, #8
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	4b63      	ldr	r3, [pc, #396]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	4960      	ldr	r1, [pc, #384]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bc4:	4b5e      	ldr	r3, [pc, #376]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	495b      	ldr	r1, [pc, #364]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fd84 	bl	80046f0 <RCC_SetFlashLatencyFromMSIRange>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e380      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bf2:	f000 fc87 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	4b51      	ldr	r3, [pc, #324]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	091b      	lsrs	r3, r3, #4
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	4950      	ldr	r1, [pc, #320]	@ (8003d44 <HAL_RCC_OscConfig+0x274>)
 8003c04:	5ccb      	ldrb	r3, [r1, r3]
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0e:	4a4e      	ldr	r2, [pc, #312]	@ (8003d48 <HAL_RCC_OscConfig+0x278>)
 8003c10:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c12:	4b4e      	ldr	r3, [pc, #312]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fd fb5a 	bl	80012d0 <HAL_InitTick>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d052      	beq.n	8003ccc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	e364      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d032      	beq.n	8003c98 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c32:	4b43      	ldr	r3, [pc, #268]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a42      	ldr	r2, [pc, #264]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c38:	f043 0301 	orr.w	r3, r3, #1
 8003c3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c3e:	f7fd fc5f 	bl	8001500 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c46:	f7fd fc5b 	bl	8001500 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e34d      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c58:	4b39      	ldr	r3, [pc, #228]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0f0      	beq.n	8003c46 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c64:	4b36      	ldr	r3, [pc, #216]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a35      	ldr	r2, [pc, #212]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c6a:	f043 0308 	orr.w	r3, r3, #8
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	4b33      	ldr	r3, [pc, #204]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	4930      	ldr	r1, [pc, #192]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c82:	4b2f      	ldr	r3, [pc, #188]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	492b      	ldr	r1, [pc, #172]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	604b      	str	r3, [r1, #4]
 8003c96:	e01a      	b.n	8003cce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c98:	4b29      	ldr	r3, [pc, #164]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a28      	ldr	r2, [pc, #160]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ca4:	f7fd fc2c 	bl	8001500 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cac:	f7fd fc28 	bl	8001500 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e31a      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cbe:	4b20      	ldr	r3, [pc, #128]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x1dc>
 8003cca:	e000      	b.n	8003cce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ccc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d073      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d005      	beq.n	8003cec <HAL_RCC_OscConfig+0x21c>
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b0c      	cmp	r3, #12
 8003ce4:	d10e      	bne.n	8003d04 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d10b      	bne.n	8003d04 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cec:	4b14      	ldr	r3, [pc, #80]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d063      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x2f0>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d15f      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e2f7      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d0c:	d106      	bne.n	8003d1c <HAL_RCC_OscConfig+0x24c>
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a0b      	ldr	r2, [pc, #44]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	e025      	b.n	8003d68 <HAL_RCC_OscConfig+0x298>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d24:	d114      	bne.n	8003d50 <HAL_RCC_OscConfig+0x280>
 8003d26:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a05      	ldr	r2, [pc, #20]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	4b03      	ldr	r3, [pc, #12]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a02      	ldr	r2, [pc, #8]	@ (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	e013      	b.n	8003d68 <HAL_RCC_OscConfig+0x298>
 8003d40:	40021000 	.word	0x40021000
 8003d44:	08009f18 	.word	0x08009f18
 8003d48:	20000000 	.word	0x20000000
 8003d4c:	20000004 	.word	0x20000004
 8003d50:	4ba0      	ldr	r3, [pc, #640]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a9f      	ldr	r2, [pc, #636]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	4b9d      	ldr	r3, [pc, #628]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a9c      	ldr	r2, [pc, #624]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003d62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d013      	beq.n	8003d98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fd fbc6 	bl	8001500 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d78:	f7fd fbc2 	bl	8001500 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	@ 0x64
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e2b4      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d8a:	4b92      	ldr	r3, [pc, #584]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x2a8>
 8003d96:	e014      	b.n	8003dc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d98:	f7fd fbb2 	bl	8001500 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da0:	f7fd fbae 	bl	8001500 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b64      	cmp	r3, #100	@ 0x64
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e2a0      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003db2:	4b88      	ldr	r3, [pc, #544]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f0      	bne.n	8003da0 <HAL_RCC_OscConfig+0x2d0>
 8003dbe:	e000      	b.n	8003dc2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d060      	beq.n	8003e90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d005      	beq.n	8003de0 <HAL_RCC_OscConfig+0x310>
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2b0c      	cmp	r3, #12
 8003dd8:	d119      	bne.n	8003e0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d116      	bne.n	8003e0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003de0:	4b7c      	ldr	r3, [pc, #496]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_RCC_OscConfig+0x328>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e27d      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df8:	4b76      	ldr	r3, [pc, #472]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	061b      	lsls	r3, r3, #24
 8003e06:	4973      	ldr	r1, [pc, #460]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e0c:	e040      	b.n	8003e90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d023      	beq.n	8003e5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e16:	4b6f      	ldr	r3, [pc, #444]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a6e      	ldr	r2, [pc, #440]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e22:	f7fd fb6d 	bl	8001500 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e2a:	f7fd fb69 	bl	8001500 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e25b      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e3c:	4b65      	ldr	r3, [pc, #404]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0f0      	beq.n	8003e2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e48:	4b62      	ldr	r3, [pc, #392]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	061b      	lsls	r3, r3, #24
 8003e56:	495f      	ldr	r1, [pc, #380]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	604b      	str	r3, [r1, #4]
 8003e5c:	e018      	b.n	8003e90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e5e:	4b5d      	ldr	r3, [pc, #372]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a5c      	ldr	r2, [pc, #368]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003e64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6a:	f7fd fb49 	bl	8001500 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e72:	f7fd fb45 	bl	8001500 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e237      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e84:	4b53      	ldr	r3, [pc, #332]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1f0      	bne.n	8003e72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d03c      	beq.n	8003f16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01c      	beq.n	8003ede <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ea4:	4b4b      	ldr	r3, [pc, #300]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eaa:	4a4a      	ldr	r2, [pc, #296]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003eac:	f043 0301 	orr.w	r3, r3, #1
 8003eb0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb4:	f7fd fb24 	bl	8001500 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ebc:	f7fd fb20 	bl	8001500 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e212      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ece:	4b41      	ldr	r3, [pc, #260]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0ef      	beq.n	8003ebc <HAL_RCC_OscConfig+0x3ec>
 8003edc:	e01b      	b.n	8003f16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ede:	4b3d      	ldr	r3, [pc, #244]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ee4:	4a3b      	ldr	r2, [pc, #236]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003ee6:	f023 0301 	bic.w	r3, r3, #1
 8003eea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eee:	f7fd fb07 	bl	8001500 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef6:	f7fd fb03 	bl	8001500 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e1f5      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f08:	4b32      	ldr	r3, [pc, #200]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1ef      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 80a6 	beq.w	8004070 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f24:	2300      	movs	r3, #0
 8003f26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f28:	4b2a      	ldr	r3, [pc, #168]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10d      	bne.n	8003f50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f34:	4b27      	ldr	r3, [pc, #156]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f38:	4a26      	ldr	r2, [pc, #152]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f40:	4b24      	ldr	r3, [pc, #144]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f50:	4b21      	ldr	r3, [pc, #132]	@ (8003fd8 <HAL_RCC_OscConfig+0x508>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d118      	bne.n	8003f8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd8 <HAL_RCC_OscConfig+0x508>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd8 <HAL_RCC_OscConfig+0x508>)
 8003f62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f68:	f7fd faca 	bl	8001500 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f70:	f7fd fac6 	bl	8001500 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e1b8      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f82:	4b15      	ldr	r3, [pc, #84]	@ (8003fd8 <HAL_RCC_OscConfig+0x508>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d108      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x4d8>
 8003f96:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fa6:	e029      	b.n	8003ffc <HAL_RCC_OscConfig+0x52c>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b05      	cmp	r3, #5
 8003fae:	d115      	bne.n	8003fdc <HAL_RCC_OscConfig+0x50c>
 8003fb0:	4b08      	ldr	r3, [pc, #32]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb6:	4a07      	ldr	r2, [pc, #28]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003fb8:	f043 0304 	orr.w	r3, r3, #4
 8003fbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fc0:	4b04      	ldr	r3, [pc, #16]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc6:	4a03      	ldr	r2, [pc, #12]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fd0:	e014      	b.n	8003ffc <HAL_RCC_OscConfig+0x52c>
 8003fd2:	bf00      	nop
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40007000 	.word	0x40007000
 8003fdc:	4b9d      	ldr	r3, [pc, #628]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe2:	4a9c      	ldr	r2, [pc, #624]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 8003fe4:	f023 0301 	bic.w	r3, r3, #1
 8003fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fec:	4b99      	ldr	r3, [pc, #612]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff2:	4a98      	ldr	r2, [pc, #608]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 8003ff4:	f023 0304 	bic.w	r3, r3, #4
 8003ff8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d016      	beq.n	8004032 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004004:	f7fd fa7c 	bl	8001500 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800400a:	e00a      	b.n	8004022 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400c:	f7fd fa78 	bl	8001500 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800401a:	4293      	cmp	r3, r2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e168      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004022:	4b8c      	ldr	r3, [pc, #560]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0ed      	beq.n	800400c <HAL_RCC_OscConfig+0x53c>
 8004030:	e015      	b.n	800405e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004032:	f7fd fa65 	bl	8001500 <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004038:	e00a      	b.n	8004050 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403a:	f7fd fa61 	bl	8001500 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004048:	4293      	cmp	r3, r2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e151      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004050:	4b80      	ldr	r3, [pc, #512]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1ed      	bne.n	800403a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800405e:	7ffb      	ldrb	r3, [r7, #31]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d105      	bne.n	8004070 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004064:	4b7b      	ldr	r3, [pc, #492]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 8004066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004068:	4a7a      	ldr	r2, [pc, #488]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 800406a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800406e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b00      	cmp	r3, #0
 800407a:	d03c      	beq.n	80040f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	2b00      	cmp	r3, #0
 8004082:	d01c      	beq.n	80040be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004084:	4b73      	ldr	r3, [pc, #460]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 8004086:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800408a:	4a72      	ldr	r2, [pc, #456]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004094:	f7fd fa34 	bl	8001500 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800409c:	f7fd fa30 	bl	8001500 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e122      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040ae:	4b69      	ldr	r3, [pc, #420]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 80040b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0ef      	beq.n	800409c <HAL_RCC_OscConfig+0x5cc>
 80040bc:	e01b      	b.n	80040f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040be:	4b65      	ldr	r3, [pc, #404]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 80040c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040c4:	4a63      	ldr	r2, [pc, #396]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ce:	f7fd fa17 	bl	8001500 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040d6:	f7fd fa13 	bl	8001500 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e105      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040e8:	4b5a      	ldr	r3, [pc, #360]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 80040ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1ef      	bne.n	80040d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 80f9 	beq.w	80042f2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004104:	2b02      	cmp	r3, #2
 8004106:	f040 80cf 	bne.w	80042a8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800410a:	4b52      	ldr	r3, [pc, #328]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f003 0203 	and.w	r2, r3, #3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411a:	429a      	cmp	r2, r3
 800411c:	d12c      	bne.n	8004178 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004128:	3b01      	subs	r3, #1
 800412a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800412c:	429a      	cmp	r2, r3
 800412e:	d123      	bne.n	8004178 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800413a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800413c:	429a      	cmp	r2, r3
 800413e:	d11b      	bne.n	8004178 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d113      	bne.n	8004178 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415a:	085b      	lsrs	r3, r3, #1
 800415c:	3b01      	subs	r3, #1
 800415e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004160:	429a      	cmp	r2, r3
 8004162:	d109      	bne.n	8004178 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	085b      	lsrs	r3, r3, #1
 8004170:	3b01      	subs	r3, #1
 8004172:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004174:	429a      	cmp	r2, r3
 8004176:	d071      	beq.n	800425c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b0c      	cmp	r3, #12
 800417c:	d068      	beq.n	8004250 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800417e:	4b35      	ldr	r3, [pc, #212]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d105      	bne.n	8004196 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800418a:	4b32      	ldr	r3, [pc, #200]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e0ac      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800419a:	4b2e      	ldr	r3, [pc, #184]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a2d      	ldr	r2, [pc, #180]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 80041a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041a6:	f7fd f9ab 	bl	8001500 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ae:	f7fd f9a7 	bl	8001500 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e099      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c0:	4b24      	ldr	r3, [pc, #144]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f0      	bne.n	80041ae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041cc:	4b21      	ldr	r3, [pc, #132]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	4b21      	ldr	r3, [pc, #132]	@ (8004258 <HAL_RCC_OscConfig+0x788>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80041dc:	3a01      	subs	r2, #1
 80041de:	0112      	lsls	r2, r2, #4
 80041e0:	4311      	orrs	r1, r2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80041e6:	0212      	lsls	r2, r2, #8
 80041e8:	4311      	orrs	r1, r2
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041ee:	0852      	lsrs	r2, r2, #1
 80041f0:	3a01      	subs	r2, #1
 80041f2:	0552      	lsls	r2, r2, #21
 80041f4:	4311      	orrs	r1, r2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80041fa:	0852      	lsrs	r2, r2, #1
 80041fc:	3a01      	subs	r2, #1
 80041fe:	0652      	lsls	r2, r2, #25
 8004200:	4311      	orrs	r1, r2
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004206:	06d2      	lsls	r2, r2, #27
 8004208:	430a      	orrs	r2, r1
 800420a:	4912      	ldr	r1, [pc, #72]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 800420c:	4313      	orrs	r3, r2
 800420e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004210:	4b10      	ldr	r3, [pc, #64]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a0f      	ldr	r2, [pc, #60]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 8004216:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800421a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800421c:	4b0d      	ldr	r3, [pc, #52]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4a0c      	ldr	r2, [pc, #48]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 8004222:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004226:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004228:	f7fd f96a 	bl	8001500 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004230:	f7fd f966 	bl	8001500 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e058      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004242:	4b04      	ldr	r3, [pc, #16]	@ (8004254 <HAL_RCC_OscConfig+0x784>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800424e:	e050      	b.n	80042f2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e04f      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
 8004254:	40021000 	.word	0x40021000
 8004258:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800425c:	4b27      	ldr	r3, [pc, #156]	@ (80042fc <HAL_RCC_OscConfig+0x82c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d144      	bne.n	80042f2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004268:	4b24      	ldr	r3, [pc, #144]	@ (80042fc <HAL_RCC_OscConfig+0x82c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a23      	ldr	r2, [pc, #140]	@ (80042fc <HAL_RCC_OscConfig+0x82c>)
 800426e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004272:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004274:	4b21      	ldr	r3, [pc, #132]	@ (80042fc <HAL_RCC_OscConfig+0x82c>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4a20      	ldr	r2, [pc, #128]	@ (80042fc <HAL_RCC_OscConfig+0x82c>)
 800427a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800427e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004280:	f7fd f93e 	bl	8001500 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004288:	f7fd f93a 	bl	8001500 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e02c      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800429a:	4b18      	ldr	r3, [pc, #96]	@ (80042fc <HAL_RCC_OscConfig+0x82c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0x7b8>
 80042a6:	e024      	b.n	80042f2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	2b0c      	cmp	r3, #12
 80042ac:	d01f      	beq.n	80042ee <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ae:	4b13      	ldr	r3, [pc, #76]	@ (80042fc <HAL_RCC_OscConfig+0x82c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a12      	ldr	r2, [pc, #72]	@ (80042fc <HAL_RCC_OscConfig+0x82c>)
 80042b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ba:	f7fd f921 	bl	8001500 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c2:	f7fd f91d 	bl	8001500 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e00f      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042d4:	4b09      	ldr	r3, [pc, #36]	@ (80042fc <HAL_RCC_OscConfig+0x82c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1f0      	bne.n	80042c2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80042e0:	4b06      	ldr	r3, [pc, #24]	@ (80042fc <HAL_RCC_OscConfig+0x82c>)
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	4905      	ldr	r1, [pc, #20]	@ (80042fc <HAL_RCC_OscConfig+0x82c>)
 80042e6:	4b06      	ldr	r3, [pc, #24]	@ (8004300 <HAL_RCC_OscConfig+0x830>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	60cb      	str	r3, [r1, #12]
 80042ec:	e001      	b.n	80042f2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3720      	adds	r7, #32
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40021000 	.word	0x40021000
 8004300:	feeefffc 	.word	0xfeeefffc

08004304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e0e7      	b.n	80044e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004318:	4b75      	ldr	r3, [pc, #468]	@ (80044f0 <HAL_RCC_ClockConfig+0x1ec>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d910      	bls.n	8004348 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004326:	4b72      	ldr	r3, [pc, #456]	@ (80044f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f023 0207 	bic.w	r2, r3, #7
 800432e:	4970      	ldr	r1, [pc, #448]	@ (80044f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	4313      	orrs	r3, r2
 8004334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004336:	4b6e      	ldr	r3, [pc, #440]	@ (80044f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d001      	beq.n	8004348 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e0cf      	b.n	80044e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d010      	beq.n	8004376 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	4b66      	ldr	r3, [pc, #408]	@ (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004360:	429a      	cmp	r2, r3
 8004362:	d908      	bls.n	8004376 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004364:	4b63      	ldr	r3, [pc, #396]	@ (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	4960      	ldr	r1, [pc, #384]	@ (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004372:	4313      	orrs	r3, r2
 8004374:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d04c      	beq.n	800441c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b03      	cmp	r3, #3
 8004388:	d107      	bne.n	800439a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800438a:	4b5a      	ldr	r3, [pc, #360]	@ (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d121      	bne.n	80043da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e0a6      	b.n	80044e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d107      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043a2:	4b54      	ldr	r3, [pc, #336]	@ (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d115      	bne.n	80043da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e09a      	b.n	80044e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d107      	bne.n	80043ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043ba:	4b4e      	ldr	r3, [pc, #312]	@ (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e08e      	b.n	80044e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043ca:	4b4a      	ldr	r3, [pc, #296]	@ (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e086      	b.n	80044e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043da:	4b46      	ldr	r3, [pc, #280]	@ (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f023 0203 	bic.w	r2, r3, #3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	4943      	ldr	r1, [pc, #268]	@ (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ec:	f7fd f888 	bl	8001500 <HAL_GetTick>
 80043f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f2:	e00a      	b.n	800440a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f4:	f7fd f884 	bl	8001500 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e06e      	b.n	80044e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440a:	4b3a      	ldr	r3, [pc, #232]	@ (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 020c 	and.w	r2, r3, #12
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	429a      	cmp	r2, r3
 800441a:	d1eb      	bne.n	80043f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d010      	beq.n	800444a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	4b31      	ldr	r3, [pc, #196]	@ (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004434:	429a      	cmp	r2, r3
 8004436:	d208      	bcs.n	800444a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004438:	4b2e      	ldr	r3, [pc, #184]	@ (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	492b      	ldr	r1, [pc, #172]	@ (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800444a:	4b29      	ldr	r3, [pc, #164]	@ (80044f0 <HAL_RCC_ClockConfig+0x1ec>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d210      	bcs.n	800447a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004458:	4b25      	ldr	r3, [pc, #148]	@ (80044f0 <HAL_RCC_ClockConfig+0x1ec>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f023 0207 	bic.w	r2, r3, #7
 8004460:	4923      	ldr	r1, [pc, #140]	@ (80044f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	4313      	orrs	r3, r2
 8004466:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004468:	4b21      	ldr	r3, [pc, #132]	@ (80044f0 <HAL_RCC_ClockConfig+0x1ec>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d001      	beq.n	800447a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e036      	b.n	80044e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b00      	cmp	r3, #0
 8004484:	d008      	beq.n	8004498 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004486:	4b1b      	ldr	r3, [pc, #108]	@ (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	4918      	ldr	r1, [pc, #96]	@ (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004494:	4313      	orrs	r3, r2
 8004496:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d009      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044a4:	4b13      	ldr	r3, [pc, #76]	@ (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	4910      	ldr	r1, [pc, #64]	@ (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044b8:	f000 f824 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 80044bc:	4602      	mov	r2, r0
 80044be:	4b0d      	ldr	r3, [pc, #52]	@ (80044f4 <HAL_RCC_ClockConfig+0x1f0>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	091b      	lsrs	r3, r3, #4
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	490b      	ldr	r1, [pc, #44]	@ (80044f8 <HAL_RCC_ClockConfig+0x1f4>)
 80044ca:	5ccb      	ldrb	r3, [r1, r3]
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
 80044d4:	4a09      	ldr	r2, [pc, #36]	@ (80044fc <HAL_RCC_ClockConfig+0x1f8>)
 80044d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044d8:	4b09      	ldr	r3, [pc, #36]	@ (8004500 <HAL_RCC_ClockConfig+0x1fc>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fc fef7 	bl	80012d0 <HAL_InitTick>
 80044e2:	4603      	mov	r3, r0
 80044e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80044e6:	7afb      	ldrb	r3, [r7, #11]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40022000 	.word	0x40022000
 80044f4:	40021000 	.word	0x40021000
 80044f8:	08009f18 	.word	0x08009f18
 80044fc:	20000000 	.word	0x20000000
 8004500:	20000004 	.word	0x20000004

08004504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004504:	b480      	push	{r7}
 8004506:	b089      	sub	sp, #36	@ 0x24
 8004508:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]
 800450e:	2300      	movs	r3, #0
 8004510:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004512:	4b3e      	ldr	r3, [pc, #248]	@ (800460c <HAL_RCC_GetSysClockFreq+0x108>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800451c:	4b3b      	ldr	r3, [pc, #236]	@ (800460c <HAL_RCC_GetSysClockFreq+0x108>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_RCC_GetSysClockFreq+0x34>
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2b0c      	cmp	r3, #12
 8004530:	d121      	bne.n	8004576 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d11e      	bne.n	8004576 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004538:	4b34      	ldr	r3, [pc, #208]	@ (800460c <HAL_RCC_GetSysClockFreq+0x108>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b00      	cmp	r3, #0
 8004542:	d107      	bne.n	8004554 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004544:	4b31      	ldr	r3, [pc, #196]	@ (800460c <HAL_RCC_GetSysClockFreq+0x108>)
 8004546:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800454a:	0a1b      	lsrs	r3, r3, #8
 800454c:	f003 030f 	and.w	r3, r3, #15
 8004550:	61fb      	str	r3, [r7, #28]
 8004552:	e005      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004554:	4b2d      	ldr	r3, [pc, #180]	@ (800460c <HAL_RCC_GetSysClockFreq+0x108>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004560:	4a2b      	ldr	r2, [pc, #172]	@ (8004610 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004568:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10d      	bne.n	800458c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004574:	e00a      	b.n	800458c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	2b04      	cmp	r3, #4
 800457a:	d102      	bne.n	8004582 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800457c:	4b25      	ldr	r3, [pc, #148]	@ (8004614 <HAL_RCC_GetSysClockFreq+0x110>)
 800457e:	61bb      	str	r3, [r7, #24]
 8004580:	e004      	b.n	800458c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	2b08      	cmp	r3, #8
 8004586:	d101      	bne.n	800458c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004588:	4b23      	ldr	r3, [pc, #140]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x114>)
 800458a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	2b0c      	cmp	r3, #12
 8004590:	d134      	bne.n	80045fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004592:	4b1e      	ldr	r3, [pc, #120]	@ (800460c <HAL_RCC_GetSysClockFreq+0x108>)
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d003      	beq.n	80045aa <HAL_RCC_GetSysClockFreq+0xa6>
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d003      	beq.n	80045b0 <HAL_RCC_GetSysClockFreq+0xac>
 80045a8:	e005      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80045aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004614 <HAL_RCC_GetSysClockFreq+0x110>)
 80045ac:	617b      	str	r3, [r7, #20]
      break;
 80045ae:	e005      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80045b0:	4b19      	ldr	r3, [pc, #100]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x114>)
 80045b2:	617b      	str	r3, [r7, #20]
      break;
 80045b4:	e002      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	617b      	str	r3, [r7, #20]
      break;
 80045ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045bc:	4b13      	ldr	r3, [pc, #76]	@ (800460c <HAL_RCC_GetSysClockFreq+0x108>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	091b      	lsrs	r3, r3, #4
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	3301      	adds	r3, #1
 80045c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045ca:	4b10      	ldr	r3, [pc, #64]	@ (800460c <HAL_RCC_GetSysClockFreq+0x108>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	0a1b      	lsrs	r3, r3, #8
 80045d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	fb03 f202 	mul.w	r2, r3, r2
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045e2:	4b0a      	ldr	r3, [pc, #40]	@ (800460c <HAL_RCC_GetSysClockFreq+0x108>)
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	0e5b      	lsrs	r3, r3, #25
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	3301      	adds	r3, #1
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045fc:	69bb      	ldr	r3, [r7, #24]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3724      	adds	r7, #36	@ 0x24
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40021000 	.word	0x40021000
 8004610:	08009f30 	.word	0x08009f30
 8004614:	00f42400 	.word	0x00f42400
 8004618:	007a1200 	.word	0x007a1200

0800461c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004620:	4b03      	ldr	r3, [pc, #12]	@ (8004630 <HAL_RCC_GetHCLKFreq+0x14>)
 8004622:	681b      	ldr	r3, [r3, #0]
}
 8004624:	4618      	mov	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000000 	.word	0x20000000

08004634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004638:	f7ff fff0 	bl	800461c <HAL_RCC_GetHCLKFreq>
 800463c:	4602      	mov	r2, r0
 800463e:	4b06      	ldr	r3, [pc, #24]	@ (8004658 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	0a1b      	lsrs	r3, r3, #8
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	4904      	ldr	r1, [pc, #16]	@ (800465c <HAL_RCC_GetPCLK1Freq+0x28>)
 800464a:	5ccb      	ldrb	r3, [r1, r3]
 800464c:	f003 031f 	and.w	r3, r3, #31
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004654:	4618      	mov	r0, r3
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40021000 	.word	0x40021000
 800465c:	08009f28 	.word	0x08009f28

08004660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004664:	f7ff ffda 	bl	800461c <HAL_RCC_GetHCLKFreq>
 8004668:	4602      	mov	r2, r0
 800466a:	4b06      	ldr	r3, [pc, #24]	@ (8004684 <HAL_RCC_GetPCLK2Freq+0x24>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	0adb      	lsrs	r3, r3, #11
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	4904      	ldr	r1, [pc, #16]	@ (8004688 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004676:	5ccb      	ldrb	r3, [r1, r3]
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004680:	4618      	mov	r0, r3
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40021000 	.word	0x40021000
 8004688:	08009f28 	.word	0x08009f28

0800468c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	220f      	movs	r2, #15
 800469a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800469c:	4b12      	ldr	r3, [pc, #72]	@ (80046e8 <HAL_RCC_GetClockConfig+0x5c>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 0203 	and.w	r2, r3, #3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80046a8:	4b0f      	ldr	r3, [pc, #60]	@ (80046e8 <HAL_RCC_GetClockConfig+0x5c>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80046b4:	4b0c      	ldr	r3, [pc, #48]	@ (80046e8 <HAL_RCC_GetClockConfig+0x5c>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80046c0:	4b09      	ldr	r3, [pc, #36]	@ (80046e8 <HAL_RCC_GetClockConfig+0x5c>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	08db      	lsrs	r3, r3, #3
 80046c6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80046ce:	4b07      	ldr	r3, [pc, #28]	@ (80046ec <HAL_RCC_GetClockConfig+0x60>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0207 	and.w	r2, r3, #7
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	601a      	str	r2, [r3, #0]
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000
 80046ec:	40022000 	.word	0x40022000

080046f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80046f8:	2300      	movs	r3, #0
 80046fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80046fc:	4b2a      	ldr	r3, [pc, #168]	@ (80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004708:	f7ff f97e 	bl	8003a08 <HAL_PWREx_GetVoltageRange>
 800470c:	6178      	str	r0, [r7, #20]
 800470e:	e014      	b.n	800473a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004710:	4b25      	ldr	r3, [pc, #148]	@ (80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004714:	4a24      	ldr	r2, [pc, #144]	@ (80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800471a:	6593      	str	r3, [r2, #88]	@ 0x58
 800471c:	4b22      	ldr	r3, [pc, #136]	@ (80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800471e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004728:	f7ff f96e 	bl	8003a08 <HAL_PWREx_GetVoltageRange>
 800472c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800472e:	4b1e      	ldr	r3, [pc, #120]	@ (80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004732:	4a1d      	ldr	r2, [pc, #116]	@ (80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004738:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004740:	d10b      	bne.n	800475a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b80      	cmp	r3, #128	@ 0x80
 8004746:	d919      	bls.n	800477c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2ba0      	cmp	r3, #160	@ 0xa0
 800474c:	d902      	bls.n	8004754 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800474e:	2302      	movs	r3, #2
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	e013      	b.n	800477c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004754:	2301      	movs	r3, #1
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	e010      	b.n	800477c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b80      	cmp	r3, #128	@ 0x80
 800475e:	d902      	bls.n	8004766 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004760:	2303      	movs	r3, #3
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	e00a      	b.n	800477c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b80      	cmp	r3, #128	@ 0x80
 800476a:	d102      	bne.n	8004772 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800476c:	2302      	movs	r3, #2
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	e004      	b.n	800477c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b70      	cmp	r3, #112	@ 0x70
 8004776:	d101      	bne.n	800477c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004778:	2301      	movs	r3, #1
 800477a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800477c:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f023 0207 	bic.w	r2, r3, #7
 8004784:	4909      	ldr	r1, [pc, #36]	@ (80047ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800478c:	4b07      	ldr	r3, [pc, #28]	@ (80047ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	429a      	cmp	r2, r3
 8004798:	d001      	beq.n	800479e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40021000 	.word	0x40021000
 80047ac:	40022000 	.word	0x40022000

080047b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047b8:	2300      	movs	r3, #0
 80047ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047bc:	2300      	movs	r3, #0
 80047be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d041      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80047d4:	d02a      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80047d6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80047da:	d824      	bhi.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047e0:	d008      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80047e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047e6:	d81e      	bhi.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80047ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047f0:	d010      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80047f2:	e018      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047f4:	4b86      	ldr	r3, [pc, #536]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4a85      	ldr	r2, [pc, #532]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004800:	e015      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3304      	adds	r3, #4
 8004806:	2100      	movs	r1, #0
 8004808:	4618      	mov	r0, r3
 800480a:	f000 facd 	bl	8004da8 <RCCEx_PLLSAI1_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004812:	e00c      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3320      	adds	r3, #32
 8004818:	2100      	movs	r1, #0
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fbb6 	bl	8004f8c <RCCEx_PLLSAI2_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004824:	e003      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	74fb      	strb	r3, [r7, #19]
      break;
 800482a:	e000      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800482c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800482e:	7cfb      	ldrb	r3, [r7, #19]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10b      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004834:	4b76      	ldr	r3, [pc, #472]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004842:	4973      	ldr	r1, [pc, #460]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800484a:	e001      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484c:	7cfb      	ldrb	r3, [r7, #19]
 800484e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d041      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004860:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004864:	d02a      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004866:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800486a:	d824      	bhi.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800486c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004870:	d008      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004872:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004876:	d81e      	bhi.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800487c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004880:	d010      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004882:	e018      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004884:	4b62      	ldr	r3, [pc, #392]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	4a61      	ldr	r2, [pc, #388]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800488a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800488e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004890:	e015      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3304      	adds	r3, #4
 8004896:	2100      	movs	r1, #0
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fa85 	bl	8004da8 <RCCEx_PLLSAI1_Config>
 800489e:	4603      	mov	r3, r0
 80048a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048a2:	e00c      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3320      	adds	r3, #32
 80048a8:	2100      	movs	r1, #0
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fb6e 	bl	8004f8c <RCCEx_PLLSAI2_Config>
 80048b0:	4603      	mov	r3, r0
 80048b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048b4:	e003      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	74fb      	strb	r3, [r7, #19]
      break;
 80048ba:	e000      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80048bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048be:	7cfb      	ldrb	r3, [r7, #19]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10b      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048c4:	4b52      	ldr	r3, [pc, #328]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048d2:	494f      	ldr	r1, [pc, #316]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80048da:	e001      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048dc:	7cfb      	ldrb	r3, [r7, #19]
 80048de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 80a0 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ee:	2300      	movs	r3, #0
 80048f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048f2:	4b47      	ldr	r3, [pc, #284]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004902:	2300      	movs	r3, #0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00d      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004908:	4b41      	ldr	r3, [pc, #260]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490c:	4a40      	ldr	r2, [pc, #256]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800490e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004912:	6593      	str	r3, [r2, #88]	@ 0x58
 8004914:	4b3e      	ldr	r3, [pc, #248]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004920:	2301      	movs	r3, #1
 8004922:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004924:	4b3b      	ldr	r3, [pc, #236]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a3a      	ldr	r2, [pc, #232]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800492a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800492e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004930:	f7fc fde6 	bl	8001500 <HAL_GetTick>
 8004934:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004936:	e009      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004938:	f7fc fde2 	bl	8001500 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d902      	bls.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	74fb      	strb	r3, [r7, #19]
        break;
 800494a:	e005      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800494c:	4b31      	ldr	r3, [pc, #196]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0ef      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004958:	7cfb      	ldrb	r3, [r7, #19]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d15c      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800495e:	4b2c      	ldr	r3, [pc, #176]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004964:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004968:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01f      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	429a      	cmp	r2, r3
 800497a:	d019      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800497c:	4b24      	ldr	r3, [pc, #144]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004986:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004988:	4b21      	ldr	r3, [pc, #132]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800498a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498e:	4a20      	ldr	r2, [pc, #128]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004994:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004998:	4b1d      	ldr	r3, [pc, #116]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800499e:	4a1c      	ldr	r2, [pc, #112]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049a8:	4a19      	ldr	r2, [pc, #100]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d016      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ba:	f7fc fda1 	bl	8001500 <HAL_GetTick>
 80049be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049c0:	e00b      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c2:	f7fc fd9d 	bl	8001500 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d902      	bls.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	74fb      	strb	r3, [r7, #19]
            break;
 80049d8:	e006      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049da:	4b0d      	ldr	r3, [pc, #52]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0ec      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80049e8:	7cfb      	ldrb	r3, [r7, #19]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049ee:	4b08      	ldr	r3, [pc, #32]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fe:	4904      	ldr	r1, [pc, #16]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a06:	e009      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a08:	7cfb      	ldrb	r3, [r7, #19]
 8004a0a:	74bb      	strb	r3, [r7, #18]
 8004a0c:	e006      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a0e:	bf00      	nop
 8004a10:	40021000 	.word	0x40021000
 8004a14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a18:	7cfb      	ldrb	r3, [r7, #19]
 8004a1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a1c:	7c7b      	ldrb	r3, [r7, #17]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d105      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a22:	4ba6      	ldr	r3, [pc, #664]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a26:	4aa5      	ldr	r2, [pc, #660]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a3a:	4ba0      	ldr	r3, [pc, #640]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a40:	f023 0203 	bic.w	r2, r3, #3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a48:	499c      	ldr	r1, [pc, #624]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a5c:	4b97      	ldr	r3, [pc, #604]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a62:	f023 020c 	bic.w	r2, r3, #12
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a6a:	4994      	ldr	r1, [pc, #592]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a7e:	4b8f      	ldr	r3, [pc, #572]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a84:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8c:	498b      	ldr	r1, [pc, #556]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00a      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004aa0:	4b86      	ldr	r3, [pc, #536]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aae:	4983      	ldr	r1, [pc, #524]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ac2:	4b7e      	ldr	r3, [pc, #504]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ad0:	497a      	ldr	r1, [pc, #488]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ae4:	4b75      	ldr	r3, [pc, #468]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004af2:	4972      	ldr	r1, [pc, #456]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b06:	4b6d      	ldr	r3, [pc, #436]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b14:	4969      	ldr	r1, [pc, #420]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b28:	4b64      	ldr	r3, [pc, #400]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b36:	4961      	ldr	r1, [pc, #388]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b4a:	4b5c      	ldr	r3, [pc, #368]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b50:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b58:	4958      	ldr	r1, [pc, #352]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b6c:	4b53      	ldr	r3, [pc, #332]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b72:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b7a:	4950      	ldr	r1, [pc, #320]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b8e:	4b4b      	ldr	r3, [pc, #300]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b94:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9c:	4947      	ldr	r1, [pc, #284]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bb0:	4b42      	ldr	r3, [pc, #264]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004bb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bb6:	f023 0203 	bic.w	r2, r3, #3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bbe:	493f      	ldr	r1, [pc, #252]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d028      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be0:	4936      	ldr	r1, [pc, #216]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bf0:	d106      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bf2:	4b32      	ldr	r3, [pc, #200]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	4a31      	ldr	r2, [pc, #196]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004bf8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bfc:	60d3      	str	r3, [r2, #12]
 8004bfe:	e011      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c08:	d10c      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	2101      	movs	r1, #1
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 f8c9 	bl	8004da8 <RCCEx_PLLSAI1_Config>
 8004c16:	4603      	mov	r3, r0
 8004c18:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c1a:	7cfb      	ldrb	r3, [r7, #19]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004c20:	7cfb      	ldrb	r3, [r7, #19]
 8004c22:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d028      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c30:	4b22      	ldr	r3, [pc, #136]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c3e:	491f      	ldr	r1, [pc, #124]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c4e:	d106      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c50:	4b1a      	ldr	r3, [pc, #104]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	4a19      	ldr	r2, [pc, #100]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c5a:	60d3      	str	r3, [r2, #12]
 8004c5c:	e011      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c66:	d10c      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 f89a 	bl	8004da8 <RCCEx_PLLSAI1_Config>
 8004c74:	4603      	mov	r3, r0
 8004c76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c78:	7cfb      	ldrb	r3, [r7, #19]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004c7e:	7cfb      	ldrb	r3, [r7, #19]
 8004c80:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d02a      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c94:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c9c:	4907      	ldr	r1, [pc, #28]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ca8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cac:	d108      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cae:	4b03      	ldr	r3, [pc, #12]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	4a02      	ldr	r2, [pc, #8]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004cb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cb8:	60d3      	str	r3, [r2, #12]
 8004cba:	e013      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004cbc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cc8:	d10c      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	3304      	adds	r3, #4
 8004cce:	2101      	movs	r1, #1
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 f869 	bl	8004da8 <RCCEx_PLLSAI1_Config>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cda:	7cfb      	ldrb	r3, [r7, #19]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004ce0:	7cfb      	ldrb	r3, [r7, #19]
 8004ce2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d02f      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cfe:	4929      	ldr	r1, [pc, #164]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d0e:	d10d      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3304      	adds	r3, #4
 8004d14:	2102      	movs	r1, #2
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 f846 	bl	8004da8 <RCCEx_PLLSAI1_Config>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d014      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004d26:	7cfb      	ldrb	r3, [r7, #19]
 8004d28:	74bb      	strb	r3, [r7, #18]
 8004d2a:	e011      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d34:	d10c      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3320      	adds	r3, #32
 8004d3a:	2102      	movs	r1, #2
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 f925 	bl	8004f8c <RCCEx_PLLSAI2_Config>
 8004d42:	4603      	mov	r3, r0
 8004d44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d46:	7cfb      	ldrb	r3, [r7, #19]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004d4c:	7cfb      	ldrb	r3, [r7, #19]
 8004d4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00b      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d5c:	4b11      	ldr	r3, [pc, #68]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d62:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d6c:	490d      	ldr	r1, [pc, #52]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00b      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d80:	4b08      	ldr	r3, [pc, #32]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d86:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d90:	4904      	ldr	r1, [pc, #16]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d98:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	40021000 	.word	0x40021000

08004da8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004db6:	4b74      	ldr	r3, [pc, #464]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d018      	beq.n	8004df4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004dc2:	4b71      	ldr	r3, [pc, #452]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f003 0203 	and.w	r2, r3, #3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d10d      	bne.n	8004dee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
       ||
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d009      	beq.n	8004dee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004dda:	4b6b      	ldr	r3, [pc, #428]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	091b      	lsrs	r3, r3, #4
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	1c5a      	adds	r2, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
       ||
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d047      	beq.n	8004e7e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	73fb      	strb	r3, [r7, #15]
 8004df2:	e044      	b.n	8004e7e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	d018      	beq.n	8004e2e <RCCEx_PLLSAI1_Config+0x86>
 8004dfc:	2b03      	cmp	r3, #3
 8004dfe:	d825      	bhi.n	8004e4c <RCCEx_PLLSAI1_Config+0xa4>
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d002      	beq.n	8004e0a <RCCEx_PLLSAI1_Config+0x62>
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d009      	beq.n	8004e1c <RCCEx_PLLSAI1_Config+0x74>
 8004e08:	e020      	b.n	8004e4c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e0a:	4b5f      	ldr	r3, [pc, #380]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d11d      	bne.n	8004e52 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e1a:	e01a      	b.n	8004e52 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e1c:	4b5a      	ldr	r3, [pc, #360]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d116      	bne.n	8004e56 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e2c:	e013      	b.n	8004e56 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e2e:	4b56      	ldr	r3, [pc, #344]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10f      	bne.n	8004e5a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e3a:	4b53      	ldr	r3, [pc, #332]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e4a:	e006      	b.n	8004e5a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e50:	e004      	b.n	8004e5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e52:	bf00      	nop
 8004e54:	e002      	b.n	8004e5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e56:	bf00      	nop
 8004e58:	e000      	b.n	8004e5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10d      	bne.n	8004e7e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e62:	4b49      	ldr	r3, [pc, #292]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6819      	ldr	r1, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	430b      	orrs	r3, r1
 8004e78:	4943      	ldr	r1, [pc, #268]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d17c      	bne.n	8004f7e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e84:	4b40      	ldr	r3, [pc, #256]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a3f      	ldr	r2, [pc, #252]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e90:	f7fc fb36 	bl	8001500 <HAL_GetTick>
 8004e94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e96:	e009      	b.n	8004eac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e98:	f7fc fb32 	bl	8001500 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d902      	bls.n	8004eac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	73fb      	strb	r3, [r7, #15]
        break;
 8004eaa:	e005      	b.n	8004eb8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004eac:	4b36      	ldr	r3, [pc, #216]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1ef      	bne.n	8004e98 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d15f      	bne.n	8004f7e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d110      	bne.n	8004ee6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ec4:	4b30      	ldr	r3, [pc, #192]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004ecc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6892      	ldr	r2, [r2, #8]
 8004ed4:	0211      	lsls	r1, r2, #8
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	68d2      	ldr	r2, [r2, #12]
 8004eda:	06d2      	lsls	r2, r2, #27
 8004edc:	430a      	orrs	r2, r1
 8004ede:	492a      	ldr	r1, [pc, #168]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	610b      	str	r3, [r1, #16]
 8004ee4:	e027      	b.n	8004f36 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d112      	bne.n	8004f12 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004eec:	4b26      	ldr	r3, [pc, #152]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004ef4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6892      	ldr	r2, [r2, #8]
 8004efc:	0211      	lsls	r1, r2, #8
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6912      	ldr	r2, [r2, #16]
 8004f02:	0852      	lsrs	r2, r2, #1
 8004f04:	3a01      	subs	r2, #1
 8004f06:	0552      	lsls	r2, r2, #21
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	491f      	ldr	r1, [pc, #124]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	610b      	str	r3, [r1, #16]
 8004f10:	e011      	b.n	8004f36 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f12:	4b1d      	ldr	r3, [pc, #116]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f1a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6892      	ldr	r2, [r2, #8]
 8004f22:	0211      	lsls	r1, r2, #8
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6952      	ldr	r2, [r2, #20]
 8004f28:	0852      	lsrs	r2, r2, #1
 8004f2a:	3a01      	subs	r2, #1
 8004f2c:	0652      	lsls	r2, r2, #25
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	4915      	ldr	r1, [pc, #84]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f36:	4b14      	ldr	r3, [pc, #80]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a13      	ldr	r2, [pc, #76]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f40:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f42:	f7fc fadd 	bl	8001500 <HAL_GetTick>
 8004f46:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f48:	e009      	b.n	8004f5e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f4a:	f7fc fad9 	bl	8001500 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d902      	bls.n	8004f5e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	73fb      	strb	r3, [r7, #15]
          break;
 8004f5c:	e005      	b.n	8004f6a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0ef      	beq.n	8004f4a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d106      	bne.n	8004f7e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f70:	4b05      	ldr	r3, [pc, #20]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	4903      	ldr	r1, [pc, #12]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40021000 	.word	0x40021000

08004f8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f9a:	4b69      	ldr	r3, [pc, #420]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f003 0303 	and.w	r3, r3, #3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d018      	beq.n	8004fd8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fa6:	4b66      	ldr	r3, [pc, #408]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f003 0203 	and.w	r2, r3, #3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d10d      	bne.n	8004fd2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
       ||
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d009      	beq.n	8004fd2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004fbe:	4b60      	ldr	r3, [pc, #384]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	091b      	lsrs	r3, r3, #4
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
       ||
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d047      	beq.n	8005062 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	73fb      	strb	r3, [r7, #15]
 8004fd6:	e044      	b.n	8005062 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d018      	beq.n	8005012 <RCCEx_PLLSAI2_Config+0x86>
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	d825      	bhi.n	8005030 <RCCEx_PLLSAI2_Config+0xa4>
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d002      	beq.n	8004fee <RCCEx_PLLSAI2_Config+0x62>
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d009      	beq.n	8005000 <RCCEx_PLLSAI2_Config+0x74>
 8004fec:	e020      	b.n	8005030 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fee:	4b54      	ldr	r3, [pc, #336]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d11d      	bne.n	8005036 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ffe:	e01a      	b.n	8005036 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005000:	4b4f      	ldr	r3, [pc, #316]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005008:	2b00      	cmp	r3, #0
 800500a:	d116      	bne.n	800503a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005010:	e013      	b.n	800503a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005012:	4b4b      	ldr	r3, [pc, #300]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10f      	bne.n	800503e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800501e:	4b48      	ldr	r3, [pc, #288]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800502e:	e006      	b.n	800503e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	73fb      	strb	r3, [r7, #15]
      break;
 8005034:	e004      	b.n	8005040 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005036:	bf00      	nop
 8005038:	e002      	b.n	8005040 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800503a:	bf00      	nop
 800503c:	e000      	b.n	8005040 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800503e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10d      	bne.n	8005062 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005046:	4b3e      	ldr	r3, [pc, #248]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6819      	ldr	r1, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	3b01      	subs	r3, #1
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	430b      	orrs	r3, r1
 800505c:	4938      	ldr	r1, [pc, #224]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 800505e:	4313      	orrs	r3, r2
 8005060:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005062:	7bfb      	ldrb	r3, [r7, #15]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d166      	bne.n	8005136 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005068:	4b35      	ldr	r3, [pc, #212]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a34      	ldr	r2, [pc, #208]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 800506e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005072:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005074:	f7fc fa44 	bl	8001500 <HAL_GetTick>
 8005078:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800507a:	e009      	b.n	8005090 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800507c:	f7fc fa40 	bl	8001500 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d902      	bls.n	8005090 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	73fb      	strb	r3, [r7, #15]
        break;
 800508e:	e005      	b.n	800509c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005090:	4b2b      	ldr	r3, [pc, #172]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1ef      	bne.n	800507c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d149      	bne.n	8005136 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d110      	bne.n	80050ca <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050a8:	4b25      	ldr	r3, [pc, #148]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80050b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6892      	ldr	r2, [r2, #8]
 80050b8:	0211      	lsls	r1, r2, #8
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	68d2      	ldr	r2, [r2, #12]
 80050be:	06d2      	lsls	r2, r2, #27
 80050c0:	430a      	orrs	r2, r1
 80050c2:	491f      	ldr	r1, [pc, #124]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	614b      	str	r3, [r1, #20]
 80050c8:	e011      	b.n	80050ee <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80050d2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6892      	ldr	r2, [r2, #8]
 80050da:	0211      	lsls	r1, r2, #8
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6912      	ldr	r2, [r2, #16]
 80050e0:	0852      	lsrs	r2, r2, #1
 80050e2:	3a01      	subs	r2, #1
 80050e4:	0652      	lsls	r2, r2, #25
 80050e6:	430a      	orrs	r2, r1
 80050e8:	4915      	ldr	r1, [pc, #84]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80050ee:	4b14      	ldr	r3, [pc, #80]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a13      	ldr	r2, [pc, #76]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050fa:	f7fc fa01 	bl	8001500 <HAL_GetTick>
 80050fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005100:	e009      	b.n	8005116 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005102:	f7fc f9fd 	bl	8001500 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d902      	bls.n	8005116 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	73fb      	strb	r3, [r7, #15]
          break;
 8005114:	e005      	b.n	8005122 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005116:	4b0a      	ldr	r3, [pc, #40]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0ef      	beq.n	8005102 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d106      	bne.n	8005136 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005128:	4b05      	ldr	r3, [pc, #20]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 800512a:	695a      	ldr	r2, [r3, #20]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	4903      	ldr	r1, [pc, #12]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005132:	4313      	orrs	r3, r2
 8005134:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005136:	7bfb      	ldrb	r3, [r7, #15]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40021000 	.word	0x40021000

08005144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e049      	b.n	80051ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f841 	bl	80051f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3304      	adds	r3, #4
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f000 f9e0 	bl	8005548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b01      	cmp	r3, #1
 800521a:	d001      	beq.n	8005220 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e04f      	b.n	80052c0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0201 	orr.w	r2, r2, #1
 8005236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a23      	ldr	r2, [pc, #140]	@ (80052cc <HAL_TIM_Base_Start_IT+0xc4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d01d      	beq.n	800527e <HAL_TIM_Base_Start_IT+0x76>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800524a:	d018      	beq.n	800527e <HAL_TIM_Base_Start_IT+0x76>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a1f      	ldr	r2, [pc, #124]	@ (80052d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d013      	beq.n	800527e <HAL_TIM_Base_Start_IT+0x76>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1e      	ldr	r2, [pc, #120]	@ (80052d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00e      	beq.n	800527e <HAL_TIM_Base_Start_IT+0x76>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a1c      	ldr	r2, [pc, #112]	@ (80052d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d009      	beq.n	800527e <HAL_TIM_Base_Start_IT+0x76>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a1b      	ldr	r2, [pc, #108]	@ (80052dc <HAL_TIM_Base_Start_IT+0xd4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d004      	beq.n	800527e <HAL_TIM_Base_Start_IT+0x76>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a19      	ldr	r2, [pc, #100]	@ (80052e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d115      	bne.n	80052aa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	4b17      	ldr	r3, [pc, #92]	@ (80052e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005286:	4013      	ands	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b06      	cmp	r3, #6
 800528e:	d015      	beq.n	80052bc <HAL_TIM_Base_Start_IT+0xb4>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005296:	d011      	beq.n	80052bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a8:	e008      	b.n	80052bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0201 	orr.w	r2, r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	e000      	b.n	80052be <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	40012c00 	.word	0x40012c00
 80052d0:	40000400 	.word	0x40000400
 80052d4:	40000800 	.word	0x40000800
 80052d8:	40000c00 	.word	0x40000c00
 80052dc:	40013400 	.word	0x40013400
 80052e0:	40014000 	.word	0x40014000
 80052e4:	00010007 	.word	0x00010007

080052e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d020      	beq.n	800534c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01b      	beq.n	800534c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0202 	mvn.w	r2, #2
 800531c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f8e9 	bl	800550a <HAL_TIM_IC_CaptureCallback>
 8005338:	e005      	b.n	8005346 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f8db 	bl	80054f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f8ec 	bl	800551e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b00      	cmp	r3, #0
 8005354:	d020      	beq.n	8005398 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01b      	beq.n	8005398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0204 	mvn.w	r2, #4
 8005368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2202      	movs	r2, #2
 800536e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f8c3 	bl	800550a <HAL_TIM_IC_CaptureCallback>
 8005384:	e005      	b.n	8005392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f8b5 	bl	80054f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f8c6 	bl	800551e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d020      	beq.n	80053e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f003 0308 	and.w	r3, r3, #8
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01b      	beq.n	80053e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0208 	mvn.w	r2, #8
 80053b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2204      	movs	r2, #4
 80053ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f89d 	bl	800550a <HAL_TIM_IC_CaptureCallback>
 80053d0:	e005      	b.n	80053de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f88f 	bl	80054f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f8a0 	bl	800551e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 0310 	and.w	r3, r3, #16
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d020      	beq.n	8005430 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d01b      	beq.n	8005430 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0210 	mvn.w	r2, #16
 8005400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2208      	movs	r2, #8
 8005406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f877 	bl	800550a <HAL_TIM_IC_CaptureCallback>
 800541c:	e005      	b.n	800542a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f869 	bl	80054f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f87a 	bl	800551e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00c      	beq.n	8005454 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d007      	beq.n	8005454 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f06f 0201 	mvn.w	r2, #1
 800544c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fb fd3a 	bl	8000ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800545a:	2b00      	cmp	r3, #0
 800545c:	d104      	bne.n	8005468 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00c      	beq.n	8005482 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546e:	2b00      	cmp	r3, #0
 8005470:	d007      	beq.n	8005482 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800547a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f913 	bl	80056a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00c      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800549e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f90b 	bl	80056bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00c      	beq.n	80054ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f834 	bl	8005532 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f003 0320 	and.w	r3, r3, #32
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00c      	beq.n	80054ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d007      	beq.n	80054ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f06f 0220 	mvn.w	r2, #32
 80054e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f8d3 	bl	8005694 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ee:	bf00      	nop
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
	...

08005548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a46      	ldr	r2, [pc, #280]	@ (8005674 <TIM_Base_SetConfig+0x12c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d013      	beq.n	8005588 <TIM_Base_SetConfig+0x40>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005566:	d00f      	beq.n	8005588 <TIM_Base_SetConfig+0x40>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a43      	ldr	r2, [pc, #268]	@ (8005678 <TIM_Base_SetConfig+0x130>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00b      	beq.n	8005588 <TIM_Base_SetConfig+0x40>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a42      	ldr	r2, [pc, #264]	@ (800567c <TIM_Base_SetConfig+0x134>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d007      	beq.n	8005588 <TIM_Base_SetConfig+0x40>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a41      	ldr	r2, [pc, #260]	@ (8005680 <TIM_Base_SetConfig+0x138>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d003      	beq.n	8005588 <TIM_Base_SetConfig+0x40>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a40      	ldr	r2, [pc, #256]	@ (8005684 <TIM_Base_SetConfig+0x13c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d108      	bne.n	800559a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800558e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a35      	ldr	r2, [pc, #212]	@ (8005674 <TIM_Base_SetConfig+0x12c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d01f      	beq.n	80055e2 <TIM_Base_SetConfig+0x9a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055a8:	d01b      	beq.n	80055e2 <TIM_Base_SetConfig+0x9a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a32      	ldr	r2, [pc, #200]	@ (8005678 <TIM_Base_SetConfig+0x130>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d017      	beq.n	80055e2 <TIM_Base_SetConfig+0x9a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a31      	ldr	r2, [pc, #196]	@ (800567c <TIM_Base_SetConfig+0x134>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d013      	beq.n	80055e2 <TIM_Base_SetConfig+0x9a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a30      	ldr	r2, [pc, #192]	@ (8005680 <TIM_Base_SetConfig+0x138>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00f      	beq.n	80055e2 <TIM_Base_SetConfig+0x9a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a2f      	ldr	r2, [pc, #188]	@ (8005684 <TIM_Base_SetConfig+0x13c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00b      	beq.n	80055e2 <TIM_Base_SetConfig+0x9a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a2e      	ldr	r2, [pc, #184]	@ (8005688 <TIM_Base_SetConfig+0x140>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d007      	beq.n	80055e2 <TIM_Base_SetConfig+0x9a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a2d      	ldr	r2, [pc, #180]	@ (800568c <TIM_Base_SetConfig+0x144>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d003      	beq.n	80055e2 <TIM_Base_SetConfig+0x9a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a2c      	ldr	r2, [pc, #176]	@ (8005690 <TIM_Base_SetConfig+0x148>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d108      	bne.n	80055f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a16      	ldr	r2, [pc, #88]	@ (8005674 <TIM_Base_SetConfig+0x12c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d00f      	beq.n	8005640 <TIM_Base_SetConfig+0xf8>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a18      	ldr	r2, [pc, #96]	@ (8005684 <TIM_Base_SetConfig+0x13c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00b      	beq.n	8005640 <TIM_Base_SetConfig+0xf8>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a17      	ldr	r2, [pc, #92]	@ (8005688 <TIM_Base_SetConfig+0x140>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d007      	beq.n	8005640 <TIM_Base_SetConfig+0xf8>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a16      	ldr	r2, [pc, #88]	@ (800568c <TIM_Base_SetConfig+0x144>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d003      	beq.n	8005640 <TIM_Base_SetConfig+0xf8>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a15      	ldr	r2, [pc, #84]	@ (8005690 <TIM_Base_SetConfig+0x148>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d103      	bne.n	8005648 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	691a      	ldr	r2, [r3, #16]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b01      	cmp	r3, #1
 8005658:	d105      	bne.n	8005666 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f023 0201 	bic.w	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	611a      	str	r2, [r3, #16]
  }
}
 8005666:	bf00      	nop
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40012c00 	.word	0x40012c00
 8005678:	40000400 	.word	0x40000400
 800567c:	40000800 	.word	0x40000800
 8005680:	40000c00 	.word	0x40000c00
 8005684:	40013400 	.word	0x40013400
 8005688:	40014000 	.word	0x40014000
 800568c:	40014400 	.word	0x40014400
 8005690:	40014800 	.word	0x40014800

08005694 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e040      	b.n	8005764 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d106      	bne.n	80056f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fb fd86 	bl	8001204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2224      	movs	r2, #36	@ 0x24
 80056fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0201 	bic.w	r2, r2, #1
 800570c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fe52 	bl	80063c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fb97 	bl	8005e50 <UART_SetConfig>
 8005722:	4603      	mov	r3, r0
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e01b      	b.n	8005764 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800573a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800574a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0201 	orr.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 fed1 	bl	8006504 <UART_CheckIdleState>
 8005762:	4603      	mov	r3, r0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08a      	sub	sp, #40	@ 0x28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	4613      	mov	r3, r2
 8005778:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005780:	2b20      	cmp	r3, #32
 8005782:	d137      	bne.n	80057f4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <HAL_UART_Receive_IT+0x24>
 800578a:	88fb      	ldrh	r3, [r7, #6]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e030      	b.n	80057f6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a18      	ldr	r2, [pc, #96]	@ (8005800 <HAL_UART_Receive_IT+0x94>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d01f      	beq.n	80057e4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d018      	beq.n	80057e4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	e853 3f00 	ldrex	r3, [r3]
 80057be:	613b      	str	r3, [r7, #16]
   return(result);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80057c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d0:	623b      	str	r3, [r7, #32]
 80057d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	69f9      	ldr	r1, [r7, #28]
 80057d6:	6a3a      	ldr	r2, [r7, #32]
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e6      	bne.n	80057b2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80057e4:	88fb      	ldrh	r3, [r7, #6]
 80057e6:	461a      	mov	r2, r3
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 ffa0 	bl	8006730 <UART_Start_Receive_IT>
 80057f0:	4603      	mov	r3, r0
 80057f2:	e000      	b.n	80057f6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80057f4:	2302      	movs	r3, #2
  }
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3728      	adds	r7, #40	@ 0x28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	40008000 	.word	0x40008000

08005804 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b0ba      	sub	sp, #232	@ 0xe8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800582a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800582e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005832:	4013      	ands	r3, r2
 8005834:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005838:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800583c:	2b00      	cmp	r3, #0
 800583e:	d115      	bne.n	800586c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00f      	beq.n	800586c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800584c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b00      	cmp	r3, #0
 8005856:	d009      	beq.n	800586c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 82ca 	beq.w	8005df6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	4798      	blx	r3
      }
      return;
 800586a:	e2c4      	b.n	8005df6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800586c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 8117 	beq.w	8005aa4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d106      	bne.n	8005890 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005882:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005886:	4b85      	ldr	r3, [pc, #532]	@ (8005a9c <HAL_UART_IRQHandler+0x298>)
 8005888:	4013      	ands	r3, r2
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 810a 	beq.w	8005aa4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d011      	beq.n	80058c0 <HAL_UART_IRQHandler+0xbc>
 800589c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00b      	beq.n	80058c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2201      	movs	r2, #1
 80058ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058b6:	f043 0201 	orr.w	r2, r3, #1
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d011      	beq.n	80058f0 <HAL_UART_IRQHandler+0xec>
 80058cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00b      	beq.n	80058f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2202      	movs	r2, #2
 80058de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058e6:	f043 0204 	orr.w	r2, r3, #4
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d011      	beq.n	8005920 <HAL_UART_IRQHandler+0x11c>
 80058fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00b      	beq.n	8005920 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2204      	movs	r2, #4
 800590e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005916:	f043 0202 	orr.w	r2, r3, #2
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b00      	cmp	r3, #0
 800592a:	d017      	beq.n	800595c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800592c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005930:	f003 0320 	and.w	r3, r3, #32
 8005934:	2b00      	cmp	r3, #0
 8005936:	d105      	bne.n	8005944 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800593c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00b      	beq.n	800595c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2208      	movs	r2, #8
 800594a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005952:	f043 0208 	orr.w	r2, r3, #8
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800595c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005960:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005964:	2b00      	cmp	r3, #0
 8005966:	d012      	beq.n	800598e <HAL_UART_IRQHandler+0x18a>
 8005968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800596c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00c      	beq.n	800598e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800597c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005984:	f043 0220 	orr.w	r2, r3, #32
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 8230 	beq.w	8005dfa <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800599a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00d      	beq.n	80059c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059aa:	f003 0320 	and.w	r3, r3, #32
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d007      	beq.n	80059c2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d6:	2b40      	cmp	r3, #64	@ 0x40
 80059d8:	d005      	beq.n	80059e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d04f      	beq.n	8005a86 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 ff68 	bl	80068bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f6:	2b40      	cmp	r3, #64	@ 0x40
 80059f8:	d141      	bne.n	8005a7e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3308      	adds	r3, #8
 8005a00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a08:	e853 3f00 	ldrex	r3, [r3]
 8005a0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3308      	adds	r3, #8
 8005a22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1d9      	bne.n	80059fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d013      	beq.n	8005a76 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a52:	4a13      	ldr	r2, [pc, #76]	@ (8005aa0 <HAL_UART_IRQHandler+0x29c>)
 8005a54:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fc ff92 	bl	8002984 <HAL_DMA_Abort_IT>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d017      	beq.n	8005a96 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005a70:	4610      	mov	r0, r2
 8005a72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a74:	e00f      	b.n	8005a96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f9d4 	bl	8005e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a7c:	e00b      	b.n	8005a96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f9d0 	bl	8005e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a84:	e007      	b.n	8005a96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f9cc 	bl	8005e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005a94:	e1b1      	b.n	8005dfa <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a96:	bf00      	nop
    return;
 8005a98:	e1af      	b.n	8005dfa <HAL_UART_IRQHandler+0x5f6>
 8005a9a:	bf00      	nop
 8005a9c:	04000120 	.word	0x04000120
 8005aa0:	08006985 	.word	0x08006985

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	f040 816a 	bne.w	8005d82 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ab2:	f003 0310 	and.w	r3, r3, #16
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 8163 	beq.w	8005d82 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ac0:	f003 0310 	and.w	r3, r3, #16
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 815c 	beq.w	8005d82 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2210      	movs	r2, #16
 8005ad0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005adc:	2b40      	cmp	r3, #64	@ 0x40
 8005ade:	f040 80d4 	bne.w	8005c8a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005aee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 80ad 	beq.w	8005c52 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005afe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b02:	429a      	cmp	r2, r3
 8005b04:	f080 80a5 	bcs.w	8005c52 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f040 8086 	bne.w	8005c30 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b30:	e853 3f00 	ldrex	r3, [r3]
 8005b34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b5e:	e841 2300 	strex	r3, r2, [r1]
 8005b62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1da      	bne.n	8005b24 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3308      	adds	r3, #8
 8005b74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b80:	f023 0301 	bic.w	r3, r3, #1
 8005b84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ba4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e1      	bne.n	8005b6e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3308      	adds	r3, #8
 8005bb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005bba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3308      	adds	r3, #8
 8005bca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005bce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005bd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005bd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005bdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e3      	bne.n	8005baa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c00:	f023 0310 	bic.w	r3, r3, #16
 8005c04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e4      	bne.n	8005bf0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fc fe6c 	bl	8002908 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	4619      	mov	r1, r3
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f8f4 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005c50:	e0d5      	b.n	8005dfe <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005c58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	f040 80ce 	bne.w	8005dfe <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	f040 80c5 	bne.w	8005dfe <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005c80:	4619      	mov	r1, r3
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f8d8 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
      return;
 8005c88:	e0b9      	b.n	8005dfe <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 80ab 	beq.w	8005e02 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005cac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80a6 	beq.w	8005e02 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cda:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e4      	bne.n	8005cb6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3308      	adds	r3, #8
 8005cf2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	623b      	str	r3, [r7, #32]
   return(result);
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	f023 0301 	bic.w	r3, r3, #1
 8005d02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d10:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d18:	e841 2300 	strex	r3, r2, [r1]
 8005d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e3      	bne.n	8005cec <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f023 0310 	bic.w	r3, r3, #16
 8005d4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	461a      	mov	r2, r3
 8005d56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005d5a:	61fb      	str	r3, [r7, #28]
 8005d5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5e:	69b9      	ldr	r1, [r7, #24]
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	617b      	str	r3, [r7, #20]
   return(result);
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e4      	bne.n	8005d38 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2202      	movs	r2, #2
 8005d72:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f85c 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d80:	e03f      	b.n	8005e02 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00e      	beq.n	8005dac <HAL_UART_IRQHandler+0x5a8>
 8005d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d008      	beq.n	8005dac <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005da2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 ffe9 	bl	8006d7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005daa:	e02d      	b.n	8005e08 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00e      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d008      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01c      	beq.n	8005e06 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	4798      	blx	r3
    }
    return;
 8005dd4:	e017      	b.n	8005e06 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d012      	beq.n	8005e08 <HAL_UART_IRQHandler+0x604>
 8005de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00c      	beq.n	8005e08 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fdde 	bl	80069b0 <UART_EndTransmit_IT>
    return;
 8005df4:	e008      	b.n	8005e08 <HAL_UART_IRQHandler+0x604>
      return;
 8005df6:	bf00      	nop
 8005df8:	e006      	b.n	8005e08 <HAL_UART_IRQHandler+0x604>
    return;
 8005dfa:	bf00      	nop
 8005dfc:	e004      	b.n	8005e08 <HAL_UART_IRQHandler+0x604>
      return;
 8005dfe:	bf00      	nop
 8005e00:	e002      	b.n	8005e08 <HAL_UART_IRQHandler+0x604>
      return;
 8005e02:	bf00      	nop
 8005e04:	e000      	b.n	8005e08 <HAL_UART_IRQHandler+0x604>
    return;
 8005e06:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005e08:	37e8      	adds	r7, #232	@ 0xe8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop

08005e10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e54:	b08a      	sub	sp, #40	@ 0x28
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4ba4      	ldr	r3, [pc, #656]	@ (8006110 <UART_SetConfig+0x2c0>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	6812      	ldr	r2, [r2, #0]
 8005e86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a99      	ldr	r2, [pc, #612]	@ (8006114 <UART_SetConfig+0x2c4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d004      	beq.n	8005ebc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a90      	ldr	r2, [pc, #576]	@ (8006118 <UART_SetConfig+0x2c8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d126      	bne.n	8005f28 <UART_SetConfig+0xd8>
 8005eda:	4b90      	ldr	r3, [pc, #576]	@ (800611c <UART_SetConfig+0x2cc>)
 8005edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee0:	f003 0303 	and.w	r3, r3, #3
 8005ee4:	2b03      	cmp	r3, #3
 8005ee6:	d81b      	bhi.n	8005f20 <UART_SetConfig+0xd0>
 8005ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef0 <UART_SetConfig+0xa0>)
 8005eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eee:	bf00      	nop
 8005ef0:	08005f01 	.word	0x08005f01
 8005ef4:	08005f11 	.word	0x08005f11
 8005ef8:	08005f09 	.word	0x08005f09
 8005efc:	08005f19 	.word	0x08005f19
 8005f00:	2301      	movs	r3, #1
 8005f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f06:	e116      	b.n	8006136 <UART_SetConfig+0x2e6>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f0e:	e112      	b.n	8006136 <UART_SetConfig+0x2e6>
 8005f10:	2304      	movs	r3, #4
 8005f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f16:	e10e      	b.n	8006136 <UART_SetConfig+0x2e6>
 8005f18:	2308      	movs	r3, #8
 8005f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f1e:	e10a      	b.n	8006136 <UART_SetConfig+0x2e6>
 8005f20:	2310      	movs	r3, #16
 8005f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f26:	e106      	b.n	8006136 <UART_SetConfig+0x2e6>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a7c      	ldr	r2, [pc, #496]	@ (8006120 <UART_SetConfig+0x2d0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d138      	bne.n	8005fa4 <UART_SetConfig+0x154>
 8005f32:	4b7a      	ldr	r3, [pc, #488]	@ (800611c <UART_SetConfig+0x2cc>)
 8005f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f38:	f003 030c 	and.w	r3, r3, #12
 8005f3c:	2b0c      	cmp	r3, #12
 8005f3e:	d82d      	bhi.n	8005f9c <UART_SetConfig+0x14c>
 8005f40:	a201      	add	r2, pc, #4	@ (adr r2, 8005f48 <UART_SetConfig+0xf8>)
 8005f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f46:	bf00      	nop
 8005f48:	08005f7d 	.word	0x08005f7d
 8005f4c:	08005f9d 	.word	0x08005f9d
 8005f50:	08005f9d 	.word	0x08005f9d
 8005f54:	08005f9d 	.word	0x08005f9d
 8005f58:	08005f8d 	.word	0x08005f8d
 8005f5c:	08005f9d 	.word	0x08005f9d
 8005f60:	08005f9d 	.word	0x08005f9d
 8005f64:	08005f9d 	.word	0x08005f9d
 8005f68:	08005f85 	.word	0x08005f85
 8005f6c:	08005f9d 	.word	0x08005f9d
 8005f70:	08005f9d 	.word	0x08005f9d
 8005f74:	08005f9d 	.word	0x08005f9d
 8005f78:	08005f95 	.word	0x08005f95
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f82:	e0d8      	b.n	8006136 <UART_SetConfig+0x2e6>
 8005f84:	2302      	movs	r3, #2
 8005f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f8a:	e0d4      	b.n	8006136 <UART_SetConfig+0x2e6>
 8005f8c:	2304      	movs	r3, #4
 8005f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f92:	e0d0      	b.n	8006136 <UART_SetConfig+0x2e6>
 8005f94:	2308      	movs	r3, #8
 8005f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f9a:	e0cc      	b.n	8006136 <UART_SetConfig+0x2e6>
 8005f9c:	2310      	movs	r3, #16
 8005f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fa2:	e0c8      	b.n	8006136 <UART_SetConfig+0x2e6>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a5e      	ldr	r2, [pc, #376]	@ (8006124 <UART_SetConfig+0x2d4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d125      	bne.n	8005ffa <UART_SetConfig+0x1aa>
 8005fae:	4b5b      	ldr	r3, [pc, #364]	@ (800611c <UART_SetConfig+0x2cc>)
 8005fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005fb8:	2b30      	cmp	r3, #48	@ 0x30
 8005fba:	d016      	beq.n	8005fea <UART_SetConfig+0x19a>
 8005fbc:	2b30      	cmp	r3, #48	@ 0x30
 8005fbe:	d818      	bhi.n	8005ff2 <UART_SetConfig+0x1a2>
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	d00a      	beq.n	8005fda <UART_SetConfig+0x18a>
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	d814      	bhi.n	8005ff2 <UART_SetConfig+0x1a2>
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <UART_SetConfig+0x182>
 8005fcc:	2b10      	cmp	r3, #16
 8005fce:	d008      	beq.n	8005fe2 <UART_SetConfig+0x192>
 8005fd0:	e00f      	b.n	8005ff2 <UART_SetConfig+0x1a2>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fd8:	e0ad      	b.n	8006136 <UART_SetConfig+0x2e6>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fe0:	e0a9      	b.n	8006136 <UART_SetConfig+0x2e6>
 8005fe2:	2304      	movs	r3, #4
 8005fe4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fe8:	e0a5      	b.n	8006136 <UART_SetConfig+0x2e6>
 8005fea:	2308      	movs	r3, #8
 8005fec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ff0:	e0a1      	b.n	8006136 <UART_SetConfig+0x2e6>
 8005ff2:	2310      	movs	r3, #16
 8005ff4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ff8:	e09d      	b.n	8006136 <UART_SetConfig+0x2e6>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a4a      	ldr	r2, [pc, #296]	@ (8006128 <UART_SetConfig+0x2d8>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d125      	bne.n	8006050 <UART_SetConfig+0x200>
 8006004:	4b45      	ldr	r3, [pc, #276]	@ (800611c <UART_SetConfig+0x2cc>)
 8006006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800600a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800600e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006010:	d016      	beq.n	8006040 <UART_SetConfig+0x1f0>
 8006012:	2bc0      	cmp	r3, #192	@ 0xc0
 8006014:	d818      	bhi.n	8006048 <UART_SetConfig+0x1f8>
 8006016:	2b80      	cmp	r3, #128	@ 0x80
 8006018:	d00a      	beq.n	8006030 <UART_SetConfig+0x1e0>
 800601a:	2b80      	cmp	r3, #128	@ 0x80
 800601c:	d814      	bhi.n	8006048 <UART_SetConfig+0x1f8>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <UART_SetConfig+0x1d8>
 8006022:	2b40      	cmp	r3, #64	@ 0x40
 8006024:	d008      	beq.n	8006038 <UART_SetConfig+0x1e8>
 8006026:	e00f      	b.n	8006048 <UART_SetConfig+0x1f8>
 8006028:	2300      	movs	r3, #0
 800602a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800602e:	e082      	b.n	8006136 <UART_SetConfig+0x2e6>
 8006030:	2302      	movs	r3, #2
 8006032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006036:	e07e      	b.n	8006136 <UART_SetConfig+0x2e6>
 8006038:	2304      	movs	r3, #4
 800603a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800603e:	e07a      	b.n	8006136 <UART_SetConfig+0x2e6>
 8006040:	2308      	movs	r3, #8
 8006042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006046:	e076      	b.n	8006136 <UART_SetConfig+0x2e6>
 8006048:	2310      	movs	r3, #16
 800604a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800604e:	e072      	b.n	8006136 <UART_SetConfig+0x2e6>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a35      	ldr	r2, [pc, #212]	@ (800612c <UART_SetConfig+0x2dc>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d12a      	bne.n	80060b0 <UART_SetConfig+0x260>
 800605a:	4b30      	ldr	r3, [pc, #192]	@ (800611c <UART_SetConfig+0x2cc>)
 800605c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006060:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006064:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006068:	d01a      	beq.n	80060a0 <UART_SetConfig+0x250>
 800606a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800606e:	d81b      	bhi.n	80060a8 <UART_SetConfig+0x258>
 8006070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006074:	d00c      	beq.n	8006090 <UART_SetConfig+0x240>
 8006076:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800607a:	d815      	bhi.n	80060a8 <UART_SetConfig+0x258>
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <UART_SetConfig+0x238>
 8006080:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006084:	d008      	beq.n	8006098 <UART_SetConfig+0x248>
 8006086:	e00f      	b.n	80060a8 <UART_SetConfig+0x258>
 8006088:	2300      	movs	r3, #0
 800608a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800608e:	e052      	b.n	8006136 <UART_SetConfig+0x2e6>
 8006090:	2302      	movs	r3, #2
 8006092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006096:	e04e      	b.n	8006136 <UART_SetConfig+0x2e6>
 8006098:	2304      	movs	r3, #4
 800609a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800609e:	e04a      	b.n	8006136 <UART_SetConfig+0x2e6>
 80060a0:	2308      	movs	r3, #8
 80060a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060a6:	e046      	b.n	8006136 <UART_SetConfig+0x2e6>
 80060a8:	2310      	movs	r3, #16
 80060aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ae:	e042      	b.n	8006136 <UART_SetConfig+0x2e6>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a17      	ldr	r2, [pc, #92]	@ (8006114 <UART_SetConfig+0x2c4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d13a      	bne.n	8006130 <UART_SetConfig+0x2e0>
 80060ba:	4b18      	ldr	r3, [pc, #96]	@ (800611c <UART_SetConfig+0x2cc>)
 80060bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80060c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060c8:	d01a      	beq.n	8006100 <UART_SetConfig+0x2b0>
 80060ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060ce:	d81b      	bhi.n	8006108 <UART_SetConfig+0x2b8>
 80060d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060d4:	d00c      	beq.n	80060f0 <UART_SetConfig+0x2a0>
 80060d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060da:	d815      	bhi.n	8006108 <UART_SetConfig+0x2b8>
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <UART_SetConfig+0x298>
 80060e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060e4:	d008      	beq.n	80060f8 <UART_SetConfig+0x2a8>
 80060e6:	e00f      	b.n	8006108 <UART_SetConfig+0x2b8>
 80060e8:	2300      	movs	r3, #0
 80060ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ee:	e022      	b.n	8006136 <UART_SetConfig+0x2e6>
 80060f0:	2302      	movs	r3, #2
 80060f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060f6:	e01e      	b.n	8006136 <UART_SetConfig+0x2e6>
 80060f8:	2304      	movs	r3, #4
 80060fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060fe:	e01a      	b.n	8006136 <UART_SetConfig+0x2e6>
 8006100:	2308      	movs	r3, #8
 8006102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006106:	e016      	b.n	8006136 <UART_SetConfig+0x2e6>
 8006108:	2310      	movs	r3, #16
 800610a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800610e:	e012      	b.n	8006136 <UART_SetConfig+0x2e6>
 8006110:	efff69f3 	.word	0xefff69f3
 8006114:	40008000 	.word	0x40008000
 8006118:	40013800 	.word	0x40013800
 800611c:	40021000 	.word	0x40021000
 8006120:	40004400 	.word	0x40004400
 8006124:	40004800 	.word	0x40004800
 8006128:	40004c00 	.word	0x40004c00
 800612c:	40005000 	.word	0x40005000
 8006130:	2310      	movs	r3, #16
 8006132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a9f      	ldr	r2, [pc, #636]	@ (80063b8 <UART_SetConfig+0x568>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d17a      	bne.n	8006236 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006140:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006144:	2b08      	cmp	r3, #8
 8006146:	d824      	bhi.n	8006192 <UART_SetConfig+0x342>
 8006148:	a201      	add	r2, pc, #4	@ (adr r2, 8006150 <UART_SetConfig+0x300>)
 800614a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614e:	bf00      	nop
 8006150:	08006175 	.word	0x08006175
 8006154:	08006193 	.word	0x08006193
 8006158:	0800617d 	.word	0x0800617d
 800615c:	08006193 	.word	0x08006193
 8006160:	08006183 	.word	0x08006183
 8006164:	08006193 	.word	0x08006193
 8006168:	08006193 	.word	0x08006193
 800616c:	08006193 	.word	0x08006193
 8006170:	0800618b 	.word	0x0800618b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006174:	f7fe fa5e 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 8006178:	61f8      	str	r0, [r7, #28]
        break;
 800617a:	e010      	b.n	800619e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800617c:	4b8f      	ldr	r3, [pc, #572]	@ (80063bc <UART_SetConfig+0x56c>)
 800617e:	61fb      	str	r3, [r7, #28]
        break;
 8006180:	e00d      	b.n	800619e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006182:	f7fe f9bf 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 8006186:	61f8      	str	r0, [r7, #28]
        break;
 8006188:	e009      	b.n	800619e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800618a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800618e:	61fb      	str	r3, [r7, #28]
        break;
 8006190:	e005      	b.n	800619e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800619c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 80fb 	beq.w	800639c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	4613      	mov	r3, r2
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	4413      	add	r3, r2
 80061b0:	69fa      	ldr	r2, [r7, #28]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d305      	bcc.n	80061c2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d903      	bls.n	80061ca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80061c8:	e0e8      	b.n	800639c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	2200      	movs	r2, #0
 80061ce:	461c      	mov	r4, r3
 80061d0:	4615      	mov	r5, r2
 80061d2:	f04f 0200 	mov.w	r2, #0
 80061d6:	f04f 0300 	mov.w	r3, #0
 80061da:	022b      	lsls	r3, r5, #8
 80061dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80061e0:	0222      	lsls	r2, r4, #8
 80061e2:	68f9      	ldr	r1, [r7, #12]
 80061e4:	6849      	ldr	r1, [r1, #4]
 80061e6:	0849      	lsrs	r1, r1, #1
 80061e8:	2000      	movs	r0, #0
 80061ea:	4688      	mov	r8, r1
 80061ec:	4681      	mov	r9, r0
 80061ee:	eb12 0a08 	adds.w	sl, r2, r8
 80061f2:	eb43 0b09 	adc.w	fp, r3, r9
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	603b      	str	r3, [r7, #0]
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006204:	4650      	mov	r0, sl
 8006206:	4659      	mov	r1, fp
 8006208:	f7f9 fff2 	bl	80001f0 <__aeabi_uldivmod>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4613      	mov	r3, r2
 8006212:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800621a:	d308      	bcc.n	800622e <UART_SetConfig+0x3de>
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006222:	d204      	bcs.n	800622e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	60da      	str	r2, [r3, #12]
 800622c:	e0b6      	b.n	800639c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006234:	e0b2      	b.n	800639c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800623e:	d15e      	bne.n	80062fe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006240:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006244:	2b08      	cmp	r3, #8
 8006246:	d828      	bhi.n	800629a <UART_SetConfig+0x44a>
 8006248:	a201      	add	r2, pc, #4	@ (adr r2, 8006250 <UART_SetConfig+0x400>)
 800624a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624e:	bf00      	nop
 8006250:	08006275 	.word	0x08006275
 8006254:	0800627d 	.word	0x0800627d
 8006258:	08006285 	.word	0x08006285
 800625c:	0800629b 	.word	0x0800629b
 8006260:	0800628b 	.word	0x0800628b
 8006264:	0800629b 	.word	0x0800629b
 8006268:	0800629b 	.word	0x0800629b
 800626c:	0800629b 	.word	0x0800629b
 8006270:	08006293 	.word	0x08006293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006274:	f7fe f9de 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 8006278:	61f8      	str	r0, [r7, #28]
        break;
 800627a:	e014      	b.n	80062a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800627c:	f7fe f9f0 	bl	8004660 <HAL_RCC_GetPCLK2Freq>
 8006280:	61f8      	str	r0, [r7, #28]
        break;
 8006282:	e010      	b.n	80062a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006284:	4b4d      	ldr	r3, [pc, #308]	@ (80063bc <UART_SetConfig+0x56c>)
 8006286:	61fb      	str	r3, [r7, #28]
        break;
 8006288:	e00d      	b.n	80062a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800628a:	f7fe f93b 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 800628e:	61f8      	str	r0, [r7, #28]
        break;
 8006290:	e009      	b.n	80062a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006296:	61fb      	str	r3, [r7, #28]
        break;
 8006298:	e005      	b.n	80062a6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80062a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d077      	beq.n	800639c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	005a      	lsls	r2, r3, #1
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	085b      	lsrs	r3, r3, #1
 80062b6:	441a      	add	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	2b0f      	cmp	r3, #15
 80062c6:	d916      	bls.n	80062f6 <UART_SetConfig+0x4a6>
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062ce:	d212      	bcs.n	80062f6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	f023 030f 	bic.w	r3, r3, #15
 80062d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	085b      	lsrs	r3, r3, #1
 80062de:	b29b      	uxth	r3, r3
 80062e0:	f003 0307 	and.w	r3, r3, #7
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	8afb      	ldrh	r3, [r7, #22]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	8afa      	ldrh	r2, [r7, #22]
 80062f2:	60da      	str	r2, [r3, #12]
 80062f4:	e052      	b.n	800639c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80062fc:	e04e      	b.n	800639c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006302:	2b08      	cmp	r3, #8
 8006304:	d827      	bhi.n	8006356 <UART_SetConfig+0x506>
 8006306:	a201      	add	r2, pc, #4	@ (adr r2, 800630c <UART_SetConfig+0x4bc>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	08006331 	.word	0x08006331
 8006310:	08006339 	.word	0x08006339
 8006314:	08006341 	.word	0x08006341
 8006318:	08006357 	.word	0x08006357
 800631c:	08006347 	.word	0x08006347
 8006320:	08006357 	.word	0x08006357
 8006324:	08006357 	.word	0x08006357
 8006328:	08006357 	.word	0x08006357
 800632c:	0800634f 	.word	0x0800634f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006330:	f7fe f980 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 8006334:	61f8      	str	r0, [r7, #28]
        break;
 8006336:	e014      	b.n	8006362 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006338:	f7fe f992 	bl	8004660 <HAL_RCC_GetPCLK2Freq>
 800633c:	61f8      	str	r0, [r7, #28]
        break;
 800633e:	e010      	b.n	8006362 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006340:	4b1e      	ldr	r3, [pc, #120]	@ (80063bc <UART_SetConfig+0x56c>)
 8006342:	61fb      	str	r3, [r7, #28]
        break;
 8006344:	e00d      	b.n	8006362 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006346:	f7fe f8dd 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 800634a:	61f8      	str	r0, [r7, #28]
        break;
 800634c:	e009      	b.n	8006362 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800634e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006352:	61fb      	str	r3, [r7, #28]
        break;
 8006354:	e005      	b.n	8006362 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006360:	bf00      	nop
    }

    if (pclk != 0U)
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d019      	beq.n	800639c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	085a      	lsrs	r2, r3, #1
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	441a      	add	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	fbb2 f3f3 	udiv	r3, r2, r3
 800637a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	2b0f      	cmp	r3, #15
 8006380:	d909      	bls.n	8006396 <UART_SetConfig+0x546>
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006388:	d205      	bcs.n	8006396 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	60da      	str	r2, [r3, #12]
 8006394:	e002      	b.n	800639c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80063a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3728      	adds	r7, #40	@ 0x28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063b6:	bf00      	nop
 80063b8:	40008000 	.word	0x40008000
 80063bc:	00f42400 	.word	0x00f42400

080063c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063cc:	f003 0308 	and.w	r3, r3, #8
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006432:	f003 0304 	and.w	r3, r3, #4
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006454:	f003 0310 	and.w	r3, r3, #16
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006476:	f003 0320 	and.w	r3, r3, #32
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01a      	beq.n	80064d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064be:	d10a      	bne.n	80064d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	605a      	str	r2, [r3, #4]
  }
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b098      	sub	sp, #96	@ 0x60
 8006508:	af02      	add	r7, sp, #8
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006514:	f7fa fff4 	bl	8001500 <HAL_GetTick>
 8006518:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0308 	and.w	r3, r3, #8
 8006524:	2b08      	cmp	r3, #8
 8006526:	d12e      	bne.n	8006586 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006528:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006530:	2200      	movs	r2, #0
 8006532:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f88c 	bl	8006654 <UART_WaitOnFlagUntilTimeout>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d021      	beq.n	8006586 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006552:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006556:	653b      	str	r3, [r7, #80]	@ 0x50
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006560:	647b      	str	r3, [r7, #68]	@ 0x44
 8006562:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006566:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800656e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e6      	bne.n	8006542 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2220      	movs	r2, #32
 8006578:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e062      	b.n	800664c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b04      	cmp	r3, #4
 8006592:	d149      	bne.n	8006628 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006594:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800659c:	2200      	movs	r2, #0
 800659e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f856 	bl	8006654 <UART_WaitOnFlagUntilTimeout>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d03c      	beq.n	8006628 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b6:	e853 3f00 	ldrex	r3, [r3]
 80065ba:	623b      	str	r3, [r7, #32]
   return(result);
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	461a      	mov	r2, r3
 80065ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80065ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065d4:	e841 2300 	strex	r3, r2, [r1]
 80065d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1e6      	bne.n	80065ae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3308      	adds	r3, #8
 80065e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	e853 3f00 	ldrex	r3, [r3]
 80065ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f023 0301 	bic.w	r3, r3, #1
 80065f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3308      	adds	r3, #8
 80065fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006600:	61fa      	str	r2, [r7, #28]
 8006602:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006604:	69b9      	ldr	r1, [r7, #24]
 8006606:	69fa      	ldr	r2, [r7, #28]
 8006608:	e841 2300 	strex	r3, r2, [r1]
 800660c:	617b      	str	r3, [r7, #20]
   return(result);
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e5      	bne.n	80065e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2220      	movs	r2, #32
 8006618:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e011      	b.n	800664c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2220      	movs	r2, #32
 8006632:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3758      	adds	r7, #88	@ 0x58
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	603b      	str	r3, [r7, #0]
 8006660:	4613      	mov	r3, r2
 8006662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006664:	e04f      	b.n	8006706 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800666c:	d04b      	beq.n	8006706 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800666e:	f7fa ff47 	bl	8001500 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	429a      	cmp	r2, r3
 800667c:	d302      	bcc.n	8006684 <UART_WaitOnFlagUntilTimeout+0x30>
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e04e      	b.n	8006726 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0304 	and.w	r3, r3, #4
 8006692:	2b00      	cmp	r3, #0
 8006694:	d037      	beq.n	8006706 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2b80      	cmp	r3, #128	@ 0x80
 800669a:	d034      	beq.n	8006706 <UART_WaitOnFlagUntilTimeout+0xb2>
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b40      	cmp	r3, #64	@ 0x40
 80066a0:	d031      	beq.n	8006706 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	f003 0308 	and.w	r3, r3, #8
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d110      	bne.n	80066d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2208      	movs	r2, #8
 80066b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 f8ff 	bl	80068bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2208      	movs	r2, #8
 80066c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e029      	b.n	8006726 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066e0:	d111      	bne.n	8006706 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 f8e5 	bl	80068bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e00f      	b.n	8006726 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69da      	ldr	r2, [r3, #28]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4013      	ands	r3, r2
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	429a      	cmp	r2, r3
 8006714:	bf0c      	ite	eq
 8006716:	2301      	moveq	r3, #1
 8006718:	2300      	movne	r3, #0
 800671a:	b2db      	uxtb	r3, r3
 800671c:	461a      	mov	r2, r3
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	429a      	cmp	r2, r3
 8006722:	d0a0      	beq.n	8006666 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
	...

08006730 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006730:	b480      	push	{r7}
 8006732:	b097      	sub	sp, #92	@ 0x5c
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	4613      	mov	r3, r2
 800673c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	88fa      	ldrh	r2, [r7, #6]
 8006748:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	88fa      	ldrh	r2, [r7, #6]
 8006750:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006762:	d10e      	bne.n	8006782 <UART_Start_Receive_IT+0x52>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d105      	bne.n	8006778 <UART_Start_Receive_IT+0x48>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006772:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006776:	e02d      	b.n	80067d4 <UART_Start_Receive_IT+0xa4>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	22ff      	movs	r2, #255	@ 0xff
 800677c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006780:	e028      	b.n	80067d4 <UART_Start_Receive_IT+0xa4>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10d      	bne.n	80067a6 <UART_Start_Receive_IT+0x76>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d104      	bne.n	800679c <UART_Start_Receive_IT+0x6c>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	22ff      	movs	r2, #255	@ 0xff
 8006796:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800679a:	e01b      	b.n	80067d4 <UART_Start_Receive_IT+0xa4>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	227f      	movs	r2, #127	@ 0x7f
 80067a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067a4:	e016      	b.n	80067d4 <UART_Start_Receive_IT+0xa4>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067ae:	d10d      	bne.n	80067cc <UART_Start_Receive_IT+0x9c>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d104      	bne.n	80067c2 <UART_Start_Receive_IT+0x92>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	227f      	movs	r2, #127	@ 0x7f
 80067bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067c0:	e008      	b.n	80067d4 <UART_Start_Receive_IT+0xa4>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	223f      	movs	r2, #63	@ 0x3f
 80067c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067ca:	e003      	b.n	80067d4 <UART_Start_Receive_IT+0xa4>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2222      	movs	r2, #34	@ 0x22
 80067e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3308      	adds	r3, #8
 80067ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ee:	e853 3f00 	ldrex	r3, [r3]
 80067f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f6:	f043 0301 	orr.w	r3, r3, #1
 80067fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3308      	adds	r3, #8
 8006802:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006804:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006806:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006808:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800680a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800680c:	e841 2300 	strex	r3, r2, [r1]
 8006810:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1e5      	bne.n	80067e4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006820:	d107      	bne.n	8006832 <UART_Start_Receive_IT+0x102>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d103      	bne.n	8006832 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	4a21      	ldr	r2, [pc, #132]	@ (80068b4 <UART_Start_Receive_IT+0x184>)
 800682e:	669a      	str	r2, [r3, #104]	@ 0x68
 8006830:	e002      	b.n	8006838 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4a20      	ldr	r2, [pc, #128]	@ (80068b8 <UART_Start_Receive_IT+0x188>)
 8006836:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d019      	beq.n	8006874 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800684e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006850:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006854:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800685e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006860:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006864:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800686c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e6      	bne.n	8006840 <UART_Start_Receive_IT+0x110>
 8006872:	e018      	b.n	80068a6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	613b      	str	r3, [r7, #16]
   return(result);
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f043 0320 	orr.w	r3, r3, #32
 8006888:	653b      	str	r3, [r7, #80]	@ 0x50
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006892:	623b      	str	r3, [r7, #32]
 8006894:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006896:	69f9      	ldr	r1, [r7, #28]
 8006898:	6a3a      	ldr	r2, [r7, #32]
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	61bb      	str	r3, [r7, #24]
   return(result);
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e6      	bne.n	8006874 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	375c      	adds	r7, #92	@ 0x5c
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	08006bc1 	.word	0x08006bc1
 80068b8:	08006a05 	.word	0x08006a05

080068bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068bc:	b480      	push	{r7}
 80068be:	b095      	sub	sp, #84	@ 0x54
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	461a      	mov	r2, r3
 80068e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80068e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068ea:	e841 2300 	strex	r3, r2, [r1]
 80068ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1e6      	bne.n	80068c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3308      	adds	r3, #8
 80068fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	e853 3f00 	ldrex	r3, [r3]
 8006904:	61fb      	str	r3, [r7, #28]
   return(result);
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	f023 0301 	bic.w	r3, r3, #1
 800690c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3308      	adds	r3, #8
 8006914:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006916:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006918:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800691c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1e5      	bne.n	80068f6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800692e:	2b01      	cmp	r3, #1
 8006930:	d118      	bne.n	8006964 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f023 0310 	bic.w	r3, r3, #16
 8006946:	647b      	str	r3, [r7, #68]	@ 0x44
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	461a      	mov	r2, r3
 800694e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	6979      	ldr	r1, [r7, #20]
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	613b      	str	r3, [r7, #16]
   return(result);
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e6      	bne.n	8006932 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2220      	movs	r2, #32
 8006968:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006978:	bf00      	nop
 800697a:	3754      	adds	r7, #84	@ 0x54
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006990:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f7ff fa3e 	bl	8005e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069a8:	bf00      	nop
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	e853 3f00 	ldrex	r3, [r3]
 80069c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069cc:	61fb      	str	r3, [r7, #28]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	461a      	mov	r2, r3
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	61bb      	str	r3, [r7, #24]
 80069d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069da:	6979      	ldr	r1, [r7, #20]
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	e841 2300 	strex	r3, r2, [r1]
 80069e2:	613b      	str	r3, [r7, #16]
   return(result);
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e6      	bne.n	80069b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2220      	movs	r2, #32
 80069ee:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7ff fa0a 	bl	8005e10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069fc:	bf00      	nop
 80069fe:	3720      	adds	r7, #32
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b09c      	sub	sp, #112	@ 0x70
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a12:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a1c:	2b22      	cmp	r3, #34	@ 0x22
 8006a1e:	f040 80be 	bne.w	8006b9e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006a28:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006a30:	b2d9      	uxtb	r1, r3
 8006a32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a3c:	400a      	ands	r2, r1
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f040 80a3 	bne.w	8006bb2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a74:	e853 3f00 	ldrex	r3, [r3]
 8006a78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e6      	bne.n	8006a6c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3308      	adds	r3, #8
 8006aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa8:	e853 3f00 	ldrex	r3, [r3]
 8006aac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab0:	f023 0301 	bic.w	r3, r3, #1
 8006ab4:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3308      	adds	r3, #8
 8006abc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006abe:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ac0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ac4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1e5      	bne.n	8006a9e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a34      	ldr	r2, [pc, #208]	@ (8006bbc <UART_RxISR_8BIT+0x1b8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d01f      	beq.n	8006b30 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d018      	beq.n	8006b30 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	623b      	str	r3, [r7, #32]
   return(result);
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b12:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e6      	bne.n	8006afe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d12e      	bne.n	8006b96 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	e853 3f00 	ldrex	r3, [r3]
 8006b4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0310 	bic.w	r3, r3, #16
 8006b52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b5c:	61fb      	str	r3, [r7, #28]
 8006b5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b60:	69b9      	ldr	r1, [r7, #24]
 8006b62:	69fa      	ldr	r2, [r7, #28]
 8006b64:	e841 2300 	strex	r3, r2, [r1]
 8006b68:	617b      	str	r3, [r7, #20]
   return(result);
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1e6      	bne.n	8006b3e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	f003 0310 	and.w	r3, r3, #16
 8006b7a:	2b10      	cmp	r3, #16
 8006b7c:	d103      	bne.n	8006b86 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2210      	movs	r2, #16
 8006b84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff f952 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b94:	e00d      	b.n	8006bb2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7fa f918 	bl	8000dcc <HAL_UART_RxCpltCallback>
}
 8006b9c:	e009      	b.n	8006bb2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	8b1b      	ldrh	r3, [r3, #24]
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f042 0208 	orr.w	r2, r2, #8
 8006bae:	b292      	uxth	r2, r2
 8006bb0:	831a      	strh	r2, [r3, #24]
}
 8006bb2:	bf00      	nop
 8006bb4:	3770      	adds	r7, #112	@ 0x70
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	40008000 	.word	0x40008000

08006bc0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b09c      	sub	sp, #112	@ 0x70
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006bce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bd8:	2b22      	cmp	r3, #34	@ 0x22
 8006bda:	f040 80be 	bne.w	8006d5a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006be4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bec:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006bee:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006bf2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bfc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c02:	1c9a      	adds	r2, r3, #2
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f040 80a3 	bne.w	8006d6e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	461a      	mov	r2, r3
 8006c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c46:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c48:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006c4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006c4e:	e841 2300 	strex	r3, r2, [r1]
 8006c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1e6      	bne.n	8006c28 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	3308      	adds	r3, #8
 8006c60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c64:	e853 3f00 	ldrex	r3, [r3]
 8006c68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6c:	f023 0301 	bic.w	r3, r3, #1
 8006c70:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3308      	adds	r3, #8
 8006c78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006c7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e5      	bne.n	8006c5a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a34      	ldr	r2, [pc, #208]	@ (8006d78 <UART_RxISR_16BIT+0x1b8>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d01f      	beq.n	8006cec <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d018      	beq.n	8006cec <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	e853 3f00 	ldrex	r3, [r3]
 8006cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006cce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cda:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ce0:	e841 2300 	strex	r3, r2, [r1]
 8006ce4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e6      	bne.n	8006cba <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d12e      	bne.n	8006d52 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f023 0310 	bic.w	r3, r3, #16
 8006d0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	461a      	mov	r2, r3
 8006d16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d18:	61bb      	str	r3, [r7, #24]
 8006d1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1c:	6979      	ldr	r1, [r7, #20]
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	e841 2300 	strex	r3, r2, [r1]
 8006d24:	613b      	str	r3, [r7, #16]
   return(result);
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1e6      	bne.n	8006cfa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	f003 0310 	and.w	r3, r3, #16
 8006d36:	2b10      	cmp	r3, #16
 8006d38:	d103      	bne.n	8006d42 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2210      	movs	r2, #16
 8006d40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7ff f874 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d50:	e00d      	b.n	8006d6e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7fa f83a 	bl	8000dcc <HAL_UART_RxCpltCallback>
}
 8006d58:	e009      	b.n	8006d6e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	8b1b      	ldrh	r3, [r3, #24]
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0208 	orr.w	r2, r2, #8
 8006d6a:	b292      	uxth	r2, r2
 8006d6c:	831a      	strh	r2, [r3, #24]
}
 8006d6e:	bf00      	nop
 8006d70:	3770      	adds	r7, #112	@ 0x70
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	40008000 	.word	0x40008000

08006d7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <__NVIC_SetPriority>:
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	4603      	mov	r3, r0
 8006d98:	6039      	str	r1, [r7, #0]
 8006d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	db0a      	blt.n	8006dba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	490c      	ldr	r1, [pc, #48]	@ (8006ddc <__NVIC_SetPriority+0x4c>)
 8006daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dae:	0112      	lsls	r2, r2, #4
 8006db0:	b2d2      	uxtb	r2, r2
 8006db2:	440b      	add	r3, r1
 8006db4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006db8:	e00a      	b.n	8006dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	4908      	ldr	r1, [pc, #32]	@ (8006de0 <__NVIC_SetPriority+0x50>)
 8006dc0:	79fb      	ldrb	r3, [r7, #7]
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	3b04      	subs	r3, #4
 8006dc8:	0112      	lsls	r2, r2, #4
 8006dca:	b2d2      	uxtb	r2, r2
 8006dcc:	440b      	add	r3, r1
 8006dce:	761a      	strb	r2, [r3, #24]
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	e000e100 	.word	0xe000e100
 8006de0:	e000ed00 	.word	0xe000ed00

08006de4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006de8:	4b05      	ldr	r3, [pc, #20]	@ (8006e00 <SysTick_Handler+0x1c>)
 8006dea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006dec:	f001 fec6 	bl	8008b7c <xTaskGetSchedulerState>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d001      	beq.n	8006dfa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006df6:	f002 fcbf 	bl	8009778 <xPortSysTickHandler>
  }
}
 8006dfa:	bf00      	nop
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	e000e010 	.word	0xe000e010

08006e04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006e04:	b580      	push	{r7, lr}
 8006e06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006e08:	2100      	movs	r1, #0
 8006e0a:	f06f 0004 	mvn.w	r0, #4
 8006e0e:	f7ff ffbf 	bl	8006d90 <__NVIC_SetPriority>
#endif
}
 8006e12:	bf00      	nop
 8006e14:	bd80      	pop	{r7, pc}
	...

08006e18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e1e:	f3ef 8305 	mrs	r3, IPSR
 8006e22:	603b      	str	r3, [r7, #0]
  return(result);
 8006e24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006e2a:	f06f 0305 	mvn.w	r3, #5
 8006e2e:	607b      	str	r3, [r7, #4]
 8006e30:	e00c      	b.n	8006e4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e32:	4b0a      	ldr	r3, [pc, #40]	@ (8006e5c <osKernelInitialize+0x44>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d105      	bne.n	8006e46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e3a:	4b08      	ldr	r3, [pc, #32]	@ (8006e5c <osKernelInitialize+0x44>)
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	607b      	str	r3, [r7, #4]
 8006e44:	e002      	b.n	8006e4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006e46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e4c:	687b      	ldr	r3, [r7, #4]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	2000029c 	.word	0x2000029c

08006e60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e66:	f3ef 8305 	mrs	r3, IPSR
 8006e6a:	603b      	str	r3, [r7, #0]
  return(result);
 8006e6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006e72:	f06f 0305 	mvn.w	r3, #5
 8006e76:	607b      	str	r3, [r7, #4]
 8006e78:	e010      	b.n	8006e9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea8 <osKernelStart+0x48>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d109      	bne.n	8006e96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006e82:	f7ff ffbf 	bl	8006e04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006e86:	4b08      	ldr	r3, [pc, #32]	@ (8006ea8 <osKernelStart+0x48>)
 8006e88:	2202      	movs	r2, #2
 8006e8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006e8c:	f001 fa12 	bl	80082b4 <vTaskStartScheduler>
      stat = osOK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	607b      	str	r3, [r7, #4]
 8006e94:	e002      	b.n	8006e9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006e96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e9c:	687b      	ldr	r3, [r7, #4]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	2000029c 	.word	0x2000029c

08006eac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b08e      	sub	sp, #56	@ 0x38
 8006eb0:	af04      	add	r7, sp, #16
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ebc:	f3ef 8305 	mrs	r3, IPSR
 8006ec0:	617b      	str	r3, [r7, #20]
  return(result);
 8006ec2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d17e      	bne.n	8006fc6 <osThreadNew+0x11a>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d07b      	beq.n	8006fc6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006ece:	2380      	movs	r3, #128	@ 0x80
 8006ed0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006ed2:	2318      	movs	r3, #24
 8006ed4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006eda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ede:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d045      	beq.n	8006f72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <osThreadNew+0x48>
        name = attr->name;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d008      	beq.n	8006f1a <osThreadNew+0x6e>
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	2b38      	cmp	r3, #56	@ 0x38
 8006f0c:	d805      	bhi.n	8006f1a <osThreadNew+0x6e>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <osThreadNew+0x72>
        return (NULL);
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	e054      	b.n	8006fc8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	089b      	lsrs	r3, r3, #2
 8006f2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00e      	beq.n	8006f54 <osThreadNew+0xa8>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	2ba7      	cmp	r3, #167	@ 0xa7
 8006f3c:	d90a      	bls.n	8006f54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d006      	beq.n	8006f54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <osThreadNew+0xa8>
        mem = 1;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	61bb      	str	r3, [r7, #24]
 8006f52:	e010      	b.n	8006f76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10c      	bne.n	8006f76 <osThreadNew+0xca>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d108      	bne.n	8006f76 <osThreadNew+0xca>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d104      	bne.n	8006f76 <osThreadNew+0xca>
          mem = 0;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	61bb      	str	r3, [r7, #24]
 8006f70:	e001      	b.n	8006f76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006f72:	2300      	movs	r3, #0
 8006f74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d110      	bne.n	8006f9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f84:	9202      	str	r2, [sp, #8]
 8006f86:	9301      	str	r3, [sp, #4]
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	6a3a      	ldr	r2, [r7, #32]
 8006f90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 ff9a 	bl	8007ecc <xTaskCreateStatic>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	613b      	str	r3, [r7, #16]
 8006f9c:	e013      	b.n	8006fc6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d110      	bne.n	8006fc6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	f107 0310 	add.w	r3, r7, #16
 8006fac:	9301      	str	r3, [sp, #4]
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 ffe8 	bl	8007f8c <xTaskCreate>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d001      	beq.n	8006fc6 <osThreadNew+0x11a>
            hTask = NULL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006fc6:	693b      	ldr	r3, [r7, #16]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3728      	adds	r7, #40	@ 0x28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fd8:	f3ef 8305 	mrs	r3, IPSR
 8006fdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fde:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d003      	beq.n	8006fec <osDelay+0x1c>
    stat = osErrorISR;
 8006fe4:	f06f 0305 	mvn.w	r3, #5
 8006fe8:	60fb      	str	r3, [r7, #12]
 8006fea:	e007      	b.n	8006ffc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d002      	beq.n	8006ffc <osDelay+0x2c>
      vTaskDelay(ticks);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f001 f926 	bl	8008248 <vTaskDelay>
    }
  }

  return (stat);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007006:	b580      	push	{r7, lr}
 8007008:	b08a      	sub	sp, #40	@ 0x28
 800700a:	af02      	add	r7, sp, #8
 800700c:	60f8      	str	r0, [r7, #12]
 800700e:	60b9      	str	r1, [r7, #8]
 8007010:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007012:	2300      	movs	r3, #0
 8007014:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007016:	f3ef 8305 	mrs	r3, IPSR
 800701a:	613b      	str	r3, [r7, #16]
  return(result);
 800701c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800701e:	2b00      	cmp	r3, #0
 8007020:	d175      	bne.n	800710e <osSemaphoreNew+0x108>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d072      	beq.n	800710e <osSemaphoreNew+0x108>
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	429a      	cmp	r2, r3
 800702e:	d86e      	bhi.n	800710e <osSemaphoreNew+0x108>
    mem = -1;
 8007030:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007034:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d015      	beq.n	8007068 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d006      	beq.n	8007052 <osSemaphoreNew+0x4c>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	2b4f      	cmp	r3, #79	@ 0x4f
 800704a:	d902      	bls.n	8007052 <osSemaphoreNew+0x4c>
        mem = 1;
 800704c:	2301      	movs	r3, #1
 800704e:	61bb      	str	r3, [r7, #24]
 8007050:	e00c      	b.n	800706c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d108      	bne.n	800706c <osSemaphoreNew+0x66>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d104      	bne.n	800706c <osSemaphoreNew+0x66>
          mem = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	61bb      	str	r3, [r7, #24]
 8007066:	e001      	b.n	800706c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007068:	2300      	movs	r3, #0
 800706a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007072:	d04c      	beq.n	800710e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d128      	bne.n	80070cc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d10a      	bne.n	8007096 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	2203      	movs	r2, #3
 8007086:	9200      	str	r2, [sp, #0]
 8007088:	2200      	movs	r2, #0
 800708a:	2100      	movs	r1, #0
 800708c:	2001      	movs	r0, #1
 800708e:	f000 f995 	bl	80073bc <xQueueGenericCreateStatic>
 8007092:	61f8      	str	r0, [r7, #28]
 8007094:	e005      	b.n	80070a2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007096:	2203      	movs	r2, #3
 8007098:	2100      	movs	r1, #0
 800709a:	2001      	movs	r0, #1
 800709c:	f000 fa0b 	bl	80074b6 <xQueueGenericCreate>
 80070a0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d022      	beq.n	80070ee <osSemaphoreNew+0xe8>
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d01f      	beq.n	80070ee <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80070ae:	2300      	movs	r3, #0
 80070b0:	2200      	movs	r2, #0
 80070b2:	2100      	movs	r1, #0
 80070b4:	69f8      	ldr	r0, [r7, #28]
 80070b6:	f000 facb 	bl	8007650 <xQueueGenericSend>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d016      	beq.n	80070ee <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80070c0:	69f8      	ldr	r0, [r7, #28]
 80070c2:	f000 fd47 	bl	8007b54 <vQueueDelete>
            hSemaphore = NULL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	61fb      	str	r3, [r7, #28]
 80070ca:	e010      	b.n	80070ee <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d108      	bne.n	80070e4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	461a      	mov	r2, r3
 80070d8:	68b9      	ldr	r1, [r7, #8]
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f000 fa49 	bl	8007572 <xQueueCreateCountingSemaphoreStatic>
 80070e0:	61f8      	str	r0, [r7, #28]
 80070e2:	e004      	b.n	80070ee <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80070e4:	68b9      	ldr	r1, [r7, #8]
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f000 fa7c 	bl	80075e4 <xQueueCreateCountingSemaphore>
 80070ec:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00c      	beq.n	800710e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <osSemaphoreNew+0xfc>
          name = attr->name;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	e001      	b.n	8007106 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007102:	2300      	movs	r3, #0
 8007104:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007106:	6979      	ldr	r1, [r7, #20]
 8007108:	69f8      	ldr	r0, [r7, #28]
 800710a:	f000 fe57 	bl	8007dbc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800710e:	69fb      	ldr	r3, [r7, #28]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3720      	adds	r7, #32
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4a07      	ldr	r2, [pc, #28]	@ (8007144 <vApplicationGetIdleTaskMemory+0x2c>)
 8007128:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	4a06      	ldr	r2, [pc, #24]	@ (8007148 <vApplicationGetIdleTaskMemory+0x30>)
 800712e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2280      	movs	r2, #128	@ 0x80
 8007134:	601a      	str	r2, [r3, #0]
}
 8007136:	bf00      	nop
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	200002a0 	.word	0x200002a0
 8007148:	20000348 	.word	0x20000348

0800714c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4a07      	ldr	r2, [pc, #28]	@ (8007178 <vApplicationGetTimerTaskMemory+0x2c>)
 800715c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	4a06      	ldr	r2, [pc, #24]	@ (800717c <vApplicationGetTimerTaskMemory+0x30>)
 8007162:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800716a:	601a      	str	r2, [r3, #0]
}
 800716c:	bf00      	nop
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	20000548 	.word	0x20000548
 800717c:	200005f0 	.word	0x200005f0

08007180 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f103 0208 	add.w	r2, r3, #8
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007198:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f103 0208 	add.w	r2, r3, #8
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f103 0208 	add.w	r2, r3, #8
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071da:	b480      	push	{r7}
 80071dc:	b085      	sub	sp, #20
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	689a      	ldr	r2, [r3, #8]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	1c5a      	adds	r2, r3, #1
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	601a      	str	r2, [r3, #0]
}
 8007216:	bf00      	nop
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007222:	b480      	push	{r7}
 8007224:	b085      	sub	sp, #20
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007238:	d103      	bne.n	8007242 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	e00c      	b.n	800725c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	3308      	adds	r3, #8
 8007246:	60fb      	str	r3, [r7, #12]
 8007248:	e002      	b.n	8007250 <vListInsert+0x2e>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	429a      	cmp	r2, r3
 800725a:	d2f6      	bcs.n	800724a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	683a      	ldr	r2, [r7, #0]
 8007276:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	601a      	str	r2, [r3, #0]
}
 8007288:	bf00      	nop
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	6892      	ldr	r2, [r2, #8]
 80072aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	6852      	ldr	r2, [r2, #4]
 80072b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d103      	bne.n	80072c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	689a      	ldr	r2, [r3, #8]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	1e5a      	subs	r2, r3, #1
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10b      	bne.n	8007314 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800730e:	bf00      	nop
 8007310:	bf00      	nop
 8007312:	e7fd      	b.n	8007310 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007314:	f002 f9a0 	bl	8009658 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007320:	68f9      	ldr	r1, [r7, #12]
 8007322:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007324:	fb01 f303 	mul.w	r3, r1, r3
 8007328:	441a      	add	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007344:	3b01      	subs	r3, #1
 8007346:	68f9      	ldr	r1, [r7, #12]
 8007348:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800734a:	fb01 f303 	mul.w	r3, r1, r3
 800734e:	441a      	add	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	22ff      	movs	r2, #255	@ 0xff
 8007358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	22ff      	movs	r2, #255	@ 0xff
 8007360:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d114      	bne.n	8007394 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d01a      	beq.n	80073a8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	3310      	adds	r3, #16
 8007376:	4618      	mov	r0, r3
 8007378:	f001 fa3a 	bl	80087f0 <xTaskRemoveFromEventList>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d012      	beq.n	80073a8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007382:	4b0d      	ldr	r3, [pc, #52]	@ (80073b8 <xQueueGenericReset+0xd0>)
 8007384:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	e009      	b.n	80073a8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	3310      	adds	r3, #16
 8007398:	4618      	mov	r0, r3
 800739a:	f7ff fef1 	bl	8007180 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3324      	adds	r3, #36	@ 0x24
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7ff feec 	bl	8007180 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80073a8:	f002 f988 	bl	80096bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80073ac:	2301      	movs	r3, #1
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	e000ed04 	.word	0xe000ed04

080073bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08e      	sub	sp, #56	@ 0x38
 80073c0:	af02      	add	r7, sp, #8
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
 80073c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10b      	bne.n	80073e8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80073e2:	bf00      	nop
 80073e4:	bf00      	nop
 80073e6:	e7fd      	b.n	80073e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10b      	bne.n	8007406 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80073ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f2:	f383 8811 	msr	BASEPRI, r3
 80073f6:	f3bf 8f6f 	isb	sy
 80073fa:	f3bf 8f4f 	dsb	sy
 80073fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007400:	bf00      	nop
 8007402:	bf00      	nop
 8007404:	e7fd      	b.n	8007402 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <xQueueGenericCreateStatic+0x56>
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <xQueueGenericCreateStatic+0x5a>
 8007412:	2301      	movs	r3, #1
 8007414:	e000      	b.n	8007418 <xQueueGenericCreateStatic+0x5c>
 8007416:	2300      	movs	r3, #0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10b      	bne.n	8007434 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800741c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	623b      	str	r3, [r7, #32]
}
 800742e:	bf00      	nop
 8007430:	bf00      	nop
 8007432:	e7fd      	b.n	8007430 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d102      	bne.n	8007440 <xQueueGenericCreateStatic+0x84>
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <xQueueGenericCreateStatic+0x88>
 8007440:	2301      	movs	r3, #1
 8007442:	e000      	b.n	8007446 <xQueueGenericCreateStatic+0x8a>
 8007444:	2300      	movs	r3, #0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10b      	bne.n	8007462 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	61fb      	str	r3, [r7, #28]
}
 800745c:	bf00      	nop
 800745e:	bf00      	nop
 8007460:	e7fd      	b.n	800745e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007462:	2350      	movs	r3, #80	@ 0x50
 8007464:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2b50      	cmp	r3, #80	@ 0x50
 800746a:	d00b      	beq.n	8007484 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800746c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	61bb      	str	r3, [r7, #24]
}
 800747e:	bf00      	nop
 8007480:	bf00      	nop
 8007482:	e7fd      	b.n	8007480 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007484:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800748a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00d      	beq.n	80074ac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007498:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800749c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	4613      	mov	r3, r2
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	68b9      	ldr	r1, [r7, #8]
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 f840 	bl	800752c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3730      	adds	r7, #48	@ 0x30
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b08a      	sub	sp, #40	@ 0x28
 80074ba:	af02      	add	r7, sp, #8
 80074bc:	60f8      	str	r0, [r7, #12]
 80074be:	60b9      	str	r1, [r7, #8]
 80074c0:	4613      	mov	r3, r2
 80074c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10b      	bne.n	80074e2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	613b      	str	r3, [r7, #16]
}
 80074dc:	bf00      	nop
 80074de:	bf00      	nop
 80074e0:	e7fd      	b.n	80074de <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	fb02 f303 	mul.w	r3, r2, r3
 80074ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	3350      	adds	r3, #80	@ 0x50
 80074f0:	4618      	mov	r0, r3
 80074f2:	f002 f9d3 	bl	800989c <pvPortMalloc>
 80074f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d011      	beq.n	8007522 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	3350      	adds	r3, #80	@ 0x50
 8007506:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007510:	79fa      	ldrb	r2, [r7, #7]
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	4613      	mov	r3, r2
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	68b9      	ldr	r1, [r7, #8]
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f000 f805 	bl	800752c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007522:	69bb      	ldr	r3, [r7, #24]
	}
 8007524:	4618      	mov	r0, r3
 8007526:	3720      	adds	r7, #32
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
 8007538:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d103      	bne.n	8007548 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	e002      	b.n	800754e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800755a:	2101      	movs	r1, #1
 800755c:	69b8      	ldr	r0, [r7, #24]
 800755e:	f7ff fec3 	bl	80072e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	78fa      	ldrb	r2, [r7, #3]
 8007566:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800756a:	bf00      	nop
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007572:	b580      	push	{r7, lr}
 8007574:	b08a      	sub	sp, #40	@ 0x28
 8007576:	af02      	add	r7, sp, #8
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10b      	bne.n	800759c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	61bb      	str	r3, [r7, #24]
}
 8007596:	bf00      	nop
 8007598:	bf00      	nop
 800759a:	e7fd      	b.n	8007598 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d90b      	bls.n	80075bc <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80075a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	617b      	str	r3, [r7, #20]
}
 80075b6:	bf00      	nop
 80075b8:	bf00      	nop
 80075ba:	e7fd      	b.n	80075b8 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80075bc:	2302      	movs	r3, #2
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	2100      	movs	r1, #0
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f7ff fef8 	bl	80073bc <xQueueGenericCreateStatic>
 80075cc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80075da:	69fb      	ldr	r3, [r7, #28]
	}
 80075dc:	4618      	mov	r0, r3
 80075de:	3720      	adds	r7, #32
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10b      	bne.n	800760c <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	613b      	str	r3, [r7, #16]
}
 8007606:	bf00      	nop
 8007608:	bf00      	nop
 800760a:	e7fd      	b.n	8007608 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	429a      	cmp	r2, r3
 8007612:	d90b      	bls.n	800762c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	60fb      	str	r3, [r7, #12]
}
 8007626:	bf00      	nop
 8007628:	bf00      	nop
 800762a:	e7fd      	b.n	8007628 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800762c:	2202      	movs	r2, #2
 800762e:	2100      	movs	r1, #0
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7ff ff40 	bl	80074b6 <xQueueGenericCreate>
 8007636:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d002      	beq.n	8007644 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007644:	697b      	ldr	r3, [r7, #20]
	}
 8007646:	4618      	mov	r0, r3
 8007648:	3718      	adds	r7, #24
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
	...

08007650 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08e      	sub	sp, #56	@ 0x38
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
 800765c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800765e:	2300      	movs	r3, #0
 8007660:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007668:	2b00      	cmp	r3, #0
 800766a:	d10b      	bne.n	8007684 <xQueueGenericSend+0x34>
	__asm volatile
 800766c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007670:	f383 8811 	msr	BASEPRI, r3
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800767e:	bf00      	nop
 8007680:	bf00      	nop
 8007682:	e7fd      	b.n	8007680 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d103      	bne.n	8007692 <xQueueGenericSend+0x42>
 800768a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800768e:	2b00      	cmp	r3, #0
 8007690:	d101      	bne.n	8007696 <xQueueGenericSend+0x46>
 8007692:	2301      	movs	r3, #1
 8007694:	e000      	b.n	8007698 <xQueueGenericSend+0x48>
 8007696:	2300      	movs	r3, #0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10b      	bne.n	80076b4 <xQueueGenericSend+0x64>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80076ae:	bf00      	nop
 80076b0:	bf00      	nop
 80076b2:	e7fd      	b.n	80076b0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d103      	bne.n	80076c2 <xQueueGenericSend+0x72>
 80076ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d101      	bne.n	80076c6 <xQueueGenericSend+0x76>
 80076c2:	2301      	movs	r3, #1
 80076c4:	e000      	b.n	80076c8 <xQueueGenericSend+0x78>
 80076c6:	2300      	movs	r3, #0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10b      	bne.n	80076e4 <xQueueGenericSend+0x94>
	__asm volatile
 80076cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	623b      	str	r3, [r7, #32]
}
 80076de:	bf00      	nop
 80076e0:	bf00      	nop
 80076e2:	e7fd      	b.n	80076e0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076e4:	f001 fa4a 	bl	8008b7c <xTaskGetSchedulerState>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d102      	bne.n	80076f4 <xQueueGenericSend+0xa4>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <xQueueGenericSend+0xa8>
 80076f4:	2301      	movs	r3, #1
 80076f6:	e000      	b.n	80076fa <xQueueGenericSend+0xaa>
 80076f8:	2300      	movs	r3, #0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10b      	bne.n	8007716 <xQueueGenericSend+0xc6>
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	61fb      	str	r3, [r7, #28]
}
 8007710:	bf00      	nop
 8007712:	bf00      	nop
 8007714:	e7fd      	b.n	8007712 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007716:	f001 ff9f 	bl	8009658 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800771a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800771e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007722:	429a      	cmp	r2, r3
 8007724:	d302      	bcc.n	800772c <xQueueGenericSend+0xdc>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b02      	cmp	r3, #2
 800772a:	d129      	bne.n	8007780 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	68b9      	ldr	r1, [r7, #8]
 8007730:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007732:	f000 fa33 	bl	8007b9c <prvCopyDataToQueue>
 8007736:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800773c:	2b00      	cmp	r3, #0
 800773e:	d010      	beq.n	8007762 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007742:	3324      	adds	r3, #36	@ 0x24
 8007744:	4618      	mov	r0, r3
 8007746:	f001 f853 	bl	80087f0 <xTaskRemoveFromEventList>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d013      	beq.n	8007778 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007750:	4b3f      	ldr	r3, [pc, #252]	@ (8007850 <xQueueGenericSend+0x200>)
 8007752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	e00a      	b.n	8007778 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007764:	2b00      	cmp	r3, #0
 8007766:	d007      	beq.n	8007778 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007768:	4b39      	ldr	r3, [pc, #228]	@ (8007850 <xQueueGenericSend+0x200>)
 800776a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007778:	f001 ffa0 	bl	80096bc <vPortExitCritical>
				return pdPASS;
 800777c:	2301      	movs	r3, #1
 800777e:	e063      	b.n	8007848 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d103      	bne.n	800778e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007786:	f001 ff99 	bl	80096bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800778a:	2300      	movs	r3, #0
 800778c:	e05c      	b.n	8007848 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800778e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007790:	2b00      	cmp	r3, #0
 8007792:	d106      	bne.n	80077a2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007794:	f107 0314 	add.w	r3, r7, #20
 8007798:	4618      	mov	r0, r3
 800779a:	f001 f88d 	bl	80088b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800779e:	2301      	movs	r3, #1
 80077a0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077a2:	f001 ff8b 	bl	80096bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077a6:	f000 fdf5 	bl	8008394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077aa:	f001 ff55 	bl	8009658 <vPortEnterCritical>
 80077ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077b4:	b25b      	sxtb	r3, r3
 80077b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077ba:	d103      	bne.n	80077c4 <xQueueGenericSend+0x174>
 80077bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077ca:	b25b      	sxtb	r3, r3
 80077cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077d0:	d103      	bne.n	80077da <xQueueGenericSend+0x18a>
 80077d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077da:	f001 ff6f 	bl	80096bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077de:	1d3a      	adds	r2, r7, #4
 80077e0:	f107 0314 	add.w	r3, r7, #20
 80077e4:	4611      	mov	r1, r2
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 f87c 	bl	80088e4 <xTaskCheckForTimeOut>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d124      	bne.n	800783c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80077f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077f4:	f000 faca 	bl	8007d8c <prvIsQueueFull>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d018      	beq.n	8007830 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80077fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007800:	3310      	adds	r3, #16
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	4611      	mov	r1, r2
 8007806:	4618      	mov	r0, r3
 8007808:	f000 ffa0 	bl	800874c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800780c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800780e:	f000 fa55 	bl	8007cbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007812:	f000 fdcd 	bl	80083b0 <xTaskResumeAll>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	f47f af7c 	bne.w	8007716 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800781e:	4b0c      	ldr	r3, [pc, #48]	@ (8007850 <xQueueGenericSend+0x200>)
 8007820:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	e772      	b.n	8007716 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007830:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007832:	f000 fa43 	bl	8007cbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007836:	f000 fdbb 	bl	80083b0 <xTaskResumeAll>
 800783a:	e76c      	b.n	8007716 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800783c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800783e:	f000 fa3d 	bl	8007cbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007842:	f000 fdb5 	bl	80083b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007846:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007848:	4618      	mov	r0, r3
 800784a:	3738      	adds	r7, #56	@ 0x38
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	e000ed04 	.word	0xe000ed04

08007854 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b090      	sub	sp, #64	@ 0x40
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
 8007860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10b      	bne.n	8007884 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800787e:	bf00      	nop
 8007880:	bf00      	nop
 8007882:	e7fd      	b.n	8007880 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d103      	bne.n	8007892 <xQueueGenericSendFromISR+0x3e>
 800788a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800788c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <xQueueGenericSendFromISR+0x42>
 8007892:	2301      	movs	r3, #1
 8007894:	e000      	b.n	8007898 <xQueueGenericSendFromISR+0x44>
 8007896:	2300      	movs	r3, #0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10b      	bne.n	80078b4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80078ae:	bf00      	nop
 80078b0:	bf00      	nop
 80078b2:	e7fd      	b.n	80078b0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d103      	bne.n	80078c2 <xQueueGenericSendFromISR+0x6e>
 80078ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d101      	bne.n	80078c6 <xQueueGenericSendFromISR+0x72>
 80078c2:	2301      	movs	r3, #1
 80078c4:	e000      	b.n	80078c8 <xQueueGenericSendFromISR+0x74>
 80078c6:	2300      	movs	r3, #0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10b      	bne.n	80078e4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d0:	f383 8811 	msr	BASEPRI, r3
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	623b      	str	r3, [r7, #32]
}
 80078de:	bf00      	nop
 80078e0:	bf00      	nop
 80078e2:	e7fd      	b.n	80078e0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078e4:	f001 ff98 	bl	8009818 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80078e8:	f3ef 8211 	mrs	r2, BASEPRI
 80078ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	61fa      	str	r2, [r7, #28]
 80078fe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007900:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007902:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007906:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800790a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800790c:	429a      	cmp	r2, r3
 800790e:	d302      	bcc.n	8007916 <xQueueGenericSendFromISR+0xc2>
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	2b02      	cmp	r3, #2
 8007914:	d12f      	bne.n	8007976 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007918:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800791c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007924:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	68b9      	ldr	r1, [r7, #8]
 800792a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800792c:	f000 f936 	bl	8007b9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007930:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007934:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007938:	d112      	bne.n	8007960 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800793a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800793e:	2b00      	cmp	r3, #0
 8007940:	d016      	beq.n	8007970 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007944:	3324      	adds	r3, #36	@ 0x24
 8007946:	4618      	mov	r0, r3
 8007948:	f000 ff52 	bl	80087f0 <xTaskRemoveFromEventList>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00e      	beq.n	8007970 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00b      	beq.n	8007970 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	e007      	b.n	8007970 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007960:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007964:	3301      	adds	r3, #1
 8007966:	b2db      	uxtb	r3, r3
 8007968:	b25a      	sxtb	r2, r3
 800796a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007970:	2301      	movs	r3, #1
 8007972:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007974:	e001      	b.n	800797a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007976:	2300      	movs	r3, #0
 8007978:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800797a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800797c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007984:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007988:	4618      	mov	r0, r3
 800798a:	3740      	adds	r7, #64	@ 0x40
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b08c      	sub	sp, #48	@ 0x30
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800799c:	2300      	movs	r3, #0
 800799e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80079a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10b      	bne.n	80079c2 <xQueueReceive+0x32>
	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	623b      	str	r3, [r7, #32]
}
 80079bc:	bf00      	nop
 80079be:	bf00      	nop
 80079c0:	e7fd      	b.n	80079be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d103      	bne.n	80079d0 <xQueueReceive+0x40>
 80079c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <xQueueReceive+0x44>
 80079d0:	2301      	movs	r3, #1
 80079d2:	e000      	b.n	80079d6 <xQueueReceive+0x46>
 80079d4:	2300      	movs	r3, #0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10b      	bne.n	80079f2 <xQueueReceive+0x62>
	__asm volatile
 80079da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	61fb      	str	r3, [r7, #28]
}
 80079ec:	bf00      	nop
 80079ee:	bf00      	nop
 80079f0:	e7fd      	b.n	80079ee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079f2:	f001 f8c3 	bl	8008b7c <xTaskGetSchedulerState>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d102      	bne.n	8007a02 <xQueueReceive+0x72>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <xQueueReceive+0x76>
 8007a02:	2301      	movs	r3, #1
 8007a04:	e000      	b.n	8007a08 <xQueueReceive+0x78>
 8007a06:	2300      	movs	r3, #0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10b      	bne.n	8007a24 <xQueueReceive+0x94>
	__asm volatile
 8007a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	61bb      	str	r3, [r7, #24]
}
 8007a1e:	bf00      	nop
 8007a20:	bf00      	nop
 8007a22:	e7fd      	b.n	8007a20 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a24:	f001 fe18 	bl	8009658 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d01f      	beq.n	8007a74 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a34:	68b9      	ldr	r1, [r7, #8]
 8007a36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a38:	f000 f91a 	bl	8007c70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3e:	1e5a      	subs	r2, r3, #1
 8007a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a42:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00f      	beq.n	8007a6c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4e:	3310      	adds	r3, #16
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 fecd 	bl	80087f0 <xTaskRemoveFromEventList>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d007      	beq.n	8007a6c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a5c:	4b3c      	ldr	r3, [pc, #240]	@ (8007b50 <xQueueReceive+0x1c0>)
 8007a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a6c:	f001 fe26 	bl	80096bc <vPortExitCritical>
				return pdPASS;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e069      	b.n	8007b48 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d103      	bne.n	8007a82 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a7a:	f001 fe1f 	bl	80096bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	e062      	b.n	8007b48 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d106      	bne.n	8007a96 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a88:	f107 0310 	add.w	r3, r7, #16
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f000 ff13 	bl	80088b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a92:	2301      	movs	r3, #1
 8007a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a96:	f001 fe11 	bl	80096bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a9a:	f000 fc7b 	bl	8008394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a9e:	f001 fddb 	bl	8009658 <vPortEnterCritical>
 8007aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007aa8:	b25b      	sxtb	r3, r3
 8007aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007aae:	d103      	bne.n	8007ab8 <xQueueReceive+0x128>
 8007ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007abe:	b25b      	sxtb	r3, r3
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ac4:	d103      	bne.n	8007ace <xQueueReceive+0x13e>
 8007ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ace:	f001 fdf5 	bl	80096bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ad2:	1d3a      	adds	r2, r7, #4
 8007ad4:	f107 0310 	add.w	r3, r7, #16
 8007ad8:	4611      	mov	r1, r2
 8007ada:	4618      	mov	r0, r3
 8007adc:	f000 ff02 	bl	80088e4 <xTaskCheckForTimeOut>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d123      	bne.n	8007b2e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ae6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ae8:	f000 f93a 	bl	8007d60 <prvIsQueueEmpty>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d017      	beq.n	8007b22 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af4:	3324      	adds	r3, #36	@ 0x24
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	4611      	mov	r1, r2
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 fe26 	bl	800874c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b02:	f000 f8db 	bl	8007cbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b06:	f000 fc53 	bl	80083b0 <xTaskResumeAll>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d189      	bne.n	8007a24 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007b10:	4b0f      	ldr	r3, [pc, #60]	@ (8007b50 <xQueueReceive+0x1c0>)
 8007b12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	e780      	b.n	8007a24 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007b22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b24:	f000 f8ca 	bl	8007cbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b28:	f000 fc42 	bl	80083b0 <xTaskResumeAll>
 8007b2c:	e77a      	b.n	8007a24 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007b2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b30:	f000 f8c4 	bl	8007cbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b34:	f000 fc3c 	bl	80083b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b3a:	f000 f911 	bl	8007d60 <prvIsQueueEmpty>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f43f af6f 	beq.w	8007a24 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3730      	adds	r7, #48	@ 0x30
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	e000ed04 	.word	0xe000ed04

08007b54 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10b      	bne.n	8007b7e <vQueueDelete+0x2a>
	__asm volatile
 8007b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	60bb      	str	r3, [r7, #8]
}
 8007b78:	bf00      	nop
 8007b7a:	bf00      	nop
 8007b7c:	e7fd      	b.n	8007b7a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f000 f946 	bl	8007e10 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d102      	bne.n	8007b94 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f001 ff52 	bl	8009a38 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007b94:	bf00      	nop
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10d      	bne.n	8007bd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d14d      	bne.n	8007c5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 fff6 	bl	8008bb8 <xTaskPriorityDisinherit>
 8007bcc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	609a      	str	r2, [r3, #8]
 8007bd4:	e043      	b.n	8007c5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d119      	bne.n	8007c10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6858      	ldr	r0, [r3, #4]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be4:	461a      	mov	r2, r3
 8007be6:	68b9      	ldr	r1, [r7, #8]
 8007be8:	f002 f8ca 	bl	8009d80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf4:	441a      	add	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d32b      	bcc.n	8007c5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	605a      	str	r2, [r3, #4]
 8007c0e:	e026      	b.n	8007c5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	68d8      	ldr	r0, [r3, #12]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c18:	461a      	mov	r2, r3
 8007c1a:	68b9      	ldr	r1, [r7, #8]
 8007c1c:	f002 f8b0 	bl	8009d80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	68da      	ldr	r2, [r3, #12]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c28:	425b      	negs	r3, r3
 8007c2a:	441a      	add	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	68da      	ldr	r2, [r3, #12]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d207      	bcs.n	8007c4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c44:	425b      	negs	r3, r3
 8007c46:	441a      	add	r2, r3
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d105      	bne.n	8007c5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007c66:	697b      	ldr	r3, [r7, #20]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3718      	adds	r7, #24
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d018      	beq.n	8007cb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68da      	ldr	r2, [r3, #12]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c8a:	441a      	add	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68da      	ldr	r2, [r3, #12]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d303      	bcc.n	8007ca4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68d9      	ldr	r1, [r3, #12]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cac:	461a      	mov	r2, r3
 8007cae:	6838      	ldr	r0, [r7, #0]
 8007cb0:	f002 f866 	bl	8009d80 <memcpy>
	}
}
 8007cb4:	bf00      	nop
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007cc4:	f001 fcc8 	bl	8009658 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cd0:	e011      	b.n	8007cf6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d012      	beq.n	8007d00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	3324      	adds	r3, #36	@ 0x24
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f000 fd86 	bl	80087f0 <xTaskRemoveFromEventList>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007cea:	f000 fe5f 	bl	80089ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	dce9      	bgt.n	8007cd2 <prvUnlockQueue+0x16>
 8007cfe:	e000      	b.n	8007d02 <prvUnlockQueue+0x46>
					break;
 8007d00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	22ff      	movs	r2, #255	@ 0xff
 8007d06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007d0a:	f001 fcd7 	bl	80096bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d0e:	f001 fca3 	bl	8009658 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d1a:	e011      	b.n	8007d40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d012      	beq.n	8007d4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	3310      	adds	r3, #16
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f000 fd61 	bl	80087f0 <xTaskRemoveFromEventList>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d34:	f000 fe3a 	bl	80089ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d38:	7bbb      	ldrb	r3, [r7, #14]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	dce9      	bgt.n	8007d1c <prvUnlockQueue+0x60>
 8007d48:	e000      	b.n	8007d4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	22ff      	movs	r2, #255	@ 0xff
 8007d50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007d54:	f001 fcb2 	bl	80096bc <vPortExitCritical>
}
 8007d58:	bf00      	nop
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d68:	f001 fc76 	bl	8009658 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d102      	bne.n	8007d7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d74:	2301      	movs	r3, #1
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	e001      	b.n	8007d7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d7e:	f001 fc9d 	bl	80096bc <vPortExitCritical>

	return xReturn;
 8007d82:	68fb      	ldr	r3, [r7, #12]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d94:	f001 fc60 	bl	8009658 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d102      	bne.n	8007daa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007da4:	2301      	movs	r3, #1
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	e001      	b.n	8007dae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007daa:	2300      	movs	r3, #0
 8007dac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dae:	f001 fc85 	bl	80096bc <vPortExitCritical>

	return xReturn;
 8007db2:	68fb      	ldr	r3, [r7, #12]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	60fb      	str	r3, [r7, #12]
 8007dca:	e014      	b.n	8007df6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007dcc:	4a0f      	ldr	r2, [pc, #60]	@ (8007e0c <vQueueAddToRegistry+0x50>)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10b      	bne.n	8007df0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007dd8:	490c      	ldr	r1, [pc, #48]	@ (8007e0c <vQueueAddToRegistry+0x50>)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007de2:	4a0a      	ldr	r2, [pc, #40]	@ (8007e0c <vQueueAddToRegistry+0x50>)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	00db      	lsls	r3, r3, #3
 8007de8:	4413      	add	r3, r2
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007dee:	e006      	b.n	8007dfe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3301      	adds	r3, #1
 8007df4:	60fb      	str	r3, [r7, #12]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2b07      	cmp	r3, #7
 8007dfa:	d9e7      	bls.n	8007dcc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007dfc:	bf00      	nop
 8007dfe:	bf00      	nop
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	200009f0 	.word	0x200009f0

08007e10 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e18:	2300      	movs	r3, #0
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	e016      	b.n	8007e4c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007e1e:	4a10      	ldr	r2, [pc, #64]	@ (8007e60 <vQueueUnregisterQueue+0x50>)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	4413      	add	r3, r2
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d10b      	bne.n	8007e46 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007e2e:	4a0c      	ldr	r2, [pc, #48]	@ (8007e60 <vQueueUnregisterQueue+0x50>)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2100      	movs	r1, #0
 8007e34:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007e38:	4a09      	ldr	r2, [pc, #36]	@ (8007e60 <vQueueUnregisterQueue+0x50>)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	00db      	lsls	r3, r3, #3
 8007e3e:	4413      	add	r3, r2
 8007e40:	2200      	movs	r2, #0
 8007e42:	605a      	str	r2, [r3, #4]
				break;
 8007e44:	e006      	b.n	8007e54 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2b07      	cmp	r3, #7
 8007e50:	d9e5      	bls.n	8007e1e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007e52:	bf00      	nop
 8007e54:	bf00      	nop
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	200009f0 	.word	0x200009f0

08007e64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e74:	f001 fbf0 	bl	8009658 <vPortEnterCritical>
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e7e:	b25b      	sxtb	r3, r3
 8007e80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e84:	d103      	bne.n	8007e8e <vQueueWaitForMessageRestricted+0x2a>
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e94:	b25b      	sxtb	r3, r3
 8007e96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e9a:	d103      	bne.n	8007ea4 <vQueueWaitForMessageRestricted+0x40>
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ea4:	f001 fc0a 	bl	80096bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d106      	bne.n	8007ebe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	3324      	adds	r3, #36	@ 0x24
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	68b9      	ldr	r1, [r7, #8]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 fc6d 	bl	8008798 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ebe:	6978      	ldr	r0, [r7, #20]
 8007ec0:	f7ff fefc 	bl	8007cbc <prvUnlockQueue>
	}
 8007ec4:	bf00      	nop
 8007ec6:	3718      	adds	r7, #24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b08e      	sub	sp, #56	@ 0x38
 8007ed0:	af04      	add	r7, sp, #16
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
 8007ed8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10b      	bne.n	8007ef8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	623b      	str	r3, [r7, #32]
}
 8007ef2:	bf00      	nop
 8007ef4:	bf00      	nop
 8007ef6:	e7fd      	b.n	8007ef4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10b      	bne.n	8007f16 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	61fb      	str	r3, [r7, #28]
}
 8007f10:	bf00      	nop
 8007f12:	bf00      	nop
 8007f14:	e7fd      	b.n	8007f12 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f16:	23a8      	movs	r3, #168	@ 0xa8
 8007f18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	2ba8      	cmp	r3, #168	@ 0xa8
 8007f1e:	d00b      	beq.n	8007f38 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	61bb      	str	r3, [r7, #24]
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	e7fd      	b.n	8007f34 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f38:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d01e      	beq.n	8007f7e <xTaskCreateStatic+0xb2>
 8007f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d01b      	beq.n	8007f7e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f48:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f4e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f52:	2202      	movs	r2, #2
 8007f54:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f58:	2300      	movs	r3, #0
 8007f5a:	9303      	str	r3, [sp, #12]
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5e:	9302      	str	r3, [sp, #8]
 8007f60:	f107 0314 	add.w	r3, r7, #20
 8007f64:	9301      	str	r3, [sp, #4]
 8007f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	68b9      	ldr	r1, [r7, #8]
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 f851 	bl	8008018 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f78:	f000 f8f6 	bl	8008168 <prvAddNewTaskToReadyList>
 8007f7c:	e001      	b.n	8007f82 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f82:	697b      	ldr	r3, [r7, #20]
	}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3728      	adds	r7, #40	@ 0x28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b08c      	sub	sp, #48	@ 0x30
 8007f90:	af04      	add	r7, sp, #16
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	603b      	str	r3, [r7, #0]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007f9c:	88fb      	ldrh	r3, [r7, #6]
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f001 fc7b 	bl	800989c <pvPortMalloc>
 8007fa6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00e      	beq.n	8007fcc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fae:	20a8      	movs	r0, #168	@ 0xa8
 8007fb0:	f001 fc74 	bl	800989c <pvPortMalloc>
 8007fb4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8007fc2:	e005      	b.n	8007fd0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007fc4:	6978      	ldr	r0, [r7, #20]
 8007fc6:	f001 fd37 	bl	8009a38 <vPortFree>
 8007fca:	e001      	b.n	8007fd0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d017      	beq.n	8008006 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007fde:	88fa      	ldrh	r2, [r7, #6]
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	9303      	str	r3, [sp, #12]
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	9302      	str	r3, [sp, #8]
 8007fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fea:	9301      	str	r3, [sp, #4]
 8007fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	68b9      	ldr	r1, [r7, #8]
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 f80f 	bl	8008018 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ffa:	69f8      	ldr	r0, [r7, #28]
 8007ffc:	f000 f8b4 	bl	8008168 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008000:	2301      	movs	r3, #1
 8008002:	61bb      	str	r3, [r7, #24]
 8008004:	e002      	b.n	800800c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008006:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800800a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800800c:	69bb      	ldr	r3, [r7, #24]
	}
 800800e:	4618      	mov	r0, r3
 8008010:	3720      	adds	r7, #32
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
	...

08008018 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b088      	sub	sp, #32
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
 8008024:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008028:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	461a      	mov	r2, r3
 8008030:	21a5      	movs	r1, #165	@ 0xa5
 8008032:	f001 fe21 	bl	8009c78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008038:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008040:	3b01      	subs	r3, #1
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	f023 0307 	bic.w	r3, r3, #7
 800804e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	f003 0307 	and.w	r3, r3, #7
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00b      	beq.n	8008072 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	617b      	str	r3, [r7, #20]
}
 800806c:	bf00      	nop
 800806e:	bf00      	nop
 8008070:	e7fd      	b.n	800806e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d01f      	beq.n	80080b8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008078:	2300      	movs	r3, #0
 800807a:	61fb      	str	r3, [r7, #28]
 800807c:	e012      	b.n	80080a4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	4413      	add	r3, r2
 8008084:	7819      	ldrb	r1, [r3, #0]
 8008086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	4413      	add	r3, r2
 800808c:	3334      	adds	r3, #52	@ 0x34
 800808e:	460a      	mov	r2, r1
 8008090:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	4413      	add	r3, r2
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d006      	beq.n	80080ac <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	3301      	adds	r3, #1
 80080a2:	61fb      	str	r3, [r7, #28]
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	2b0f      	cmp	r3, #15
 80080a8:	d9e9      	bls.n	800807e <prvInitialiseNewTask+0x66>
 80080aa:	e000      	b.n	80080ae <prvInitialiseNewTask+0x96>
			{
				break;
 80080ac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80080b6:	e003      	b.n	80080c0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c2:	2b37      	cmp	r3, #55	@ 0x37
 80080c4:	d901      	bls.n	80080ca <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080c6:	2337      	movs	r3, #55	@ 0x37
 80080c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080d4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80080d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d8:	2200      	movs	r2, #0
 80080da:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080de:	3304      	adds	r3, #4
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7ff f86d 	bl	80071c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e8:	3318      	adds	r3, #24
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7ff f868 	bl	80071c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80080fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008102:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008104:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008108:	2200      	movs	r2, #0
 800810a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800810e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008110:	2200      	movs	r2, #0
 8008112:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008118:	3354      	adds	r3, #84	@ 0x54
 800811a:	224c      	movs	r2, #76	@ 0x4c
 800811c:	2100      	movs	r1, #0
 800811e:	4618      	mov	r0, r3
 8008120:	f001 fdaa 	bl	8009c78 <memset>
 8008124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008126:	4a0d      	ldr	r2, [pc, #52]	@ (800815c <prvInitialiseNewTask+0x144>)
 8008128:	659a      	str	r2, [r3, #88]	@ 0x58
 800812a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812c:	4a0c      	ldr	r2, [pc, #48]	@ (8008160 <prvInitialiseNewTask+0x148>)
 800812e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008132:	4a0c      	ldr	r2, [pc, #48]	@ (8008164 <prvInitialiseNewTask+0x14c>)
 8008134:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	68f9      	ldr	r1, [r7, #12]
 800813a:	69b8      	ldr	r0, [r7, #24]
 800813c:	f001 f95a 	bl	80093f4 <pxPortInitialiseStack>
 8008140:	4602      	mov	r2, r0
 8008142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008144:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800814c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800814e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008150:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008152:	bf00      	nop
 8008154:	3720      	adds	r7, #32
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	20001c3c 	.word	0x20001c3c
 8008160:	20001ca4 	.word	0x20001ca4
 8008164:	20001d0c 	.word	0x20001d0c

08008168 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008170:	f001 fa72 	bl	8009658 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008174:	4b2d      	ldr	r3, [pc, #180]	@ (800822c <prvAddNewTaskToReadyList+0xc4>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	3301      	adds	r3, #1
 800817a:	4a2c      	ldr	r2, [pc, #176]	@ (800822c <prvAddNewTaskToReadyList+0xc4>)
 800817c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800817e:	4b2c      	ldr	r3, [pc, #176]	@ (8008230 <prvAddNewTaskToReadyList+0xc8>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d109      	bne.n	800819a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008186:	4a2a      	ldr	r2, [pc, #168]	@ (8008230 <prvAddNewTaskToReadyList+0xc8>)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800818c:	4b27      	ldr	r3, [pc, #156]	@ (800822c <prvAddNewTaskToReadyList+0xc4>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d110      	bne.n	80081b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008194:	f000 fc2e 	bl	80089f4 <prvInitialiseTaskLists>
 8008198:	e00d      	b.n	80081b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800819a:	4b26      	ldr	r3, [pc, #152]	@ (8008234 <prvAddNewTaskToReadyList+0xcc>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d109      	bne.n	80081b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081a2:	4b23      	ldr	r3, [pc, #140]	@ (8008230 <prvAddNewTaskToReadyList+0xc8>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d802      	bhi.n	80081b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081b0:	4a1f      	ldr	r2, [pc, #124]	@ (8008230 <prvAddNewTaskToReadyList+0xc8>)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081b6:	4b20      	ldr	r3, [pc, #128]	@ (8008238 <prvAddNewTaskToReadyList+0xd0>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3301      	adds	r3, #1
 80081bc:	4a1e      	ldr	r2, [pc, #120]	@ (8008238 <prvAddNewTaskToReadyList+0xd0>)
 80081be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081c0:	4b1d      	ldr	r3, [pc, #116]	@ (8008238 <prvAddNewTaskToReadyList+0xd0>)
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081cc:	4b1b      	ldr	r3, [pc, #108]	@ (800823c <prvAddNewTaskToReadyList+0xd4>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d903      	bls.n	80081dc <prvAddNewTaskToReadyList+0x74>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d8:	4a18      	ldr	r2, [pc, #96]	@ (800823c <prvAddNewTaskToReadyList+0xd4>)
 80081da:	6013      	str	r3, [r2, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081e0:	4613      	mov	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4a15      	ldr	r2, [pc, #84]	@ (8008240 <prvAddNewTaskToReadyList+0xd8>)
 80081ea:	441a      	add	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	3304      	adds	r3, #4
 80081f0:	4619      	mov	r1, r3
 80081f2:	4610      	mov	r0, r2
 80081f4:	f7fe fff1 	bl	80071da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081f8:	f001 fa60 	bl	80096bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008234 <prvAddNewTaskToReadyList+0xcc>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00e      	beq.n	8008222 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008204:	4b0a      	ldr	r3, [pc, #40]	@ (8008230 <prvAddNewTaskToReadyList+0xc8>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820e:	429a      	cmp	r2, r3
 8008210:	d207      	bcs.n	8008222 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008212:	4b0c      	ldr	r3, [pc, #48]	@ (8008244 <prvAddNewTaskToReadyList+0xdc>)
 8008214:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008222:	bf00      	nop
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20000f04 	.word	0x20000f04
 8008230:	20000a30 	.word	0x20000a30
 8008234:	20000f10 	.word	0x20000f10
 8008238:	20000f20 	.word	0x20000f20
 800823c:	20000f0c 	.word	0x20000f0c
 8008240:	20000a34 	.word	0x20000a34
 8008244:	e000ed04 	.word	0xe000ed04

08008248 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008250:	2300      	movs	r3, #0
 8008252:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d018      	beq.n	800828c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800825a:	4b14      	ldr	r3, [pc, #80]	@ (80082ac <vTaskDelay+0x64>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00b      	beq.n	800827a <vTaskDelay+0x32>
	__asm volatile
 8008262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	60bb      	str	r3, [r7, #8]
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop
 8008278:	e7fd      	b.n	8008276 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800827a:	f000 f88b 	bl	8008394 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800827e:	2100      	movs	r1, #0
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fd09 	bl	8008c98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008286:	f000 f893 	bl	80083b0 <xTaskResumeAll>
 800828a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d107      	bne.n	80082a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008292:	4b07      	ldr	r3, [pc, #28]	@ (80082b0 <vTaskDelay+0x68>)
 8008294:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082a2:	bf00      	nop
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	20000f2c 	.word	0x20000f2c
 80082b0:	e000ed04 	.word	0xe000ed04

080082b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b08a      	sub	sp, #40	@ 0x28
 80082b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082ba:	2300      	movs	r3, #0
 80082bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082be:	2300      	movs	r3, #0
 80082c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082c2:	463a      	mov	r2, r7
 80082c4:	1d39      	adds	r1, r7, #4
 80082c6:	f107 0308 	add.w	r3, r7, #8
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fe ff24 	bl	8007118 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	9202      	str	r2, [sp, #8]
 80082d8:	9301      	str	r3, [sp, #4]
 80082da:	2300      	movs	r3, #0
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	2300      	movs	r3, #0
 80082e0:	460a      	mov	r2, r1
 80082e2:	4924      	ldr	r1, [pc, #144]	@ (8008374 <vTaskStartScheduler+0xc0>)
 80082e4:	4824      	ldr	r0, [pc, #144]	@ (8008378 <vTaskStartScheduler+0xc4>)
 80082e6:	f7ff fdf1 	bl	8007ecc <xTaskCreateStatic>
 80082ea:	4603      	mov	r3, r0
 80082ec:	4a23      	ldr	r2, [pc, #140]	@ (800837c <vTaskStartScheduler+0xc8>)
 80082ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80082f0:	4b22      	ldr	r3, [pc, #136]	@ (800837c <vTaskStartScheduler+0xc8>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d002      	beq.n	80082fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80082f8:	2301      	movs	r3, #1
 80082fa:	617b      	str	r3, [r7, #20]
 80082fc:	e001      	b.n	8008302 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082fe:	2300      	movs	r3, #0
 8008300:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d102      	bne.n	800830e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008308:	f000 fd1a 	bl	8008d40 <xTimerCreateTimerTask>
 800830c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d11b      	bne.n	800834c <vTaskStartScheduler+0x98>
	__asm volatile
 8008314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	613b      	str	r3, [r7, #16]
}
 8008326:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008328:	4b15      	ldr	r3, [pc, #84]	@ (8008380 <vTaskStartScheduler+0xcc>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	3354      	adds	r3, #84	@ 0x54
 800832e:	4a15      	ldr	r2, [pc, #84]	@ (8008384 <vTaskStartScheduler+0xd0>)
 8008330:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008332:	4b15      	ldr	r3, [pc, #84]	@ (8008388 <vTaskStartScheduler+0xd4>)
 8008334:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008338:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800833a:	4b14      	ldr	r3, [pc, #80]	@ (800838c <vTaskStartScheduler+0xd8>)
 800833c:	2201      	movs	r2, #1
 800833e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008340:	4b13      	ldr	r3, [pc, #76]	@ (8008390 <vTaskStartScheduler+0xdc>)
 8008342:	2200      	movs	r2, #0
 8008344:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008346:	f001 f8e3 	bl	8009510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800834a:	e00f      	b.n	800836c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008352:	d10b      	bne.n	800836c <vTaskStartScheduler+0xb8>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	60fb      	str	r3, [r7, #12]
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	e7fd      	b.n	8008368 <vTaskStartScheduler+0xb4>
}
 800836c:	bf00      	nop
 800836e:	3718      	adds	r7, #24
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	08009ea8 	.word	0x08009ea8
 8008378:	080089c5 	.word	0x080089c5
 800837c:	20000f28 	.word	0x20000f28
 8008380:	20000a30 	.word	0x20000a30
 8008384:	20000010 	.word	0x20000010
 8008388:	20000f24 	.word	0x20000f24
 800838c:	20000f10 	.word	0x20000f10
 8008390:	20000f08 	.word	0x20000f08

08008394 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008394:	b480      	push	{r7}
 8008396:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008398:	4b04      	ldr	r3, [pc, #16]	@ (80083ac <vTaskSuspendAll+0x18>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3301      	adds	r3, #1
 800839e:	4a03      	ldr	r2, [pc, #12]	@ (80083ac <vTaskSuspendAll+0x18>)
 80083a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80083a2:	bf00      	nop
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	20000f2c 	.word	0x20000f2c

080083b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083ba:	2300      	movs	r3, #0
 80083bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083be:	4b42      	ldr	r3, [pc, #264]	@ (80084c8 <xTaskResumeAll+0x118>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10b      	bne.n	80083de <xTaskResumeAll+0x2e>
	__asm volatile
 80083c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	603b      	str	r3, [r7, #0]
}
 80083d8:	bf00      	nop
 80083da:	bf00      	nop
 80083dc:	e7fd      	b.n	80083da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083de:	f001 f93b 	bl	8009658 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083e2:	4b39      	ldr	r3, [pc, #228]	@ (80084c8 <xTaskResumeAll+0x118>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	4a37      	ldr	r2, [pc, #220]	@ (80084c8 <xTaskResumeAll+0x118>)
 80083ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ec:	4b36      	ldr	r3, [pc, #216]	@ (80084c8 <xTaskResumeAll+0x118>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d162      	bne.n	80084ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80083f4:	4b35      	ldr	r3, [pc, #212]	@ (80084cc <xTaskResumeAll+0x11c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d05e      	beq.n	80084ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083fc:	e02f      	b.n	800845e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083fe:	4b34      	ldr	r3, [pc, #208]	@ (80084d0 <xTaskResumeAll+0x120>)
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	3318      	adds	r3, #24
 800840a:	4618      	mov	r0, r3
 800840c:	f7fe ff42 	bl	8007294 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	3304      	adds	r3, #4
 8008414:	4618      	mov	r0, r3
 8008416:	f7fe ff3d 	bl	8007294 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800841e:	4b2d      	ldr	r3, [pc, #180]	@ (80084d4 <xTaskResumeAll+0x124>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	429a      	cmp	r2, r3
 8008424:	d903      	bls.n	800842e <xTaskResumeAll+0x7e>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800842a:	4a2a      	ldr	r2, [pc, #168]	@ (80084d4 <xTaskResumeAll+0x124>)
 800842c:	6013      	str	r3, [r2, #0]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008432:	4613      	mov	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4a27      	ldr	r2, [pc, #156]	@ (80084d8 <xTaskResumeAll+0x128>)
 800843c:	441a      	add	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	3304      	adds	r3, #4
 8008442:	4619      	mov	r1, r3
 8008444:	4610      	mov	r0, r2
 8008446:	f7fe fec8 	bl	80071da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800844e:	4b23      	ldr	r3, [pc, #140]	@ (80084dc <xTaskResumeAll+0x12c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008454:	429a      	cmp	r2, r3
 8008456:	d302      	bcc.n	800845e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008458:	4b21      	ldr	r3, [pc, #132]	@ (80084e0 <xTaskResumeAll+0x130>)
 800845a:	2201      	movs	r2, #1
 800845c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800845e:	4b1c      	ldr	r3, [pc, #112]	@ (80084d0 <xTaskResumeAll+0x120>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1cb      	bne.n	80083fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800846c:	f000 fb66 	bl	8008b3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008470:	4b1c      	ldr	r3, [pc, #112]	@ (80084e4 <xTaskResumeAll+0x134>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d010      	beq.n	800849e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800847c:	f000 f846 	bl	800850c <xTaskIncrementTick>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d002      	beq.n	800848c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008486:	4b16      	ldr	r3, [pc, #88]	@ (80084e0 <xTaskResumeAll+0x130>)
 8008488:	2201      	movs	r2, #1
 800848a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	3b01      	subs	r3, #1
 8008490:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1f1      	bne.n	800847c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008498:	4b12      	ldr	r3, [pc, #72]	@ (80084e4 <xTaskResumeAll+0x134>)
 800849a:	2200      	movs	r2, #0
 800849c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800849e:	4b10      	ldr	r3, [pc, #64]	@ (80084e0 <xTaskResumeAll+0x130>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d009      	beq.n	80084ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084a6:	2301      	movs	r3, #1
 80084a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084aa:	4b0f      	ldr	r3, [pc, #60]	@ (80084e8 <xTaskResumeAll+0x138>)
 80084ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084b0:	601a      	str	r2, [r3, #0]
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084ba:	f001 f8ff 	bl	80096bc <vPortExitCritical>

	return xAlreadyYielded;
 80084be:	68bb      	ldr	r3, [r7, #8]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	20000f2c 	.word	0x20000f2c
 80084cc:	20000f04 	.word	0x20000f04
 80084d0:	20000ec4 	.word	0x20000ec4
 80084d4:	20000f0c 	.word	0x20000f0c
 80084d8:	20000a34 	.word	0x20000a34
 80084dc:	20000a30 	.word	0x20000a30
 80084e0:	20000f18 	.word	0x20000f18
 80084e4:	20000f14 	.word	0x20000f14
 80084e8:	e000ed04 	.word	0xe000ed04

080084ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80084f2:	4b05      	ldr	r3, [pc, #20]	@ (8008508 <xTaskGetTickCount+0x1c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80084f8:	687b      	ldr	r3, [r7, #4]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	370c      	adds	r7, #12
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	20000f08 	.word	0x20000f08

0800850c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008512:	2300      	movs	r3, #0
 8008514:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008516:	4b4f      	ldr	r3, [pc, #316]	@ (8008654 <xTaskIncrementTick+0x148>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	f040 8090 	bne.w	8008640 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008520:	4b4d      	ldr	r3, [pc, #308]	@ (8008658 <xTaskIncrementTick+0x14c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3301      	adds	r3, #1
 8008526:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008528:	4a4b      	ldr	r2, [pc, #300]	@ (8008658 <xTaskIncrementTick+0x14c>)
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d121      	bne.n	8008578 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008534:	4b49      	ldr	r3, [pc, #292]	@ (800865c <xTaskIncrementTick+0x150>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00b      	beq.n	8008556 <xTaskIncrementTick+0x4a>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	603b      	str	r3, [r7, #0]
}
 8008550:	bf00      	nop
 8008552:	bf00      	nop
 8008554:	e7fd      	b.n	8008552 <xTaskIncrementTick+0x46>
 8008556:	4b41      	ldr	r3, [pc, #260]	@ (800865c <xTaskIncrementTick+0x150>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	60fb      	str	r3, [r7, #12]
 800855c:	4b40      	ldr	r3, [pc, #256]	@ (8008660 <xTaskIncrementTick+0x154>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a3e      	ldr	r2, [pc, #248]	@ (800865c <xTaskIncrementTick+0x150>)
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	4a3e      	ldr	r2, [pc, #248]	@ (8008660 <xTaskIncrementTick+0x154>)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	4b3e      	ldr	r3, [pc, #248]	@ (8008664 <xTaskIncrementTick+0x158>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3301      	adds	r3, #1
 8008570:	4a3c      	ldr	r2, [pc, #240]	@ (8008664 <xTaskIncrementTick+0x158>)
 8008572:	6013      	str	r3, [r2, #0]
 8008574:	f000 fae2 	bl	8008b3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008578:	4b3b      	ldr	r3, [pc, #236]	@ (8008668 <xTaskIncrementTick+0x15c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	429a      	cmp	r2, r3
 8008580:	d349      	bcc.n	8008616 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008582:	4b36      	ldr	r3, [pc, #216]	@ (800865c <xTaskIncrementTick+0x150>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d104      	bne.n	8008596 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800858c:	4b36      	ldr	r3, [pc, #216]	@ (8008668 <xTaskIncrementTick+0x15c>)
 800858e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008592:	601a      	str	r2, [r3, #0]
					break;
 8008594:	e03f      	b.n	8008616 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008596:	4b31      	ldr	r3, [pc, #196]	@ (800865c <xTaskIncrementTick+0x150>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d203      	bcs.n	80085b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085ae:	4a2e      	ldr	r2, [pc, #184]	@ (8008668 <xTaskIncrementTick+0x15c>)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085b4:	e02f      	b.n	8008616 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	3304      	adds	r3, #4
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fe fe6a 	bl	8007294 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d004      	beq.n	80085d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	3318      	adds	r3, #24
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7fe fe61 	bl	8007294 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085d6:	4b25      	ldr	r3, [pc, #148]	@ (800866c <xTaskIncrementTick+0x160>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d903      	bls.n	80085e6 <xTaskIncrementTick+0xda>
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e2:	4a22      	ldr	r2, [pc, #136]	@ (800866c <xTaskIncrementTick+0x160>)
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ea:	4613      	mov	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4a1f      	ldr	r2, [pc, #124]	@ (8008670 <xTaskIncrementTick+0x164>)
 80085f4:	441a      	add	r2, r3
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	3304      	adds	r3, #4
 80085fa:	4619      	mov	r1, r3
 80085fc:	4610      	mov	r0, r2
 80085fe:	f7fe fdec 	bl	80071da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008606:	4b1b      	ldr	r3, [pc, #108]	@ (8008674 <xTaskIncrementTick+0x168>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860c:	429a      	cmp	r2, r3
 800860e:	d3b8      	bcc.n	8008582 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008610:	2301      	movs	r3, #1
 8008612:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008614:	e7b5      	b.n	8008582 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008616:	4b17      	ldr	r3, [pc, #92]	@ (8008674 <xTaskIncrementTick+0x168>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800861c:	4914      	ldr	r1, [pc, #80]	@ (8008670 <xTaskIncrementTick+0x164>)
 800861e:	4613      	mov	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	440b      	add	r3, r1
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d901      	bls.n	8008632 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800862e:	2301      	movs	r3, #1
 8008630:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008632:	4b11      	ldr	r3, [pc, #68]	@ (8008678 <xTaskIncrementTick+0x16c>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d007      	beq.n	800864a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800863a:	2301      	movs	r3, #1
 800863c:	617b      	str	r3, [r7, #20]
 800863e:	e004      	b.n	800864a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008640:	4b0e      	ldr	r3, [pc, #56]	@ (800867c <xTaskIncrementTick+0x170>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3301      	adds	r3, #1
 8008646:	4a0d      	ldr	r2, [pc, #52]	@ (800867c <xTaskIncrementTick+0x170>)
 8008648:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800864a:	697b      	ldr	r3, [r7, #20]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	20000f2c 	.word	0x20000f2c
 8008658:	20000f08 	.word	0x20000f08
 800865c:	20000ebc 	.word	0x20000ebc
 8008660:	20000ec0 	.word	0x20000ec0
 8008664:	20000f1c 	.word	0x20000f1c
 8008668:	20000f24 	.word	0x20000f24
 800866c:	20000f0c 	.word	0x20000f0c
 8008670:	20000a34 	.word	0x20000a34
 8008674:	20000a30 	.word	0x20000a30
 8008678:	20000f18 	.word	0x20000f18
 800867c:	20000f14 	.word	0x20000f14

08008680 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008686:	4b2b      	ldr	r3, [pc, #172]	@ (8008734 <vTaskSwitchContext+0xb4>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800868e:	4b2a      	ldr	r3, [pc, #168]	@ (8008738 <vTaskSwitchContext+0xb8>)
 8008690:	2201      	movs	r2, #1
 8008692:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008694:	e047      	b.n	8008726 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008696:	4b28      	ldr	r3, [pc, #160]	@ (8008738 <vTaskSwitchContext+0xb8>)
 8008698:	2200      	movs	r2, #0
 800869a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800869c:	4b27      	ldr	r3, [pc, #156]	@ (800873c <vTaskSwitchContext+0xbc>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	60fb      	str	r3, [r7, #12]
 80086a2:	e011      	b.n	80086c8 <vTaskSwitchContext+0x48>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10b      	bne.n	80086c2 <vTaskSwitchContext+0x42>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	607b      	str	r3, [r7, #4]
}
 80086bc:	bf00      	nop
 80086be:	bf00      	nop
 80086c0:	e7fd      	b.n	80086be <vTaskSwitchContext+0x3e>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	60fb      	str	r3, [r7, #12]
 80086c8:	491d      	ldr	r1, [pc, #116]	@ (8008740 <vTaskSwitchContext+0xc0>)
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	4613      	mov	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4413      	add	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	440b      	add	r3, r1
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0e3      	beq.n	80086a4 <vTaskSwitchContext+0x24>
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	4613      	mov	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4a16      	ldr	r2, [pc, #88]	@ (8008740 <vTaskSwitchContext+0xc0>)
 80086e8:	4413      	add	r3, r2
 80086ea:	60bb      	str	r3, [r7, #8]
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	685a      	ldr	r2, [r3, #4]
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	605a      	str	r2, [r3, #4]
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	3308      	adds	r3, #8
 80086fe:	429a      	cmp	r2, r3
 8008700:	d104      	bne.n	800870c <vTaskSwitchContext+0x8c>
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	605a      	str	r2, [r3, #4]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	4a0c      	ldr	r2, [pc, #48]	@ (8008744 <vTaskSwitchContext+0xc4>)
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	4a09      	ldr	r2, [pc, #36]	@ (800873c <vTaskSwitchContext+0xbc>)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800871c:	4b09      	ldr	r3, [pc, #36]	@ (8008744 <vTaskSwitchContext+0xc4>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3354      	adds	r3, #84	@ 0x54
 8008722:	4a09      	ldr	r2, [pc, #36]	@ (8008748 <vTaskSwitchContext+0xc8>)
 8008724:	6013      	str	r3, [r2, #0]
}
 8008726:	bf00      	nop
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	20000f2c 	.word	0x20000f2c
 8008738:	20000f18 	.word	0x20000f18
 800873c:	20000f0c 	.word	0x20000f0c
 8008740:	20000a34 	.word	0x20000a34
 8008744:	20000a30 	.word	0x20000a30
 8008748:	20000010 	.word	0x20000010

0800874c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10b      	bne.n	8008774 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	60fb      	str	r3, [r7, #12]
}
 800876e:	bf00      	nop
 8008770:	bf00      	nop
 8008772:	e7fd      	b.n	8008770 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008774:	4b07      	ldr	r3, [pc, #28]	@ (8008794 <vTaskPlaceOnEventList+0x48>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3318      	adds	r3, #24
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7fe fd50 	bl	8007222 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008782:	2101      	movs	r1, #1
 8008784:	6838      	ldr	r0, [r7, #0]
 8008786:	f000 fa87 	bl	8008c98 <prvAddCurrentTaskToDelayedList>
}
 800878a:	bf00      	nop
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	20000a30 	.word	0x20000a30

08008798 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10b      	bne.n	80087c2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80087aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ae:	f383 8811 	msr	BASEPRI, r3
 80087b2:	f3bf 8f6f 	isb	sy
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	617b      	str	r3, [r7, #20]
}
 80087bc:	bf00      	nop
 80087be:	bf00      	nop
 80087c0:	e7fd      	b.n	80087be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087c2:	4b0a      	ldr	r3, [pc, #40]	@ (80087ec <vTaskPlaceOnEventListRestricted+0x54>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	3318      	adds	r3, #24
 80087c8:	4619      	mov	r1, r3
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f7fe fd05 	bl	80071da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80087d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80087da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80087dc:	6879      	ldr	r1, [r7, #4]
 80087de:	68b8      	ldr	r0, [r7, #8]
 80087e0:	f000 fa5a 	bl	8008c98 <prvAddCurrentTaskToDelayedList>
	}
 80087e4:	bf00      	nop
 80087e6:	3718      	adds	r7, #24
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	20000a30 	.word	0x20000a30

080087f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10b      	bne.n	800881e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800880a:	f383 8811 	msr	BASEPRI, r3
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	60fb      	str	r3, [r7, #12]
}
 8008818:	bf00      	nop
 800881a:	bf00      	nop
 800881c:	e7fd      	b.n	800881a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	3318      	adds	r3, #24
 8008822:	4618      	mov	r0, r3
 8008824:	f7fe fd36 	bl	8007294 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008828:	4b1d      	ldr	r3, [pc, #116]	@ (80088a0 <xTaskRemoveFromEventList+0xb0>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d11d      	bne.n	800886c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	3304      	adds	r3, #4
 8008834:	4618      	mov	r0, r3
 8008836:	f7fe fd2d 	bl	8007294 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800883e:	4b19      	ldr	r3, [pc, #100]	@ (80088a4 <xTaskRemoveFromEventList+0xb4>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	429a      	cmp	r2, r3
 8008844:	d903      	bls.n	800884e <xTaskRemoveFromEventList+0x5e>
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800884a:	4a16      	ldr	r2, [pc, #88]	@ (80088a4 <xTaskRemoveFromEventList+0xb4>)
 800884c:	6013      	str	r3, [r2, #0]
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008852:	4613      	mov	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4413      	add	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4a13      	ldr	r2, [pc, #76]	@ (80088a8 <xTaskRemoveFromEventList+0xb8>)
 800885c:	441a      	add	r2, r3
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	3304      	adds	r3, #4
 8008862:	4619      	mov	r1, r3
 8008864:	4610      	mov	r0, r2
 8008866:	f7fe fcb8 	bl	80071da <vListInsertEnd>
 800886a:	e005      	b.n	8008878 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	3318      	adds	r3, #24
 8008870:	4619      	mov	r1, r3
 8008872:	480e      	ldr	r0, [pc, #56]	@ (80088ac <xTaskRemoveFromEventList+0xbc>)
 8008874:	f7fe fcb1 	bl	80071da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800887c:	4b0c      	ldr	r3, [pc, #48]	@ (80088b0 <xTaskRemoveFromEventList+0xc0>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008882:	429a      	cmp	r2, r3
 8008884:	d905      	bls.n	8008892 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008886:	2301      	movs	r3, #1
 8008888:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800888a:	4b0a      	ldr	r3, [pc, #40]	@ (80088b4 <xTaskRemoveFromEventList+0xc4>)
 800888c:	2201      	movs	r2, #1
 800888e:	601a      	str	r2, [r3, #0]
 8008890:	e001      	b.n	8008896 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008892:	2300      	movs	r3, #0
 8008894:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008896:	697b      	ldr	r3, [r7, #20]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3718      	adds	r7, #24
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	20000f2c 	.word	0x20000f2c
 80088a4:	20000f0c 	.word	0x20000f0c
 80088a8:	20000a34 	.word	0x20000a34
 80088ac:	20000ec4 	.word	0x20000ec4
 80088b0:	20000a30 	.word	0x20000a30
 80088b4:	20000f18 	.word	0x20000f18

080088b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088c0:	4b06      	ldr	r3, [pc, #24]	@ (80088dc <vTaskInternalSetTimeOutState+0x24>)
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088c8:	4b05      	ldr	r3, [pc, #20]	@ (80088e0 <vTaskInternalSetTimeOutState+0x28>)
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	605a      	str	r2, [r3, #4]
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	20000f1c 	.word	0x20000f1c
 80088e0:	20000f08 	.word	0x20000f08

080088e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b088      	sub	sp, #32
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10b      	bne.n	800890c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80088f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	613b      	str	r3, [r7, #16]
}
 8008906:	bf00      	nop
 8008908:	bf00      	nop
 800890a:	e7fd      	b.n	8008908 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10b      	bne.n	800892a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008916:	f383 8811 	msr	BASEPRI, r3
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	60fb      	str	r3, [r7, #12]
}
 8008924:	bf00      	nop
 8008926:	bf00      	nop
 8008928:	e7fd      	b.n	8008926 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800892a:	f000 fe95 	bl	8009658 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800892e:	4b1d      	ldr	r3, [pc, #116]	@ (80089a4 <xTaskCheckForTimeOut+0xc0>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	69ba      	ldr	r2, [r7, #24]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008946:	d102      	bne.n	800894e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008948:	2300      	movs	r3, #0
 800894a:	61fb      	str	r3, [r7, #28]
 800894c:	e023      	b.n	8008996 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	4b15      	ldr	r3, [pc, #84]	@ (80089a8 <xTaskCheckForTimeOut+0xc4>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	429a      	cmp	r2, r3
 8008958:	d007      	beq.n	800896a <xTaskCheckForTimeOut+0x86>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	69ba      	ldr	r2, [r7, #24]
 8008960:	429a      	cmp	r2, r3
 8008962:	d302      	bcc.n	800896a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008964:	2301      	movs	r3, #1
 8008966:	61fb      	str	r3, [r7, #28]
 8008968:	e015      	b.n	8008996 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	429a      	cmp	r2, r3
 8008972:	d20b      	bcs.n	800898c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	1ad2      	subs	r2, r2, r3
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7ff ff99 	bl	80088b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008986:	2300      	movs	r3, #0
 8008988:	61fb      	str	r3, [r7, #28]
 800898a:	e004      	b.n	8008996 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	2200      	movs	r2, #0
 8008990:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008992:	2301      	movs	r3, #1
 8008994:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008996:	f000 fe91 	bl	80096bc <vPortExitCritical>

	return xReturn;
 800899a:	69fb      	ldr	r3, [r7, #28]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3720      	adds	r7, #32
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	20000f08 	.word	0x20000f08
 80089a8:	20000f1c 	.word	0x20000f1c

080089ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089ac:	b480      	push	{r7}
 80089ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089b0:	4b03      	ldr	r3, [pc, #12]	@ (80089c0 <vTaskMissedYield+0x14>)
 80089b2:	2201      	movs	r2, #1
 80089b4:	601a      	str	r2, [r3, #0]
}
 80089b6:	bf00      	nop
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	20000f18 	.word	0x20000f18

080089c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80089cc:	f000 f852 	bl	8008a74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80089d0:	4b06      	ldr	r3, [pc, #24]	@ (80089ec <prvIdleTask+0x28>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d9f9      	bls.n	80089cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80089d8:	4b05      	ldr	r3, [pc, #20]	@ (80089f0 <prvIdleTask+0x2c>)
 80089da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089de:	601a      	str	r2, [r3, #0]
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80089e8:	e7f0      	b.n	80089cc <prvIdleTask+0x8>
 80089ea:	bf00      	nop
 80089ec:	20000a34 	.word	0x20000a34
 80089f0:	e000ed04 	.word	0xe000ed04

080089f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089fa:	2300      	movs	r3, #0
 80089fc:	607b      	str	r3, [r7, #4]
 80089fe:	e00c      	b.n	8008a1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	4613      	mov	r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	4413      	add	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4a12      	ldr	r2, [pc, #72]	@ (8008a54 <prvInitialiseTaskLists+0x60>)
 8008a0c:	4413      	add	r3, r2
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fe fbb6 	bl	8007180 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	3301      	adds	r3, #1
 8008a18:	607b      	str	r3, [r7, #4]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b37      	cmp	r3, #55	@ 0x37
 8008a1e:	d9ef      	bls.n	8008a00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a20:	480d      	ldr	r0, [pc, #52]	@ (8008a58 <prvInitialiseTaskLists+0x64>)
 8008a22:	f7fe fbad 	bl	8007180 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a26:	480d      	ldr	r0, [pc, #52]	@ (8008a5c <prvInitialiseTaskLists+0x68>)
 8008a28:	f7fe fbaa 	bl	8007180 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a2c:	480c      	ldr	r0, [pc, #48]	@ (8008a60 <prvInitialiseTaskLists+0x6c>)
 8008a2e:	f7fe fba7 	bl	8007180 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a32:	480c      	ldr	r0, [pc, #48]	@ (8008a64 <prvInitialiseTaskLists+0x70>)
 8008a34:	f7fe fba4 	bl	8007180 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a38:	480b      	ldr	r0, [pc, #44]	@ (8008a68 <prvInitialiseTaskLists+0x74>)
 8008a3a:	f7fe fba1 	bl	8007180 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8008a6c <prvInitialiseTaskLists+0x78>)
 8008a40:	4a05      	ldr	r2, [pc, #20]	@ (8008a58 <prvInitialiseTaskLists+0x64>)
 8008a42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a44:	4b0a      	ldr	r3, [pc, #40]	@ (8008a70 <prvInitialiseTaskLists+0x7c>)
 8008a46:	4a05      	ldr	r2, [pc, #20]	@ (8008a5c <prvInitialiseTaskLists+0x68>)
 8008a48:	601a      	str	r2, [r3, #0]
}
 8008a4a:	bf00      	nop
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	20000a34 	.word	0x20000a34
 8008a58:	20000e94 	.word	0x20000e94
 8008a5c:	20000ea8 	.word	0x20000ea8
 8008a60:	20000ec4 	.word	0x20000ec4
 8008a64:	20000ed8 	.word	0x20000ed8
 8008a68:	20000ef0 	.word	0x20000ef0
 8008a6c:	20000ebc 	.word	0x20000ebc
 8008a70:	20000ec0 	.word	0x20000ec0

08008a74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a7a:	e019      	b.n	8008ab0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a7c:	f000 fdec 	bl	8009658 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a80:	4b10      	ldr	r3, [pc, #64]	@ (8008ac4 <prvCheckTasksWaitingTermination+0x50>)
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7fe fc01 	bl	8007294 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a92:	4b0d      	ldr	r3, [pc, #52]	@ (8008ac8 <prvCheckTasksWaitingTermination+0x54>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	4a0b      	ldr	r2, [pc, #44]	@ (8008ac8 <prvCheckTasksWaitingTermination+0x54>)
 8008a9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8008acc <prvCheckTasksWaitingTermination+0x58>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8008acc <prvCheckTasksWaitingTermination+0x58>)
 8008aa4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008aa6:	f000 fe09 	bl	80096bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f810 	bl	8008ad0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ab0:	4b06      	ldr	r3, [pc, #24]	@ (8008acc <prvCheckTasksWaitingTermination+0x58>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1e1      	bne.n	8008a7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ab8:	bf00      	nop
 8008aba:	bf00      	nop
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	20000ed8 	.word	0x20000ed8
 8008ac8:	20000f04 	.word	0x20000f04
 8008acc:	20000eec 	.word	0x20000eec

08008ad0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	3354      	adds	r3, #84	@ 0x54
 8008adc:	4618      	mov	r0, r3
 8008ade:	f001 f8d3 	bl	8009c88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d108      	bne.n	8008afe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 ffa1 	bl	8009a38 <vPortFree>
				vPortFree( pxTCB );
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 ff9e 	bl	8009a38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008afc:	e019      	b.n	8008b32 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d103      	bne.n	8008b10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 ff95 	bl	8009a38 <vPortFree>
	}
 8008b0e:	e010      	b.n	8008b32 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d00b      	beq.n	8008b32 <prvDeleteTCB+0x62>
	__asm volatile
 8008b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	60fb      	str	r3, [r7, #12]
}
 8008b2c:	bf00      	nop
 8008b2e:	bf00      	nop
 8008b30:	e7fd      	b.n	8008b2e <prvDeleteTCB+0x5e>
	}
 8008b32:	bf00      	nop
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
	...

08008b3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b42:	4b0c      	ldr	r3, [pc, #48]	@ (8008b74 <prvResetNextTaskUnblockTime+0x38>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d104      	bne.n	8008b56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b78 <prvResetNextTaskUnblockTime+0x3c>)
 8008b4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b54:	e008      	b.n	8008b68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b56:	4b07      	ldr	r3, [pc, #28]	@ (8008b74 <prvResetNextTaskUnblockTime+0x38>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	4a04      	ldr	r2, [pc, #16]	@ (8008b78 <prvResetNextTaskUnblockTime+0x3c>)
 8008b66:	6013      	str	r3, [r2, #0]
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr
 8008b74:	20000ebc 	.word	0x20000ebc
 8008b78:	20000f24 	.word	0x20000f24

08008b7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008b82:	4b0b      	ldr	r3, [pc, #44]	@ (8008bb0 <xTaskGetSchedulerState+0x34>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d102      	bne.n	8008b90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	607b      	str	r3, [r7, #4]
 8008b8e:	e008      	b.n	8008ba2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b90:	4b08      	ldr	r3, [pc, #32]	@ (8008bb4 <xTaskGetSchedulerState+0x38>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d102      	bne.n	8008b9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b98:	2302      	movs	r3, #2
 8008b9a:	607b      	str	r3, [r7, #4]
 8008b9c:	e001      	b.n	8008ba2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ba2:	687b      	ldr	r3, [r7, #4]
	}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	20000f10 	.word	0x20000f10
 8008bb4:	20000f2c 	.word	0x20000f2c

08008bb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d058      	beq.n	8008c80 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008bce:	4b2f      	ldr	r3, [pc, #188]	@ (8008c8c <xTaskPriorityDisinherit+0xd4>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d00b      	beq.n	8008bf0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bdc:	f383 8811 	msr	BASEPRI, r3
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	60fb      	str	r3, [r7, #12]
}
 8008bea:	bf00      	nop
 8008bec:	bf00      	nop
 8008bee:	e7fd      	b.n	8008bec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10b      	bne.n	8008c10 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfc:	f383 8811 	msr	BASEPRI, r3
 8008c00:	f3bf 8f6f 	isb	sy
 8008c04:	f3bf 8f4f 	dsb	sy
 8008c08:	60bb      	str	r3, [r7, #8]
}
 8008c0a:	bf00      	nop
 8008c0c:	bf00      	nop
 8008c0e:	e7fd      	b.n	8008c0c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c14:	1e5a      	subs	r2, r3, #1
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d02c      	beq.n	8008c80 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d128      	bne.n	8008c80 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	3304      	adds	r3, #4
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fe fb2e 	bl	8007294 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c50:	4b0f      	ldr	r3, [pc, #60]	@ (8008c90 <xTaskPriorityDisinherit+0xd8>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d903      	bls.n	8008c60 <xTaskPriorityDisinherit+0xa8>
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c5c:	4a0c      	ldr	r2, [pc, #48]	@ (8008c90 <xTaskPriorityDisinherit+0xd8>)
 8008c5e:	6013      	str	r3, [r2, #0]
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c64:	4613      	mov	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4a09      	ldr	r2, [pc, #36]	@ (8008c94 <xTaskPriorityDisinherit+0xdc>)
 8008c6e:	441a      	add	r2, r3
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	3304      	adds	r3, #4
 8008c74:	4619      	mov	r1, r3
 8008c76:	4610      	mov	r0, r2
 8008c78:	f7fe faaf 	bl	80071da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c80:	697b      	ldr	r3, [r7, #20]
	}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3718      	adds	r7, #24
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	20000a30 	.word	0x20000a30
 8008c90:	20000f0c 	.word	0x20000f0c
 8008c94:	20000a34 	.word	0x20000a34

08008c98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ca2:	4b21      	ldr	r3, [pc, #132]	@ (8008d28 <prvAddCurrentTaskToDelayedList+0x90>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ca8:	4b20      	ldr	r3, [pc, #128]	@ (8008d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	3304      	adds	r3, #4
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fe faf0 	bl	8007294 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008cba:	d10a      	bne.n	8008cd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d007      	beq.n	8008cd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8008d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	3304      	adds	r3, #4
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4819      	ldr	r0, [pc, #100]	@ (8008d30 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ccc:	f7fe fa85 	bl	80071da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008cd0:	e026      	b.n	8008d20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008cda:	4b14      	ldr	r3, [pc, #80]	@ (8008d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d209      	bcs.n	8008cfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cea:	4b12      	ldr	r3, [pc, #72]	@ (8008d34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	4b0f      	ldr	r3, [pc, #60]	@ (8008d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3304      	adds	r3, #4
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	4610      	mov	r0, r2
 8008cf8:	f7fe fa93 	bl	8007222 <vListInsert>
}
 8008cfc:	e010      	b.n	8008d20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8008d38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	4b0a      	ldr	r3, [pc, #40]	@ (8008d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3304      	adds	r3, #4
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4610      	mov	r0, r2
 8008d0c:	f7fe fa89 	bl	8007222 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d10:	4b0a      	ldr	r3, [pc, #40]	@ (8008d3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d202      	bcs.n	8008d20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d1a:	4a08      	ldr	r2, [pc, #32]	@ (8008d3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	6013      	str	r3, [r2, #0]
}
 8008d20:	bf00      	nop
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	20000f08 	.word	0x20000f08
 8008d2c:	20000a30 	.word	0x20000a30
 8008d30:	20000ef0 	.word	0x20000ef0
 8008d34:	20000ec0 	.word	0x20000ec0
 8008d38:	20000ebc 	.word	0x20000ebc
 8008d3c:	20000f24 	.word	0x20000f24

08008d40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b08a      	sub	sp, #40	@ 0x28
 8008d44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d46:	2300      	movs	r3, #0
 8008d48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d4a:	f000 fb13 	bl	8009374 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8008dc4 <xTimerCreateTimerTask+0x84>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d021      	beq.n	8008d9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d56:	2300      	movs	r3, #0
 8008d58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d5e:	1d3a      	adds	r2, r7, #4
 8008d60:	f107 0108 	add.w	r1, r7, #8
 8008d64:	f107 030c 	add.w	r3, r7, #12
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7fe f9ef 	bl	800714c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d6e:	6879      	ldr	r1, [r7, #4]
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	9202      	str	r2, [sp, #8]
 8008d76:	9301      	str	r3, [sp, #4]
 8008d78:	2302      	movs	r3, #2
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	460a      	mov	r2, r1
 8008d80:	4911      	ldr	r1, [pc, #68]	@ (8008dc8 <xTimerCreateTimerTask+0x88>)
 8008d82:	4812      	ldr	r0, [pc, #72]	@ (8008dcc <xTimerCreateTimerTask+0x8c>)
 8008d84:	f7ff f8a2 	bl	8007ecc <xTaskCreateStatic>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	4a11      	ldr	r2, [pc, #68]	@ (8008dd0 <xTimerCreateTimerTask+0x90>)
 8008d8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008d8e:	4b10      	ldr	r3, [pc, #64]	@ (8008dd0 <xTimerCreateTimerTask+0x90>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008d96:	2301      	movs	r3, #1
 8008d98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10b      	bne.n	8008db8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	613b      	str	r3, [r7, #16]
}
 8008db2:	bf00      	nop
 8008db4:	bf00      	nop
 8008db6:	e7fd      	b.n	8008db4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008db8:	697b      	ldr	r3, [r7, #20]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3718      	adds	r7, #24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	20000f60 	.word	0x20000f60
 8008dc8:	08009eb0 	.word	0x08009eb0
 8008dcc:	08008f0d 	.word	0x08008f0d
 8008dd0:	20000f64 	.word	0x20000f64

08008dd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b08a      	sub	sp, #40	@ 0x28
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
 8008de0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008de2:	2300      	movs	r3, #0
 8008de4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10b      	bne.n	8008e04 <xTimerGenericCommand+0x30>
	__asm volatile
 8008dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	623b      	str	r3, [r7, #32]
}
 8008dfe:	bf00      	nop
 8008e00:	bf00      	nop
 8008e02:	e7fd      	b.n	8008e00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e04:	4b19      	ldr	r3, [pc, #100]	@ (8008e6c <xTimerGenericCommand+0x98>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d02a      	beq.n	8008e62 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	2b05      	cmp	r3, #5
 8008e1c:	dc18      	bgt.n	8008e50 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e1e:	f7ff fead 	bl	8008b7c <xTaskGetSchedulerState>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d109      	bne.n	8008e3c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e28:	4b10      	ldr	r3, [pc, #64]	@ (8008e6c <xTimerGenericCommand+0x98>)
 8008e2a:	6818      	ldr	r0, [r3, #0]
 8008e2c:	f107 0110 	add.w	r1, r7, #16
 8008e30:	2300      	movs	r3, #0
 8008e32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e34:	f7fe fc0c 	bl	8007650 <xQueueGenericSend>
 8008e38:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e3a:	e012      	b.n	8008e62 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e6c <xTimerGenericCommand+0x98>)
 8008e3e:	6818      	ldr	r0, [r3, #0]
 8008e40:	f107 0110 	add.w	r1, r7, #16
 8008e44:	2300      	movs	r3, #0
 8008e46:	2200      	movs	r2, #0
 8008e48:	f7fe fc02 	bl	8007650 <xQueueGenericSend>
 8008e4c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e4e:	e008      	b.n	8008e62 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e50:	4b06      	ldr	r3, [pc, #24]	@ (8008e6c <xTimerGenericCommand+0x98>)
 8008e52:	6818      	ldr	r0, [r3, #0]
 8008e54:	f107 0110 	add.w	r1, r7, #16
 8008e58:	2300      	movs	r3, #0
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	f7fe fcfa 	bl	8007854 <xQueueGenericSendFromISR>
 8008e60:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3728      	adds	r7, #40	@ 0x28
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	20000f60 	.word	0x20000f60

08008e70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b088      	sub	sp, #32
 8008e74:	af02      	add	r7, sp, #8
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e7a:	4b23      	ldr	r3, [pc, #140]	@ (8008f08 <prvProcessExpiredTimer+0x98>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	3304      	adds	r3, #4
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7fe fa03 	bl	8007294 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e94:	f003 0304 	and.w	r3, r3, #4
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d023      	beq.n	8008ee4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	699a      	ldr	r2, [r3, #24]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	18d1      	adds	r1, r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	6978      	ldr	r0, [r7, #20]
 8008eaa:	f000 f8d5 	bl	8009058 <prvInsertTimerInActiveList>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d020      	beq.n	8008ef6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	2300      	movs	r3, #0
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	6978      	ldr	r0, [r7, #20]
 8008ec0:	f7ff ff88 	bl	8008dd4 <xTimerGenericCommand>
 8008ec4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d114      	bne.n	8008ef6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed0:	f383 8811 	msr	BASEPRI, r3
 8008ed4:	f3bf 8f6f 	isb	sy
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	60fb      	str	r3, [r7, #12]
}
 8008ede:	bf00      	nop
 8008ee0:	bf00      	nop
 8008ee2:	e7fd      	b.n	8008ee0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008eea:	f023 0301 	bic.w	r3, r3, #1
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	6978      	ldr	r0, [r7, #20]
 8008efc:	4798      	blx	r3
}
 8008efe:	bf00      	nop
 8008f00:	3718      	adds	r7, #24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	20000f58 	.word	0x20000f58

08008f0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f14:	f107 0308 	add.w	r3, r7, #8
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f000 f859 	bl	8008fd0 <prvGetNextExpireTime>
 8008f1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	4619      	mov	r1, r3
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f000 f805 	bl	8008f34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f2a:	f000 f8d7 	bl	80090dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f2e:	bf00      	nop
 8008f30:	e7f0      	b.n	8008f14 <prvTimerTask+0x8>
	...

08008f34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f3e:	f7ff fa29 	bl	8008394 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f42:	f107 0308 	add.w	r3, r7, #8
 8008f46:	4618      	mov	r0, r3
 8008f48:	f000 f866 	bl	8009018 <prvSampleTimeNow>
 8008f4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d130      	bne.n	8008fb6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10a      	bne.n	8008f70 <prvProcessTimerOrBlockTask+0x3c>
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d806      	bhi.n	8008f70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f62:	f7ff fa25 	bl	80083b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f66:	68f9      	ldr	r1, [r7, #12]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7ff ff81 	bl	8008e70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f6e:	e024      	b.n	8008fba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d008      	beq.n	8008f88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f76:	4b13      	ldr	r3, [pc, #76]	@ (8008fc4 <prvProcessTimerOrBlockTask+0x90>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d101      	bne.n	8008f84 <prvProcessTimerOrBlockTask+0x50>
 8008f80:	2301      	movs	r3, #1
 8008f82:	e000      	b.n	8008f86 <prvProcessTimerOrBlockTask+0x52>
 8008f84:	2300      	movs	r3, #0
 8008f86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008f88:	4b0f      	ldr	r3, [pc, #60]	@ (8008fc8 <prvProcessTimerOrBlockTask+0x94>)
 8008f8a:	6818      	ldr	r0, [r3, #0]
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	4619      	mov	r1, r3
 8008f96:	f7fe ff65 	bl	8007e64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008f9a:	f7ff fa09 	bl	80083b0 <xTaskResumeAll>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10a      	bne.n	8008fba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008fa4:	4b09      	ldr	r3, [pc, #36]	@ (8008fcc <prvProcessTimerOrBlockTask+0x98>)
 8008fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008faa:	601a      	str	r2, [r3, #0]
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	f3bf 8f6f 	isb	sy
}
 8008fb4:	e001      	b.n	8008fba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008fb6:	f7ff f9fb 	bl	80083b0 <xTaskResumeAll>
}
 8008fba:	bf00      	nop
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	20000f5c 	.word	0x20000f5c
 8008fc8:	20000f60 	.word	0x20000f60
 8008fcc:	e000ed04 	.word	0xe000ed04

08008fd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8009014 <prvGetNextExpireTime+0x44>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d101      	bne.n	8008fe6 <prvGetNextExpireTime+0x16>
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	e000      	b.n	8008fe8 <prvGetNextExpireTime+0x18>
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d105      	bne.n	8009000 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ff4:	4b07      	ldr	r3, [pc, #28]	@ (8009014 <prvGetNextExpireTime+0x44>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	60fb      	str	r3, [r7, #12]
 8008ffe:	e001      	b.n	8009004 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009000:	2300      	movs	r3, #0
 8009002:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009004:	68fb      	ldr	r3, [r7, #12]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	20000f58 	.word	0x20000f58

08009018 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009020:	f7ff fa64 	bl	80084ec <xTaskGetTickCount>
 8009024:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009026:	4b0b      	ldr	r3, [pc, #44]	@ (8009054 <prvSampleTimeNow+0x3c>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	429a      	cmp	r2, r3
 800902e:	d205      	bcs.n	800903c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009030:	f000 f93a 	bl	80092a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	601a      	str	r2, [r3, #0]
 800903a:	e002      	b.n	8009042 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009042:	4a04      	ldr	r2, [pc, #16]	@ (8009054 <prvSampleTimeNow+0x3c>)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009048:	68fb      	ldr	r3, [r7, #12]
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	20000f68 	.word	0x20000f68

08009058 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b086      	sub	sp, #24
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
 8009064:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009066:	2300      	movs	r3, #0
 8009068:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	429a      	cmp	r2, r3
 800907c:	d812      	bhi.n	80090a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	1ad2      	subs	r2, r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	699b      	ldr	r3, [r3, #24]
 8009088:	429a      	cmp	r2, r3
 800908a:	d302      	bcc.n	8009092 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800908c:	2301      	movs	r3, #1
 800908e:	617b      	str	r3, [r7, #20]
 8009090:	e01b      	b.n	80090ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009092:	4b10      	ldr	r3, [pc, #64]	@ (80090d4 <prvInsertTimerInActiveList+0x7c>)
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	3304      	adds	r3, #4
 800909a:	4619      	mov	r1, r3
 800909c:	4610      	mov	r0, r2
 800909e:	f7fe f8c0 	bl	8007222 <vListInsert>
 80090a2:	e012      	b.n	80090ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d206      	bcs.n	80090ba <prvInsertTimerInActiveList+0x62>
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d302      	bcc.n	80090ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80090b4:	2301      	movs	r3, #1
 80090b6:	617b      	str	r3, [r7, #20]
 80090b8:	e007      	b.n	80090ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090ba:	4b07      	ldr	r3, [pc, #28]	@ (80090d8 <prvInsertTimerInActiveList+0x80>)
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	3304      	adds	r3, #4
 80090c2:	4619      	mov	r1, r3
 80090c4:	4610      	mov	r0, r2
 80090c6:	f7fe f8ac 	bl	8007222 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80090ca:	697b      	ldr	r3, [r7, #20]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3718      	adds	r7, #24
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	20000f5c 	.word	0x20000f5c
 80090d8:	20000f58 	.word	0x20000f58

080090dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b08e      	sub	sp, #56	@ 0x38
 80090e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090e2:	e0ce      	b.n	8009282 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	da19      	bge.n	800911e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80090ea:	1d3b      	adds	r3, r7, #4
 80090ec:	3304      	adds	r3, #4
 80090ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80090f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d10b      	bne.n	800910e <prvProcessReceivedCommands+0x32>
	__asm volatile
 80090f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	61fb      	str	r3, [r7, #28]
}
 8009108:	bf00      	nop
 800910a:	bf00      	nop
 800910c:	e7fd      	b.n	800910a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800910e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009114:	6850      	ldr	r0, [r2, #4]
 8009116:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009118:	6892      	ldr	r2, [r2, #8]
 800911a:	4611      	mov	r1, r2
 800911c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	f2c0 80ae 	blt.w	8009282 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800912a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d004      	beq.n	800913c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009134:	3304      	adds	r3, #4
 8009136:	4618      	mov	r0, r3
 8009138:	f7fe f8ac 	bl	8007294 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800913c:	463b      	mov	r3, r7
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff ff6a 	bl	8009018 <prvSampleTimeNow>
 8009144:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b09      	cmp	r3, #9
 800914a:	f200 8097 	bhi.w	800927c <prvProcessReceivedCommands+0x1a0>
 800914e:	a201      	add	r2, pc, #4	@ (adr r2, 8009154 <prvProcessReceivedCommands+0x78>)
 8009150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009154:	0800917d 	.word	0x0800917d
 8009158:	0800917d 	.word	0x0800917d
 800915c:	0800917d 	.word	0x0800917d
 8009160:	080091f3 	.word	0x080091f3
 8009164:	08009207 	.word	0x08009207
 8009168:	08009253 	.word	0x08009253
 800916c:	0800917d 	.word	0x0800917d
 8009170:	0800917d 	.word	0x0800917d
 8009174:	080091f3 	.word	0x080091f3
 8009178:	08009207 	.word	0x08009207
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800917c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009182:	f043 0301 	orr.w	r3, r3, #1
 8009186:	b2da      	uxtb	r2, r3
 8009188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800918a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800918e:	68ba      	ldr	r2, [r7, #8]
 8009190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009192:	699b      	ldr	r3, [r3, #24]
 8009194:	18d1      	adds	r1, r2, r3
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800919a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800919c:	f7ff ff5c 	bl	8009058 <prvInsertTimerInActiveList>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d06c      	beq.n	8009280 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091b4:	f003 0304 	and.w	r3, r3, #4
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d061      	beq.n	8009280 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c0:	699b      	ldr	r3, [r3, #24]
 80091c2:	441a      	add	r2, r3
 80091c4:	2300      	movs	r3, #0
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	2300      	movs	r3, #0
 80091ca:	2100      	movs	r1, #0
 80091cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091ce:	f7ff fe01 	bl	8008dd4 <xTimerGenericCommand>
 80091d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80091d4:	6a3b      	ldr	r3, [r7, #32]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d152      	bne.n	8009280 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80091da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091de:	f383 8811 	msr	BASEPRI, r3
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	61bb      	str	r3, [r7, #24]
}
 80091ec:	bf00      	nop
 80091ee:	bf00      	nop
 80091f0:	e7fd      	b.n	80091ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091f8:	f023 0301 	bic.w	r3, r3, #1
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009200:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009204:	e03d      	b.n	8009282 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009208:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800920c:	f043 0301 	orr.w	r3, r3, #1
 8009210:	b2da      	uxtb	r2, r3
 8009212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009214:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009218:	68ba      	ldr	r2, [r7, #8]
 800921a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800921e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10b      	bne.n	800923e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800922a:	f383 8811 	msr	BASEPRI, r3
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	617b      	str	r3, [r7, #20]
}
 8009238:	bf00      	nop
 800923a:	bf00      	nop
 800923c:	e7fd      	b.n	800923a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800923e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009240:	699a      	ldr	r2, [r3, #24]
 8009242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009244:	18d1      	adds	r1, r2, r3
 8009246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800924a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800924c:	f7ff ff04 	bl	8009058 <prvInsertTimerInActiveList>
					break;
 8009250:	e017      	b.n	8009282 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009254:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009258:	f003 0302 	and.w	r3, r3, #2
 800925c:	2b00      	cmp	r3, #0
 800925e:	d103      	bne.n	8009268 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009262:	f000 fbe9 	bl	8009a38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009266:	e00c      	b.n	8009282 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800926e:	f023 0301 	bic.w	r3, r3, #1
 8009272:	b2da      	uxtb	r2, r3
 8009274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009276:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800927a:	e002      	b.n	8009282 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800927c:	bf00      	nop
 800927e:	e000      	b.n	8009282 <prvProcessReceivedCommands+0x1a6>
					break;
 8009280:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009282:	4b08      	ldr	r3, [pc, #32]	@ (80092a4 <prvProcessReceivedCommands+0x1c8>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	1d39      	adds	r1, r7, #4
 8009288:	2200      	movs	r2, #0
 800928a:	4618      	mov	r0, r3
 800928c:	f7fe fb80 	bl	8007990 <xQueueReceive>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	f47f af26 	bne.w	80090e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009298:	bf00      	nop
 800929a:	bf00      	nop
 800929c:	3730      	adds	r7, #48	@ 0x30
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	20000f60 	.word	0x20000f60

080092a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b088      	sub	sp, #32
 80092ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092ae:	e049      	b.n	8009344 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092b0:	4b2e      	ldr	r3, [pc, #184]	@ (800936c <prvSwitchTimerLists+0xc4>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092ba:	4b2c      	ldr	r3, [pc, #176]	@ (800936c <prvSwitchTimerLists+0xc4>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	3304      	adds	r3, #4
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7fd ffe3 	bl	8007294 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092dc:	f003 0304 	and.w	r3, r3, #4
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d02f      	beq.n	8009344 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	4413      	add	r3, r2
 80092ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d90e      	bls.n	8009314 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009302:	4b1a      	ldr	r3, [pc, #104]	@ (800936c <prvSwitchTimerLists+0xc4>)
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	3304      	adds	r3, #4
 800930a:	4619      	mov	r1, r3
 800930c:	4610      	mov	r0, r2
 800930e:	f7fd ff88 	bl	8007222 <vListInsert>
 8009312:	e017      	b.n	8009344 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009314:	2300      	movs	r3, #0
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	2300      	movs	r3, #0
 800931a:	693a      	ldr	r2, [r7, #16]
 800931c:	2100      	movs	r1, #0
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f7ff fd58 	bl	8008dd4 <xTimerGenericCommand>
 8009324:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10b      	bne.n	8009344 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	603b      	str	r3, [r7, #0]
}
 800933e:	bf00      	nop
 8009340:	bf00      	nop
 8009342:	e7fd      	b.n	8009340 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009344:	4b09      	ldr	r3, [pc, #36]	@ (800936c <prvSwitchTimerLists+0xc4>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1b0      	bne.n	80092b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800934e:	4b07      	ldr	r3, [pc, #28]	@ (800936c <prvSwitchTimerLists+0xc4>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009354:	4b06      	ldr	r3, [pc, #24]	@ (8009370 <prvSwitchTimerLists+0xc8>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a04      	ldr	r2, [pc, #16]	@ (800936c <prvSwitchTimerLists+0xc4>)
 800935a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800935c:	4a04      	ldr	r2, [pc, #16]	@ (8009370 <prvSwitchTimerLists+0xc8>)
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	6013      	str	r3, [r2, #0]
}
 8009362:	bf00      	nop
 8009364:	3718      	adds	r7, #24
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	20000f58 	.word	0x20000f58
 8009370:	20000f5c 	.word	0x20000f5c

08009374 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800937a:	f000 f96d 	bl	8009658 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800937e:	4b15      	ldr	r3, [pc, #84]	@ (80093d4 <prvCheckForValidListAndQueue+0x60>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d120      	bne.n	80093c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009386:	4814      	ldr	r0, [pc, #80]	@ (80093d8 <prvCheckForValidListAndQueue+0x64>)
 8009388:	f7fd fefa 	bl	8007180 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800938c:	4813      	ldr	r0, [pc, #76]	@ (80093dc <prvCheckForValidListAndQueue+0x68>)
 800938e:	f7fd fef7 	bl	8007180 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009392:	4b13      	ldr	r3, [pc, #76]	@ (80093e0 <prvCheckForValidListAndQueue+0x6c>)
 8009394:	4a10      	ldr	r2, [pc, #64]	@ (80093d8 <prvCheckForValidListAndQueue+0x64>)
 8009396:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009398:	4b12      	ldr	r3, [pc, #72]	@ (80093e4 <prvCheckForValidListAndQueue+0x70>)
 800939a:	4a10      	ldr	r2, [pc, #64]	@ (80093dc <prvCheckForValidListAndQueue+0x68>)
 800939c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800939e:	2300      	movs	r3, #0
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	4b11      	ldr	r3, [pc, #68]	@ (80093e8 <prvCheckForValidListAndQueue+0x74>)
 80093a4:	4a11      	ldr	r2, [pc, #68]	@ (80093ec <prvCheckForValidListAndQueue+0x78>)
 80093a6:	2110      	movs	r1, #16
 80093a8:	200a      	movs	r0, #10
 80093aa:	f7fe f807 	bl	80073bc <xQueueGenericCreateStatic>
 80093ae:	4603      	mov	r3, r0
 80093b0:	4a08      	ldr	r2, [pc, #32]	@ (80093d4 <prvCheckForValidListAndQueue+0x60>)
 80093b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80093b4:	4b07      	ldr	r3, [pc, #28]	@ (80093d4 <prvCheckForValidListAndQueue+0x60>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d005      	beq.n	80093c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80093bc:	4b05      	ldr	r3, [pc, #20]	@ (80093d4 <prvCheckForValidListAndQueue+0x60>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	490b      	ldr	r1, [pc, #44]	@ (80093f0 <prvCheckForValidListAndQueue+0x7c>)
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fe fcfa 	bl	8007dbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093c8:	f000 f978 	bl	80096bc <vPortExitCritical>
}
 80093cc:	bf00      	nop
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	20000f60 	.word	0x20000f60
 80093d8:	20000f30 	.word	0x20000f30
 80093dc:	20000f44 	.word	0x20000f44
 80093e0:	20000f58 	.word	0x20000f58
 80093e4:	20000f5c 	.word	0x20000f5c
 80093e8:	2000100c 	.word	0x2000100c
 80093ec:	20000f6c 	.word	0x20000f6c
 80093f0:	08009eb8 	.word	0x08009eb8

080093f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	3b04      	subs	r3, #4
 8009404:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800940c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3b04      	subs	r3, #4
 8009412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	f023 0201 	bic.w	r2, r3, #1
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	3b04      	subs	r3, #4
 8009422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009424:	4a0c      	ldr	r2, [pc, #48]	@ (8009458 <pxPortInitialiseStack+0x64>)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	3b14      	subs	r3, #20
 800942e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	3b04      	subs	r3, #4
 800943a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f06f 0202 	mvn.w	r2, #2
 8009442:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	3b20      	subs	r3, #32
 8009448:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800944a:	68fb      	ldr	r3, [r7, #12]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr
 8009458:	0800945d 	.word	0x0800945d

0800945c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009462:	2300      	movs	r3, #0
 8009464:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009466:	4b13      	ldr	r3, [pc, #76]	@ (80094b4 <prvTaskExitError+0x58>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800946e:	d00b      	beq.n	8009488 <prvTaskExitError+0x2c>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	60fb      	str	r3, [r7, #12]
}
 8009482:	bf00      	nop
 8009484:	bf00      	nop
 8009486:	e7fd      	b.n	8009484 <prvTaskExitError+0x28>
	__asm volatile
 8009488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	60bb      	str	r3, [r7, #8]
}
 800949a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800949c:	bf00      	nop
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d0fc      	beq.n	800949e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80094a4:	bf00      	nop
 80094a6:	bf00      	nop
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	2000000c 	.word	0x2000000c
	...

080094c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094c0:	4b07      	ldr	r3, [pc, #28]	@ (80094e0 <pxCurrentTCBConst2>)
 80094c2:	6819      	ldr	r1, [r3, #0]
 80094c4:	6808      	ldr	r0, [r1, #0]
 80094c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ca:	f380 8809 	msr	PSP, r0
 80094ce:	f3bf 8f6f 	isb	sy
 80094d2:	f04f 0000 	mov.w	r0, #0
 80094d6:	f380 8811 	msr	BASEPRI, r0
 80094da:	4770      	bx	lr
 80094dc:	f3af 8000 	nop.w

080094e0 <pxCurrentTCBConst2>:
 80094e0:	20000a30 	.word	0x20000a30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80094e4:	bf00      	nop
 80094e6:	bf00      	nop

080094e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80094e8:	4808      	ldr	r0, [pc, #32]	@ (800950c <prvPortStartFirstTask+0x24>)
 80094ea:	6800      	ldr	r0, [r0, #0]
 80094ec:	6800      	ldr	r0, [r0, #0]
 80094ee:	f380 8808 	msr	MSP, r0
 80094f2:	f04f 0000 	mov.w	r0, #0
 80094f6:	f380 8814 	msr	CONTROL, r0
 80094fa:	b662      	cpsie	i
 80094fc:	b661      	cpsie	f
 80094fe:	f3bf 8f4f 	dsb	sy
 8009502:	f3bf 8f6f 	isb	sy
 8009506:	df00      	svc	0
 8009508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800950a:	bf00      	nop
 800950c:	e000ed08 	.word	0xe000ed08

08009510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009516:	4b47      	ldr	r3, [pc, #284]	@ (8009634 <xPortStartScheduler+0x124>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a47      	ldr	r2, [pc, #284]	@ (8009638 <xPortStartScheduler+0x128>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d10b      	bne.n	8009538 <xPortStartScheduler+0x28>
	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	613b      	str	r3, [r7, #16]
}
 8009532:	bf00      	nop
 8009534:	bf00      	nop
 8009536:	e7fd      	b.n	8009534 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009538:	4b3e      	ldr	r3, [pc, #248]	@ (8009634 <xPortStartScheduler+0x124>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a3f      	ldr	r2, [pc, #252]	@ (800963c <xPortStartScheduler+0x12c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d10b      	bne.n	800955a <xPortStartScheduler+0x4a>
	__asm volatile
 8009542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	60fb      	str	r3, [r7, #12]
}
 8009554:	bf00      	nop
 8009556:	bf00      	nop
 8009558:	e7fd      	b.n	8009556 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800955a:	4b39      	ldr	r3, [pc, #228]	@ (8009640 <xPortStartScheduler+0x130>)
 800955c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	b2db      	uxtb	r3, r3
 8009564:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	22ff      	movs	r2, #255	@ 0xff
 800956a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	b2db      	uxtb	r3, r3
 8009572:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009574:	78fb      	ldrb	r3, [r7, #3]
 8009576:	b2db      	uxtb	r3, r3
 8009578:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800957c:	b2da      	uxtb	r2, r3
 800957e:	4b31      	ldr	r3, [pc, #196]	@ (8009644 <xPortStartScheduler+0x134>)
 8009580:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009582:	4b31      	ldr	r3, [pc, #196]	@ (8009648 <xPortStartScheduler+0x138>)
 8009584:	2207      	movs	r2, #7
 8009586:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009588:	e009      	b.n	800959e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800958a:	4b2f      	ldr	r3, [pc, #188]	@ (8009648 <xPortStartScheduler+0x138>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	3b01      	subs	r3, #1
 8009590:	4a2d      	ldr	r2, [pc, #180]	@ (8009648 <xPortStartScheduler+0x138>)
 8009592:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009594:	78fb      	ldrb	r3, [r7, #3]
 8009596:	b2db      	uxtb	r3, r3
 8009598:	005b      	lsls	r3, r3, #1
 800959a:	b2db      	uxtb	r3, r3
 800959c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800959e:	78fb      	ldrb	r3, [r7, #3]
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095a6:	2b80      	cmp	r3, #128	@ 0x80
 80095a8:	d0ef      	beq.n	800958a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80095aa:	4b27      	ldr	r3, [pc, #156]	@ (8009648 <xPortStartScheduler+0x138>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f1c3 0307 	rsb	r3, r3, #7
 80095b2:	2b04      	cmp	r3, #4
 80095b4:	d00b      	beq.n	80095ce <xPortStartScheduler+0xbe>
	__asm volatile
 80095b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	60bb      	str	r3, [r7, #8]
}
 80095c8:	bf00      	nop
 80095ca:	bf00      	nop
 80095cc:	e7fd      	b.n	80095ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095ce:	4b1e      	ldr	r3, [pc, #120]	@ (8009648 <xPortStartScheduler+0x138>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	021b      	lsls	r3, r3, #8
 80095d4:	4a1c      	ldr	r2, [pc, #112]	@ (8009648 <xPortStartScheduler+0x138>)
 80095d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80095d8:	4b1b      	ldr	r3, [pc, #108]	@ (8009648 <xPortStartScheduler+0x138>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80095e0:	4a19      	ldr	r2, [pc, #100]	@ (8009648 <xPortStartScheduler+0x138>)
 80095e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80095ec:	4b17      	ldr	r3, [pc, #92]	@ (800964c <xPortStartScheduler+0x13c>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a16      	ldr	r2, [pc, #88]	@ (800964c <xPortStartScheduler+0x13c>)
 80095f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80095f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80095f8:	4b14      	ldr	r3, [pc, #80]	@ (800964c <xPortStartScheduler+0x13c>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a13      	ldr	r2, [pc, #76]	@ (800964c <xPortStartScheduler+0x13c>)
 80095fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009602:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009604:	f000 f8da 	bl	80097bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009608:	4b11      	ldr	r3, [pc, #68]	@ (8009650 <xPortStartScheduler+0x140>)
 800960a:	2200      	movs	r2, #0
 800960c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800960e:	f000 f8f9 	bl	8009804 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009612:	4b10      	ldr	r3, [pc, #64]	@ (8009654 <xPortStartScheduler+0x144>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a0f      	ldr	r2, [pc, #60]	@ (8009654 <xPortStartScheduler+0x144>)
 8009618:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800961c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800961e:	f7ff ff63 	bl	80094e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009622:	f7ff f82d 	bl	8008680 <vTaskSwitchContext>
	prvTaskExitError();
 8009626:	f7ff ff19 	bl	800945c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3718      	adds	r7, #24
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	e000ed00 	.word	0xe000ed00
 8009638:	410fc271 	.word	0x410fc271
 800963c:	410fc270 	.word	0x410fc270
 8009640:	e000e400 	.word	0xe000e400
 8009644:	2000105c 	.word	0x2000105c
 8009648:	20001060 	.word	0x20001060
 800964c:	e000ed20 	.word	0xe000ed20
 8009650:	2000000c 	.word	0x2000000c
 8009654:	e000ef34 	.word	0xe000ef34

08009658 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	607b      	str	r3, [r7, #4]
}
 8009670:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009672:	4b10      	ldr	r3, [pc, #64]	@ (80096b4 <vPortEnterCritical+0x5c>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3301      	adds	r3, #1
 8009678:	4a0e      	ldr	r2, [pc, #56]	@ (80096b4 <vPortEnterCritical+0x5c>)
 800967a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800967c:	4b0d      	ldr	r3, [pc, #52]	@ (80096b4 <vPortEnterCritical+0x5c>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d110      	bne.n	80096a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009684:	4b0c      	ldr	r3, [pc, #48]	@ (80096b8 <vPortEnterCritical+0x60>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00b      	beq.n	80096a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800968e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	603b      	str	r3, [r7, #0]
}
 80096a0:	bf00      	nop
 80096a2:	bf00      	nop
 80096a4:	e7fd      	b.n	80096a2 <vPortEnterCritical+0x4a>
	}
}
 80096a6:	bf00      	nop
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	2000000c 	.word	0x2000000c
 80096b8:	e000ed04 	.word	0xe000ed04

080096bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80096c2:	4b12      	ldr	r3, [pc, #72]	@ (800970c <vPortExitCritical+0x50>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d10b      	bne.n	80096e2 <vPortExitCritical+0x26>
	__asm volatile
 80096ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	607b      	str	r3, [r7, #4]
}
 80096dc:	bf00      	nop
 80096de:	bf00      	nop
 80096e0:	e7fd      	b.n	80096de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80096e2:	4b0a      	ldr	r3, [pc, #40]	@ (800970c <vPortExitCritical+0x50>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	4a08      	ldr	r2, [pc, #32]	@ (800970c <vPortExitCritical+0x50>)
 80096ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80096ec:	4b07      	ldr	r3, [pc, #28]	@ (800970c <vPortExitCritical+0x50>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d105      	bne.n	8009700 <vPortExitCritical+0x44>
 80096f4:	2300      	movs	r3, #0
 80096f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	f383 8811 	msr	BASEPRI, r3
}
 80096fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr
 800970c:	2000000c 	.word	0x2000000c

08009710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009710:	f3ef 8009 	mrs	r0, PSP
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	4b15      	ldr	r3, [pc, #84]	@ (8009770 <pxCurrentTCBConst>)
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	f01e 0f10 	tst.w	lr, #16
 8009720:	bf08      	it	eq
 8009722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972a:	6010      	str	r0, [r2, #0]
 800972c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009730:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009734:	f380 8811 	msr	BASEPRI, r0
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f7fe ff9e 	bl	8008680 <vTaskSwitchContext>
 8009744:	f04f 0000 	mov.w	r0, #0
 8009748:	f380 8811 	msr	BASEPRI, r0
 800974c:	bc09      	pop	{r0, r3}
 800974e:	6819      	ldr	r1, [r3, #0]
 8009750:	6808      	ldr	r0, [r1, #0]
 8009752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009756:	f01e 0f10 	tst.w	lr, #16
 800975a:	bf08      	it	eq
 800975c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009760:	f380 8809 	msr	PSP, r0
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	f3af 8000 	nop.w

08009770 <pxCurrentTCBConst>:
 8009770:	20000a30 	.word	0x20000a30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009774:	bf00      	nop
 8009776:	bf00      	nop

08009778 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
	__asm volatile
 800977e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009782:	f383 8811 	msr	BASEPRI, r3
 8009786:	f3bf 8f6f 	isb	sy
 800978a:	f3bf 8f4f 	dsb	sy
 800978e:	607b      	str	r3, [r7, #4]
}
 8009790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009792:	f7fe febb 	bl	800850c <xTaskIncrementTick>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d003      	beq.n	80097a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800979c:	4b06      	ldr	r3, [pc, #24]	@ (80097b8 <xPortSysTickHandler+0x40>)
 800979e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097a2:	601a      	str	r2, [r3, #0]
 80097a4:	2300      	movs	r3, #0
 80097a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	f383 8811 	msr	BASEPRI, r3
}
 80097ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80097b0:	bf00      	nop
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	e000ed04 	.word	0xe000ed04

080097bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80097bc:	b480      	push	{r7}
 80097be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097c0:	4b0b      	ldr	r3, [pc, #44]	@ (80097f0 <vPortSetupTimerInterrupt+0x34>)
 80097c2:	2200      	movs	r2, #0
 80097c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097c6:	4b0b      	ldr	r3, [pc, #44]	@ (80097f4 <vPortSetupTimerInterrupt+0x38>)
 80097c8:	2200      	movs	r2, #0
 80097ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097cc:	4b0a      	ldr	r3, [pc, #40]	@ (80097f8 <vPortSetupTimerInterrupt+0x3c>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a0a      	ldr	r2, [pc, #40]	@ (80097fc <vPortSetupTimerInterrupt+0x40>)
 80097d2:	fba2 2303 	umull	r2, r3, r2, r3
 80097d6:	099b      	lsrs	r3, r3, #6
 80097d8:	4a09      	ldr	r2, [pc, #36]	@ (8009800 <vPortSetupTimerInterrupt+0x44>)
 80097da:	3b01      	subs	r3, #1
 80097dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097de:	4b04      	ldr	r3, [pc, #16]	@ (80097f0 <vPortSetupTimerInterrupt+0x34>)
 80097e0:	2207      	movs	r2, #7
 80097e2:	601a      	str	r2, [r3, #0]
}
 80097e4:	bf00      	nop
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	e000e010 	.word	0xe000e010
 80097f4:	e000e018 	.word	0xe000e018
 80097f8:	20000000 	.word	0x20000000
 80097fc:	10624dd3 	.word	0x10624dd3
 8009800:	e000e014 	.word	0xe000e014

08009804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009804:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009814 <vPortEnableVFP+0x10>
 8009808:	6801      	ldr	r1, [r0, #0]
 800980a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800980e:	6001      	str	r1, [r0, #0]
 8009810:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009812:	bf00      	nop
 8009814:	e000ed88 	.word	0xe000ed88

08009818 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800981e:	f3ef 8305 	mrs	r3, IPSR
 8009822:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2b0f      	cmp	r3, #15
 8009828:	d915      	bls.n	8009856 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800982a:	4a18      	ldr	r2, [pc, #96]	@ (800988c <vPortValidateInterruptPriority+0x74>)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	4413      	add	r3, r2
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009834:	4b16      	ldr	r3, [pc, #88]	@ (8009890 <vPortValidateInterruptPriority+0x78>)
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	7afa      	ldrb	r2, [r7, #11]
 800983a:	429a      	cmp	r2, r3
 800983c:	d20b      	bcs.n	8009856 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800983e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	607b      	str	r3, [r7, #4]
}
 8009850:	bf00      	nop
 8009852:	bf00      	nop
 8009854:	e7fd      	b.n	8009852 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009856:	4b0f      	ldr	r3, [pc, #60]	@ (8009894 <vPortValidateInterruptPriority+0x7c>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800985e:	4b0e      	ldr	r3, [pc, #56]	@ (8009898 <vPortValidateInterruptPriority+0x80>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	429a      	cmp	r2, r3
 8009864:	d90b      	bls.n	800987e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	603b      	str	r3, [r7, #0]
}
 8009878:	bf00      	nop
 800987a:	bf00      	nop
 800987c:	e7fd      	b.n	800987a <vPortValidateInterruptPriority+0x62>
	}
 800987e:	bf00      	nop
 8009880:	3714      	adds	r7, #20
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	e000e3f0 	.word	0xe000e3f0
 8009890:	2000105c 	.word	0x2000105c
 8009894:	e000ed0c 	.word	0xe000ed0c
 8009898:	20001060 	.word	0x20001060

0800989c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b08a      	sub	sp, #40	@ 0x28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80098a4:	2300      	movs	r3, #0
 80098a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80098a8:	f7fe fd74 	bl	8008394 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80098ac:	4b5c      	ldr	r3, [pc, #368]	@ (8009a20 <pvPortMalloc+0x184>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d101      	bne.n	80098b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80098b4:	f000 f924 	bl	8009b00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80098b8:	4b5a      	ldr	r3, [pc, #360]	@ (8009a24 <pvPortMalloc+0x188>)
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4013      	ands	r3, r2
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f040 8095 	bne.w	80099f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d01e      	beq.n	800990a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80098cc:	2208      	movs	r2, #8
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4413      	add	r3, r2
 80098d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f003 0307 	and.w	r3, r3, #7
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d015      	beq.n	800990a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f023 0307 	bic.w	r3, r3, #7
 80098e4:	3308      	adds	r3, #8
 80098e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f003 0307 	and.w	r3, r3, #7
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00b      	beq.n	800990a <pvPortMalloc+0x6e>
	__asm volatile
 80098f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f6:	f383 8811 	msr	BASEPRI, r3
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	617b      	str	r3, [r7, #20]
}
 8009904:	bf00      	nop
 8009906:	bf00      	nop
 8009908:	e7fd      	b.n	8009906 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d06f      	beq.n	80099f0 <pvPortMalloc+0x154>
 8009910:	4b45      	ldr	r3, [pc, #276]	@ (8009a28 <pvPortMalloc+0x18c>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	429a      	cmp	r2, r3
 8009918:	d86a      	bhi.n	80099f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800991a:	4b44      	ldr	r3, [pc, #272]	@ (8009a2c <pvPortMalloc+0x190>)
 800991c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800991e:	4b43      	ldr	r3, [pc, #268]	@ (8009a2c <pvPortMalloc+0x190>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009924:	e004      	b.n	8009930 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009928:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800992a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	429a      	cmp	r2, r3
 8009938:	d903      	bls.n	8009942 <pvPortMalloc+0xa6>
 800993a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1f1      	bne.n	8009926 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009942:	4b37      	ldr	r3, [pc, #220]	@ (8009a20 <pvPortMalloc+0x184>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009948:	429a      	cmp	r2, r3
 800994a:	d051      	beq.n	80099f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800994c:	6a3b      	ldr	r3, [r7, #32]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2208      	movs	r2, #8
 8009952:	4413      	add	r3, r2
 8009954:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	6a3b      	ldr	r3, [r7, #32]
 800995c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800995e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009960:	685a      	ldr	r2, [r3, #4]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	1ad2      	subs	r2, r2, r3
 8009966:	2308      	movs	r3, #8
 8009968:	005b      	lsls	r3, r3, #1
 800996a:	429a      	cmp	r2, r3
 800996c:	d920      	bls.n	80099b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800996e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4413      	add	r3, r2
 8009974:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	f003 0307 	and.w	r3, r3, #7
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00b      	beq.n	8009998 <pvPortMalloc+0xfc>
	__asm volatile
 8009980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009984:	f383 8811 	msr	BASEPRI, r3
 8009988:	f3bf 8f6f 	isb	sy
 800998c:	f3bf 8f4f 	dsb	sy
 8009990:	613b      	str	r3, [r7, #16]
}
 8009992:	bf00      	nop
 8009994:	bf00      	nop
 8009996:	e7fd      	b.n	8009994 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999a:	685a      	ldr	r2, [r3, #4]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	1ad2      	subs	r2, r2, r3
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80099a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80099aa:	69b8      	ldr	r0, [r7, #24]
 80099ac:	f000 f90a 	bl	8009bc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099b0:	4b1d      	ldr	r3, [pc, #116]	@ (8009a28 <pvPortMalloc+0x18c>)
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	4a1b      	ldr	r2, [pc, #108]	@ (8009a28 <pvPortMalloc+0x18c>)
 80099bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099be:	4b1a      	ldr	r3, [pc, #104]	@ (8009a28 <pvPortMalloc+0x18c>)
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	4b1b      	ldr	r3, [pc, #108]	@ (8009a30 <pvPortMalloc+0x194>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d203      	bcs.n	80099d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80099ca:	4b17      	ldr	r3, [pc, #92]	@ (8009a28 <pvPortMalloc+0x18c>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a18      	ldr	r2, [pc, #96]	@ (8009a30 <pvPortMalloc+0x194>)
 80099d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80099d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d4:	685a      	ldr	r2, [r3, #4]
 80099d6:	4b13      	ldr	r3, [pc, #76]	@ (8009a24 <pvPortMalloc+0x188>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	431a      	orrs	r2, r3
 80099dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80099e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e2:	2200      	movs	r2, #0
 80099e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80099e6:	4b13      	ldr	r3, [pc, #76]	@ (8009a34 <pvPortMalloc+0x198>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3301      	adds	r3, #1
 80099ec:	4a11      	ldr	r2, [pc, #68]	@ (8009a34 <pvPortMalloc+0x198>)
 80099ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80099f0:	f7fe fcde 	bl	80083b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	f003 0307 	and.w	r3, r3, #7
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00b      	beq.n	8009a16 <pvPortMalloc+0x17a>
	__asm volatile
 80099fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	60fb      	str	r3, [r7, #12]
}
 8009a10:	bf00      	nop
 8009a12:	bf00      	nop
 8009a14:	e7fd      	b.n	8009a12 <pvPortMalloc+0x176>
	return pvReturn;
 8009a16:	69fb      	ldr	r3, [r7, #28]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3728      	adds	r7, #40	@ 0x28
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	20001c24 	.word	0x20001c24
 8009a24:	20001c38 	.word	0x20001c38
 8009a28:	20001c28 	.word	0x20001c28
 8009a2c:	20001c1c 	.word	0x20001c1c
 8009a30:	20001c2c 	.word	0x20001c2c
 8009a34:	20001c30 	.word	0x20001c30

08009a38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b086      	sub	sp, #24
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d04f      	beq.n	8009aea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a4a:	2308      	movs	r3, #8
 8009a4c:	425b      	negs	r3, r3
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	4413      	add	r3, r2
 8009a52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	685a      	ldr	r2, [r3, #4]
 8009a5c:	4b25      	ldr	r3, [pc, #148]	@ (8009af4 <vPortFree+0xbc>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4013      	ands	r3, r2
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d10b      	bne.n	8009a7e <vPortFree+0x46>
	__asm volatile
 8009a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a6a:	f383 8811 	msr	BASEPRI, r3
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	60fb      	str	r3, [r7, #12]
}
 8009a78:	bf00      	nop
 8009a7a:	bf00      	nop
 8009a7c:	e7fd      	b.n	8009a7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00b      	beq.n	8009a9e <vPortFree+0x66>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	60bb      	str	r3, [r7, #8]
}
 8009a98:	bf00      	nop
 8009a9a:	bf00      	nop
 8009a9c:	e7fd      	b.n	8009a9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	685a      	ldr	r2, [r3, #4]
 8009aa2:	4b14      	ldr	r3, [pc, #80]	@ (8009af4 <vPortFree+0xbc>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d01e      	beq.n	8009aea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d11a      	bne.n	8009aea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8009af4 <vPortFree+0xbc>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	43db      	mvns	r3, r3
 8009abe:	401a      	ands	r2, r3
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ac4:	f7fe fc66 	bl	8008394 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	4b0a      	ldr	r3, [pc, #40]	@ (8009af8 <vPortFree+0xc0>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	4a09      	ldr	r2, [pc, #36]	@ (8009af8 <vPortFree+0xc0>)
 8009ad4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009ad6:	6938      	ldr	r0, [r7, #16]
 8009ad8:	f000 f874 	bl	8009bc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009adc:	4b07      	ldr	r3, [pc, #28]	@ (8009afc <vPortFree+0xc4>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	4a06      	ldr	r2, [pc, #24]	@ (8009afc <vPortFree+0xc4>)
 8009ae4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009ae6:	f7fe fc63 	bl	80083b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009aea:	bf00      	nop
 8009aec:	3718      	adds	r7, #24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	20001c38 	.word	0x20001c38
 8009af8:	20001c28 	.word	0x20001c28
 8009afc:	20001c34 	.word	0x20001c34

08009b00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b06:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009b0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b0c:	4b27      	ldr	r3, [pc, #156]	@ (8009bac <prvHeapInit+0xac>)
 8009b0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f003 0307 	and.w	r3, r3, #7
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00c      	beq.n	8009b34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3307      	adds	r3, #7
 8009b1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f023 0307 	bic.w	r3, r3, #7
 8009b26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	1ad3      	subs	r3, r2, r3
 8009b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8009bac <prvHeapInit+0xac>)
 8009b30:	4413      	add	r3, r2
 8009b32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b38:	4a1d      	ldr	r2, [pc, #116]	@ (8009bb0 <prvHeapInit+0xb0>)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8009bb0 <prvHeapInit+0xb0>)
 8009b40:	2200      	movs	r2, #0
 8009b42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	68ba      	ldr	r2, [r7, #8]
 8009b48:	4413      	add	r3, r2
 8009b4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b4c:	2208      	movs	r2, #8
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	1a9b      	subs	r3, r3, r2
 8009b52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f023 0307 	bic.w	r3, r3, #7
 8009b5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	4a15      	ldr	r2, [pc, #84]	@ (8009bb4 <prvHeapInit+0xb4>)
 8009b60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b62:	4b14      	ldr	r3, [pc, #80]	@ (8009bb4 <prvHeapInit+0xb4>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2200      	movs	r2, #0
 8009b68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b6a:	4b12      	ldr	r3, [pc, #72]	@ (8009bb4 <prvHeapInit+0xb4>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	1ad2      	subs	r2, r2, r3
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b80:	4b0c      	ldr	r3, [pc, #48]	@ (8009bb4 <prvHeapInit+0xb4>)
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8009bb8 <prvHeapInit+0xb8>)
 8009b8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	4a09      	ldr	r2, [pc, #36]	@ (8009bbc <prvHeapInit+0xbc>)
 8009b96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b98:	4b09      	ldr	r3, [pc, #36]	@ (8009bc0 <prvHeapInit+0xc0>)
 8009b9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009b9e:	601a      	str	r2, [r3, #0]
}
 8009ba0:	bf00      	nop
 8009ba2:	3714      	adds	r7, #20
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	20001064 	.word	0x20001064
 8009bb0:	20001c1c 	.word	0x20001c1c
 8009bb4:	20001c24 	.word	0x20001c24
 8009bb8:	20001c2c 	.word	0x20001c2c
 8009bbc:	20001c28 	.word	0x20001c28
 8009bc0:	20001c38 	.word	0x20001c38

08009bc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009bcc:	4b28      	ldr	r3, [pc, #160]	@ (8009c70 <prvInsertBlockIntoFreeList+0xac>)
 8009bce:	60fb      	str	r3, [r7, #12]
 8009bd0:	e002      	b.n	8009bd8 <prvInsertBlockIntoFreeList+0x14>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	60fb      	str	r3, [r7, #12]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d8f7      	bhi.n	8009bd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	4413      	add	r3, r2
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d108      	bne.n	8009c06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	685a      	ldr	r2, [r3, #4]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	441a      	add	r2, r3
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	68ba      	ldr	r2, [r7, #8]
 8009c10:	441a      	add	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d118      	bne.n	8009c4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	4b15      	ldr	r3, [pc, #84]	@ (8009c74 <prvInsertBlockIntoFreeList+0xb0>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d00d      	beq.n	8009c42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	441a      	add	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	601a      	str	r2, [r3, #0]
 8009c40:	e008      	b.n	8009c54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c42:	4b0c      	ldr	r3, [pc, #48]	@ (8009c74 <prvInsertBlockIntoFreeList+0xb0>)
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	601a      	str	r2, [r3, #0]
 8009c4a:	e003      	b.n	8009c54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d002      	beq.n	8009c62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c62:	bf00      	nop
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	20001c1c 	.word	0x20001c1c
 8009c74:	20001c24 	.word	0x20001c24

08009c78 <memset>:
 8009c78:	4402      	add	r2, r0
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d100      	bne.n	8009c82 <memset+0xa>
 8009c80:	4770      	bx	lr
 8009c82:	f803 1b01 	strb.w	r1, [r3], #1
 8009c86:	e7f9      	b.n	8009c7c <memset+0x4>

08009c88 <_reclaim_reent>:
 8009c88:	4b29      	ldr	r3, [pc, #164]	@ (8009d30 <_reclaim_reent+0xa8>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4283      	cmp	r3, r0
 8009c8e:	b570      	push	{r4, r5, r6, lr}
 8009c90:	4604      	mov	r4, r0
 8009c92:	d04b      	beq.n	8009d2c <_reclaim_reent+0xa4>
 8009c94:	69c3      	ldr	r3, [r0, #28]
 8009c96:	b1ab      	cbz	r3, 8009cc4 <_reclaim_reent+0x3c>
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	b16b      	cbz	r3, 8009cb8 <_reclaim_reent+0x30>
 8009c9c:	2500      	movs	r5, #0
 8009c9e:	69e3      	ldr	r3, [r4, #28]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	5959      	ldr	r1, [r3, r5]
 8009ca4:	2900      	cmp	r1, #0
 8009ca6:	d13b      	bne.n	8009d20 <_reclaim_reent+0x98>
 8009ca8:	3504      	adds	r5, #4
 8009caa:	2d80      	cmp	r5, #128	@ 0x80
 8009cac:	d1f7      	bne.n	8009c9e <_reclaim_reent+0x16>
 8009cae:	69e3      	ldr	r3, [r4, #28]
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	68d9      	ldr	r1, [r3, #12]
 8009cb4:	f000 f872 	bl	8009d9c <_free_r>
 8009cb8:	69e3      	ldr	r3, [r4, #28]
 8009cba:	6819      	ldr	r1, [r3, #0]
 8009cbc:	b111      	cbz	r1, 8009cc4 <_reclaim_reent+0x3c>
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f000 f86c 	bl	8009d9c <_free_r>
 8009cc4:	6961      	ldr	r1, [r4, #20]
 8009cc6:	b111      	cbz	r1, 8009cce <_reclaim_reent+0x46>
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f000 f867 	bl	8009d9c <_free_r>
 8009cce:	69e1      	ldr	r1, [r4, #28]
 8009cd0:	b111      	cbz	r1, 8009cd8 <_reclaim_reent+0x50>
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f000 f862 	bl	8009d9c <_free_r>
 8009cd8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009cda:	b111      	cbz	r1, 8009ce2 <_reclaim_reent+0x5a>
 8009cdc:	4620      	mov	r0, r4
 8009cde:	f000 f85d 	bl	8009d9c <_free_r>
 8009ce2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ce4:	b111      	cbz	r1, 8009cec <_reclaim_reent+0x64>
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f000 f858 	bl	8009d9c <_free_r>
 8009cec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009cee:	b111      	cbz	r1, 8009cf6 <_reclaim_reent+0x6e>
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f000 f853 	bl	8009d9c <_free_r>
 8009cf6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009cf8:	b111      	cbz	r1, 8009d00 <_reclaim_reent+0x78>
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	f000 f84e 	bl	8009d9c <_free_r>
 8009d00:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009d02:	b111      	cbz	r1, 8009d0a <_reclaim_reent+0x82>
 8009d04:	4620      	mov	r0, r4
 8009d06:	f000 f849 	bl	8009d9c <_free_r>
 8009d0a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009d0c:	b111      	cbz	r1, 8009d14 <_reclaim_reent+0x8c>
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f000 f844 	bl	8009d9c <_free_r>
 8009d14:	6a23      	ldr	r3, [r4, #32]
 8009d16:	b14b      	cbz	r3, 8009d2c <_reclaim_reent+0xa4>
 8009d18:	4620      	mov	r0, r4
 8009d1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d1e:	4718      	bx	r3
 8009d20:	680e      	ldr	r6, [r1, #0]
 8009d22:	4620      	mov	r0, r4
 8009d24:	f000 f83a 	bl	8009d9c <_free_r>
 8009d28:	4631      	mov	r1, r6
 8009d2a:	e7bb      	b.n	8009ca4 <_reclaim_reent+0x1c>
 8009d2c:	bd70      	pop	{r4, r5, r6, pc}
 8009d2e:	bf00      	nop
 8009d30:	20000010 	.word	0x20000010

08009d34 <__libc_init_array>:
 8009d34:	b570      	push	{r4, r5, r6, lr}
 8009d36:	4d0d      	ldr	r5, [pc, #52]	@ (8009d6c <__libc_init_array+0x38>)
 8009d38:	4c0d      	ldr	r4, [pc, #52]	@ (8009d70 <__libc_init_array+0x3c>)
 8009d3a:	1b64      	subs	r4, r4, r5
 8009d3c:	10a4      	asrs	r4, r4, #2
 8009d3e:	2600      	movs	r6, #0
 8009d40:	42a6      	cmp	r6, r4
 8009d42:	d109      	bne.n	8009d58 <__libc_init_array+0x24>
 8009d44:	4d0b      	ldr	r5, [pc, #44]	@ (8009d74 <__libc_init_array+0x40>)
 8009d46:	4c0c      	ldr	r4, [pc, #48]	@ (8009d78 <__libc_init_array+0x44>)
 8009d48:	f000 f87e 	bl	8009e48 <_init>
 8009d4c:	1b64      	subs	r4, r4, r5
 8009d4e:	10a4      	asrs	r4, r4, #2
 8009d50:	2600      	movs	r6, #0
 8009d52:	42a6      	cmp	r6, r4
 8009d54:	d105      	bne.n	8009d62 <__libc_init_array+0x2e>
 8009d56:	bd70      	pop	{r4, r5, r6, pc}
 8009d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d5c:	4798      	blx	r3
 8009d5e:	3601      	adds	r6, #1
 8009d60:	e7ee      	b.n	8009d40 <__libc_init_array+0xc>
 8009d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d66:	4798      	blx	r3
 8009d68:	3601      	adds	r6, #1
 8009d6a:	e7f2      	b.n	8009d52 <__libc_init_array+0x1e>
 8009d6c:	08009f68 	.word	0x08009f68
 8009d70:	08009f68 	.word	0x08009f68
 8009d74:	08009f68 	.word	0x08009f68
 8009d78:	08009f6c 	.word	0x08009f6c

08009d7c <__retarget_lock_acquire_recursive>:
 8009d7c:	4770      	bx	lr

08009d7e <__retarget_lock_release_recursive>:
 8009d7e:	4770      	bx	lr

08009d80 <memcpy>:
 8009d80:	440a      	add	r2, r1
 8009d82:	4291      	cmp	r1, r2
 8009d84:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009d88:	d100      	bne.n	8009d8c <memcpy+0xc>
 8009d8a:	4770      	bx	lr
 8009d8c:	b510      	push	{r4, lr}
 8009d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d96:	4291      	cmp	r1, r2
 8009d98:	d1f9      	bne.n	8009d8e <memcpy+0xe>
 8009d9a:	bd10      	pop	{r4, pc}

08009d9c <_free_r>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	4605      	mov	r5, r0
 8009da0:	2900      	cmp	r1, #0
 8009da2:	d041      	beq.n	8009e28 <_free_r+0x8c>
 8009da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009da8:	1f0c      	subs	r4, r1, #4
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	bfb8      	it	lt
 8009dae:	18e4      	addlt	r4, r4, r3
 8009db0:	f000 f83e 	bl	8009e30 <__malloc_lock>
 8009db4:	4a1d      	ldr	r2, [pc, #116]	@ (8009e2c <_free_r+0x90>)
 8009db6:	6813      	ldr	r3, [r2, #0]
 8009db8:	b933      	cbnz	r3, 8009dc8 <_free_r+0x2c>
 8009dba:	6063      	str	r3, [r4, #4]
 8009dbc:	6014      	str	r4, [r2, #0]
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dc4:	f000 b83a 	b.w	8009e3c <__malloc_unlock>
 8009dc8:	42a3      	cmp	r3, r4
 8009dca:	d908      	bls.n	8009dde <_free_r+0x42>
 8009dcc:	6820      	ldr	r0, [r4, #0]
 8009dce:	1821      	adds	r1, r4, r0
 8009dd0:	428b      	cmp	r3, r1
 8009dd2:	bf01      	itttt	eq
 8009dd4:	6819      	ldreq	r1, [r3, #0]
 8009dd6:	685b      	ldreq	r3, [r3, #4]
 8009dd8:	1809      	addeq	r1, r1, r0
 8009dda:	6021      	streq	r1, [r4, #0]
 8009ddc:	e7ed      	b.n	8009dba <_free_r+0x1e>
 8009dde:	461a      	mov	r2, r3
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	b10b      	cbz	r3, 8009de8 <_free_r+0x4c>
 8009de4:	42a3      	cmp	r3, r4
 8009de6:	d9fa      	bls.n	8009dde <_free_r+0x42>
 8009de8:	6811      	ldr	r1, [r2, #0]
 8009dea:	1850      	adds	r0, r2, r1
 8009dec:	42a0      	cmp	r0, r4
 8009dee:	d10b      	bne.n	8009e08 <_free_r+0x6c>
 8009df0:	6820      	ldr	r0, [r4, #0]
 8009df2:	4401      	add	r1, r0
 8009df4:	1850      	adds	r0, r2, r1
 8009df6:	4283      	cmp	r3, r0
 8009df8:	6011      	str	r1, [r2, #0]
 8009dfa:	d1e0      	bne.n	8009dbe <_free_r+0x22>
 8009dfc:	6818      	ldr	r0, [r3, #0]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	6053      	str	r3, [r2, #4]
 8009e02:	4408      	add	r0, r1
 8009e04:	6010      	str	r0, [r2, #0]
 8009e06:	e7da      	b.n	8009dbe <_free_r+0x22>
 8009e08:	d902      	bls.n	8009e10 <_free_r+0x74>
 8009e0a:	230c      	movs	r3, #12
 8009e0c:	602b      	str	r3, [r5, #0]
 8009e0e:	e7d6      	b.n	8009dbe <_free_r+0x22>
 8009e10:	6820      	ldr	r0, [r4, #0]
 8009e12:	1821      	adds	r1, r4, r0
 8009e14:	428b      	cmp	r3, r1
 8009e16:	bf04      	itt	eq
 8009e18:	6819      	ldreq	r1, [r3, #0]
 8009e1a:	685b      	ldreq	r3, [r3, #4]
 8009e1c:	6063      	str	r3, [r4, #4]
 8009e1e:	bf04      	itt	eq
 8009e20:	1809      	addeq	r1, r1, r0
 8009e22:	6021      	streq	r1, [r4, #0]
 8009e24:	6054      	str	r4, [r2, #4]
 8009e26:	e7ca      	b.n	8009dbe <_free_r+0x22>
 8009e28:	bd38      	pop	{r3, r4, r5, pc}
 8009e2a:	bf00      	nop
 8009e2c:	20001d78 	.word	0x20001d78

08009e30 <__malloc_lock>:
 8009e30:	4801      	ldr	r0, [pc, #4]	@ (8009e38 <__malloc_lock+0x8>)
 8009e32:	f7ff bfa3 	b.w	8009d7c <__retarget_lock_acquire_recursive>
 8009e36:	bf00      	nop
 8009e38:	20001d74 	.word	0x20001d74

08009e3c <__malloc_unlock>:
 8009e3c:	4801      	ldr	r0, [pc, #4]	@ (8009e44 <__malloc_unlock+0x8>)
 8009e3e:	f7ff bf9e 	b.w	8009d7e <__retarget_lock_release_recursive>
 8009e42:	bf00      	nop
 8009e44:	20001d74 	.word	0x20001d74

08009e48 <_init>:
 8009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4a:	bf00      	nop
 8009e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e4e:	bc08      	pop	{r3}
 8009e50:	469e      	mov	lr, r3
 8009e52:	4770      	bx	lr

08009e54 <_fini>:
 8009e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e56:	bf00      	nop
 8009e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5a:	bc08      	pop	{r3}
 8009e5c:	469e      	mov	lr, r3
 8009e5e:	4770      	bx	lr
