
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a310  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800a4c0  0800a4c0  0000b4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5fc  0800a5fc  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5fc  0800a5fc  0000b5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a604  0800a604  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a604  0800a604  0000b604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a608  0800a608  0000b608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800a60c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d70  20000060  0800a66c  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001dd0  0800a66c  0000cdd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000267db  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049ae  00000000  00000000  0003286b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002098  00000000  00000000  00037220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001978  00000000  00000000  000392b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd6f  00000000  00000000  0003ac30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000258b5  00000000  00000000  0006899f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124365  00000000  00000000  0008e254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b25b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f90  00000000  00000000  001b25fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001bb58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a4a8 	.word	0x0800a4a8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	0800a4a8 	.word	0x0800a4a8

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <TCAL9538RSVR_INIT>:
    
    return pin_number; 
}

uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	4611      	mov	r1, r2
 80004ec:	461a      	mov	r2, r3
 80004ee:	460b      	mov	r3, r1
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	4613      	mov	r3, r2
 80004f4:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;


    dev->i2cHandle = i2cHandle;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	68ba      	ldr	r2, [r7, #8]
 80004fe:	601a      	str	r2, [r3, #0]
    dev->portValues = 0;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2200      	movs	r2, #0
 8000504:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	f003 0303 	and.w	r3, r3, #3
 800050c:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress<<1);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	b25b      	sxtb	r3, r3
 8000514:	f063 031f 	orn	r3, r3, #31
 8000518:	b25b      	sxtb	r3, r3
 800051a:	b2da      	uxtb	r2, r3
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	711a      	strb	r2, [r3, #4]
    uint8_t hold_bitMask = direction_bitMask;
 8000520:	79bb      	ldrb	r3, [r7, #6]
 8000522:	757b      	strb	r3, [r7, #21]

    status = TCAL9538RSVR_SetDirection(dev, &hold_bitMask);
 8000524:	f107 0315 	add.w	r3, r7, #21
 8000528:	4619      	mov	r1, r3
 800052a:	68f8      	ldr	r0, [r7, #12]
 800052c:	f000 f823 	bl	8000576 <TCAL9538RSVR_SetDirection>
 8000530:	4603      	mov	r3, r0
 8000532:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8000534:	7dbb      	ldrb	r3, [r7, #22]
 8000536:	2b00      	cmp	r3, #0
 8000538:	bf14      	ite	ne
 800053a:	2301      	movne	r3, #1
 800053c:	2300      	moveq	r3, #0
 800053e:	b2db      	uxtb	r3, r3
 8000540:	461a      	mov	r2, r3
 8000542:	7dfb      	ldrb	r3, [r7, #23]
 8000544:	4413      	add	r3, r2
 8000546:	75fb      	strb	r3, [r7, #23]

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 8000548:	f897 3020 	ldrb.w	r3, [r7, #32]
 800054c:	4619      	mov	r1, r3
 800054e:	68f8      	ldr	r0, [r7, #12]
 8000550:	f000 f820 	bl	8000594 <TCAL9538RSVR_SetInterrupts>
 8000554:	4603      	mov	r3, r0
 8000556:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8000558:	7dbb      	ldrb	r3, [r7, #22]
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf14      	ite	ne
 800055e:	2301      	movne	r3, #1
 8000560:	2300      	moveq	r3, #0
 8000562:	b2db      	uxtb	r3, r3
 8000564:	461a      	mov	r2, r3
 8000566:	7dfb      	ldrb	r3, [r7, #23]
 8000568:	4413      	add	r3, r2
 800056a:	75fb      	strb	r3, [r7, #23]

    return (errNum);
 800056c:	7dfb      	ldrb	r3, [r7, #23]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3718      	adds	r7, #24
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t* bitMask)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	b082      	sub	sp, #8
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, bitMask);
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	2103      	movs	r1, #3
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f000 f879 	bl	800067c <TCAL9538RSVR_WriteRegister>
 800058a:	4603      	mov	r3, r0
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 80005a0:	1cfb      	adds	r3, r7, #3
 80005a2:	461a      	mov	r2, r3
 80005a4:	2145      	movs	r1, #69	@ 0x45
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f000 f868 	bl	800067c <TCAL9538RSVR_WriteRegister>
 80005ac:	4603      	mov	r3, r0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b084      	sub	sp, #16
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    uint8_t triggeredInterrupts = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	737b      	strb	r3, [r7, #13]

    // Read updated input values
    status = TCAL9538RSVR_ReadInput(dev, &dev->portValues);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3305      	adds	r3, #5
 80005ca:	4619      	mov	r1, r3
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 f81a 	bl	8000606 <TCAL9538RSVR_ReadInput>
 80005d2:	4603      	mov	r3, r0
 80005d4:	73bb      	strb	r3, [r7, #14]

    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 80005d6:	f107 030d 	add.w	r3, r7, #13
 80005da:	461a      	mov	r2, r3
 80005dc:	2146      	movs	r1, #70	@ 0x46
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f000 f82f 	bl	8000642 <TCAL9538RSVR_ReadRegister>
 80005e4:	4603      	mov	r3, r0
 80005e6:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 80005e8:	7bbb      	ldrb	r3, [r7, #14]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	bf14      	ite	ne
 80005ee:	2301      	movne	r3, #1
 80005f0:	2300      	moveq	r3, #0
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	461a      	mov	r2, r3
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	4413      	add	r3, r2
 80005fa:	73fb      	strb	r3, [r7, #15]

    //status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
    //errNum += (status != HAL_OK);

    return (errNum);
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <TCAL9538RSVR_ReadInput>:
    
// }


HAL_StatusTypeDef TCAL9538RSVR_ReadInput(TCAL9538RSVR* dev, uint8_t *data)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
 800060e:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, data);
 8000610:	683a      	ldr	r2, [r7, #0]
 8000612:	2100      	movs	r1, #0
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 f814 	bl	8000642 <TCAL9538RSVR_ReadRegister>
 800061a:	4603      	mov	r3, r0
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <TCAL9538RSVR_SetOutput>:
HAL_StatusTypeDef TCAL9538RSVR_SetOutput(TCAL9538RSVR* dev, uint8_t *data)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
 800062e:	683a      	ldr	r2, [r7, #0]
 8000630:	2101      	movs	r1, #1
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f000 f822 	bl	800067c <TCAL9538RSVR_WriteRegister>
 8000638:	4603      	mov	r3, r0
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <TCAL9538RSVR_ReadRegister>:

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b088      	sub	sp, #32
 8000646:	af04      	add	r7, sp, #16
 8000648:	60f8      	str	r0, [r7, #12]
 800064a:	460b      	mov	r3, r1
 800064c:	607a      	str	r2, [r7, #4]
 800064e:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	6818      	ldr	r0, [r3, #0]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	791b      	ldrb	r3, [r3, #4]
 8000658:	4619      	mov	r1, r3
 800065a:	7afb      	ldrb	r3, [r7, #11]
 800065c:	b29a      	uxth	r2, r3
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	9302      	str	r3, [sp, #8]
 8000664:	2301      	movs	r3, #1
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2301      	movs	r3, #1
 800066e:	f003 fa05 	bl	8003a7c <HAL_I2C_Mem_Read>
 8000672:	4603      	mov	r3, r0
}
 8000674:	4618      	mov	r0, r3
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af04      	add	r7, sp, #16
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	460b      	mov	r3, r1
 8000686:	607a      	str	r2, [r7, #4]
 8000688:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Write(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	6818      	ldr	r0, [r3, #0]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	4619      	mov	r1, r3
 8000694:	7afb      	ldrb	r3, [r7, #11]
 8000696:	b29a      	uxth	r2, r3
 8000698:	f04f 33ff 	mov.w	r3, #4294967295
 800069c:	9302      	str	r3, [sp, #8]
 800069e:	2301      	movs	r3, #1
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2301      	movs	r3, #1
 80006a8:	f003 f8d4 	bl	8003854 <HAL_I2C_Mem_Write>
 80006ac:	4603      	mov	r3, r0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <Update_CAN_Message1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Update_CAN_Message1(uint8_t flags[8], uint8_t* Input1, uint8_t* Input2)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
	 * Debounce buttons software (maybe)
	 * Check if toggling or just setting (toggling blinkers yes but toggling break)
	 * CAN message is sending state, ie lights should be blinking, etc.
	 */

	flags[0] = 0;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
	flags[1] = 0;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	3301      	adds	r3, #1
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]

	flags[0] |= CHECK_BIT(*Input2, 4) << 0; // Main
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	b25a      	sxtb	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	f003 0310 	and.w	r3, r3, #16
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	bf14      	ite	ne
 80006e4:	2301      	movne	r3, #1
 80006e6:	2300      	moveq	r3, #0
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	b25b      	sxtb	r3, r3
 80006ec:	4313      	orrs	r3, r2
 80006ee:	b25b      	sxtb	r3, r3
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(*Input2, 5) << 1; // Break
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b25a      	sxtb	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	111b      	asrs	r3, r3, #4
 8000702:	b25b      	sxtb	r3, r3
 8000704:	f003 0302 	and.w	r3, r3, #2
 8000708:	b25b      	sxtb	r3, r3
 800070a:	4313      	orrs	r3, r2
 800070c:	b25b      	sxtb	r3, r3
 800070e:	b2da      	uxtb	r2, r3
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(*Input2, 0) << 2; // Mode
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	b25a      	sxtb	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	b25b      	sxtb	r3, r3
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	b25b      	sxtb	r3, r3
 8000728:	4313      	orrs	r3, r2
 800072a:	b25b      	sxtb	r3, r3
 800072c:	b2da      	uxtb	r2, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(*Input1, 5) << 3; // MC
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b25a      	sxtb	r2, r3
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	109b      	asrs	r3, r3, #2
 800073e:	b25b      	sxtb	r3, r3
 8000740:	f003 0308 	and.w	r3, r3, #8
 8000744:	b25b      	sxtb	r3, r3
 8000746:	4313      	orrs	r3, r2
 8000748:	b25b      	sxtb	r3, r3
 800074a:	b2da      	uxtb	r2, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(*Input1, 6) << 4; // Array
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b25a      	sxtb	r2, r3
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	109b      	asrs	r3, r3, #2
 800075c:	b25b      	sxtb	r3, r3
 800075e:	f003 0310 	and.w	r3, r3, #16
 8000762:	b25b      	sxtb	r3, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	b25b      	sxtb	r3, r3
 8000768:	b2da      	uxtb	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(*Input1, 4) << 5; // Extra 1
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b25a      	sxtb	r2, r3
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	b25b      	sxtb	r3, r3
 800077c:	f003 0320 	and.w	r3, r3, #32
 8000780:	b25b      	sxtb	r3, r3
 8000782:	4313      	orrs	r3, r2
 8000784:	b25b      	sxtb	r3, r3
 8000786:	b2da      	uxtb	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(outputPortState, 5) << 6; // Horn
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b25a      	sxtb	r2, r3
 8000792:	4b2b      	ldr	r3, [pc, #172]	@ (8000840 <Update_CAN_Message1+0x188>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	b25b      	sxtb	r3, r3
 800079a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800079e:	b25b      	sxtb	r3, r3
 80007a0:	4313      	orrs	r3, r2
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(outputPortState, 6) << 7; // PTT
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b25a      	sxtb	r2, r3
 80007b0:	4b23      	ldr	r3, [pc, #140]	@ (8000840 <Update_CAN_Message1+0x188>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80007bc:	b25b      	sxtb	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b25b      	sxtb	r3, r3
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	701a      	strb	r2, [r3, #0]

	flags[1] |= CHECK_BIT(outputPortState, 2) << 0; // Blinkers
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	3301      	adds	r3, #1
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b25a      	sxtb	r2, r3
 80007d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <Update_CAN_Message1+0x188>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf14      	ite	ne
 80007dc:	2301      	movne	r3, #1
 80007de:	2300      	moveq	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	b25b      	sxtb	r3, r3
 80007e4:	4313      	orrs	r3, r2
 80007e6:	b25a      	sxtb	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3301      	adds	r3, #1
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	701a      	strb	r2, [r3, #0]
	flags[1] |= CHECK_BIT(outputPortState, 0) << 1; // Left Turn Signal
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3301      	adds	r3, #1
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	b25a      	sxtb	r2, r3
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <Update_CAN_Message1+0x188>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	b25b      	sxtb	r3, r3
 8000800:	f003 0302 	and.w	r3, r3, #2
 8000804:	b25b      	sxtb	r3, r3
 8000806:	4313      	orrs	r3, r2
 8000808:	b25a      	sxtb	r2, r3
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3301      	adds	r3, #1
 800080e:	b2d2      	uxtb	r2, r2
 8000810:	701a      	strb	r2, [r3, #0]
	flags[1] |= CHECK_BIT(outputPortState, 1) << 2; // Right Turn Signal
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	3301      	adds	r3, #1
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b25a      	sxtb	r2, r3
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <Update_CAN_Message1+0x188>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	b25b      	sxtb	r3, r3
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	b25b      	sxtb	r3, r3
 8000828:	4313      	orrs	r3, r2
 800082a:	b25a      	sxtb	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	3301      	adds	r3, #1
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	701a      	strb	r2, [r3, #0]

}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	20000284 	.word	0x20000284

08000844 <updateDebounce>:

uint8_t updateDebounce(uint8_t stable, uint8_t newReading, uint8_t *counter) {
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	603a      	str	r2, [r7, #0]
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	460b      	mov	r3, r1
 8000852:	71bb      	strb	r3, [r7, #6]
    if (newReading != stable) {
 8000854:	79ba      	ldrb	r2, [r7, #6]
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	429a      	cmp	r2, r3
 800085a:	d00e      	beq.n	800087a <updateDebounce+0x36>
        (*counter)++;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	701a      	strb	r2, [r3, #0]
        if (*counter >= 3) {
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d907      	bls.n	8000880 <updateDebounce+0x3c>
            *counter = 0;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
            return newReading;
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	e003      	b.n	8000882 <updateDebounce+0x3e>
        }
    } else {
        *counter = 0;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
    }
    return stable;
 8000880:	79fb      	ldrb	r3, [r7, #7]
}
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <HAL_GPIO_EXTI_Callback>:

}

// GPIO Expander Interrupt Handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
	GPIO_Interrupt_Triggered = 1;
 800089a:	4b04      	ldr	r3, [pc, #16]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x1c>)
 800089c:	2201      	movs	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	20000280 	.word	0x20000280

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b6:	f000 fec0 	bl	800163a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ba:	f000 f87b 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008be:	f000 fa2b 	bl	8000d18 <MX_GPIO_Init>
  MX_DMA_Init();
 80008c2:	f000 fa0b 	bl	8000cdc <MX_DMA_Init>
  MX_ADC1_Init();
 80008c6:	f000 f8bb 	bl	8000a40 <MX_ADC1_Init>
  MX_I2C4_Init();
 80008ca:	f000 f997 	bl	8000bfc <MX_I2C4_Init>
  MX_CAN1_Init();
 80008ce:	f000 f92d 	bl	8000b2c <MX_CAN1_Init>
  MX_CAN2_Init();
 80008d2:	f000 f95f 	bl	8000b94 <MX_CAN2_Init>
  MX_UART4_Init();
 80008d6:	f000 f9d1 	bl	8000c7c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  if (TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0b11110000, 0b00001111) != HAL_OK) { Error_Handler(); } // inputs
 80008da:	230f      	movs	r3, #15
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	23f0      	movs	r3, #240	@ 0xf0
 80008e0:	2202      	movs	r2, #2
 80008e2:	4923      	ldr	r1, [pc, #140]	@ (8000970 <main+0xc0>)
 80008e4:	4823      	ldr	r0, [pc, #140]	@ (8000974 <main+0xc4>)
 80008e6:	f7ff fdfb 	bl	80004e0 <TCAL9538RSVR_INIT>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <main+0x44>
 80008f0:	f000 fb8c 	bl	800100c <Error_Handler>
  uint8_t reg_read_hold;
  TCAL9538RSVR_ReadRegister(&U5, 0x45, &reg_read_hold);
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	461a      	mov	r2, r3
 80008f8:	2145      	movs	r1, #69	@ 0x45
 80008fa:	481e      	ldr	r0, [pc, #120]	@ (8000974 <main+0xc4>)
 80008fc:	f7ff fea1 	bl	8000642 <TCAL9538RSVR_ReadRegister>
  //if (TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b00111111, 0b11000000) != HAL_OK) { Error_Handler(); }
  if (TCAL9538RSVR_INIT(&U7, &hi2c4, 0x00, 0b00000000, 0b00000000) != HAL_OK) { Error_Handler(); } // output
 8000900:	2300      	movs	r3, #0
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2300      	movs	r3, #0
 8000906:	2200      	movs	r2, #0
 8000908:	4919      	ldr	r1, [pc, #100]	@ (8000970 <main+0xc0>)
 800090a:	481b      	ldr	r0, [pc, #108]	@ (8000978 <main+0xc8>)
 800090c:	f7ff fde8 	bl	80004e0 <TCAL9538RSVR_INIT>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <main+0x6a>
 8000916:	f000 fb79 	bl	800100c <Error_Handler>


  HAL_UART_Receive_IT(&huart4, &uart_rx, 1); // enables uart interrupt, it will call the interrupt when one byte is recieved
 800091a:	2201      	movs	r2, #1
 800091c:	4917      	ldr	r1, [pc, #92]	@ (800097c <main+0xcc>)
 800091e:	4818      	ldr	r0, [pc, #96]	@ (8000980 <main+0xd0>)
 8000920:	f005 fbd2 	bl	80060c8 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000924:	f006 ff26 	bl	8007774 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartTask01, NULL, &HeartBeat_attributes);
 8000928:	4a16      	ldr	r2, [pc, #88]	@ (8000984 <main+0xd4>)
 800092a:	2100      	movs	r1, #0
 800092c:	4816      	ldr	r0, [pc, #88]	@ (8000988 <main+0xd8>)
 800092e:	f006 ff6b 	bl	8007808 <osThreadNew>
 8000932:	4603      	mov	r3, r0
 8000934:	4a15      	ldr	r2, [pc, #84]	@ (800098c <main+0xdc>)
 8000936:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);
 8000938:	4a15      	ldr	r2, [pc, #84]	@ (8000990 <main+0xe0>)
 800093a:	2100      	movs	r1, #0
 800093c:	4815      	ldr	r0, [pc, #84]	@ (8000994 <main+0xe4>)
 800093e:	f006 ff63 	bl	8007808 <osThreadNew>
 8000942:	4603      	mov	r3, r0
 8000944:	4a14      	ldr	r2, [pc, #80]	@ (8000998 <main+0xe8>)
 8000946:	6013      	str	r3, [r2, #0]

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 8000948:	4a14      	ldr	r2, [pc, #80]	@ (800099c <main+0xec>)
 800094a:	2100      	movs	r1, #0
 800094c:	4814      	ldr	r0, [pc, #80]	@ (80009a0 <main+0xf0>)
 800094e:	f006 ff5b 	bl	8007808 <osThreadNew>
 8000952:	4603      	mov	r3, r0
 8000954:	4a13      	ldr	r2, [pc, #76]	@ (80009a4 <main+0xf4>)
 8000956:	6013      	str	r3, [r2, #0]

  /* creation of Outputs_Control */
  Outputs_ControlHandle = osThreadNew(StartTask04, NULL, &Outputs_Control_attributes);
 8000958:	4a13      	ldr	r2, [pc, #76]	@ (80009a8 <main+0xf8>)
 800095a:	2100      	movs	r1, #0
 800095c:	4813      	ldr	r0, [pc, #76]	@ (80009ac <main+0xfc>)
 800095e:	f006 ff53 	bl	8007808 <osThreadNew>
 8000962:	4603      	mov	r3, r0
 8000964:	4a12      	ldr	r2, [pc, #72]	@ (80009b0 <main+0x100>)
 8000966:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000968:	f006 ff28 	bl	80077bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <main+0xbc>
 8000970:	2000017c 	.word	0x2000017c
 8000974:	20000268 	.word	0x20000268
 8000978:	20000278 	.word	0x20000278
 800097c:	20000285 	.word	0x20000285
 8000980:	200001d0 	.word	0x200001d0
 8000984:	0800a524 	.word	0x0800a524
 8000988:	08000e1d 	.word	0x08000e1d
 800098c:	20000258 	.word	0x20000258
 8000990:	0800a548 	.word	0x0800a548
 8000994:	08000e51 	.word	0x08000e51
 8000998:	2000025c 	.word	0x2000025c
 800099c:	0800a56c 	.word	0x0800a56c
 80009a0:	08000e79 	.word	0x08000e79
 80009a4:	20000260 	.word	0x20000260
 80009a8:	0800a590 	.word	0x0800a590
 80009ac:	08000f35 	.word	0x08000f35
 80009b0:	20000264 	.word	0x20000264

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b096      	sub	sp, #88	@ 0x58
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	2244      	movs	r2, #68	@ 0x44
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f009 fc88 	bl	800a2d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	463b      	mov	r3, r7
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009da:	f003 fcd1 	bl	8004380 <HAL_PWREx_ControlVoltageScaling>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009e4:	f000 fb12 	bl	800100c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009e8:	2310      	movs	r3, #16
 80009ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009ec:	2301      	movs	r3, #1
 80009ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009f4:	2360      	movs	r3, #96	@ 0x60
 80009f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 fd13 	bl	800442c <HAL_RCC_OscConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000a0c:	f000 fafe 	bl	800100c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a10:	230f      	movs	r3, #15
 8000a12:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a24:	463b      	mov	r3, r7
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f004 f919 	bl	8004c60 <HAL_RCC_ClockConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a34:	f000 faea 	bl	800100c <Error_Handler>
  }
}
 8000a38:	bf00      	nop
 8000a3a:	3758      	adds	r7, #88	@ 0x58
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	@ 0x28
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
 8000a60:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a62:	4b2f      	ldr	r3, [pc, #188]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000a64:	4a2f      	ldr	r2, [pc, #188]	@ (8000b24 <MX_ADC1_Init+0xe4>)
 8000a66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a68:	4b2d      	ldr	r3, [pc, #180]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a74:	4b2a      	ldr	r3, [pc, #168]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a7a:	4b29      	ldr	r3, [pc, #164]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a80:	4b27      	ldr	r3, [pc, #156]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000a82:	2204      	movs	r2, #4
 8000a84:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a86:	4b26      	ldr	r3, [pc, #152]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a8c:	4b24      	ldr	r3, [pc, #144]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a92:	4b23      	ldr	r3, [pc, #140]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a98:	4b21      	ldr	r3, [pc, #132]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000aac:	4b1c      	ldr	r3, [pc, #112]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000aba:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ac2:	4817      	ldr	r0, [pc, #92]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000ac4:	f000 ffda 	bl	8001a7c <HAL_ADC_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ace:	f000 fa9d 	bl	800100c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	4810      	ldr	r0, [pc, #64]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000ade:	f001 ff3d 	bl	800295c <HAL_ADCEx_MultiModeConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ae8:	f000 fa90 	bl	800100c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <MX_ADC1_Init+0xe8>)
 8000aee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af0:	2306      	movs	r3, #6
 8000af2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000af8:	237f      	movs	r3, #127	@ 0x7f
 8000afa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000afc:	2304      	movs	r3, #4
 8000afe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000b0a:	f001 f9db 	bl	8001ec4 <HAL_ADC_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000b14:	f000 fa7a 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	3728      	adds	r7, #40	@ 0x28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000007c 	.word	0x2000007c
 8000b24:	50040000 	.word	0x50040000
 8000b28:	04300002 	.word	0x04300002

08000b2c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b30:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b32:	4a17      	ldr	r2, [pc, #92]	@ (8000b90 <MX_CAN1_Init+0x64>)
 8000b34:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b38:	2210      	movs	r2, #16
 8000b3a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b42:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000b48:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000b54:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b7a:	f001 ff9f 	bl	8002abc <HAL_CAN_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000b84:	f000 fa42 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	2000012c 	.word	0x2000012c
 8000b90:	40006400 	.word	0x40006400

08000b94 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000b98:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000b9a:	4a17      	ldr	r2, [pc, #92]	@ (8000bf8 <MX_CAN2_Init+0x64>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000ba0:	2210      	movs	r2, #16
 8000ba2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000baa:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000bb0:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000be2:	f001 ff6b 	bl	8002abc <HAL_CAN_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000bec:	f000 fa0e 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000154 	.word	0x20000154
 8000bf8:	40006800 	.word	0x40006800

08000bfc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c02:	4a1c      	ldr	r2, [pc, #112]	@ (8000c74 <MX_I2C4_Init+0x78>)
 8000c04:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c08:	4a1b      	ldr	r2, [pc, #108]	@ (8000c78 <MX_I2C4_Init+0x7c>)
 8000c0a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c12:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c18:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c24:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000c36:	480e      	ldr	r0, [pc, #56]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c38:	f002 fd70 	bl	800371c <HAL_I2C_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000c42:	f000 f9e3 	bl	800100c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c46:	2100      	movs	r1, #0
 8000c48:	4809      	ldr	r0, [pc, #36]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c4a:	f003 faf3 	bl	8004234 <HAL_I2CEx_ConfigAnalogFilter>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000c54:	f000 f9da 	bl	800100c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c5c:	f003 fb35 	bl	80042ca <HAL_I2CEx_ConfigDigitalFilter>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000c66:	f000 f9d1 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000017c 	.word	0x2000017c
 8000c74:	40008400 	.word	0x40008400
 8000c78:	00100d14 	.word	0x00100d14

08000c7c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c80:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000c82:	4a15      	ldr	r2, [pc, #84]	@ (8000cd8 <MX_UART4_Init+0x5c>)
 8000c84:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000c86:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000c88:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c8c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cac:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000cbe:	4805      	ldr	r0, [pc, #20]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000cc0:	f005 f9b4 	bl	800602c <HAL_UART_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000cca:	f000 f99f 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200001d0 	.word	0x200001d0
 8000cd8:	40004c00 	.word	0x40004c00

08000cdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <MX_DMA_Init+0x38>)
 8000ce4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	@ (8000d14 <MX_DMA_Init+0x38>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cee:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <MX_DMA_Init+0x38>)
 8000cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2105      	movs	r1, #5
 8000cfe:	200b      	movs	r0, #11
 8000d00:	f002 f890 	bl	8002e24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d04:	200b      	movs	r0, #11
 8000d06:	f002 f8a9 	bl	8002e5c <HAL_NVIC_EnableIRQ>

}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000

08000d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	4a29      	ldr	r2, [pc, #164]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3a:	4b27      	ldr	r3, [pc, #156]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	4b24      	ldr	r3, [pc, #144]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	4a23      	ldr	r2, [pc, #140]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d52:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OK_LED_GPIO_Port, OK_LED_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d80:	f002 fc82 	bl	8003688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Alert1_Pin */
  GPIO_InitStruct.Pin = Alert1_Pin;
 8000d84:	2304      	movs	r3, #4
 8000d86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d88:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Alert1_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	4619      	mov	r1, r3
 8000d98:	4810      	ldr	r0, [pc, #64]	@ (8000ddc <MX_GPIO_Init+0xc4>)
 8000d9a:	f002 fae3 	bl	8003364 <HAL_GPIO_Init>

  /*Configure GPIO pin : OK_LED_Pin */
  GPIO_InitStruct.Pin = OK_LED_Pin;
 8000d9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000da2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OK_LED_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dba:	f002 fad3 	bl	8003364 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2105      	movs	r1, #5
 8000dc2:	2008      	movs	r0, #8
 8000dc4:	f002 f82e 	bl	8002e24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000dc8:	2008      	movs	r0, #8
 8000dca:	f002 f847 	bl	8002e5c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dce:	bf00      	nop
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	48000800 	.word	0x48000800

08000de0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  // code for handling the data received over uart
  if(huart->Instance == UART4)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	@ (8000e0c <HAL_UART_RxCpltCallback+0x2c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d103      	bne.n	8000dfa <HAL_UART_RxCpltCallback+0x1a>
    }
    */



    prev_uart_rx = uart_rx;
 8000df2:	4b07      	ldr	r3, [pc, #28]	@ (8000e10 <HAL_UART_RxCpltCallback+0x30>)
 8000df4:	781a      	ldrb	r2, [r3, #0]
 8000df6:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <HAL_UART_RxCpltCallback+0x34>)
 8000df8:	701a      	strb	r2, [r3, #0]
  }

  HAL_UART_Receive_IT(&huart4, &uart_rx, 1); // reenables uart interrupt
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4904      	ldr	r1, [pc, #16]	@ (8000e10 <HAL_UART_RxCpltCallback+0x30>)
 8000dfe:	4806      	ldr	r0, [pc, #24]	@ (8000e18 <HAL_UART_RxCpltCallback+0x38>)
 8000e00:	f005 f962 	bl	80060c8 <HAL_UART_Receive_IT>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40004c00 	.word	0x40004c00
 8000e10:	20000285 	.word	0x20000285
 8000e14:	20000286 	.word	0x20000286
 8000e18:	200001d0 	.word	0x200001d0

08000e1c <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint8_t var = 0b11111111;
 8000e24:	23ff      	movs	r3, #255	@ 0xff
 8000e26:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000e28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e30:	f002 fc42 	bl	80036b8 <HAL_GPIO_TogglePin>
	//var = ~var;
	TCAL9538RSVR_SetOutput(&U7, &var);
 8000e34:	f107 030f 	add.w	r3, r7, #15
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4804      	ldr	r0, [pc, #16]	@ (8000e4c <StartTask01+0x30>)
 8000e3c:	f7ff fbf2 	bl	8000624 <TCAL9538RSVR_SetOutput>
    osDelay(500);
 8000e40:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e44:	f006 fd72 	bl	800792c <osDelay>
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000e48:	bf00      	nop
 8000e4a:	e7ed      	b.n	8000e28 <StartTask01+0xc>
 8000e4c:	20000278 	.word	0x20000278

08000e50 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

  uint16_t adc_var[10];
  uint16_t adc_var_avg = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	83fb      	strh	r3, [r7, #30]

  // Start ADC with DMA once (do NOT call it inside the loop)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000e5c:	220a      	movs	r2, #10
 8000e5e:	4904      	ldr	r1, [pc, #16]	@ (8000e70 <StartTask02+0x20>)
 8000e60:	4804      	ldr	r0, [pc, #16]	@ (8000e74 <StartTask02+0x24>)
 8000e62:	f000 ff5f 	bl	8001d24 <HAL_ADC_Start_DMA>

  for (;;)
  {
    // Wait until the ADC DMA completes
    osDelay(10); // Adjust delay if necessary
 8000e66:	200a      	movs	r0, #10
 8000e68:	f006 fd60 	bl	800792c <osDelay>
 8000e6c:	e7fb      	b.n	8000e66 <StartTask02+0x16>
 8000e6e:	bf00      	nop
 8000e70:	20000288 	.word	0x20000288
 8000e74:	2000007c 	.word	0x2000007c

08000e78 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	@ 0x30
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */



	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
	uint32_t TxMailbox;

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = 0x3FF; // 11 bit Identifier !!Change!!
 8000e8c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8000e90:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8000e96:	2308      	movs	r3, #8
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24

	Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8000f14 <StartTask03+0x9c>)
 8000ea0:	491d      	ldr	r1, [pc, #116]	@ (8000f18 <StartTask03+0xa0>)
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fc08 	bl	80006b8 <Update_CAN_Message1>
	stableInput1 = U5.portValues;
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <StartTask03+0xa4>)
 8000eaa:	795a      	ldrb	r2, [r3, #5]
 8000eac:	4b1c      	ldr	r3, [pc, #112]	@ (8000f20 <StartTask03+0xa8>)
 8000eae:	701a      	strb	r2, [r3, #0]
	stableInput2 = U16.portValues;
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <StartTask03+0xac>)
 8000eb2:	795a      	ldrb	r2, [r3, #5]
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <StartTask03+0xb0>)
 8000eb6:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	for(;;)
	{
	  // Read TCAL Input and update flags
	  if (GPIO_Interrupt_Triggered != 0)
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <StartTask03+0xb4>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d025      	beq.n	8000f0c <StartTask03+0x94>
	  {
		  if (TCAL9538RSVR_HandleInterrupt(&U5) != HAL_OK){ Error_Handler(); }
 8000ec0:	4816      	ldr	r0, [pc, #88]	@ (8000f1c <StartTask03+0xa4>)
 8000ec2:	f7ff fb78 	bl	80005b6 <TCAL9538RSVR_HandleInterrupt>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <StartTask03+0x58>
 8000ecc:	f000 f89e 	bl	800100c <Error_Handler>
		  //if (TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK){ Error_Handler(); }

		  uint8_t newInput1 = U5.portValues;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <StartTask03+0xa4>)
 8000ed2:	795b      	ldrb	r3, [r3, #5]
 8000ed4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  uint8_t newInput2 = U16.portValues;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <StartTask03+0xac>)
 8000eda:	795b      	ldrb	r3, [r3, #5]
 8000edc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

		  stableInput1 = updateDebounce(stableInput1, newInput1, &debounceCount1);
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <StartTask03+0xa8>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8000ee8:	4a11      	ldr	r2, [pc, #68]	@ (8000f30 <StartTask03+0xb8>)
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fcaa 	bl	8000844 <updateDebounce>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <StartTask03+0xa8>)
 8000ef6:	701a      	strb	r2, [r3, #0]
		  //stableInput2 = updateDebounce(stableInput2, newInput2, &debounceCount2);

		  Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	4a05      	ldr	r2, [pc, #20]	@ (8000f14 <StartTask03+0x9c>)
 8000efe:	4906      	ldr	r1, [pc, #24]	@ (8000f18 <StartTask03+0xa0>)
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fbd9 	bl	80006b8 <Update_CAN_Message1>

		  GPIO_Interrupt_Triggered = 0;
 8000f06:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <StartTask03+0xb4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
	  //while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
//	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
//	  {
//		  Error_Handler();
//	  }
	  osDelay(1);
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f006 fd0d 	bl	800792c <osDelay>
	  if (GPIO_Interrupt_Triggered != 0)
 8000f12:	e7d1      	b.n	8000eb8 <StartTask03+0x40>
 8000f14:	20000275 	.word	0x20000275
 8000f18:	2000026d 	.word	0x2000026d
 8000f1c:	20000268 	.word	0x20000268
 8000f20:	20000281 	.word	0x20000281
 8000f24:	20000270 	.word	0x20000270
 8000f28:	20000282 	.word	0x20000282
 8000f2c:	20000280 	.word	0x20000280
 8000f30:	20000283 	.word	0x20000283

08000f34 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  for(;;)
  {

    // outputPortState needs to be updated somewhere here / in a uart interrupt

    if(TCAL9538RSVR_SetOutput(&U7, &outputPortState) != HAL_OK)
 8000f3c:	4906      	ldr	r1, [pc, #24]	@ (8000f58 <StartTask04+0x24>)
 8000f3e:	4807      	ldr	r0, [pc, #28]	@ (8000f5c <StartTask04+0x28>)
 8000f40:	f7ff fb70 	bl	8000624 <TCAL9538RSVR_SetOutput>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <StartTask04+0x1a>
    {
    	Error_Handler();
 8000f4a:	f000 f85f 	bl	800100c <Error_Handler>
    }

    osDelay(50);
 8000f4e:	2032      	movs	r0, #50	@ 0x32
 8000f50:	f006 fcec 	bl	800792c <osDelay>
    if(TCAL9538RSVR_SetOutput(&U7, &outputPortState) != HAL_OK)
 8000f54:	e7f2      	b.n	8000f3c <StartTask04+0x8>
 8000f56:	bf00      	nop
 8000f58:	20000284 	.word	0x20000284
 8000f5c:	20000278 	.word	0x20000278

08000f60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d101      	bne.n	8000f76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f72:	f000 fb7b 	bl	800166c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40000400 	.word	0x40000400

08000f84 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN ADC CALLBACK */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b08f      	sub	sp, #60	@ 0x3c
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a1b      	ldr	r2, [pc, #108]	@ (8001000 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d12d      	bne.n	8000ff2 <HAL_ADC_ConvCpltCallback+0x6e>
    {
        uint16_t adc_var_avg = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	86fb      	strh	r3, [r7, #54]	@ 0x36

        // Copy ADC buffer and compute average
        for (int i = 0; i < ADC_BUF_LEN; i++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f9e:	e009      	b.n	8000fb4 <HAL_ADC_ConvCpltCallback+0x30>
        {
            adc_var_avg += adc_buf[i];
 8000fa0:	4a18      	ldr	r2, [pc, #96]	@ (8001004 <HAL_ADC_ConvCpltCallback+0x80>)
 8000fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fa4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000fa8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000faa:	4413      	add	r3, r2
 8000fac:	86fb      	strh	r3, [r7, #54]	@ 0x36
        for (int i = 0; i < ADC_BUF_LEN; i++)
 8000fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8000fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fb6:	2b09      	cmp	r3, #9
 8000fb8:	ddf2      	ble.n	8000fa0 <HAL_ADC_ConvCpltCallback+0x1c>
        }
        adc_var_avg /= ADC_BUF_LEN;
 8000fba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000fbc:	4a12      	ldr	r2, [pc, #72]	@ (8001008 <HAL_ADC_ConvCpltCallback+0x84>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	08db      	lsrs	r3, r3, #3
 8000fc4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        CAN_TxHeaderTypeDef TxHeader;
        uint8_t adc_data[2];
        uint32_t TxMailbox;
        uint8_t can_data[5];

        TxHeader.StdId = 0x0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
        TxHeader.DLC = 5;
 8000fca:	2305      	movs	r3, #5
 8000fcc:	62bb      	str	r3, [r7, #40]	@ 0x28

        adc_data[0] = adc_var_avg & 0xFF;
 8000fce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	753b      	strb	r3, [r7, #20]
        adc_data[1] = (adc_var_avg >> 8) & 0x0F;
 8000fd4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000fd6:	0a1b      	lsrs	r3, r3, #8
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	f003 030f 	and.w	r3, r3, #15
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	757b      	strb	r3, [r7, #21]

        can_data[0] = TxHeader.StdId;
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	733b      	strb	r3, [r7, #12]
        can_data[1] = adc_data[0];
 8000fea:	7d3b      	ldrb	r3, [r7, #20]
 8000fec:	737b      	strb	r3, [r7, #13]
        can_data[2] = adc_data[1];
 8000fee:	7d7b      	ldrb	r3, [r7, #21]
 8000ff0:	73bb      	strb	r3, [r7, #14]

        // Transmit over CAN
        // HAL_CAN_AddTxMessage(&hcan1, &TxHeader, can_data, &TxMailbox);
    }
}
 8000ff2:	bf00      	nop
 8000ff4:	373c      	adds	r7, #60	@ 0x3c
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	50040000 	.word	0x50040000
 8001004:	20000288 	.word	0x20000288
 8001008:	cccccccd 	.word	0xcccccccd

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001010:	b672      	cpsid	i
}
 8001012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <Error_Handler+0x8>

08001018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <HAL_MspInit+0x4c>)
 8001020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001022:	4a10      	ldr	r2, [pc, #64]	@ (8001064 <HAL_MspInit+0x4c>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6613      	str	r3, [r2, #96]	@ 0x60
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <HAL_MspInit+0x4c>)
 800102c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <HAL_MspInit+0x4c>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103a:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <HAL_MspInit+0x4c>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001040:	6593      	str	r3, [r2, #88]	@ 0x58
 8001042:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <HAL_MspInit+0x4c>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	210f      	movs	r1, #15
 8001052:	f06f 0001 	mvn.w	r0, #1
 8001056:	f001 fee5 	bl	8002e24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000

08001068 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b0ac      	sub	sp, #176	@ 0xb0
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	228c      	movs	r2, #140	@ 0x8c
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f009 f925 	bl	800a2d8 <memset>
  if(hadc->Instance==ADC1)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a35      	ldr	r2, [pc, #212]	@ (8001168 <HAL_ADC_MspInit+0x100>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d163      	bne.n	8001160 <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001098:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800109c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800109e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80010a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 f82e 	bl	800510c <HAL_RCCEx_PeriphCLKConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80010b6:	f7ff ffa9 	bl	800100c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010ba:	4b2c      	ldr	r3, [pc, #176]	@ (800116c <HAL_ADC_MspInit+0x104>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010be:	4a2b      	ldr	r2, [pc, #172]	@ (800116c <HAL_ADC_MspInit+0x104>)
 80010c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c6:	4b29      	ldr	r3, [pc, #164]	@ (800116c <HAL_ADC_MspInit+0x104>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	4b26      	ldr	r3, [pc, #152]	@ (800116c <HAL_ADC_MspInit+0x104>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d6:	4a25      	ldr	r2, [pc, #148]	@ (800116c <HAL_ADC_MspInit+0x104>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010de:	4b23      	ldr	r3, [pc, #140]	@ (800116c <HAL_ADC_MspInit+0x104>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010ea:	2301      	movs	r3, #1
 80010ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f0:	2303      	movs	r3, #3
 80010f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001100:	4619      	mov	r1, r3
 8001102:	481b      	ldr	r0, [pc, #108]	@ (8001170 <HAL_ADC_MspInit+0x108>)
 8001104:	f002 f92e 	bl	8003364 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001108:	4b1a      	ldr	r3, [pc, #104]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 800110a:	4a1b      	ldr	r2, [pc, #108]	@ (8001178 <HAL_ADC_MspInit+0x110>)
 800110c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001114:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800111a:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001120:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001122:	2280      	movs	r2, #128	@ 0x80
 8001124:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001126:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001128:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800112c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800112e:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001130:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001134:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001136:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001138:	2220      	movs	r2, #32
 800113a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800113c:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 800113e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001142:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001144:	480b      	ldr	r0, [pc, #44]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001146:	f001 fe97 	bl	8002e78 <HAL_DMA_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 8001150:	f7ff ff5c 	bl	800100c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a07      	ldr	r2, [pc, #28]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001158:	651a      	str	r2, [r3, #80]	@ 0x50
 800115a:	4a06      	ldr	r2, [pc, #24]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001160:	bf00      	nop
 8001162:	37b0      	adds	r7, #176	@ 0xb0
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	50040000 	.word	0x50040000
 800116c:	40021000 	.word	0x40021000
 8001170:	48000800 	.word	0x48000800
 8001174:	200000e4 	.word	0x200000e4
 8001178:	40020008 	.word	0x40020008

0800117c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08c      	sub	sp, #48	@ 0x30
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a45      	ldr	r2, [pc, #276]	@ (80012b0 <HAL_CAN_MspInit+0x134>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d132      	bne.n	8001204 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800119e:	4b45      	ldr	r3, [pc, #276]	@ (80012b4 <HAL_CAN_MspInit+0x138>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	4a43      	ldr	r2, [pc, #268]	@ (80012b4 <HAL_CAN_MspInit+0x138>)
 80011a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80011a8:	4b42      	ldr	r3, [pc, #264]	@ (80012b4 <HAL_CAN_MspInit+0x138>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d10b      	bne.n	80011c8 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80011b0:	4b41      	ldr	r3, [pc, #260]	@ (80012b8 <HAL_CAN_MspInit+0x13c>)
 80011b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b4:	4a40      	ldr	r2, [pc, #256]	@ (80012b8 <HAL_CAN_MspInit+0x13c>)
 80011b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80011bc:	4b3e      	ldr	r3, [pc, #248]	@ (80012b8 <HAL_CAN_MspInit+0x13c>)
 80011be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011c4:	61bb      	str	r3, [r7, #24]
 80011c6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c8:	4b3b      	ldr	r3, [pc, #236]	@ (80012b8 <HAL_CAN_MspInit+0x13c>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011cc:	4a3a      	ldr	r2, [pc, #232]	@ (80012b8 <HAL_CAN_MspInit+0x13c>)
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d4:	4b38      	ldr	r3, [pc, #224]	@ (80012b8 <HAL_CAN_MspInit+0x13c>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011f2:	2309      	movs	r3, #9
 80011f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	482f      	ldr	r0, [pc, #188]	@ (80012bc <HAL_CAN_MspInit+0x140>)
 80011fe:	f002 f8b1 	bl	8003364 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001202:	e051      	b.n	80012a8 <HAL_CAN_MspInit+0x12c>
  else if(hcan->Instance==CAN2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a2d      	ldr	r2, [pc, #180]	@ (80012c0 <HAL_CAN_MspInit+0x144>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d14c      	bne.n	80012a8 <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800120e:	4b2a      	ldr	r3, [pc, #168]	@ (80012b8 <HAL_CAN_MspInit+0x13c>)
 8001210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001212:	4a29      	ldr	r2, [pc, #164]	@ (80012b8 <HAL_CAN_MspInit+0x13c>)
 8001214:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001218:	6593      	str	r3, [r2, #88]	@ 0x58
 800121a:	4b27      	ldr	r3, [pc, #156]	@ (80012b8 <HAL_CAN_MspInit+0x13c>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001226:	4b23      	ldr	r3, [pc, #140]	@ (80012b4 <HAL_CAN_MspInit+0x138>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	4a21      	ldr	r2, [pc, #132]	@ (80012b4 <HAL_CAN_MspInit+0x138>)
 800122e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001230:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <HAL_CAN_MspInit+0x138>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d10b      	bne.n	8001250 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001238:	4b1f      	ldr	r3, [pc, #124]	@ (80012b8 <HAL_CAN_MspInit+0x13c>)
 800123a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123c:	4a1e      	ldr	r2, [pc, #120]	@ (80012b8 <HAL_CAN_MspInit+0x13c>)
 800123e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001242:	6593      	str	r3, [r2, #88]	@ 0x58
 8001244:	4b1c      	ldr	r3, [pc, #112]	@ (80012b8 <HAL_CAN_MspInit+0x13c>)
 8001246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001250:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <HAL_CAN_MspInit+0x13c>)
 8001252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001254:	4a18      	ldr	r2, [pc, #96]	@ (80012b8 <HAL_CAN_MspInit+0x13c>)
 8001256:	f043 0302 	orr.w	r3, r3, #2
 800125a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125c:	4b16      	ldr	r3, [pc, #88]	@ (80012b8 <HAL_CAN_MspInit+0x13c>)
 800125e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001268:	2320      	movs	r3, #32
 800126a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8001278:	2303      	movs	r3, #3
 800127a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	480e      	ldr	r0, [pc, #56]	@ (80012bc <HAL_CAN_MspInit+0x140>)
 8001284:	f002 f86e 	bl	8003364 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001288:	2340      	movs	r3, #64	@ 0x40
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8001298:	2308      	movs	r3, #8
 800129a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	4619      	mov	r1, r3
 80012a2:	4806      	ldr	r0, [pc, #24]	@ (80012bc <HAL_CAN_MspInit+0x140>)
 80012a4:	f002 f85e 	bl	8003364 <HAL_GPIO_Init>
}
 80012a8:	bf00      	nop
 80012aa:	3730      	adds	r7, #48	@ 0x30
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40006400 	.word	0x40006400
 80012b4:	2000029c 	.word	0x2000029c
 80012b8:	40021000 	.word	0x40021000
 80012bc:	48000400 	.word	0x48000400
 80012c0:	40006800 	.word	0x40006800

080012c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b0ac      	sub	sp, #176	@ 0xb0
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	228c      	movs	r2, #140	@ 0x8c
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f008 fff7 	bl	800a2d8 <memset>
  if(hi2c->Instance==I2C4)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a22      	ldr	r2, [pc, #136]	@ (8001378 <HAL_I2C_MspInit+0xb4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d13c      	bne.n	800136e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80012f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80012f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4618      	mov	r0, r3
 8001304:	f003 ff02 	bl	800510c <HAL_RCCEx_PeriphCLKConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800130e:	f7ff fe7d 	bl	800100c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	4b1a      	ldr	r3, [pc, #104]	@ (800137c <HAL_I2C_MspInit+0xb8>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	4a19      	ldr	r2, [pc, #100]	@ (800137c <HAL_I2C_MspInit+0xb8>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131e:	4b17      	ldr	r3, [pc, #92]	@ (800137c <HAL_I2C_MspInit+0xb8>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800132a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800132e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001332:	2312      	movs	r3, #18
 8001334:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8001344:	2303      	movs	r3, #3
 8001346:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800134e:	4619      	mov	r1, r3
 8001350:	480b      	ldr	r0, [pc, #44]	@ (8001380 <HAL_I2C_MspInit+0xbc>)
 8001352:	f002 f807 	bl	8003364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001356:	4b09      	ldr	r3, [pc, #36]	@ (800137c <HAL_I2C_MspInit+0xb8>)
 8001358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800135a:	4a08      	ldr	r2, [pc, #32]	@ (800137c <HAL_I2C_MspInit+0xb8>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <HAL_I2C_MspInit+0xb8>)
 8001364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 800136e:	bf00      	nop
 8001370:	37b0      	adds	r7, #176	@ 0xb0
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40008400 	.word	0x40008400
 800137c:	40021000 	.word	0x40021000
 8001380:	48000400 	.word	0x48000400

08001384 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b0ac      	sub	sp, #176	@ 0xb0
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	228c      	movs	r2, #140	@ 0x8c
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f008 ff97 	bl	800a2d8 <memset>
  if(huart->Instance==UART4)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a25      	ldr	r2, [pc, #148]	@ (8001444 <HAL_UART_MspInit+0xc0>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d143      	bne.n	800143c <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80013b4:	2308      	movs	r3, #8
 80013b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 fea3 	bl	800510c <HAL_RCCEx_PeriphCLKConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013cc:	f7ff fe1e 	bl	800100c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001448 <HAL_UART_MspInit+0xc4>)
 80013d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001448 <HAL_UART_MspInit+0xc4>)
 80013d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013da:	6593      	str	r3, [r2, #88]	@ 0x58
 80013dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001448 <HAL_UART_MspInit+0xc4>)
 80013de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e8:	4b17      	ldr	r3, [pc, #92]	@ (8001448 <HAL_UART_MspInit+0xc4>)
 80013ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ec:	4a16      	ldr	r2, [pc, #88]	@ (8001448 <HAL_UART_MspInit+0xc4>)
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f4:	4b14      	ldr	r3, [pc, #80]	@ (8001448 <HAL_UART_MspInit+0xc4>)
 80013f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001400:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001404:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800141a:	2308      	movs	r3, #8
 800141c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001420:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001424:	4619      	mov	r1, r3
 8001426:	4809      	ldr	r0, [pc, #36]	@ (800144c <HAL_UART_MspInit+0xc8>)
 8001428:	f001 ff9c 	bl	8003364 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2105      	movs	r1, #5
 8001430:	2034      	movs	r0, #52	@ 0x34
 8001432:	f001 fcf7 	bl	8002e24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001436:	2034      	movs	r0, #52	@ 0x34
 8001438:	f001 fd10 	bl	8002e5c <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 800143c:	bf00      	nop
 800143e:	37b0      	adds	r7, #176	@ 0xb0
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40004c00 	.word	0x40004c00
 8001448:	40021000 	.word	0x40021000
 800144c:	48000800 	.word	0x48000800

08001450 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08e      	sub	sp, #56	@ 0x38
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800145e:	4b34      	ldr	r3, [pc, #208]	@ (8001530 <HAL_InitTick+0xe0>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001462:	4a33      	ldr	r2, [pc, #204]	@ (8001530 <HAL_InitTick+0xe0>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	6593      	str	r3, [r2, #88]	@ 0x58
 800146a:	4b31      	ldr	r3, [pc, #196]	@ (8001530 <HAL_InitTick+0xe0>)
 800146c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001476:	f107 0210 	add.w	r2, r7, #16
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fdb1 	bl	8004fe8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800148a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800148c:	2b00      	cmp	r3, #0
 800148e:	d103      	bne.n	8001498 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001490:	f003 fd7e 	bl	8004f90 <HAL_RCC_GetPCLK1Freq>
 8001494:	6378      	str	r0, [r7, #52]	@ 0x34
 8001496:	e004      	b.n	80014a2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001498:	f003 fd7a 	bl	8004f90 <HAL_RCC_GetPCLK1Freq>
 800149c:	4603      	mov	r3, r0
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014a4:	4a23      	ldr	r2, [pc, #140]	@ (8001534 <HAL_InitTick+0xe4>)
 80014a6:	fba2 2303 	umull	r2, r3, r2, r3
 80014aa:	0c9b      	lsrs	r3, r3, #18
 80014ac:	3b01      	subs	r3, #1
 80014ae:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80014b0:	4b21      	ldr	r3, [pc, #132]	@ (8001538 <HAL_InitTick+0xe8>)
 80014b2:	4a22      	ldr	r2, [pc, #136]	@ (800153c <HAL_InitTick+0xec>)
 80014b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80014b6:	4b20      	ldr	r3, [pc, #128]	@ (8001538 <HAL_InitTick+0xe8>)
 80014b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014bc:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80014be:	4a1e      	ldr	r2, [pc, #120]	@ (8001538 <HAL_InitTick+0xe8>)
 80014c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014c2:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80014c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001538 <HAL_InitTick+0xe8>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <HAL_InitTick+0xe8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d0:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <HAL_InitTick+0xe8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80014d6:	4818      	ldr	r0, [pc, #96]	@ (8001538 <HAL_InitTick+0xe8>)
 80014d8:	f004 fae2 	bl	8005aa0 <HAL_TIM_Base_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80014e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d11b      	bne.n	8001522 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80014ea:	4813      	ldr	r0, [pc, #76]	@ (8001538 <HAL_InitTick+0xe8>)
 80014ec:	f004 fb3a 	bl	8005b64 <HAL_TIM_Base_Start_IT>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80014f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d111      	bne.n	8001522 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014fe:	201d      	movs	r0, #29
 8001500:	f001 fcac 	bl	8002e5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b0f      	cmp	r3, #15
 8001508:	d808      	bhi.n	800151c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800150a:	2200      	movs	r2, #0
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	201d      	movs	r0, #29
 8001510:	f001 fc88 	bl	8002e24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001514:	4a0a      	ldr	r2, [pc, #40]	@ (8001540 <HAL_InitTick+0xf0>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e002      	b.n	8001522 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001522:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001526:	4618      	mov	r0, r3
 8001528:	3738      	adds	r7, #56	@ 0x38
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	431bde83 	.word	0x431bde83
 8001538:	200002a0 	.word	0x200002a0
 800153c:	40000400 	.word	0x40000400
 8001540:	20000004 	.word	0x20000004

08001544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <NMI_Handler+0x4>

0800154c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <MemManage_Handler+0x4>

0800155c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <BusFault_Handler+0x4>

08001564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <UsageFault_Handler+0x4>

0800156c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alert1_Pin);
 800157e:	2004      	movs	r0, #4
 8001580:	f002 f8b4 	bl	80036ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800158c:	4802      	ldr	r0, [pc, #8]	@ (8001598 <DMA1_Channel1_IRQHandler+0x10>)
 800158e:	f001 fe0a 	bl	80031a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200000e4 	.word	0x200000e4

0800159c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015a0:	4802      	ldr	r0, [pc, #8]	@ (80015ac <TIM3_IRQHandler+0x10>)
 80015a2:	f004 fb4f 	bl	8005c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200002a0 	.word	0x200002a0

080015b0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80015b4:	4802      	ldr	r0, [pc, #8]	@ (80015c0 <UART4_IRQHandler+0x10>)
 80015b6:	f004 fdd3 	bl	8006160 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200001d0 	.word	0x200001d0

080015c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <SystemInit+0x20>)
 80015ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ce:	4a05      	ldr	r2, [pc, #20]	@ (80015e4 <SystemInit+0x20>)
 80015d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001620 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015ec:	f7ff ffea 	bl	80015c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f0:	480c      	ldr	r0, [pc, #48]	@ (8001624 <LoopForever+0x6>)
  ldr r1, =_edata
 80015f2:	490d      	ldr	r1, [pc, #52]	@ (8001628 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015f4:	4a0d      	ldr	r2, [pc, #52]	@ (800162c <LoopForever+0xe>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f8:	e002      	b.n	8001600 <LoopCopyDataInit>

080015fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fe:	3304      	adds	r3, #4

08001600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001604:	d3f9      	bcc.n	80015fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001606:	4a0a      	ldr	r2, [pc, #40]	@ (8001630 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001608:	4c0a      	ldr	r4, [pc, #40]	@ (8001634 <LoopForever+0x16>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800160c:	e001      	b.n	8001612 <LoopFillZerobss>

0800160e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001610:	3204      	adds	r2, #4

08001612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001614:	d3fb      	bcc.n	800160e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001616:	f008 febd 	bl	800a394 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800161a:	f7ff f949 	bl	80008b0 <main>

0800161e <LoopForever>:

LoopForever:
    b LoopForever
 800161e:	e7fe      	b.n	800161e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001620:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001628:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800162c:	0800a60c 	.word	0x0800a60c
  ldr r2, =_sbss
 8001630:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001634:	20001dd0 	.word	0x20001dd0

08001638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001638:	e7fe      	b.n	8001638 <ADC1_2_IRQHandler>

0800163a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001644:	2003      	movs	r0, #3
 8001646:	f001 fbe2 	bl	8002e0e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800164a:	200f      	movs	r0, #15
 800164c:	f7ff ff00 	bl	8001450 <HAL_InitTick>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	71fb      	strb	r3, [r7, #7]
 800165a:	e001      	b.n	8001660 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800165c:	f7ff fcdc 	bl	8001018 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001660:	79fb      	ldrb	r3, [r7, #7]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <HAL_IncTick+0x20>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <HAL_IncTick+0x24>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4413      	add	r3, r2
 800167c:	4a04      	ldr	r2, [pc, #16]	@ (8001690 <HAL_IncTick+0x24>)
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000008 	.word	0x20000008
 8001690:	200002ec 	.word	0x200002ec

08001694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return uwTick;
 8001698:	4b03      	ldr	r3, [pc, #12]	@ (80016a8 <HAL_GetTick+0x14>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	200002ec 	.word	0x200002ec

080016ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	609a      	str	r2, [r3, #8]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	609a      	str	r2, [r3, #8]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
 8001720:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	3360      	adds	r3, #96	@ 0x60
 8001726:	461a      	mov	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <LL_ADC_SetOffset+0x44>)
 8001736:	4013      	ands	r3, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	4313      	orrs	r3, r2
 8001744:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800174c:	bf00      	nop
 800174e:	371c      	adds	r7, #28
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	03fff000 	.word	0x03fff000

0800175c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3360      	adds	r3, #96	@ 0x60
 800176a:	461a      	mov	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3360      	adds	r3, #96	@ 0x60
 8001798:	461a      	mov	r2, r3
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	431a      	orrs	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017b2:	bf00      	nop
 80017b4:	371c      	adds	r7, #28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	615a      	str	r2, [r3, #20]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800180a:	b480      	push	{r7}
 800180c:	b087      	sub	sp, #28
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	3330      	adds	r3, #48	@ 0x30
 800181a:	461a      	mov	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	0a1b      	lsrs	r3, r3, #8
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	4413      	add	r3, r2
 8001828:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	f003 031f 	and.w	r3, r3, #31
 8001834:	211f      	movs	r1, #31
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	401a      	ands	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	0e9b      	lsrs	r3, r3, #26
 8001842:	f003 011f 	and.w	r1, r3, #31
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	f003 031f 	and.w	r3, r3, #31
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	431a      	orrs	r2, r3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001856:	bf00      	nop
 8001858:	371c      	adds	r7, #28
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001862:	b480      	push	{r7}
 8001864:	b087      	sub	sp, #28
 8001866:	af00      	add	r7, sp, #0
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3314      	adds	r3, #20
 8001872:	461a      	mov	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	0e5b      	lsrs	r3, r3, #25
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	4413      	add	r3, r2
 8001880:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	0d1b      	lsrs	r3, r3, #20
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	2107      	movs	r1, #7
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	401a      	ands	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	0d1b      	lsrs	r3, r3, #20
 800189c:	f003 031f 	and.w	r3, r3, #31
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	431a      	orrs	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018ac:	bf00      	nop
 80018ae:	371c      	adds	r7, #28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d0:	43db      	mvns	r3, r3
 80018d2:	401a      	ands	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f003 0318 	and.w	r3, r3, #24
 80018da:	4908      	ldr	r1, [pc, #32]	@ (80018fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80018dc:	40d9      	lsrs	r1, r3
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	400b      	ands	r3, r1
 80018e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e6:	431a      	orrs	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	0007ffff 	.word	0x0007ffff

08001900 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 031f 	and.w	r3, r3, #31
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800192c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6093      	str	r3, [r2, #8]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001950:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001954:	d101      	bne.n	800195a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001978:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800197c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80019a4:	d101      	bne.n	80019aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019cc:	f043 0201 	orr.w	r2, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <LL_ADC_IsEnabled+0x18>
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <LL_ADC_IsEnabled+0x1a>
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a16:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a1a:	f043 0204 	orr.w	r2, r3, #4
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d101      	bne.n	8001a46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d101      	bne.n	8001a6c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e133      	b.n	8001cfe <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d109      	bne.n	8001ab8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff fadf 	bl	8001068 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff3f 	bl	8001940 <LL_ADC_IsDeepPowerDownEnabled>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d004      	beq.n	8001ad2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff25 	bl	800191c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ff5a 	bl	8001990 <LL_ADC_IsInternalRegulatorEnabled>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d115      	bne.n	8001b0e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ff3e 	bl	8001968 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001aec:	4b86      	ldr	r3, [pc, #536]	@ (8001d08 <HAL_ADC_Init+0x28c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	099b      	lsrs	r3, r3, #6
 8001af2:	4a86      	ldr	r2, [pc, #536]	@ (8001d0c <HAL_ADC_Init+0x290>)
 8001af4:	fba2 2303 	umull	r2, r3, r2, r3
 8001af8:	099b      	lsrs	r3, r3, #6
 8001afa:	3301      	adds	r3, #1
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b00:	e002      	b.n	8001b08 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f9      	bne.n	8001b02 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff3c 	bl	8001990 <LL_ADC_IsInternalRegulatorEnabled>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10d      	bne.n	8001b3a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b22:	f043 0210 	orr.w	r2, r3, #16
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2e:	f043 0201 	orr.w	r2, r3, #1
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ff75 	bl	8001a2e <LL_ADC_REG_IsConversionOngoing>
 8001b44:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f040 80cc 	bne.w	8001cec <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f040 80c8 	bne.w	8001cec <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b60:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b64:	f043 0202 	orr.w	r2, r3, #2
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff35 	bl	80019e0 <LL_ADC_IsEnabled>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d115      	bne.n	8001ba8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b7c:	4864      	ldr	r0, [pc, #400]	@ (8001d10 <HAL_ADC_Init+0x294>)
 8001b7e:	f7ff ff2f 	bl	80019e0 <LL_ADC_IsEnabled>
 8001b82:	4604      	mov	r4, r0
 8001b84:	4863      	ldr	r0, [pc, #396]	@ (8001d14 <HAL_ADC_Init+0x298>)
 8001b86:	f7ff ff2b 	bl	80019e0 <LL_ADC_IsEnabled>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	431c      	orrs	r4, r3
 8001b8e:	4862      	ldr	r0, [pc, #392]	@ (8001d18 <HAL_ADC_Init+0x29c>)
 8001b90:	f7ff ff26 	bl	80019e0 <LL_ADC_IsEnabled>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4323      	orrs	r3, r4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d105      	bne.n	8001ba8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	485e      	ldr	r0, [pc, #376]	@ (8001d1c <HAL_ADC_Init+0x2a0>)
 8001ba4:	f7ff fd82 	bl	80016ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7e5b      	ldrb	r3, [r3, #25]
 8001bac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bb2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001bb8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001bbe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d106      	bne.n	8001be4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	045b      	lsls	r3, r3, #17
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d009      	beq.n	8001c00 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	4b46      	ldr	r3, [pc, #280]	@ (8001d20 <HAL_ADC_Init+0x2a4>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	69b9      	ldr	r1, [r7, #24]
 8001c10:	430b      	orrs	r3, r1
 8001c12:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff1b 	bl	8001a54 <LL_ADC_INJ_IsConversionOngoing>
 8001c1e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d140      	bne.n	8001ca8 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d13d      	bne.n	8001ca8 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7e1b      	ldrb	r3, [r3, #24]
 8001c34:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c36:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c3e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c4e:	f023 0306 	bic.w	r3, r3, #6
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	69b9      	ldr	r1, [r7, #24]
 8001c58:	430b      	orrs	r3, r1
 8001c5a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d118      	bne.n	8001c98 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c70:	f023 0304 	bic.w	r3, r3, #4
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c7c:	4311      	orrs	r1, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001c82:	4311      	orrs	r1, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 0201 	orr.w	r2, r2, #1
 8001c94:	611a      	str	r2, [r3, #16]
 8001c96:	e007      	b.n	8001ca8 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d10c      	bne.n	8001cca <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	f023 010f 	bic.w	r1, r3, #15
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	1e5a      	subs	r2, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cc8:	e007      	b.n	8001cda <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 020f 	bic.w	r2, r2, #15
 8001cd8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cde:	f023 0303 	bic.w	r3, r3, #3
 8001ce2:	f043 0201 	orr.w	r2, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cea:	e007      	b.n	8001cfc <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf0:	f043 0210 	orr.w	r2, r3, #16
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	@ 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd90      	pop	{r4, r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	053e2d63 	.word	0x053e2d63
 8001d10:	50040000 	.word	0x50040000
 8001d14:	50040100 	.word	0x50040100
 8001d18:	50040200 	.word	0x50040200
 8001d1c:	50040300 	.word	0x50040300
 8001d20:	fff0c007 	.word	0xfff0c007

08001d24 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d30:	4853      	ldr	r0, [pc, #332]	@ (8001e80 <HAL_ADC_Start_DMA+0x15c>)
 8001d32:	f7ff fde5 	bl	8001900 <LL_ADC_GetMultimode>
 8001d36:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fe76 	bl	8001a2e <LL_ADC_REG_IsConversionOngoing>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f040 8093 	bne.w	8001e70 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_ADC_Start_DMA+0x34>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e08e      	b.n	8001e76 <HAL_ADC_Start_DMA+0x152>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a47      	ldr	r2, [pc, #284]	@ (8001e84 <HAL_ADC_Start_DMA+0x160>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d008      	beq.n	8001d7c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	2b05      	cmp	r3, #5
 8001d74:	d002      	beq.n	8001d7c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2b09      	cmp	r3, #9
 8001d7a:	d172      	bne.n	8001e62 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f000 fcad 	bl	80026dc <ADC_Enable>
 8001d82:	4603      	mov	r3, r0
 8001d84:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d165      	bne.n	8001e58 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d90:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a38      	ldr	r2, [pc, #224]	@ (8001e88 <HAL_ADC_Start_DMA+0x164>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d002      	beq.n	8001db0 <HAL_ADC_Start_DMA+0x8c>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	e000      	b.n	8001db2 <HAL_ADC_Start_DMA+0x8e>
 8001db0:	4b36      	ldr	r3, [pc, #216]	@ (8001e8c <HAL_ADC_Start_DMA+0x168>)
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d002      	beq.n	8001dc0 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d105      	bne.n	8001dcc <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ddc:	f023 0206 	bic.w	r2, r3, #6
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001de4:	e002      	b.n	8001dec <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001df0:	4a27      	ldr	r2, [pc, #156]	@ (8001e90 <HAL_ADC_Start_DMA+0x16c>)
 8001df2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001df8:	4a26      	ldr	r2, [pc, #152]	@ (8001e94 <HAL_ADC_Start_DMA+0x170>)
 8001dfa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e00:	4a25      	ldr	r2, [pc, #148]	@ (8001e98 <HAL_ADC_Start_DMA+0x174>)
 8001e02:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	221c      	movs	r2, #28
 8001e0a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0210 	orr.w	r2, r2, #16
 8001e22:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	3340      	adds	r3, #64	@ 0x40
 8001e3e:	4619      	mov	r1, r3
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f001 f8d0 	bl	8002fe8 <HAL_DMA_Start_IT>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fdd8 	bl	8001a06 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001e56:	e00d      	b.n	8001e74 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8001e60:	e008      	b.n	8001e74 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001e6e:	e001      	b.n	8001e74 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e70:	2302      	movs	r3, #2
 8001e72:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	50040300 	.word	0x50040300
 8001e84:	50040200 	.word	0x50040200
 8001e88:	50040100 	.word	0x50040100
 8001e8c:	50040000 	.word	0x50040000
 8001e90:	080027e9 	.word	0x080027e9
 8001e94:	080028c1 	.word	0x080028c1
 8001e98:	080028dd 	.word	0x080028dd

08001e9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b0b6      	sub	sp, #216	@ 0xd8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x22>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e3e3      	b.n	80026ae <HAL_ADC_ConfigChannel+0x7ea>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fd9b 	bl	8001a2e <LL_ADC_REG_IsConversionOngoing>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 83c4 	bne.w	8002688 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b05      	cmp	r3, #5
 8001f0e:	d824      	bhi.n	8001f5a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	3b02      	subs	r3, #2
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d81b      	bhi.n	8001f52 <HAL_ADC_ConfigChannel+0x8e>
 8001f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f20 <HAL_ADC_ConfigChannel+0x5c>)
 8001f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f20:	08001f31 	.word	0x08001f31
 8001f24:	08001f39 	.word	0x08001f39
 8001f28:	08001f41 	.word	0x08001f41
 8001f2c:	08001f49 	.word	0x08001f49
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001f30:	230c      	movs	r3, #12
 8001f32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f36:	e010      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001f38:	2312      	movs	r3, #18
 8001f3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f3e:	e00c      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001f40:	2318      	movs	r3, #24
 8001f42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f46:	e008      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001f48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f50:	e003      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001f52:	2306      	movs	r3, #6
 8001f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f58:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001f68:	f7ff fc4f 	bl	800180a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fd5c 	bl	8001a2e <LL_ADC_REG_IsConversionOngoing>
 8001f76:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fd68 	bl	8001a54 <LL_ADC_INJ_IsConversionOngoing>
 8001f84:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f040 81bf 	bne.w	8002310 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f040 81ba 	bne.w	8002310 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001fa4:	d10f      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f7ff fc56 	bl	8001862 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fbfd 	bl	80017be <LL_ADC_SetSamplingTimeCommonConfig>
 8001fc4:	e00e      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	6819      	ldr	r1, [r3, #0]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f7ff fc45 	bl	8001862 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fbed 	bl	80017be <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	08db      	lsrs	r3, r3, #3
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	2b04      	cmp	r3, #4
 8002004:	d00a      	beq.n	800201c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	6919      	ldr	r1, [r3, #16]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002016:	f7ff fb7d 	bl	8001714 <LL_ADC_SetOffset>
 800201a:	e179      	b.n	8002310 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2100      	movs	r1, #0
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fb9a 	bl	800175c <LL_ADC_GetOffsetChannel>
 8002028:	4603      	mov	r3, r0
 800202a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10a      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x184>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fb8f 	bl	800175c <LL_ADC_GetOffsetChannel>
 800203e:	4603      	mov	r3, r0
 8002040:	0e9b      	lsrs	r3, r3, #26
 8002042:	f003 021f 	and.w	r2, r3, #31
 8002046:	e01e      	b.n	8002086 <HAL_ADC_ConfigChannel+0x1c2>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2100      	movs	r1, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fb84 	bl	800175c <LL_ADC_GetOffsetChannel>
 8002054:	4603      	mov	r3, r0
 8002056:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002066:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800206a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800206e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002076:	2320      	movs	r3, #32
 8002078:	e004      	b.n	8002084 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800207a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <HAL_ADC_ConfigChannel+0x1da>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	0e9b      	lsrs	r3, r3, #26
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	e018      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x20c>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80020b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80020ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80020c2:	2320      	movs	r3, #32
 80020c4:	e004      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80020c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d106      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2200      	movs	r2, #0
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fb53 	bl	8001788 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2101      	movs	r1, #1
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fb37 	bl	800175c <LL_ADC_GetOffsetChannel>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10a      	bne.n	800210e <HAL_ADC_ConfigChannel+0x24a>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2101      	movs	r1, #1
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fb2c 	bl	800175c <LL_ADC_GetOffsetChannel>
 8002104:	4603      	mov	r3, r0
 8002106:	0e9b      	lsrs	r3, r3, #26
 8002108:	f003 021f 	and.w	r2, r3, #31
 800210c:	e01e      	b.n	800214c <HAL_ADC_ConfigChannel+0x288>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2101      	movs	r1, #1
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fb21 	bl	800175c <LL_ADC_GetOffsetChannel>
 800211a:	4603      	mov	r3, r0
 800211c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800212c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002130:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002134:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800213c:	2320      	movs	r3, #32
 800213e:	e004      	b.n	800214a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002140:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002144:	fab3 f383 	clz	r3, r3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002154:	2b00      	cmp	r3, #0
 8002156:	d105      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x2a0>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0e9b      	lsrs	r3, r3, #26
 800215e:	f003 031f 	and.w	r3, r3, #31
 8002162:	e018      	b.n	8002196 <HAL_ADC_ConfigChannel+0x2d2>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002178:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800217c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002180:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002188:	2320      	movs	r3, #32
 800218a:	e004      	b.n	8002196 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800218c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002196:	429a      	cmp	r2, r3
 8002198:	d106      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2200      	movs	r2, #0
 80021a0:	2101      	movs	r1, #1
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff faf0 	bl	8001788 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2102      	movs	r1, #2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fad4 	bl	800175c <LL_ADC_GetOffsetChannel>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10a      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x310>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2102      	movs	r1, #2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fac9 	bl	800175c <LL_ADC_GetOffsetChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	0e9b      	lsrs	r3, r3, #26
 80021ce:	f003 021f 	and.w	r2, r3, #31
 80021d2:	e01e      	b.n	8002212 <HAL_ADC_ConfigChannel+0x34e>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2102      	movs	r1, #2
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fabe 	bl	800175c <LL_ADC_GetOffsetChannel>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80021f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80021fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002202:	2320      	movs	r3, #32
 8002204:	e004      	b.n	8002210 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002206:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221a:	2b00      	cmp	r3, #0
 800221c:	d105      	bne.n	800222a <HAL_ADC_ConfigChannel+0x366>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	0e9b      	lsrs	r3, r3, #26
 8002224:	f003 031f 	and.w	r3, r3, #31
 8002228:	e014      	b.n	8002254 <HAL_ADC_ConfigChannel+0x390>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002238:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800223a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800223e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002246:	2320      	movs	r3, #32
 8002248:	e004      	b.n	8002254 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800224a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002254:	429a      	cmp	r2, r3
 8002256:	d106      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2200      	movs	r2, #0
 800225e:	2102      	movs	r1, #2
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fa91 	bl	8001788 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2103      	movs	r1, #3
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fa75 	bl	800175c <LL_ADC_GetOffsetChannel>
 8002272:	4603      	mov	r3, r0
 8002274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x3ce>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2103      	movs	r1, #3
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fa6a 	bl	800175c <LL_ADC_GetOffsetChannel>
 8002288:	4603      	mov	r3, r0
 800228a:	0e9b      	lsrs	r3, r3, #26
 800228c:	f003 021f 	and.w	r2, r3, #31
 8002290:	e017      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x3fe>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2103      	movs	r1, #3
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fa5f 	bl	800175c <LL_ADC_GetOffsetChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80022aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022ac:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80022ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80022b4:	2320      	movs	r3, #32
 80022b6:	e003      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80022b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <HAL_ADC_ConfigChannel+0x416>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	0e9b      	lsrs	r3, r3, #26
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	e011      	b.n	80022fe <HAL_ADC_ConfigChannel+0x43a>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80022e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80022ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80022f2:	2320      	movs	r3, #32
 80022f4:	e003      	b.n	80022fe <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80022f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022f8:	fab3 f383 	clz	r3, r3
 80022fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022fe:	429a      	cmp	r2, r3
 8002300:	d106      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2200      	movs	r2, #0
 8002308:	2103      	movs	r1, #3
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fa3c 	bl	8001788 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fb63 	bl	80019e0 <LL_ADC_IsEnabled>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	f040 813f 	bne.w	80025a0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	6819      	ldr	r1, [r3, #0]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	461a      	mov	r2, r3
 8002330:	f7ff fac2 	bl	80018b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a8e      	ldr	r2, [pc, #568]	@ (8002574 <HAL_ADC_ConfigChannel+0x6b0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	f040 8130 	bne.w	80025a0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10b      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x4a4>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	0e9b      	lsrs	r3, r3, #26
 8002356:	3301      	adds	r3, #1
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	2b09      	cmp	r3, #9
 800235e:	bf94      	ite	ls
 8002360:	2301      	movls	r3, #1
 8002362:	2300      	movhi	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	e019      	b.n	800239c <HAL_ADC_ConfigChannel+0x4d8>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002370:	fa93 f3a3 	rbit	r3, r3
 8002374:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002378:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800237a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002380:	2320      	movs	r3, #32
 8002382:	e003      	b.n	800238c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002384:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	3301      	adds	r3, #1
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	2b09      	cmp	r3, #9
 8002394:	bf94      	ite	ls
 8002396:	2301      	movls	r3, #1
 8002398:	2300      	movhi	r3, #0
 800239a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800239c:	2b00      	cmp	r3, #0
 800239e:	d079      	beq.n	8002494 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d107      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x4f8>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	0e9b      	lsrs	r3, r3, #26
 80023b2:	3301      	adds	r3, #1
 80023b4:	069b      	lsls	r3, r3, #26
 80023b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023ba:	e015      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x524>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80023ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023cc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80023ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80023d4:	2320      	movs	r3, #32
 80023d6:	e003      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80023d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	3301      	adds	r3, #1
 80023e2:	069b      	lsls	r3, r3, #26
 80023e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d109      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x544>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	0e9b      	lsrs	r3, r3, #26
 80023fa:	3301      	adds	r3, #1
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	2101      	movs	r1, #1
 8002402:	fa01 f303 	lsl.w	r3, r1, r3
 8002406:	e017      	b.n	8002438 <HAL_ADC_ConfigChannel+0x574>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002410:	fa93 f3a3 	rbit	r3, r3
 8002414:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002418:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800241a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002420:	2320      	movs	r3, #32
 8002422:	e003      	b.n	800242c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	3301      	adds	r3, #1
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	2101      	movs	r1, #1
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	ea42 0103 	orr.w	r1, r2, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10a      	bne.n	800245e <HAL_ADC_ConfigChannel+0x59a>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	0e9b      	lsrs	r3, r3, #26
 800244e:	3301      	adds	r3, #1
 8002450:	f003 021f 	and.w	r2, r3, #31
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	051b      	lsls	r3, r3, #20
 800245c:	e018      	b.n	8002490 <HAL_ADC_ConfigChannel+0x5cc>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800246c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002476:	2320      	movs	r3, #32
 8002478:	e003      	b.n	8002482 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800247a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800247c:	fab3 f383 	clz	r3, r3
 8002480:	b2db      	uxtb	r3, r3
 8002482:	3301      	adds	r3, #1
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	4613      	mov	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4413      	add	r3, r2
 800248e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002490:	430b      	orrs	r3, r1
 8002492:	e080      	b.n	8002596 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249c:	2b00      	cmp	r3, #0
 800249e:	d107      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x5ec>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0e9b      	lsrs	r3, r3, #26
 80024a6:	3301      	adds	r3, #1
 80024a8:	069b      	lsls	r3, r3, #26
 80024aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024ae:	e015      	b.n	80024dc <HAL_ADC_ConfigChannel+0x618>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80024be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80024c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80024c8:	2320      	movs	r3, #32
 80024ca:	e003      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80024cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	3301      	adds	r3, #1
 80024d6:	069b      	lsls	r3, r3, #26
 80024d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d109      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x638>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0e9b      	lsrs	r3, r3, #26
 80024ee:	3301      	adds	r3, #1
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	2101      	movs	r1, #1
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	e017      	b.n	800252c <HAL_ADC_ConfigChannel+0x668>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	61bb      	str	r3, [r7, #24]
  return result;
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002514:	2320      	movs	r3, #32
 8002516:	e003      	b.n	8002520 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3301      	adds	r3, #1
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	2101      	movs	r1, #1
 8002528:	fa01 f303 	lsl.w	r3, r1, r3
 800252c:	ea42 0103 	orr.w	r1, r2, r3
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10d      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x694>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0e9b      	lsrs	r3, r3, #26
 8002542:	3301      	adds	r3, #1
 8002544:	f003 021f 	and.w	r2, r3, #31
 8002548:	4613      	mov	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4413      	add	r3, r2
 800254e:	3b1e      	subs	r3, #30
 8002550:	051b      	lsls	r3, r3, #20
 8002552:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002556:	e01d      	b.n	8002594 <HAL_ADC_ConfigChannel+0x6d0>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	60fb      	str	r3, [r7, #12]
  return result;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d103      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002570:	2320      	movs	r3, #32
 8002572:	e005      	b.n	8002580 <HAL_ADC_ConfigChannel+0x6bc>
 8002574:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	3301      	adds	r3, #1
 8002582:	f003 021f 	and.w	r2, r3, #31
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	3b1e      	subs	r3, #30
 800258e:	051b      	lsls	r3, r3, #20
 8002590:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002594:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800259a:	4619      	mov	r1, r3
 800259c:	f7ff f961 	bl	8001862 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b44      	ldr	r3, [pc, #272]	@ (80026b8 <HAL_ADC_ConfigChannel+0x7f4>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d07a      	beq.n	80026a2 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025ac:	4843      	ldr	r0, [pc, #268]	@ (80026bc <HAL_ADC_ConfigChannel+0x7f8>)
 80025ae:	f7ff f8a3 	bl	80016f8 <LL_ADC_GetCommonPathInternalCh>
 80025b2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a41      	ldr	r2, [pc, #260]	@ (80026c0 <HAL_ADC_ConfigChannel+0x7fc>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d12c      	bne.n	800261a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d126      	bne.n	800261a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a3c      	ldr	r2, [pc, #240]	@ (80026c4 <HAL_ADC_ConfigChannel+0x800>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d004      	beq.n	80025e0 <HAL_ADC_ConfigChannel+0x71c>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a3b      	ldr	r2, [pc, #236]	@ (80026c8 <HAL_ADC_ConfigChannel+0x804>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d15d      	bne.n	800269c <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025e8:	4619      	mov	r1, r3
 80025ea:	4834      	ldr	r0, [pc, #208]	@ (80026bc <HAL_ADC_ConfigChannel+0x7f8>)
 80025ec:	f7ff f871 	bl	80016d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025f0:	4b36      	ldr	r3, [pc, #216]	@ (80026cc <HAL_ADC_ConfigChannel+0x808>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	099b      	lsrs	r3, r3, #6
 80025f6:	4a36      	ldr	r2, [pc, #216]	@ (80026d0 <HAL_ADC_ConfigChannel+0x80c>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	099b      	lsrs	r3, r3, #6
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	4613      	mov	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800260a:	e002      	b.n	8002612 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	3b01      	subs	r3, #1
 8002610:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f9      	bne.n	800260c <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002618:	e040      	b.n	800269c <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a2d      	ldr	r2, [pc, #180]	@ (80026d4 <HAL_ADC_ConfigChannel+0x810>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d118      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002624:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002628:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d112      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a23      	ldr	r2, [pc, #140]	@ (80026c4 <HAL_ADC_ConfigChannel+0x800>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d004      	beq.n	8002644 <HAL_ADC_ConfigChannel+0x780>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a22      	ldr	r2, [pc, #136]	@ (80026c8 <HAL_ADC_ConfigChannel+0x804>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d12d      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002644:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002648:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800264c:	4619      	mov	r1, r3
 800264e:	481b      	ldr	r0, [pc, #108]	@ (80026bc <HAL_ADC_ConfigChannel+0x7f8>)
 8002650:	f7ff f83f 	bl	80016d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002654:	e024      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1f      	ldr	r2, [pc, #124]	@ (80026d8 <HAL_ADC_ConfigChannel+0x814>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d120      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002660:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002664:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d11a      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a14      	ldr	r2, [pc, #80]	@ (80026c4 <HAL_ADC_ConfigChannel+0x800>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d115      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002676:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800267a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800267e:	4619      	mov	r1, r3
 8002680:	480e      	ldr	r0, [pc, #56]	@ (80026bc <HAL_ADC_ConfigChannel+0x7f8>)
 8002682:	f7ff f826 	bl	80016d2 <LL_ADC_SetCommonPathInternalCh>
 8002686:	e00c      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268c:	f043 0220 	orr.w	r2, r3, #32
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800269a:	e002      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800269c:	bf00      	nop
 800269e:	e000      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80026aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	37d8      	adds	r7, #216	@ 0xd8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	80080000 	.word	0x80080000
 80026bc:	50040300 	.word	0x50040300
 80026c0:	c7520000 	.word	0xc7520000
 80026c4:	50040000 	.word	0x50040000
 80026c8:	50040200 	.word	0x50040200
 80026cc:	20000000 	.word	0x20000000
 80026d0:	053e2d63 	.word	0x053e2d63
 80026d4:	cb840000 	.word	0xcb840000
 80026d8:	80000001 	.word	0x80000001

080026dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff f977 	bl	80019e0 <LL_ADC_IsEnabled>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d169      	bne.n	80027cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	4b36      	ldr	r3, [pc, #216]	@ (80027d8 <ADC_Enable+0xfc>)
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00d      	beq.n	8002722 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270a:	f043 0210 	orr.w	r2, r3, #16
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002716:	f043 0201 	orr.w	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e055      	b.n	80027ce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff f946 	bl	80019b8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800272c:	482b      	ldr	r0, [pc, #172]	@ (80027dc <ADC_Enable+0x100>)
 800272e:	f7fe ffe3 	bl	80016f8 <LL_ADC_GetCommonPathInternalCh>
 8002732:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002734:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800273c:	4b28      	ldr	r3, [pc, #160]	@ (80027e0 <ADC_Enable+0x104>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	099b      	lsrs	r3, r3, #6
 8002742:	4a28      	ldr	r2, [pc, #160]	@ (80027e4 <ADC_Enable+0x108>)
 8002744:	fba2 2303 	umull	r2, r3, r2, r3
 8002748:	099b      	lsrs	r3, r3, #6
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002756:	e002      	b.n	800275e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	3b01      	subs	r3, #1
 800275c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1f9      	bne.n	8002758 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002764:	f7fe ff96 	bl	8001694 <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800276a:	e028      	b.n	80027be <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff f935 	bl	80019e0 <LL_ADC_IsEnabled>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d104      	bne.n	8002786 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff f919 	bl	80019b8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002786:	f7fe ff85 	bl	8001694 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d914      	bls.n	80027be <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d00d      	beq.n	80027be <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a6:	f043 0210 	orr.w	r2, r3, #16
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b2:	f043 0201 	orr.w	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e007      	b.n	80027ce <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d1cf      	bne.n	800276c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	8000003f 	.word	0x8000003f
 80027dc:	50040300 	.word	0x50040300
 80027e0:	20000000 	.word	0x20000000
 80027e4:	053e2d63 	.word	0x053e2d63

080027e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d14b      	bne.n	800289a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002806:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d021      	beq.n	8002860 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe ffdf 	bl	80017e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d032      	beq.n	8002892 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d12b      	bne.n	8002892 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d11f      	bne.n	8002892 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002856:	f043 0201 	orr.w	r2, r3, #1
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	659a      	str	r2, [r3, #88]	@ 0x58
 800285e:	e018      	b.n	8002892 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d111      	bne.n	8002892 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002872:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d105      	bne.n	8002892 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288a:	f043 0201 	orr.w	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f7fe fb76 	bl	8000f84 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002898:	e00e      	b.n	80028b8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f7ff fb02 	bl	8001eb0 <HAL_ADC_ErrorCallback>
}
 80028ac:	e004      	b.n	80028b8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	4798      	blx	r3
}
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f7ff fae4 	bl	8001e9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028d4:	bf00      	nop
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fa:	f043 0204 	orr.w	r2, r3, #4
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f7ff fad4 	bl	8001eb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <LL_ADC_IsEnabled>:
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <LL_ADC_IsEnabled+0x18>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <LL_ADC_IsEnabled+0x1a>
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <LL_ADC_REG_IsConversionOngoing>:
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b04      	cmp	r3, #4
 8002948:	d101      	bne.n	800294e <LL_ADC_REG_IsConversionOngoing+0x18>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b0a1      	sub	sp, #132	@ 0x84
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002976:	2302      	movs	r3, #2
 8002978:	e093      	b.n	8002aa2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002982:	2300      	movs	r3, #0
 8002984:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002986:	2300      	movs	r3, #0
 8002988:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a47      	ldr	r2, [pc, #284]	@ (8002aac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d102      	bne.n	800299a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002994:	4b46      	ldr	r3, [pc, #280]	@ (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	e001      	b.n	800299e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10b      	bne.n	80029bc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a8:	f043 0220 	orr.w	r2, r3, #32
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e072      	b.n	8002aa2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff ffb9 	bl	8002936 <LL_ADC_REG_IsConversionOngoing>
 80029c4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ffb3 	bl	8002936 <LL_ADC_REG_IsConversionOngoing>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d154      	bne.n	8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80029d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d151      	bne.n	8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029dc:	4b35      	ldr	r3, [pc, #212]	@ (8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80029de:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d02c      	beq.n	8002a42 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80029e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	6859      	ldr	r1, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029fa:	035b      	lsls	r3, r3, #13
 80029fc:	430b      	orrs	r3, r1
 80029fe:	431a      	orrs	r2, r3
 8002a00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a02:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a04:	4829      	ldr	r0, [pc, #164]	@ (8002aac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a06:	f7ff ff83 	bl	8002910 <LL_ADC_IsEnabled>
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	4828      	ldr	r0, [pc, #160]	@ (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a0e:	f7ff ff7f 	bl	8002910 <LL_ADC_IsEnabled>
 8002a12:	4603      	mov	r3, r0
 8002a14:	431c      	orrs	r4, r3
 8002a16:	4828      	ldr	r0, [pc, #160]	@ (8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002a18:	f7ff ff7a 	bl	8002910 <LL_ADC_IsEnabled>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4323      	orrs	r3, r4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d137      	bne.n	8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a2c:	f023 030f 	bic.w	r3, r3, #15
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	6811      	ldr	r1, [r2, #0]
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	6892      	ldr	r2, [r2, #8]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a3e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a40:	e028      	b.n	8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a4c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a4e:	4817      	ldr	r0, [pc, #92]	@ (8002aac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a50:	f7ff ff5e 	bl	8002910 <LL_ADC_IsEnabled>
 8002a54:	4604      	mov	r4, r0
 8002a56:	4816      	ldr	r0, [pc, #88]	@ (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a58:	f7ff ff5a 	bl	8002910 <LL_ADC_IsEnabled>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	431c      	orrs	r4, r3
 8002a60:	4815      	ldr	r0, [pc, #84]	@ (8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002a62:	f7ff ff55 	bl	8002910 <LL_ADC_IsEnabled>
 8002a66:	4603      	mov	r3, r0
 8002a68:	4323      	orrs	r3, r4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d112      	bne.n	8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a76:	f023 030f 	bic.w	r3, r3, #15
 8002a7a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002a7c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a7e:	e009      	b.n	8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a84:	f043 0220 	orr.w	r2, r3, #32
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002a92:	e000      	b.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002a9e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3784      	adds	r7, #132	@ 0x84
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd90      	pop	{r4, r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	50040000 	.word	0x50040000
 8002ab0:	50040100 	.word	0x50040100
 8002ab4:	50040300 	.word	0x50040300
 8002ab8:	50040200 	.word	0x50040200

08002abc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e0ed      	b.n	8002caa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d102      	bne.n	8002ae0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe fb4e 	bl	800117c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002af0:	f7fe fdd0 	bl	8001694 <HAL_GetTick>
 8002af4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002af6:	e012      	b.n	8002b1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002af8:	f7fe fdcc 	bl	8001694 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b0a      	cmp	r3, #10
 8002b04:	d90b      	bls.n	8002b1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2205      	movs	r2, #5
 8002b16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e0c5      	b.n	8002caa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0e5      	beq.n	8002af8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0202 	bic.w	r2, r2, #2
 8002b3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b3c:	f7fe fdaa 	bl	8001694 <HAL_GetTick>
 8002b40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b42:	e012      	b.n	8002b6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b44:	f7fe fda6 	bl	8001694 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b0a      	cmp	r3, #10
 8002b50:	d90b      	bls.n	8002b6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b56:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2205      	movs	r2, #5
 8002b62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e09f      	b.n	8002caa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1e5      	bne.n	8002b44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	7e1b      	ldrb	r3, [r3, #24]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d108      	bne.n	8002b92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	e007      	b.n	8002ba2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ba0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	7e5b      	ldrb	r3, [r3, #25]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d108      	bne.n	8002bbc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	e007      	b.n	8002bcc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	7e9b      	ldrb	r3, [r3, #26]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d108      	bne.n	8002be6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0220 	orr.w	r2, r2, #32
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	e007      	b.n	8002bf6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0220 	bic.w	r2, r2, #32
 8002bf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	7edb      	ldrb	r3, [r3, #27]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d108      	bne.n	8002c10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0210 	bic.w	r2, r2, #16
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	e007      	b.n	8002c20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0210 	orr.w	r2, r2, #16
 8002c1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	7f1b      	ldrb	r3, [r3, #28]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d108      	bne.n	8002c3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0208 	orr.w	r2, r2, #8
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	e007      	b.n	8002c4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0208 	bic.w	r2, r2, #8
 8002c48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	7f5b      	ldrb	r3, [r3, #29]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d108      	bne.n	8002c64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0204 	orr.w	r2, r2, #4
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	e007      	b.n	8002c74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0204 	bic.w	r2, r2, #4
 8002c72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	ea42 0103 	orr.w	r1, r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	1e5a      	subs	r2, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ce6:	4a04      	ldr	r2, [pc, #16]	@ (8002cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	60d3      	str	r3, [r2, #12]
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d00:	4b04      	ldr	r3, [pc, #16]	@ (8002d14 <__NVIC_GetPriorityGrouping+0x18>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	0a1b      	lsrs	r3, r3, #8
 8002d06:	f003 0307 	and.w	r3, r3, #7
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	db0b      	blt.n	8002d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	f003 021f 	and.w	r2, r3, #31
 8002d30:	4907      	ldr	r1, [pc, #28]	@ (8002d50 <__NVIC_EnableIRQ+0x38>)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	2001      	movs	r0, #1
 8002d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	e000e100 	.word	0xe000e100

08002d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	6039      	str	r1, [r7, #0]
 8002d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	db0a      	blt.n	8002d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	490c      	ldr	r1, [pc, #48]	@ (8002da0 <__NVIC_SetPriority+0x4c>)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	0112      	lsls	r2, r2, #4
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	440b      	add	r3, r1
 8002d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d7c:	e00a      	b.n	8002d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	4908      	ldr	r1, [pc, #32]	@ (8002da4 <__NVIC_SetPriority+0x50>)
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	3b04      	subs	r3, #4
 8002d8c:	0112      	lsls	r2, r2, #4
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	440b      	add	r3, r1
 8002d92:	761a      	strb	r2, [r3, #24]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000e100 	.word	0xe000e100
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b089      	sub	sp, #36	@ 0x24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f1c3 0307 	rsb	r3, r3, #7
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	bf28      	it	cs
 8002dc6:	2304      	movcs	r3, #4
 8002dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	2b06      	cmp	r3, #6
 8002dd0:	d902      	bls.n	8002dd8 <NVIC_EncodePriority+0x30>
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3b03      	subs	r3, #3
 8002dd6:	e000      	b.n	8002dda <NVIC_EncodePriority+0x32>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43da      	mvns	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	401a      	ands	r2, r3
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df0:	f04f 31ff 	mov.w	r1, #4294967295
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	43d9      	mvns	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e00:	4313      	orrs	r3, r2
         );
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3724      	adds	r7, #36	@ 0x24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7ff ff4c 	bl	8002cb4 <__NVIC_SetPriorityGrouping>
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e36:	f7ff ff61 	bl	8002cfc <__NVIC_GetPriorityGrouping>
 8002e3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	68b9      	ldr	r1, [r7, #8]
 8002e40:	6978      	ldr	r0, [r7, #20]
 8002e42:	f7ff ffb1 	bl	8002da8 <NVIC_EncodePriority>
 8002e46:	4602      	mov	r2, r0
 8002e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4c:	4611      	mov	r1, r2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff ff80 	bl	8002d54 <__NVIC_SetPriority>
}
 8002e54:	bf00      	nop
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff ff54 	bl	8002d18 <__NVIC_EnableIRQ>
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e098      	b.n	8002fbc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4b4d      	ldr	r3, [pc, #308]	@ (8002fc8 <HAL_DMA_Init+0x150>)
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d80f      	bhi.n	8002eb6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4b4b      	ldr	r3, [pc, #300]	@ (8002fcc <HAL_DMA_Init+0x154>)
 8002e9e:	4413      	add	r3, r2
 8002ea0:	4a4b      	ldr	r2, [pc, #300]	@ (8002fd0 <HAL_DMA_Init+0x158>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	091b      	lsrs	r3, r3, #4
 8002ea8:	009a      	lsls	r2, r3, #2
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a48      	ldr	r2, [pc, #288]	@ (8002fd4 <HAL_DMA_Init+0x15c>)
 8002eb2:	641a      	str	r2, [r3, #64]	@ 0x40
 8002eb4:	e00e      	b.n	8002ed4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4b46      	ldr	r3, [pc, #280]	@ (8002fd8 <HAL_DMA_Init+0x160>)
 8002ebe:	4413      	add	r3, r2
 8002ec0:	4a43      	ldr	r2, [pc, #268]	@ (8002fd0 <HAL_DMA_Init+0x158>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	091b      	lsrs	r3, r3, #4
 8002ec8:	009a      	lsls	r2, r3, #2
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a42      	ldr	r2, [pc, #264]	@ (8002fdc <HAL_DMA_Init+0x164>)
 8002ed2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f2e:	d039      	beq.n	8002fa4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	4a27      	ldr	r2, [pc, #156]	@ (8002fd4 <HAL_DMA_Init+0x15c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d11a      	bne.n	8002f70 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f3a:	4b29      	ldr	r3, [pc, #164]	@ (8002fe0 <HAL_DMA_Init+0x168>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f42:	f003 031c 	and.w	r3, r3, #28
 8002f46:	210f      	movs	r1, #15
 8002f48:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	4924      	ldr	r1, [pc, #144]	@ (8002fe0 <HAL_DMA_Init+0x168>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f54:	4b22      	ldr	r3, [pc, #136]	@ (8002fe0 <HAL_DMA_Init+0x168>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f60:	f003 031c 	and.w	r3, r3, #28
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	491d      	ldr	r1, [pc, #116]	@ (8002fe0 <HAL_DMA_Init+0x168>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]
 8002f6e:	e019      	b.n	8002fa4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f70:	4b1c      	ldr	r3, [pc, #112]	@ (8002fe4 <HAL_DMA_Init+0x16c>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f78:	f003 031c 	and.w	r3, r3, #28
 8002f7c:	210f      	movs	r1, #15
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	4917      	ldr	r1, [pc, #92]	@ (8002fe4 <HAL_DMA_Init+0x16c>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f8a:	4b16      	ldr	r3, [pc, #88]	@ (8002fe4 <HAL_DMA_Init+0x16c>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6859      	ldr	r1, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f96:	f003 031c 	and.w	r3, r3, #28
 8002f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9e:	4911      	ldr	r1, [pc, #68]	@ (8002fe4 <HAL_DMA_Init+0x16c>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	40020407 	.word	0x40020407
 8002fcc:	bffdfff8 	.word	0xbffdfff8
 8002fd0:	cccccccd 	.word	0xcccccccd
 8002fd4:	40020000 	.word	0x40020000
 8002fd8:	bffdfbf8 	.word	0xbffdfbf8
 8002fdc:	40020400 	.word	0x40020400
 8002fe0:	400200a8 	.word	0x400200a8
 8002fe4:	400204a8 	.word	0x400204a8

08002fe8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_DMA_Start_IT+0x20>
 8003004:	2302      	movs	r3, #2
 8003006:	e04b      	b.n	80030a0 <HAL_DMA_Start_IT+0xb8>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	d13a      	bne.n	8003092 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0201 	bic.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	68b9      	ldr	r1, [r7, #8]
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f95f 	bl	8003304 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	2b00      	cmp	r3, #0
 800304c:	d008      	beq.n	8003060 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 020e 	orr.w	r2, r2, #14
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	e00f      	b.n	8003080 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0204 	bic.w	r2, r2, #4
 800306e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 020a 	orr.w	r2, r2, #10
 800307e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	e005      	b.n	800309e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800309a:	2302      	movs	r3, #2
 800309c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800309e:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d008      	beq.n	80030d2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2204      	movs	r2, #4
 80030c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e022      	b.n	8003118 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 020e 	bic.w	r2, r2, #14
 80030e0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0201 	bic.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f6:	f003 021c 	and.w	r2, r3, #28
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	2101      	movs	r1, #1
 8003100:	fa01 f202 	lsl.w	r2, r1, r2
 8003104:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003116:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d005      	beq.n	8003148 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2204      	movs	r2, #4
 8003140:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
 8003146:	e029      	b.n	800319c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 020e 	bic.w	r2, r2, #14
 8003156:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0201 	bic.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316c:	f003 021c 	and.w	r2, r3, #28
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003174:	2101      	movs	r1, #1
 8003176:	fa01 f202 	lsl.w	r2, r1, r2
 800317a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	4798      	blx	r3
    }
  }
  return status;
 800319c:	7bfb      	ldrb	r3, [r7, #15]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b084      	sub	sp, #16
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c2:	f003 031c 	and.w	r3, r3, #28
 80031c6:	2204      	movs	r2, #4
 80031c8:	409a      	lsls	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d026      	beq.n	8003220 <HAL_DMA_IRQHandler+0x7a>
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d021      	beq.n	8003220 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d107      	bne.n	80031fa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0204 	bic.w	r2, r2, #4
 80031f8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fe:	f003 021c 	and.w	r2, r3, #28
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003206:	2104      	movs	r1, #4
 8003208:	fa01 f202 	lsl.w	r2, r1, r2
 800320c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	2b00      	cmp	r3, #0
 8003214:	d071      	beq.n	80032fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800321e:	e06c      	b.n	80032fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003224:	f003 031c 	and.w	r3, r3, #28
 8003228:	2202      	movs	r2, #2
 800322a:	409a      	lsls	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d02e      	beq.n	8003292 <HAL_DMA_IRQHandler+0xec>
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d029      	beq.n	8003292 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10b      	bne.n	8003264 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 020a 	bic.w	r2, r2, #10
 800325a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003268:	f003 021c 	and.w	r2, r3, #28
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003270:	2102      	movs	r1, #2
 8003272:	fa01 f202 	lsl.w	r2, r1, r2
 8003276:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003284:	2b00      	cmp	r3, #0
 8003286:	d038      	beq.n	80032fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003290:	e033      	b.n	80032fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003296:	f003 031c 	and.w	r3, r3, #28
 800329a:	2208      	movs	r2, #8
 800329c:	409a      	lsls	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d02a      	beq.n	80032fc <HAL_DMA_IRQHandler+0x156>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d025      	beq.n	80032fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 020e 	bic.w	r2, r2, #14
 80032be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c4:	f003 021c 	and.w	r2, r3, #28
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032cc:	2101      	movs	r1, #1
 80032ce:	fa01 f202 	lsl.w	r2, r1, r2
 80032d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d004      	beq.n	80032fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80032fa:	bf00      	nop
 80032fc:	bf00      	nop
}
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003316:	f003 021c 	and.w	r2, r3, #28
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	2101      	movs	r1, #1
 8003320:	fa01 f202 	lsl.w	r2, r1, r2
 8003324:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2b10      	cmp	r3, #16
 8003334:	d108      	bne.n	8003348 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003346:	e007      	b.n	8003358 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	60da      	str	r2, [r3, #12]
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003372:	e166      	b.n	8003642 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	2101      	movs	r1, #1
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	fa01 f303 	lsl.w	r3, r1, r3
 8003380:	4013      	ands	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 8158 	beq.w	800363c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d005      	beq.n	80033a4 <HAL_GPIO_Init+0x40>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d130      	bne.n	8003406 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	2203      	movs	r2, #3
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033da:	2201      	movs	r2, #1
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4013      	ands	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	091b      	lsrs	r3, r3, #4
 80033f0:	f003 0201 	and.w	r2, r3, #1
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	2b03      	cmp	r3, #3
 8003410:	d017      	beq.n	8003442 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	2203      	movs	r2, #3
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4013      	ands	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d123      	bne.n	8003496 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	08da      	lsrs	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3208      	adds	r2, #8
 8003456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800345a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	220f      	movs	r2, #15
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4013      	ands	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	08da      	lsrs	r2, r3, #3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3208      	adds	r2, #8
 8003490:	6939      	ldr	r1, [r7, #16]
 8003492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	2203      	movs	r2, #3
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4013      	ands	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 0203 	and.w	r2, r3, #3
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 80b2 	beq.w	800363c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d8:	4b61      	ldr	r3, [pc, #388]	@ (8003660 <HAL_GPIO_Init+0x2fc>)
 80034da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034dc:	4a60      	ldr	r2, [pc, #384]	@ (8003660 <HAL_GPIO_Init+0x2fc>)
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80034e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003660 <HAL_GPIO_Init+0x2fc>)
 80034e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034f0:	4a5c      	ldr	r2, [pc, #368]	@ (8003664 <HAL_GPIO_Init+0x300>)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	089b      	lsrs	r3, r3, #2
 80034f6:	3302      	adds	r3, #2
 80034f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	220f      	movs	r2, #15
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4013      	ands	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800351a:	d02b      	beq.n	8003574 <HAL_GPIO_Init+0x210>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a52      	ldr	r2, [pc, #328]	@ (8003668 <HAL_GPIO_Init+0x304>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d025      	beq.n	8003570 <HAL_GPIO_Init+0x20c>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a51      	ldr	r2, [pc, #324]	@ (800366c <HAL_GPIO_Init+0x308>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d01f      	beq.n	800356c <HAL_GPIO_Init+0x208>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a50      	ldr	r2, [pc, #320]	@ (8003670 <HAL_GPIO_Init+0x30c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d019      	beq.n	8003568 <HAL_GPIO_Init+0x204>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a4f      	ldr	r2, [pc, #316]	@ (8003674 <HAL_GPIO_Init+0x310>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d013      	beq.n	8003564 <HAL_GPIO_Init+0x200>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a4e      	ldr	r2, [pc, #312]	@ (8003678 <HAL_GPIO_Init+0x314>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00d      	beq.n	8003560 <HAL_GPIO_Init+0x1fc>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a4d      	ldr	r2, [pc, #308]	@ (800367c <HAL_GPIO_Init+0x318>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d007      	beq.n	800355c <HAL_GPIO_Init+0x1f8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a4c      	ldr	r2, [pc, #304]	@ (8003680 <HAL_GPIO_Init+0x31c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d101      	bne.n	8003558 <HAL_GPIO_Init+0x1f4>
 8003554:	2307      	movs	r3, #7
 8003556:	e00e      	b.n	8003576 <HAL_GPIO_Init+0x212>
 8003558:	2308      	movs	r3, #8
 800355a:	e00c      	b.n	8003576 <HAL_GPIO_Init+0x212>
 800355c:	2306      	movs	r3, #6
 800355e:	e00a      	b.n	8003576 <HAL_GPIO_Init+0x212>
 8003560:	2305      	movs	r3, #5
 8003562:	e008      	b.n	8003576 <HAL_GPIO_Init+0x212>
 8003564:	2304      	movs	r3, #4
 8003566:	e006      	b.n	8003576 <HAL_GPIO_Init+0x212>
 8003568:	2303      	movs	r3, #3
 800356a:	e004      	b.n	8003576 <HAL_GPIO_Init+0x212>
 800356c:	2302      	movs	r3, #2
 800356e:	e002      	b.n	8003576 <HAL_GPIO_Init+0x212>
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <HAL_GPIO_Init+0x212>
 8003574:	2300      	movs	r3, #0
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	f002 0203 	and.w	r2, r2, #3
 800357c:	0092      	lsls	r2, r2, #2
 800357e:	4093      	lsls	r3, r2
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003586:	4937      	ldr	r1, [pc, #220]	@ (8003664 <HAL_GPIO_Init+0x300>)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	089b      	lsrs	r3, r3, #2
 800358c:	3302      	adds	r3, #2
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003594:	4b3b      	ldr	r3, [pc, #236]	@ (8003684 <HAL_GPIO_Init+0x320>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	43db      	mvns	r3, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035b8:	4a32      	ldr	r2, [pc, #200]	@ (8003684 <HAL_GPIO_Init+0x320>)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035be:	4b31      	ldr	r3, [pc, #196]	@ (8003684 <HAL_GPIO_Init+0x320>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	43db      	mvns	r3, r3
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4013      	ands	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035e2:	4a28      	ldr	r2, [pc, #160]	@ (8003684 <HAL_GPIO_Init+0x320>)
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035e8:	4b26      	ldr	r3, [pc, #152]	@ (8003684 <HAL_GPIO_Init+0x320>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800360c:	4a1d      	ldr	r2, [pc, #116]	@ (8003684 <HAL_GPIO_Init+0x320>)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003612:	4b1c      	ldr	r3, [pc, #112]	@ (8003684 <HAL_GPIO_Init+0x320>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	43db      	mvns	r3, r3
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4013      	ands	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003636:	4a13      	ldr	r2, [pc, #76]	@ (8003684 <HAL_GPIO_Init+0x320>)
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	3301      	adds	r3, #1
 8003640:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	f47f ae91 	bne.w	8003374 <HAL_GPIO_Init+0x10>
  }
}
 8003652:	bf00      	nop
 8003654:	bf00      	nop
 8003656:	371c      	adds	r7, #28
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	40021000 	.word	0x40021000
 8003664:	40010000 	.word	0x40010000
 8003668:	48000400 	.word	0x48000400
 800366c:	48000800 	.word	0x48000800
 8003670:	48000c00 	.word	0x48000c00
 8003674:	48001000 	.word	0x48001000
 8003678:	48001400 	.word	0x48001400
 800367c:	48001800 	.word	0x48001800
 8003680:	48001c00 	.word	0x48001c00
 8003684:	40010400 	.word	0x40010400

08003688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	807b      	strh	r3, [r7, #2]
 8003694:	4613      	mov	r3, r2
 8003696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003698:	787b      	ldrb	r3, [r7, #1]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800369e:	887a      	ldrh	r2, [r7, #2]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036a4:	e002      	b.n	80036ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036a6:	887a      	ldrh	r2, [r7, #2]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036ca:	887a      	ldrh	r2, [r7, #2]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4013      	ands	r3, r2
 80036d0:	041a      	lsls	r2, r3, #16
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	43d9      	mvns	r1, r3
 80036d6:	887b      	ldrh	r3, [r7, #2]
 80036d8:	400b      	ands	r3, r1
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	619a      	str	r2, [r3, #24]
}
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036f6:	4b08      	ldr	r3, [pc, #32]	@ (8003718 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d006      	beq.n	8003710 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003702:	4a05      	ldr	r2, [pc, #20]	@ (8003718 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	4618      	mov	r0, r3
 800370c:	f7fd f8c0 	bl	8000890 <HAL_GPIO_EXTI_Callback>
  }
}
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40010400 	.word	0x40010400

0800371c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e08d      	b.n	800384a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd fdbe 	bl	80012c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2224      	movs	r2, #36	@ 0x24
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0201 	bic.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800376c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800377c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d107      	bne.n	8003796 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	e006      	b.n	80037a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80037a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d108      	bne.n	80037be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ba:	605a      	str	r2, [r3, #4]
 80037bc:	e007      	b.n	80037ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80037dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69d9      	ldr	r1, [r3, #28]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1a      	ldr	r2, [r3, #32]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af02      	add	r7, sp, #8
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	4608      	mov	r0, r1
 800385e:	4611      	mov	r1, r2
 8003860:	461a      	mov	r2, r3
 8003862:	4603      	mov	r3, r0
 8003864:	817b      	strh	r3, [r7, #10]
 8003866:	460b      	mov	r3, r1
 8003868:	813b      	strh	r3, [r7, #8]
 800386a:	4613      	mov	r3, r2
 800386c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b20      	cmp	r3, #32
 8003878:	f040 80f9 	bne.w	8003a6e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_I2C_Mem_Write+0x34>
 8003882:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003884:	2b00      	cmp	r3, #0
 8003886:	d105      	bne.n	8003894 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800388e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0ed      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_I2C_Mem_Write+0x4e>
 800389e:	2302      	movs	r3, #2
 80038a0:	e0e6      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038aa:	f7fd fef3 	bl	8001694 <HAL_GetTick>
 80038ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	2319      	movs	r3, #25
 80038b6:	2201      	movs	r2, #1
 80038b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fac3 	bl	8003e48 <I2C_WaitOnFlagUntilTimeout>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0d1      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2221      	movs	r2, #33	@ 0x21
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2240      	movs	r2, #64	@ 0x40
 80038d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a3a      	ldr	r2, [r7, #32]
 80038e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80038ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038f4:	88f8      	ldrh	r0, [r7, #6]
 80038f6:	893a      	ldrh	r2, [r7, #8]
 80038f8:	8979      	ldrh	r1, [r7, #10]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	4603      	mov	r3, r0
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f9d3 	bl	8003cb0 <I2C_RequestMemoryWrite>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0a9      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	2bff      	cmp	r3, #255	@ 0xff
 8003924:	d90e      	bls.n	8003944 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	22ff      	movs	r2, #255	@ 0xff
 800392a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003930:	b2da      	uxtb	r2, r3
 8003932:	8979      	ldrh	r1, [r7, #10]
 8003934:	2300      	movs	r3, #0
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 fc47 	bl	80041d0 <I2C_TransferConfig>
 8003942:	e00f      	b.n	8003964 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003952:	b2da      	uxtb	r2, r3
 8003954:	8979      	ldrh	r1, [r7, #10]
 8003956:	2300      	movs	r3, #0
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fc36 	bl	80041d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 fac6 	bl	8003efa <I2C_WaitOnTXISFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e07b      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397c:	781a      	ldrb	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d034      	beq.n	8003a1c <HAL_I2C_Mem_Write+0x1c8>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d130      	bne.n	8003a1c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c0:	2200      	movs	r2, #0
 80039c2:	2180      	movs	r1, #128	@ 0x80
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 fa3f 	bl	8003e48 <I2C_WaitOnFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e04d      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2bff      	cmp	r3, #255	@ 0xff
 80039dc:	d90e      	bls.n	80039fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	22ff      	movs	r2, #255	@ 0xff
 80039e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	8979      	ldrh	r1, [r7, #10]
 80039ec:	2300      	movs	r3, #0
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 fbeb 	bl	80041d0 <I2C_TransferConfig>
 80039fa:	e00f      	b.n	8003a1c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	8979      	ldrh	r1, [r7, #10]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 fbda 	bl	80041d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d19e      	bne.n	8003964 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 faac 	bl	8003f88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e01a      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a78 <HAL_I2C_Mem_Write+0x224>)
 8003a4e:	400b      	ands	r3, r1
 8003a50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e000      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003a6e:	2302      	movs	r3, #2
  }
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	fe00e800 	.word	0xfe00e800

08003a7c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	4608      	mov	r0, r1
 8003a86:	4611      	mov	r1, r2
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	817b      	strh	r3, [r7, #10]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	813b      	strh	r3, [r7, #8]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	f040 80fd 	bne.w	8003c9e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <HAL_I2C_Mem_Read+0x34>
 8003aaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d105      	bne.n	8003abc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ab6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0f1      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_I2C_Mem_Read+0x4e>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e0ea      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ad2:	f7fd fddf 	bl	8001694 <HAL_GetTick>
 8003ad6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	2319      	movs	r3, #25
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f9af 	bl	8003e48 <I2C_WaitOnFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0d5      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2222      	movs	r2, #34	@ 0x22
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2240      	movs	r2, #64	@ 0x40
 8003b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a3a      	ldr	r2, [r7, #32]
 8003b0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003b14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b1c:	88f8      	ldrh	r0, [r7, #6]
 8003b1e:	893a      	ldrh	r2, [r7, #8]
 8003b20:	8979      	ldrh	r1, [r7, #10]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f913 	bl	8003d58 <I2C_RequestMemoryRead>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0ad      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2bff      	cmp	r3, #255	@ 0xff
 8003b4c:	d90e      	bls.n	8003b6c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2201      	movs	r2, #1
 8003b52:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	8979      	ldrh	r1, [r7, #10]
 8003b5c:	4b52      	ldr	r3, [pc, #328]	@ (8003ca8 <HAL_I2C_Mem_Read+0x22c>)
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 fb33 	bl	80041d0 <I2C_TransferConfig>
 8003b6a:	e00f      	b.n	8003b8c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	8979      	ldrh	r1, [r7, #10]
 8003b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8003ca8 <HAL_I2C_Mem_Read+0x22c>)
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fb22 	bl	80041d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b92:	2200      	movs	r2, #0
 8003b94:	2104      	movs	r1, #4
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f956 	bl	8003e48 <I2C_WaitOnFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e07c      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d034      	beq.n	8003c4c <HAL_I2C_Mem_Read+0x1d0>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d130      	bne.n	8003c4c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2180      	movs	r1, #128	@ 0x80
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 f927 	bl	8003e48 <I2C_WaitOnFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e04d      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2bff      	cmp	r3, #255	@ 0xff
 8003c0c:	d90e      	bls.n	8003c2c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	8979      	ldrh	r1, [r7, #10]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 fad3 	bl	80041d0 <I2C_TransferConfig>
 8003c2a:	e00f      	b.n	8003c4c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	8979      	ldrh	r1, [r7, #10]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 fac2 	bl	80041d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d19a      	bne.n	8003b8c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f994 	bl	8003f88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e01a      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6859      	ldr	r1, [r3, #4]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003cac <HAL_I2C_Mem_Read+0x230>)
 8003c7e:	400b      	ands	r3, r1
 8003c80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e000      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003c9e:	2302      	movs	r3, #2
  }
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	80002400 	.word	0x80002400
 8003cac:	fe00e800 	.word	0xfe00e800

08003cb0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	4608      	mov	r0, r1
 8003cba:	4611      	mov	r1, r2
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	817b      	strh	r3, [r7, #10]
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	813b      	strh	r3, [r7, #8]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	8979      	ldrh	r1, [r7, #10]
 8003cd0:	4b20      	ldr	r3, [pc, #128]	@ (8003d54 <I2C_RequestMemoryWrite+0xa4>)
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 fa79 	bl	80041d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	69b9      	ldr	r1, [r7, #24]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f909 	bl	8003efa <I2C_WaitOnTXISFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e02c      	b.n	8003d4c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d105      	bne.n	8003d04 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cf8:	893b      	ldrh	r3, [r7, #8]
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d02:	e015      	b.n	8003d30 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d04:	893b      	ldrh	r3, [r7, #8]
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	69b9      	ldr	r1, [r7, #24]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f8ef 	bl	8003efa <I2C_WaitOnTXISFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e012      	b.n	8003d4c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d26:	893b      	ldrh	r3, [r7, #8]
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	2200      	movs	r2, #0
 8003d38:	2180      	movs	r1, #128	@ 0x80
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f884 	bl	8003e48 <I2C_WaitOnFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	80002000 	.word	0x80002000

08003d58 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	4608      	mov	r0, r1
 8003d62:	4611      	mov	r1, r2
 8003d64:	461a      	mov	r2, r3
 8003d66:	4603      	mov	r3, r0
 8003d68:	817b      	strh	r3, [r7, #10]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	813b      	strh	r3, [r7, #8]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	8979      	ldrh	r1, [r7, #10]
 8003d78:	4b20      	ldr	r3, [pc, #128]	@ (8003dfc <I2C_RequestMemoryRead+0xa4>)
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 fa26 	bl	80041d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	69b9      	ldr	r1, [r7, #24]
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 f8b6 	bl	8003efa <I2C_WaitOnTXISFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e02c      	b.n	8003df2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d98:	88fb      	ldrh	r3, [r7, #6]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d105      	bne.n	8003daa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d9e:	893b      	ldrh	r3, [r7, #8]
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003da8:	e015      	b.n	8003dd6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003daa:	893b      	ldrh	r3, [r7, #8]
 8003dac:	0a1b      	lsrs	r3, r3, #8
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	69b9      	ldr	r1, [r7, #24]
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f89c 	bl	8003efa <I2C_WaitOnTXISFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e012      	b.n	8003df2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dcc:	893b      	ldrh	r3, [r7, #8]
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2140      	movs	r1, #64	@ 0x40
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f831 	bl	8003e48 <I2C_WaitOnFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	80002000 	.word	0x80002000

08003e00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d103      	bne.n	8003e1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d007      	beq.n	8003e3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699a      	ldr	r2, [r3, #24]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	619a      	str	r2, [r3, #24]
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e58:	e03b      	b.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	6839      	ldr	r1, [r7, #0]
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 f8d6 	bl	8004010 <I2C_IsErrorOccurred>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e041      	b.n	8003ef2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d02d      	beq.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e76:	f7fd fc0d 	bl	8001694 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d302      	bcc.n	8003e8c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d122      	bne.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4013      	ands	r3, r2
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2301      	moveq	r3, #1
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d113      	bne.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eae:	f043 0220 	orr.w	r2, r3, #32
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e00f      	b.n	8003ef2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699a      	ldr	r2, [r3, #24]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4013      	ands	r3, r2
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	bf0c      	ite	eq
 8003ee2:	2301      	moveq	r3, #1
 8003ee4:	2300      	movne	r3, #0
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	461a      	mov	r2, r3
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d0b4      	beq.n	8003e5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f06:	e033      	b.n	8003f70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f87f 	bl	8004010 <I2C_IsErrorOccurred>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e031      	b.n	8003f80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d025      	beq.n	8003f70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f24:	f7fd fbb6 	bl	8001694 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d302      	bcc.n	8003f3a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d11a      	bne.n	8003f70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d013      	beq.n	8003f70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4c:	f043 0220 	orr.w	r2, r3, #32
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e007      	b.n	8003f80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d1c4      	bne.n	8003f08 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f94:	e02f      	b.n	8003ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f838 	bl	8004010 <I2C_IsErrorOccurred>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e02d      	b.n	8004006 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003faa:	f7fd fb73 	bl	8001694 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d302      	bcc.n	8003fc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d11a      	bne.n	8003ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d013      	beq.n	8003ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd2:	f043 0220 	orr.w	r2, r3, #32
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e007      	b.n	8004006 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b20      	cmp	r3, #32
 8004002:	d1c8      	bne.n	8003f96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08a      	sub	sp, #40	@ 0x28
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800402a:	2300      	movs	r3, #0
 800402c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b00      	cmp	r3, #0
 800403a:	d068      	beq.n	800410e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2210      	movs	r2, #16
 8004042:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004044:	e049      	b.n	80040da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404c:	d045      	beq.n	80040da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800404e:	f7fd fb21 	bl	8001694 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	429a      	cmp	r2, r3
 800405c:	d302      	bcc.n	8004064 <I2C_IsErrorOccurred+0x54>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d13a      	bne.n	80040da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800406e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004076:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004082:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004086:	d121      	bne.n	80040cc <I2C_IsErrorOccurred+0xbc>
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800408e:	d01d      	beq.n	80040cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	2b20      	cmp	r3, #32
 8004094:	d01a      	beq.n	80040cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80040a6:	f7fd faf5 	bl	8001694 <HAL_GetTick>
 80040aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040ac:	e00e      	b.n	80040cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80040ae:	f7fd faf1 	bl	8001694 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b19      	cmp	r3, #25
 80040ba:	d907      	bls.n	80040cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	f043 0320 	orr.w	r3, r3, #32
 80040c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80040ca:	e006      	b.n	80040da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d1e9      	bne.n	80040ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	f003 0320 	and.w	r3, r3, #32
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d003      	beq.n	80040f0 <I2C_IsErrorOccurred+0xe0>
 80040e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0aa      	beq.n	8004046 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80040f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d103      	bne.n	8004100 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2220      	movs	r2, #32
 80040fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	f043 0304 	orr.w	r3, r3, #4
 8004106:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00b      	beq.n	8004138 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004130:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00b      	beq.n	800415a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	f043 0308 	orr.w	r3, r3, #8
 8004148:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004152:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00b      	beq.n	800417c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	f043 0302 	orr.w	r3, r3, #2
 800416a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004174:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800417c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01c      	beq.n	80041be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f7ff fe3b 	bl	8003e00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6859      	ldr	r1, [r3, #4]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4b0d      	ldr	r3, [pc, #52]	@ (80041cc <I2C_IsErrorOccurred+0x1bc>)
 8004196:	400b      	ands	r3, r1
 8004198:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	431a      	orrs	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80041be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3728      	adds	r7, #40	@ 0x28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	fe00e800 	.word	0xfe00e800

080041d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	607b      	str	r3, [r7, #4]
 80041da:	460b      	mov	r3, r1
 80041dc:	817b      	strh	r3, [r7, #10]
 80041de:	4613      	mov	r3, r2
 80041e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041e2:	897b      	ldrh	r3, [r7, #10]
 80041e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041e8:	7a7b      	ldrb	r3, [r7, #9]
 80041ea:	041b      	lsls	r3, r3, #16
 80041ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	0d5b      	lsrs	r3, r3, #21
 800420a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800420e:	4b08      	ldr	r3, [pc, #32]	@ (8004230 <I2C_TransferConfig+0x60>)
 8004210:	430b      	orrs	r3, r1
 8004212:	43db      	mvns	r3, r3
 8004214:	ea02 0103 	and.w	r1, r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004222:	bf00      	nop
 8004224:	371c      	adds	r7, #28
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	03ff63ff 	.word	0x03ff63ff

08004234 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b20      	cmp	r3, #32
 8004248:	d138      	bne.n	80042bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004254:	2302      	movs	r3, #2
 8004256:	e032      	b.n	80042be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2224      	movs	r2, #36	@ 0x24
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0201 	bic.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004286:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6819      	ldr	r1, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	e000      	b.n	80042be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042bc:	2302      	movs	r3, #2
  }
}
 80042be:	4618      	mov	r0, r3
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b085      	sub	sp, #20
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
 80042d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b20      	cmp	r3, #32
 80042de:	d139      	bne.n	8004354 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d101      	bne.n	80042ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e033      	b.n	8004356 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2224      	movs	r2, #36	@ 0x24
 80042fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0201 	bic.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800431c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	e000      	b.n	8004356 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004354:	2302      	movs	r3, #2
  }
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004368:	4b04      	ldr	r3, [pc, #16]	@ (800437c <HAL_PWREx_GetVoltageRange+0x18>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40007000 	.word	0x40007000

08004380 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800438e:	d130      	bne.n	80043f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004390:	4b23      	ldr	r3, [pc, #140]	@ (8004420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800439c:	d038      	beq.n	8004410 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800439e:	4b20      	ldr	r3, [pc, #128]	@ (8004420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004424 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2232      	movs	r2, #50	@ 0x32
 80043b4:	fb02 f303 	mul.w	r3, r2, r3
 80043b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004428 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80043ba:	fba2 2303 	umull	r2, r3, r2, r3
 80043be:	0c9b      	lsrs	r3, r3, #18
 80043c0:	3301      	adds	r3, #1
 80043c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043c4:	e002      	b.n	80043cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043cc:	4b14      	ldr	r3, [pc, #80]	@ (8004420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043d8:	d102      	bne.n	80043e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1f2      	bne.n	80043c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ec:	d110      	bne.n	8004410 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e00f      	b.n	8004412 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80043f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043fe:	d007      	beq.n	8004410 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004400:	4b07      	ldr	r3, [pc, #28]	@ (8004420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004408:	4a05      	ldr	r2, [pc, #20]	@ (8004420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800440a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800440e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40007000 	.word	0x40007000
 8004424:	20000000 	.word	0x20000000
 8004428:	431bde83 	.word	0x431bde83

0800442c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d102      	bne.n	8004440 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	f000 bc08 	b.w	8004c50 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004440:	4b96      	ldr	r3, [pc, #600]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 030c 	and.w	r3, r3, #12
 8004448:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800444a:	4b94      	ldr	r3, [pc, #592]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0310 	and.w	r3, r3, #16
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 80e4 	beq.w	800462a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d007      	beq.n	8004478 <HAL_RCC_OscConfig+0x4c>
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	2b0c      	cmp	r3, #12
 800446c:	f040 808b 	bne.w	8004586 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	2b01      	cmp	r3, #1
 8004474:	f040 8087 	bne.w	8004586 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004478:	4b88      	ldr	r3, [pc, #544]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_RCC_OscConfig+0x64>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e3df      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1a      	ldr	r2, [r3, #32]
 8004494:	4b81      	ldr	r3, [pc, #516]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d004      	beq.n	80044aa <HAL_RCC_OscConfig+0x7e>
 80044a0:	4b7e      	ldr	r3, [pc, #504]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044a8:	e005      	b.n	80044b6 <HAL_RCC_OscConfig+0x8a>
 80044aa:	4b7c      	ldr	r3, [pc, #496]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 80044ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044b0:	091b      	lsrs	r3, r3, #4
 80044b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d223      	bcs.n	8004502 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fdc4 	bl	800504c <RCC_SetFlashLatencyFromMSIRange>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e3c0      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044ce:	4b73      	ldr	r3, [pc, #460]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a72      	ldr	r2, [pc, #456]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 80044d4:	f043 0308 	orr.w	r3, r3, #8
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	4b70      	ldr	r3, [pc, #448]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	496d      	ldr	r1, [pc, #436]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044ec:	4b6b      	ldr	r3, [pc, #428]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	021b      	lsls	r3, r3, #8
 80044fa:	4968      	ldr	r1, [pc, #416]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	604b      	str	r3, [r1, #4]
 8004500:	e025      	b.n	800454e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004502:	4b66      	ldr	r3, [pc, #408]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a65      	ldr	r2, [pc, #404]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 8004508:	f043 0308 	orr.w	r3, r3, #8
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	4b63      	ldr	r3, [pc, #396]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	4960      	ldr	r1, [pc, #384]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 800451c:	4313      	orrs	r3, r2
 800451e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004520:	4b5e      	ldr	r3, [pc, #376]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	495b      	ldr	r1, [pc, #364]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 8004530:	4313      	orrs	r3, r2
 8004532:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d109      	bne.n	800454e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fd84 	bl	800504c <RCC_SetFlashLatencyFromMSIRange>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e380      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800454e:	f000 fc87 	bl	8004e60 <HAL_RCC_GetSysClockFreq>
 8004552:	4602      	mov	r2, r0
 8004554:	4b51      	ldr	r3, [pc, #324]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	4950      	ldr	r1, [pc, #320]	@ (80046a0 <HAL_RCC_OscConfig+0x274>)
 8004560:	5ccb      	ldrb	r3, [r1, r3]
 8004562:	f003 031f 	and.w	r3, r3, #31
 8004566:	fa22 f303 	lsr.w	r3, r2, r3
 800456a:	4a4e      	ldr	r2, [pc, #312]	@ (80046a4 <HAL_RCC_OscConfig+0x278>)
 800456c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800456e:	4b4e      	ldr	r3, [pc, #312]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f7fc ff6c 	bl	8001450 <HAL_InitTick>
 8004578:	4603      	mov	r3, r0
 800457a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d052      	beq.n	8004628 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	e364      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d032      	beq.n	80045f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800458e:	4b43      	ldr	r3, [pc, #268]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a42      	ldr	r2, [pc, #264]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800459a:	f7fd f87b 	bl	8001694 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045a2:	f7fd f877 	bl	8001694 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e34d      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045b4:	4b39      	ldr	r3, [pc, #228]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0f0      	beq.n	80045a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045c0:	4b36      	ldr	r3, [pc, #216]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a35      	ldr	r2, [pc, #212]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 80045c6:	f043 0308 	orr.w	r3, r3, #8
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	4b33      	ldr	r3, [pc, #204]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	4930      	ldr	r1, [pc, #192]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045de:	4b2f      	ldr	r3, [pc, #188]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	021b      	lsls	r3, r3, #8
 80045ec:	492b      	ldr	r1, [pc, #172]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	604b      	str	r3, [r1, #4]
 80045f2:	e01a      	b.n	800462a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045f4:	4b29      	ldr	r3, [pc, #164]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a28      	ldr	r2, [pc, #160]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 80045fa:	f023 0301 	bic.w	r3, r3, #1
 80045fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004600:	f7fd f848 	bl	8001694 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004608:	f7fd f844 	bl	8001694 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e31a      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800461a:	4b20      	ldr	r3, [pc, #128]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0x1dc>
 8004626:	e000      	b.n	800462a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004628:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d073      	beq.n	800471e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	2b08      	cmp	r3, #8
 800463a:	d005      	beq.n	8004648 <HAL_RCC_OscConfig+0x21c>
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2b0c      	cmp	r3, #12
 8004640:	d10e      	bne.n	8004660 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b03      	cmp	r3, #3
 8004646:	d10b      	bne.n	8004660 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004648:	4b14      	ldr	r3, [pc, #80]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d063      	beq.n	800471c <HAL_RCC_OscConfig+0x2f0>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d15f      	bne.n	800471c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e2f7      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004668:	d106      	bne.n	8004678 <HAL_RCC_OscConfig+0x24c>
 800466a:	4b0c      	ldr	r3, [pc, #48]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a0b      	ldr	r2, [pc, #44]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 8004670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	e025      	b.n	80046c4 <HAL_RCC_OscConfig+0x298>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004680:	d114      	bne.n	80046ac <HAL_RCC_OscConfig+0x280>
 8004682:	4b06      	ldr	r3, [pc, #24]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a05      	ldr	r2, [pc, #20]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 8004688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	4b03      	ldr	r3, [pc, #12]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a02      	ldr	r2, [pc, #8]	@ (800469c <HAL_RCC_OscConfig+0x270>)
 8004694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	e013      	b.n	80046c4 <HAL_RCC_OscConfig+0x298>
 800469c:	40021000 	.word	0x40021000
 80046a0:	0800a5b4 	.word	0x0800a5b4
 80046a4:	20000000 	.word	0x20000000
 80046a8:	20000004 	.word	0x20000004
 80046ac:	4ba0      	ldr	r3, [pc, #640]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a9f      	ldr	r2, [pc, #636]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 80046b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	4b9d      	ldr	r3, [pc, #628]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a9c      	ldr	r2, [pc, #624]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 80046be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d013      	beq.n	80046f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fc ffe2 	bl	8001694 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d4:	f7fc ffde 	bl	8001694 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b64      	cmp	r3, #100	@ 0x64
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e2b4      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046e6:	4b92      	ldr	r3, [pc, #584]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0x2a8>
 80046f2:	e014      	b.n	800471e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f4:	f7fc ffce 	bl	8001694 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046fc:	f7fc ffca 	bl	8001694 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b64      	cmp	r3, #100	@ 0x64
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e2a0      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800470e:	4b88      	ldr	r3, [pc, #544]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0x2d0>
 800471a:	e000      	b.n	800471e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d060      	beq.n	80047ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	2b04      	cmp	r3, #4
 800472e:	d005      	beq.n	800473c <HAL_RCC_OscConfig+0x310>
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	2b0c      	cmp	r3, #12
 8004734:	d119      	bne.n	800476a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b02      	cmp	r3, #2
 800473a:	d116      	bne.n	800476a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800473c:	4b7c      	ldr	r3, [pc, #496]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <HAL_RCC_OscConfig+0x328>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e27d      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004754:	4b76      	ldr	r3, [pc, #472]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	061b      	lsls	r3, r3, #24
 8004762:	4973      	ldr	r1, [pc, #460]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 8004764:	4313      	orrs	r3, r2
 8004766:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004768:	e040      	b.n	80047ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d023      	beq.n	80047ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004772:	4b6f      	ldr	r3, [pc, #444]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a6e      	ldr	r2, [pc, #440]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 8004778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800477c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477e:	f7fc ff89 	bl	8001694 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004786:	f7fc ff85 	bl	8001694 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e25b      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004798:	4b65      	ldr	r3, [pc, #404]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a4:	4b62      	ldr	r3, [pc, #392]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	061b      	lsls	r3, r3, #24
 80047b2:	495f      	ldr	r1, [pc, #380]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	604b      	str	r3, [r1, #4]
 80047b8:	e018      	b.n	80047ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ba:	4b5d      	ldr	r3, [pc, #372]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a5c      	ldr	r2, [pc, #368]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 80047c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c6:	f7fc ff65 	bl	8001694 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ce:	f7fc ff61 	bl	8001694 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e237      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047e0:	4b53      	ldr	r3, [pc, #332]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f0      	bne.n	80047ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d03c      	beq.n	8004872 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01c      	beq.n	800483a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004800:	4b4b      	ldr	r3, [pc, #300]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 8004802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004806:	4a4a      	ldr	r2, [pc, #296]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004810:	f7fc ff40 	bl	8001694 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004818:	f7fc ff3c 	bl	8001694 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e212      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800482a:	4b41      	ldr	r3, [pc, #260]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 800482c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0ef      	beq.n	8004818 <HAL_RCC_OscConfig+0x3ec>
 8004838:	e01b      	b.n	8004872 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800483a:	4b3d      	ldr	r3, [pc, #244]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 800483c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004840:	4a3b      	ldr	r2, [pc, #236]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 8004842:	f023 0301 	bic.w	r3, r3, #1
 8004846:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484a:	f7fc ff23 	bl	8001694 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004852:	f7fc ff1f 	bl	8001694 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e1f5      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004864:	4b32      	ldr	r3, [pc, #200]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 8004866:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1ef      	bne.n	8004852 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 80a6 	beq.w	80049cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004880:	2300      	movs	r3, #0
 8004882:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004884:	4b2a      	ldr	r3, [pc, #168]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 8004886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10d      	bne.n	80048ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004890:	4b27      	ldr	r3, [pc, #156]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 8004892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004894:	4a26      	ldr	r2, [pc, #152]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 8004896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800489a:	6593      	str	r3, [r2, #88]	@ 0x58
 800489c:	4b24      	ldr	r3, [pc, #144]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 800489e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048a8:	2301      	movs	r3, #1
 80048aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048ac:	4b21      	ldr	r3, [pc, #132]	@ (8004934 <HAL_RCC_OscConfig+0x508>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d118      	bne.n	80048ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004934 <HAL_RCC_OscConfig+0x508>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004934 <HAL_RCC_OscConfig+0x508>)
 80048be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048c4:	f7fc fee6 	bl	8001694 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048cc:	f7fc fee2 	bl	8001694 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e1b8      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048de:	4b15      	ldr	r3, [pc, #84]	@ (8004934 <HAL_RCC_OscConfig+0x508>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d108      	bne.n	8004904 <HAL_RCC_OscConfig+0x4d8>
 80048f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 80048f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 80048fa:	f043 0301 	orr.w	r3, r3, #1
 80048fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004902:	e029      	b.n	8004958 <HAL_RCC_OscConfig+0x52c>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2b05      	cmp	r3, #5
 800490a:	d115      	bne.n	8004938 <HAL_RCC_OscConfig+0x50c>
 800490c:	4b08      	ldr	r3, [pc, #32]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 800490e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004912:	4a07      	ldr	r2, [pc, #28]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 8004914:	f043 0304 	orr.w	r3, r3, #4
 8004918:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800491c:	4b04      	ldr	r3, [pc, #16]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004922:	4a03      	ldr	r2, [pc, #12]	@ (8004930 <HAL_RCC_OscConfig+0x504>)
 8004924:	f043 0301 	orr.w	r3, r3, #1
 8004928:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800492c:	e014      	b.n	8004958 <HAL_RCC_OscConfig+0x52c>
 800492e:	bf00      	nop
 8004930:	40021000 	.word	0x40021000
 8004934:	40007000 	.word	0x40007000
 8004938:	4b9d      	ldr	r3, [pc, #628]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 800493a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800493e:	4a9c      	ldr	r2, [pc, #624]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 8004940:	f023 0301 	bic.w	r3, r3, #1
 8004944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004948:	4b99      	ldr	r3, [pc, #612]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494e:	4a98      	ldr	r2, [pc, #608]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 8004950:	f023 0304 	bic.w	r3, r3, #4
 8004954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d016      	beq.n	800498e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004960:	f7fc fe98 	bl	8001694 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004966:	e00a      	b.n	800497e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004968:	f7fc fe94 	bl	8001694 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e168      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800497e:	4b8c      	ldr	r3, [pc, #560]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 8004980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0ed      	beq.n	8004968 <HAL_RCC_OscConfig+0x53c>
 800498c:	e015      	b.n	80049ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498e:	f7fc fe81 	bl	8001694 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004994:	e00a      	b.n	80049ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004996:	f7fc fe7d 	bl	8001694 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e151      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049ac:	4b80      	ldr	r3, [pc, #512]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1ed      	bne.n	8004996 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ba:	7ffb      	ldrb	r3, [r7, #31]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d105      	bne.n	80049cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049c0:	4b7b      	ldr	r3, [pc, #492]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 80049c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c4:	4a7a      	ldr	r2, [pc, #488]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 80049c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d03c      	beq.n	8004a52 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01c      	beq.n	8004a1a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049e0:	4b73      	ldr	r3, [pc, #460]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 80049e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049e6:	4a72      	ldr	r2, [pc, #456]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 80049e8:	f043 0301 	orr.w	r3, r3, #1
 80049ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f0:	f7fc fe50 	bl	8001694 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049f8:	f7fc fe4c 	bl	8001694 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e122      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a0a:	4b69      	ldr	r3, [pc, #420]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 8004a0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0ef      	beq.n	80049f8 <HAL_RCC_OscConfig+0x5cc>
 8004a18:	e01b      	b.n	8004a52 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a1a:	4b65      	ldr	r3, [pc, #404]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 8004a1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a20:	4a63      	ldr	r2, [pc, #396]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 8004a22:	f023 0301 	bic.w	r3, r3, #1
 8004a26:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2a:	f7fc fe33 	bl	8001694 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a32:	f7fc fe2f 	bl	8001694 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e105      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a44:	4b5a      	ldr	r3, [pc, #360]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 8004a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1ef      	bne.n	8004a32 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 80f9 	beq.w	8004c4e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	f040 80cf 	bne.w	8004c04 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a66:	4b52      	ldr	r3, [pc, #328]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f003 0203 	and.w	r2, r3, #3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d12c      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a84:	3b01      	subs	r3, #1
 8004a86:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d123      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a96:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d113      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab6:	085b      	lsrs	r3, r3, #1
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d109      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aca:	085b      	lsrs	r3, r3, #1
 8004acc:	3b01      	subs	r3, #1
 8004ace:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d071      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	2b0c      	cmp	r3, #12
 8004ad8:	d068      	beq.n	8004bac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ada:	4b35      	ldr	r3, [pc, #212]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d105      	bne.n	8004af2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ae6:	4b32      	ldr	r3, [pc, #200]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e0ac      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004af6:	4b2e      	ldr	r3, [pc, #184]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a2d      	ldr	r2, [pc, #180]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 8004afc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b02:	f7fc fdc7 	bl	8001694 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b0a:	f7fc fdc3 	bl	8001694 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e099      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b1c:	4b24      	ldr	r3, [pc, #144]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1f0      	bne.n	8004b0a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b28:	4b21      	ldr	r3, [pc, #132]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	4b21      	ldr	r3, [pc, #132]	@ (8004bb4 <HAL_RCC_OscConfig+0x788>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b38:	3a01      	subs	r2, #1
 8004b3a:	0112      	lsls	r2, r2, #4
 8004b3c:	4311      	orrs	r1, r2
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b42:	0212      	lsls	r2, r2, #8
 8004b44:	4311      	orrs	r1, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b4a:	0852      	lsrs	r2, r2, #1
 8004b4c:	3a01      	subs	r2, #1
 8004b4e:	0552      	lsls	r2, r2, #21
 8004b50:	4311      	orrs	r1, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b56:	0852      	lsrs	r2, r2, #1
 8004b58:	3a01      	subs	r2, #1
 8004b5a:	0652      	lsls	r2, r2, #25
 8004b5c:	4311      	orrs	r1, r2
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b62:	06d2      	lsls	r2, r2, #27
 8004b64:	430a      	orrs	r2, r1
 8004b66:	4912      	ldr	r1, [pc, #72]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b6c:	4b10      	ldr	r3, [pc, #64]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a0f      	ldr	r2, [pc, #60]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 8004b72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b78:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 8004b7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b84:	f7fc fd86 	bl	8001694 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b8c:	f7fc fd82 	bl	8001694 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e058      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b9e:	4b04      	ldr	r3, [pc, #16]	@ (8004bb0 <HAL_RCC_OscConfig+0x784>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004baa:	e050      	b.n	8004c4e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e04f      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb8:	4b27      	ldr	r3, [pc, #156]	@ (8004c58 <HAL_RCC_OscConfig+0x82c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d144      	bne.n	8004c4e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bc4:	4b24      	ldr	r3, [pc, #144]	@ (8004c58 <HAL_RCC_OscConfig+0x82c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a23      	ldr	r2, [pc, #140]	@ (8004c58 <HAL_RCC_OscConfig+0x82c>)
 8004bca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bd0:	4b21      	ldr	r3, [pc, #132]	@ (8004c58 <HAL_RCC_OscConfig+0x82c>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	4a20      	ldr	r2, [pc, #128]	@ (8004c58 <HAL_RCC_OscConfig+0x82c>)
 8004bd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bdc:	f7fc fd5a 	bl	8001694 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be4:	f7fc fd56 	bl	8001694 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e02c      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf6:	4b18      	ldr	r3, [pc, #96]	@ (8004c58 <HAL_RCC_OscConfig+0x82c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f0      	beq.n	8004be4 <HAL_RCC_OscConfig+0x7b8>
 8004c02:	e024      	b.n	8004c4e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	2b0c      	cmp	r3, #12
 8004c08:	d01f      	beq.n	8004c4a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c0a:	4b13      	ldr	r3, [pc, #76]	@ (8004c58 <HAL_RCC_OscConfig+0x82c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a12      	ldr	r2, [pc, #72]	@ (8004c58 <HAL_RCC_OscConfig+0x82c>)
 8004c10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c16:	f7fc fd3d 	bl	8001694 <HAL_GetTick>
 8004c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c1e:	f7fc fd39 	bl	8001694 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e00f      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c30:	4b09      	ldr	r3, [pc, #36]	@ (8004c58 <HAL_RCC_OscConfig+0x82c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1f0      	bne.n	8004c1e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c3c:	4b06      	ldr	r3, [pc, #24]	@ (8004c58 <HAL_RCC_OscConfig+0x82c>)
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	4905      	ldr	r1, [pc, #20]	@ (8004c58 <HAL_RCC_OscConfig+0x82c>)
 8004c42:	4b06      	ldr	r3, [pc, #24]	@ (8004c5c <HAL_RCC_OscConfig+0x830>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	60cb      	str	r3, [r1, #12]
 8004c48:	e001      	b.n	8004c4e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e000      	b.n	8004c50 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3720      	adds	r7, #32
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	feeefffc 	.word	0xfeeefffc

08004c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0e7      	b.n	8004e44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c74:	4b75      	ldr	r3, [pc, #468]	@ (8004e4c <HAL_RCC_ClockConfig+0x1ec>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d910      	bls.n	8004ca4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c82:	4b72      	ldr	r3, [pc, #456]	@ (8004e4c <HAL_RCC_ClockConfig+0x1ec>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f023 0207 	bic.w	r2, r3, #7
 8004c8a:	4970      	ldr	r1, [pc, #448]	@ (8004e4c <HAL_RCC_ClockConfig+0x1ec>)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c92:	4b6e      	ldr	r3, [pc, #440]	@ (8004e4c <HAL_RCC_ClockConfig+0x1ec>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0cf      	b.n	8004e44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d010      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	4b66      	ldr	r3, [pc, #408]	@ (8004e50 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d908      	bls.n	8004cd2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc0:	4b63      	ldr	r3, [pc, #396]	@ (8004e50 <HAL_RCC_ClockConfig+0x1f0>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	4960      	ldr	r1, [pc, #384]	@ (8004e50 <HAL_RCC_ClockConfig+0x1f0>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d04c      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	d107      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ce6:	4b5a      	ldr	r3, [pc, #360]	@ (8004e50 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d121      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e0a6      	b.n	8004e44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d107      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cfe:	4b54      	ldr	r3, [pc, #336]	@ (8004e50 <HAL_RCC_ClockConfig+0x1f0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d115      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e09a      	b.n	8004e44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d107      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d16:	4b4e      	ldr	r3, [pc, #312]	@ (8004e50 <HAL_RCC_ClockConfig+0x1f0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d109      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e08e      	b.n	8004e44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d26:	4b4a      	ldr	r3, [pc, #296]	@ (8004e50 <HAL_RCC_ClockConfig+0x1f0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e086      	b.n	8004e44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d36:	4b46      	ldr	r3, [pc, #280]	@ (8004e50 <HAL_RCC_ClockConfig+0x1f0>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f023 0203 	bic.w	r2, r3, #3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	4943      	ldr	r1, [pc, #268]	@ (8004e50 <HAL_RCC_ClockConfig+0x1f0>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d48:	f7fc fca4 	bl	8001694 <HAL_GetTick>
 8004d4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d4e:	e00a      	b.n	8004d66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d50:	f7fc fca0 	bl	8001694 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e06e      	b.n	8004e44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d66:	4b3a      	ldr	r3, [pc, #232]	@ (8004e50 <HAL_RCC_ClockConfig+0x1f0>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 020c 	and.w	r2, r3, #12
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d1eb      	bne.n	8004d50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d010      	beq.n	8004da6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	4b31      	ldr	r3, [pc, #196]	@ (8004e50 <HAL_RCC_ClockConfig+0x1f0>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d208      	bcs.n	8004da6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d94:	4b2e      	ldr	r3, [pc, #184]	@ (8004e50 <HAL_RCC_ClockConfig+0x1f0>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	492b      	ldr	r1, [pc, #172]	@ (8004e50 <HAL_RCC_ClockConfig+0x1f0>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004da6:	4b29      	ldr	r3, [pc, #164]	@ (8004e4c <HAL_RCC_ClockConfig+0x1ec>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d210      	bcs.n	8004dd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db4:	4b25      	ldr	r3, [pc, #148]	@ (8004e4c <HAL_RCC_ClockConfig+0x1ec>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f023 0207 	bic.w	r2, r3, #7
 8004dbc:	4923      	ldr	r1, [pc, #140]	@ (8004e4c <HAL_RCC_ClockConfig+0x1ec>)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc4:	4b21      	ldr	r3, [pc, #132]	@ (8004e4c <HAL_RCC_ClockConfig+0x1ec>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d001      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e036      	b.n	8004e44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d008      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004de2:	4b1b      	ldr	r3, [pc, #108]	@ (8004e50 <HAL_RCC_ClockConfig+0x1f0>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	4918      	ldr	r1, [pc, #96]	@ (8004e50 <HAL_RCC_ClockConfig+0x1f0>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d009      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e00:	4b13      	ldr	r3, [pc, #76]	@ (8004e50 <HAL_RCC_ClockConfig+0x1f0>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	4910      	ldr	r1, [pc, #64]	@ (8004e50 <HAL_RCC_ClockConfig+0x1f0>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e14:	f000 f824 	bl	8004e60 <HAL_RCC_GetSysClockFreq>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e50 <HAL_RCC_ClockConfig+0x1f0>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	091b      	lsrs	r3, r3, #4
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	490b      	ldr	r1, [pc, #44]	@ (8004e54 <HAL_RCC_ClockConfig+0x1f4>)
 8004e26:	5ccb      	ldrb	r3, [r1, r3]
 8004e28:	f003 031f 	and.w	r3, r3, #31
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e30:	4a09      	ldr	r2, [pc, #36]	@ (8004e58 <HAL_RCC_ClockConfig+0x1f8>)
 8004e32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e34:	4b09      	ldr	r3, [pc, #36]	@ (8004e5c <HAL_RCC_ClockConfig+0x1fc>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fc fb09 	bl	8001450 <HAL_InitTick>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e42:	7afb      	ldrb	r3, [r7, #11]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40022000 	.word	0x40022000
 8004e50:	40021000 	.word	0x40021000
 8004e54:	0800a5b4 	.word	0x0800a5b4
 8004e58:	20000000 	.word	0x20000000
 8004e5c:	20000004 	.word	0x20000004

08004e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b089      	sub	sp, #36	@ 0x24
 8004e64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61fb      	str	r3, [r7, #28]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e6e:	4b3e      	ldr	r3, [pc, #248]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 030c 	and.w	r3, r3, #12
 8004e76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e78:	4b3b      	ldr	r3, [pc, #236]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <HAL_RCC_GetSysClockFreq+0x34>
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	2b0c      	cmp	r3, #12
 8004e8c:	d121      	bne.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d11e      	bne.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e94:	4b34      	ldr	r3, [pc, #208]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d107      	bne.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ea0:	4b31      	ldr	r3, [pc, #196]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ea6:	0a1b      	lsrs	r3, r3, #8
 8004ea8:	f003 030f 	and.w	r3, r3, #15
 8004eac:	61fb      	str	r3, [r7, #28]
 8004eae:	e005      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	091b      	lsrs	r3, r3, #4
 8004eb6:	f003 030f 	and.w	r3, r3, #15
 8004eba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ebc:	4a2b      	ldr	r2, [pc, #172]	@ (8004f6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ec4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10d      	bne.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ed0:	e00a      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d102      	bne.n	8004ede <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ed8:	4b25      	ldr	r3, [pc, #148]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x110>)
 8004eda:	61bb      	str	r3, [r7, #24]
 8004edc:	e004      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d101      	bne.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ee4:	4b23      	ldr	r3, [pc, #140]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ee6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2b0c      	cmp	r3, #12
 8004eec:	d134      	bne.n	8004f58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004eee:	4b1e      	ldr	r3, [pc, #120]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d003      	beq.n	8004f06 <HAL_RCC_GetSysClockFreq+0xa6>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d003      	beq.n	8004f0c <HAL_RCC_GetSysClockFreq+0xac>
 8004f04:	e005      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f06:	4b1a      	ldr	r3, [pc, #104]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f08:	617b      	str	r3, [r7, #20]
      break;
 8004f0a:	e005      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f0c:	4b19      	ldr	r3, [pc, #100]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f0e:	617b      	str	r3, [r7, #20]
      break;
 8004f10:	e002      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	617b      	str	r3, [r7, #20]
      break;
 8004f16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f18:	4b13      	ldr	r3, [pc, #76]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	091b      	lsrs	r3, r3, #4
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	3301      	adds	r3, #1
 8004f24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f26:	4b10      	ldr	r3, [pc, #64]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	0a1b      	lsrs	r3, r3, #8
 8004f2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	fb03 f202 	mul.w	r2, r3, r2
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	0e5b      	lsrs	r3, r3, #25
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	3301      	adds	r3, #1
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f58:	69bb      	ldr	r3, [r7, #24]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3724      	adds	r7, #36	@ 0x24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	0800a5cc 	.word	0x0800a5cc
 8004f70:	00f42400 	.word	0x00f42400
 8004f74:	007a1200 	.word	0x007a1200

08004f78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f7c:	4b03      	ldr	r3, [pc, #12]	@ (8004f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	20000000 	.word	0x20000000

08004f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f94:	f7ff fff0 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	4b06      	ldr	r3, [pc, #24]	@ (8004fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	0a1b      	lsrs	r3, r3, #8
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	4904      	ldr	r1, [pc, #16]	@ (8004fb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fa6:	5ccb      	ldrb	r3, [r1, r3]
 8004fa8:	f003 031f 	and.w	r3, r3, #31
 8004fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	0800a5c4 	.word	0x0800a5c4

08004fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fc0:	f7ff ffda 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	4b06      	ldr	r3, [pc, #24]	@ (8004fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	0adb      	lsrs	r3, r3, #11
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	4904      	ldr	r1, [pc, #16]	@ (8004fe4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fd2:	5ccb      	ldrb	r3, [r1, r3]
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	0800a5c4 	.word	0x0800a5c4

08004fe8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	220f      	movs	r2, #15
 8004ff6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004ff8:	4b12      	ldr	r3, [pc, #72]	@ (8005044 <HAL_RCC_GetClockConfig+0x5c>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 0203 	and.w	r2, r3, #3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005004:	4b0f      	ldr	r3, [pc, #60]	@ (8005044 <HAL_RCC_GetClockConfig+0x5c>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005010:	4b0c      	ldr	r3, [pc, #48]	@ (8005044 <HAL_RCC_GetClockConfig+0x5c>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800501c:	4b09      	ldr	r3, [pc, #36]	@ (8005044 <HAL_RCC_GetClockConfig+0x5c>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	08db      	lsrs	r3, r3, #3
 8005022:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800502a:	4b07      	ldr	r3, [pc, #28]	@ (8005048 <HAL_RCC_GetClockConfig+0x60>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0207 	and.w	r2, r3, #7
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	601a      	str	r2, [r3, #0]
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40021000 	.word	0x40021000
 8005048:	40022000 	.word	0x40022000

0800504c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005054:	2300      	movs	r3, #0
 8005056:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005058:	4b2a      	ldr	r3, [pc, #168]	@ (8005104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800505a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800505c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005064:	f7ff f97e 	bl	8004364 <HAL_PWREx_GetVoltageRange>
 8005068:	6178      	str	r0, [r7, #20]
 800506a:	e014      	b.n	8005096 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800506c:	4b25      	ldr	r3, [pc, #148]	@ (8005104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800506e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005070:	4a24      	ldr	r2, [pc, #144]	@ (8005104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005076:	6593      	str	r3, [r2, #88]	@ 0x58
 8005078:	4b22      	ldr	r3, [pc, #136]	@ (8005104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800507a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800507c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005084:	f7ff f96e 	bl	8004364 <HAL_PWREx_GetVoltageRange>
 8005088:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800508a:	4b1e      	ldr	r3, [pc, #120]	@ (8005104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800508c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800508e:	4a1d      	ldr	r2, [pc, #116]	@ (8005104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005090:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005094:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800509c:	d10b      	bne.n	80050b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b80      	cmp	r3, #128	@ 0x80
 80050a2:	d919      	bls.n	80050d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80050a8:	d902      	bls.n	80050b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050aa:	2302      	movs	r3, #2
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	e013      	b.n	80050d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050b0:	2301      	movs	r3, #1
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	e010      	b.n	80050d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b80      	cmp	r3, #128	@ 0x80
 80050ba:	d902      	bls.n	80050c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80050bc:	2303      	movs	r3, #3
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	e00a      	b.n	80050d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b80      	cmp	r3, #128	@ 0x80
 80050c6:	d102      	bne.n	80050ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050c8:	2302      	movs	r3, #2
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	e004      	b.n	80050d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b70      	cmp	r3, #112	@ 0x70
 80050d2:	d101      	bne.n	80050d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050d4:	2301      	movs	r3, #1
 80050d6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f023 0207 	bic.w	r2, r3, #7
 80050e0:	4909      	ldr	r1, [pc, #36]	@ (8005108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80050e8:	4b07      	ldr	r3, [pc, #28]	@ (8005108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d001      	beq.n	80050fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40021000 	.word	0x40021000
 8005108:	40022000 	.word	0x40022000

0800510c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005114:	2300      	movs	r3, #0
 8005116:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005118:	2300      	movs	r3, #0
 800511a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005124:	2b00      	cmp	r3, #0
 8005126:	d041      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800512c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005130:	d02a      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005132:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005136:	d824      	bhi.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005138:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800513c:	d008      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800513e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005142:	d81e      	bhi.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00a      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005148:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800514c:	d010      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800514e:	e018      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005150:	4b86      	ldr	r3, [pc, #536]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4a85      	ldr	r2, [pc, #532]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800515a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800515c:	e015      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	3304      	adds	r3, #4
 8005162:	2100      	movs	r1, #0
 8005164:	4618      	mov	r0, r3
 8005166:	f000 facd 	bl	8005704 <RCCEx_PLLSAI1_Config>
 800516a:	4603      	mov	r3, r0
 800516c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800516e:	e00c      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3320      	adds	r3, #32
 8005174:	2100      	movs	r1, #0
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fbb6 	bl	80058e8 <RCCEx_PLLSAI2_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005180:	e003      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	74fb      	strb	r3, [r7, #19]
      break;
 8005186:	e000      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800518a:	7cfb      	ldrb	r3, [r7, #19]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10b      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005190:	4b76      	ldr	r3, [pc, #472]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005196:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800519e:	4973      	ldr	r1, [pc, #460]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80051a6:	e001      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a8:	7cfb      	ldrb	r3, [r7, #19]
 80051aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d041      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051c0:	d02a      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80051c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051c6:	d824      	bhi.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051cc:	d008      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80051ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051d2:	d81e      	bhi.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80051d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051dc:	d010      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80051de:	e018      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051e0:	4b62      	ldr	r3, [pc, #392]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4a61      	ldr	r2, [pc, #388]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051ec:	e015      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3304      	adds	r3, #4
 80051f2:	2100      	movs	r1, #0
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 fa85 	bl	8005704 <RCCEx_PLLSAI1_Config>
 80051fa:	4603      	mov	r3, r0
 80051fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051fe:	e00c      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3320      	adds	r3, #32
 8005204:	2100      	movs	r1, #0
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fb6e 	bl	80058e8 <RCCEx_PLLSAI2_Config>
 800520c:	4603      	mov	r3, r0
 800520e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005210:	e003      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	74fb      	strb	r3, [r7, #19]
      break;
 8005216:	e000      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800521a:	7cfb      	ldrb	r3, [r7, #19]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005220:	4b52      	ldr	r3, [pc, #328]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005226:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800522e:	494f      	ldr	r1, [pc, #316]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005236:	e001      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005238:	7cfb      	ldrb	r3, [r7, #19]
 800523a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80a0 	beq.w	800538a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800524a:	2300      	movs	r3, #0
 800524c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800524e:	4b47      	ldr	r3, [pc, #284]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800525a:	2301      	movs	r3, #1
 800525c:	e000      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800525e:	2300      	movs	r3, #0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00d      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005264:	4b41      	ldr	r3, [pc, #260]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005268:	4a40      	ldr	r2, [pc, #256]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800526a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800526e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005270:	4b3e      	ldr	r3, [pc, #248]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005278:	60bb      	str	r3, [r7, #8]
 800527a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800527c:	2301      	movs	r3, #1
 800527e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005280:	4b3b      	ldr	r3, [pc, #236]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a3a      	ldr	r2, [pc, #232]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800528a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800528c:	f7fc fa02 	bl	8001694 <HAL_GetTick>
 8005290:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005292:	e009      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005294:	f7fc f9fe 	bl	8001694 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d902      	bls.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	74fb      	strb	r3, [r7, #19]
        break;
 80052a6:	e005      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052a8:	4b31      	ldr	r3, [pc, #196]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d0ef      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80052b4:	7cfb      	ldrb	r3, [r7, #19]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d15c      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052ba:	4b2c      	ldr	r3, [pc, #176]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01f      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d019      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052d8:	4b24      	ldr	r3, [pc, #144]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052e4:	4b21      	ldr	r3, [pc, #132]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ea:	4a20      	ldr	r2, [pc, #128]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052f4:	4b1d      	ldr	r3, [pc, #116]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fa:	4a1c      	ldr	r2, [pc, #112]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005304:	4a19      	ldr	r2, [pc, #100]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d016      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005316:	f7fc f9bd 	bl	8001694 <HAL_GetTick>
 800531a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800531c:	e00b      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800531e:	f7fc f9b9 	bl	8001694 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	f241 3288 	movw	r2, #5000	@ 0x1388
 800532c:	4293      	cmp	r3, r2
 800532e:	d902      	bls.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	74fb      	strb	r3, [r7, #19]
            break;
 8005334:	e006      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005336:	4b0d      	ldr	r3, [pc, #52]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0ec      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005344:	7cfb      	ldrb	r3, [r7, #19]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10c      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800534a:	4b08      	ldr	r3, [pc, #32]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800534c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005350:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800535a:	4904      	ldr	r1, [pc, #16]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005362:	e009      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005364:	7cfb      	ldrb	r3, [r7, #19]
 8005366:	74bb      	strb	r3, [r7, #18]
 8005368:	e006      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800536a:	bf00      	nop
 800536c:	40021000 	.word	0x40021000
 8005370:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005374:	7cfb      	ldrb	r3, [r7, #19]
 8005376:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005378:	7c7b      	ldrb	r3, [r7, #17]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d105      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800537e:	4ba6      	ldr	r3, [pc, #664]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005382:	4aa5      	ldr	r2, [pc, #660]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005384:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005388:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005396:	4ba0      	ldr	r3, [pc, #640]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539c:	f023 0203 	bic.w	r2, r3, #3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a4:	499c      	ldr	r1, [pc, #624]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053b8:	4b97      	ldr	r3, [pc, #604]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053be:	f023 020c 	bic.w	r2, r3, #12
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c6:	4994      	ldr	r1, [pc, #592]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053da:	4b8f      	ldr	r3, [pc, #572]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e8:	498b      	ldr	r1, [pc, #556]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053fc:	4b86      	ldr	r3, [pc, #536]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005402:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800540a:	4983      	ldr	r1, [pc, #524]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0310 	and.w	r3, r3, #16
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800541e:	4b7e      	ldr	r3, [pc, #504]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005424:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800542c:	497a      	ldr	r1, [pc, #488]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005440:	4b75      	ldr	r3, [pc, #468]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005446:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800544e:	4972      	ldr	r1, [pc, #456]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005462:	4b6d      	ldr	r3, [pc, #436]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005468:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005470:	4969      	ldr	r1, [pc, #420]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005484:	4b64      	ldr	r3, [pc, #400]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800548a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005492:	4961      	ldr	r1, [pc, #388]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054a6:	4b5c      	ldr	r3, [pc, #368]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054b4:	4958      	ldr	r1, [pc, #352]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054c8:	4b53      	ldr	r3, [pc, #332]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d6:	4950      	ldr	r1, [pc, #320]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054ea:	4b4b      	ldr	r3, [pc, #300]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f8:	4947      	ldr	r1, [pc, #284]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00a      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800550c:	4b42      	ldr	r3, [pc, #264]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800550e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005512:	f023 0203 	bic.w	r2, r3, #3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800551a:	493f      	ldr	r1, [pc, #252]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800551c:	4313      	orrs	r3, r2
 800551e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d028      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800552e:	4b3a      	ldr	r3, [pc, #232]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005534:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553c:	4936      	ldr	r1, [pc, #216]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005548:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800554c:	d106      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800554e:	4b32      	ldr	r3, [pc, #200]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	4a31      	ldr	r2, [pc, #196]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005554:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005558:	60d3      	str	r3, [r2, #12]
 800555a:	e011      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005560:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005564:	d10c      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3304      	adds	r3, #4
 800556a:	2101      	movs	r1, #1
 800556c:	4618      	mov	r0, r3
 800556e:	f000 f8c9 	bl	8005704 <RCCEx_PLLSAI1_Config>
 8005572:	4603      	mov	r3, r0
 8005574:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005576:	7cfb      	ldrb	r3, [r7, #19]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800557c:	7cfb      	ldrb	r3, [r7, #19]
 800557e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d028      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800558c:	4b22      	ldr	r3, [pc, #136]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800558e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005592:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800559a:	491f      	ldr	r1, [pc, #124]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055aa:	d106      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	4a19      	ldr	r2, [pc, #100]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055b6:	60d3      	str	r3, [r2, #12]
 80055b8:	e011      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055c2:	d10c      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3304      	adds	r3, #4
 80055c8:	2101      	movs	r1, #1
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 f89a 	bl	8005704 <RCCEx_PLLSAI1_Config>
 80055d0:	4603      	mov	r3, r0
 80055d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055d4:	7cfb      	ldrb	r3, [r7, #19]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80055da:	7cfb      	ldrb	r3, [r7, #19]
 80055dc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d02a      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055f8:	4907      	ldr	r1, [pc, #28]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005604:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005608:	d108      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800560a:	4b03      	ldr	r3, [pc, #12]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	4a02      	ldr	r2, [pc, #8]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005610:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005614:	60d3      	str	r3, [r2, #12]
 8005616:	e013      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005618:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005620:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005624:	d10c      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3304      	adds	r3, #4
 800562a:	2101      	movs	r1, #1
 800562c:	4618      	mov	r0, r3
 800562e:	f000 f869 	bl	8005704 <RCCEx_PLLSAI1_Config>
 8005632:	4603      	mov	r3, r0
 8005634:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005636:	7cfb      	ldrb	r3, [r7, #19]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800563c:	7cfb      	ldrb	r3, [r7, #19]
 800563e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d02f      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800564c:	4b2c      	ldr	r3, [pc, #176]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800564e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005652:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800565a:	4929      	ldr	r1, [pc, #164]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005666:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800566a:	d10d      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3304      	adds	r3, #4
 8005670:	2102      	movs	r1, #2
 8005672:	4618      	mov	r0, r3
 8005674:	f000 f846 	bl	8005704 <RCCEx_PLLSAI1_Config>
 8005678:	4603      	mov	r3, r0
 800567a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800567c:	7cfb      	ldrb	r3, [r7, #19]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d014      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005682:	7cfb      	ldrb	r3, [r7, #19]
 8005684:	74bb      	strb	r3, [r7, #18]
 8005686:	e011      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800568c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005690:	d10c      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3320      	adds	r3, #32
 8005696:	2102      	movs	r1, #2
 8005698:	4618      	mov	r0, r3
 800569a:	f000 f925 	bl	80058e8 <RCCEx_PLLSAI2_Config>
 800569e:	4603      	mov	r3, r0
 80056a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056a2:	7cfb      	ldrb	r3, [r7, #19]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80056a8:	7cfb      	ldrb	r3, [r7, #19]
 80056aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00b      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056b8:	4b11      	ldr	r3, [pc, #68]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80056ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056be:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056c8:	490d      	ldr	r1, [pc, #52]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00b      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056dc:	4b08      	ldr	r3, [pc, #32]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056ec:	4904      	ldr	r1, [pc, #16]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80056f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	40021000 	.word	0x40021000

08005704 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005712:	4b74      	ldr	r3, [pc, #464]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d018      	beq.n	8005750 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800571e:	4b71      	ldr	r3, [pc, #452]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f003 0203 	and.w	r2, r3, #3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d10d      	bne.n	800574a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
       ||
 8005732:	2b00      	cmp	r3, #0
 8005734:	d009      	beq.n	800574a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005736:	4b6b      	ldr	r3, [pc, #428]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	091b      	lsrs	r3, r3, #4
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
       ||
 8005746:	429a      	cmp	r2, r3
 8005748:	d047      	beq.n	80057da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	73fb      	strb	r3, [r7, #15]
 800574e:	e044      	b.n	80057da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b03      	cmp	r3, #3
 8005756:	d018      	beq.n	800578a <RCCEx_PLLSAI1_Config+0x86>
 8005758:	2b03      	cmp	r3, #3
 800575a:	d825      	bhi.n	80057a8 <RCCEx_PLLSAI1_Config+0xa4>
 800575c:	2b01      	cmp	r3, #1
 800575e:	d002      	beq.n	8005766 <RCCEx_PLLSAI1_Config+0x62>
 8005760:	2b02      	cmp	r3, #2
 8005762:	d009      	beq.n	8005778 <RCCEx_PLLSAI1_Config+0x74>
 8005764:	e020      	b.n	80057a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005766:	4b5f      	ldr	r3, [pc, #380]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d11d      	bne.n	80057ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005776:	e01a      	b.n	80057ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005778:	4b5a      	ldr	r3, [pc, #360]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005780:	2b00      	cmp	r3, #0
 8005782:	d116      	bne.n	80057b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005788:	e013      	b.n	80057b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800578a:	4b56      	ldr	r3, [pc, #344]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10f      	bne.n	80057b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005796:	4b53      	ldr	r3, [pc, #332]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d109      	bne.n	80057b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057a6:	e006      	b.n	80057b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	73fb      	strb	r3, [r7, #15]
      break;
 80057ac:	e004      	b.n	80057b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057ae:	bf00      	nop
 80057b0:	e002      	b.n	80057b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057b2:	bf00      	nop
 80057b4:	e000      	b.n	80057b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10d      	bne.n	80057da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057be:	4b49      	ldr	r3, [pc, #292]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6819      	ldr	r1, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	3b01      	subs	r3, #1
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	430b      	orrs	r3, r1
 80057d4:	4943      	ldr	r1, [pc, #268]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057da:	7bfb      	ldrb	r3, [r7, #15]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d17c      	bne.n	80058da <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80057e0:	4b40      	ldr	r3, [pc, #256]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a3f      	ldr	r2, [pc, #252]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80057ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ec:	f7fb ff52 	bl	8001694 <HAL_GetTick>
 80057f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057f2:	e009      	b.n	8005808 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057f4:	f7fb ff4e 	bl	8001694 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d902      	bls.n	8005808 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	73fb      	strb	r3, [r7, #15]
        break;
 8005806:	e005      	b.n	8005814 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005808:	4b36      	ldr	r3, [pc, #216]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1ef      	bne.n	80057f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d15f      	bne.n	80058da <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d110      	bne.n	8005842 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005820:	4b30      	ldr	r3, [pc, #192]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005828:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6892      	ldr	r2, [r2, #8]
 8005830:	0211      	lsls	r1, r2, #8
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	68d2      	ldr	r2, [r2, #12]
 8005836:	06d2      	lsls	r2, r2, #27
 8005838:	430a      	orrs	r2, r1
 800583a:	492a      	ldr	r1, [pc, #168]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800583c:	4313      	orrs	r3, r2
 800583e:	610b      	str	r3, [r1, #16]
 8005840:	e027      	b.n	8005892 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d112      	bne.n	800586e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005848:	4b26      	ldr	r3, [pc, #152]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005850:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6892      	ldr	r2, [r2, #8]
 8005858:	0211      	lsls	r1, r2, #8
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6912      	ldr	r2, [r2, #16]
 800585e:	0852      	lsrs	r2, r2, #1
 8005860:	3a01      	subs	r2, #1
 8005862:	0552      	lsls	r2, r2, #21
 8005864:	430a      	orrs	r2, r1
 8005866:	491f      	ldr	r1, [pc, #124]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005868:	4313      	orrs	r3, r2
 800586a:	610b      	str	r3, [r1, #16]
 800586c:	e011      	b.n	8005892 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800586e:	4b1d      	ldr	r3, [pc, #116]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005876:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6892      	ldr	r2, [r2, #8]
 800587e:	0211      	lsls	r1, r2, #8
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6952      	ldr	r2, [r2, #20]
 8005884:	0852      	lsrs	r2, r2, #1
 8005886:	3a01      	subs	r2, #1
 8005888:	0652      	lsls	r2, r2, #25
 800588a:	430a      	orrs	r2, r1
 800588c:	4915      	ldr	r1, [pc, #84]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800588e:	4313      	orrs	r3, r2
 8005890:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005892:	4b14      	ldr	r3, [pc, #80]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a13      	ldr	r2, [pc, #76]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005898:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800589c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800589e:	f7fb fef9 	bl	8001694 <HAL_GetTick>
 80058a2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058a4:	e009      	b.n	80058ba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058a6:	f7fb fef5 	bl	8001694 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d902      	bls.n	80058ba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	73fb      	strb	r3, [r7, #15]
          break;
 80058b8:	e005      	b.n	80058c6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058ba:	4b0a      	ldr	r3, [pc, #40]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0ef      	beq.n	80058a6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d106      	bne.n	80058da <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80058cc:	4b05      	ldr	r3, [pc, #20]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058ce:	691a      	ldr	r2, [r3, #16]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	4903      	ldr	r1, [pc, #12]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80058da:	7bfb      	ldrb	r3, [r7, #15]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	40021000 	.word	0x40021000

080058e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058f6:	4b69      	ldr	r3, [pc, #420]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d018      	beq.n	8005934 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005902:	4b66      	ldr	r3, [pc, #408]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	f003 0203 	and.w	r2, r3, #3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d10d      	bne.n	800592e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
       ||
 8005916:	2b00      	cmp	r3, #0
 8005918:	d009      	beq.n	800592e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800591a:	4b60      	ldr	r3, [pc, #384]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	091b      	lsrs	r3, r3, #4
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	1c5a      	adds	r2, r3, #1
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
       ||
 800592a:	429a      	cmp	r2, r3
 800592c:	d047      	beq.n	80059be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	73fb      	strb	r3, [r7, #15]
 8005932:	e044      	b.n	80059be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b03      	cmp	r3, #3
 800593a:	d018      	beq.n	800596e <RCCEx_PLLSAI2_Config+0x86>
 800593c:	2b03      	cmp	r3, #3
 800593e:	d825      	bhi.n	800598c <RCCEx_PLLSAI2_Config+0xa4>
 8005940:	2b01      	cmp	r3, #1
 8005942:	d002      	beq.n	800594a <RCCEx_PLLSAI2_Config+0x62>
 8005944:	2b02      	cmp	r3, #2
 8005946:	d009      	beq.n	800595c <RCCEx_PLLSAI2_Config+0x74>
 8005948:	e020      	b.n	800598c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800594a:	4b54      	ldr	r3, [pc, #336]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d11d      	bne.n	8005992 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800595a:	e01a      	b.n	8005992 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800595c:	4b4f      	ldr	r3, [pc, #316]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005964:	2b00      	cmp	r3, #0
 8005966:	d116      	bne.n	8005996 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800596c:	e013      	b.n	8005996 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800596e:	4b4b      	ldr	r3, [pc, #300]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10f      	bne.n	800599a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800597a:	4b48      	ldr	r3, [pc, #288]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800598a:	e006      	b.n	800599a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	73fb      	strb	r3, [r7, #15]
      break;
 8005990:	e004      	b.n	800599c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005992:	bf00      	nop
 8005994:	e002      	b.n	800599c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005996:	bf00      	nop
 8005998:	e000      	b.n	800599c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800599a:	bf00      	nop
    }

    if(status == HAL_OK)
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10d      	bne.n	80059be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059a2:	4b3e      	ldr	r3, [pc, #248]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6819      	ldr	r1, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	430b      	orrs	r3, r1
 80059b8:	4938      	ldr	r1, [pc, #224]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d166      	bne.n	8005a92 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80059c4:	4b35      	ldr	r3, [pc, #212]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a34      	ldr	r2, [pc, #208]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 80059ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059d0:	f7fb fe60 	bl	8001694 <HAL_GetTick>
 80059d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059d6:	e009      	b.n	80059ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059d8:	f7fb fe5c 	bl	8001694 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d902      	bls.n	80059ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	73fb      	strb	r3, [r7, #15]
        break;
 80059ea:	e005      	b.n	80059f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059ec:	4b2b      	ldr	r3, [pc, #172]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1ef      	bne.n	80059d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d149      	bne.n	8005a92 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d110      	bne.n	8005a26 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a04:	4b25      	ldr	r3, [pc, #148]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005a0c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	6892      	ldr	r2, [r2, #8]
 8005a14:	0211      	lsls	r1, r2, #8
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	68d2      	ldr	r2, [r2, #12]
 8005a1a:	06d2      	lsls	r2, r2, #27
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	491f      	ldr	r1, [pc, #124]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	614b      	str	r3, [r1, #20]
 8005a24:	e011      	b.n	8005a4a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a26:	4b1d      	ldr	r3, [pc, #116]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005a2e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6892      	ldr	r2, [r2, #8]
 8005a36:	0211      	lsls	r1, r2, #8
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6912      	ldr	r2, [r2, #16]
 8005a3c:	0852      	lsrs	r2, r2, #1
 8005a3e:	3a01      	subs	r2, #1
 8005a40:	0652      	lsls	r2, r2, #25
 8005a42:	430a      	orrs	r2, r1
 8005a44:	4915      	ldr	r1, [pc, #84]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a4a:	4b14      	ldr	r3, [pc, #80]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a13      	ldr	r2, [pc, #76]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a54:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a56:	f7fb fe1d 	bl	8001694 <HAL_GetTick>
 8005a5a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a5c:	e009      	b.n	8005a72 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a5e:	f7fb fe19 	bl	8001694 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d902      	bls.n	8005a72 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	73fb      	strb	r3, [r7, #15]
          break;
 8005a70:	e005      	b.n	8005a7e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a72:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0ef      	beq.n	8005a5e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d106      	bne.n	8005a92 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a84:	4b05      	ldr	r3, [pc, #20]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a86:	695a      	ldr	r2, [r3, #20]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	4903      	ldr	r1, [pc, #12]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40021000 	.word	0x40021000

08005aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e049      	b.n	8005b46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f841 	bl	8005b4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3304      	adds	r3, #4
 8005adc:	4619      	mov	r1, r3
 8005ade:	4610      	mov	r0, r2
 8005ae0:	f000 f9e0 	bl	8005ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d001      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e04f      	b.n	8005c1c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a23      	ldr	r2, [pc, #140]	@ (8005c28 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d01d      	beq.n	8005bda <HAL_TIM_Base_Start_IT+0x76>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ba6:	d018      	beq.n	8005bda <HAL_TIM_Base_Start_IT+0x76>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a1f      	ldr	r2, [pc, #124]	@ (8005c2c <HAL_TIM_Base_Start_IT+0xc8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d013      	beq.n	8005bda <HAL_TIM_Base_Start_IT+0x76>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8005c30 <HAL_TIM_Base_Start_IT+0xcc>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00e      	beq.n	8005bda <HAL_TIM_Base_Start_IT+0x76>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a1c      	ldr	r2, [pc, #112]	@ (8005c34 <HAL_TIM_Base_Start_IT+0xd0>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d009      	beq.n	8005bda <HAL_TIM_Base_Start_IT+0x76>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a1b      	ldr	r2, [pc, #108]	@ (8005c38 <HAL_TIM_Base_Start_IT+0xd4>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d004      	beq.n	8005bda <HAL_TIM_Base_Start_IT+0x76>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a19      	ldr	r2, [pc, #100]	@ (8005c3c <HAL_TIM_Base_Start_IT+0xd8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d115      	bne.n	8005c06 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	4b17      	ldr	r3, [pc, #92]	@ (8005c40 <HAL_TIM_Base_Start_IT+0xdc>)
 8005be2:	4013      	ands	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b06      	cmp	r3, #6
 8005bea:	d015      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0xb4>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bf2:	d011      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0201 	orr.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c04:	e008      	b.n	8005c18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0201 	orr.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	e000      	b.n	8005c1a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	40012c00 	.word	0x40012c00
 8005c2c:	40000400 	.word	0x40000400
 8005c30:	40000800 	.word	0x40000800
 8005c34:	40000c00 	.word	0x40000c00
 8005c38:	40013400 	.word	0x40013400
 8005c3c:	40014000 	.word	0x40014000
 8005c40:	00010007 	.word	0x00010007

08005c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d020      	beq.n	8005ca8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01b      	beq.n	8005ca8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0202 	mvn.w	r2, #2
 8005c78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f8e9 	bl	8005e66 <HAL_TIM_IC_CaptureCallback>
 8005c94:	e005      	b.n	8005ca2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f8db 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f8ec 	bl	8005e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d020      	beq.n	8005cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01b      	beq.n	8005cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f06f 0204 	mvn.w	r2, #4
 8005cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f8c3 	bl	8005e66 <HAL_TIM_IC_CaptureCallback>
 8005ce0:	e005      	b.n	8005cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f8b5 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f8c6 	bl	8005e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d020      	beq.n	8005d40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f003 0308 	and.w	r3, r3, #8
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d01b      	beq.n	8005d40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f06f 0208 	mvn.w	r2, #8
 8005d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2204      	movs	r2, #4
 8005d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f89d 	bl	8005e66 <HAL_TIM_IC_CaptureCallback>
 8005d2c:	e005      	b.n	8005d3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f88f 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f8a0 	bl	8005e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f003 0310 	and.w	r3, r3, #16
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d020      	beq.n	8005d8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f003 0310 	and.w	r3, r3, #16
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d01b      	beq.n	8005d8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f06f 0210 	mvn.w	r2, #16
 8005d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2208      	movs	r2, #8
 8005d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f877 	bl	8005e66 <HAL_TIM_IC_CaptureCallback>
 8005d78:	e005      	b.n	8005d86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f869 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 f87a 	bl	8005e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00c      	beq.n	8005db0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d007      	beq.n	8005db0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f06f 0201 	mvn.w	r2, #1
 8005da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fb f8d8 	bl	8000f60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d104      	bne.n	8005dc4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00c      	beq.n	8005dde <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d007      	beq.n	8005dde <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f913 	bl	8006004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00c      	beq.n	8005e02 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d007      	beq.n	8005e02 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f90b 	bl	8006018 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00c      	beq.n	8005e26 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f834 	bl	8005e8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f003 0320 	and.w	r3, r3, #32
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00c      	beq.n	8005e4a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d007      	beq.n	8005e4a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f06f 0220 	mvn.w	r2, #32
 8005e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f8d3 	bl	8005ff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e4a:	bf00      	nop
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
	...

08005ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a46      	ldr	r2, [pc, #280]	@ (8005fd0 <TIM_Base_SetConfig+0x12c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d013      	beq.n	8005ee4 <TIM_Base_SetConfig+0x40>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec2:	d00f      	beq.n	8005ee4 <TIM_Base_SetConfig+0x40>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a43      	ldr	r2, [pc, #268]	@ (8005fd4 <TIM_Base_SetConfig+0x130>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00b      	beq.n	8005ee4 <TIM_Base_SetConfig+0x40>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a42      	ldr	r2, [pc, #264]	@ (8005fd8 <TIM_Base_SetConfig+0x134>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d007      	beq.n	8005ee4 <TIM_Base_SetConfig+0x40>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a41      	ldr	r2, [pc, #260]	@ (8005fdc <TIM_Base_SetConfig+0x138>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d003      	beq.n	8005ee4 <TIM_Base_SetConfig+0x40>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a40      	ldr	r2, [pc, #256]	@ (8005fe0 <TIM_Base_SetConfig+0x13c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d108      	bne.n	8005ef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a35      	ldr	r2, [pc, #212]	@ (8005fd0 <TIM_Base_SetConfig+0x12c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d01f      	beq.n	8005f3e <TIM_Base_SetConfig+0x9a>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f04:	d01b      	beq.n	8005f3e <TIM_Base_SetConfig+0x9a>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a32      	ldr	r2, [pc, #200]	@ (8005fd4 <TIM_Base_SetConfig+0x130>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d017      	beq.n	8005f3e <TIM_Base_SetConfig+0x9a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a31      	ldr	r2, [pc, #196]	@ (8005fd8 <TIM_Base_SetConfig+0x134>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d013      	beq.n	8005f3e <TIM_Base_SetConfig+0x9a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a30      	ldr	r2, [pc, #192]	@ (8005fdc <TIM_Base_SetConfig+0x138>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00f      	beq.n	8005f3e <TIM_Base_SetConfig+0x9a>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a2f      	ldr	r2, [pc, #188]	@ (8005fe0 <TIM_Base_SetConfig+0x13c>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00b      	beq.n	8005f3e <TIM_Base_SetConfig+0x9a>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a2e      	ldr	r2, [pc, #184]	@ (8005fe4 <TIM_Base_SetConfig+0x140>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d007      	beq.n	8005f3e <TIM_Base_SetConfig+0x9a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a2d      	ldr	r2, [pc, #180]	@ (8005fe8 <TIM_Base_SetConfig+0x144>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d003      	beq.n	8005f3e <TIM_Base_SetConfig+0x9a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a2c      	ldr	r2, [pc, #176]	@ (8005fec <TIM_Base_SetConfig+0x148>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d108      	bne.n	8005f50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a16      	ldr	r2, [pc, #88]	@ (8005fd0 <TIM_Base_SetConfig+0x12c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d00f      	beq.n	8005f9c <TIM_Base_SetConfig+0xf8>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a18      	ldr	r2, [pc, #96]	@ (8005fe0 <TIM_Base_SetConfig+0x13c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00b      	beq.n	8005f9c <TIM_Base_SetConfig+0xf8>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a17      	ldr	r2, [pc, #92]	@ (8005fe4 <TIM_Base_SetConfig+0x140>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d007      	beq.n	8005f9c <TIM_Base_SetConfig+0xf8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a16      	ldr	r2, [pc, #88]	@ (8005fe8 <TIM_Base_SetConfig+0x144>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d003      	beq.n	8005f9c <TIM_Base_SetConfig+0xf8>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a15      	ldr	r2, [pc, #84]	@ (8005fec <TIM_Base_SetConfig+0x148>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d103      	bne.n	8005fa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d105      	bne.n	8005fc2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f023 0201 	bic.w	r2, r3, #1
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	611a      	str	r2, [r3, #16]
  }
}
 8005fc2:	bf00      	nop
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	40012c00 	.word	0x40012c00
 8005fd4:	40000400 	.word	0x40000400
 8005fd8:	40000800 	.word	0x40000800
 8005fdc:	40000c00 	.word	0x40000c00
 8005fe0:	40013400 	.word	0x40013400
 8005fe4:	40014000 	.word	0x40014000
 8005fe8:	40014400 	.word	0x40014400
 8005fec:	40014800 	.word	0x40014800

08005ff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e040      	b.n	80060c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006042:	2b00      	cmp	r3, #0
 8006044:	d106      	bne.n	8006054 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7fb f998 	bl	8001384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2224      	movs	r2, #36	@ 0x24
 8006058:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0201 	bic.w	r2, r2, #1
 8006068:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fe52 	bl	8006d1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fb97 	bl	80067ac <UART_SetConfig>
 800607e:	4603      	mov	r3, r0
 8006080:	2b01      	cmp	r3, #1
 8006082:	d101      	bne.n	8006088 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e01b      	b.n	80060c0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006096:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 0201 	orr.w	r2, r2, #1
 80060b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 fed1 	bl	8006e60 <UART_CheckIdleState>
 80060be:	4603      	mov	r3, r0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b08a      	sub	sp, #40	@ 0x28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	4613      	mov	r3, r2
 80060d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060dc:	2b20      	cmp	r3, #32
 80060de:	d137      	bne.n	8006150 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <HAL_UART_Receive_IT+0x24>
 80060e6:	88fb      	ldrh	r3, [r7, #6]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e030      	b.n	8006152 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a18      	ldr	r2, [pc, #96]	@ (800615c <HAL_UART_Receive_IT+0x94>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d01f      	beq.n	8006140 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d018      	beq.n	8006140 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	613b      	str	r3, [r7, #16]
   return(result);
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006122:	627b      	str	r3, [r7, #36]	@ 0x24
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612c:	623b      	str	r3, [r7, #32]
 800612e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	69f9      	ldr	r1, [r7, #28]
 8006132:	6a3a      	ldr	r2, [r7, #32]
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	61bb      	str	r3, [r7, #24]
   return(result);
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e6      	bne.n	800610e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006140:	88fb      	ldrh	r3, [r7, #6]
 8006142:	461a      	mov	r2, r3
 8006144:	68b9      	ldr	r1, [r7, #8]
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 ffa0 	bl	800708c <UART_Start_Receive_IT>
 800614c:	4603      	mov	r3, r0
 800614e:	e000      	b.n	8006152 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006150:	2302      	movs	r3, #2
  }
}
 8006152:	4618      	mov	r0, r3
 8006154:	3728      	adds	r7, #40	@ 0x28
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	40008000 	.word	0x40008000

08006160 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b0ba      	sub	sp, #232	@ 0xe8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006186:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800618a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800618e:	4013      	ands	r3, r2
 8006190:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006194:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006198:	2b00      	cmp	r3, #0
 800619a:	d115      	bne.n	80061c8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800619c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061a0:	f003 0320 	and.w	r3, r3, #32
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00f      	beq.n	80061c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d009      	beq.n	80061c8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 82ca 	beq.w	8006752 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	4798      	blx	r3
      }
      return;
 80061c6:	e2c4      	b.n	8006752 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80061c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 8117 	beq.w	8006400 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80061d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d106      	bne.n	80061ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80061de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80061e2:	4b85      	ldr	r3, [pc, #532]	@ (80063f8 <HAL_UART_IRQHandler+0x298>)
 80061e4:	4013      	ands	r3, r2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 810a 	beq.w	8006400 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d011      	beq.n	800621c <HAL_UART_IRQHandler+0xbc>
 80061f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00b      	beq.n	800621c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2201      	movs	r2, #1
 800620a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006212:	f043 0201 	orr.w	r2, r3, #1
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800621c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d011      	beq.n	800624c <HAL_UART_IRQHandler+0xec>
 8006228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00b      	beq.n	800624c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2202      	movs	r2, #2
 800623a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006242:	f043 0204 	orr.w	r2, r3, #4
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800624c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b00      	cmp	r3, #0
 8006256:	d011      	beq.n	800627c <HAL_UART_IRQHandler+0x11c>
 8006258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00b      	beq.n	800627c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2204      	movs	r2, #4
 800626a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006272:	f043 0202 	orr.w	r2, r3, #2
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800627c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006280:	f003 0308 	and.w	r3, r3, #8
 8006284:	2b00      	cmp	r3, #0
 8006286:	d017      	beq.n	80062b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800628c:	f003 0320 	and.w	r3, r3, #32
 8006290:	2b00      	cmp	r3, #0
 8006292:	d105      	bne.n	80062a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006298:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00b      	beq.n	80062b8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2208      	movs	r2, #8
 80062a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062ae:	f043 0208 	orr.w	r2, r3, #8
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80062b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d012      	beq.n	80062ea <HAL_UART_IRQHandler+0x18a>
 80062c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00c      	beq.n	80062ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80062d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062e0:	f043 0220 	orr.w	r2, r3, #32
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 8230 	beq.w	8006756 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80062f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062fa:	f003 0320 	and.w	r3, r3, #32
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00d      	beq.n	800631e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b00      	cmp	r3, #0
 800630c:	d007      	beq.n	800631e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006324:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006332:	2b40      	cmp	r3, #64	@ 0x40
 8006334:	d005      	beq.n	8006342 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800633a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800633e:	2b00      	cmp	r3, #0
 8006340:	d04f      	beq.n	80063e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 ff68 	bl	8007218 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006352:	2b40      	cmp	r3, #64	@ 0x40
 8006354:	d141      	bne.n	80063da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3308      	adds	r3, #8
 800635c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006360:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800636c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006374:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3308      	adds	r3, #8
 800637e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006382:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006386:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800638e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800639a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1d9      	bne.n	8006356 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d013      	beq.n	80063d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063ae:	4a13      	ldr	r2, [pc, #76]	@ (80063fc <HAL_UART_IRQHandler+0x29c>)
 80063b0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fc feb4 	bl	8003124 <HAL_DMA_Abort_IT>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d017      	beq.n	80063f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80063cc:	4610      	mov	r0, r2
 80063ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d0:	e00f      	b.n	80063f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f9d4 	bl	8006780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d8:	e00b      	b.n	80063f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f9d0 	bl	8006780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e0:	e007      	b.n	80063f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f9cc 	bl	8006780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80063f0:	e1b1      	b.n	8006756 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f2:	bf00      	nop
    return;
 80063f4:	e1af      	b.n	8006756 <HAL_UART_IRQHandler+0x5f6>
 80063f6:	bf00      	nop
 80063f8:	04000120 	.word	0x04000120
 80063fc:	080072e1 	.word	0x080072e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006404:	2b01      	cmp	r3, #1
 8006406:	f040 816a 	bne.w	80066de <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800640a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800640e:	f003 0310 	and.w	r3, r3, #16
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 8163 	beq.w	80066de <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800641c:	f003 0310 	and.w	r3, r3, #16
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 815c 	beq.w	80066de <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2210      	movs	r2, #16
 800642c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006438:	2b40      	cmp	r3, #64	@ 0x40
 800643a:	f040 80d4 	bne.w	80065e6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800644a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800644e:	2b00      	cmp	r3, #0
 8006450:	f000 80ad 	beq.w	80065ae <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800645a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800645e:	429a      	cmp	r2, r3
 8006460:	f080 80a5 	bcs.w	80065ae <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800646a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0320 	and.w	r3, r3, #32
 800647a:	2b00      	cmp	r3, #0
 800647c:	f040 8086 	bne.w	800658c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006494:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006498:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800649c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	461a      	mov	r2, r3
 80064a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80064ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80064b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80064ba:	e841 2300 	strex	r3, r2, [r1]
 80064be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80064c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1da      	bne.n	8006480 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3308      	adds	r3, #8
 80064d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80064da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064dc:	f023 0301 	bic.w	r3, r3, #1
 80064e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3308      	adds	r3, #8
 80064ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80064ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80064f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80064f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006500:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e1      	bne.n	80064ca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3308      	adds	r3, #8
 800650c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006516:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006518:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800651c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3308      	adds	r3, #8
 8006526:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800652a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800652c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006530:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006538:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e3      	bne.n	8006506 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2220      	movs	r2, #32
 8006542:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800655a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800655c:	f023 0310 	bic.w	r3, r3, #16
 8006560:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800656e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006570:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006572:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006574:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006576:	e841 2300 	strex	r3, r2, [r1]
 800657a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800657c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1e4      	bne.n	800654c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006586:	4618      	mov	r0, r3
 8006588:	f7fc fd8e 	bl	80030a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800659e:	b29b      	uxth	r3, r3
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f8f4 	bl	8006794 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80065ac:	e0d5      	b.n	800675a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80065b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065b8:	429a      	cmp	r2, r3
 80065ba:	f040 80ce 	bne.w	800675a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	f040 80c5 	bne.w	800675a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80065dc:	4619      	mov	r1, r3
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f8d8 	bl	8006794 <HAL_UARTEx_RxEventCallback>
      return;
 80065e4:	e0b9      	b.n	800675a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006600:	b29b      	uxth	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 80ab 	beq.w	800675e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006608:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 80a6 	beq.w	800675e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661a:	e853 3f00 	ldrex	r3, [r3]
 800661e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006622:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006626:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006634:	647b      	str	r3, [r7, #68]	@ 0x44
 8006636:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800663a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800663c:	e841 2300 	strex	r3, r2, [r1]
 8006640:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e4      	bne.n	8006612 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3308      	adds	r3, #8
 800664e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	623b      	str	r3, [r7, #32]
   return(result);
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	f023 0301 	bic.w	r3, r3, #1
 800665e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3308      	adds	r3, #8
 8006668:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800666c:	633a      	str	r2, [r7, #48]	@ 0x30
 800666e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006672:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006674:	e841 2300 	strex	r3, r2, [r1]
 8006678:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800667a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e3      	bne.n	8006648 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2220      	movs	r2, #32
 8006684:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f023 0310 	bic.w	r3, r3, #16
 80066a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80066b6:	61fb      	str	r3, [r7, #28]
 80066b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	69b9      	ldr	r1, [r7, #24]
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	617b      	str	r3, [r7, #20]
   return(result);
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e4      	bne.n	8006694 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2202      	movs	r2, #2
 80066ce:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066d4:	4619      	mov	r1, r3
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f85c 	bl	8006794 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066dc:	e03f      	b.n	800675e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80066de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00e      	beq.n	8006708 <HAL_UART_IRQHandler+0x5a8>
 80066ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d008      	beq.n	8006708 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80066fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 ffe9 	bl	80076d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006706:	e02d      	b.n	8006764 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800670c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00e      	beq.n	8006732 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800671c:	2b00      	cmp	r3, #0
 800671e:	d008      	beq.n	8006732 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006724:	2b00      	cmp	r3, #0
 8006726:	d01c      	beq.n	8006762 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	4798      	blx	r3
    }
    return;
 8006730:	e017      	b.n	8006762 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800673a:	2b00      	cmp	r3, #0
 800673c:	d012      	beq.n	8006764 <HAL_UART_IRQHandler+0x604>
 800673e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00c      	beq.n	8006764 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fdde 	bl	800730c <UART_EndTransmit_IT>
    return;
 8006750:	e008      	b.n	8006764 <HAL_UART_IRQHandler+0x604>
      return;
 8006752:	bf00      	nop
 8006754:	e006      	b.n	8006764 <HAL_UART_IRQHandler+0x604>
    return;
 8006756:	bf00      	nop
 8006758:	e004      	b.n	8006764 <HAL_UART_IRQHandler+0x604>
      return;
 800675a:	bf00      	nop
 800675c:	e002      	b.n	8006764 <HAL_UART_IRQHandler+0x604>
      return;
 800675e:	bf00      	nop
 8006760:	e000      	b.n	8006764 <HAL_UART_IRQHandler+0x604>
    return;
 8006762:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006764:	37e8      	adds	r7, #232	@ 0xe8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop

0800676c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067b0:	b08a      	sub	sp, #40	@ 0x28
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	431a      	orrs	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	431a      	orrs	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	4ba4      	ldr	r3, [pc, #656]	@ (8006a6c <UART_SetConfig+0x2c0>)
 80067dc:	4013      	ands	r3, r2
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	6812      	ldr	r2, [r2, #0]
 80067e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067e4:	430b      	orrs	r3, r1
 80067e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a99      	ldr	r2, [pc, #612]	@ (8006a70 <UART_SetConfig+0x2c4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d004      	beq.n	8006818 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006814:	4313      	orrs	r3, r2
 8006816:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006828:	430a      	orrs	r2, r1
 800682a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a90      	ldr	r2, [pc, #576]	@ (8006a74 <UART_SetConfig+0x2c8>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d126      	bne.n	8006884 <UART_SetConfig+0xd8>
 8006836:	4b90      	ldr	r3, [pc, #576]	@ (8006a78 <UART_SetConfig+0x2cc>)
 8006838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800683c:	f003 0303 	and.w	r3, r3, #3
 8006840:	2b03      	cmp	r3, #3
 8006842:	d81b      	bhi.n	800687c <UART_SetConfig+0xd0>
 8006844:	a201      	add	r2, pc, #4	@ (adr r2, 800684c <UART_SetConfig+0xa0>)
 8006846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684a:	bf00      	nop
 800684c:	0800685d 	.word	0x0800685d
 8006850:	0800686d 	.word	0x0800686d
 8006854:	08006865 	.word	0x08006865
 8006858:	08006875 	.word	0x08006875
 800685c:	2301      	movs	r3, #1
 800685e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006862:	e116      	b.n	8006a92 <UART_SetConfig+0x2e6>
 8006864:	2302      	movs	r3, #2
 8006866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800686a:	e112      	b.n	8006a92 <UART_SetConfig+0x2e6>
 800686c:	2304      	movs	r3, #4
 800686e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006872:	e10e      	b.n	8006a92 <UART_SetConfig+0x2e6>
 8006874:	2308      	movs	r3, #8
 8006876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800687a:	e10a      	b.n	8006a92 <UART_SetConfig+0x2e6>
 800687c:	2310      	movs	r3, #16
 800687e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006882:	e106      	b.n	8006a92 <UART_SetConfig+0x2e6>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a7c      	ldr	r2, [pc, #496]	@ (8006a7c <UART_SetConfig+0x2d0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d138      	bne.n	8006900 <UART_SetConfig+0x154>
 800688e:	4b7a      	ldr	r3, [pc, #488]	@ (8006a78 <UART_SetConfig+0x2cc>)
 8006890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006894:	f003 030c 	and.w	r3, r3, #12
 8006898:	2b0c      	cmp	r3, #12
 800689a:	d82d      	bhi.n	80068f8 <UART_SetConfig+0x14c>
 800689c:	a201      	add	r2, pc, #4	@ (adr r2, 80068a4 <UART_SetConfig+0xf8>)
 800689e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a2:	bf00      	nop
 80068a4:	080068d9 	.word	0x080068d9
 80068a8:	080068f9 	.word	0x080068f9
 80068ac:	080068f9 	.word	0x080068f9
 80068b0:	080068f9 	.word	0x080068f9
 80068b4:	080068e9 	.word	0x080068e9
 80068b8:	080068f9 	.word	0x080068f9
 80068bc:	080068f9 	.word	0x080068f9
 80068c0:	080068f9 	.word	0x080068f9
 80068c4:	080068e1 	.word	0x080068e1
 80068c8:	080068f9 	.word	0x080068f9
 80068cc:	080068f9 	.word	0x080068f9
 80068d0:	080068f9 	.word	0x080068f9
 80068d4:	080068f1 	.word	0x080068f1
 80068d8:	2300      	movs	r3, #0
 80068da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068de:	e0d8      	b.n	8006a92 <UART_SetConfig+0x2e6>
 80068e0:	2302      	movs	r3, #2
 80068e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068e6:	e0d4      	b.n	8006a92 <UART_SetConfig+0x2e6>
 80068e8:	2304      	movs	r3, #4
 80068ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ee:	e0d0      	b.n	8006a92 <UART_SetConfig+0x2e6>
 80068f0:	2308      	movs	r3, #8
 80068f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068f6:	e0cc      	b.n	8006a92 <UART_SetConfig+0x2e6>
 80068f8:	2310      	movs	r3, #16
 80068fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068fe:	e0c8      	b.n	8006a92 <UART_SetConfig+0x2e6>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a5e      	ldr	r2, [pc, #376]	@ (8006a80 <UART_SetConfig+0x2d4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d125      	bne.n	8006956 <UART_SetConfig+0x1aa>
 800690a:	4b5b      	ldr	r3, [pc, #364]	@ (8006a78 <UART_SetConfig+0x2cc>)
 800690c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006910:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006914:	2b30      	cmp	r3, #48	@ 0x30
 8006916:	d016      	beq.n	8006946 <UART_SetConfig+0x19a>
 8006918:	2b30      	cmp	r3, #48	@ 0x30
 800691a:	d818      	bhi.n	800694e <UART_SetConfig+0x1a2>
 800691c:	2b20      	cmp	r3, #32
 800691e:	d00a      	beq.n	8006936 <UART_SetConfig+0x18a>
 8006920:	2b20      	cmp	r3, #32
 8006922:	d814      	bhi.n	800694e <UART_SetConfig+0x1a2>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <UART_SetConfig+0x182>
 8006928:	2b10      	cmp	r3, #16
 800692a:	d008      	beq.n	800693e <UART_SetConfig+0x192>
 800692c:	e00f      	b.n	800694e <UART_SetConfig+0x1a2>
 800692e:	2300      	movs	r3, #0
 8006930:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006934:	e0ad      	b.n	8006a92 <UART_SetConfig+0x2e6>
 8006936:	2302      	movs	r3, #2
 8006938:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800693c:	e0a9      	b.n	8006a92 <UART_SetConfig+0x2e6>
 800693e:	2304      	movs	r3, #4
 8006940:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006944:	e0a5      	b.n	8006a92 <UART_SetConfig+0x2e6>
 8006946:	2308      	movs	r3, #8
 8006948:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800694c:	e0a1      	b.n	8006a92 <UART_SetConfig+0x2e6>
 800694e:	2310      	movs	r3, #16
 8006950:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006954:	e09d      	b.n	8006a92 <UART_SetConfig+0x2e6>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a4a      	ldr	r2, [pc, #296]	@ (8006a84 <UART_SetConfig+0x2d8>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d125      	bne.n	80069ac <UART_SetConfig+0x200>
 8006960:	4b45      	ldr	r3, [pc, #276]	@ (8006a78 <UART_SetConfig+0x2cc>)
 8006962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006966:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800696a:	2bc0      	cmp	r3, #192	@ 0xc0
 800696c:	d016      	beq.n	800699c <UART_SetConfig+0x1f0>
 800696e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006970:	d818      	bhi.n	80069a4 <UART_SetConfig+0x1f8>
 8006972:	2b80      	cmp	r3, #128	@ 0x80
 8006974:	d00a      	beq.n	800698c <UART_SetConfig+0x1e0>
 8006976:	2b80      	cmp	r3, #128	@ 0x80
 8006978:	d814      	bhi.n	80069a4 <UART_SetConfig+0x1f8>
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <UART_SetConfig+0x1d8>
 800697e:	2b40      	cmp	r3, #64	@ 0x40
 8006980:	d008      	beq.n	8006994 <UART_SetConfig+0x1e8>
 8006982:	e00f      	b.n	80069a4 <UART_SetConfig+0x1f8>
 8006984:	2300      	movs	r3, #0
 8006986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800698a:	e082      	b.n	8006a92 <UART_SetConfig+0x2e6>
 800698c:	2302      	movs	r3, #2
 800698e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006992:	e07e      	b.n	8006a92 <UART_SetConfig+0x2e6>
 8006994:	2304      	movs	r3, #4
 8006996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800699a:	e07a      	b.n	8006a92 <UART_SetConfig+0x2e6>
 800699c:	2308      	movs	r3, #8
 800699e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069a2:	e076      	b.n	8006a92 <UART_SetConfig+0x2e6>
 80069a4:	2310      	movs	r3, #16
 80069a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069aa:	e072      	b.n	8006a92 <UART_SetConfig+0x2e6>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a35      	ldr	r2, [pc, #212]	@ (8006a88 <UART_SetConfig+0x2dc>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d12a      	bne.n	8006a0c <UART_SetConfig+0x260>
 80069b6:	4b30      	ldr	r3, [pc, #192]	@ (8006a78 <UART_SetConfig+0x2cc>)
 80069b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069c4:	d01a      	beq.n	80069fc <UART_SetConfig+0x250>
 80069c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069ca:	d81b      	bhi.n	8006a04 <UART_SetConfig+0x258>
 80069cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069d0:	d00c      	beq.n	80069ec <UART_SetConfig+0x240>
 80069d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069d6:	d815      	bhi.n	8006a04 <UART_SetConfig+0x258>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <UART_SetConfig+0x238>
 80069dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069e0:	d008      	beq.n	80069f4 <UART_SetConfig+0x248>
 80069e2:	e00f      	b.n	8006a04 <UART_SetConfig+0x258>
 80069e4:	2300      	movs	r3, #0
 80069e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069ea:	e052      	b.n	8006a92 <UART_SetConfig+0x2e6>
 80069ec:	2302      	movs	r3, #2
 80069ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069f2:	e04e      	b.n	8006a92 <UART_SetConfig+0x2e6>
 80069f4:	2304      	movs	r3, #4
 80069f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069fa:	e04a      	b.n	8006a92 <UART_SetConfig+0x2e6>
 80069fc:	2308      	movs	r3, #8
 80069fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a02:	e046      	b.n	8006a92 <UART_SetConfig+0x2e6>
 8006a04:	2310      	movs	r3, #16
 8006a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a0a:	e042      	b.n	8006a92 <UART_SetConfig+0x2e6>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a17      	ldr	r2, [pc, #92]	@ (8006a70 <UART_SetConfig+0x2c4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d13a      	bne.n	8006a8c <UART_SetConfig+0x2e0>
 8006a16:	4b18      	ldr	r3, [pc, #96]	@ (8006a78 <UART_SetConfig+0x2cc>)
 8006a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a24:	d01a      	beq.n	8006a5c <UART_SetConfig+0x2b0>
 8006a26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a2a:	d81b      	bhi.n	8006a64 <UART_SetConfig+0x2b8>
 8006a2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a30:	d00c      	beq.n	8006a4c <UART_SetConfig+0x2a0>
 8006a32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a36:	d815      	bhi.n	8006a64 <UART_SetConfig+0x2b8>
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <UART_SetConfig+0x298>
 8006a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a40:	d008      	beq.n	8006a54 <UART_SetConfig+0x2a8>
 8006a42:	e00f      	b.n	8006a64 <UART_SetConfig+0x2b8>
 8006a44:	2300      	movs	r3, #0
 8006a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a4a:	e022      	b.n	8006a92 <UART_SetConfig+0x2e6>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a52:	e01e      	b.n	8006a92 <UART_SetConfig+0x2e6>
 8006a54:	2304      	movs	r3, #4
 8006a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a5a:	e01a      	b.n	8006a92 <UART_SetConfig+0x2e6>
 8006a5c:	2308      	movs	r3, #8
 8006a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a62:	e016      	b.n	8006a92 <UART_SetConfig+0x2e6>
 8006a64:	2310      	movs	r3, #16
 8006a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a6a:	e012      	b.n	8006a92 <UART_SetConfig+0x2e6>
 8006a6c:	efff69f3 	.word	0xefff69f3
 8006a70:	40008000 	.word	0x40008000
 8006a74:	40013800 	.word	0x40013800
 8006a78:	40021000 	.word	0x40021000
 8006a7c:	40004400 	.word	0x40004400
 8006a80:	40004800 	.word	0x40004800
 8006a84:	40004c00 	.word	0x40004c00
 8006a88:	40005000 	.word	0x40005000
 8006a8c:	2310      	movs	r3, #16
 8006a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a9f      	ldr	r2, [pc, #636]	@ (8006d14 <UART_SetConfig+0x568>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d17a      	bne.n	8006b92 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006aa0:	2b08      	cmp	r3, #8
 8006aa2:	d824      	bhi.n	8006aee <UART_SetConfig+0x342>
 8006aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8006aac <UART_SetConfig+0x300>)
 8006aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aaa:	bf00      	nop
 8006aac:	08006ad1 	.word	0x08006ad1
 8006ab0:	08006aef 	.word	0x08006aef
 8006ab4:	08006ad9 	.word	0x08006ad9
 8006ab8:	08006aef 	.word	0x08006aef
 8006abc:	08006adf 	.word	0x08006adf
 8006ac0:	08006aef 	.word	0x08006aef
 8006ac4:	08006aef 	.word	0x08006aef
 8006ac8:	08006aef 	.word	0x08006aef
 8006acc:	08006ae7 	.word	0x08006ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ad0:	f7fe fa5e 	bl	8004f90 <HAL_RCC_GetPCLK1Freq>
 8006ad4:	61f8      	str	r0, [r7, #28]
        break;
 8006ad6:	e010      	b.n	8006afa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ad8:	4b8f      	ldr	r3, [pc, #572]	@ (8006d18 <UART_SetConfig+0x56c>)
 8006ada:	61fb      	str	r3, [r7, #28]
        break;
 8006adc:	e00d      	b.n	8006afa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ade:	f7fe f9bf 	bl	8004e60 <HAL_RCC_GetSysClockFreq>
 8006ae2:	61f8      	str	r0, [r7, #28]
        break;
 8006ae4:	e009      	b.n	8006afa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aea:	61fb      	str	r3, [r7, #28]
        break;
 8006aec:	e005      	b.n	8006afa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006af8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 80fb 	beq.w	8006cf8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	4613      	mov	r3, r2
 8006b08:	005b      	lsls	r3, r3, #1
 8006b0a:	4413      	add	r3, r2
 8006b0c:	69fa      	ldr	r2, [r7, #28]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d305      	bcc.n	8006b1e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b18:	69fa      	ldr	r2, [r7, #28]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d903      	bls.n	8006b26 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b24:	e0e8      	b.n	8006cf8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	461c      	mov	r4, r3
 8006b2c:	4615      	mov	r5, r2
 8006b2e:	f04f 0200 	mov.w	r2, #0
 8006b32:	f04f 0300 	mov.w	r3, #0
 8006b36:	022b      	lsls	r3, r5, #8
 8006b38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006b3c:	0222      	lsls	r2, r4, #8
 8006b3e:	68f9      	ldr	r1, [r7, #12]
 8006b40:	6849      	ldr	r1, [r1, #4]
 8006b42:	0849      	lsrs	r1, r1, #1
 8006b44:	2000      	movs	r0, #0
 8006b46:	4688      	mov	r8, r1
 8006b48:	4681      	mov	r9, r0
 8006b4a:	eb12 0a08 	adds.w	sl, r2, r8
 8006b4e:	eb43 0b09 	adc.w	fp, r3, r9
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	603b      	str	r3, [r7, #0]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b60:	4650      	mov	r0, sl
 8006b62:	4659      	mov	r1, fp
 8006b64:	f7f9 fb44 	bl	80001f0 <__aeabi_uldivmod>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b76:	d308      	bcc.n	8006b8a <UART_SetConfig+0x3de>
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b7e:	d204      	bcs.n	8006b8a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	60da      	str	r2, [r3, #12]
 8006b88:	e0b6      	b.n	8006cf8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b90:	e0b2      	b.n	8006cf8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b9a:	d15e      	bne.n	8006c5a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006b9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d828      	bhi.n	8006bf6 <UART_SetConfig+0x44a>
 8006ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bac <UART_SetConfig+0x400>)
 8006ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006baa:	bf00      	nop
 8006bac:	08006bd1 	.word	0x08006bd1
 8006bb0:	08006bd9 	.word	0x08006bd9
 8006bb4:	08006be1 	.word	0x08006be1
 8006bb8:	08006bf7 	.word	0x08006bf7
 8006bbc:	08006be7 	.word	0x08006be7
 8006bc0:	08006bf7 	.word	0x08006bf7
 8006bc4:	08006bf7 	.word	0x08006bf7
 8006bc8:	08006bf7 	.word	0x08006bf7
 8006bcc:	08006bef 	.word	0x08006bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bd0:	f7fe f9de 	bl	8004f90 <HAL_RCC_GetPCLK1Freq>
 8006bd4:	61f8      	str	r0, [r7, #28]
        break;
 8006bd6:	e014      	b.n	8006c02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bd8:	f7fe f9f0 	bl	8004fbc <HAL_RCC_GetPCLK2Freq>
 8006bdc:	61f8      	str	r0, [r7, #28]
        break;
 8006bde:	e010      	b.n	8006c02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006be0:	4b4d      	ldr	r3, [pc, #308]	@ (8006d18 <UART_SetConfig+0x56c>)
 8006be2:	61fb      	str	r3, [r7, #28]
        break;
 8006be4:	e00d      	b.n	8006c02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006be6:	f7fe f93b 	bl	8004e60 <HAL_RCC_GetSysClockFreq>
 8006bea:	61f8      	str	r0, [r7, #28]
        break;
 8006bec:	e009      	b.n	8006c02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bf2:	61fb      	str	r3, [r7, #28]
        break;
 8006bf4:	e005      	b.n	8006c02 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006c00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d077      	beq.n	8006cf8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	005a      	lsls	r2, r3, #1
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	085b      	lsrs	r3, r3, #1
 8006c12:	441a      	add	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	2b0f      	cmp	r3, #15
 8006c22:	d916      	bls.n	8006c52 <UART_SetConfig+0x4a6>
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c2a:	d212      	bcs.n	8006c52 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	f023 030f 	bic.w	r3, r3, #15
 8006c34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	085b      	lsrs	r3, r3, #1
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	f003 0307 	and.w	r3, r3, #7
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	8afb      	ldrh	r3, [r7, #22]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	8afa      	ldrh	r2, [r7, #22]
 8006c4e:	60da      	str	r2, [r3, #12]
 8006c50:	e052      	b.n	8006cf8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c58:	e04e      	b.n	8006cf8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c5e:	2b08      	cmp	r3, #8
 8006c60:	d827      	bhi.n	8006cb2 <UART_SetConfig+0x506>
 8006c62:	a201      	add	r2, pc, #4	@ (adr r2, 8006c68 <UART_SetConfig+0x4bc>)
 8006c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c68:	08006c8d 	.word	0x08006c8d
 8006c6c:	08006c95 	.word	0x08006c95
 8006c70:	08006c9d 	.word	0x08006c9d
 8006c74:	08006cb3 	.word	0x08006cb3
 8006c78:	08006ca3 	.word	0x08006ca3
 8006c7c:	08006cb3 	.word	0x08006cb3
 8006c80:	08006cb3 	.word	0x08006cb3
 8006c84:	08006cb3 	.word	0x08006cb3
 8006c88:	08006cab 	.word	0x08006cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c8c:	f7fe f980 	bl	8004f90 <HAL_RCC_GetPCLK1Freq>
 8006c90:	61f8      	str	r0, [r7, #28]
        break;
 8006c92:	e014      	b.n	8006cbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c94:	f7fe f992 	bl	8004fbc <HAL_RCC_GetPCLK2Freq>
 8006c98:	61f8      	str	r0, [r7, #28]
        break;
 8006c9a:	e010      	b.n	8006cbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8006d18 <UART_SetConfig+0x56c>)
 8006c9e:	61fb      	str	r3, [r7, #28]
        break;
 8006ca0:	e00d      	b.n	8006cbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ca2:	f7fe f8dd 	bl	8004e60 <HAL_RCC_GetSysClockFreq>
 8006ca6:	61f8      	str	r0, [r7, #28]
        break;
 8006ca8:	e009      	b.n	8006cbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cae:	61fb      	str	r3, [r7, #28]
        break;
 8006cb0:	e005      	b.n	8006cbe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006cbc:	bf00      	nop
    }

    if (pclk != 0U)
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d019      	beq.n	8006cf8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	085a      	lsrs	r2, r3, #1
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	441a      	add	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	2b0f      	cmp	r3, #15
 8006cdc:	d909      	bls.n	8006cf2 <UART_SetConfig+0x546>
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ce4:	d205      	bcs.n	8006cf2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	60da      	str	r2, [r3, #12]
 8006cf0:	e002      	b.n	8006cf8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006d04:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3728      	adds	r7, #40	@ 0x28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d12:	bf00      	nop
 8006d14:	40008000 	.word	0x40008000
 8006d18:	00f42400 	.word	0x00f42400

08006d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d28:	f003 0308 	and.w	r3, r3, #8
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00a      	beq.n	8006d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00a      	beq.n	8006d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8e:	f003 0304 	and.w	r3, r3, #4
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00a      	beq.n	8006dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	430a      	orrs	r2, r1
 8006daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db0:	f003 0310 	and.w	r3, r3, #16
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00a      	beq.n	8006dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd2:	f003 0320 	and.w	r3, r3, #32
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00a      	beq.n	8006df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01a      	beq.n	8006e32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e1a:	d10a      	bne.n	8006e32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00a      	beq.n	8006e54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	605a      	str	r2, [r3, #4]
  }
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b098      	sub	sp, #96	@ 0x60
 8006e64:	af02      	add	r7, sp, #8
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e70:	f7fa fc10 	bl	8001694 <HAL_GetTick>
 8006e74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0308 	and.w	r3, r3, #8
 8006e80:	2b08      	cmp	r3, #8
 8006e82:	d12e      	bne.n	8006ee2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f88c 	bl	8006fb0 <UART_WaitOnFlagUntilTimeout>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d021      	beq.n	8006ee2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006eb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ebc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ebe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ec2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e6      	bne.n	8006e9e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e062      	b.n	8006fa8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b04      	cmp	r3, #4
 8006eee:	d149      	bne.n	8006f84 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ef0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f856 	bl	8006fb0 <UART_WaitOnFlagUntilTimeout>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d03c      	beq.n	8006f84 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f12:	e853 3f00 	ldrex	r3, [r3]
 8006f16:	623b      	str	r3, [r7, #32]
   return(result);
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f28:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f30:	e841 2300 	strex	r3, r2, [r1]
 8006f34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e6      	bne.n	8006f0a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3308      	adds	r3, #8
 8006f42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	e853 3f00 	ldrex	r3, [r3]
 8006f4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 0301 	bic.w	r3, r3, #1
 8006f52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3308      	adds	r3, #8
 8006f5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f5c:	61fa      	str	r2, [r7, #28]
 8006f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f60:	69b9      	ldr	r1, [r7, #24]
 8006f62:	69fa      	ldr	r2, [r7, #28]
 8006f64:	e841 2300 	strex	r3, r2, [r1]
 8006f68:	617b      	str	r3, [r7, #20]
   return(result);
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1e5      	bne.n	8006f3c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2220      	movs	r2, #32
 8006f74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e011      	b.n	8006fa8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2220      	movs	r2, #32
 8006f88:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3758      	adds	r7, #88	@ 0x58
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	603b      	str	r3, [r7, #0]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fc0:	e04f      	b.n	8007062 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc8:	d04b      	beq.n	8007062 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fca:	f7fa fb63 	bl	8001694 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d302      	bcc.n	8006fe0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e04e      	b.n	8007082 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0304 	and.w	r3, r3, #4
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d037      	beq.n	8007062 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2b80      	cmp	r3, #128	@ 0x80
 8006ff6:	d034      	beq.n	8007062 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2b40      	cmp	r3, #64	@ 0x40
 8006ffc:	d031      	beq.n	8007062 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	f003 0308 	and.w	r3, r3, #8
 8007008:	2b08      	cmp	r3, #8
 800700a:	d110      	bne.n	800702e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2208      	movs	r2, #8
 8007012:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 f8ff 	bl	8007218 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2208      	movs	r2, #8
 800701e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e029      	b.n	8007082 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69db      	ldr	r3, [r3, #28]
 8007034:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007038:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800703c:	d111      	bne.n	8007062 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007046:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f000 f8e5 	bl	8007218 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2220      	movs	r2, #32
 8007052:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e00f      	b.n	8007082 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	69da      	ldr	r2, [r3, #28]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	4013      	ands	r3, r2
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	429a      	cmp	r2, r3
 8007070:	bf0c      	ite	eq
 8007072:	2301      	moveq	r3, #1
 8007074:	2300      	movne	r3, #0
 8007076:	b2db      	uxtb	r3, r3
 8007078:	461a      	mov	r2, r3
 800707a:	79fb      	ldrb	r3, [r7, #7]
 800707c:	429a      	cmp	r2, r3
 800707e:	d0a0      	beq.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
	...

0800708c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800708c:	b480      	push	{r7}
 800708e:	b097      	sub	sp, #92	@ 0x5c
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	4613      	mov	r3, r2
 8007098:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	88fa      	ldrh	r2, [r7, #6]
 80070a4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	88fa      	ldrh	r2, [r7, #6]
 80070ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070be:	d10e      	bne.n	80070de <UART_Start_Receive_IT+0x52>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d105      	bne.n	80070d4 <UART_Start_Receive_IT+0x48>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80070ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80070d2:	e02d      	b.n	8007130 <UART_Start_Receive_IT+0xa4>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	22ff      	movs	r2, #255	@ 0xff
 80070d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80070dc:	e028      	b.n	8007130 <UART_Start_Receive_IT+0xa4>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10d      	bne.n	8007102 <UART_Start_Receive_IT+0x76>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d104      	bne.n	80070f8 <UART_Start_Receive_IT+0x6c>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	22ff      	movs	r2, #255	@ 0xff
 80070f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80070f6:	e01b      	b.n	8007130 <UART_Start_Receive_IT+0xa4>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	227f      	movs	r2, #127	@ 0x7f
 80070fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007100:	e016      	b.n	8007130 <UART_Start_Receive_IT+0xa4>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800710a:	d10d      	bne.n	8007128 <UART_Start_Receive_IT+0x9c>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d104      	bne.n	800711e <UART_Start_Receive_IT+0x92>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	227f      	movs	r2, #127	@ 0x7f
 8007118:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800711c:	e008      	b.n	8007130 <UART_Start_Receive_IT+0xa4>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	223f      	movs	r2, #63	@ 0x3f
 8007122:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007126:	e003      	b.n	8007130 <UART_Start_Receive_IT+0xa4>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2222      	movs	r2, #34	@ 0x22
 800713c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3308      	adds	r3, #8
 8007146:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800714a:	e853 3f00 	ldrex	r3, [r3]
 800714e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007152:	f043 0301 	orr.w	r3, r3, #1
 8007156:	657b      	str	r3, [r7, #84]	@ 0x54
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3308      	adds	r3, #8
 800715e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007160:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007162:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007164:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007166:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007168:	e841 2300 	strex	r3, r2, [r1]
 800716c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800716e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1e5      	bne.n	8007140 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800717c:	d107      	bne.n	800718e <UART_Start_Receive_IT+0x102>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d103      	bne.n	800718e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4a21      	ldr	r2, [pc, #132]	@ (8007210 <UART_Start_Receive_IT+0x184>)
 800718a:	669a      	str	r2, [r3, #104]	@ 0x68
 800718c:	e002      	b.n	8007194 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	4a20      	ldr	r2, [pc, #128]	@ (8007214 <UART_Start_Receive_IT+0x188>)
 8007192:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d019      	beq.n	80071d0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ac:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80071b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	461a      	mov	r2, r3
 80071b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80071bc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80071c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80071c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e6      	bne.n	800719c <UART_Start_Receive_IT+0x110>
 80071ce:	e018      	b.n	8007202 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	e853 3f00 	ldrex	r3, [r3]
 80071dc:	613b      	str	r3, [r7, #16]
   return(result);
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	f043 0320 	orr.w	r3, r3, #32
 80071e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	461a      	mov	r2, r3
 80071ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071ee:	623b      	str	r3, [r7, #32]
 80071f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	69f9      	ldr	r1, [r7, #28]
 80071f4:	6a3a      	ldr	r2, [r7, #32]
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e6      	bne.n	80071d0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	375c      	adds	r7, #92	@ 0x5c
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	0800751d 	.word	0x0800751d
 8007214:	08007361 	.word	0x08007361

08007218 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007218:	b480      	push	{r7}
 800721a:	b095      	sub	sp, #84	@ 0x54
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007228:	e853 3f00 	ldrex	r3, [r3]
 800722c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800722e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007230:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007234:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	461a      	mov	r2, r3
 800723c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800723e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007240:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007242:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007244:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007246:	e841 2300 	strex	r3, r2, [r1]
 800724a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800724c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1e6      	bne.n	8007220 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3308      	adds	r3, #8
 8007258:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	e853 3f00 	ldrex	r3, [r3]
 8007260:	61fb      	str	r3, [r7, #28]
   return(result);
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	f023 0301 	bic.w	r3, r3, #1
 8007268:	64bb      	str	r3, [r7, #72]	@ 0x48
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3308      	adds	r3, #8
 8007270:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007272:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007274:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007276:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007278:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800727a:	e841 2300 	strex	r3, r2, [r1]
 800727e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1e5      	bne.n	8007252 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800728a:	2b01      	cmp	r3, #1
 800728c:	d118      	bne.n	80072c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	e853 3f00 	ldrex	r3, [r3]
 800729a:	60bb      	str	r3, [r7, #8]
   return(result);
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	f023 0310 	bic.w	r3, r3, #16
 80072a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	461a      	mov	r2, r3
 80072aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b0:	6979      	ldr	r1, [r7, #20]
 80072b2:	69ba      	ldr	r2, [r7, #24]
 80072b4:	e841 2300 	strex	r3, r2, [r1]
 80072b8:	613b      	str	r3, [r7, #16]
   return(result);
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1e6      	bne.n	800728e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2220      	movs	r2, #32
 80072c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80072d4:	bf00      	nop
 80072d6:	3754      	adds	r7, #84	@ 0x54
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f7ff fa3e 	bl	8006780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007304:	bf00      	nop
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	60bb      	str	r3, [r7, #8]
   return(result);
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007328:	61fb      	str	r3, [r7, #28]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	61bb      	str	r3, [r7, #24]
 8007334:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	6979      	ldr	r1, [r7, #20]
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	613b      	str	r3, [r7, #16]
   return(result);
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e6      	bne.n	8007314 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2220      	movs	r2, #32
 800734a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7ff fa0a 	bl	800676c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007358:	bf00      	nop
 800735a:	3720      	adds	r7, #32
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b09c      	sub	sp, #112	@ 0x70
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800736e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007378:	2b22      	cmp	r3, #34	@ 0x22
 800737a:	f040 80be 	bne.w	80074fa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007384:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007388:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800738c:	b2d9      	uxtb	r1, r3
 800738e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007392:	b2da      	uxtb	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007398:	400a      	ands	r2, r1
 800739a:	b2d2      	uxtb	r2, r2
 800739c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073a2:	1c5a      	adds	r2, r3, #1
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	3b01      	subs	r3, #1
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f040 80a3 	bne.w	800750e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e6      	bne.n	80073c8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3308      	adds	r3, #8
 8007400:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007404:	e853 3f00 	ldrex	r3, [r3]
 8007408:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800740a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800740c:	f023 0301 	bic.w	r3, r3, #1
 8007410:	667b      	str	r3, [r7, #100]	@ 0x64
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3308      	adds	r3, #8
 8007418:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800741a:	647a      	str	r2, [r7, #68]	@ 0x44
 800741c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007420:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e5      	bne.n	80073fa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2220      	movs	r2, #32
 8007432:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a34      	ldr	r2, [pc, #208]	@ (8007518 <UART_RxISR_8BIT+0x1b8>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d01f      	beq.n	800748c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d018      	beq.n	800748c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	623b      	str	r3, [r7, #32]
   return(result);
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800746e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007478:	633b      	str	r3, [r7, #48]	@ 0x30
 800747a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800747e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e6      	bne.n	800745a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007490:	2b01      	cmp	r3, #1
 8007492:	d12e      	bne.n	80074f2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	e853 3f00 	ldrex	r3, [r3]
 80074a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f023 0310 	bic.w	r3, r3, #16
 80074ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	461a      	mov	r2, r3
 80074b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074b8:	61fb      	str	r3, [r7, #28]
 80074ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074bc:	69b9      	ldr	r1, [r7, #24]
 80074be:	69fa      	ldr	r2, [r7, #28]
 80074c0:	e841 2300 	strex	r3, r2, [r1]
 80074c4:	617b      	str	r3, [r7, #20]
   return(result);
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1e6      	bne.n	800749a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	f003 0310 	and.w	r3, r3, #16
 80074d6:	2b10      	cmp	r3, #16
 80074d8:	d103      	bne.n	80074e2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2210      	movs	r2, #16
 80074e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7ff f952 	bl	8006794 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074f0:	e00d      	b.n	800750e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7f9 fc74 	bl	8000de0 <HAL_UART_RxCpltCallback>
}
 80074f8:	e009      	b.n	800750e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	8b1b      	ldrh	r3, [r3, #24]
 8007500:	b29a      	uxth	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f042 0208 	orr.w	r2, r2, #8
 800750a:	b292      	uxth	r2, r2
 800750c:	831a      	strh	r2, [r3, #24]
}
 800750e:	bf00      	nop
 8007510:	3770      	adds	r7, #112	@ 0x70
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	40008000 	.word	0x40008000

0800751c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b09c      	sub	sp, #112	@ 0x70
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800752a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007534:	2b22      	cmp	r3, #34	@ 0x22
 8007536:	f040 80be 	bne.w	80076b6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007540:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007548:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800754a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800754e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007552:	4013      	ands	r3, r2
 8007554:	b29a      	uxth	r2, r3
 8007556:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007558:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800755e:	1c9a      	adds	r2, r3, #2
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800756a:	b29b      	uxth	r3, r3
 800756c:	3b01      	subs	r3, #1
 800756e:	b29a      	uxth	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800757c:	b29b      	uxth	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	f040 80a3 	bne.w	80076ca <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800758c:	e853 3f00 	ldrex	r3, [r3]
 8007590:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007592:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007594:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007598:	667b      	str	r3, [r7, #100]	@ 0x64
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80075a4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80075a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80075aa:	e841 2300 	strex	r3, r2, [r1]
 80075ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80075b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1e6      	bne.n	8007584 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3308      	adds	r3, #8
 80075bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c0:	e853 3f00 	ldrex	r3, [r3]
 80075c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c8:	f023 0301 	bic.w	r3, r3, #1
 80075cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	3308      	adds	r3, #8
 80075d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80075d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80075d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075de:	e841 2300 	strex	r3, r2, [r1]
 80075e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1e5      	bne.n	80075b6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a34      	ldr	r2, [pc, #208]	@ (80076d4 <UART_RxISR_16BIT+0x1b8>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d01f      	beq.n	8007648 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d018      	beq.n	8007648 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	e853 3f00 	ldrex	r3, [r3]
 8007622:	61fb      	str	r3, [r7, #28]
   return(result);
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800762a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	461a      	mov	r2, r3
 8007632:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007634:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007636:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007638:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800763a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800763c:	e841 2300 	strex	r3, r2, [r1]
 8007640:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1e6      	bne.n	8007616 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800764c:	2b01      	cmp	r3, #1
 800764e:	d12e      	bne.n	80076ae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	e853 3f00 	ldrex	r3, [r3]
 8007662:	60bb      	str	r3, [r7, #8]
   return(result);
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	f023 0310 	bic.w	r3, r3, #16
 800766a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	461a      	mov	r2, r3
 8007672:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007674:	61bb      	str	r3, [r7, #24]
 8007676:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007678:	6979      	ldr	r1, [r7, #20]
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	e841 2300 	strex	r3, r2, [r1]
 8007680:	613b      	str	r3, [r7, #16]
   return(result);
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1e6      	bne.n	8007656 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	69db      	ldr	r3, [r3, #28]
 800768e:	f003 0310 	and.w	r3, r3, #16
 8007692:	2b10      	cmp	r3, #16
 8007694:	d103      	bne.n	800769e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2210      	movs	r2, #16
 800769c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80076a4:	4619      	mov	r1, r3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7ff f874 	bl	8006794 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076ac:	e00d      	b.n	80076ca <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7f9 fb96 	bl	8000de0 <HAL_UART_RxCpltCallback>
}
 80076b4:	e009      	b.n	80076ca <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	8b1b      	ldrh	r3, [r3, #24]
 80076bc:	b29a      	uxth	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0208 	orr.w	r2, r2, #8
 80076c6:	b292      	uxth	r2, r2
 80076c8:	831a      	strh	r2, [r3, #24]
}
 80076ca:	bf00      	nop
 80076cc:	3770      	adds	r7, #112	@ 0x70
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	40008000 	.word	0x40008000

080076d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <__NVIC_SetPriority>:
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	4603      	mov	r3, r0
 80076f4:	6039      	str	r1, [r7, #0]
 80076f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	db0a      	blt.n	8007716 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	b2da      	uxtb	r2, r3
 8007704:	490c      	ldr	r1, [pc, #48]	@ (8007738 <__NVIC_SetPriority+0x4c>)
 8007706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800770a:	0112      	lsls	r2, r2, #4
 800770c:	b2d2      	uxtb	r2, r2
 800770e:	440b      	add	r3, r1
 8007710:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007714:	e00a      	b.n	800772c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	b2da      	uxtb	r2, r3
 800771a:	4908      	ldr	r1, [pc, #32]	@ (800773c <__NVIC_SetPriority+0x50>)
 800771c:	79fb      	ldrb	r3, [r7, #7]
 800771e:	f003 030f 	and.w	r3, r3, #15
 8007722:	3b04      	subs	r3, #4
 8007724:	0112      	lsls	r2, r2, #4
 8007726:	b2d2      	uxtb	r2, r2
 8007728:	440b      	add	r3, r1
 800772a:	761a      	strb	r2, [r3, #24]
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	e000e100 	.word	0xe000e100
 800773c:	e000ed00 	.word	0xe000ed00

08007740 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007740:	b580      	push	{r7, lr}
 8007742:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007744:	4b05      	ldr	r3, [pc, #20]	@ (800775c <SysTick_Handler+0x1c>)
 8007746:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007748:	f001 fd46 	bl	80091d8 <xTaskGetSchedulerState>
 800774c:	4603      	mov	r3, r0
 800774e:	2b01      	cmp	r3, #1
 8007750:	d001      	beq.n	8007756 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007752:	f002 fb41 	bl	8009dd8 <xPortSysTickHandler>
  }
}
 8007756:	bf00      	nop
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	e000e010 	.word	0xe000e010

08007760 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007764:	2100      	movs	r1, #0
 8007766:	f06f 0004 	mvn.w	r0, #4
 800776a:	f7ff ffbf 	bl	80076ec <__NVIC_SetPriority>
#endif
}
 800776e:	bf00      	nop
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800777a:	f3ef 8305 	mrs	r3, IPSR
 800777e:	603b      	str	r3, [r7, #0]
  return(result);
 8007780:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007786:	f06f 0305 	mvn.w	r3, #5
 800778a:	607b      	str	r3, [r7, #4]
 800778c:	e00c      	b.n	80077a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800778e:	4b0a      	ldr	r3, [pc, #40]	@ (80077b8 <osKernelInitialize+0x44>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d105      	bne.n	80077a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007796:	4b08      	ldr	r3, [pc, #32]	@ (80077b8 <osKernelInitialize+0x44>)
 8007798:	2201      	movs	r2, #1
 800779a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800779c:	2300      	movs	r3, #0
 800779e:	607b      	str	r3, [r7, #4]
 80077a0:	e002      	b.n	80077a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80077a2:	f04f 33ff 	mov.w	r3, #4294967295
 80077a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80077a8:	687b      	ldr	r3, [r7, #4]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	200002f0 	.word	0x200002f0

080077bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077c2:	f3ef 8305 	mrs	r3, IPSR
 80077c6:	603b      	str	r3, [r7, #0]
  return(result);
 80077c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80077ce:	f06f 0305 	mvn.w	r3, #5
 80077d2:	607b      	str	r3, [r7, #4]
 80077d4:	e010      	b.n	80077f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80077d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007804 <osKernelStart+0x48>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d109      	bne.n	80077f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80077de:	f7ff ffbf 	bl	8007760 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80077e2:	4b08      	ldr	r3, [pc, #32]	@ (8007804 <osKernelStart+0x48>)
 80077e4:	2202      	movs	r2, #2
 80077e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80077e8:	f001 f892 	bl	8008910 <vTaskStartScheduler>
      stat = osOK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	607b      	str	r3, [r7, #4]
 80077f0:	e002      	b.n	80077f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80077f2:	f04f 33ff 	mov.w	r3, #4294967295
 80077f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80077f8:	687b      	ldr	r3, [r7, #4]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	200002f0 	.word	0x200002f0

08007808 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007808:	b580      	push	{r7, lr}
 800780a:	b08e      	sub	sp, #56	@ 0x38
 800780c:	af04      	add	r7, sp, #16
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007814:	2300      	movs	r3, #0
 8007816:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007818:	f3ef 8305 	mrs	r3, IPSR
 800781c:	617b      	str	r3, [r7, #20]
  return(result);
 800781e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007820:	2b00      	cmp	r3, #0
 8007822:	d17e      	bne.n	8007922 <osThreadNew+0x11a>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d07b      	beq.n	8007922 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800782a:	2380      	movs	r3, #128	@ 0x80
 800782c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800782e:	2318      	movs	r3, #24
 8007830:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007832:	2300      	movs	r3, #0
 8007834:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007836:	f04f 33ff 	mov.w	r3, #4294967295
 800783a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d045      	beq.n	80078ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d002      	beq.n	8007850 <osThreadNew+0x48>
        name = attr->name;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d008      	beq.n	8007876 <osThreadNew+0x6e>
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	2b38      	cmp	r3, #56	@ 0x38
 8007868:	d805      	bhi.n	8007876 <osThreadNew+0x6e>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <osThreadNew+0x72>
        return (NULL);
 8007876:	2300      	movs	r3, #0
 8007878:	e054      	b.n	8007924 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	089b      	lsrs	r3, r3, #2
 8007888:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00e      	beq.n	80078b0 <osThreadNew+0xa8>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	2ba7      	cmp	r3, #167	@ 0xa7
 8007898:	d90a      	bls.n	80078b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d006      	beq.n	80078b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d002      	beq.n	80078b0 <osThreadNew+0xa8>
        mem = 1;
 80078aa:	2301      	movs	r3, #1
 80078ac:	61bb      	str	r3, [r7, #24]
 80078ae:	e010      	b.n	80078d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10c      	bne.n	80078d2 <osThreadNew+0xca>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d108      	bne.n	80078d2 <osThreadNew+0xca>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d104      	bne.n	80078d2 <osThreadNew+0xca>
          mem = 0;
 80078c8:	2300      	movs	r3, #0
 80078ca:	61bb      	str	r3, [r7, #24]
 80078cc:	e001      	b.n	80078d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80078ce:	2300      	movs	r3, #0
 80078d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d110      	bne.n	80078fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80078e0:	9202      	str	r2, [sp, #8]
 80078e2:	9301      	str	r3, [sp, #4]
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	6a3a      	ldr	r2, [r7, #32]
 80078ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 fe1a 	bl	8008528 <xTaskCreateStatic>
 80078f4:	4603      	mov	r3, r0
 80078f6:	613b      	str	r3, [r7, #16]
 80078f8:	e013      	b.n	8007922 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d110      	bne.n	8007922 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007900:	6a3b      	ldr	r3, [r7, #32]
 8007902:	b29a      	uxth	r2, r3
 8007904:	f107 0310 	add.w	r3, r7, #16
 8007908:	9301      	str	r3, [sp, #4]
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 fe68 	bl	80085e8 <xTaskCreate>
 8007918:	4603      	mov	r3, r0
 800791a:	2b01      	cmp	r3, #1
 800791c:	d001      	beq.n	8007922 <osThreadNew+0x11a>
            hTask = NULL;
 800791e:	2300      	movs	r3, #0
 8007920:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007922:	693b      	ldr	r3, [r7, #16]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3728      	adds	r7, #40	@ 0x28
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007934:	f3ef 8305 	mrs	r3, IPSR
 8007938:	60bb      	str	r3, [r7, #8]
  return(result);
 800793a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <osDelay+0x1c>
    stat = osErrorISR;
 8007940:	f06f 0305 	mvn.w	r3, #5
 8007944:	60fb      	str	r3, [r7, #12]
 8007946:	e007      	b.n	8007958 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007948:	2300      	movs	r3, #0
 800794a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 ffa6 	bl	80088a4 <vTaskDelay>
    }
  }

  return (stat);
 8007958:	68fb      	ldr	r3, [r7, #12]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
	...

08007964 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4a07      	ldr	r2, [pc, #28]	@ (8007990 <vApplicationGetIdleTaskMemory+0x2c>)
 8007974:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	4a06      	ldr	r2, [pc, #24]	@ (8007994 <vApplicationGetIdleTaskMemory+0x30>)
 800797a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2280      	movs	r2, #128	@ 0x80
 8007980:	601a      	str	r2, [r3, #0]
}
 8007982:	bf00      	nop
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	200002f4 	.word	0x200002f4
 8007994:	2000039c 	.word	0x2000039c

08007998 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4a07      	ldr	r2, [pc, #28]	@ (80079c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80079a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	4a06      	ldr	r2, [pc, #24]	@ (80079c8 <vApplicationGetTimerTaskMemory+0x30>)
 80079ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80079b6:	601a      	str	r2, [r3, #0]
}
 80079b8:	bf00      	nop
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr
 80079c4:	2000059c 	.word	0x2000059c
 80079c8:	20000644 	.word	0x20000644

080079cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f103 0208 	add.w	r2, r3, #8
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f04f 32ff 	mov.w	r2, #4294967295
 80079e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f103 0208 	add.w	r2, r3, #8
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f103 0208 	add.w	r2, r3, #8
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a1a:	bf00      	nop
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a26:	b480      	push	{r7}
 8007a28:	b085      	sub	sp, #20
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	601a      	str	r2, [r3, #0]
}
 8007a62:	bf00      	nop
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b085      	sub	sp, #20
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a84:	d103      	bne.n	8007a8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	e00c      	b.n	8007aa8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	3308      	adds	r3, #8
 8007a92:	60fb      	str	r3, [r7, #12]
 8007a94:	e002      	b.n	8007a9c <vListInsert+0x2e>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	60fb      	str	r3, [r7, #12]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d2f6      	bcs.n	8007a96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	601a      	str	r2, [r3, #0]
}
 8007ad4:	bf00      	nop
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	6892      	ldr	r2, [r2, #8]
 8007af6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6852      	ldr	r2, [r2, #4]
 8007b00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d103      	bne.n	8007b14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689a      	ldr	r2, [r3, #8]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	1e5a      	subs	r2, r3, #1
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10b      	bne.n	8007b60 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007b5a:	bf00      	nop
 8007b5c:	bf00      	nop
 8007b5e:	e7fd      	b.n	8007b5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007b60:	f002 f8aa 	bl	8009cb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b6c:	68f9      	ldr	r1, [r7, #12]
 8007b6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007b70:	fb01 f303 	mul.w	r3, r1, r3
 8007b74:	441a      	add	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b90:	3b01      	subs	r3, #1
 8007b92:	68f9      	ldr	r1, [r7, #12]
 8007b94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007b96:	fb01 f303 	mul.w	r3, r1, r3
 8007b9a:	441a      	add	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	22ff      	movs	r2, #255	@ 0xff
 8007ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	22ff      	movs	r2, #255	@ 0xff
 8007bac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d114      	bne.n	8007be0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d01a      	beq.n	8007bf4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	3310      	adds	r3, #16
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f001 f942 	bl	8008e4c <xTaskRemoveFromEventList>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d012      	beq.n	8007bf4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007bce:	4b0d      	ldr	r3, [pc, #52]	@ (8007c04 <xQueueGenericReset+0xd0>)
 8007bd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	e009      	b.n	8007bf4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3310      	adds	r3, #16
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7ff fef1 	bl	80079cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	3324      	adds	r3, #36	@ 0x24
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7ff feec 	bl	80079cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007bf4:	f002 f892 	bl	8009d1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007bf8:	2301      	movs	r3, #1
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	e000ed04 	.word	0xe000ed04

08007c08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08e      	sub	sp, #56	@ 0x38
 8007c0c:	af02      	add	r7, sp, #8
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
 8007c14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10b      	bne.n	8007c34 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c2e:	bf00      	nop
 8007c30:	bf00      	nop
 8007c32:	e7fd      	b.n	8007c30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10b      	bne.n	8007c52 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c4c:	bf00      	nop
 8007c4e:	bf00      	nop
 8007c50:	e7fd      	b.n	8007c4e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <xQueueGenericCreateStatic+0x56>
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <xQueueGenericCreateStatic+0x5a>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e000      	b.n	8007c64 <xQueueGenericCreateStatic+0x5c>
 8007c62:	2300      	movs	r3, #0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10b      	bne.n	8007c80 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	623b      	str	r3, [r7, #32]
}
 8007c7a:	bf00      	nop
 8007c7c:	bf00      	nop
 8007c7e:	e7fd      	b.n	8007c7c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d102      	bne.n	8007c8c <xQueueGenericCreateStatic+0x84>
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <xQueueGenericCreateStatic+0x88>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e000      	b.n	8007c92 <xQueueGenericCreateStatic+0x8a>
 8007c90:	2300      	movs	r3, #0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10b      	bne.n	8007cae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	61fb      	str	r3, [r7, #28]
}
 8007ca8:	bf00      	nop
 8007caa:	bf00      	nop
 8007cac:	e7fd      	b.n	8007caa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007cae:	2350      	movs	r3, #80	@ 0x50
 8007cb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	2b50      	cmp	r3, #80	@ 0x50
 8007cb6:	d00b      	beq.n	8007cd0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	61bb      	str	r3, [r7, #24]
}
 8007cca:	bf00      	nop
 8007ccc:	bf00      	nop
 8007cce:	e7fd      	b.n	8007ccc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007cd0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00d      	beq.n	8007cf8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ce4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	4613      	mov	r3, r2
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 f805 	bl	8007d02 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3730      	adds	r7, #48	@ 0x30
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	60b9      	str	r1, [r7, #8]
 8007d0c:	607a      	str	r2, [r7, #4]
 8007d0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d103      	bne.n	8007d1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	69ba      	ldr	r2, [r7, #24]
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	e002      	b.n	8007d24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d30:	2101      	movs	r1, #1
 8007d32:	69b8      	ldr	r0, [r7, #24]
 8007d34:	f7ff fefe 	bl	8007b34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	78fa      	ldrb	r2, [r7, #3]
 8007d3c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d40:	bf00      	nop
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08e      	sub	sp, #56	@ 0x38
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d56:	2300      	movs	r3, #0
 8007d58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10b      	bne.n	8007d7c <xQueueGenericSend+0x34>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007d76:	bf00      	nop
 8007d78:	bf00      	nop
 8007d7a:	e7fd      	b.n	8007d78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d103      	bne.n	8007d8a <xQueueGenericSend+0x42>
 8007d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <xQueueGenericSend+0x46>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e000      	b.n	8007d90 <xQueueGenericSend+0x48>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10b      	bne.n	8007dac <xQueueGenericSend+0x64>
	__asm volatile
 8007d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d98:	f383 8811 	msr	BASEPRI, r3
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007da6:	bf00      	nop
 8007da8:	bf00      	nop
 8007daa:	e7fd      	b.n	8007da8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d103      	bne.n	8007dba <xQueueGenericSend+0x72>
 8007db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d101      	bne.n	8007dbe <xQueueGenericSend+0x76>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e000      	b.n	8007dc0 <xQueueGenericSend+0x78>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10b      	bne.n	8007ddc <xQueueGenericSend+0x94>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	623b      	str	r3, [r7, #32]
}
 8007dd6:	bf00      	nop
 8007dd8:	bf00      	nop
 8007dda:	e7fd      	b.n	8007dd8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ddc:	f001 f9fc 	bl	80091d8 <xTaskGetSchedulerState>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d102      	bne.n	8007dec <xQueueGenericSend+0xa4>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <xQueueGenericSend+0xa8>
 8007dec:	2301      	movs	r3, #1
 8007dee:	e000      	b.n	8007df2 <xQueueGenericSend+0xaa>
 8007df0:	2300      	movs	r3, #0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10b      	bne.n	8007e0e <xQueueGenericSend+0xc6>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	61fb      	str	r3, [r7, #28]
}
 8007e08:	bf00      	nop
 8007e0a:	bf00      	nop
 8007e0c:	e7fd      	b.n	8007e0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e0e:	f001 ff53 	bl	8009cb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d302      	bcc.n	8007e24 <xQueueGenericSend+0xdc>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d129      	bne.n	8007e78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	68b9      	ldr	r1, [r7, #8]
 8007e28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e2a:	f000 fa0f 	bl	800824c <prvCopyDataToQueue>
 8007e2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d010      	beq.n	8007e5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3a:	3324      	adds	r3, #36	@ 0x24
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f001 f805 	bl	8008e4c <xTaskRemoveFromEventList>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d013      	beq.n	8007e70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e48:	4b3f      	ldr	r3, [pc, #252]	@ (8007f48 <xQueueGenericSend+0x200>)
 8007e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	e00a      	b.n	8007e70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d007      	beq.n	8007e70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e60:	4b39      	ldr	r3, [pc, #228]	@ (8007f48 <xQueueGenericSend+0x200>)
 8007e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e66:	601a      	str	r2, [r3, #0]
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e70:	f001 ff54 	bl	8009d1c <vPortExitCritical>
				return pdPASS;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e063      	b.n	8007f40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d103      	bne.n	8007e86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e7e:	f001 ff4d 	bl	8009d1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e82:	2300      	movs	r3, #0
 8007e84:	e05c      	b.n	8007f40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d106      	bne.n	8007e9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e8c:	f107 0314 	add.w	r3, r7, #20
 8007e90:	4618      	mov	r0, r3
 8007e92:	f001 f83f 	bl	8008f14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e96:	2301      	movs	r3, #1
 8007e98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e9a:	f001 ff3f 	bl	8009d1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e9e:	f000 fda7 	bl	80089f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ea2:	f001 ff09 	bl	8009cb8 <vPortEnterCritical>
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007eac:	b25b      	sxtb	r3, r3
 8007eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb2:	d103      	bne.n	8007ebc <xQueueGenericSend+0x174>
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ec2:	b25b      	sxtb	r3, r3
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec8:	d103      	bne.n	8007ed2 <xQueueGenericSend+0x18a>
 8007eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ed2:	f001 ff23 	bl	8009d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ed6:	1d3a      	adds	r2, r7, #4
 8007ed8:	f107 0314 	add.w	r3, r7, #20
 8007edc:	4611      	mov	r1, r2
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f001 f82e 	bl	8008f40 <xTaskCheckForTimeOut>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d124      	bne.n	8007f34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007eea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007eec:	f000 faa6 	bl	800843c <prvIsQueueFull>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d018      	beq.n	8007f28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef8:	3310      	adds	r3, #16
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	4611      	mov	r1, r2
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 ff52 	bl	8008da8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f06:	f000 fa31 	bl	800836c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f0a:	f000 fd7f 	bl	8008a0c <xTaskResumeAll>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f47f af7c 	bne.w	8007e0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007f16:	4b0c      	ldr	r3, [pc, #48]	@ (8007f48 <xQueueGenericSend+0x200>)
 8007f18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	e772      	b.n	8007e0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f2a:	f000 fa1f 	bl	800836c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f2e:	f000 fd6d 	bl	8008a0c <xTaskResumeAll>
 8007f32:	e76c      	b.n	8007e0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f36:	f000 fa19 	bl	800836c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f3a:	f000 fd67 	bl	8008a0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3738      	adds	r7, #56	@ 0x38
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	e000ed04 	.word	0xe000ed04

08007f4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b090      	sub	sp, #64	@ 0x40
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
 8007f58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10b      	bne.n	8007f7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f76:	bf00      	nop
 8007f78:	bf00      	nop
 8007f7a:	e7fd      	b.n	8007f78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d103      	bne.n	8007f8a <xQueueGenericSendFromISR+0x3e>
 8007f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <xQueueGenericSendFromISR+0x42>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e000      	b.n	8007f90 <xQueueGenericSendFromISR+0x44>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10b      	bne.n	8007fac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007fa6:	bf00      	nop
 8007fa8:	bf00      	nop
 8007faa:	e7fd      	b.n	8007fa8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d103      	bne.n	8007fba <xQueueGenericSendFromISR+0x6e>
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d101      	bne.n	8007fbe <xQueueGenericSendFromISR+0x72>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e000      	b.n	8007fc0 <xQueueGenericSendFromISR+0x74>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10b      	bne.n	8007fdc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	623b      	str	r3, [r7, #32]
}
 8007fd6:	bf00      	nop
 8007fd8:	bf00      	nop
 8007fda:	e7fd      	b.n	8007fd8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fdc:	f001 ff4c 	bl	8009e78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007fe0:	f3ef 8211 	mrs	r2, BASEPRI
 8007fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	61fa      	str	r2, [r7, #28]
 8007ff6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ff8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ffa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008004:	429a      	cmp	r2, r3
 8008006:	d302      	bcc.n	800800e <xQueueGenericSendFromISR+0xc2>
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	2b02      	cmp	r3, #2
 800800c:	d12f      	bne.n	800806e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800800e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008010:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008014:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800801c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	68b9      	ldr	r1, [r7, #8]
 8008022:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008024:	f000 f912 	bl	800824c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008028:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800802c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008030:	d112      	bne.n	8008058 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008036:	2b00      	cmp	r3, #0
 8008038:	d016      	beq.n	8008068 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800803a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803c:	3324      	adds	r3, #36	@ 0x24
 800803e:	4618      	mov	r0, r3
 8008040:	f000 ff04 	bl	8008e4c <xTaskRemoveFromEventList>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00e      	beq.n	8008068 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00b      	beq.n	8008068 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	e007      	b.n	8008068 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008058:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800805c:	3301      	adds	r3, #1
 800805e:	b2db      	uxtb	r3, r3
 8008060:	b25a      	sxtb	r2, r3
 8008062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008068:	2301      	movs	r3, #1
 800806a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800806c:	e001      	b.n	8008072 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800806e:	2300      	movs	r3, #0
 8008070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008074:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800807c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800807e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008080:	4618      	mov	r0, r3
 8008082:	3740      	adds	r7, #64	@ 0x40
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08c      	sub	sp, #48	@ 0x30
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008094:	2300      	movs	r3, #0
 8008096:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800809c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10b      	bne.n	80080ba <xQueueReceive+0x32>
	__asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	623b      	str	r3, [r7, #32]
}
 80080b4:	bf00      	nop
 80080b6:	bf00      	nop
 80080b8:	e7fd      	b.n	80080b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d103      	bne.n	80080c8 <xQueueReceive+0x40>
 80080c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <xQueueReceive+0x44>
 80080c8:	2301      	movs	r3, #1
 80080ca:	e000      	b.n	80080ce <xQueueReceive+0x46>
 80080cc:	2300      	movs	r3, #0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10b      	bne.n	80080ea <xQueueReceive+0x62>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	61fb      	str	r3, [r7, #28]
}
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop
 80080e8:	e7fd      	b.n	80080e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080ea:	f001 f875 	bl	80091d8 <xTaskGetSchedulerState>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d102      	bne.n	80080fa <xQueueReceive+0x72>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <xQueueReceive+0x76>
 80080fa:	2301      	movs	r3, #1
 80080fc:	e000      	b.n	8008100 <xQueueReceive+0x78>
 80080fe:	2300      	movs	r3, #0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10b      	bne.n	800811c <xQueueReceive+0x94>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	61bb      	str	r3, [r7, #24]
}
 8008116:	bf00      	nop
 8008118:	bf00      	nop
 800811a:	e7fd      	b.n	8008118 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800811c:	f001 fdcc 	bl	8009cb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008124:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008128:	2b00      	cmp	r3, #0
 800812a:	d01f      	beq.n	800816c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800812c:	68b9      	ldr	r1, [r7, #8]
 800812e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008130:	f000 f8f6 	bl	8008320 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008136:	1e5a      	subs	r2, r3, #1
 8008138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800813c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00f      	beq.n	8008164 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008146:	3310      	adds	r3, #16
 8008148:	4618      	mov	r0, r3
 800814a:	f000 fe7f 	bl	8008e4c <xTaskRemoveFromEventList>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d007      	beq.n	8008164 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008154:	4b3c      	ldr	r3, [pc, #240]	@ (8008248 <xQueueReceive+0x1c0>)
 8008156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008164:	f001 fdda 	bl	8009d1c <vPortExitCritical>
				return pdPASS;
 8008168:	2301      	movs	r3, #1
 800816a:	e069      	b.n	8008240 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d103      	bne.n	800817a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008172:	f001 fdd3 	bl	8009d1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008176:	2300      	movs	r3, #0
 8008178:	e062      	b.n	8008240 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800817a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800817c:	2b00      	cmp	r3, #0
 800817e:	d106      	bne.n	800818e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008180:	f107 0310 	add.w	r3, r7, #16
 8008184:	4618      	mov	r0, r3
 8008186:	f000 fec5 	bl	8008f14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800818a:	2301      	movs	r3, #1
 800818c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800818e:	f001 fdc5 	bl	8009d1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008192:	f000 fc2d 	bl	80089f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008196:	f001 fd8f 	bl	8009cb8 <vPortEnterCritical>
 800819a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081a0:	b25b      	sxtb	r3, r3
 80081a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a6:	d103      	bne.n	80081b0 <xQueueReceive+0x128>
 80081a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081b6:	b25b      	sxtb	r3, r3
 80081b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081bc:	d103      	bne.n	80081c6 <xQueueReceive+0x13e>
 80081be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081c6:	f001 fda9 	bl	8009d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081ca:	1d3a      	adds	r2, r7, #4
 80081cc:	f107 0310 	add.w	r3, r7, #16
 80081d0:	4611      	mov	r1, r2
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 feb4 	bl	8008f40 <xTaskCheckForTimeOut>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d123      	bne.n	8008226 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081e0:	f000 f916 	bl	8008410 <prvIsQueueEmpty>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d017      	beq.n	800821a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ec:	3324      	adds	r3, #36	@ 0x24
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	4611      	mov	r1, r2
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 fdd8 	bl	8008da8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081fa:	f000 f8b7 	bl	800836c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081fe:	f000 fc05 	bl	8008a0c <xTaskResumeAll>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d189      	bne.n	800811c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008208:	4b0f      	ldr	r3, [pc, #60]	@ (8008248 <xQueueReceive+0x1c0>)
 800820a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	e780      	b.n	800811c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800821a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800821c:	f000 f8a6 	bl	800836c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008220:	f000 fbf4 	bl	8008a0c <xTaskResumeAll>
 8008224:	e77a      	b.n	800811c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008228:	f000 f8a0 	bl	800836c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800822c:	f000 fbee 	bl	8008a0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008230:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008232:	f000 f8ed 	bl	8008410 <prvIsQueueEmpty>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	f43f af6f 	beq.w	800811c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800823e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008240:	4618      	mov	r0, r3
 8008242:	3730      	adds	r7, #48	@ 0x30
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	e000ed04 	.word	0xe000ed04

0800824c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008258:	2300      	movs	r3, #0
 800825a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008260:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10d      	bne.n	8008286 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d14d      	bne.n	800830e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	4618      	mov	r0, r3
 8008278:	f000 ffcc 	bl	8009214 <xTaskPriorityDisinherit>
 800827c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	609a      	str	r2, [r3, #8]
 8008284:	e043      	b.n	800830e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d119      	bne.n	80082c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6858      	ldr	r0, [r3, #4]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008294:	461a      	mov	r2, r3
 8008296:	68b9      	ldr	r1, [r7, #8]
 8008298:	f002 f8a2 	bl	800a3e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082a4:	441a      	add	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d32b      	bcc.n	800830e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	605a      	str	r2, [r3, #4]
 80082be:	e026      	b.n	800830e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	68d8      	ldr	r0, [r3, #12]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c8:	461a      	mov	r2, r3
 80082ca:	68b9      	ldr	r1, [r7, #8]
 80082cc:	f002 f888 	bl	800a3e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	68da      	ldr	r2, [r3, #12]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082d8:	425b      	negs	r3, r3
 80082da:	441a      	add	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d207      	bcs.n	80082fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	689a      	ldr	r2, [r3, #8]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f4:	425b      	negs	r3, r3
 80082f6:	441a      	add	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d105      	bne.n	800830e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	3b01      	subs	r3, #1
 800830c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	1c5a      	adds	r2, r3, #1
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008316:	697b      	ldr	r3, [r7, #20]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3718      	adds	r7, #24
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800832e:	2b00      	cmp	r3, #0
 8008330:	d018      	beq.n	8008364 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68da      	ldr	r2, [r3, #12]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800833a:	441a      	add	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	68da      	ldr	r2, [r3, #12]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	429a      	cmp	r2, r3
 800834a:	d303      	bcc.n	8008354 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68d9      	ldr	r1, [r3, #12]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800835c:	461a      	mov	r2, r3
 800835e:	6838      	ldr	r0, [r7, #0]
 8008360:	f002 f83e 	bl	800a3e0 <memcpy>
	}
}
 8008364:	bf00      	nop
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008374:	f001 fca0 	bl	8009cb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800837e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008380:	e011      	b.n	80083a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008386:	2b00      	cmp	r3, #0
 8008388:	d012      	beq.n	80083b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	3324      	adds	r3, #36	@ 0x24
 800838e:	4618      	mov	r0, r3
 8008390:	f000 fd5c 	bl	8008e4c <xTaskRemoveFromEventList>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800839a:	f000 fe35 	bl	8009008 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800839e:	7bfb      	ldrb	r3, [r7, #15]
 80083a0:	3b01      	subs	r3, #1
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	dce9      	bgt.n	8008382 <prvUnlockQueue+0x16>
 80083ae:	e000      	b.n	80083b2 <prvUnlockQueue+0x46>
					break;
 80083b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	22ff      	movs	r2, #255	@ 0xff
 80083b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80083ba:	f001 fcaf 	bl	8009d1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80083be:	f001 fc7b 	bl	8009cb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083ca:	e011      	b.n	80083f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d012      	beq.n	80083fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	3310      	adds	r3, #16
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 fd37 	bl	8008e4c <xTaskRemoveFromEventList>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d001      	beq.n	80083e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80083e4:	f000 fe10 	bl	8009008 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80083e8:	7bbb      	ldrb	r3, [r7, #14]
 80083ea:	3b01      	subs	r3, #1
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	dce9      	bgt.n	80083cc <prvUnlockQueue+0x60>
 80083f8:	e000      	b.n	80083fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80083fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	22ff      	movs	r2, #255	@ 0xff
 8008400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008404:	f001 fc8a 	bl	8009d1c <vPortExitCritical>
}
 8008408:	bf00      	nop
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008418:	f001 fc4e 	bl	8009cb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008420:	2b00      	cmp	r3, #0
 8008422:	d102      	bne.n	800842a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008424:	2301      	movs	r3, #1
 8008426:	60fb      	str	r3, [r7, #12]
 8008428:	e001      	b.n	800842e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800842a:	2300      	movs	r3, #0
 800842c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800842e:	f001 fc75 	bl	8009d1c <vPortExitCritical>

	return xReturn;
 8008432:	68fb      	ldr	r3, [r7, #12]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008444:	f001 fc38 	bl	8009cb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008450:	429a      	cmp	r2, r3
 8008452:	d102      	bne.n	800845a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008454:	2301      	movs	r3, #1
 8008456:	60fb      	str	r3, [r7, #12]
 8008458:	e001      	b.n	800845e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800845a:	2300      	movs	r3, #0
 800845c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800845e:	f001 fc5d 	bl	8009d1c <vPortExitCritical>

	return xReturn;
 8008462:	68fb      	ldr	r3, [r7, #12]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008476:	2300      	movs	r3, #0
 8008478:	60fb      	str	r3, [r7, #12]
 800847a:	e014      	b.n	80084a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800847c:	4a0f      	ldr	r2, [pc, #60]	@ (80084bc <vQueueAddToRegistry+0x50>)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10b      	bne.n	80084a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008488:	490c      	ldr	r1, [pc, #48]	@ (80084bc <vQueueAddToRegistry+0x50>)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008492:	4a0a      	ldr	r2, [pc, #40]	@ (80084bc <vQueueAddToRegistry+0x50>)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	4413      	add	r3, r2
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800849e:	e006      	b.n	80084ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	3301      	adds	r3, #1
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b07      	cmp	r3, #7
 80084aa:	d9e7      	bls.n	800847c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80084ac:	bf00      	nop
 80084ae:	bf00      	nop
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	20000a44 	.word	0x20000a44

080084c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80084d0:	f001 fbf2 	bl	8009cb8 <vPortEnterCritical>
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084da:	b25b      	sxtb	r3, r3
 80084dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e0:	d103      	bne.n	80084ea <vQueueWaitForMessageRestricted+0x2a>
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084f0:	b25b      	sxtb	r3, r3
 80084f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f6:	d103      	bne.n	8008500 <vQueueWaitForMessageRestricted+0x40>
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008500:	f001 fc0c 	bl	8009d1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008508:	2b00      	cmp	r3, #0
 800850a:	d106      	bne.n	800851a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	3324      	adds	r3, #36	@ 0x24
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	68b9      	ldr	r1, [r7, #8]
 8008514:	4618      	mov	r0, r3
 8008516:	f000 fc6d 	bl	8008df4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800851a:	6978      	ldr	r0, [r7, #20]
 800851c:	f7ff ff26 	bl	800836c <prvUnlockQueue>
	}
 8008520:	bf00      	nop
 8008522:	3718      	adds	r7, #24
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008528:	b580      	push	{r7, lr}
 800852a:	b08e      	sub	sp, #56	@ 0x38
 800852c:	af04      	add	r7, sp, #16
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
 8008534:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10b      	bne.n	8008554 <xTaskCreateStatic+0x2c>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	623b      	str	r3, [r7, #32]
}
 800854e:	bf00      	nop
 8008550:	bf00      	nop
 8008552:	e7fd      	b.n	8008550 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10b      	bne.n	8008572 <xTaskCreateStatic+0x4a>
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	61fb      	str	r3, [r7, #28]
}
 800856c:	bf00      	nop
 800856e:	bf00      	nop
 8008570:	e7fd      	b.n	800856e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008572:	23a8      	movs	r3, #168	@ 0xa8
 8008574:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	2ba8      	cmp	r3, #168	@ 0xa8
 800857a:	d00b      	beq.n	8008594 <xTaskCreateStatic+0x6c>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	61bb      	str	r3, [r7, #24]
}
 800858e:	bf00      	nop
 8008590:	bf00      	nop
 8008592:	e7fd      	b.n	8008590 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008594:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008598:	2b00      	cmp	r3, #0
 800859a:	d01e      	beq.n	80085da <xTaskCreateStatic+0xb2>
 800859c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d01b      	beq.n	80085da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80085a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80085aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80085ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ae:	2202      	movs	r2, #2
 80085b0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085b4:	2300      	movs	r3, #0
 80085b6:	9303      	str	r3, [sp, #12]
 80085b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ba:	9302      	str	r3, [sp, #8]
 80085bc:	f107 0314 	add.w	r3, r7, #20
 80085c0:	9301      	str	r3, [sp, #4]
 80085c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	68b9      	ldr	r1, [r7, #8]
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 f851 	bl	8008674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80085d4:	f000 f8f6 	bl	80087c4 <prvAddNewTaskToReadyList>
 80085d8:	e001      	b.n	80085de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80085da:	2300      	movs	r3, #0
 80085dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80085de:	697b      	ldr	r3, [r7, #20]
	}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3728      	adds	r7, #40	@ 0x28
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08c      	sub	sp, #48	@ 0x30
 80085ec:	af04      	add	r7, sp, #16
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	603b      	str	r3, [r7, #0]
 80085f4:	4613      	mov	r3, r2
 80085f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80085f8:	88fb      	ldrh	r3, [r7, #6]
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4618      	mov	r0, r3
 80085fe:	f001 fc7d 	bl	8009efc <pvPortMalloc>
 8008602:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00e      	beq.n	8008628 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800860a:	20a8      	movs	r0, #168	@ 0xa8
 800860c:	f001 fc76 	bl	8009efc <pvPortMalloc>
 8008610:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d003      	beq.n	8008620 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	631a      	str	r2, [r3, #48]	@ 0x30
 800861e:	e005      	b.n	800862c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008620:	6978      	ldr	r0, [r7, #20]
 8008622:	f001 fd39 	bl	800a098 <vPortFree>
 8008626:	e001      	b.n	800862c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008628:	2300      	movs	r3, #0
 800862a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d017      	beq.n	8008662 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800863a:	88fa      	ldrh	r2, [r7, #6]
 800863c:	2300      	movs	r3, #0
 800863e:	9303      	str	r3, [sp, #12]
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	9302      	str	r3, [sp, #8]
 8008644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008646:	9301      	str	r3, [sp, #4]
 8008648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	68b9      	ldr	r1, [r7, #8]
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 f80f 	bl	8008674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008656:	69f8      	ldr	r0, [r7, #28]
 8008658:	f000 f8b4 	bl	80087c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800865c:	2301      	movs	r3, #1
 800865e:	61bb      	str	r3, [r7, #24]
 8008660:	e002      	b.n	8008668 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008662:	f04f 33ff 	mov.w	r3, #4294967295
 8008666:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008668:	69bb      	ldr	r3, [r7, #24]
	}
 800866a:	4618      	mov	r0, r3
 800866c:	3720      	adds	r7, #32
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
	...

08008674 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b088      	sub	sp, #32
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
 8008680:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008684:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	461a      	mov	r2, r3
 800868c:	21a5      	movs	r1, #165	@ 0xa5
 800868e:	f001 fe23 	bl	800a2d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008694:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800869c:	3b01      	subs	r3, #1
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4413      	add	r3, r2
 80086a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	f023 0307 	bic.w	r3, r3, #7
 80086aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	f003 0307 	and.w	r3, r3, #7
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00b      	beq.n	80086ce <prvInitialiseNewTask+0x5a>
	__asm volatile
 80086b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	617b      	str	r3, [r7, #20]
}
 80086c8:	bf00      	nop
 80086ca:	bf00      	nop
 80086cc:	e7fd      	b.n	80086ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d01f      	beq.n	8008714 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086d4:	2300      	movs	r3, #0
 80086d6:	61fb      	str	r3, [r7, #28]
 80086d8:	e012      	b.n	8008700 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	4413      	add	r3, r2
 80086e0:	7819      	ldrb	r1, [r3, #0]
 80086e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	4413      	add	r3, r2
 80086e8:	3334      	adds	r3, #52	@ 0x34
 80086ea:	460a      	mov	r2, r1
 80086ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	4413      	add	r3, r2
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d006      	beq.n	8008708 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	3301      	adds	r3, #1
 80086fe:	61fb      	str	r3, [r7, #28]
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	2b0f      	cmp	r3, #15
 8008704:	d9e9      	bls.n	80086da <prvInitialiseNewTask+0x66>
 8008706:	e000      	b.n	800870a <prvInitialiseNewTask+0x96>
			{
				break;
 8008708:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800870a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008712:	e003      	b.n	800871c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008716:	2200      	movs	r2, #0
 8008718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800871c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800871e:	2b37      	cmp	r3, #55	@ 0x37
 8008720:	d901      	bls.n	8008726 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008722:	2337      	movs	r3, #55	@ 0x37
 8008724:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800872a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800872c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008730:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008734:	2200      	movs	r2, #0
 8008736:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873a:	3304      	adds	r3, #4
 800873c:	4618      	mov	r0, r3
 800873e:	f7ff f965 	bl	8007a0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008744:	3318      	adds	r3, #24
 8008746:	4618      	mov	r0, r3
 8008748:	f7ff f960 	bl	8007a0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800874c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008750:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008754:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800875c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008760:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008764:	2200      	movs	r2, #0
 8008766:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800876a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876c:	2200      	movs	r2, #0
 800876e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008774:	3354      	adds	r3, #84	@ 0x54
 8008776:	224c      	movs	r2, #76	@ 0x4c
 8008778:	2100      	movs	r1, #0
 800877a:	4618      	mov	r0, r3
 800877c:	f001 fdac 	bl	800a2d8 <memset>
 8008780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008782:	4a0d      	ldr	r2, [pc, #52]	@ (80087b8 <prvInitialiseNewTask+0x144>)
 8008784:	659a      	str	r2, [r3, #88]	@ 0x58
 8008786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008788:	4a0c      	ldr	r2, [pc, #48]	@ (80087bc <prvInitialiseNewTask+0x148>)
 800878a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800878c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878e:	4a0c      	ldr	r2, [pc, #48]	@ (80087c0 <prvInitialiseNewTask+0x14c>)
 8008790:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	68f9      	ldr	r1, [r7, #12]
 8008796:	69b8      	ldr	r0, [r7, #24]
 8008798:	f001 f95a 	bl	8009a50 <pxPortInitialiseStack>
 800879c:	4602      	mov	r2, r0
 800879e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80087a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d002      	beq.n	80087ae <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80087a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087ae:	bf00      	nop
 80087b0:	3720      	adds	r7, #32
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	20001c90 	.word	0x20001c90
 80087bc:	20001cf8 	.word	0x20001cf8
 80087c0:	20001d60 	.word	0x20001d60

080087c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80087cc:	f001 fa74 	bl	8009cb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80087d0:	4b2d      	ldr	r3, [pc, #180]	@ (8008888 <prvAddNewTaskToReadyList+0xc4>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3301      	adds	r3, #1
 80087d6:	4a2c      	ldr	r2, [pc, #176]	@ (8008888 <prvAddNewTaskToReadyList+0xc4>)
 80087d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80087da:	4b2c      	ldr	r3, [pc, #176]	@ (800888c <prvAddNewTaskToReadyList+0xc8>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d109      	bne.n	80087f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80087e2:	4a2a      	ldr	r2, [pc, #168]	@ (800888c <prvAddNewTaskToReadyList+0xc8>)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80087e8:	4b27      	ldr	r3, [pc, #156]	@ (8008888 <prvAddNewTaskToReadyList+0xc4>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d110      	bne.n	8008812 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80087f0:	f000 fc2e 	bl	8009050 <prvInitialiseTaskLists>
 80087f4:	e00d      	b.n	8008812 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80087f6:	4b26      	ldr	r3, [pc, #152]	@ (8008890 <prvAddNewTaskToReadyList+0xcc>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d109      	bne.n	8008812 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80087fe:	4b23      	ldr	r3, [pc, #140]	@ (800888c <prvAddNewTaskToReadyList+0xc8>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008808:	429a      	cmp	r2, r3
 800880a:	d802      	bhi.n	8008812 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800880c:	4a1f      	ldr	r2, [pc, #124]	@ (800888c <prvAddNewTaskToReadyList+0xc8>)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008812:	4b20      	ldr	r3, [pc, #128]	@ (8008894 <prvAddNewTaskToReadyList+0xd0>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3301      	adds	r3, #1
 8008818:	4a1e      	ldr	r2, [pc, #120]	@ (8008894 <prvAddNewTaskToReadyList+0xd0>)
 800881a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800881c:	4b1d      	ldr	r3, [pc, #116]	@ (8008894 <prvAddNewTaskToReadyList+0xd0>)
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008828:	4b1b      	ldr	r3, [pc, #108]	@ (8008898 <prvAddNewTaskToReadyList+0xd4>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	429a      	cmp	r2, r3
 800882e:	d903      	bls.n	8008838 <prvAddNewTaskToReadyList+0x74>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008834:	4a18      	ldr	r2, [pc, #96]	@ (8008898 <prvAddNewTaskToReadyList+0xd4>)
 8008836:	6013      	str	r3, [r2, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800883c:	4613      	mov	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4a15      	ldr	r2, [pc, #84]	@ (800889c <prvAddNewTaskToReadyList+0xd8>)
 8008846:	441a      	add	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	3304      	adds	r3, #4
 800884c:	4619      	mov	r1, r3
 800884e:	4610      	mov	r0, r2
 8008850:	f7ff f8e9 	bl	8007a26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008854:	f001 fa62 	bl	8009d1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008858:	4b0d      	ldr	r3, [pc, #52]	@ (8008890 <prvAddNewTaskToReadyList+0xcc>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00e      	beq.n	800887e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008860:	4b0a      	ldr	r3, [pc, #40]	@ (800888c <prvAddNewTaskToReadyList+0xc8>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886a:	429a      	cmp	r2, r3
 800886c:	d207      	bcs.n	800887e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800886e:	4b0c      	ldr	r3, [pc, #48]	@ (80088a0 <prvAddNewTaskToReadyList+0xdc>)
 8008870:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008874:	601a      	str	r2, [r3, #0]
 8008876:	f3bf 8f4f 	dsb	sy
 800887a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800887e:	bf00      	nop
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	20000f58 	.word	0x20000f58
 800888c:	20000a84 	.word	0x20000a84
 8008890:	20000f64 	.word	0x20000f64
 8008894:	20000f74 	.word	0x20000f74
 8008898:	20000f60 	.word	0x20000f60
 800889c:	20000a88 	.word	0x20000a88
 80088a0:	e000ed04 	.word	0xe000ed04

080088a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80088ac:	2300      	movs	r3, #0
 80088ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d018      	beq.n	80088e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80088b6:	4b14      	ldr	r3, [pc, #80]	@ (8008908 <vTaskDelay+0x64>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00b      	beq.n	80088d6 <vTaskDelay+0x32>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	60bb      	str	r3, [r7, #8]
}
 80088d0:	bf00      	nop
 80088d2:	bf00      	nop
 80088d4:	e7fd      	b.n	80088d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80088d6:	f000 f88b 	bl	80089f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088da:	2100      	movs	r1, #0
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fd09 	bl	80092f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80088e2:	f000 f893 	bl	8008a0c <xTaskResumeAll>
 80088e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d107      	bne.n	80088fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80088ee:	4b07      	ldr	r3, [pc, #28]	@ (800890c <vTaskDelay+0x68>)
 80088f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088f4:	601a      	str	r2, [r3, #0]
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80088fe:	bf00      	nop
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	20000f80 	.word	0x20000f80
 800890c:	e000ed04 	.word	0xe000ed04

08008910 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b08a      	sub	sp, #40	@ 0x28
 8008914:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008916:	2300      	movs	r3, #0
 8008918:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800891a:	2300      	movs	r3, #0
 800891c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800891e:	463a      	mov	r2, r7
 8008920:	1d39      	adds	r1, r7, #4
 8008922:	f107 0308 	add.w	r3, r7, #8
 8008926:	4618      	mov	r0, r3
 8008928:	f7ff f81c 	bl	8007964 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800892c:	6839      	ldr	r1, [r7, #0]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	68ba      	ldr	r2, [r7, #8]
 8008932:	9202      	str	r2, [sp, #8]
 8008934:	9301      	str	r3, [sp, #4]
 8008936:	2300      	movs	r3, #0
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	2300      	movs	r3, #0
 800893c:	460a      	mov	r2, r1
 800893e:	4924      	ldr	r1, [pc, #144]	@ (80089d0 <vTaskStartScheduler+0xc0>)
 8008940:	4824      	ldr	r0, [pc, #144]	@ (80089d4 <vTaskStartScheduler+0xc4>)
 8008942:	f7ff fdf1 	bl	8008528 <xTaskCreateStatic>
 8008946:	4603      	mov	r3, r0
 8008948:	4a23      	ldr	r2, [pc, #140]	@ (80089d8 <vTaskStartScheduler+0xc8>)
 800894a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800894c:	4b22      	ldr	r3, [pc, #136]	@ (80089d8 <vTaskStartScheduler+0xc8>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d002      	beq.n	800895a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008954:	2301      	movs	r3, #1
 8008956:	617b      	str	r3, [r7, #20]
 8008958:	e001      	b.n	800895e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800895a:	2300      	movs	r3, #0
 800895c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d102      	bne.n	800896a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008964:	f000 fd1a 	bl	800939c <xTimerCreateTimerTask>
 8008968:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d11b      	bne.n	80089a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	613b      	str	r3, [r7, #16]
}
 8008982:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008984:	4b15      	ldr	r3, [pc, #84]	@ (80089dc <vTaskStartScheduler+0xcc>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3354      	adds	r3, #84	@ 0x54
 800898a:	4a15      	ldr	r2, [pc, #84]	@ (80089e0 <vTaskStartScheduler+0xd0>)
 800898c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800898e:	4b15      	ldr	r3, [pc, #84]	@ (80089e4 <vTaskStartScheduler+0xd4>)
 8008990:	f04f 32ff 	mov.w	r2, #4294967295
 8008994:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008996:	4b14      	ldr	r3, [pc, #80]	@ (80089e8 <vTaskStartScheduler+0xd8>)
 8008998:	2201      	movs	r2, #1
 800899a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800899c:	4b13      	ldr	r3, [pc, #76]	@ (80089ec <vTaskStartScheduler+0xdc>)
 800899e:	2200      	movs	r2, #0
 80089a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80089a2:	f001 f8e5 	bl	8009b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80089a6:	e00f      	b.n	80089c8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ae:	d10b      	bne.n	80089c8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	60fb      	str	r3, [r7, #12]
}
 80089c2:	bf00      	nop
 80089c4:	bf00      	nop
 80089c6:	e7fd      	b.n	80089c4 <vTaskStartScheduler+0xb4>
}
 80089c8:	bf00      	nop
 80089ca:	3718      	adds	r7, #24
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	0800a50c 	.word	0x0800a50c
 80089d4:	08009021 	.word	0x08009021
 80089d8:	20000f7c 	.word	0x20000f7c
 80089dc:	20000a84 	.word	0x20000a84
 80089e0:	20000010 	.word	0x20000010
 80089e4:	20000f78 	.word	0x20000f78
 80089e8:	20000f64 	.word	0x20000f64
 80089ec:	20000f5c 	.word	0x20000f5c

080089f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80089f0:	b480      	push	{r7}
 80089f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80089f4:	4b04      	ldr	r3, [pc, #16]	@ (8008a08 <vTaskSuspendAll+0x18>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	3301      	adds	r3, #1
 80089fa:	4a03      	ldr	r2, [pc, #12]	@ (8008a08 <vTaskSuspendAll+0x18>)
 80089fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80089fe:	bf00      	nop
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr
 8008a08:	20000f80 	.word	0x20000f80

08008a0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a12:	2300      	movs	r3, #0
 8008a14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a16:	2300      	movs	r3, #0
 8008a18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a1a:	4b42      	ldr	r3, [pc, #264]	@ (8008b24 <xTaskResumeAll+0x118>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10b      	bne.n	8008a3a <xTaskResumeAll+0x2e>
	__asm volatile
 8008a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a26:	f383 8811 	msr	BASEPRI, r3
 8008a2a:	f3bf 8f6f 	isb	sy
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	603b      	str	r3, [r7, #0]
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop
 8008a38:	e7fd      	b.n	8008a36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a3a:	f001 f93d 	bl	8009cb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a3e:	4b39      	ldr	r3, [pc, #228]	@ (8008b24 <xTaskResumeAll+0x118>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	4a37      	ldr	r2, [pc, #220]	@ (8008b24 <xTaskResumeAll+0x118>)
 8008a46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a48:	4b36      	ldr	r3, [pc, #216]	@ (8008b24 <xTaskResumeAll+0x118>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d162      	bne.n	8008b16 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a50:	4b35      	ldr	r3, [pc, #212]	@ (8008b28 <xTaskResumeAll+0x11c>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d05e      	beq.n	8008b16 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a58:	e02f      	b.n	8008aba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a5a:	4b34      	ldr	r3, [pc, #208]	@ (8008b2c <xTaskResumeAll+0x120>)
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3318      	adds	r3, #24
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7ff f83a 	bl	8007ae0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	3304      	adds	r3, #4
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7ff f835 	bl	8007ae0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8008b30 <xTaskResumeAll+0x124>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d903      	bls.n	8008a8a <xTaskResumeAll+0x7e>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a86:	4a2a      	ldr	r2, [pc, #168]	@ (8008b30 <xTaskResumeAll+0x124>)
 8008a88:	6013      	str	r3, [r2, #0]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a8e:	4613      	mov	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	4a27      	ldr	r2, [pc, #156]	@ (8008b34 <xTaskResumeAll+0x128>)
 8008a98:	441a      	add	r2, r3
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	f7fe ffc0 	bl	8007a26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aaa:	4b23      	ldr	r3, [pc, #140]	@ (8008b38 <xTaskResumeAll+0x12c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d302      	bcc.n	8008aba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008ab4:	4b21      	ldr	r3, [pc, #132]	@ (8008b3c <xTaskResumeAll+0x130>)
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008aba:	4b1c      	ldr	r3, [pc, #112]	@ (8008b2c <xTaskResumeAll+0x120>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1cb      	bne.n	8008a5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008ac8:	f000 fb66 	bl	8009198 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008acc:	4b1c      	ldr	r3, [pc, #112]	@ (8008b40 <xTaskResumeAll+0x134>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d010      	beq.n	8008afa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ad8:	f000 f846 	bl	8008b68 <xTaskIncrementTick>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d002      	beq.n	8008ae8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008ae2:	4b16      	ldr	r3, [pc, #88]	@ (8008b3c <xTaskResumeAll+0x130>)
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	3b01      	subs	r3, #1
 8008aec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1f1      	bne.n	8008ad8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008af4:	4b12      	ldr	r3, [pc, #72]	@ (8008b40 <xTaskResumeAll+0x134>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008afa:	4b10      	ldr	r3, [pc, #64]	@ (8008b3c <xTaskResumeAll+0x130>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d009      	beq.n	8008b16 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b02:	2301      	movs	r3, #1
 8008b04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b06:	4b0f      	ldr	r3, [pc, #60]	@ (8008b44 <xTaskResumeAll+0x138>)
 8008b08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b16:	f001 f901 	bl	8009d1c <vPortExitCritical>

	return xAlreadyYielded;
 8008b1a:	68bb      	ldr	r3, [r7, #8]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	20000f80 	.word	0x20000f80
 8008b28:	20000f58 	.word	0x20000f58
 8008b2c:	20000f18 	.word	0x20000f18
 8008b30:	20000f60 	.word	0x20000f60
 8008b34:	20000a88 	.word	0x20000a88
 8008b38:	20000a84 	.word	0x20000a84
 8008b3c:	20000f6c 	.word	0x20000f6c
 8008b40:	20000f68 	.word	0x20000f68
 8008b44:	e000ed04 	.word	0xe000ed04

08008b48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b4e:	4b05      	ldr	r3, [pc, #20]	@ (8008b64 <xTaskGetTickCount+0x1c>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b54:	687b      	ldr	r3, [r7, #4]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	20000f5c 	.word	0x20000f5c

08008b68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b72:	4b4f      	ldr	r3, [pc, #316]	@ (8008cb0 <xTaskIncrementTick+0x148>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f040 8090 	bne.w	8008c9c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b7c:	4b4d      	ldr	r3, [pc, #308]	@ (8008cb4 <xTaskIncrementTick+0x14c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	3301      	adds	r3, #1
 8008b82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b84:	4a4b      	ldr	r2, [pc, #300]	@ (8008cb4 <xTaskIncrementTick+0x14c>)
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d121      	bne.n	8008bd4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b90:	4b49      	ldr	r3, [pc, #292]	@ (8008cb8 <xTaskIncrementTick+0x150>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00b      	beq.n	8008bb2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	603b      	str	r3, [r7, #0]
}
 8008bac:	bf00      	nop
 8008bae:	bf00      	nop
 8008bb0:	e7fd      	b.n	8008bae <xTaskIncrementTick+0x46>
 8008bb2:	4b41      	ldr	r3, [pc, #260]	@ (8008cb8 <xTaskIncrementTick+0x150>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	60fb      	str	r3, [r7, #12]
 8008bb8:	4b40      	ldr	r3, [pc, #256]	@ (8008cbc <xTaskIncrementTick+0x154>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a3e      	ldr	r2, [pc, #248]	@ (8008cb8 <xTaskIncrementTick+0x150>)
 8008bbe:	6013      	str	r3, [r2, #0]
 8008bc0:	4a3e      	ldr	r2, [pc, #248]	@ (8008cbc <xTaskIncrementTick+0x154>)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8008cc0 <xTaskIncrementTick+0x158>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	4a3c      	ldr	r2, [pc, #240]	@ (8008cc0 <xTaskIncrementTick+0x158>)
 8008bce:	6013      	str	r3, [r2, #0]
 8008bd0:	f000 fae2 	bl	8009198 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8008cc4 <xTaskIncrementTick+0x15c>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d349      	bcc.n	8008c72 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bde:	4b36      	ldr	r3, [pc, #216]	@ (8008cb8 <xTaskIncrementTick+0x150>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d104      	bne.n	8008bf2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008be8:	4b36      	ldr	r3, [pc, #216]	@ (8008cc4 <xTaskIncrementTick+0x15c>)
 8008bea:	f04f 32ff 	mov.w	r2, #4294967295
 8008bee:	601a      	str	r2, [r3, #0]
					break;
 8008bf0:	e03f      	b.n	8008c72 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bf2:	4b31      	ldr	r3, [pc, #196]	@ (8008cb8 <xTaskIncrementTick+0x150>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c02:	693a      	ldr	r2, [r7, #16]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d203      	bcs.n	8008c12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c0a:	4a2e      	ldr	r2, [pc, #184]	@ (8008cc4 <xTaskIncrementTick+0x15c>)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c10:	e02f      	b.n	8008c72 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	3304      	adds	r3, #4
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7fe ff62 	bl	8007ae0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d004      	beq.n	8008c2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	3318      	adds	r3, #24
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7fe ff59 	bl	8007ae0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c32:	4b25      	ldr	r3, [pc, #148]	@ (8008cc8 <xTaskIncrementTick+0x160>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d903      	bls.n	8008c42 <xTaskIncrementTick+0xda>
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c3e:	4a22      	ldr	r2, [pc, #136]	@ (8008cc8 <xTaskIncrementTick+0x160>)
 8008c40:	6013      	str	r3, [r2, #0]
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c46:	4613      	mov	r3, r2
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4413      	add	r3, r2
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8008ccc <xTaskIncrementTick+0x164>)
 8008c50:	441a      	add	r2, r3
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	3304      	adds	r3, #4
 8008c56:	4619      	mov	r1, r3
 8008c58:	4610      	mov	r0, r2
 8008c5a:	f7fe fee4 	bl	8007a26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c62:	4b1b      	ldr	r3, [pc, #108]	@ (8008cd0 <xTaskIncrementTick+0x168>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d3b8      	bcc.n	8008bde <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c70:	e7b5      	b.n	8008bde <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c72:	4b17      	ldr	r3, [pc, #92]	@ (8008cd0 <xTaskIncrementTick+0x168>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c78:	4914      	ldr	r1, [pc, #80]	@ (8008ccc <xTaskIncrementTick+0x164>)
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4413      	add	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	440b      	add	r3, r1
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d901      	bls.n	8008c8e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008c8e:	4b11      	ldr	r3, [pc, #68]	@ (8008cd4 <xTaskIncrementTick+0x16c>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d007      	beq.n	8008ca6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008c96:	2301      	movs	r3, #1
 8008c98:	617b      	str	r3, [r7, #20]
 8008c9a:	e004      	b.n	8008ca6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8008cd8 <xTaskIncrementTick+0x170>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	4a0d      	ldr	r2, [pc, #52]	@ (8008cd8 <xTaskIncrementTick+0x170>)
 8008ca4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008ca6:	697b      	ldr	r3, [r7, #20]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3718      	adds	r7, #24
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	20000f80 	.word	0x20000f80
 8008cb4:	20000f5c 	.word	0x20000f5c
 8008cb8:	20000f10 	.word	0x20000f10
 8008cbc:	20000f14 	.word	0x20000f14
 8008cc0:	20000f70 	.word	0x20000f70
 8008cc4:	20000f78 	.word	0x20000f78
 8008cc8:	20000f60 	.word	0x20000f60
 8008ccc:	20000a88 	.word	0x20000a88
 8008cd0:	20000a84 	.word	0x20000a84
 8008cd4:	20000f6c 	.word	0x20000f6c
 8008cd8:	20000f68 	.word	0x20000f68

08008cdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8008d90 <vTaskSwitchContext+0xb4>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d003      	beq.n	8008cf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008cea:	4b2a      	ldr	r3, [pc, #168]	@ (8008d94 <vTaskSwitchContext+0xb8>)
 8008cec:	2201      	movs	r2, #1
 8008cee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008cf0:	e047      	b.n	8008d82 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008cf2:	4b28      	ldr	r3, [pc, #160]	@ (8008d94 <vTaskSwitchContext+0xb8>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cf8:	4b27      	ldr	r3, [pc, #156]	@ (8008d98 <vTaskSwitchContext+0xbc>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	60fb      	str	r3, [r7, #12]
 8008cfe:	e011      	b.n	8008d24 <vTaskSwitchContext+0x48>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10b      	bne.n	8008d1e <vTaskSwitchContext+0x42>
	__asm volatile
 8008d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d0a:	f383 8811 	msr	BASEPRI, r3
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	607b      	str	r3, [r7, #4]
}
 8008d18:	bf00      	nop
 8008d1a:	bf00      	nop
 8008d1c:	e7fd      	b.n	8008d1a <vTaskSwitchContext+0x3e>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	3b01      	subs	r3, #1
 8008d22:	60fb      	str	r3, [r7, #12]
 8008d24:	491d      	ldr	r1, [pc, #116]	@ (8008d9c <vTaskSwitchContext+0xc0>)
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	440b      	add	r3, r1
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d0e3      	beq.n	8008d00 <vTaskSwitchContext+0x24>
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4a16      	ldr	r2, [pc, #88]	@ (8008d9c <vTaskSwitchContext+0xc0>)
 8008d44:	4413      	add	r3, r2
 8008d46:	60bb      	str	r3, [r7, #8]
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	605a      	str	r2, [r3, #4]
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	685a      	ldr	r2, [r3, #4]
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	3308      	adds	r3, #8
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d104      	bne.n	8008d68 <vTaskSwitchContext+0x8c>
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	605a      	str	r2, [r3, #4]
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8008da0 <vTaskSwitchContext+0xc4>)
 8008d70:	6013      	str	r3, [r2, #0]
 8008d72:	4a09      	ldr	r2, [pc, #36]	@ (8008d98 <vTaskSwitchContext+0xbc>)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d78:	4b09      	ldr	r3, [pc, #36]	@ (8008da0 <vTaskSwitchContext+0xc4>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	3354      	adds	r3, #84	@ 0x54
 8008d7e:	4a09      	ldr	r2, [pc, #36]	@ (8008da4 <vTaskSwitchContext+0xc8>)
 8008d80:	6013      	str	r3, [r2, #0]
}
 8008d82:	bf00      	nop
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	20000f80 	.word	0x20000f80
 8008d94:	20000f6c 	.word	0x20000f6c
 8008d98:	20000f60 	.word	0x20000f60
 8008d9c:	20000a88 	.word	0x20000a88
 8008da0:	20000a84 	.word	0x20000a84
 8008da4:	20000010 	.word	0x20000010

08008da8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10b      	bne.n	8008dd0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	60fb      	str	r3, [r7, #12]
}
 8008dca:	bf00      	nop
 8008dcc:	bf00      	nop
 8008dce:	e7fd      	b.n	8008dcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008dd0:	4b07      	ldr	r3, [pc, #28]	@ (8008df0 <vTaskPlaceOnEventList+0x48>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	3318      	adds	r3, #24
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7fe fe48 	bl	8007a6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008dde:	2101      	movs	r1, #1
 8008de0:	6838      	ldr	r0, [r7, #0]
 8008de2:	f000 fa87 	bl	80092f4 <prvAddCurrentTaskToDelayedList>
}
 8008de6:	bf00      	nop
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	20000a84 	.word	0x20000a84

08008df4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d10b      	bne.n	8008e1e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e0a:	f383 8811 	msr	BASEPRI, r3
 8008e0e:	f3bf 8f6f 	isb	sy
 8008e12:	f3bf 8f4f 	dsb	sy
 8008e16:	617b      	str	r3, [r7, #20]
}
 8008e18:	bf00      	nop
 8008e1a:	bf00      	nop
 8008e1c:	e7fd      	b.n	8008e1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8008e48 <vTaskPlaceOnEventListRestricted+0x54>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3318      	adds	r3, #24
 8008e24:	4619      	mov	r1, r3
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f7fe fdfd 	bl	8007a26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d002      	beq.n	8008e38 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008e32:	f04f 33ff 	mov.w	r3, #4294967295
 8008e36:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e38:	6879      	ldr	r1, [r7, #4]
 8008e3a:	68b8      	ldr	r0, [r7, #8]
 8008e3c:	f000 fa5a 	bl	80092f4 <prvAddCurrentTaskToDelayedList>
	}
 8008e40:	bf00      	nop
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	20000a84 	.word	0x20000a84

08008e4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d10b      	bne.n	8008e7a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e66:	f383 8811 	msr	BASEPRI, r3
 8008e6a:	f3bf 8f6f 	isb	sy
 8008e6e:	f3bf 8f4f 	dsb	sy
 8008e72:	60fb      	str	r3, [r7, #12]
}
 8008e74:	bf00      	nop
 8008e76:	bf00      	nop
 8008e78:	e7fd      	b.n	8008e76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	3318      	adds	r3, #24
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fe fe2e 	bl	8007ae0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e84:	4b1d      	ldr	r3, [pc, #116]	@ (8008efc <xTaskRemoveFromEventList+0xb0>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d11d      	bne.n	8008ec8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	3304      	adds	r3, #4
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fe fe25 	bl	8007ae0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e9a:	4b19      	ldr	r3, [pc, #100]	@ (8008f00 <xTaskRemoveFromEventList+0xb4>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d903      	bls.n	8008eaa <xTaskRemoveFromEventList+0x5e>
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea6:	4a16      	ldr	r2, [pc, #88]	@ (8008f00 <xTaskRemoveFromEventList+0xb4>)
 8008ea8:	6013      	str	r3, [r2, #0]
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eae:	4613      	mov	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4a13      	ldr	r2, [pc, #76]	@ (8008f04 <xTaskRemoveFromEventList+0xb8>)
 8008eb8:	441a      	add	r2, r3
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	3304      	adds	r3, #4
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	f7fe fdb0 	bl	8007a26 <vListInsertEnd>
 8008ec6:	e005      	b.n	8008ed4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	3318      	adds	r3, #24
 8008ecc:	4619      	mov	r1, r3
 8008ece:	480e      	ldr	r0, [pc, #56]	@ (8008f08 <xTaskRemoveFromEventList+0xbc>)
 8008ed0:	f7fe fda9 	bl	8007a26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8008f0c <xTaskRemoveFromEventList+0xc0>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d905      	bls.n	8008eee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8008f10 <xTaskRemoveFromEventList+0xc4>)
 8008ee8:	2201      	movs	r2, #1
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	e001      	b.n	8008ef2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ef2:	697b      	ldr	r3, [r7, #20]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3718      	adds	r7, #24
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	20000f80 	.word	0x20000f80
 8008f00:	20000f60 	.word	0x20000f60
 8008f04:	20000a88 	.word	0x20000a88
 8008f08:	20000f18 	.word	0x20000f18
 8008f0c:	20000a84 	.word	0x20000a84
 8008f10:	20000f6c 	.word	0x20000f6c

08008f14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f1c:	4b06      	ldr	r3, [pc, #24]	@ (8008f38 <vTaskInternalSetTimeOutState+0x24>)
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f24:	4b05      	ldr	r3, [pc, #20]	@ (8008f3c <vTaskInternalSetTimeOutState+0x28>)
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	605a      	str	r2, [r3, #4]
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr
 8008f38:	20000f70 	.word	0x20000f70
 8008f3c:	20000f5c 	.word	0x20000f5c

08008f40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b088      	sub	sp, #32
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10b      	bne.n	8008f68 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	613b      	str	r3, [r7, #16]
}
 8008f62:	bf00      	nop
 8008f64:	bf00      	nop
 8008f66:	e7fd      	b.n	8008f64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10b      	bne.n	8008f86 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	60fb      	str	r3, [r7, #12]
}
 8008f80:	bf00      	nop
 8008f82:	bf00      	nop
 8008f84:	e7fd      	b.n	8008f82 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008f86:	f000 fe97 	bl	8009cb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8009000 <xTaskCheckForTimeOut+0xc0>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	69ba      	ldr	r2, [r7, #24]
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa2:	d102      	bne.n	8008faa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	61fb      	str	r3, [r7, #28]
 8008fa8:	e023      	b.n	8008ff2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	4b15      	ldr	r3, [pc, #84]	@ (8009004 <xTaskCheckForTimeOut+0xc4>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d007      	beq.n	8008fc6 <xTaskCheckForTimeOut+0x86>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	69ba      	ldr	r2, [r7, #24]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d302      	bcc.n	8008fc6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	61fb      	str	r3, [r7, #28]
 8008fc4:	e015      	b.n	8008ff2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	697a      	ldr	r2, [r7, #20]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d20b      	bcs.n	8008fe8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	1ad2      	subs	r2, r2, r3
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7ff ff99 	bl	8008f14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	61fb      	str	r3, [r7, #28]
 8008fe6:	e004      	b.n	8008ff2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2200      	movs	r2, #0
 8008fec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008ff2:	f000 fe93 	bl	8009d1c <vPortExitCritical>

	return xReturn;
 8008ff6:	69fb      	ldr	r3, [r7, #28]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3720      	adds	r7, #32
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	20000f5c 	.word	0x20000f5c
 8009004:	20000f70 	.word	0x20000f70

08009008 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009008:	b480      	push	{r7}
 800900a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800900c:	4b03      	ldr	r3, [pc, #12]	@ (800901c <vTaskMissedYield+0x14>)
 800900e:	2201      	movs	r2, #1
 8009010:	601a      	str	r2, [r3, #0]
}
 8009012:	bf00      	nop
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	20000f6c 	.word	0x20000f6c

08009020 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009028:	f000 f852 	bl	80090d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800902c:	4b06      	ldr	r3, [pc, #24]	@ (8009048 <prvIdleTask+0x28>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d9f9      	bls.n	8009028 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009034:	4b05      	ldr	r3, [pc, #20]	@ (800904c <prvIdleTask+0x2c>)
 8009036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009044:	e7f0      	b.n	8009028 <prvIdleTask+0x8>
 8009046:	bf00      	nop
 8009048:	20000a88 	.word	0x20000a88
 800904c:	e000ed04 	.word	0xe000ed04

08009050 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009056:	2300      	movs	r3, #0
 8009058:	607b      	str	r3, [r7, #4]
 800905a:	e00c      	b.n	8009076 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	4613      	mov	r3, r2
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	4413      	add	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4a12      	ldr	r2, [pc, #72]	@ (80090b0 <prvInitialiseTaskLists+0x60>)
 8009068:	4413      	add	r3, r2
 800906a:	4618      	mov	r0, r3
 800906c:	f7fe fcae 	bl	80079cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	3301      	adds	r3, #1
 8009074:	607b      	str	r3, [r7, #4]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2b37      	cmp	r3, #55	@ 0x37
 800907a:	d9ef      	bls.n	800905c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800907c:	480d      	ldr	r0, [pc, #52]	@ (80090b4 <prvInitialiseTaskLists+0x64>)
 800907e:	f7fe fca5 	bl	80079cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009082:	480d      	ldr	r0, [pc, #52]	@ (80090b8 <prvInitialiseTaskLists+0x68>)
 8009084:	f7fe fca2 	bl	80079cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009088:	480c      	ldr	r0, [pc, #48]	@ (80090bc <prvInitialiseTaskLists+0x6c>)
 800908a:	f7fe fc9f 	bl	80079cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800908e:	480c      	ldr	r0, [pc, #48]	@ (80090c0 <prvInitialiseTaskLists+0x70>)
 8009090:	f7fe fc9c 	bl	80079cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009094:	480b      	ldr	r0, [pc, #44]	@ (80090c4 <prvInitialiseTaskLists+0x74>)
 8009096:	f7fe fc99 	bl	80079cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800909a:	4b0b      	ldr	r3, [pc, #44]	@ (80090c8 <prvInitialiseTaskLists+0x78>)
 800909c:	4a05      	ldr	r2, [pc, #20]	@ (80090b4 <prvInitialiseTaskLists+0x64>)
 800909e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090a0:	4b0a      	ldr	r3, [pc, #40]	@ (80090cc <prvInitialiseTaskLists+0x7c>)
 80090a2:	4a05      	ldr	r2, [pc, #20]	@ (80090b8 <prvInitialiseTaskLists+0x68>)
 80090a4:	601a      	str	r2, [r3, #0]
}
 80090a6:	bf00      	nop
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	20000a88 	.word	0x20000a88
 80090b4:	20000ee8 	.word	0x20000ee8
 80090b8:	20000efc 	.word	0x20000efc
 80090bc:	20000f18 	.word	0x20000f18
 80090c0:	20000f2c 	.word	0x20000f2c
 80090c4:	20000f44 	.word	0x20000f44
 80090c8:	20000f10 	.word	0x20000f10
 80090cc:	20000f14 	.word	0x20000f14

080090d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090d6:	e019      	b.n	800910c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80090d8:	f000 fdee 	bl	8009cb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090dc:	4b10      	ldr	r3, [pc, #64]	@ (8009120 <prvCheckTasksWaitingTermination+0x50>)
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3304      	adds	r3, #4
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7fe fcf9 	bl	8007ae0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80090ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009124 <prvCheckTasksWaitingTermination+0x54>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3b01      	subs	r3, #1
 80090f4:	4a0b      	ldr	r2, [pc, #44]	@ (8009124 <prvCheckTasksWaitingTermination+0x54>)
 80090f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80090f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009128 <prvCheckTasksWaitingTermination+0x58>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	4a0a      	ldr	r2, [pc, #40]	@ (8009128 <prvCheckTasksWaitingTermination+0x58>)
 8009100:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009102:	f000 fe0b 	bl	8009d1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f810 	bl	800912c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800910c:	4b06      	ldr	r3, [pc, #24]	@ (8009128 <prvCheckTasksWaitingTermination+0x58>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e1      	bne.n	80090d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	20000f2c 	.word	0x20000f2c
 8009124:	20000f58 	.word	0x20000f58
 8009128:	20000f40 	.word	0x20000f40

0800912c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	3354      	adds	r3, #84	@ 0x54
 8009138:	4618      	mov	r0, r3
 800913a:	f001 f8d5 	bl	800a2e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009144:	2b00      	cmp	r3, #0
 8009146:	d108      	bne.n	800915a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800914c:	4618      	mov	r0, r3
 800914e:	f000 ffa3 	bl	800a098 <vPortFree>
				vPortFree( pxTCB );
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 ffa0 	bl	800a098 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009158:	e019      	b.n	800918e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009160:	2b01      	cmp	r3, #1
 8009162:	d103      	bne.n	800916c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 ff97 	bl	800a098 <vPortFree>
	}
 800916a:	e010      	b.n	800918e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009172:	2b02      	cmp	r3, #2
 8009174:	d00b      	beq.n	800918e <prvDeleteTCB+0x62>
	__asm volatile
 8009176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800917a:	f383 8811 	msr	BASEPRI, r3
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	60fb      	str	r3, [r7, #12]
}
 8009188:	bf00      	nop
 800918a:	bf00      	nop
 800918c:	e7fd      	b.n	800918a <prvDeleteTCB+0x5e>
	}
 800918e:	bf00      	nop
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
	...

08009198 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800919e:	4b0c      	ldr	r3, [pc, #48]	@ (80091d0 <prvResetNextTaskUnblockTime+0x38>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d104      	bne.n	80091b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091a8:	4b0a      	ldr	r3, [pc, #40]	@ (80091d4 <prvResetNextTaskUnblockTime+0x3c>)
 80091aa:	f04f 32ff 	mov.w	r2, #4294967295
 80091ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091b0:	e008      	b.n	80091c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091b2:	4b07      	ldr	r3, [pc, #28]	@ (80091d0 <prvResetNextTaskUnblockTime+0x38>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	4a04      	ldr	r2, [pc, #16]	@ (80091d4 <prvResetNextTaskUnblockTime+0x3c>)
 80091c2:	6013      	str	r3, [r2, #0]
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	20000f10 	.word	0x20000f10
 80091d4:	20000f78 	.word	0x20000f78

080091d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80091de:	4b0b      	ldr	r3, [pc, #44]	@ (800920c <xTaskGetSchedulerState+0x34>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d102      	bne.n	80091ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80091e6:	2301      	movs	r3, #1
 80091e8:	607b      	str	r3, [r7, #4]
 80091ea:	e008      	b.n	80091fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091ec:	4b08      	ldr	r3, [pc, #32]	@ (8009210 <xTaskGetSchedulerState+0x38>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d102      	bne.n	80091fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80091f4:	2302      	movs	r3, #2
 80091f6:	607b      	str	r3, [r7, #4]
 80091f8:	e001      	b.n	80091fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80091fa:	2300      	movs	r3, #0
 80091fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80091fe:	687b      	ldr	r3, [r7, #4]
	}
 8009200:	4618      	mov	r0, r3
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	20000f64 	.word	0x20000f64
 8009210:	20000f80 	.word	0x20000f80

08009214 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009220:	2300      	movs	r3, #0
 8009222:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d058      	beq.n	80092dc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800922a:	4b2f      	ldr	r3, [pc, #188]	@ (80092e8 <xTaskPriorityDisinherit+0xd4>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	429a      	cmp	r2, r3
 8009232:	d00b      	beq.n	800924c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	60fb      	str	r3, [r7, #12]
}
 8009246:	bf00      	nop
 8009248:	bf00      	nop
 800924a:	e7fd      	b.n	8009248 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10b      	bne.n	800926c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	60bb      	str	r3, [r7, #8]
}
 8009266:	bf00      	nop
 8009268:	bf00      	nop
 800926a:	e7fd      	b.n	8009268 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009270:	1e5a      	subs	r2, r3, #1
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800927e:	429a      	cmp	r2, r3
 8009280:	d02c      	beq.n	80092dc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009286:	2b00      	cmp	r3, #0
 8009288:	d128      	bne.n	80092dc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	3304      	adds	r3, #4
 800928e:	4618      	mov	r0, r3
 8009290:	f7fe fc26 	bl	8007ae0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ac:	4b0f      	ldr	r3, [pc, #60]	@ (80092ec <xTaskPriorityDisinherit+0xd8>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d903      	bls.n	80092bc <xTaskPriorityDisinherit+0xa8>
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b8:	4a0c      	ldr	r2, [pc, #48]	@ (80092ec <xTaskPriorityDisinherit+0xd8>)
 80092ba:	6013      	str	r3, [r2, #0]
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092c0:	4613      	mov	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4a09      	ldr	r2, [pc, #36]	@ (80092f0 <xTaskPriorityDisinherit+0xdc>)
 80092ca:	441a      	add	r2, r3
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	3304      	adds	r3, #4
 80092d0:	4619      	mov	r1, r3
 80092d2:	4610      	mov	r0, r2
 80092d4:	f7fe fba7 	bl	8007a26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80092d8:	2301      	movs	r3, #1
 80092da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092dc:	697b      	ldr	r3, [r7, #20]
	}
 80092de:	4618      	mov	r0, r3
 80092e0:	3718      	adds	r7, #24
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20000a84 	.word	0x20000a84
 80092ec:	20000f60 	.word	0x20000f60
 80092f0:	20000a88 	.word	0x20000a88

080092f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80092fe:	4b21      	ldr	r3, [pc, #132]	@ (8009384 <prvAddCurrentTaskToDelayedList+0x90>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009304:	4b20      	ldr	r3, [pc, #128]	@ (8009388 <prvAddCurrentTaskToDelayedList+0x94>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	3304      	adds	r3, #4
 800930a:	4618      	mov	r0, r3
 800930c:	f7fe fbe8 	bl	8007ae0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009316:	d10a      	bne.n	800932e <prvAddCurrentTaskToDelayedList+0x3a>
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d007      	beq.n	800932e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800931e:	4b1a      	ldr	r3, [pc, #104]	@ (8009388 <prvAddCurrentTaskToDelayedList+0x94>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3304      	adds	r3, #4
 8009324:	4619      	mov	r1, r3
 8009326:	4819      	ldr	r0, [pc, #100]	@ (800938c <prvAddCurrentTaskToDelayedList+0x98>)
 8009328:	f7fe fb7d 	bl	8007a26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800932c:	e026      	b.n	800937c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4413      	add	r3, r2
 8009334:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009336:	4b14      	ldr	r3, [pc, #80]	@ (8009388 <prvAddCurrentTaskToDelayedList+0x94>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	429a      	cmp	r2, r3
 8009344:	d209      	bcs.n	800935a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009346:	4b12      	ldr	r3, [pc, #72]	@ (8009390 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	4b0f      	ldr	r3, [pc, #60]	@ (8009388 <prvAddCurrentTaskToDelayedList+0x94>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3304      	adds	r3, #4
 8009350:	4619      	mov	r1, r3
 8009352:	4610      	mov	r0, r2
 8009354:	f7fe fb8b 	bl	8007a6e <vListInsert>
}
 8009358:	e010      	b.n	800937c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800935a:	4b0e      	ldr	r3, [pc, #56]	@ (8009394 <prvAddCurrentTaskToDelayedList+0xa0>)
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	4b0a      	ldr	r3, [pc, #40]	@ (8009388 <prvAddCurrentTaskToDelayedList+0x94>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3304      	adds	r3, #4
 8009364:	4619      	mov	r1, r3
 8009366:	4610      	mov	r0, r2
 8009368:	f7fe fb81 	bl	8007a6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800936c:	4b0a      	ldr	r3, [pc, #40]	@ (8009398 <prvAddCurrentTaskToDelayedList+0xa4>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	429a      	cmp	r2, r3
 8009374:	d202      	bcs.n	800937c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009376:	4a08      	ldr	r2, [pc, #32]	@ (8009398 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	6013      	str	r3, [r2, #0]
}
 800937c:	bf00      	nop
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	20000f5c 	.word	0x20000f5c
 8009388:	20000a84 	.word	0x20000a84
 800938c:	20000f44 	.word	0x20000f44
 8009390:	20000f14 	.word	0x20000f14
 8009394:	20000f10 	.word	0x20000f10
 8009398:	20000f78 	.word	0x20000f78

0800939c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b08a      	sub	sp, #40	@ 0x28
 80093a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80093a2:	2300      	movs	r3, #0
 80093a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80093a6:	f000 fb13 	bl	80099d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80093aa:	4b1d      	ldr	r3, [pc, #116]	@ (8009420 <xTimerCreateTimerTask+0x84>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d021      	beq.n	80093f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80093b2:	2300      	movs	r3, #0
 80093b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80093b6:	2300      	movs	r3, #0
 80093b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80093ba:	1d3a      	adds	r2, r7, #4
 80093bc:	f107 0108 	add.w	r1, r7, #8
 80093c0:	f107 030c 	add.w	r3, r7, #12
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7fe fae7 	bl	8007998 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80093ca:	6879      	ldr	r1, [r7, #4]
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	9202      	str	r2, [sp, #8]
 80093d2:	9301      	str	r3, [sp, #4]
 80093d4:	2302      	movs	r3, #2
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	2300      	movs	r3, #0
 80093da:	460a      	mov	r2, r1
 80093dc:	4911      	ldr	r1, [pc, #68]	@ (8009424 <xTimerCreateTimerTask+0x88>)
 80093de:	4812      	ldr	r0, [pc, #72]	@ (8009428 <xTimerCreateTimerTask+0x8c>)
 80093e0:	f7ff f8a2 	bl	8008528 <xTaskCreateStatic>
 80093e4:	4603      	mov	r3, r0
 80093e6:	4a11      	ldr	r2, [pc, #68]	@ (800942c <xTimerCreateTimerTask+0x90>)
 80093e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80093ea:	4b10      	ldr	r3, [pc, #64]	@ (800942c <xTimerCreateTimerTask+0x90>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80093f2:	2301      	movs	r3, #1
 80093f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10b      	bne.n	8009414 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80093fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009400:	f383 8811 	msr	BASEPRI, r3
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	613b      	str	r3, [r7, #16]
}
 800940e:	bf00      	nop
 8009410:	bf00      	nop
 8009412:	e7fd      	b.n	8009410 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009414:	697b      	ldr	r3, [r7, #20]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3718      	adds	r7, #24
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	20000fb4 	.word	0x20000fb4
 8009424:	0800a514 	.word	0x0800a514
 8009428:	08009569 	.word	0x08009569
 800942c:	20000fb8 	.word	0x20000fb8

08009430 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b08a      	sub	sp, #40	@ 0x28
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
 800943c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800943e:	2300      	movs	r3, #0
 8009440:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10b      	bne.n	8009460 <xTimerGenericCommand+0x30>
	__asm volatile
 8009448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944c:	f383 8811 	msr	BASEPRI, r3
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	623b      	str	r3, [r7, #32]
}
 800945a:	bf00      	nop
 800945c:	bf00      	nop
 800945e:	e7fd      	b.n	800945c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009460:	4b19      	ldr	r3, [pc, #100]	@ (80094c8 <xTimerGenericCommand+0x98>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d02a      	beq.n	80094be <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	2b05      	cmp	r3, #5
 8009478:	dc18      	bgt.n	80094ac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800947a:	f7ff fead 	bl	80091d8 <xTaskGetSchedulerState>
 800947e:	4603      	mov	r3, r0
 8009480:	2b02      	cmp	r3, #2
 8009482:	d109      	bne.n	8009498 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009484:	4b10      	ldr	r3, [pc, #64]	@ (80094c8 <xTimerGenericCommand+0x98>)
 8009486:	6818      	ldr	r0, [r3, #0]
 8009488:	f107 0110 	add.w	r1, r7, #16
 800948c:	2300      	movs	r3, #0
 800948e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009490:	f7fe fc5a 	bl	8007d48 <xQueueGenericSend>
 8009494:	6278      	str	r0, [r7, #36]	@ 0x24
 8009496:	e012      	b.n	80094be <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009498:	4b0b      	ldr	r3, [pc, #44]	@ (80094c8 <xTimerGenericCommand+0x98>)
 800949a:	6818      	ldr	r0, [r3, #0]
 800949c:	f107 0110 	add.w	r1, r7, #16
 80094a0:	2300      	movs	r3, #0
 80094a2:	2200      	movs	r2, #0
 80094a4:	f7fe fc50 	bl	8007d48 <xQueueGenericSend>
 80094a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80094aa:	e008      	b.n	80094be <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80094ac:	4b06      	ldr	r3, [pc, #24]	@ (80094c8 <xTimerGenericCommand+0x98>)
 80094ae:	6818      	ldr	r0, [r3, #0]
 80094b0:	f107 0110 	add.w	r1, r7, #16
 80094b4:	2300      	movs	r3, #0
 80094b6:	683a      	ldr	r2, [r7, #0]
 80094b8:	f7fe fd48 	bl	8007f4c <xQueueGenericSendFromISR>
 80094bc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80094be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3728      	adds	r7, #40	@ 0x28
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	20000fb4 	.word	0x20000fb4

080094cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b088      	sub	sp, #32
 80094d0:	af02      	add	r7, sp, #8
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094d6:	4b23      	ldr	r3, [pc, #140]	@ (8009564 <prvProcessExpiredTimer+0x98>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	3304      	adds	r3, #4
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7fe fafb 	bl	8007ae0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094f0:	f003 0304 	and.w	r3, r3, #4
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d023      	beq.n	8009540 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	699a      	ldr	r2, [r3, #24]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	18d1      	adds	r1, r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	6978      	ldr	r0, [r7, #20]
 8009506:	f000 f8d5 	bl	80096b4 <prvInsertTimerInActiveList>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d020      	beq.n	8009552 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009510:	2300      	movs	r3, #0
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	2300      	movs	r3, #0
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	2100      	movs	r1, #0
 800951a:	6978      	ldr	r0, [r7, #20]
 800951c:	f7ff ff88 	bl	8009430 <xTimerGenericCommand>
 8009520:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d114      	bne.n	8009552 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	60fb      	str	r3, [r7, #12]
}
 800953a:	bf00      	nop
 800953c:	bf00      	nop
 800953e:	e7fd      	b.n	800953c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009546:	f023 0301 	bic.w	r3, r3, #1
 800954a:	b2da      	uxtb	r2, r3
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	6978      	ldr	r0, [r7, #20]
 8009558:	4798      	blx	r3
}
 800955a:	bf00      	nop
 800955c:	3718      	adds	r7, #24
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	20000fac 	.word	0x20000fac

08009568 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009570:	f107 0308 	add.w	r3, r7, #8
 8009574:	4618      	mov	r0, r3
 8009576:	f000 f859 	bl	800962c <prvGetNextExpireTime>
 800957a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	4619      	mov	r1, r3
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f000 f805 	bl	8009590 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009586:	f000 f8d7 	bl	8009738 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800958a:	bf00      	nop
 800958c:	e7f0      	b.n	8009570 <prvTimerTask+0x8>
	...

08009590 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800959a:	f7ff fa29 	bl	80089f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800959e:	f107 0308 	add.w	r3, r7, #8
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 f866 	bl	8009674 <prvSampleTimeNow>
 80095a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d130      	bne.n	8009612 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10a      	bne.n	80095cc <prvProcessTimerOrBlockTask+0x3c>
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d806      	bhi.n	80095cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80095be:	f7ff fa25 	bl	8008a0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80095c2:	68f9      	ldr	r1, [r7, #12]
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f7ff ff81 	bl	80094cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80095ca:	e024      	b.n	8009616 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d008      	beq.n	80095e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80095d2:	4b13      	ldr	r3, [pc, #76]	@ (8009620 <prvProcessTimerOrBlockTask+0x90>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d101      	bne.n	80095e0 <prvProcessTimerOrBlockTask+0x50>
 80095dc:	2301      	movs	r3, #1
 80095de:	e000      	b.n	80095e2 <prvProcessTimerOrBlockTask+0x52>
 80095e0:	2300      	movs	r3, #0
 80095e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80095e4:	4b0f      	ldr	r3, [pc, #60]	@ (8009624 <prvProcessTimerOrBlockTask+0x94>)
 80095e6:	6818      	ldr	r0, [r3, #0]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	1ad3      	subs	r3, r2, r3
 80095ee:	683a      	ldr	r2, [r7, #0]
 80095f0:	4619      	mov	r1, r3
 80095f2:	f7fe ff65 	bl	80084c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80095f6:	f7ff fa09 	bl	8008a0c <xTaskResumeAll>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10a      	bne.n	8009616 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009600:	4b09      	ldr	r3, [pc, #36]	@ (8009628 <prvProcessTimerOrBlockTask+0x98>)
 8009602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009606:	601a      	str	r2, [r3, #0]
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	f3bf 8f6f 	isb	sy
}
 8009610:	e001      	b.n	8009616 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009612:	f7ff f9fb 	bl	8008a0c <xTaskResumeAll>
}
 8009616:	bf00      	nop
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	20000fb0 	.word	0x20000fb0
 8009624:	20000fb4 	.word	0x20000fb4
 8009628:	e000ed04 	.word	0xe000ed04

0800962c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009634:	4b0e      	ldr	r3, [pc, #56]	@ (8009670 <prvGetNextExpireTime+0x44>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d101      	bne.n	8009642 <prvGetNextExpireTime+0x16>
 800963e:	2201      	movs	r2, #1
 8009640:	e000      	b.n	8009644 <prvGetNextExpireTime+0x18>
 8009642:	2200      	movs	r2, #0
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d105      	bne.n	800965c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009650:	4b07      	ldr	r3, [pc, #28]	@ (8009670 <prvGetNextExpireTime+0x44>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	60fb      	str	r3, [r7, #12]
 800965a:	e001      	b.n	8009660 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800965c:	2300      	movs	r3, #0
 800965e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009660:	68fb      	ldr	r3, [r7, #12]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3714      	adds	r7, #20
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	20000fac 	.word	0x20000fac

08009674 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800967c:	f7ff fa64 	bl	8008b48 <xTaskGetTickCount>
 8009680:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009682:	4b0b      	ldr	r3, [pc, #44]	@ (80096b0 <prvSampleTimeNow+0x3c>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	429a      	cmp	r2, r3
 800968a:	d205      	bcs.n	8009698 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800968c:	f000 f93a 	bl	8009904 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	601a      	str	r2, [r3, #0]
 8009696:	e002      	b.n	800969e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800969e:	4a04      	ldr	r2, [pc, #16]	@ (80096b0 <prvSampleTimeNow+0x3c>)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80096a4:	68fb      	ldr	r3, [r7, #12]
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	20000fbc 	.word	0x20000fbc

080096b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b086      	sub	sp, #24
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
 80096c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80096c2:	2300      	movs	r3, #0
 80096c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d812      	bhi.n	8009700 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	1ad2      	subs	r2, r2, r3
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	699b      	ldr	r3, [r3, #24]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d302      	bcc.n	80096ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80096e8:	2301      	movs	r3, #1
 80096ea:	617b      	str	r3, [r7, #20]
 80096ec:	e01b      	b.n	8009726 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80096ee:	4b10      	ldr	r3, [pc, #64]	@ (8009730 <prvInsertTimerInActiveList+0x7c>)
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	3304      	adds	r3, #4
 80096f6:	4619      	mov	r1, r3
 80096f8:	4610      	mov	r0, r2
 80096fa:	f7fe f9b8 	bl	8007a6e <vListInsert>
 80096fe:	e012      	b.n	8009726 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	429a      	cmp	r2, r3
 8009706:	d206      	bcs.n	8009716 <prvInsertTimerInActiveList+0x62>
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	429a      	cmp	r2, r3
 800970e:	d302      	bcc.n	8009716 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009710:	2301      	movs	r3, #1
 8009712:	617b      	str	r3, [r7, #20]
 8009714:	e007      	b.n	8009726 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009716:	4b07      	ldr	r3, [pc, #28]	@ (8009734 <prvInsertTimerInActiveList+0x80>)
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3304      	adds	r3, #4
 800971e:	4619      	mov	r1, r3
 8009720:	4610      	mov	r0, r2
 8009722:	f7fe f9a4 	bl	8007a6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009726:	697b      	ldr	r3, [r7, #20]
}
 8009728:	4618      	mov	r0, r3
 800972a:	3718      	adds	r7, #24
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	20000fb0 	.word	0x20000fb0
 8009734:	20000fac 	.word	0x20000fac

08009738 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b08e      	sub	sp, #56	@ 0x38
 800973c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800973e:	e0ce      	b.n	80098de <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	da19      	bge.n	800977a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009746:	1d3b      	adds	r3, r7, #4
 8009748:	3304      	adds	r3, #4
 800974a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800974c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10b      	bne.n	800976a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009756:	f383 8811 	msr	BASEPRI, r3
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	61fb      	str	r3, [r7, #28]
}
 8009764:	bf00      	nop
 8009766:	bf00      	nop
 8009768:	e7fd      	b.n	8009766 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800976a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009770:	6850      	ldr	r0, [r2, #4]
 8009772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009774:	6892      	ldr	r2, [r2, #8]
 8009776:	4611      	mov	r1, r2
 8009778:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	f2c0 80ae 	blt.w	80098de <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009788:	695b      	ldr	r3, [r3, #20]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d004      	beq.n	8009798 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800978e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009790:	3304      	adds	r3, #4
 8009792:	4618      	mov	r0, r3
 8009794:	f7fe f9a4 	bl	8007ae0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009798:	463b      	mov	r3, r7
 800979a:	4618      	mov	r0, r3
 800979c:	f7ff ff6a 	bl	8009674 <prvSampleTimeNow>
 80097a0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b09      	cmp	r3, #9
 80097a6:	f200 8097 	bhi.w	80098d8 <prvProcessReceivedCommands+0x1a0>
 80097aa:	a201      	add	r2, pc, #4	@ (adr r2, 80097b0 <prvProcessReceivedCommands+0x78>)
 80097ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b0:	080097d9 	.word	0x080097d9
 80097b4:	080097d9 	.word	0x080097d9
 80097b8:	080097d9 	.word	0x080097d9
 80097bc:	0800984f 	.word	0x0800984f
 80097c0:	08009863 	.word	0x08009863
 80097c4:	080098af 	.word	0x080098af
 80097c8:	080097d9 	.word	0x080097d9
 80097cc:	080097d9 	.word	0x080097d9
 80097d0:	0800984f 	.word	0x0800984f
 80097d4:	08009863 	.word	0x08009863
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097de:	f043 0301 	orr.w	r3, r3, #1
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	18d1      	adds	r1, r2, r3
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097f8:	f7ff ff5c 	bl	80096b4 <prvInsertTimerInActiveList>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d06c      	beq.n	80098dc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009808:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800980a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800980c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009810:	f003 0304 	and.w	r3, r3, #4
 8009814:	2b00      	cmp	r3, #0
 8009816:	d061      	beq.n	80098dc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	441a      	add	r2, r3
 8009820:	2300      	movs	r3, #0
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	2300      	movs	r3, #0
 8009826:	2100      	movs	r1, #0
 8009828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800982a:	f7ff fe01 	bl	8009430 <xTimerGenericCommand>
 800982e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009830:	6a3b      	ldr	r3, [r7, #32]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d152      	bne.n	80098dc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	61bb      	str	r3, [r7, #24]
}
 8009848:	bf00      	nop
 800984a:	bf00      	nop
 800984c:	e7fd      	b.n	800984a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800984e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009850:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009854:	f023 0301 	bic.w	r3, r3, #1
 8009858:	b2da      	uxtb	r2, r3
 800985a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800985c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009860:	e03d      	b.n	80098de <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009864:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009868:	f043 0301 	orr.w	r3, r3, #1
 800986c:	b2da      	uxtb	r2, r3
 800986e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009870:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009878:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800987a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d10b      	bne.n	800989a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009886:	f383 8811 	msr	BASEPRI, r3
 800988a:	f3bf 8f6f 	isb	sy
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	617b      	str	r3, [r7, #20]
}
 8009894:	bf00      	nop
 8009896:	bf00      	nop
 8009898:	e7fd      	b.n	8009896 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800989a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800989c:	699a      	ldr	r2, [r3, #24]
 800989e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a0:	18d1      	adds	r1, r2, r3
 80098a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098a8:	f7ff ff04 	bl	80096b4 <prvInsertTimerInActiveList>
					break;
 80098ac:	e017      	b.n	80098de <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80098ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098b4:	f003 0302 	and.w	r3, r3, #2
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d103      	bne.n	80098c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80098bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098be:	f000 fbeb 	bl	800a098 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80098c2:	e00c      	b.n	80098de <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098ca:	f023 0301 	bic.w	r3, r3, #1
 80098ce:	b2da      	uxtb	r2, r3
 80098d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80098d6:	e002      	b.n	80098de <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80098d8:	bf00      	nop
 80098da:	e000      	b.n	80098de <prvProcessReceivedCommands+0x1a6>
					break;
 80098dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098de:	4b08      	ldr	r3, [pc, #32]	@ (8009900 <prvProcessReceivedCommands+0x1c8>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	1d39      	adds	r1, r7, #4
 80098e4:	2200      	movs	r2, #0
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7fe fbce 	bl	8008088 <xQueueReceive>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f47f af26 	bne.w	8009740 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80098f4:	bf00      	nop
 80098f6:	bf00      	nop
 80098f8:	3730      	adds	r7, #48	@ 0x30
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	20000fb4 	.word	0x20000fb4

08009904 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b088      	sub	sp, #32
 8009908:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800990a:	e049      	b.n	80099a0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800990c:	4b2e      	ldr	r3, [pc, #184]	@ (80099c8 <prvSwitchTimerLists+0xc4>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009916:	4b2c      	ldr	r3, [pc, #176]	@ (80099c8 <prvSwitchTimerLists+0xc4>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	3304      	adds	r3, #4
 8009924:	4618      	mov	r0, r3
 8009926:	f7fe f8db 	bl	8007ae0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6a1b      	ldr	r3, [r3, #32]
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009938:	f003 0304 	and.w	r3, r3, #4
 800993c:	2b00      	cmp	r3, #0
 800993e:	d02f      	beq.n	80099a0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	4413      	add	r3, r2
 8009948:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	429a      	cmp	r2, r3
 8009950:	d90e      	bls.n	8009970 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	68ba      	ldr	r2, [r7, #8]
 8009956:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800995e:	4b1a      	ldr	r3, [pc, #104]	@ (80099c8 <prvSwitchTimerLists+0xc4>)
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	3304      	adds	r3, #4
 8009966:	4619      	mov	r1, r3
 8009968:	4610      	mov	r0, r2
 800996a:	f7fe f880 	bl	8007a6e <vListInsert>
 800996e:	e017      	b.n	80099a0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009970:	2300      	movs	r3, #0
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	2300      	movs	r3, #0
 8009976:	693a      	ldr	r2, [r7, #16]
 8009978:	2100      	movs	r1, #0
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f7ff fd58 	bl	8009430 <xTimerGenericCommand>
 8009980:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d10b      	bne.n	80099a0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800998c:	f383 8811 	msr	BASEPRI, r3
 8009990:	f3bf 8f6f 	isb	sy
 8009994:	f3bf 8f4f 	dsb	sy
 8009998:	603b      	str	r3, [r7, #0]
}
 800999a:	bf00      	nop
 800999c:	bf00      	nop
 800999e:	e7fd      	b.n	800999c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099a0:	4b09      	ldr	r3, [pc, #36]	@ (80099c8 <prvSwitchTimerLists+0xc4>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1b0      	bne.n	800990c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80099aa:	4b07      	ldr	r3, [pc, #28]	@ (80099c8 <prvSwitchTimerLists+0xc4>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80099b0:	4b06      	ldr	r3, [pc, #24]	@ (80099cc <prvSwitchTimerLists+0xc8>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a04      	ldr	r2, [pc, #16]	@ (80099c8 <prvSwitchTimerLists+0xc4>)
 80099b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80099b8:	4a04      	ldr	r2, [pc, #16]	@ (80099cc <prvSwitchTimerLists+0xc8>)
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	6013      	str	r3, [r2, #0]
}
 80099be:	bf00      	nop
 80099c0:	3718      	adds	r7, #24
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	20000fac 	.word	0x20000fac
 80099cc:	20000fb0 	.word	0x20000fb0

080099d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80099d6:	f000 f96f 	bl	8009cb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80099da:	4b15      	ldr	r3, [pc, #84]	@ (8009a30 <prvCheckForValidListAndQueue+0x60>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d120      	bne.n	8009a24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80099e2:	4814      	ldr	r0, [pc, #80]	@ (8009a34 <prvCheckForValidListAndQueue+0x64>)
 80099e4:	f7fd fff2 	bl	80079cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80099e8:	4813      	ldr	r0, [pc, #76]	@ (8009a38 <prvCheckForValidListAndQueue+0x68>)
 80099ea:	f7fd ffef 	bl	80079cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80099ee:	4b13      	ldr	r3, [pc, #76]	@ (8009a3c <prvCheckForValidListAndQueue+0x6c>)
 80099f0:	4a10      	ldr	r2, [pc, #64]	@ (8009a34 <prvCheckForValidListAndQueue+0x64>)
 80099f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80099f4:	4b12      	ldr	r3, [pc, #72]	@ (8009a40 <prvCheckForValidListAndQueue+0x70>)
 80099f6:	4a10      	ldr	r2, [pc, #64]	@ (8009a38 <prvCheckForValidListAndQueue+0x68>)
 80099f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80099fa:	2300      	movs	r3, #0
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	4b11      	ldr	r3, [pc, #68]	@ (8009a44 <prvCheckForValidListAndQueue+0x74>)
 8009a00:	4a11      	ldr	r2, [pc, #68]	@ (8009a48 <prvCheckForValidListAndQueue+0x78>)
 8009a02:	2110      	movs	r1, #16
 8009a04:	200a      	movs	r0, #10
 8009a06:	f7fe f8ff 	bl	8007c08 <xQueueGenericCreateStatic>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	4a08      	ldr	r2, [pc, #32]	@ (8009a30 <prvCheckForValidListAndQueue+0x60>)
 8009a0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009a10:	4b07      	ldr	r3, [pc, #28]	@ (8009a30 <prvCheckForValidListAndQueue+0x60>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d005      	beq.n	8009a24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009a18:	4b05      	ldr	r3, [pc, #20]	@ (8009a30 <prvCheckForValidListAndQueue+0x60>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	490b      	ldr	r1, [pc, #44]	@ (8009a4c <prvCheckForValidListAndQueue+0x7c>)
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fe fd24 	bl	800846c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a24:	f000 f97a 	bl	8009d1c <vPortExitCritical>
}
 8009a28:	bf00      	nop
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	20000fb4 	.word	0x20000fb4
 8009a34:	20000f84 	.word	0x20000f84
 8009a38:	20000f98 	.word	0x20000f98
 8009a3c:	20000fac 	.word	0x20000fac
 8009a40:	20000fb0 	.word	0x20000fb0
 8009a44:	20001060 	.word	0x20001060
 8009a48:	20000fc0 	.word	0x20000fc0
 8009a4c:	0800a51c 	.word	0x0800a51c

08009a50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a50:	b480      	push	{r7}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	3b04      	subs	r3, #4
 8009a60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009a68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	3b04      	subs	r3, #4
 8009a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	f023 0201 	bic.w	r2, r3, #1
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	3b04      	subs	r3, #4
 8009a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a80:	4a0c      	ldr	r2, [pc, #48]	@ (8009ab4 <pxPortInitialiseStack+0x64>)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	3b14      	subs	r3, #20
 8009a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	3b04      	subs	r3, #4
 8009a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f06f 0202 	mvn.w	r2, #2
 8009a9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	3b20      	subs	r3, #32
 8009aa4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3714      	adds	r7, #20
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr
 8009ab4:	08009ab9 	.word	0x08009ab9

08009ab8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ac2:	4b13      	ldr	r3, [pc, #76]	@ (8009b10 <prvTaskExitError+0x58>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aca:	d00b      	beq.n	8009ae4 <prvTaskExitError+0x2c>
	__asm volatile
 8009acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad0:	f383 8811 	msr	BASEPRI, r3
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	60fb      	str	r3, [r7, #12]
}
 8009ade:	bf00      	nop
 8009ae0:	bf00      	nop
 8009ae2:	e7fd      	b.n	8009ae0 <prvTaskExitError+0x28>
	__asm volatile
 8009ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae8:	f383 8811 	msr	BASEPRI, r3
 8009aec:	f3bf 8f6f 	isb	sy
 8009af0:	f3bf 8f4f 	dsb	sy
 8009af4:	60bb      	str	r3, [r7, #8]
}
 8009af6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009af8:	bf00      	nop
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d0fc      	beq.n	8009afa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b00:	bf00      	nop
 8009b02:	bf00      	nop
 8009b04:	3714      	adds	r7, #20
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	2000000c 	.word	0x2000000c
	...

08009b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b20:	4b07      	ldr	r3, [pc, #28]	@ (8009b40 <pxCurrentTCBConst2>)
 8009b22:	6819      	ldr	r1, [r3, #0]
 8009b24:	6808      	ldr	r0, [r1, #0]
 8009b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2a:	f380 8809 	msr	PSP, r0
 8009b2e:	f3bf 8f6f 	isb	sy
 8009b32:	f04f 0000 	mov.w	r0, #0
 8009b36:	f380 8811 	msr	BASEPRI, r0
 8009b3a:	4770      	bx	lr
 8009b3c:	f3af 8000 	nop.w

08009b40 <pxCurrentTCBConst2>:
 8009b40:	20000a84 	.word	0x20000a84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b44:	bf00      	nop
 8009b46:	bf00      	nop

08009b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b48:	4808      	ldr	r0, [pc, #32]	@ (8009b6c <prvPortStartFirstTask+0x24>)
 8009b4a:	6800      	ldr	r0, [r0, #0]
 8009b4c:	6800      	ldr	r0, [r0, #0]
 8009b4e:	f380 8808 	msr	MSP, r0
 8009b52:	f04f 0000 	mov.w	r0, #0
 8009b56:	f380 8814 	msr	CONTROL, r0
 8009b5a:	b662      	cpsie	i
 8009b5c:	b661      	cpsie	f
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	f3bf 8f6f 	isb	sy
 8009b66:	df00      	svc	0
 8009b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b6a:	bf00      	nop
 8009b6c:	e000ed08 	.word	0xe000ed08

08009b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009b76:	4b47      	ldr	r3, [pc, #284]	@ (8009c94 <xPortStartScheduler+0x124>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a47      	ldr	r2, [pc, #284]	@ (8009c98 <xPortStartScheduler+0x128>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d10b      	bne.n	8009b98 <xPortStartScheduler+0x28>
	__asm volatile
 8009b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	613b      	str	r3, [r7, #16]
}
 8009b92:	bf00      	nop
 8009b94:	bf00      	nop
 8009b96:	e7fd      	b.n	8009b94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009b98:	4b3e      	ldr	r3, [pc, #248]	@ (8009c94 <xPortStartScheduler+0x124>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a3f      	ldr	r2, [pc, #252]	@ (8009c9c <xPortStartScheduler+0x12c>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d10b      	bne.n	8009bba <xPortStartScheduler+0x4a>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	60fb      	str	r3, [r7, #12]
}
 8009bb4:	bf00      	nop
 8009bb6:	bf00      	nop
 8009bb8:	e7fd      	b.n	8009bb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009bba:	4b39      	ldr	r3, [pc, #228]	@ (8009ca0 <xPortStartScheduler+0x130>)
 8009bbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	22ff      	movs	r2, #255	@ 0xff
 8009bca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009bd4:	78fb      	ldrb	r3, [r7, #3]
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009bdc:	b2da      	uxtb	r2, r3
 8009bde:	4b31      	ldr	r3, [pc, #196]	@ (8009ca4 <xPortStartScheduler+0x134>)
 8009be0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009be2:	4b31      	ldr	r3, [pc, #196]	@ (8009ca8 <xPortStartScheduler+0x138>)
 8009be4:	2207      	movs	r2, #7
 8009be6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009be8:	e009      	b.n	8009bfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009bea:	4b2f      	ldr	r3, [pc, #188]	@ (8009ca8 <xPortStartScheduler+0x138>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	4a2d      	ldr	r2, [pc, #180]	@ (8009ca8 <xPortStartScheduler+0x138>)
 8009bf2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009bf4:	78fb      	ldrb	r3, [r7, #3]
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	005b      	lsls	r3, r3, #1
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bfe:	78fb      	ldrb	r3, [r7, #3]
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c06:	2b80      	cmp	r3, #128	@ 0x80
 8009c08:	d0ef      	beq.n	8009bea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c0a:	4b27      	ldr	r3, [pc, #156]	@ (8009ca8 <xPortStartScheduler+0x138>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f1c3 0307 	rsb	r3, r3, #7
 8009c12:	2b04      	cmp	r3, #4
 8009c14:	d00b      	beq.n	8009c2e <xPortStartScheduler+0xbe>
	__asm volatile
 8009c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	60bb      	str	r3, [r7, #8]
}
 8009c28:	bf00      	nop
 8009c2a:	bf00      	nop
 8009c2c:	e7fd      	b.n	8009c2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ca8 <xPortStartScheduler+0x138>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	021b      	lsls	r3, r3, #8
 8009c34:	4a1c      	ldr	r2, [pc, #112]	@ (8009ca8 <xPortStartScheduler+0x138>)
 8009c36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c38:	4b1b      	ldr	r3, [pc, #108]	@ (8009ca8 <xPortStartScheduler+0x138>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009c40:	4a19      	ldr	r2, [pc, #100]	@ (8009ca8 <xPortStartScheduler+0x138>)
 8009c42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c4c:	4b17      	ldr	r3, [pc, #92]	@ (8009cac <xPortStartScheduler+0x13c>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a16      	ldr	r2, [pc, #88]	@ (8009cac <xPortStartScheduler+0x13c>)
 8009c52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009c56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c58:	4b14      	ldr	r3, [pc, #80]	@ (8009cac <xPortStartScheduler+0x13c>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a13      	ldr	r2, [pc, #76]	@ (8009cac <xPortStartScheduler+0x13c>)
 8009c5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009c62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c64:	f000 f8da 	bl	8009e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c68:	4b11      	ldr	r3, [pc, #68]	@ (8009cb0 <xPortStartScheduler+0x140>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c6e:	f000 f8f9 	bl	8009e64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c72:	4b10      	ldr	r3, [pc, #64]	@ (8009cb4 <xPortStartScheduler+0x144>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a0f      	ldr	r2, [pc, #60]	@ (8009cb4 <xPortStartScheduler+0x144>)
 8009c78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009c7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c7e:	f7ff ff63 	bl	8009b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c82:	f7ff f82b 	bl	8008cdc <vTaskSwitchContext>
	prvTaskExitError();
 8009c86:	f7ff ff17 	bl	8009ab8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3718      	adds	r7, #24
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	e000ed00 	.word	0xe000ed00
 8009c98:	410fc271 	.word	0x410fc271
 8009c9c:	410fc270 	.word	0x410fc270
 8009ca0:	e000e400 	.word	0xe000e400
 8009ca4:	200010b0 	.word	0x200010b0
 8009ca8:	200010b4 	.word	0x200010b4
 8009cac:	e000ed20 	.word	0xe000ed20
 8009cb0:	2000000c 	.word	0x2000000c
 8009cb4:	e000ef34 	.word	0xe000ef34

08009cb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	607b      	str	r3, [r7, #4]
}
 8009cd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009cd2:	4b10      	ldr	r3, [pc, #64]	@ (8009d14 <vPortEnterCritical+0x5c>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	4a0e      	ldr	r2, [pc, #56]	@ (8009d14 <vPortEnterCritical+0x5c>)
 8009cda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8009d14 <vPortEnterCritical+0x5c>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d110      	bne.n	8009d06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8009d18 <vPortEnterCritical+0x60>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00b      	beq.n	8009d06 <vPortEnterCritical+0x4e>
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	603b      	str	r3, [r7, #0]
}
 8009d00:	bf00      	nop
 8009d02:	bf00      	nop
 8009d04:	e7fd      	b.n	8009d02 <vPortEnterCritical+0x4a>
	}
}
 8009d06:	bf00      	nop
 8009d08:	370c      	adds	r7, #12
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	2000000c 	.word	0x2000000c
 8009d18:	e000ed04 	.word	0xe000ed04

08009d1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d22:	4b12      	ldr	r3, [pc, #72]	@ (8009d6c <vPortExitCritical+0x50>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d10b      	bne.n	8009d42 <vPortExitCritical+0x26>
	__asm volatile
 8009d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d2e:	f383 8811 	msr	BASEPRI, r3
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	f3bf 8f4f 	dsb	sy
 8009d3a:	607b      	str	r3, [r7, #4]
}
 8009d3c:	bf00      	nop
 8009d3e:	bf00      	nop
 8009d40:	e7fd      	b.n	8009d3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009d42:	4b0a      	ldr	r3, [pc, #40]	@ (8009d6c <vPortExitCritical+0x50>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3b01      	subs	r3, #1
 8009d48:	4a08      	ldr	r2, [pc, #32]	@ (8009d6c <vPortExitCritical+0x50>)
 8009d4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d4c:	4b07      	ldr	r3, [pc, #28]	@ (8009d6c <vPortExitCritical+0x50>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d105      	bne.n	8009d60 <vPortExitCritical+0x44>
 8009d54:	2300      	movs	r3, #0
 8009d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	f383 8811 	msr	BASEPRI, r3
}
 8009d5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr
 8009d6c:	2000000c 	.word	0x2000000c

08009d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d70:	f3ef 8009 	mrs	r0, PSP
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	4b15      	ldr	r3, [pc, #84]	@ (8009dd0 <pxCurrentTCBConst>)
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	f01e 0f10 	tst.w	lr, #16
 8009d80:	bf08      	it	eq
 8009d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8a:	6010      	str	r0, [r2, #0]
 8009d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009d94:	f380 8811 	msr	BASEPRI, r0
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	f3bf 8f6f 	isb	sy
 8009da0:	f7fe ff9c 	bl	8008cdc <vTaskSwitchContext>
 8009da4:	f04f 0000 	mov.w	r0, #0
 8009da8:	f380 8811 	msr	BASEPRI, r0
 8009dac:	bc09      	pop	{r0, r3}
 8009dae:	6819      	ldr	r1, [r3, #0]
 8009db0:	6808      	ldr	r0, [r1, #0]
 8009db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db6:	f01e 0f10 	tst.w	lr, #16
 8009dba:	bf08      	it	eq
 8009dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009dc0:	f380 8809 	msr	PSP, r0
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	4770      	bx	lr
 8009dca:	bf00      	nop
 8009dcc:	f3af 8000 	nop.w

08009dd0 <pxCurrentTCBConst>:
 8009dd0:	20000a84 	.word	0x20000a84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop

08009dd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	607b      	str	r3, [r7, #4]
}
 8009df0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009df2:	f7fe feb9 	bl	8008b68 <xTaskIncrementTick>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d003      	beq.n	8009e04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009dfc:	4b06      	ldr	r3, [pc, #24]	@ (8009e18 <xPortSysTickHandler+0x40>)
 8009dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e02:	601a      	str	r2, [r3, #0]
 8009e04:	2300      	movs	r3, #0
 8009e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	f383 8811 	msr	BASEPRI, r3
}
 8009e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e10:	bf00      	nop
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	e000ed04 	.word	0xe000ed04

08009e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e20:	4b0b      	ldr	r3, [pc, #44]	@ (8009e50 <vPortSetupTimerInterrupt+0x34>)
 8009e22:	2200      	movs	r2, #0
 8009e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e26:	4b0b      	ldr	r3, [pc, #44]	@ (8009e54 <vPortSetupTimerInterrupt+0x38>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e58 <vPortSetupTimerInterrupt+0x3c>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a0a      	ldr	r2, [pc, #40]	@ (8009e5c <vPortSetupTimerInterrupt+0x40>)
 8009e32:	fba2 2303 	umull	r2, r3, r2, r3
 8009e36:	099b      	lsrs	r3, r3, #6
 8009e38:	4a09      	ldr	r2, [pc, #36]	@ (8009e60 <vPortSetupTimerInterrupt+0x44>)
 8009e3a:	3b01      	subs	r3, #1
 8009e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e3e:	4b04      	ldr	r3, [pc, #16]	@ (8009e50 <vPortSetupTimerInterrupt+0x34>)
 8009e40:	2207      	movs	r2, #7
 8009e42:	601a      	str	r2, [r3, #0]
}
 8009e44:	bf00      	nop
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	e000e010 	.word	0xe000e010
 8009e54:	e000e018 	.word	0xe000e018
 8009e58:	20000000 	.word	0x20000000
 8009e5c:	10624dd3 	.word	0x10624dd3
 8009e60:	e000e014 	.word	0xe000e014

08009e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009e74 <vPortEnableVFP+0x10>
 8009e68:	6801      	ldr	r1, [r0, #0]
 8009e6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009e6e:	6001      	str	r1, [r0, #0]
 8009e70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e72:	bf00      	nop
 8009e74:	e000ed88 	.word	0xe000ed88

08009e78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e7e:	f3ef 8305 	mrs	r3, IPSR
 8009e82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2b0f      	cmp	r3, #15
 8009e88:	d915      	bls.n	8009eb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e8a:	4a18      	ldr	r2, [pc, #96]	@ (8009eec <vPortValidateInterruptPriority+0x74>)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	4413      	add	r3, r2
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e94:	4b16      	ldr	r3, [pc, #88]	@ (8009ef0 <vPortValidateInterruptPriority+0x78>)
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	7afa      	ldrb	r2, [r7, #11]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d20b      	bcs.n	8009eb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	607b      	str	r3, [r7, #4]
}
 8009eb0:	bf00      	nop
 8009eb2:	bf00      	nop
 8009eb4:	e7fd      	b.n	8009eb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8009ef4 <vPortValidateInterruptPriority+0x7c>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8009ef8 <vPortValidateInterruptPriority+0x80>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d90b      	bls.n	8009ede <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eca:	f383 8811 	msr	BASEPRI, r3
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	603b      	str	r3, [r7, #0]
}
 8009ed8:	bf00      	nop
 8009eda:	bf00      	nop
 8009edc:	e7fd      	b.n	8009eda <vPortValidateInterruptPriority+0x62>
	}
 8009ede:	bf00      	nop
 8009ee0:	3714      	adds	r7, #20
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr
 8009eea:	bf00      	nop
 8009eec:	e000e3f0 	.word	0xe000e3f0
 8009ef0:	200010b0 	.word	0x200010b0
 8009ef4:	e000ed0c 	.word	0xe000ed0c
 8009ef8:	200010b4 	.word	0x200010b4

08009efc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b08a      	sub	sp, #40	@ 0x28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009f04:	2300      	movs	r3, #0
 8009f06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009f08:	f7fe fd72 	bl	80089f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009f0c:	4b5c      	ldr	r3, [pc, #368]	@ (800a080 <pvPortMalloc+0x184>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d101      	bne.n	8009f18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f14:	f000 f924 	bl	800a160 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f18:	4b5a      	ldr	r3, [pc, #360]	@ (800a084 <pvPortMalloc+0x188>)
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4013      	ands	r3, r2
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f040 8095 	bne.w	800a050 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d01e      	beq.n	8009f6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009f2c:	2208      	movs	r2, #8
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4413      	add	r3, r2
 8009f32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f003 0307 	and.w	r3, r3, #7
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d015      	beq.n	8009f6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f023 0307 	bic.w	r3, r3, #7
 8009f44:	3308      	adds	r3, #8
 8009f46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f003 0307 	and.w	r3, r3, #7
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00b      	beq.n	8009f6a <pvPortMalloc+0x6e>
	__asm volatile
 8009f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f56:	f383 8811 	msr	BASEPRI, r3
 8009f5a:	f3bf 8f6f 	isb	sy
 8009f5e:	f3bf 8f4f 	dsb	sy
 8009f62:	617b      	str	r3, [r7, #20]
}
 8009f64:	bf00      	nop
 8009f66:	bf00      	nop
 8009f68:	e7fd      	b.n	8009f66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d06f      	beq.n	800a050 <pvPortMalloc+0x154>
 8009f70:	4b45      	ldr	r3, [pc, #276]	@ (800a088 <pvPortMalloc+0x18c>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d86a      	bhi.n	800a050 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f7a:	4b44      	ldr	r3, [pc, #272]	@ (800a08c <pvPortMalloc+0x190>)
 8009f7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f7e:	4b43      	ldr	r3, [pc, #268]	@ (800a08c <pvPortMalloc+0x190>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f84:	e004      	b.n	8009f90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d903      	bls.n	8009fa2 <pvPortMalloc+0xa6>
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d1f1      	bne.n	8009f86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009fa2:	4b37      	ldr	r3, [pc, #220]	@ (800a080 <pvPortMalloc+0x184>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d051      	beq.n	800a050 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2208      	movs	r2, #8
 8009fb2:	4413      	add	r3, r2
 8009fb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	6a3b      	ldr	r3, [r7, #32]
 8009fbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc0:	685a      	ldr	r2, [r3, #4]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	1ad2      	subs	r2, r2, r3
 8009fc6:	2308      	movs	r3, #8
 8009fc8:	005b      	lsls	r3, r3, #1
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d920      	bls.n	800a010 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	f003 0307 	and.w	r3, r3, #7
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00b      	beq.n	8009ff8 <pvPortMalloc+0xfc>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	613b      	str	r3, [r7, #16]
}
 8009ff2:	bf00      	nop
 8009ff4:	bf00      	nop
 8009ff6:	e7fd      	b.n	8009ff4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffa:	685a      	ldr	r2, [r3, #4]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	1ad2      	subs	r2, r2, r3
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a00a:	69b8      	ldr	r0, [r7, #24]
 800a00c:	f000 f90a 	bl	800a224 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a010:	4b1d      	ldr	r3, [pc, #116]	@ (800a088 <pvPortMalloc+0x18c>)
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	1ad3      	subs	r3, r2, r3
 800a01a:	4a1b      	ldr	r2, [pc, #108]	@ (800a088 <pvPortMalloc+0x18c>)
 800a01c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a01e:	4b1a      	ldr	r3, [pc, #104]	@ (800a088 <pvPortMalloc+0x18c>)
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	4b1b      	ldr	r3, [pc, #108]	@ (800a090 <pvPortMalloc+0x194>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	429a      	cmp	r2, r3
 800a028:	d203      	bcs.n	800a032 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a02a:	4b17      	ldr	r3, [pc, #92]	@ (800a088 <pvPortMalloc+0x18c>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a18      	ldr	r2, [pc, #96]	@ (800a090 <pvPortMalloc+0x194>)
 800a030:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a034:	685a      	ldr	r2, [r3, #4]
 800a036:	4b13      	ldr	r3, [pc, #76]	@ (800a084 <pvPortMalloc+0x188>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	431a      	orrs	r2, r3
 800a03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a046:	4b13      	ldr	r3, [pc, #76]	@ (800a094 <pvPortMalloc+0x198>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	3301      	adds	r3, #1
 800a04c:	4a11      	ldr	r2, [pc, #68]	@ (800a094 <pvPortMalloc+0x198>)
 800a04e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a050:	f7fe fcdc 	bl	8008a0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	f003 0307 	and.w	r3, r3, #7
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00b      	beq.n	800a076 <pvPortMalloc+0x17a>
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	60fb      	str	r3, [r7, #12]
}
 800a070:	bf00      	nop
 800a072:	bf00      	nop
 800a074:	e7fd      	b.n	800a072 <pvPortMalloc+0x176>
	return pvReturn;
 800a076:	69fb      	ldr	r3, [r7, #28]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3728      	adds	r7, #40	@ 0x28
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	20001c78 	.word	0x20001c78
 800a084:	20001c8c 	.word	0x20001c8c
 800a088:	20001c7c 	.word	0x20001c7c
 800a08c:	20001c70 	.word	0x20001c70
 800a090:	20001c80 	.word	0x20001c80
 800a094:	20001c84 	.word	0x20001c84

0800a098 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d04f      	beq.n	800a14a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a0aa:	2308      	movs	r3, #8
 800a0ac:	425b      	negs	r3, r3
 800a0ae:	697a      	ldr	r2, [r7, #20]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	685a      	ldr	r2, [r3, #4]
 800a0bc:	4b25      	ldr	r3, [pc, #148]	@ (800a154 <vPortFree+0xbc>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10b      	bne.n	800a0de <vPortFree+0x46>
	__asm volatile
 800a0c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ca:	f383 8811 	msr	BASEPRI, r3
 800a0ce:	f3bf 8f6f 	isb	sy
 800a0d2:	f3bf 8f4f 	dsb	sy
 800a0d6:	60fb      	str	r3, [r7, #12]
}
 800a0d8:	bf00      	nop
 800a0da:	bf00      	nop
 800a0dc:	e7fd      	b.n	800a0da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00b      	beq.n	800a0fe <vPortFree+0x66>
	__asm volatile
 800a0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ea:	f383 8811 	msr	BASEPRI, r3
 800a0ee:	f3bf 8f6f 	isb	sy
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	60bb      	str	r3, [r7, #8]
}
 800a0f8:	bf00      	nop
 800a0fa:	bf00      	nop
 800a0fc:	e7fd      	b.n	800a0fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	4b14      	ldr	r3, [pc, #80]	@ (800a154 <vPortFree+0xbc>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4013      	ands	r3, r2
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d01e      	beq.n	800a14a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d11a      	bne.n	800a14a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	685a      	ldr	r2, [r3, #4]
 800a118:	4b0e      	ldr	r3, [pc, #56]	@ (800a154 <vPortFree+0xbc>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	43db      	mvns	r3, r3
 800a11e:	401a      	ands	r2, r3
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a124:	f7fe fc64 	bl	80089f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	685a      	ldr	r2, [r3, #4]
 800a12c:	4b0a      	ldr	r3, [pc, #40]	@ (800a158 <vPortFree+0xc0>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4413      	add	r3, r2
 800a132:	4a09      	ldr	r2, [pc, #36]	@ (800a158 <vPortFree+0xc0>)
 800a134:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a136:	6938      	ldr	r0, [r7, #16]
 800a138:	f000 f874 	bl	800a224 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a13c:	4b07      	ldr	r3, [pc, #28]	@ (800a15c <vPortFree+0xc4>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	3301      	adds	r3, #1
 800a142:	4a06      	ldr	r2, [pc, #24]	@ (800a15c <vPortFree+0xc4>)
 800a144:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a146:	f7fe fc61 	bl	8008a0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a14a:	bf00      	nop
 800a14c:	3718      	adds	r7, #24
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	20001c8c 	.word	0x20001c8c
 800a158:	20001c7c 	.word	0x20001c7c
 800a15c:	20001c88 	.word	0x20001c88

0800a160 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a166:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a16a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a16c:	4b27      	ldr	r3, [pc, #156]	@ (800a20c <prvHeapInit+0xac>)
 800a16e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f003 0307 	and.w	r3, r3, #7
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00c      	beq.n	800a194 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	3307      	adds	r3, #7
 800a17e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f023 0307 	bic.w	r3, r3, #7
 800a186:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	4a1f      	ldr	r2, [pc, #124]	@ (800a20c <prvHeapInit+0xac>)
 800a190:	4413      	add	r3, r2
 800a192:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a198:	4a1d      	ldr	r2, [pc, #116]	@ (800a210 <prvHeapInit+0xb0>)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a19e:	4b1c      	ldr	r3, [pc, #112]	@ (800a210 <prvHeapInit+0xb0>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	68ba      	ldr	r2, [r7, #8]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a1ac:	2208      	movs	r2, #8
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	1a9b      	subs	r3, r3, r2
 800a1b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f023 0307 	bic.w	r3, r3, #7
 800a1ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	4a15      	ldr	r2, [pc, #84]	@ (800a214 <prvHeapInit+0xb4>)
 800a1c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a1c2:	4b14      	ldr	r3, [pc, #80]	@ (800a214 <prvHeapInit+0xb4>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a1ca:	4b12      	ldr	r3, [pc, #72]	@ (800a214 <prvHeapInit+0xb4>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	1ad2      	subs	r2, r2, r3
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a1e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a214 <prvHeapInit+0xb4>)
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	4a0a      	ldr	r2, [pc, #40]	@ (800a218 <prvHeapInit+0xb8>)
 800a1ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	4a09      	ldr	r2, [pc, #36]	@ (800a21c <prvHeapInit+0xbc>)
 800a1f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1f8:	4b09      	ldr	r3, [pc, #36]	@ (800a220 <prvHeapInit+0xc0>)
 800a1fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a1fe:	601a      	str	r2, [r3, #0]
}
 800a200:	bf00      	nop
 800a202:	3714      	adds	r7, #20
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	200010b8 	.word	0x200010b8
 800a210:	20001c70 	.word	0x20001c70
 800a214:	20001c78 	.word	0x20001c78
 800a218:	20001c80 	.word	0x20001c80
 800a21c:	20001c7c 	.word	0x20001c7c
 800a220:	20001c8c 	.word	0x20001c8c

0800a224 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a22c:	4b28      	ldr	r3, [pc, #160]	@ (800a2d0 <prvInsertBlockIntoFreeList+0xac>)
 800a22e:	60fb      	str	r3, [r7, #12]
 800a230:	e002      	b.n	800a238 <prvInsertBlockIntoFreeList+0x14>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	60fb      	str	r3, [r7, #12]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d8f7      	bhi.n	800a232 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	68ba      	ldr	r2, [r7, #8]
 800a24c:	4413      	add	r3, r2
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	429a      	cmp	r2, r3
 800a252:	d108      	bne.n	800a266 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	685a      	ldr	r2, [r3, #4]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	441a      	add	r2, r3
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	68ba      	ldr	r2, [r7, #8]
 800a270:	441a      	add	r2, r3
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	429a      	cmp	r2, r3
 800a278:	d118      	bne.n	800a2ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	4b15      	ldr	r3, [pc, #84]	@ (800a2d4 <prvInsertBlockIntoFreeList+0xb0>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	429a      	cmp	r2, r3
 800a284:	d00d      	beq.n	800a2a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	685a      	ldr	r2, [r3, #4]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	441a      	add	r2, r3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	601a      	str	r2, [r3, #0]
 800a2a0:	e008      	b.n	800a2b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a2a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a2d4 <prvInsertBlockIntoFreeList+0xb0>)
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	601a      	str	r2, [r3, #0]
 800a2aa:	e003      	b.n	800a2b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d002      	beq.n	800a2c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2c2:	bf00      	nop
 800a2c4:	3714      	adds	r7, #20
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop
 800a2d0:	20001c70 	.word	0x20001c70
 800a2d4:	20001c78 	.word	0x20001c78

0800a2d8 <memset>:
 800a2d8:	4402      	add	r2, r0
 800a2da:	4603      	mov	r3, r0
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d100      	bne.n	800a2e2 <memset+0xa>
 800a2e0:	4770      	bx	lr
 800a2e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a2e6:	e7f9      	b.n	800a2dc <memset+0x4>

0800a2e8 <_reclaim_reent>:
 800a2e8:	4b29      	ldr	r3, [pc, #164]	@ (800a390 <_reclaim_reent+0xa8>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4283      	cmp	r3, r0
 800a2ee:	b570      	push	{r4, r5, r6, lr}
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	d04b      	beq.n	800a38c <_reclaim_reent+0xa4>
 800a2f4:	69c3      	ldr	r3, [r0, #28]
 800a2f6:	b1ab      	cbz	r3, 800a324 <_reclaim_reent+0x3c>
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	b16b      	cbz	r3, 800a318 <_reclaim_reent+0x30>
 800a2fc:	2500      	movs	r5, #0
 800a2fe:	69e3      	ldr	r3, [r4, #28]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	5959      	ldr	r1, [r3, r5]
 800a304:	2900      	cmp	r1, #0
 800a306:	d13b      	bne.n	800a380 <_reclaim_reent+0x98>
 800a308:	3504      	adds	r5, #4
 800a30a:	2d80      	cmp	r5, #128	@ 0x80
 800a30c:	d1f7      	bne.n	800a2fe <_reclaim_reent+0x16>
 800a30e:	69e3      	ldr	r3, [r4, #28]
 800a310:	4620      	mov	r0, r4
 800a312:	68d9      	ldr	r1, [r3, #12]
 800a314:	f000 f872 	bl	800a3fc <_free_r>
 800a318:	69e3      	ldr	r3, [r4, #28]
 800a31a:	6819      	ldr	r1, [r3, #0]
 800a31c:	b111      	cbz	r1, 800a324 <_reclaim_reent+0x3c>
 800a31e:	4620      	mov	r0, r4
 800a320:	f000 f86c 	bl	800a3fc <_free_r>
 800a324:	6961      	ldr	r1, [r4, #20]
 800a326:	b111      	cbz	r1, 800a32e <_reclaim_reent+0x46>
 800a328:	4620      	mov	r0, r4
 800a32a:	f000 f867 	bl	800a3fc <_free_r>
 800a32e:	69e1      	ldr	r1, [r4, #28]
 800a330:	b111      	cbz	r1, 800a338 <_reclaim_reent+0x50>
 800a332:	4620      	mov	r0, r4
 800a334:	f000 f862 	bl	800a3fc <_free_r>
 800a338:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a33a:	b111      	cbz	r1, 800a342 <_reclaim_reent+0x5a>
 800a33c:	4620      	mov	r0, r4
 800a33e:	f000 f85d 	bl	800a3fc <_free_r>
 800a342:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a344:	b111      	cbz	r1, 800a34c <_reclaim_reent+0x64>
 800a346:	4620      	mov	r0, r4
 800a348:	f000 f858 	bl	800a3fc <_free_r>
 800a34c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a34e:	b111      	cbz	r1, 800a356 <_reclaim_reent+0x6e>
 800a350:	4620      	mov	r0, r4
 800a352:	f000 f853 	bl	800a3fc <_free_r>
 800a356:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a358:	b111      	cbz	r1, 800a360 <_reclaim_reent+0x78>
 800a35a:	4620      	mov	r0, r4
 800a35c:	f000 f84e 	bl	800a3fc <_free_r>
 800a360:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a362:	b111      	cbz	r1, 800a36a <_reclaim_reent+0x82>
 800a364:	4620      	mov	r0, r4
 800a366:	f000 f849 	bl	800a3fc <_free_r>
 800a36a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a36c:	b111      	cbz	r1, 800a374 <_reclaim_reent+0x8c>
 800a36e:	4620      	mov	r0, r4
 800a370:	f000 f844 	bl	800a3fc <_free_r>
 800a374:	6a23      	ldr	r3, [r4, #32]
 800a376:	b14b      	cbz	r3, 800a38c <_reclaim_reent+0xa4>
 800a378:	4620      	mov	r0, r4
 800a37a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a37e:	4718      	bx	r3
 800a380:	680e      	ldr	r6, [r1, #0]
 800a382:	4620      	mov	r0, r4
 800a384:	f000 f83a 	bl	800a3fc <_free_r>
 800a388:	4631      	mov	r1, r6
 800a38a:	e7bb      	b.n	800a304 <_reclaim_reent+0x1c>
 800a38c:	bd70      	pop	{r4, r5, r6, pc}
 800a38e:	bf00      	nop
 800a390:	20000010 	.word	0x20000010

0800a394 <__libc_init_array>:
 800a394:	b570      	push	{r4, r5, r6, lr}
 800a396:	4d0d      	ldr	r5, [pc, #52]	@ (800a3cc <__libc_init_array+0x38>)
 800a398:	4c0d      	ldr	r4, [pc, #52]	@ (800a3d0 <__libc_init_array+0x3c>)
 800a39a:	1b64      	subs	r4, r4, r5
 800a39c:	10a4      	asrs	r4, r4, #2
 800a39e:	2600      	movs	r6, #0
 800a3a0:	42a6      	cmp	r6, r4
 800a3a2:	d109      	bne.n	800a3b8 <__libc_init_array+0x24>
 800a3a4:	4d0b      	ldr	r5, [pc, #44]	@ (800a3d4 <__libc_init_array+0x40>)
 800a3a6:	4c0c      	ldr	r4, [pc, #48]	@ (800a3d8 <__libc_init_array+0x44>)
 800a3a8:	f000 f87e 	bl	800a4a8 <_init>
 800a3ac:	1b64      	subs	r4, r4, r5
 800a3ae:	10a4      	asrs	r4, r4, #2
 800a3b0:	2600      	movs	r6, #0
 800a3b2:	42a6      	cmp	r6, r4
 800a3b4:	d105      	bne.n	800a3c2 <__libc_init_array+0x2e>
 800a3b6:	bd70      	pop	{r4, r5, r6, pc}
 800a3b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3bc:	4798      	blx	r3
 800a3be:	3601      	adds	r6, #1
 800a3c0:	e7ee      	b.n	800a3a0 <__libc_init_array+0xc>
 800a3c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3c6:	4798      	blx	r3
 800a3c8:	3601      	adds	r6, #1
 800a3ca:	e7f2      	b.n	800a3b2 <__libc_init_array+0x1e>
 800a3cc:	0800a604 	.word	0x0800a604
 800a3d0:	0800a604 	.word	0x0800a604
 800a3d4:	0800a604 	.word	0x0800a604
 800a3d8:	0800a608 	.word	0x0800a608

0800a3dc <__retarget_lock_acquire_recursive>:
 800a3dc:	4770      	bx	lr

0800a3de <__retarget_lock_release_recursive>:
 800a3de:	4770      	bx	lr

0800a3e0 <memcpy>:
 800a3e0:	440a      	add	r2, r1
 800a3e2:	4291      	cmp	r1, r2
 800a3e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3e8:	d100      	bne.n	800a3ec <memcpy+0xc>
 800a3ea:	4770      	bx	lr
 800a3ec:	b510      	push	{r4, lr}
 800a3ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3f6:	4291      	cmp	r1, r2
 800a3f8:	d1f9      	bne.n	800a3ee <memcpy+0xe>
 800a3fa:	bd10      	pop	{r4, pc}

0800a3fc <_free_r>:
 800a3fc:	b538      	push	{r3, r4, r5, lr}
 800a3fe:	4605      	mov	r5, r0
 800a400:	2900      	cmp	r1, #0
 800a402:	d041      	beq.n	800a488 <_free_r+0x8c>
 800a404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a408:	1f0c      	subs	r4, r1, #4
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	bfb8      	it	lt
 800a40e:	18e4      	addlt	r4, r4, r3
 800a410:	f000 f83e 	bl	800a490 <__malloc_lock>
 800a414:	4a1d      	ldr	r2, [pc, #116]	@ (800a48c <_free_r+0x90>)
 800a416:	6813      	ldr	r3, [r2, #0]
 800a418:	b933      	cbnz	r3, 800a428 <_free_r+0x2c>
 800a41a:	6063      	str	r3, [r4, #4]
 800a41c:	6014      	str	r4, [r2, #0]
 800a41e:	4628      	mov	r0, r5
 800a420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a424:	f000 b83a 	b.w	800a49c <__malloc_unlock>
 800a428:	42a3      	cmp	r3, r4
 800a42a:	d908      	bls.n	800a43e <_free_r+0x42>
 800a42c:	6820      	ldr	r0, [r4, #0]
 800a42e:	1821      	adds	r1, r4, r0
 800a430:	428b      	cmp	r3, r1
 800a432:	bf01      	itttt	eq
 800a434:	6819      	ldreq	r1, [r3, #0]
 800a436:	685b      	ldreq	r3, [r3, #4]
 800a438:	1809      	addeq	r1, r1, r0
 800a43a:	6021      	streq	r1, [r4, #0]
 800a43c:	e7ed      	b.n	800a41a <_free_r+0x1e>
 800a43e:	461a      	mov	r2, r3
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	b10b      	cbz	r3, 800a448 <_free_r+0x4c>
 800a444:	42a3      	cmp	r3, r4
 800a446:	d9fa      	bls.n	800a43e <_free_r+0x42>
 800a448:	6811      	ldr	r1, [r2, #0]
 800a44a:	1850      	adds	r0, r2, r1
 800a44c:	42a0      	cmp	r0, r4
 800a44e:	d10b      	bne.n	800a468 <_free_r+0x6c>
 800a450:	6820      	ldr	r0, [r4, #0]
 800a452:	4401      	add	r1, r0
 800a454:	1850      	adds	r0, r2, r1
 800a456:	4283      	cmp	r3, r0
 800a458:	6011      	str	r1, [r2, #0]
 800a45a:	d1e0      	bne.n	800a41e <_free_r+0x22>
 800a45c:	6818      	ldr	r0, [r3, #0]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	6053      	str	r3, [r2, #4]
 800a462:	4408      	add	r0, r1
 800a464:	6010      	str	r0, [r2, #0]
 800a466:	e7da      	b.n	800a41e <_free_r+0x22>
 800a468:	d902      	bls.n	800a470 <_free_r+0x74>
 800a46a:	230c      	movs	r3, #12
 800a46c:	602b      	str	r3, [r5, #0]
 800a46e:	e7d6      	b.n	800a41e <_free_r+0x22>
 800a470:	6820      	ldr	r0, [r4, #0]
 800a472:	1821      	adds	r1, r4, r0
 800a474:	428b      	cmp	r3, r1
 800a476:	bf04      	itt	eq
 800a478:	6819      	ldreq	r1, [r3, #0]
 800a47a:	685b      	ldreq	r3, [r3, #4]
 800a47c:	6063      	str	r3, [r4, #4]
 800a47e:	bf04      	itt	eq
 800a480:	1809      	addeq	r1, r1, r0
 800a482:	6021      	streq	r1, [r4, #0]
 800a484:	6054      	str	r4, [r2, #4]
 800a486:	e7ca      	b.n	800a41e <_free_r+0x22>
 800a488:	bd38      	pop	{r3, r4, r5, pc}
 800a48a:	bf00      	nop
 800a48c:	20001dcc 	.word	0x20001dcc

0800a490 <__malloc_lock>:
 800a490:	4801      	ldr	r0, [pc, #4]	@ (800a498 <__malloc_lock+0x8>)
 800a492:	f7ff bfa3 	b.w	800a3dc <__retarget_lock_acquire_recursive>
 800a496:	bf00      	nop
 800a498:	20001dc8 	.word	0x20001dc8

0800a49c <__malloc_unlock>:
 800a49c:	4801      	ldr	r0, [pc, #4]	@ (800a4a4 <__malloc_unlock+0x8>)
 800a49e:	f7ff bf9e 	b.w	800a3de <__retarget_lock_release_recursive>
 800a4a2:	bf00      	nop
 800a4a4:	20001dc8 	.word	0x20001dc8

0800a4a8 <_init>:
 800a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4aa:	bf00      	nop
 800a4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ae:	bc08      	pop	{r3}
 800a4b0:	469e      	mov	lr, r3
 800a4b2:	4770      	bx	lr

0800a4b4 <_fini>:
 800a4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b6:	bf00      	nop
 800a4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ba:	bc08      	pop	{r3}
 800a4bc:	469e      	mov	lr, r3
 800a4be:	4770      	bx	lr
