
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007770  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08007920  08007920  00008920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a18  08007a18  00009060  2**0
                  CONTENTS
  4 .ARM          00000000  08007a18  08007a18  00009060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a18  08007a18  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a18  08007a18  00008a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a1c  08007a1c  00008a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007a20  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c78  20000060  08007a80  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cd8  08007a80  00009cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204a6  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041a5  00000000  00000000  00029536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d10  00000000  00000000  0002d6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000168d  00000000  00000000  0002f3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cf04  00000000  00000000  00030a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb42  00000000  00000000  0005d981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ea95  00000000  00000000  0007c4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019af58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f90  00000000  00000000  0019af9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  001a2f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007908 	.word	0x08007908

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08007908 	.word	0x08007908

080001f0 <TCAL9538RSVR_INIT>:
    
    return pin_number; 
}

uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b086      	sub	sp, #24
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	60f8      	str	r0, [r7, #12]
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	4611      	mov	r1, r2
 80001fc:	461a      	mov	r2, r3
 80001fe:	460b      	mov	r3, r1
 8000200:	71fb      	strb	r3, [r7, #7]
 8000202:	4613      	mov	r3, r2
 8000204:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 8000206:	2300      	movs	r3, #0
 8000208:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;


    dev->i2cHandle = i2cHandle;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	68ba      	ldr	r2, [r7, #8]
 800020e:	601a      	str	r2, [r3, #0]
    dev->portValues = 0;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	2200      	movs	r2, #0
 8000214:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 0303 	and.w	r3, r3, #3
 800021c:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress << 1);
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	005b      	lsls	r3, r3, #1
 8000222:	b25b      	sxtb	r3, r3
 8000224:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000228:	b25b      	sxtb	r3, r3
 800022a:	b2da      	uxtb	r2, r3
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	711a      	strb	r2, [r3, #4]

    status = TCAL9538RSVR_SetDirection(dev, direction_bitMask);
 8000230:	79bb      	ldrb	r3, [r7, #6]
 8000232:	4619      	mov	r1, r3
 8000234:	68f8      	ldr	r0, [r7, #12]
 8000236:	f000 f823 	bl	8000280 <TCAL9538RSVR_SetDirection>
 800023a:	4603      	mov	r3, r0
 800023c:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 800023e:	7dbb      	ldrb	r3, [r7, #22]
 8000240:	2b00      	cmp	r3, #0
 8000242:	bf14      	ite	ne
 8000244:	2301      	movne	r3, #1
 8000246:	2300      	moveq	r3, #0
 8000248:	b2db      	uxtb	r3, r3
 800024a:	461a      	mov	r2, r3
 800024c:	7dfb      	ldrb	r3, [r7, #23]
 800024e:	4413      	add	r3, r2
 8000250:	75fb      	strb	r3, [r7, #23]

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 8000252:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000256:	4619      	mov	r1, r3
 8000258:	68f8      	ldr	r0, [r7, #12]
 800025a:	f000 f822 	bl	80002a2 <TCAL9538RSVR_SetInterrupts>
 800025e:	4603      	mov	r3, r0
 8000260:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8000262:	7dbb      	ldrb	r3, [r7, #22]
 8000264:	2b00      	cmp	r3, #0
 8000266:	bf14      	ite	ne
 8000268:	2301      	movne	r3, #1
 800026a:	2300      	moveq	r3, #0
 800026c:	b2db      	uxtb	r3, r3
 800026e:	461a      	mov	r2, r3
 8000270:	7dfb      	ldrb	r3, [r7, #23]
 8000272:	4413      	add	r3, r2
 8000274:	75fb      	strb	r3, [r7, #23]

    return (errNum);
 8000276:	7dfb      	ldrb	r3, [r7, #23]
}
 8000278:	4618      	mov	r0, r3
 800027a:	3718      	adds	r7, #24
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t bitMask)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, &bitMask);
 800028c:	1cfb      	adds	r3, r7, #3
 800028e:	461a      	mov	r2, r3
 8000290:	2103      	movs	r1, #3
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f000 f87f 	bl	8000396 <TCAL9538RSVR_WriteRegister>
 8000298:	4603      	mov	r3, r0
}
 800029a:	4618      	mov	r0, r3
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}

080002a2 <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 80002a2:	b580      	push	{r7, lr}
 80002a4:	b082      	sub	sp, #8
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	6078      	str	r0, [r7, #4]
 80002aa:	460b      	mov	r3, r1
 80002ac:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 80002ae:	1cfb      	adds	r3, r7, #3
 80002b0:	461a      	mov	r2, r3
 80002b2:	2145      	movs	r1, #69	@ 0x45
 80002b4:	6878      	ldr	r0, [r7, #4]
 80002b6:	f000 f86e 	bl	8000396 <TCAL9538RSVR_WriteRegister>
 80002ba:	4603      	mov	r3, r0
}
 80002bc:	4618      	mov	r0, r3
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    uint8_t intPinBitMask = 0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	73bb      	strb	r3, [r7, #14]
    uint8_t triggeredInterrupts = 0;
 80002d4:	2300      	movs	r3, #0
 80002d6:	733b      	strb	r3, [r7, #12]

    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadInput(dev, &dev->portValues);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	3305      	adds	r3, #5
 80002dc:	4619      	mov	r1, r3
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f000 f82d 	bl	800033e <TCAL9538RSVR_ReadInput>
 80002e4:	4603      	mov	r3, r0
 80002e6:	737b      	strb	r3, [r7, #13]

    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 80002e8:	f107 030c 	add.w	r3, r7, #12
 80002ec:	461a      	mov	r2, r3
 80002ee:	2146      	movs	r1, #70	@ 0x46
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f000 f833 	bl	800035c <TCAL9538RSVR_ReadRegister>
 80002f6:	4603      	mov	r3, r0
 80002f8:	737b      	strb	r3, [r7, #13]
    errNum += (status != HAL_OK);
 80002fa:	7b7b      	ldrb	r3, [r7, #13]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	bf14      	ite	ne
 8000300:	2301      	movne	r3, #1
 8000302:	2300      	moveq	r3, #0
 8000304:	b2db      	uxtb	r3, r3
 8000306:	461a      	mov	r2, r3
 8000308:	7bfb      	ldrb	r3, [r7, #15]
 800030a:	4413      	add	r3, r2
 800030c:	73fb      	strb	r3, [r7, #15]

    status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 800030e:	f107 030c 	add.w	r3, r7, #12
 8000312:	461a      	mov	r2, r3
 8000314:	2146      	movs	r1, #70	@ 0x46
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f000 f83d 	bl	8000396 <TCAL9538RSVR_WriteRegister>
 800031c:	4603      	mov	r3, r0
 800031e:	737b      	strb	r3, [r7, #13]
    errNum += (status != HAL_OK);
 8000320:	7b7b      	ldrb	r3, [r7, #13]
 8000322:	2b00      	cmp	r3, #0
 8000324:	bf14      	ite	ne
 8000326:	2301      	movne	r3, #1
 8000328:	2300      	moveq	r3, #0
 800032a:	b2db      	uxtb	r3, r3
 800032c:	461a      	mov	r2, r3
 800032e:	7bfb      	ldrb	r3, [r7, #15]
 8000330:	4413      	add	r3, r2
 8000332:	73fb      	strb	r3, [r7, #15]

    return (errNum);
 8000334:	7bfb      	ldrb	r3, [r7, #15]
}
 8000336:	4618      	mov	r0, r3
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}

0800033e <TCAL9538RSVR_ReadInput>:
    
// }


HAL_StatusTypeDef TCAL9538RSVR_ReadInput(TCAL9538RSVR* dev, uint8_t *data)
{
 800033e:	b580      	push	{r7, lr}
 8000340:	b082      	sub	sp, #8
 8000342:	af00      	add	r7, sp, #0
 8000344:	6078      	str	r0, [r7, #4]
 8000346:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, data);
 8000348:	683a      	ldr	r2, [r7, #0]
 800034a:	2100      	movs	r1, #0
 800034c:	6878      	ldr	r0, [r7, #4]
 800034e:	f000 f805 	bl	800035c <TCAL9538RSVR_ReadRegister>
 8000352:	4603      	mov	r3, r0
}
 8000354:	4618      	mov	r0, r3
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <TCAL9538RSVR_ReadRegister>:
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
}

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b088      	sub	sp, #32
 8000360:	af04      	add	r7, sp, #16
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	460b      	mov	r3, r1
 8000366:	607a      	str	r2, [r7, #4]
 8000368:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	6818      	ldr	r0, [r3, #0]
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	791b      	ldrb	r3, [r3, #4]
 8000372:	4619      	mov	r1, r3
 8000374:	7afb      	ldrb	r3, [r7, #11]
 8000376:	b29a      	uxth	r2, r3
 8000378:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800037c:	9302      	str	r3, [sp, #8]
 800037e:	2301      	movs	r3, #1
 8000380:	9301      	str	r3, [sp, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	2301      	movs	r3, #1
 8000388:	f002 f974 	bl	8002674 <HAL_I2C_Mem_Read>
 800038c:	4603      	mov	r3, r0
}
 800038e:	4618      	mov	r0, r3
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b088      	sub	sp, #32
 800039a:	af04      	add	r7, sp, #16
 800039c:	60f8      	str	r0, [r7, #12]
 800039e:	460b      	mov	r3, r1
 80003a0:	607a      	str	r2, [r7, #4]
 80003a2:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	6818      	ldr	r0, [r3, #0]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	791b      	ldrb	r3, [r3, #4]
 80003ac:	4619      	mov	r1, r3
 80003ae:	7afb      	ldrb	r3, [r7, #11]
 80003b0:	b29a      	uxth	r2, r3
 80003b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003b6:	9302      	str	r3, [sp, #8]
 80003b8:	2301      	movs	r3, #1
 80003ba:	9301      	str	r3, [sp, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	2301      	movs	r3, #1
 80003c2:	f002 f957 	bl	8002674 <HAL_I2C_Mem_Read>
 80003c6:	4603      	mov	r3, r0
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3710      	adds	r7, #16
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// GPIO Expander Interrupt Handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	80fb      	strh	r3, [r7, #6]
	if (TCAL9538RSVR_HandleInterrupt(&U5) != HAL_OK)
 80003da:	480a      	ldr	r0, [pc, #40]	@ (8000404 <HAL_GPIO_EXTI_Callback+0x34>)
 80003dc:	f7ff ff72 	bl	80002c4 <TCAL9538RSVR_HandleInterrupt>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <HAL_GPIO_EXTI_Callback+0x1a>
	{
		Error_Handler();
 80003e6:	f000 fa63 	bl	80008b0 <Error_Handler>
	}
	if(TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK)
 80003ea:	4807      	ldr	r0, [pc, #28]	@ (8000408 <HAL_GPIO_EXTI_Callback+0x38>)
 80003ec:	f7ff ff6a 	bl	80002c4 <TCAL9538RSVR_HandleInterrupt>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <HAL_GPIO_EXTI_Callback+0x2a>
	{
		Error_Handler();
 80003f6:	f000 fa5b 	bl	80008b0 <Error_Handler>
	}
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000194 	.word	0x20000194
 8000408:	2000019c 	.word	0x2000019c

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000412:	f000 fcca 	bl	8000daa <HAL_Init>

  /* USER CODE BEGIN Init */
  TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0b00001111, 0b00001111);
 8000416:	230f      	movs	r3, #15
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	230f      	movs	r3, #15
 800041c:	2202      	movs	r2, #2
 800041e:	491b      	ldr	r1, [pc, #108]	@ (800048c <main+0x80>)
 8000420:	481b      	ldr	r0, [pc, #108]	@ (8000490 <main+0x84>)
 8000422:	f7ff fee5 	bl	80001f0 <TCAL9538RSVR_INIT>
  TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b11000000, 0b11000000);
 8000426:	23c0      	movs	r3, #192	@ 0xc0
 8000428:	9300      	str	r3, [sp, #0]
 800042a:	23c0      	movs	r3, #192	@ 0xc0
 800042c:	2201      	movs	r2, #1
 800042e:	4917      	ldr	r1, [pc, #92]	@ (800048c <main+0x80>)
 8000430:	4818      	ldr	r0, [pc, #96]	@ (8000494 <main+0x88>)
 8000432:	f7ff fedd 	bl	80001f0 <TCAL9538RSVR_INIT>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000436:	f000 f841 	bl	80004bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800043a:	f000 f9a3 	bl	8000784 <MX_GPIO_Init>
  MX_ADC1_Init();
 800043e:	f000 f883 	bl	8000548 <MX_ADC1_Init>
  MX_I2C4_Init();
 8000442:	f000 f95f 	bl	8000704 <MX_I2C4_Init>
  MX_CAN1_Init();
 8000446:	f000 f8f5 	bl	8000634 <MX_CAN1_Init>
  MX_CAN2_Init();
 800044a:	f000 f927 	bl	800069c <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800044e:	f004 fbc3 	bl	8004bd8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartDefaultTask, NULL, &HeartBeat_attributes);
 8000452:	4a11      	ldr	r2, [pc, #68]	@ (8000498 <main+0x8c>)
 8000454:	2100      	movs	r1, #0
 8000456:	4811      	ldr	r0, [pc, #68]	@ (800049c <main+0x90>)
 8000458:	f004 fc08 	bl	8004c6c <osThreadNew>
 800045c:	4603      	mov	r3, r0
 800045e:	4a10      	ldr	r2, [pc, #64]	@ (80004a0 <main+0x94>)
 8000460:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);
 8000462:	4a10      	ldr	r2, [pc, #64]	@ (80004a4 <main+0x98>)
 8000464:	2100      	movs	r1, #0
 8000466:	4810      	ldr	r0, [pc, #64]	@ (80004a8 <main+0x9c>)
 8000468:	f004 fc00 	bl	8004c6c <osThreadNew>
 800046c:	4603      	mov	r3, r0
 800046e:	4a0f      	ldr	r2, [pc, #60]	@ (80004ac <main+0xa0>)
 8000470:	6013      	str	r3, [r2, #0]

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 8000472:	4a0f      	ldr	r2, [pc, #60]	@ (80004b0 <main+0xa4>)
 8000474:	2100      	movs	r1, #0
 8000476:	480f      	ldr	r0, [pc, #60]	@ (80004b4 <main+0xa8>)
 8000478:	f004 fbf8 	bl	8004c6c <osThreadNew>
 800047c:	4603      	mov	r3, r0
 800047e:	4a0e      	ldr	r2, [pc, #56]	@ (80004b8 <main+0xac>)
 8000480:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000482:	f004 fbcd 	bl	8004c20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000486:	bf00      	nop
 8000488:	e7fd      	b.n	8000486 <main+0x7a>
 800048a:	bf00      	nop
 800048c:	20000134 	.word	0x20000134
 8000490:	20000194 	.word	0x20000194
 8000494:	2000019c 	.word	0x2000019c
 8000498:	08007964 	.word	0x08007964
 800049c:	0800084d 	.word	0x0800084d
 80004a0:	20000188 	.word	0x20000188
 80004a4:	08007988 	.word	0x08007988
 80004a8:	0800086d 	.word	0x0800086d
 80004ac:	2000018c 	.word	0x2000018c
 80004b0:	080079ac 	.word	0x080079ac
 80004b4:	0800087d 	.word	0x0800087d
 80004b8:	20000190 	.word	0x20000190

080004bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b096      	sub	sp, #88	@ 0x58
 80004c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	2244      	movs	r2, #68	@ 0x44
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f007 f934 	bl	8007738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d0:	463b      	mov	r3, r7
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80004e2:	f002 fcf5 	bl	8002ed0 <HAL_PWREx_ControlVoltageScaling>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004ec:	f000 f9e0 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004f0:	2310      	movs	r3, #16
 80004f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004f4:	2301      	movs	r3, #1
 80004f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004fc:	2360      	movs	r3, #96	@ 0x60
 80004fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000500:	2300      	movs	r3, #0
 8000502:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000504:	f107 0314 	add.w	r3, r7, #20
 8000508:	4618      	mov	r0, r3
 800050a:	f002 fd37 	bl	8002f7c <HAL_RCC_OscConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000514:	f000 f9cc 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000518:	230f      	movs	r3, #15
 800051a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800051c:	2300      	movs	r3, #0
 800051e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000524:	2300      	movs	r3, #0
 8000526:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800052c:	463b      	mov	r3, r7
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f003 f93d 	bl	80037b0 <HAL_RCC_ClockConfig>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800053c:	f000 f9b8 	bl	80008b0 <Error_Handler>
  }
}
 8000540:	bf00      	nop
 8000542:	3758      	adds	r7, #88	@ 0x58
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08a      	sub	sp, #40	@ 0x28
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800054e:	f107 031c 	add.w	r3, r7, #28
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
 8000568:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800056a:	4b2f      	ldr	r3, [pc, #188]	@ (8000628 <MX_ADC1_Init+0xe0>)
 800056c:	4a2f      	ldr	r2, [pc, #188]	@ (800062c <MX_ADC1_Init+0xe4>)
 800056e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000570:	4b2d      	ldr	r3, [pc, #180]	@ (8000628 <MX_ADC1_Init+0xe0>)
 8000572:	2200      	movs	r2, #0
 8000574:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000576:	4b2c      	ldr	r3, [pc, #176]	@ (8000628 <MX_ADC1_Init+0xe0>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800057c:	4b2a      	ldr	r3, [pc, #168]	@ (8000628 <MX_ADC1_Init+0xe0>)
 800057e:	2200      	movs	r2, #0
 8000580:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000582:	4b29      	ldr	r3, [pc, #164]	@ (8000628 <MX_ADC1_Init+0xe0>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000588:	4b27      	ldr	r3, [pc, #156]	@ (8000628 <MX_ADC1_Init+0xe0>)
 800058a:	2204      	movs	r2, #4
 800058c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800058e:	4b26      	ldr	r3, [pc, #152]	@ (8000628 <MX_ADC1_Init+0xe0>)
 8000590:	2200      	movs	r2, #0
 8000592:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000594:	4b24      	ldr	r3, [pc, #144]	@ (8000628 <MX_ADC1_Init+0xe0>)
 8000596:	2200      	movs	r2, #0
 8000598:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800059a:	4b23      	ldr	r3, [pc, #140]	@ (8000628 <MX_ADC1_Init+0xe0>)
 800059c:	2201      	movs	r2, #1
 800059e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a0:	4b21      	ldr	r3, [pc, #132]	@ (8000628 <MX_ADC1_Init+0xe0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000628 <MX_ADC1_Init+0xe0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000628 <MX_ADC1_Init+0xe0>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000628 <MX_ADC1_Init+0xe0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000628 <MX_ADC1_Init+0xe0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005c2:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <MX_ADC1_Init+0xe0>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ca:	4817      	ldr	r0, [pc, #92]	@ (8000628 <MX_ADC1_Init+0xe0>)
 80005cc:	f000 fdc6 	bl	800115c <HAL_ADC_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80005d6:	f000 f96b 	bl	80008b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	4619      	mov	r1, r3
 80005e4:	4810      	ldr	r0, [pc, #64]	@ (8000628 <MX_ADC1_Init+0xe0>)
 80005e6:	f001 fb3f 	bl	8001c68 <HAL_ADCEx_MultiModeConfigChannel>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80005f0:	f000 f95e 	bl	80008b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <MX_ADC1_Init+0xe8>)
 80005f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005f8:	2306      	movs	r3, #6
 80005fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000600:	237f      	movs	r3, #127	@ 0x7f
 8000602:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000604:	2304      	movs	r3, #4
 8000606:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	4619      	mov	r1, r3
 8000610:	4805      	ldr	r0, [pc, #20]	@ (8000628 <MX_ADC1_Init+0xe0>)
 8000612:	f000 fef7 	bl	8001404 <HAL_ADC_ConfigChannel>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800061c:	f000 f948 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	3728      	adds	r7, #40	@ 0x28
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000007c 	.word	0x2000007c
 800062c:	50040000 	.word	0x50040000
 8000630:	04300002 	.word	0x04300002

08000634 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000638:	4b16      	ldr	r3, [pc, #88]	@ (8000694 <MX_CAN1_Init+0x60>)
 800063a:	4a17      	ldr	r2, [pc, #92]	@ (8000698 <MX_CAN1_Init+0x64>)
 800063c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800063e:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <MX_CAN1_Init+0x60>)
 8000640:	2210      	movs	r2, #16
 8000642:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000644:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <MX_CAN1_Init+0x60>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <MX_CAN1_Init+0x60>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000650:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <MX_CAN1_Init+0x60>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000656:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <MX_CAN1_Init+0x60>)
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800065c:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <MX_CAN1_Init+0x60>)
 800065e:	2200      	movs	r2, #0
 8000660:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000662:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_CAN1_Init+0x60>)
 8000664:	2200      	movs	r2, #0
 8000666:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <MX_CAN1_Init+0x60>)
 800066a:	2200      	movs	r2, #0
 800066c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_CAN1_Init+0x60>)
 8000670:	2200      	movs	r2, #0
 8000672:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <MX_CAN1_Init+0x60>)
 8000676:	2200      	movs	r2, #0
 8000678:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800067a:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_CAN1_Init+0x60>)
 800067c:	2200      	movs	r2, #0
 800067e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	@ (8000694 <MX_CAN1_Init+0x60>)
 8000682:	f001 fba1 	bl	8001dc8 <HAL_CAN_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800068c:	f000 f910 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200000e4 	.word	0x200000e4
 8000698:	40006400 	.word	0x40006400

0800069c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80006a0:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006a2:	4a17      	ldr	r2, [pc, #92]	@ (8000700 <MX_CAN2_Init+0x64>)
 80006a4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006a8:	2210      	movs	r2, #16
 80006aa:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80006ac:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006b8:	4b10      	ldr	r3, [pc, #64]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006d8:	2200      	movs	r2, #0
 80006da:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006de:	2200      	movs	r2, #0
 80006e0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006ea:	f001 fb6d 	bl	8001dc8 <HAL_CAN_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80006f4:	f000 f8dc 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000010c 	.word	0x2000010c
 8000700:	40006800 	.word	0x40006800

08000704 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000708:	4b1b      	ldr	r3, [pc, #108]	@ (8000778 <MX_I2C4_Init+0x74>)
 800070a:	4a1c      	ldr	r2, [pc, #112]	@ (800077c <MX_I2C4_Init+0x78>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 800070e:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <MX_I2C4_Init+0x74>)
 8000710:	4a1b      	ldr	r2, [pc, #108]	@ (8000780 <MX_I2C4_Init+0x7c>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000714:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <MX_I2C4_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071a:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <MX_I2C4_Init+0x74>)
 800071c:	2201      	movs	r2, #1
 800071e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <MX_I2C4_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000726:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_I2C4_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_I2C4_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_I2C4_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_I2C4_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800073e:	480e      	ldr	r0, [pc, #56]	@ (8000778 <MX_I2C4_Init+0x74>)
 8000740:	f001 fefc 	bl	800253c <HAL_I2C_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800074a:	f000 f8b1 	bl	80008b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800074e:	2100      	movs	r1, #0
 8000750:	4809      	ldr	r0, [pc, #36]	@ (8000778 <MX_I2C4_Init+0x74>)
 8000752:	f002 fb17 	bl	8002d84 <HAL_I2CEx_ConfigAnalogFilter>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800075c:	f000 f8a8 	bl	80008b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000760:	2100      	movs	r1, #0
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_I2C4_Init+0x74>)
 8000764:	f002 fb59 	bl	8002e1a <HAL_I2CEx_ConfigDigitalFilter>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800076e:	f000 f89f 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000134 	.word	0x20000134
 800077c:	40008400 	.word	0x40008400
 8000780:	00100d14 	.word	0x00100d14

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	4b2a      	ldr	r3, [pc, #168]	@ (8000844 <MX_GPIO_Init+0xc0>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	4a29      	ldr	r2, [pc, #164]	@ (8000844 <MX_GPIO_Init+0xc0>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a6:	4b27      	ldr	r3, [pc, #156]	@ (8000844 <MX_GPIO_Init+0xc0>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	4b24      	ldr	r3, [pc, #144]	@ (8000844 <MX_GPIO_Init+0xc0>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	4a23      	ldr	r2, [pc, #140]	@ (8000844 <MX_GPIO_Init+0xc0>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007be:	4b21      	ldr	r3, [pc, #132]	@ (8000844 <MX_GPIO_Init+0xc0>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000844 <MX_GPIO_Init+0xc0>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	4a1d      	ldr	r2, [pc, #116]	@ (8000844 <MX_GPIO_Init+0xc0>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000844 <MX_GPIO_Init+0xc0>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OK_LED_GPIO_Port, OK_LED_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ec:	f001 fe5c 	bl	80024a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007f0:	2304      	movs	r3, #4
 80007f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	4619      	mov	r1, r3
 8000804:	4810      	ldr	r0, [pc, #64]	@ (8000848 <MX_GPIO_Init+0xc4>)
 8000806:	f001 fcbd 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pin : OK_LED_Pin */
  GPIO_InitStruct.Pin = OK_LED_Pin;
 800080a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800080e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OK_LED_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000826:	f001 fcad 	bl	8002184 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2105      	movs	r1, #5
 800082e:	2008      	movs	r0, #8
 8000830:	f001 fc7e 	bl	8002130 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000834:	2008      	movs	r0, #8
 8000836:	f001 fc97 	bl	8002168 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800083a:	bf00      	nop
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000
 8000848:	48000800 	.word	0x48000800

0800084c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000854:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000858:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085c:	f001 fe3c 	bl	80024d8 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000860:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000864:	f004 fa94 	bl	8004d90 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000868:	bf00      	nop
 800086a:	e7f3      	b.n	8000854 <StartDefaultTask+0x8>

0800086c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	//Code for reading ADC values


	//code sending data over CAN

    osDelay(1);
 8000874:	2001      	movs	r0, #1
 8000876:	f004 fa8b 	bl	8004d90 <osDelay>
 800087a:	e7fb      	b.n	8000874 <StartTask02+0x8>

0800087c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000884:	2001      	movs	r0, #1
 8000886:	f004 fa83 	bl	8004d90 <osDelay>
 800088a:	e7fb      	b.n	8000884 <StartTask03+0x8>

0800088c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a04      	ldr	r2, [pc, #16]	@ (80008ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d101      	bne.n	80008a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800089e:	f000 fa9d 	bl	8000ddc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40000400 	.word	0x40000400

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <Error_Handler+0x8>

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <HAL_MspInit+0x4c>)
 80008c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c6:	4a10      	ldr	r2, [pc, #64]	@ (8000908 <HAL_MspInit+0x4c>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <HAL_MspInit+0x4c>)
 80008d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <HAL_MspInit+0x4c>)
 80008dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008de:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <HAL_MspInit+0x4c>)
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008e6:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <HAL_MspInit+0x4c>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	210f      	movs	r1, #15
 80008f6:	f06f 0001 	mvn.w	r0, #1
 80008fa:	f001 fc19 	bl	8002130 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000

0800090c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b0ac      	sub	sp, #176	@ 0xb0
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	228c      	movs	r2, #140	@ 0x8c
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f006 ff03 	bl	8007738 <memset>
  if(hadc->Instance==ADC1)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a27      	ldr	r2, [pc, #156]	@ (80009d4 <HAL_ADC_MspInit+0xc8>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d146      	bne.n	80009ca <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800093c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000940:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000942:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000946:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800094a:	2301      	movs	r3, #1
 800094c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800094e:	2301      	movs	r3, #1
 8000950:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000952:	2310      	movs	r3, #16
 8000954:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000956:	2302      	movs	r3, #2
 8000958:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800095a:	2302      	movs	r3, #2
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800095e:	2302      	movs	r3, #2
 8000960:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000962:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000966:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	4618      	mov	r0, r3
 800096e:	f003 f95f 	bl	8003c30 <HAL_RCCEx_PeriphCLKConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000978:	f7ff ff9a 	bl	80008b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800097c:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <HAL_ADC_MspInit+0xcc>)
 800097e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000980:	4a15      	ldr	r2, [pc, #84]	@ (80009d8 <HAL_ADC_MspInit+0xcc>)
 8000982:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000986:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000988:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <HAL_ADC_MspInit+0xcc>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000994:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <HAL_ADC_MspInit+0xcc>)
 8000996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000998:	4a0f      	ldr	r2, [pc, #60]	@ (80009d8 <HAL_ADC_MspInit+0xcc>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a0:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <HAL_ADC_MspInit+0xcc>)
 80009a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ac:	2301      	movs	r3, #1
 80009ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b2:	2303      	movs	r3, #3
 80009b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009be:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	@ (80009dc <HAL_ADC_MspInit+0xd0>)
 80009c6:	f001 fbdd 	bl	8002184 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80009ca:	bf00      	nop
 80009cc:	37b0      	adds	r7, #176	@ 0xb0
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	50040000 	.word	0x50040000
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000800 	.word	0x48000800

080009e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	@ 0x30
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a45      	ldr	r2, [pc, #276]	@ (8000b14 <HAL_CAN_MspInit+0x134>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d132      	bne.n	8000a68 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a02:	4b45      	ldr	r3, [pc, #276]	@ (8000b18 <HAL_CAN_MspInit+0x138>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	3301      	adds	r3, #1
 8000a08:	4a43      	ldr	r2, [pc, #268]	@ (8000b18 <HAL_CAN_MspInit+0x138>)
 8000a0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a0c:	4b42      	ldr	r3, [pc, #264]	@ (8000b18 <HAL_CAN_MspInit+0x138>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d10b      	bne.n	8000a2c <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a14:	4b41      	ldr	r3, [pc, #260]	@ (8000b1c <HAL_CAN_MspInit+0x13c>)
 8000a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a18:	4a40      	ldr	r2, [pc, #256]	@ (8000b1c <HAL_CAN_MspInit+0x13c>)
 8000a1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a20:	4b3e      	ldr	r3, [pc, #248]	@ (8000b1c <HAL_CAN_MspInit+0x13c>)
 8000a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a28:	61bb      	str	r3, [r7, #24]
 8000a2a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2c:	4b3b      	ldr	r3, [pc, #236]	@ (8000b1c <HAL_CAN_MspInit+0x13c>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a30:	4a3a      	ldr	r2, [pc, #232]	@ (8000b1c <HAL_CAN_MspInit+0x13c>)
 8000a32:	f043 0302 	orr.w	r3, r3, #2
 8000a36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a38:	4b38      	ldr	r3, [pc, #224]	@ (8000b1c <HAL_CAN_MspInit+0x13c>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3c:	f003 0302 	and.w	r3, r3, #2
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a44:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a56:	2309      	movs	r3, #9
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	482f      	ldr	r0, [pc, #188]	@ (8000b20 <HAL_CAN_MspInit+0x140>)
 8000a62:	f001 fb8f 	bl	8002184 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000a66:	e051      	b.n	8000b0c <HAL_CAN_MspInit+0x12c>
  else if(hcan->Instance==CAN2)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	@ (8000b24 <HAL_CAN_MspInit+0x144>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d14c      	bne.n	8000b0c <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000a72:	4b2a      	ldr	r3, [pc, #168]	@ (8000b1c <HAL_CAN_MspInit+0x13c>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a76:	4a29      	ldr	r2, [pc, #164]	@ (8000b1c <HAL_CAN_MspInit+0x13c>)
 8000a78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a7e:	4b27      	ldr	r3, [pc, #156]	@ (8000b1c <HAL_CAN_MspInit+0x13c>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a82:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a8a:	4b23      	ldr	r3, [pc, #140]	@ (8000b18 <HAL_CAN_MspInit+0x138>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	4a21      	ldr	r2, [pc, #132]	@ (8000b18 <HAL_CAN_MspInit+0x138>)
 8000a92:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a94:	4b20      	ldr	r3, [pc, #128]	@ (8000b18 <HAL_CAN_MspInit+0x138>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d10b      	bne.n	8000ab4 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b1c <HAL_CAN_MspInit+0x13c>)
 8000a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8000b1c <HAL_CAN_MspInit+0x13c>)
 8000aa2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <HAL_CAN_MspInit+0x13c>)
 8000aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	4b19      	ldr	r3, [pc, #100]	@ (8000b1c <HAL_CAN_MspInit+0x13c>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab8:	4a18      	ldr	r2, [pc, #96]	@ (8000b1c <HAL_CAN_MspInit+0x13c>)
 8000aba:	f043 0302 	orr.w	r3, r3, #2
 8000abe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac0:	4b16      	ldr	r3, [pc, #88]	@ (8000b1c <HAL_CAN_MspInit+0x13c>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000acc:	2320      	movs	r3, #32
 8000ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8000adc:	2303      	movs	r3, #3
 8000ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480e      	ldr	r0, [pc, #56]	@ (8000b20 <HAL_CAN_MspInit+0x140>)
 8000ae8:	f001 fb4c 	bl	8002184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000aec:	2340      	movs	r3, #64	@ 0x40
 8000aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8000afc:	2308      	movs	r3, #8
 8000afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	4806      	ldr	r0, [pc, #24]	@ (8000b20 <HAL_CAN_MspInit+0x140>)
 8000b08:	f001 fb3c 	bl	8002184 <HAL_GPIO_Init>
}
 8000b0c:	bf00      	nop
 8000b0e:	3730      	adds	r7, #48	@ 0x30
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40006400 	.word	0x40006400
 8000b18:	200001a4 	.word	0x200001a4
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48000400 	.word	0x48000400
 8000b24:	40006800 	.word	0x40006800

08000b28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b0ac      	sub	sp, #176	@ 0xb0
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	228c      	movs	r2, #140	@ 0x8c
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f006 fdf5 	bl	8007738 <memset>
  if(hi2c->Instance==I2C4)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a22      	ldr	r2, [pc, #136]	@ (8000bdc <HAL_I2C_MspInit+0xb4>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d13c      	bne.n	8000bd2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000b58:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000b5c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	4618      	mov	r0, r3
 8000b68:	f003 f862 	bl	8003c30 <HAL_RCCEx_PeriphCLKConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b72:	f7ff fe9d 	bl	80008b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	4b1a      	ldr	r3, [pc, #104]	@ (8000be0 <HAL_I2C_MspInit+0xb8>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	4a19      	ldr	r2, [pc, #100]	@ (8000be0 <HAL_I2C_MspInit+0xb8>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b82:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <HAL_I2C_MspInit+0xb8>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b8e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b96:	2312      	movs	r3, #18
 8000b98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480b      	ldr	r0, [pc, #44]	@ (8000be4 <HAL_I2C_MspInit+0xbc>)
 8000bb6:	f001 fae5 	bl	8002184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000bba:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <HAL_I2C_MspInit+0xb8>)
 8000bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bbe:	4a08      	ldr	r2, [pc, #32]	@ (8000be0 <HAL_I2C_MspInit+0xb8>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_I2C_MspInit+0xb8>)
 8000bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8000bd2:	bf00      	nop
 8000bd4:	37b0      	adds	r7, #176	@ 0xb0
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40008400 	.word	0x40008400
 8000be0:	40021000 	.word	0x40021000
 8000be4:	48000400 	.word	0x48000400

08000be8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08e      	sub	sp, #56	@ 0x38
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000bf6:	4b34      	ldr	r3, [pc, #208]	@ (8000cc8 <HAL_InitTick+0xe0>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfa:	4a33      	ldr	r2, [pc, #204]	@ (8000cc8 <HAL_InitTick+0xe0>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c02:	4b31      	ldr	r3, [pc, #196]	@ (8000cc8 <HAL_InitTick+0xe0>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c0e:	f107 0210 	add.w	r2, r7, #16
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 ff77 	bl	8003b0c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c1e:	6a3b      	ldr	r3, [r7, #32]
 8000c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d103      	bne.n	8000c30 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c28:	f002 ff5a 	bl	8003ae0 <HAL_RCC_GetPCLK1Freq>
 8000c2c:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c2e:	e004      	b.n	8000c3a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c30:	f002 ff56 	bl	8003ae0 <HAL_RCC_GetPCLK1Freq>
 8000c34:	4603      	mov	r3, r0
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c3c:	4a23      	ldr	r2, [pc, #140]	@ (8000ccc <HAL_InitTick+0xe4>)
 8000c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c42:	0c9b      	lsrs	r3, r3, #18
 8000c44:	3b01      	subs	r3, #1
 8000c46:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000c48:	4b21      	ldr	r3, [pc, #132]	@ (8000cd0 <HAL_InitTick+0xe8>)
 8000c4a:	4a22      	ldr	r2, [pc, #136]	@ (8000cd4 <HAL_InitTick+0xec>)
 8000c4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000c4e:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <HAL_InitTick+0xe8>)
 8000c50:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c54:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000c56:	4a1e      	ldr	r2, [pc, #120]	@ (8000cd0 <HAL_InitTick+0xe8>)
 8000c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c5a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <HAL_InitTick+0xe8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c62:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <HAL_InitTick+0xe8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c68:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <HAL_InitTick+0xe8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000c6e:	4818      	ldr	r0, [pc, #96]	@ (8000cd0 <HAL_InitTick+0xe8>)
 8000c70:	f003 fca8 	bl	80045c4 <HAL_TIM_Base_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c7a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d11b      	bne.n	8000cba <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000c82:	4813      	ldr	r0, [pc, #76]	@ (8000cd0 <HAL_InitTick+0xe8>)
 8000c84:	f003 fd00 	bl	8004688 <HAL_TIM_Base_Start_IT>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c8e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d111      	bne.n	8000cba <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c96:	201d      	movs	r0, #29
 8000c98:	f001 fa66 	bl	8002168 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b0f      	cmp	r3, #15
 8000ca0:	d808      	bhi.n	8000cb4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	201d      	movs	r0, #29
 8000ca8:	f001 fa42 	bl	8002130 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cac:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <HAL_InitTick+0xf0>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	e002      	b.n	8000cba <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3738      	adds	r7, #56	@ 0x38
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	431bde83 	.word	0x431bde83
 8000cd0:	200001a8 	.word	0x200001a8
 8000cd4:	40000400 	.word	0x40000400
 8000cd8:	20000004 	.word	0x20000004

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000d16:	2004      	movs	r0, #4
 8000d18:	f001 fbf8 	bl	800250c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <TIM3_IRQHandler+0x10>)
 8000d26:	f003 fd1f 	bl	8004768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200001a8 	.word	0x200001a8

08000d34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <SystemInit+0x20>)
 8000d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d3e:	4a05      	ldr	r2, [pc, #20]	@ (8000d54 <SystemInit+0x20>)
 8000d40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d5c:	f7ff ffea 	bl	8000d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d60:	480c      	ldr	r0, [pc, #48]	@ (8000d94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d62:	490d      	ldr	r1, [pc, #52]	@ (8000d98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d64:	4a0d      	ldr	r2, [pc, #52]	@ (8000d9c <LoopForever+0xe>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d78:	4c0a      	ldr	r4, [pc, #40]	@ (8000da4 <LoopForever+0x16>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d86:	f006 fd35 	bl	80077f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d8a:	f7ff fb3f 	bl	800040c <main>

08000d8e <LoopForever>:

LoopForever:
    b LoopForever
 8000d8e:	e7fe      	b.n	8000d8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d90:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d9c:	08007a20 	.word	0x08007a20
  ldr r2, =_sbss
 8000da0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000da4:	20001cd8 	.word	0x20001cd8

08000da8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC1_2_IRQHandler>

08000daa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000db0:	2300      	movs	r3, #0
 8000db2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f001 f9b0 	bl	800211a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dba:	200f      	movs	r0, #15
 8000dbc:	f7ff ff14 	bl	8000be8 <HAL_InitTick>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d002      	beq.n	8000dcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	71fb      	strb	r3, [r7, #7]
 8000dca:	e001      	b.n	8000dd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dcc:	f7ff fd76 	bl	80008bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	@ (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	200001f4 	.word	0x200001f4

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	@ (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	200001f4 	.word	0x200001f4

08000e1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	431a      	orrs	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	609a      	str	r2, [r3, #8]
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	431a      	orrs	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	3360      	adds	r3, #96	@ 0x60
 8000e96:	461a      	mov	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <LL_ADC_SetOffset+0x44>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ebc:	bf00      	nop
 8000ebe:	371c      	adds	r7, #28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	03fff000 	.word	0x03fff000

08000ecc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3360      	adds	r3, #96	@ 0x60
 8000eda:	461a      	mov	r2, r3
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	4413      	add	r3, r2
 8000ee2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	3360      	adds	r3, #96	@ 0x60
 8000f08:	461a      	mov	r2, r3
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f22:	bf00      	nop
 8000f24:	371c      	adds	r7, #28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	431a      	orrs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	615a      	str	r2, [r3, #20]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3330      	adds	r3, #48	@ 0x30
 8000f64:	461a      	mov	r2, r3
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	f003 030c 	and.w	r3, r3, #12
 8000f70:	4413      	add	r3, r2
 8000f72:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	f003 031f 	and.w	r3, r3, #31
 8000f7e:	211f      	movs	r1, #31
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	401a      	ands	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	0e9b      	lsrs	r3, r3, #26
 8000f8c:	f003 011f 	and.w	r1, r3, #31
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	f003 031f 	and.w	r3, r3, #31
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fa0:	bf00      	nop
 8000fa2:	371c      	adds	r7, #28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3314      	adds	r3, #20
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	0e5b      	lsrs	r3, r3, #25
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	4413      	add	r3, r2
 8000fca:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	0d1b      	lsrs	r3, r3, #20
 8000fd4:	f003 031f 	and.w	r3, r3, #31
 8000fd8:	2107      	movs	r1, #7
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	401a      	ands	r2, r3
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	0d1b      	lsrs	r3, r3, #20
 8000fe6:	f003 031f 	and.w	r3, r3, #31
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ff6:	bf00      	nop
 8000ff8:	371c      	adds	r7, #28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800101c:	43db      	mvns	r3, r3
 800101e:	401a      	ands	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0318 	and.w	r3, r3, #24
 8001026:	4908      	ldr	r1, [pc, #32]	@ (8001048 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001028:	40d9      	lsrs	r1, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	400b      	ands	r3, r1
 800102e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001032:	431a      	orrs	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800103a:	bf00      	nop
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	0007ffff 	.word	0x0007ffff

0800104c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800105c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6093      	str	r3, [r2, #8]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001080:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001084:	d101      	bne.n	800108a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80010a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010ac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80010d4:	d101      	bne.n	80010da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d101      	bne.n	8001100 <LL_ADC_IsEnabled+0x18>
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <LL_ADC_IsEnabled+0x1a>
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	2b04      	cmp	r3, #4
 8001120:	d101      	bne.n	8001126 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	2b08      	cmp	r3, #8
 8001146:	d101      	bne.n	800114c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b089      	sub	sp, #36	@ 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e133      	b.n	80013de <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001180:	2b00      	cmp	r3, #0
 8001182:	d109      	bne.n	8001198 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fbc1 	bl	800090c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff67 	bl	8001070 <LL_ADC_IsDeepPowerDownEnabled>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff4d 	bl	800104c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff82 	bl	80010c0 <LL_ADC_IsInternalRegulatorEnabled>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d115      	bne.n	80011ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff66 	bl	8001098 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011cc:	4b86      	ldr	r3, [pc, #536]	@ (80013e8 <HAL_ADC_Init+0x28c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	099b      	lsrs	r3, r3, #6
 80011d2:	4a86      	ldr	r2, [pc, #536]	@ (80013ec <HAL_ADC_Init+0x290>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	099b      	lsrs	r3, r3, #6
 80011da:	3301      	adds	r3, #1
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011e0:	e002      	b.n	80011e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f9      	bne.n	80011e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff64 	bl	80010c0 <LL_ADC_IsInternalRegulatorEnabled>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10d      	bne.n	800121a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001202:	f043 0210 	orr.w	r2, r3, #16
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800120e:	f043 0201 	orr.w	r2, r3, #1
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff75 	bl	800110e <LL_ADC_REG_IsConversionOngoing>
 8001224:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122a:	f003 0310 	and.w	r3, r3, #16
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 80cc 	bne.w	80013cc <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	2b00      	cmp	r3, #0
 8001238:	f040 80c8 	bne.w	80013cc <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001240:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001244:	f043 0202 	orr.w	r2, r3, #2
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff49 	bl	80010e8 <LL_ADC_IsEnabled>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d115      	bne.n	8001288 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800125c:	4864      	ldr	r0, [pc, #400]	@ (80013f0 <HAL_ADC_Init+0x294>)
 800125e:	f7ff ff43 	bl	80010e8 <LL_ADC_IsEnabled>
 8001262:	4604      	mov	r4, r0
 8001264:	4863      	ldr	r0, [pc, #396]	@ (80013f4 <HAL_ADC_Init+0x298>)
 8001266:	f7ff ff3f 	bl	80010e8 <LL_ADC_IsEnabled>
 800126a:	4603      	mov	r3, r0
 800126c:	431c      	orrs	r4, r3
 800126e:	4862      	ldr	r0, [pc, #392]	@ (80013f8 <HAL_ADC_Init+0x29c>)
 8001270:	f7ff ff3a 	bl	80010e8 <LL_ADC_IsEnabled>
 8001274:	4603      	mov	r3, r0
 8001276:	4323      	orrs	r3, r4
 8001278:	2b00      	cmp	r3, #0
 800127a:	d105      	bne.n	8001288 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	4619      	mov	r1, r3
 8001282:	485e      	ldr	r0, [pc, #376]	@ (80013fc <HAL_ADC_Init+0x2a0>)
 8001284:	f7ff fdca 	bl	8000e1c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7e5b      	ldrb	r3, [r3, #25]
 800128c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001292:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001298:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800129e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d106      	bne.n	80012c4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ba:	3b01      	subs	r3, #1
 80012bc:	045b      	lsls	r3, r3, #17
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d009      	beq.n	80012e0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	4b46      	ldr	r3, [pc, #280]	@ (8001400 <HAL_ADC_Init+0x2a4>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	69b9      	ldr	r1, [r7, #24]
 80012f0:	430b      	orrs	r3, r1
 80012f2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff1b 	bl	8001134 <LL_ADC_INJ_IsConversionOngoing>
 80012fe:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d140      	bne.n	8001388 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d13d      	bne.n	8001388 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7e1b      	ldrb	r3, [r3, #24]
 8001314:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001316:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800131e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800132e:	f023 0306 	bic.w	r3, r3, #6
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	69b9      	ldr	r1, [r7, #24]
 8001338:	430b      	orrs	r3, r1
 800133a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001342:	2b01      	cmp	r3, #1
 8001344:	d118      	bne.n	8001378 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001350:	f023 0304 	bic.w	r3, r3, #4
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800135c:	4311      	orrs	r1, r2
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001362:	4311      	orrs	r1, r2
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001368:	430a      	orrs	r2, r1
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f042 0201 	orr.w	r2, r2, #1
 8001374:	611a      	str	r2, [r3, #16]
 8001376:	e007      	b.n	8001388 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	691a      	ldr	r2, [r3, #16]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0201 	bic.w	r2, r2, #1
 8001386:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d10c      	bne.n	80013aa <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f023 010f 	bic.w	r1, r3, #15
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	1e5a      	subs	r2, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80013a8:	e007      	b.n	80013ba <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 020f 	bic.w	r2, r2, #15
 80013b8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013be:	f023 0303 	bic.w	r3, r3, #3
 80013c2:	f043 0201 	orr.w	r2, r3, #1
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80013ca:	e007      	b.n	80013dc <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d0:	f043 0210 	orr.w	r2, r3, #16
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	@ 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000000 	.word	0x20000000
 80013ec:	053e2d63 	.word	0x053e2d63
 80013f0:	50040000 	.word	0x50040000
 80013f4:	50040100 	.word	0x50040100
 80013f8:	50040200 	.word	0x50040200
 80013fc:	50040300 	.word	0x50040300
 8001400:	fff0c007 	.word	0xfff0c007

08001404 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b0b6      	sub	sp, #216	@ 0xd8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800141e:	2b01      	cmp	r3, #1
 8001420:	d101      	bne.n	8001426 <HAL_ADC_ConfigChannel+0x22>
 8001422:	2302      	movs	r3, #2
 8001424:	e3e3      	b.n	8001bee <HAL_ADC_ConfigChannel+0x7ea>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fe6b 	bl	800110e <LL_ADC_REG_IsConversionOngoing>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	f040 83c4 	bne.w	8001bc8 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b05      	cmp	r3, #5
 800144e:	d824      	bhi.n	800149a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	3b02      	subs	r3, #2
 8001456:	2b03      	cmp	r3, #3
 8001458:	d81b      	bhi.n	8001492 <HAL_ADC_ConfigChannel+0x8e>
 800145a:	a201      	add	r2, pc, #4	@ (adr r2, 8001460 <HAL_ADC_ConfigChannel+0x5c>)
 800145c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001460:	08001471 	.word	0x08001471
 8001464:	08001479 	.word	0x08001479
 8001468:	08001481 	.word	0x08001481
 800146c:	08001489 	.word	0x08001489
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001470:	230c      	movs	r3, #12
 8001472:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001476:	e010      	b.n	800149a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001478:	2312      	movs	r3, #18
 800147a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800147e:	e00c      	b.n	800149a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001480:	2318      	movs	r3, #24
 8001482:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001486:	e008      	b.n	800149a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001488:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800148c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001490:	e003      	b.n	800149a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001492:	2306      	movs	r3, #6
 8001494:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001498:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80014a8:	f7ff fd54 	bl	8000f54 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fe2c 	bl	800110e <LL_ADC_REG_IsConversionOngoing>
 80014b6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fe38 	bl	8001134 <LL_ADC_INJ_IsConversionOngoing>
 80014c4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f040 81bf 	bne.w	8001850 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f040 81ba 	bne.w	8001850 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80014e4:	d10f      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6818      	ldr	r0, [r3, #0]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2200      	movs	r2, #0
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff fd5b 	bl	8000fac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fd15 	bl	8000f2e <LL_ADC_SetSamplingTimeCommonConfig>
 8001504:	e00e      	b.n	8001524 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6818      	ldr	r0, [r3, #0]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	6819      	ldr	r1, [r3, #0]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	461a      	mov	r2, r3
 8001514:	f7ff fd4a 	bl	8000fac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fd05 	bl	8000f2e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	695a      	ldr	r2, [r3, #20]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	08db      	lsrs	r3, r3, #3
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	2b04      	cmp	r3, #4
 8001544:	d00a      	beq.n	800155c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	6919      	ldr	r1, [r3, #16]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001556:	f7ff fc95 	bl	8000e84 <LL_ADC_SetOffset>
 800155a:	e179      	b.n	8001850 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fcb2 	bl	8000ecc <LL_ADC_GetOffsetChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10a      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x184>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fca7 	bl	8000ecc <LL_ADC_GetOffsetChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	0e9b      	lsrs	r3, r3, #26
 8001582:	f003 021f 	and.w	r2, r3, #31
 8001586:	e01e      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x1c2>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fc9c 	bl	8000ecc <LL_ADC_GetOffsetChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800159e:	fa93 f3a3 	rbit	r3, r3
 80015a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80015aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80015b6:	2320      	movs	r3, #32
 80015b8:	e004      	b.n	80015c4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80015ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80015be:	fab3 f383 	clz	r3, r3
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d105      	bne.n	80015de <HAL_ADC_ConfigChannel+0x1da>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	0e9b      	lsrs	r3, r3, #26
 80015d8:	f003 031f 	and.w	r3, r3, #31
 80015dc:	e018      	b.n	8001610 <HAL_ADC_ConfigChannel+0x20c>
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015ea:	fa93 f3a3 	rbit	r3, r3
 80015ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80015f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80015fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001602:	2320      	movs	r3, #32
 8001604:	e004      	b.n	8001610 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001606:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800160a:	fab3 f383 	clz	r3, r3
 800160e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001610:	429a      	cmp	r2, r3
 8001612:	d106      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fc6b 	bl	8000ef8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2101      	movs	r1, #1
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fc4f 	bl	8000ecc <LL_ADC_GetOffsetChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10a      	bne.n	800164e <HAL_ADC_ConfigChannel+0x24a>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2101      	movs	r1, #1
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fc44 	bl	8000ecc <LL_ADC_GetOffsetChannel>
 8001644:	4603      	mov	r3, r0
 8001646:	0e9b      	lsrs	r3, r3, #26
 8001648:	f003 021f 	and.w	r2, r3, #31
 800164c:	e01e      	b.n	800168c <HAL_ADC_ConfigChannel+0x288>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2101      	movs	r1, #1
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fc39 	bl	8000ecc <LL_ADC_GetOffsetChannel>
 800165a:	4603      	mov	r3, r0
 800165c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001660:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001664:	fa93 f3a3 	rbit	r3, r3
 8001668:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800166c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001670:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001674:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800167c:	2320      	movs	r3, #32
 800167e:	e004      	b.n	800168a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001680:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001684:	fab3 f383 	clz	r3, r3
 8001688:	b2db      	uxtb	r3, r3
 800168a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001694:	2b00      	cmp	r3, #0
 8001696:	d105      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x2a0>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	0e9b      	lsrs	r3, r3, #26
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	e018      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x2d2>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80016b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80016c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80016c8:	2320      	movs	r3, #32
 80016ca:	e004      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80016cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80016d0:	fab3 f383 	clz	r3, r3
 80016d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d106      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2200      	movs	r2, #0
 80016e0:	2101      	movs	r1, #1
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fc08 	bl	8000ef8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2102      	movs	r1, #2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fbec 	bl	8000ecc <LL_ADC_GetOffsetChannel>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10a      	bne.n	8001714 <HAL_ADC_ConfigChannel+0x310>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2102      	movs	r1, #2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fbe1 	bl	8000ecc <LL_ADC_GetOffsetChannel>
 800170a:	4603      	mov	r3, r0
 800170c:	0e9b      	lsrs	r3, r3, #26
 800170e:	f003 021f 	and.w	r2, r3, #31
 8001712:	e01e      	b.n	8001752 <HAL_ADC_ConfigChannel+0x34e>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2102      	movs	r1, #2
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fbd6 	bl	8000ecc <LL_ADC_GetOffsetChannel>
 8001720:	4603      	mov	r3, r0
 8001722:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001726:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800172a:	fa93 f3a3 	rbit	r3, r3
 800172e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001732:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001736:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800173a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001742:	2320      	movs	r3, #32
 8001744:	e004      	b.n	8001750 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001746:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800174a:	fab3 f383 	clz	r3, r3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800175a:	2b00      	cmp	r3, #0
 800175c:	d105      	bne.n	800176a <HAL_ADC_ConfigChannel+0x366>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	0e9b      	lsrs	r3, r3, #26
 8001764:	f003 031f 	and.w	r3, r3, #31
 8001768:	e014      	b.n	8001794 <HAL_ADC_ConfigChannel+0x390>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001770:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001772:	fa93 f3a3 	rbit	r3, r3
 8001776:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001778:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800177a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800177e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001786:	2320      	movs	r3, #32
 8001788:	e004      	b.n	8001794 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800178a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800178e:	fab3 f383 	clz	r3, r3
 8001792:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001794:	429a      	cmp	r2, r3
 8001796:	d106      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2200      	movs	r2, #0
 800179e:	2102      	movs	r1, #2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fba9 	bl	8000ef8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2103      	movs	r1, #3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fb8d 	bl	8000ecc <LL_ADC_GetOffsetChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d10a      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x3ce>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2103      	movs	r1, #3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fb82 	bl	8000ecc <LL_ADC_GetOffsetChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	0e9b      	lsrs	r3, r3, #26
 80017cc:	f003 021f 	and.w	r2, r3, #31
 80017d0:	e017      	b.n	8001802 <HAL_ADC_ConfigChannel+0x3fe>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2103      	movs	r1, #3
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fb77 	bl	8000ecc <LL_ADC_GetOffsetChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017e4:	fa93 f3a3 	rbit	r3, r3
 80017e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80017ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80017ec:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80017ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80017f4:	2320      	movs	r3, #32
 80017f6:	e003      	b.n	8001800 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80017f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017fa:	fab3 f383 	clz	r3, r3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800180a:	2b00      	cmp	r3, #0
 800180c:	d105      	bne.n	800181a <HAL_ADC_ConfigChannel+0x416>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	0e9b      	lsrs	r3, r3, #26
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	e011      	b.n	800183e <HAL_ADC_ConfigChannel+0x43a>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001820:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001822:	fa93 f3a3 	rbit	r3, r3
 8001826:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001828:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800182a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800182c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001832:	2320      	movs	r3, #32
 8001834:	e003      	b.n	800183e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001836:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001838:	fab3 f383 	clz	r3, r3
 800183c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800183e:	429a      	cmp	r2, r3
 8001840:	d106      	bne.n	8001850 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2200      	movs	r2, #0
 8001848:	2103      	movs	r1, #3
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fb54 	bl	8000ef8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fc47 	bl	80010e8 <LL_ADC_IsEnabled>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	f040 813f 	bne.w	8001ae0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	6819      	ldr	r1, [r3, #0]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	461a      	mov	r2, r3
 8001870:	f7ff fbc8 	bl	8001004 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	4a8e      	ldr	r2, [pc, #568]	@ (8001ab4 <HAL_ADC_ConfigChannel+0x6b0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	f040 8130 	bne.w	8001ae0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10b      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x4a4>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	0e9b      	lsrs	r3, r3, #26
 8001896:	3301      	adds	r3, #1
 8001898:	f003 031f 	and.w	r3, r3, #31
 800189c:	2b09      	cmp	r3, #9
 800189e:	bf94      	ite	ls
 80018a0:	2301      	movls	r3, #1
 80018a2:	2300      	movhi	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	e019      	b.n	80018dc <HAL_ADC_ConfigChannel+0x4d8>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018b0:	fa93 f3a3 	rbit	r3, r3
 80018b4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80018b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80018ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80018c0:	2320      	movs	r3, #32
 80018c2:	e003      	b.n	80018cc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80018c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018c6:	fab3 f383 	clz	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	3301      	adds	r3, #1
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	2b09      	cmp	r3, #9
 80018d4:	bf94      	ite	ls
 80018d6:	2301      	movls	r3, #1
 80018d8:	2300      	movhi	r3, #0
 80018da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d079      	beq.n	80019d4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d107      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x4f8>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	0e9b      	lsrs	r3, r3, #26
 80018f2:	3301      	adds	r3, #1
 80018f4:	069b      	lsls	r3, r3, #26
 80018f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018fa:	e015      	b.n	8001928 <HAL_ADC_ConfigChannel+0x524>
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001904:	fa93 f3a3 	rbit	r3, r3
 8001908:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800190a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800190c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800190e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001914:	2320      	movs	r3, #32
 8001916:	e003      	b.n	8001920 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001918:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	3301      	adds	r3, #1
 8001922:	069b      	lsls	r3, r3, #26
 8001924:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001930:	2b00      	cmp	r3, #0
 8001932:	d109      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x544>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0e9b      	lsrs	r3, r3, #26
 800193a:	3301      	adds	r3, #1
 800193c:	f003 031f 	and.w	r3, r3, #31
 8001940:	2101      	movs	r1, #1
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	e017      	b.n	8001978 <HAL_ADC_ConfigChannel+0x574>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001950:	fa93 f3a3 	rbit	r3, r3
 8001954:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001958:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800195a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001960:	2320      	movs	r3, #32
 8001962:	e003      	b.n	800196c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001966:	fab3 f383 	clz	r3, r3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	3301      	adds	r3, #1
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	2101      	movs	r1, #1
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	ea42 0103 	orr.w	r1, r2, r3
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10a      	bne.n	800199e <HAL_ADC_ConfigChannel+0x59a>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	0e9b      	lsrs	r3, r3, #26
 800198e:	3301      	adds	r3, #1
 8001990:	f003 021f 	and.w	r2, r3, #31
 8001994:	4613      	mov	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	051b      	lsls	r3, r3, #20
 800199c:	e018      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x5cc>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80019ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80019b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80019b6:	2320      	movs	r3, #32
 80019b8:	e003      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80019ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	3301      	adds	r3, #1
 80019c4:	f003 021f 	and.w	r2, r3, #31
 80019c8:	4613      	mov	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4413      	add	r3, r2
 80019ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019d0:	430b      	orrs	r3, r1
 80019d2:	e080      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d107      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x5ec>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	0e9b      	lsrs	r3, r3, #26
 80019e6:	3301      	adds	r3, #1
 80019e8:	069b      	lsls	r3, r3, #26
 80019ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019ee:	e015      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x618>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001a08:	2320      	movs	r3, #32
 8001a0a:	e003      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a0e:	fab3 f383 	clz	r3, r3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	069b      	lsls	r3, r3, #26
 8001a18:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d109      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x638>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	0e9b      	lsrs	r3, r3, #26
 8001a2e:	3301      	adds	r3, #1
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	2101      	movs	r1, #1
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	e017      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x668>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa93 f3a3 	rbit	r3, r3
 8001a48:	61bb      	str	r3, [r7, #24]
  return result;
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001a54:	2320      	movs	r3, #32
 8001a56:	e003      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	fab3 f383 	clz	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	3301      	adds	r3, #1
 8001a62:	f003 031f 	and.w	r3, r3, #31
 8001a66:	2101      	movs	r1, #1
 8001a68:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6c:	ea42 0103 	orr.w	r1, r2, r3
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10d      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x694>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	0e9b      	lsrs	r3, r3, #26
 8001a82:	3301      	adds	r3, #1
 8001a84:	f003 021f 	and.w	r2, r3, #31
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3b1e      	subs	r3, #30
 8001a90:	051b      	lsls	r3, r3, #20
 8001a92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a96:	e01d      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x6d0>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	60fb      	str	r3, [r7, #12]
  return result;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d103      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001ab0:	2320      	movs	r3, #32
 8001ab2:	e005      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x6bc>
 8001ab4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fab3 f383 	clz	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	f003 021f 	and.w	r2, r3, #31
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	3b1e      	subs	r3, #30
 8001ace:	051b      	lsls	r3, r3, #20
 8001ad0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ad4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff fa66 	bl	8000fac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b44      	ldr	r3, [pc, #272]	@ (8001bf8 <HAL_ADC_ConfigChannel+0x7f4>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d07a      	beq.n	8001be2 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001aec:	4843      	ldr	r0, [pc, #268]	@ (8001bfc <HAL_ADC_ConfigChannel+0x7f8>)
 8001aee:	f7ff f9bb 	bl	8000e68 <LL_ADC_GetCommonPathInternalCh>
 8001af2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a41      	ldr	r2, [pc, #260]	@ (8001c00 <HAL_ADC_ConfigChannel+0x7fc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d12c      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d126      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a3c      	ldr	r2, [pc, #240]	@ (8001c04 <HAL_ADC_ConfigChannel+0x800>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d004      	beq.n	8001b20 <HAL_ADC_ConfigChannel+0x71c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a3b      	ldr	r2, [pc, #236]	@ (8001c08 <HAL_ADC_ConfigChannel+0x804>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d15d      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4834      	ldr	r0, [pc, #208]	@ (8001bfc <HAL_ADC_ConfigChannel+0x7f8>)
 8001b2c:	f7ff f989 	bl	8000e42 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b30:	4b36      	ldr	r3, [pc, #216]	@ (8001c0c <HAL_ADC_ConfigChannel+0x808>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	099b      	lsrs	r3, r3, #6
 8001b36:	4a36      	ldr	r2, [pc, #216]	@ (8001c10 <HAL_ADC_ConfigChannel+0x80c>)
 8001b38:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3c:	099b      	lsrs	r3, r3, #6
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001b4a:	e002      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f9      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b58:	e040      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c14 <HAL_ADC_ConfigChannel+0x810>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d118      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d112      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a23      	ldr	r2, [pc, #140]	@ (8001c04 <HAL_ADC_ConfigChannel+0x800>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d004      	beq.n	8001b84 <HAL_ADC_ConfigChannel+0x780>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a22      	ldr	r2, [pc, #136]	@ (8001c08 <HAL_ADC_ConfigChannel+0x804>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d12d      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	481b      	ldr	r0, [pc, #108]	@ (8001bfc <HAL_ADC_ConfigChannel+0x7f8>)
 8001b90:	f7ff f957 	bl	8000e42 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b94:	e024      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8001c18 <HAL_ADC_ConfigChannel+0x814>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d120      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ba0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ba4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d11a      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a14      	ldr	r2, [pc, #80]	@ (8001c04 <HAL_ADC_ConfigChannel+0x800>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d115      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480e      	ldr	r0, [pc, #56]	@ (8001bfc <HAL_ADC_ConfigChannel+0x7f8>)
 8001bc2:	f7ff f93e 	bl	8000e42 <LL_ADC_SetCommonPathInternalCh>
 8001bc6:	e00c      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bcc:	f043 0220 	orr.w	r2, r3, #32
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001bda:	e002      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bdc:	bf00      	nop
 8001bde:	e000      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001be0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001bea:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	37d8      	adds	r7, #216	@ 0xd8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	80080000 	.word	0x80080000
 8001bfc:	50040300 	.word	0x50040300
 8001c00:	c7520000 	.word	0xc7520000
 8001c04:	50040000 	.word	0x50040000
 8001c08:	50040200 	.word	0x50040200
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	053e2d63 	.word	0x053e2d63
 8001c14:	cb840000 	.word	0xcb840000
 8001c18:	80000001 	.word	0x80000001

08001c1c <LL_ADC_IsEnabled>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <LL_ADC_IsEnabled+0x18>
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <LL_ADC_IsEnabled+0x1a>
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_ADC_REG_IsConversionOngoing>:
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d101      	bne.n	8001c5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b0a1      	sub	sp, #132	@ 0x84
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e093      	b.n	8001dae <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001c8e:	2300      	movs	r3, #0
 8001c90:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001c92:	2300      	movs	r3, #0
 8001c94:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a47      	ldr	r2, [pc, #284]	@ (8001db8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d102      	bne.n	8001ca6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001ca0:	4b46      	ldr	r3, [pc, #280]	@ (8001dbc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	e001      	b.n	8001caa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10b      	bne.n	8001cc8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb4:	f043 0220 	orr.w	r2, r3, #32
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e072      	b.n	8001dae <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ffb9 	bl	8001c42 <LL_ADC_REG_IsConversionOngoing>
 8001cd0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ffb3 	bl	8001c42 <LL_ADC_REG_IsConversionOngoing>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d154      	bne.n	8001d8c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001ce2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d151      	bne.n	8001d8c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001ce8:	4b35      	ldr	r3, [pc, #212]	@ (8001dc0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001cea:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d02c      	beq.n	8001d4e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001cf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	6859      	ldr	r1, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d06:	035b      	lsls	r3, r3, #13
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d0e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d10:	4829      	ldr	r0, [pc, #164]	@ (8001db8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d12:	f7ff ff83 	bl	8001c1c <LL_ADC_IsEnabled>
 8001d16:	4604      	mov	r4, r0
 8001d18:	4828      	ldr	r0, [pc, #160]	@ (8001dbc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001d1a:	f7ff ff7f 	bl	8001c1c <LL_ADC_IsEnabled>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	431c      	orrs	r4, r3
 8001d22:	4828      	ldr	r0, [pc, #160]	@ (8001dc4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001d24:	f7ff ff7a 	bl	8001c1c <LL_ADC_IsEnabled>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4323      	orrs	r3, r4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d137      	bne.n	8001da0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001d30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001d38:	f023 030f 	bic.w	r3, r3, #15
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	6811      	ldr	r1, [r2, #0]
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	6892      	ldr	r2, [r2, #8]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	431a      	orrs	r2, r3
 8001d48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d4a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001d4c:	e028      	b.n	8001da0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d58:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d5a:	4817      	ldr	r0, [pc, #92]	@ (8001db8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d5c:	f7ff ff5e 	bl	8001c1c <LL_ADC_IsEnabled>
 8001d60:	4604      	mov	r4, r0
 8001d62:	4816      	ldr	r0, [pc, #88]	@ (8001dbc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001d64:	f7ff ff5a 	bl	8001c1c <LL_ADC_IsEnabled>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	431c      	orrs	r4, r3
 8001d6c:	4815      	ldr	r0, [pc, #84]	@ (8001dc4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001d6e:	f7ff ff55 	bl	8001c1c <LL_ADC_IsEnabled>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4323      	orrs	r3, r4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d112      	bne.n	8001da0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001d7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001d82:	f023 030f 	bic.w	r3, r3, #15
 8001d86:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001d88:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001d8a:	e009      	b.n	8001da0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d90:	f043 0220 	orr.w	r2, r3, #32
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001d9e:	e000      	b.n	8001da2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001da0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001daa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3784      	adds	r7, #132	@ 0x84
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd90      	pop	{r4, r7, pc}
 8001db6:	bf00      	nop
 8001db8:	50040000 	.word	0x50040000
 8001dbc:	50040100 	.word	0x50040100
 8001dc0:	50040300 	.word	0x50040300
 8001dc4:	50040200 	.word	0x50040200

08001dc8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e0ed      	b.n	8001fb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d102      	bne.n	8001dec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7fe fdfa 	bl	80009e0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dfc:	f7ff f802 	bl	8000e04 <HAL_GetTick>
 8001e00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e02:	e012      	b.n	8001e2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e04:	f7fe fffe 	bl	8000e04 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b0a      	cmp	r3, #10
 8001e10:	d90b      	bls.n	8001e2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2205      	movs	r2, #5
 8001e22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e0c5      	b.n	8001fb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0e5      	beq.n	8001e04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0202 	bic.w	r2, r2, #2
 8001e46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e48:	f7fe ffdc 	bl	8000e04 <HAL_GetTick>
 8001e4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e4e:	e012      	b.n	8001e76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e50:	f7fe ffd8 	bl	8000e04 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b0a      	cmp	r3, #10
 8001e5c:	d90b      	bls.n	8001e76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2205      	movs	r2, #5
 8001e6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e09f      	b.n	8001fb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1e5      	bne.n	8001e50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7e1b      	ldrb	r3, [r3, #24]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d108      	bne.n	8001e9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	e007      	b.n	8001eae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7e5b      	ldrb	r3, [r3, #25]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d108      	bne.n	8001ec8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e007      	b.n	8001ed8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ed6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	7e9b      	ldrb	r3, [r3, #26]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d108      	bne.n	8001ef2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0220 	orr.w	r2, r2, #32
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	e007      	b.n	8001f02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0220 	bic.w	r2, r2, #32
 8001f00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	7edb      	ldrb	r3, [r3, #27]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d108      	bne.n	8001f1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0210 	bic.w	r2, r2, #16
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	e007      	b.n	8001f2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0210 	orr.w	r2, r2, #16
 8001f2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7f1b      	ldrb	r3, [r3, #28]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d108      	bne.n	8001f46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0208 	orr.w	r2, r2, #8
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e007      	b.n	8001f56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0208 	bic.w	r2, r2, #8
 8001f54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	7f5b      	ldrb	r3, [r3, #29]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d108      	bne.n	8001f70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0204 	orr.w	r2, r2, #4
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	e007      	b.n	8001f80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0204 	bic.w	r2, r2, #4
 8001f7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	ea42 0103 	orr.w	r1, r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	1e5a      	subs	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff2:	4a04      	ldr	r2, [pc, #16]	@ (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	60d3      	str	r3, [r2, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800200c:	4b04      	ldr	r3, [pc, #16]	@ (8002020 <__NVIC_GetPriorityGrouping+0x18>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	f003 0307 	and.w	r3, r3, #7
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	2b00      	cmp	r3, #0
 8002034:	db0b      	blt.n	800204e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	f003 021f 	and.w	r2, r3, #31
 800203c:	4907      	ldr	r1, [pc, #28]	@ (800205c <__NVIC_EnableIRQ+0x38>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	2001      	movs	r0, #1
 8002046:	fa00 f202 	lsl.w	r2, r0, r2
 800204a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000e100 	.word	0xe000e100

08002060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	db0a      	blt.n	800208a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	490c      	ldr	r1, [pc, #48]	@ (80020ac <__NVIC_SetPriority+0x4c>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	440b      	add	r3, r1
 8002084:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002088:	e00a      	b.n	80020a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4908      	ldr	r1, [pc, #32]	@ (80020b0 <__NVIC_SetPriority+0x50>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	3b04      	subs	r3, #4
 8002098:	0112      	lsls	r2, r2, #4
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	440b      	add	r3, r1
 800209e:	761a      	strb	r2, [r3, #24]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	@ 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f1c3 0307 	rsb	r3, r3, #7
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	bf28      	it	cs
 80020d2:	2304      	movcs	r3, #4
 80020d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3304      	adds	r3, #4
 80020da:	2b06      	cmp	r3, #6
 80020dc:	d902      	bls.n	80020e4 <NVIC_EncodePriority+0x30>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3b03      	subs	r3, #3
 80020e2:	e000      	b.n	80020e6 <NVIC_EncodePriority+0x32>
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43da      	mvns	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	401a      	ands	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	43d9      	mvns	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	4313      	orrs	r3, r2
         );
}
 800210e:	4618      	mov	r0, r3
 8002110:	3724      	adds	r7, #36	@ 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ff4c 	bl	8001fc0 <__NVIC_SetPriorityGrouping>
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002142:	f7ff ff61 	bl	8002008 <__NVIC_GetPriorityGrouping>
 8002146:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	6978      	ldr	r0, [r7, #20]
 800214e:	f7ff ffb1 	bl	80020b4 <NVIC_EncodePriority>
 8002152:	4602      	mov	r2, r0
 8002154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ff80 	bl	8002060 <__NVIC_SetPriority>
}
 8002160:	bf00      	nop
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ff54 	bl	8002024 <__NVIC_EnableIRQ>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002184:	b480      	push	{r7}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002192:	e166      	b.n	8002462 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	2101      	movs	r1, #1
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	4013      	ands	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8158 	beq.w	800245c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d005      	beq.n	80021c4 <HAL_GPIO_Init+0x40>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d130      	bne.n	8002226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	2203      	movs	r2, #3
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021fa:	2201      	movs	r2, #1
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	091b      	lsrs	r3, r3, #4
 8002210:	f003 0201 	and.w	r2, r3, #1
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b03      	cmp	r3, #3
 8002230:	d017      	beq.n	8002262 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d123      	bne.n	80022b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	08da      	lsrs	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3208      	adds	r2, #8
 8002276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	220f      	movs	r2, #15
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	08da      	lsrs	r2, r3, #3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3208      	adds	r2, #8
 80022b0:	6939      	ldr	r1, [r7, #16]
 80022b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	2203      	movs	r2, #3
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0203 	and.w	r2, r3, #3
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 80b2 	beq.w	800245c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f8:	4b61      	ldr	r3, [pc, #388]	@ (8002480 <HAL_GPIO_Init+0x2fc>)
 80022fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fc:	4a60      	ldr	r2, [pc, #384]	@ (8002480 <HAL_GPIO_Init+0x2fc>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6613      	str	r3, [r2, #96]	@ 0x60
 8002304:	4b5e      	ldr	r3, [pc, #376]	@ (8002480 <HAL_GPIO_Init+0x2fc>)
 8002306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002310:	4a5c      	ldr	r2, [pc, #368]	@ (8002484 <HAL_GPIO_Init+0x300>)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	089b      	lsrs	r3, r3, #2
 8002316:	3302      	adds	r3, #2
 8002318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	220f      	movs	r2, #15
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800233a:	d02b      	beq.n	8002394 <HAL_GPIO_Init+0x210>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a52      	ldr	r2, [pc, #328]	@ (8002488 <HAL_GPIO_Init+0x304>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d025      	beq.n	8002390 <HAL_GPIO_Init+0x20c>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a51      	ldr	r2, [pc, #324]	@ (800248c <HAL_GPIO_Init+0x308>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d01f      	beq.n	800238c <HAL_GPIO_Init+0x208>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a50      	ldr	r2, [pc, #320]	@ (8002490 <HAL_GPIO_Init+0x30c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d019      	beq.n	8002388 <HAL_GPIO_Init+0x204>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a4f      	ldr	r2, [pc, #316]	@ (8002494 <HAL_GPIO_Init+0x310>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d013      	beq.n	8002384 <HAL_GPIO_Init+0x200>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a4e      	ldr	r2, [pc, #312]	@ (8002498 <HAL_GPIO_Init+0x314>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d00d      	beq.n	8002380 <HAL_GPIO_Init+0x1fc>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a4d      	ldr	r2, [pc, #308]	@ (800249c <HAL_GPIO_Init+0x318>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d007      	beq.n	800237c <HAL_GPIO_Init+0x1f8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a4c      	ldr	r2, [pc, #304]	@ (80024a0 <HAL_GPIO_Init+0x31c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d101      	bne.n	8002378 <HAL_GPIO_Init+0x1f4>
 8002374:	2307      	movs	r3, #7
 8002376:	e00e      	b.n	8002396 <HAL_GPIO_Init+0x212>
 8002378:	2308      	movs	r3, #8
 800237a:	e00c      	b.n	8002396 <HAL_GPIO_Init+0x212>
 800237c:	2306      	movs	r3, #6
 800237e:	e00a      	b.n	8002396 <HAL_GPIO_Init+0x212>
 8002380:	2305      	movs	r3, #5
 8002382:	e008      	b.n	8002396 <HAL_GPIO_Init+0x212>
 8002384:	2304      	movs	r3, #4
 8002386:	e006      	b.n	8002396 <HAL_GPIO_Init+0x212>
 8002388:	2303      	movs	r3, #3
 800238a:	e004      	b.n	8002396 <HAL_GPIO_Init+0x212>
 800238c:	2302      	movs	r3, #2
 800238e:	e002      	b.n	8002396 <HAL_GPIO_Init+0x212>
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <HAL_GPIO_Init+0x212>
 8002394:	2300      	movs	r3, #0
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	f002 0203 	and.w	r2, r2, #3
 800239c:	0092      	lsls	r2, r2, #2
 800239e:	4093      	lsls	r3, r2
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023a6:	4937      	ldr	r1, [pc, #220]	@ (8002484 <HAL_GPIO_Init+0x300>)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	3302      	adds	r3, #2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023b4:	4b3b      	ldr	r3, [pc, #236]	@ (80024a4 <HAL_GPIO_Init+0x320>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	43db      	mvns	r3, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023d8:	4a32      	ldr	r2, [pc, #200]	@ (80024a4 <HAL_GPIO_Init+0x320>)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023de:	4b31      	ldr	r3, [pc, #196]	@ (80024a4 <HAL_GPIO_Init+0x320>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002402:	4a28      	ldr	r2, [pc, #160]	@ (80024a4 <HAL_GPIO_Init+0x320>)
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002408:	4b26      	ldr	r3, [pc, #152]	@ (80024a4 <HAL_GPIO_Init+0x320>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	43db      	mvns	r3, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800242c:	4a1d      	ldr	r2, [pc, #116]	@ (80024a4 <HAL_GPIO_Init+0x320>)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002432:	4b1c      	ldr	r3, [pc, #112]	@ (80024a4 <HAL_GPIO_Init+0x320>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	43db      	mvns	r3, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002456:	4a13      	ldr	r2, [pc, #76]	@ (80024a4 <HAL_GPIO_Init+0x320>)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3301      	adds	r3, #1
 8002460:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	f47f ae91 	bne.w	8002194 <HAL_GPIO_Init+0x10>
  }
}
 8002472:	bf00      	nop
 8002474:	bf00      	nop
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	40021000 	.word	0x40021000
 8002484:	40010000 	.word	0x40010000
 8002488:	48000400 	.word	0x48000400
 800248c:	48000800 	.word	0x48000800
 8002490:	48000c00 	.word	0x48000c00
 8002494:	48001000 	.word	0x48001000
 8002498:	48001400 	.word	0x48001400
 800249c:	48001800 	.word	0x48001800
 80024a0:	48001c00 	.word	0x48001c00
 80024a4:	40010400 	.word	0x40010400

080024a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	807b      	strh	r3, [r7, #2]
 80024b4:	4613      	mov	r3, r2
 80024b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b8:	787b      	ldrb	r3, [r7, #1]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024be:	887a      	ldrh	r2, [r7, #2]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024c4:	e002      	b.n	80024cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024c6:	887a      	ldrh	r2, [r7, #2]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024ea:	887a      	ldrh	r2, [r7, #2]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4013      	ands	r3, r2
 80024f0:	041a      	lsls	r2, r3, #16
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	43d9      	mvns	r1, r3
 80024f6:	887b      	ldrh	r3, [r7, #2]
 80024f8:	400b      	ands	r3, r1
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	619a      	str	r2, [r3, #24]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002516:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002522:	4a05      	ldr	r2, [pc, #20]	@ (8002538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fd ff50 	bl	80003d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40010400 	.word	0x40010400

0800253c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e08d      	b.n	800266a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7fe fae0 	bl	8000b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2224      	movs	r2, #36	@ 0x24
 800256c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0201 	bic.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800258c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800259c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d107      	bne.n	80025b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	e006      	b.n	80025c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80025c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d108      	bne.n	80025de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	e007      	b.n	80025ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002600:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002610:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69d9      	ldr	r1, [r3, #28]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1a      	ldr	r2, [r3, #32]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2220      	movs	r2, #32
 8002656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	4608      	mov	r0, r1
 800267e:	4611      	mov	r1, r2
 8002680:	461a      	mov	r2, r3
 8002682:	4603      	mov	r3, r0
 8002684:	817b      	strh	r3, [r7, #10]
 8002686:	460b      	mov	r3, r1
 8002688:	813b      	strh	r3, [r7, #8]
 800268a:	4613      	mov	r3, r2
 800268c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b20      	cmp	r3, #32
 8002698:	f040 80fd 	bne.w	8002896 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_I2C_Mem_Read+0x34>
 80026a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0f1      	b.n	8002898 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_I2C_Mem_Read+0x4e>
 80026be:	2302      	movs	r3, #2
 80026c0:	e0ea      	b.n	8002898 <HAL_I2C_Mem_Read+0x224>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026ca:	f7fe fb9b 	bl	8000e04 <HAL_GetTick>
 80026ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2319      	movs	r3, #25
 80026d6:	2201      	movs	r2, #1
 80026d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f95b 	bl	8002998 <I2C_WaitOnFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0d5      	b.n	8002898 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2222      	movs	r2, #34	@ 0x22
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2240      	movs	r2, #64	@ 0x40
 80026f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a3a      	ldr	r2, [r7, #32]
 8002706:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800270c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002714:	88f8      	ldrh	r0, [r7, #6]
 8002716:	893a      	ldrh	r2, [r7, #8]
 8002718:	8979      	ldrh	r1, [r7, #10]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	4603      	mov	r3, r0
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f8bf 	bl	80028a8 <I2C_RequestMemoryRead>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0ad      	b.n	8002898 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	2bff      	cmp	r3, #255	@ 0xff
 8002744:	d90e      	bls.n	8002764 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2201      	movs	r2, #1
 800274a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002750:	b2da      	uxtb	r2, r3
 8002752:	8979      	ldrh	r1, [r7, #10]
 8002754:	4b52      	ldr	r3, [pc, #328]	@ (80028a0 <HAL_I2C_Mem_Read+0x22c>)
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 fadf 	bl	8002d20 <I2C_TransferConfig>
 8002762:	e00f      	b.n	8002784 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002772:	b2da      	uxtb	r2, r3
 8002774:	8979      	ldrh	r1, [r7, #10]
 8002776:	4b4a      	ldr	r3, [pc, #296]	@ (80028a0 <HAL_I2C_Mem_Read+0x22c>)
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 face 	bl	8002d20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278a:	2200      	movs	r2, #0
 800278c:	2104      	movs	r1, #4
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f902 	bl	8002998 <I2C_WaitOnFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e07c      	b.n	8002898 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d034      	beq.n	8002844 <HAL_I2C_Mem_Read+0x1d0>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d130      	bne.n	8002844 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e8:	2200      	movs	r2, #0
 80027ea:	2180      	movs	r1, #128	@ 0x80
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 f8d3 	bl	8002998 <I2C_WaitOnFlagUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e04d      	b.n	8002898 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	2bff      	cmp	r3, #255	@ 0xff
 8002804:	d90e      	bls.n	8002824 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002810:	b2da      	uxtb	r2, r3
 8002812:	8979      	ldrh	r1, [r7, #10]
 8002814:	2300      	movs	r3, #0
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 fa7f 	bl	8002d20 <I2C_TransferConfig>
 8002822:	e00f      	b.n	8002844 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002832:	b2da      	uxtb	r2, r3
 8002834:	8979      	ldrh	r1, [r7, #10]
 8002836:	2300      	movs	r3, #0
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fa6e 	bl	8002d20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d19a      	bne.n	8002784 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f940 	bl	8002ad8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e01a      	b.n	8002898 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2220      	movs	r2, #32
 8002868:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <HAL_I2C_Mem_Read+0x230>)
 8002876:	400b      	ands	r3, r1
 8002878:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	e000      	b.n	8002898 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002896:	2302      	movs	r3, #2
  }
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	80002400 	.word	0x80002400
 80028a4:	fe00e800 	.word	0xfe00e800

080028a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	4608      	mov	r0, r1
 80028b2:	4611      	mov	r1, r2
 80028b4:	461a      	mov	r2, r3
 80028b6:	4603      	mov	r3, r0
 80028b8:	817b      	strh	r3, [r7, #10]
 80028ba:	460b      	mov	r3, r1
 80028bc:	813b      	strh	r3, [r7, #8]
 80028be:	4613      	mov	r3, r2
 80028c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	8979      	ldrh	r1, [r7, #10]
 80028c8:	4b20      	ldr	r3, [pc, #128]	@ (800294c <I2C_RequestMemoryRead+0xa4>)
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	2300      	movs	r3, #0
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fa26 	bl	8002d20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	69b9      	ldr	r1, [r7, #24]
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f8b6 	bl	8002a4a <I2C_WaitOnTXISFlagUntilTimeout>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e02c      	b.n	8002942 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d105      	bne.n	80028fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028ee:	893b      	ldrh	r3, [r7, #8]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80028f8:	e015      	b.n	8002926 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028fa:	893b      	ldrh	r3, [r7, #8]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	b29b      	uxth	r3, r3
 8002900:	b2da      	uxtb	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	69b9      	ldr	r1, [r7, #24]
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f89c 	bl	8002a4a <I2C_WaitOnTXISFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e012      	b.n	8002942 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800291c:	893b      	ldrh	r3, [r7, #8]
 800291e:	b2da      	uxtb	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	2200      	movs	r2, #0
 800292e:	2140      	movs	r1, #64	@ 0x40
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f831 	bl	8002998 <I2C_WaitOnFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	80002000 	.word	0x80002000

08002950 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b02      	cmp	r3, #2
 8002964:	d103      	bne.n	800296e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2200      	movs	r2, #0
 800296c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d007      	beq.n	800298c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	619a      	str	r2, [r3, #24]
  }
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a8:	e03b      	b.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	6839      	ldr	r1, [r7, #0]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f8d6 	bl	8002b60 <I2C_IsErrorOccurred>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e041      	b.n	8002a42 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029c4:	d02d      	beq.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c6:	f7fe fa1d 	bl	8000e04 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d302      	bcc.n	80029dc <I2C_WaitOnFlagUntilTimeout+0x44>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d122      	bne.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4013      	ands	r3, r2
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d113      	bne.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fe:	f043 0220 	orr.w	r2, r3, #32
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e00f      	b.n	8002a42 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699a      	ldr	r2, [r3, #24]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	bf0c      	ite	eq
 8002a32:	2301      	moveq	r3, #1
 8002a34:	2300      	movne	r3, #0
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d0b4      	beq.n	80029aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a56:	e033      	b.n	8002ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f87f 	bl	8002b60 <I2C_IsErrorOccurred>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e031      	b.n	8002ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a72:	d025      	beq.n	8002ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a74:	f7fe f9c6 	bl	8000e04 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d302      	bcc.n	8002a8a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d11a      	bne.n	8002ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d013      	beq.n	8002ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9c:	f043 0220 	orr.w	r2, r3, #32
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e007      	b.n	8002ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d1c4      	bne.n	8002a58 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ae4:	e02f      	b.n	8002b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f838 	bl	8002b60 <I2C_IsErrorOccurred>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e02d      	b.n	8002b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afa:	f7fe f983 	bl	8000e04 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d302      	bcc.n	8002b10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d11a      	bne.n	8002b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f003 0320 	and.w	r3, r3, #32
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	d013      	beq.n	8002b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b22:	f043 0220 	orr.w	r2, r3, #32
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e007      	b.n	8002b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d1c8      	bne.n	8002ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	@ 0x28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d068      	beq.n	8002c5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2210      	movs	r2, #16
 8002b92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b94:	e049      	b.n	8002c2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b9c:	d045      	beq.n	8002c2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b9e:	f7fe f931 	bl	8000e04 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d302      	bcc.n	8002bb4 <I2C_IsErrorOccurred+0x54>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d13a      	bne.n	8002c2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bc6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bd6:	d121      	bne.n	8002c1c <I2C_IsErrorOccurred+0xbc>
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bde:	d01d      	beq.n	8002c1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	d01a      	beq.n	8002c1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bf4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002bf6:	f7fe f905 	bl	8000e04 <HAL_GetTick>
 8002bfa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bfc:	e00e      	b.n	8002c1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002bfe:	f7fe f901 	bl	8000e04 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b19      	cmp	r3, #25
 8002c0a:	d907      	bls.n	8002c1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	f043 0320 	orr.w	r3, r3, #32
 8002c12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002c1a:	e006      	b.n	8002c2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	d1e9      	bne.n	8002bfe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d003      	beq.n	8002c40 <I2C_IsErrorOccurred+0xe0>
 8002c38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0aa      	beq.n	8002b96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d103      	bne.n	8002c50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	f043 0304 	orr.w	r3, r3, #4
 8002c56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00b      	beq.n	8002c88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00b      	beq.n	8002caa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	f043 0308 	orr.w	r3, r3, #8
 8002c98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ca2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00b      	beq.n	8002ccc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	f043 0302 	orr.w	r3, r3, #2
 8002cba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01c      	beq.n	8002d0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff fe3b 	bl	8002950 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6859      	ldr	r1, [r3, #4]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8002d1c <I2C_IsErrorOccurred+0x1bc>)
 8002ce6:	400b      	ands	r3, r1
 8002ce8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3728      	adds	r7, #40	@ 0x28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	fe00e800 	.word	0xfe00e800

08002d20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	817b      	strh	r3, [r7, #10]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d32:	897b      	ldrh	r3, [r7, #10]
 8002d34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d38:	7a7b      	ldrb	r3, [r7, #9]
 8002d3a:	041b      	lsls	r3, r3, #16
 8002d3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	0d5b      	lsrs	r3, r3, #21
 8002d5a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002d5e:	4b08      	ldr	r3, [pc, #32]	@ (8002d80 <I2C_TransferConfig+0x60>)
 8002d60:	430b      	orrs	r3, r1
 8002d62:	43db      	mvns	r3, r3
 8002d64:	ea02 0103 	and.w	r1, r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d72:	bf00      	nop
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	03ff63ff 	.word	0x03ff63ff

08002d84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	d138      	bne.n	8002e0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e032      	b.n	8002e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2224      	movs	r2, #36	@ 0x24
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6819      	ldr	r1, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e000      	b.n	8002e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e0c:	2302      	movs	r3, #2
  }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b085      	sub	sp, #20
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d139      	bne.n	8002ea4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e033      	b.n	8002ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2224      	movs	r2, #36	@ 0x24
 8002e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0201 	bic.w	r2, r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e000      	b.n	8002ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ea4:	2302      	movs	r3, #2
  }
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002eb8:	4b04      	ldr	r3, [pc, #16]	@ (8002ecc <HAL_PWREx_GetVoltageRange+0x18>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40007000 	.word	0x40007000

08002ed0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ede:	d130      	bne.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ee0:	4b23      	ldr	r3, [pc, #140]	@ (8002f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eec:	d038      	beq.n	8002f60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eee:	4b20      	ldr	r3, [pc, #128]	@ (8002f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8002f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002efc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002efe:	4b1d      	ldr	r3, [pc, #116]	@ (8002f74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2232      	movs	r2, #50	@ 0x32
 8002f04:	fb02 f303 	mul.w	r3, r2, r3
 8002f08:	4a1b      	ldr	r2, [pc, #108]	@ (8002f78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0c9b      	lsrs	r3, r3, #18
 8002f10:	3301      	adds	r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f14:	e002      	b.n	8002f1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f1c:	4b14      	ldr	r3, [pc, #80]	@ (8002f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f28:	d102      	bne.n	8002f30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f2      	bne.n	8002f16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f30:	4b0f      	ldr	r3, [pc, #60]	@ (8002f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f3c:	d110      	bne.n	8002f60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e00f      	b.n	8002f62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f42:	4b0b      	ldr	r3, [pc, #44]	@ (8002f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f4e:	d007      	beq.n	8002f60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f50:	4b07      	ldr	r3, [pc, #28]	@ (8002f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f58:	4a05      	ldr	r2, [pc, #20]	@ (8002f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40007000 	.word	0x40007000
 8002f74:	20000000 	.word	0x20000000
 8002f78:	431bde83 	.word	0x431bde83

08002f7c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f000 bc08 	b.w	80037a0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f90:	4b96      	ldr	r3, [pc, #600]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f9a:	4b94      	ldr	r3, [pc, #592]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80e4 	beq.w	800317a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d007      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x4c>
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2b0c      	cmp	r3, #12
 8002fbc:	f040 808b 	bne.w	80030d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	f040 8087 	bne.w	80030d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fc8:	4b88      	ldr	r3, [pc, #544]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x64>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e3df      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1a      	ldr	r2, [r3, #32]
 8002fe4:	4b81      	ldr	r3, [pc, #516]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d004      	beq.n	8002ffa <HAL_RCC_OscConfig+0x7e>
 8002ff0:	4b7e      	ldr	r3, [pc, #504]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ff8:	e005      	b.n	8003006 <HAL_RCC_OscConfig+0x8a>
 8002ffa:	4b7c      	ldr	r3, [pc, #496]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 8002ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003006:	4293      	cmp	r3, r2
 8003008:	d223      	bcs.n	8003052 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fdae 	bl	8003b70 <RCC_SetFlashLatencyFromMSIRange>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e3c0      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800301e:	4b73      	ldr	r3, [pc, #460]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a72      	ldr	r2, [pc, #456]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 8003024:	f043 0308 	orr.w	r3, r3, #8
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	4b70      	ldr	r3, [pc, #448]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	496d      	ldr	r1, [pc, #436]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 8003038:	4313      	orrs	r3, r2
 800303a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800303c:	4b6b      	ldr	r3, [pc, #428]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	4968      	ldr	r1, [pc, #416]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 800304c:	4313      	orrs	r3, r2
 800304e:	604b      	str	r3, [r1, #4]
 8003050:	e025      	b.n	800309e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003052:	4b66      	ldr	r3, [pc, #408]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a65      	ldr	r2, [pc, #404]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 8003058:	f043 0308 	orr.w	r3, r3, #8
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	4b63      	ldr	r3, [pc, #396]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	4960      	ldr	r1, [pc, #384]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 800306c:	4313      	orrs	r3, r2
 800306e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003070:	4b5e      	ldr	r3, [pc, #376]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	021b      	lsls	r3, r3, #8
 800307e:	495b      	ldr	r1, [pc, #364]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 8003080:	4313      	orrs	r3, r2
 8003082:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fd6e 	bl	8003b70 <RCC_SetFlashLatencyFromMSIRange>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e380      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800309e:	f000 fc87 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 80030a2:	4602      	mov	r2, r0
 80030a4:	4b51      	ldr	r3, [pc, #324]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	4950      	ldr	r1, [pc, #320]	@ (80031f0 <HAL_RCC_OscConfig+0x274>)
 80030b0:	5ccb      	ldrb	r3, [r1, r3]
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ba:	4a4e      	ldr	r2, [pc, #312]	@ (80031f4 <HAL_RCC_OscConfig+0x278>)
 80030bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030be:	4b4e      	ldr	r3, [pc, #312]	@ (80031f8 <HAL_RCC_OscConfig+0x27c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd fd90 	bl	8000be8 <HAL_InitTick>
 80030c8:	4603      	mov	r3, r0
 80030ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d052      	beq.n	8003178 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	e364      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d032      	beq.n	8003144 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030de:	4b43      	ldr	r3, [pc, #268]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a42      	ldr	r2, [pc, #264]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030ea:	f7fd fe8b 	bl	8000e04 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030f2:	f7fd fe87 	bl	8000e04 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e34d      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003104:	4b39      	ldr	r3, [pc, #228]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f0      	beq.n	80030f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003110:	4b36      	ldr	r3, [pc, #216]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a35      	ldr	r2, [pc, #212]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 8003116:	f043 0308 	orr.w	r3, r3, #8
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	4b33      	ldr	r3, [pc, #204]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	4930      	ldr	r1, [pc, #192]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800312e:	4b2f      	ldr	r3, [pc, #188]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	492b      	ldr	r1, [pc, #172]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 800313e:	4313      	orrs	r3, r2
 8003140:	604b      	str	r3, [r1, #4]
 8003142:	e01a      	b.n	800317a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003144:	4b29      	ldr	r3, [pc, #164]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a28      	ldr	r2, [pc, #160]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 800314a:	f023 0301 	bic.w	r3, r3, #1
 800314e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003150:	f7fd fe58 	bl	8000e04 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003158:	f7fd fe54 	bl	8000e04 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e31a      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800316a:	4b20      	ldr	r3, [pc, #128]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x1dc>
 8003176:	e000      	b.n	800317a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003178:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d073      	beq.n	800326e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b08      	cmp	r3, #8
 800318a:	d005      	beq.n	8003198 <HAL_RCC_OscConfig+0x21c>
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2b0c      	cmp	r3, #12
 8003190:	d10e      	bne.n	80031b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d10b      	bne.n	80031b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003198:	4b14      	ldr	r3, [pc, #80]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d063      	beq.n	800326c <HAL_RCC_OscConfig+0x2f0>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d15f      	bne.n	800326c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e2f7      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b8:	d106      	bne.n	80031c8 <HAL_RCC_OscConfig+0x24c>
 80031ba:	4b0c      	ldr	r3, [pc, #48]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a0b      	ldr	r2, [pc, #44]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 80031c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e025      	b.n	8003214 <HAL_RCC_OscConfig+0x298>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031d0:	d114      	bne.n	80031fc <HAL_RCC_OscConfig+0x280>
 80031d2:	4b06      	ldr	r3, [pc, #24]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a05      	ldr	r2, [pc, #20]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 80031d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b03      	ldr	r3, [pc, #12]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a02      	ldr	r2, [pc, #8]	@ (80031ec <HAL_RCC_OscConfig+0x270>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e013      	b.n	8003214 <HAL_RCC_OscConfig+0x298>
 80031ec:	40021000 	.word	0x40021000
 80031f0:	080079d0 	.word	0x080079d0
 80031f4:	20000000 	.word	0x20000000
 80031f8:	20000004 	.word	0x20000004
 80031fc:	4ba0      	ldr	r3, [pc, #640]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a9f      	ldr	r2, [pc, #636]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 8003202:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	4b9d      	ldr	r3, [pc, #628]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a9c      	ldr	r2, [pc, #624]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 800320e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d013      	beq.n	8003244 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fd fdf2 	bl	8000e04 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003224:	f7fd fdee 	bl	8000e04 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	@ 0x64
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e2b4      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003236:	4b92      	ldr	r3, [pc, #584]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x2a8>
 8003242:	e014      	b.n	800326e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003244:	f7fd fdde 	bl	8000e04 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800324c:	f7fd fdda 	bl	8000e04 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	@ 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e2a0      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800325e:	4b88      	ldr	r3, [pc, #544]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x2d0>
 800326a:	e000      	b.n	800326e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d060      	beq.n	800333c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	2b04      	cmp	r3, #4
 800327e:	d005      	beq.n	800328c <HAL_RCC_OscConfig+0x310>
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	2b0c      	cmp	r3, #12
 8003284:	d119      	bne.n	80032ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b02      	cmp	r3, #2
 800328a:	d116      	bne.n	80032ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800328c:	4b7c      	ldr	r3, [pc, #496]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_OscConfig+0x328>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e27d      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a4:	4b76      	ldr	r3, [pc, #472]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	061b      	lsls	r3, r3, #24
 80032b2:	4973      	ldr	r1, [pc, #460]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032b8:	e040      	b.n	800333c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d023      	beq.n	800330a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c2:	4b6f      	ldr	r3, [pc, #444]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 80032c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ce:	f7fd fd99 	bl	8000e04 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d6:	f7fd fd95 	bl	8000e04 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e25b      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e8:	4b65      	ldr	r3, [pc, #404]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f4:	4b62      	ldr	r3, [pc, #392]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	061b      	lsls	r3, r3, #24
 8003302:	495f      	ldr	r1, [pc, #380]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]
 8003308:	e018      	b.n	800333c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800330a:	4b5d      	ldr	r3, [pc, #372]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a5c      	ldr	r2, [pc, #368]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 8003310:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003316:	f7fd fd75 	bl	8000e04 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331e:	f7fd fd71 	bl	8000e04 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e237      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003330:	4b53      	ldr	r3, [pc, #332]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f0      	bne.n	800331e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b00      	cmp	r3, #0
 8003346:	d03c      	beq.n	80033c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01c      	beq.n	800338a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003350:	4b4b      	ldr	r3, [pc, #300]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 8003352:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003356:	4a4a      	ldr	r2, [pc, #296]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003360:	f7fd fd50 	bl	8000e04 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003368:	f7fd fd4c 	bl	8000e04 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e212      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800337a:	4b41      	ldr	r3, [pc, #260]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 800337c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ef      	beq.n	8003368 <HAL_RCC_OscConfig+0x3ec>
 8003388:	e01b      	b.n	80033c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800338a:	4b3d      	ldr	r3, [pc, #244]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 800338c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003390:	4a3b      	ldr	r2, [pc, #236]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 8003392:	f023 0301 	bic.w	r3, r3, #1
 8003396:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339a:	f7fd fd33 	bl	8000e04 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a2:	f7fd fd2f 	bl	8000e04 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e1f5      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033b4:	4b32      	ldr	r3, [pc, #200]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 80033b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1ef      	bne.n	80033a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80a6 	beq.w	800351c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d0:	2300      	movs	r3, #0
 80033d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 80033d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10d      	bne.n	80033fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e0:	4b27      	ldr	r3, [pc, #156]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 80033e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e4:	4a26      	ldr	r2, [pc, #152]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 80033e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80033ec:	4b24      	ldr	r3, [pc, #144]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f8:	2301      	movs	r3, #1
 80033fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033fc:	4b21      	ldr	r3, [pc, #132]	@ (8003484 <HAL_RCC_OscConfig+0x508>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d118      	bne.n	800343a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003408:	4b1e      	ldr	r3, [pc, #120]	@ (8003484 <HAL_RCC_OscConfig+0x508>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1d      	ldr	r2, [pc, #116]	@ (8003484 <HAL_RCC_OscConfig+0x508>)
 800340e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003412:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003414:	f7fd fcf6 	bl	8000e04 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341c:	f7fd fcf2 	bl	8000e04 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e1b8      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800342e:	4b15      	ldr	r3, [pc, #84]	@ (8003484 <HAL_RCC_OscConfig+0x508>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d108      	bne.n	8003454 <HAL_RCC_OscConfig+0x4d8>
 8003442:	4b0f      	ldr	r3, [pc, #60]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003448:	4a0d      	ldr	r2, [pc, #52]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003452:	e029      	b.n	80034a8 <HAL_RCC_OscConfig+0x52c>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b05      	cmp	r3, #5
 800345a:	d115      	bne.n	8003488 <HAL_RCC_OscConfig+0x50c>
 800345c:	4b08      	ldr	r3, [pc, #32]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003462:	4a07      	ldr	r2, [pc, #28]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 8003464:	f043 0304 	orr.w	r3, r3, #4
 8003468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800346c:	4b04      	ldr	r3, [pc, #16]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003472:	4a03      	ldr	r2, [pc, #12]	@ (8003480 <HAL_RCC_OscConfig+0x504>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800347c:	e014      	b.n	80034a8 <HAL_RCC_OscConfig+0x52c>
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	40007000 	.word	0x40007000
 8003488:	4b9d      	ldr	r3, [pc, #628]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348e:	4a9c      	ldr	r2, [pc, #624]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003498:	4b99      	ldr	r3, [pc, #612]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349e:	4a98      	ldr	r2, [pc, #608]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 80034a0:	f023 0304 	bic.w	r3, r3, #4
 80034a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d016      	beq.n	80034de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b0:	f7fd fca8 	bl	8000e04 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b8:	f7fd fca4 	bl	8000e04 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e168      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ce:	4b8c      	ldr	r3, [pc, #560]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0ed      	beq.n	80034b8 <HAL_RCC_OscConfig+0x53c>
 80034dc:	e015      	b.n	800350a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034de:	f7fd fc91 	bl	8000e04 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e6:	f7fd fc8d 	bl	8000e04 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e151      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034fc:	4b80      	ldr	r3, [pc, #512]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1ed      	bne.n	80034e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800350a:	7ffb      	ldrb	r3, [r7, #31]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d105      	bne.n	800351c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003510:	4b7b      	ldr	r3, [pc, #492]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 8003512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003514:	4a7a      	ldr	r2, [pc, #488]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 8003516:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800351a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	d03c      	beq.n	80035a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01c      	beq.n	800356a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003530:	4b73      	ldr	r3, [pc, #460]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 8003532:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003536:	4a72      	ldr	r2, [pc, #456]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7fd fc60 	bl	8000e04 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003548:	f7fd fc5c 	bl	8000e04 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e122      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800355a:	4b69      	ldr	r3, [pc, #420]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 800355c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0ef      	beq.n	8003548 <HAL_RCC_OscConfig+0x5cc>
 8003568:	e01b      	b.n	80035a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800356a:	4b65      	ldr	r3, [pc, #404]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 800356c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003570:	4a63      	ldr	r2, [pc, #396]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 8003572:	f023 0301 	bic.w	r3, r3, #1
 8003576:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357a:	f7fd fc43 	bl	8000e04 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003582:	f7fd fc3f 	bl	8000e04 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e105      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003594:	4b5a      	ldr	r3, [pc, #360]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 8003596:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1ef      	bne.n	8003582 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 80f9 	beq.w	800379e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	f040 80cf 	bne.w	8003754 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035b6:	4b52      	ldr	r3, [pc, #328]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f003 0203 	and.w	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d12c      	bne.n	8003624 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d4:	3b01      	subs	r3, #1
 80035d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d8:	429a      	cmp	r2, r3
 80035da:	d123      	bne.n	8003624 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d11b      	bne.n	8003624 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d113      	bne.n	8003624 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003606:	085b      	lsrs	r3, r3, #1
 8003608:	3b01      	subs	r3, #1
 800360a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d109      	bne.n	8003624 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	085b      	lsrs	r3, r3, #1
 800361c:	3b01      	subs	r3, #1
 800361e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d071      	beq.n	8003708 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	2b0c      	cmp	r3, #12
 8003628:	d068      	beq.n	80036fc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800362a:	4b35      	ldr	r3, [pc, #212]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d105      	bne.n	8003642 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003636:	4b32      	ldr	r3, [pc, #200]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e0ac      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003646:	4b2e      	ldr	r3, [pc, #184]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a2d      	ldr	r2, [pc, #180]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 800364c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003650:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003652:	f7fd fbd7 	bl	8000e04 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365a:	f7fd fbd3 	bl	8000e04 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e099      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800366c:	4b24      	ldr	r3, [pc, #144]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f0      	bne.n	800365a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003678:	4b21      	ldr	r3, [pc, #132]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	4b21      	ldr	r3, [pc, #132]	@ (8003704 <HAL_RCC_OscConfig+0x788>)
 800367e:	4013      	ands	r3, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003688:	3a01      	subs	r2, #1
 800368a:	0112      	lsls	r2, r2, #4
 800368c:	4311      	orrs	r1, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003692:	0212      	lsls	r2, r2, #8
 8003694:	4311      	orrs	r1, r2
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800369a:	0852      	lsrs	r2, r2, #1
 800369c:	3a01      	subs	r2, #1
 800369e:	0552      	lsls	r2, r2, #21
 80036a0:	4311      	orrs	r1, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80036a6:	0852      	lsrs	r2, r2, #1
 80036a8:	3a01      	subs	r2, #1
 80036aa:	0652      	lsls	r2, r2, #25
 80036ac:	4311      	orrs	r1, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036b2:	06d2      	lsls	r2, r2, #27
 80036b4:	430a      	orrs	r2, r1
 80036b6:	4912      	ldr	r1, [pc, #72]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036bc:	4b10      	ldr	r3, [pc, #64]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 80036c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4a0c      	ldr	r2, [pc, #48]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 80036ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036d4:	f7fd fb96 	bl	8000e04 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036dc:	f7fd fb92 	bl	8000e04 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e058      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ee:	4b04      	ldr	r3, [pc, #16]	@ (8003700 <HAL_RCC_OscConfig+0x784>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036fa:	e050      	b.n	800379e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e04f      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
 8003700:	40021000 	.word	0x40021000
 8003704:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003708:	4b27      	ldr	r3, [pc, #156]	@ (80037a8 <HAL_RCC_OscConfig+0x82c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d144      	bne.n	800379e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003714:	4b24      	ldr	r3, [pc, #144]	@ (80037a8 <HAL_RCC_OscConfig+0x82c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a23      	ldr	r2, [pc, #140]	@ (80037a8 <HAL_RCC_OscConfig+0x82c>)
 800371a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800371e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003720:	4b21      	ldr	r3, [pc, #132]	@ (80037a8 <HAL_RCC_OscConfig+0x82c>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4a20      	ldr	r2, [pc, #128]	@ (80037a8 <HAL_RCC_OscConfig+0x82c>)
 8003726:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800372a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800372c:	f7fd fb6a 	bl	8000e04 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003734:	f7fd fb66 	bl	8000e04 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e02c      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003746:	4b18      	ldr	r3, [pc, #96]	@ (80037a8 <HAL_RCC_OscConfig+0x82c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x7b8>
 8003752:	e024      	b.n	800379e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b0c      	cmp	r3, #12
 8003758:	d01f      	beq.n	800379a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375a:	4b13      	ldr	r3, [pc, #76]	@ (80037a8 <HAL_RCC_OscConfig+0x82c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a12      	ldr	r2, [pc, #72]	@ (80037a8 <HAL_RCC_OscConfig+0x82c>)
 8003760:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003766:	f7fd fb4d 	bl	8000e04 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376e:	f7fd fb49 	bl	8000e04 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e00f      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003780:	4b09      	ldr	r3, [pc, #36]	@ (80037a8 <HAL_RCC_OscConfig+0x82c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f0      	bne.n	800376e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800378c:	4b06      	ldr	r3, [pc, #24]	@ (80037a8 <HAL_RCC_OscConfig+0x82c>)
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	4905      	ldr	r1, [pc, #20]	@ (80037a8 <HAL_RCC_OscConfig+0x82c>)
 8003792:	4b06      	ldr	r3, [pc, #24]	@ (80037ac <HAL_RCC_OscConfig+0x830>)
 8003794:	4013      	ands	r3, r2
 8003796:	60cb      	str	r3, [r1, #12]
 8003798:	e001      	b.n	800379e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3720      	adds	r7, #32
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40021000 	.word	0x40021000
 80037ac:	feeefffc 	.word	0xfeeefffc

080037b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0e7      	b.n	8003994 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c4:	4b75      	ldr	r3, [pc, #468]	@ (800399c <HAL_RCC_ClockConfig+0x1ec>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d910      	bls.n	80037f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b72      	ldr	r3, [pc, #456]	@ (800399c <HAL_RCC_ClockConfig+0x1ec>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 0207 	bic.w	r2, r3, #7
 80037da:	4970      	ldr	r1, [pc, #448]	@ (800399c <HAL_RCC_ClockConfig+0x1ec>)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e2:	4b6e      	ldr	r3, [pc, #440]	@ (800399c <HAL_RCC_ClockConfig+0x1ec>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0cf      	b.n	8003994 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d010      	beq.n	8003822 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	4b66      	ldr	r3, [pc, #408]	@ (80039a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800380c:	429a      	cmp	r2, r3
 800380e:	d908      	bls.n	8003822 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003810:	4b63      	ldr	r3, [pc, #396]	@ (80039a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4960      	ldr	r1, [pc, #384]	@ (80039a0 <HAL_RCC_ClockConfig+0x1f0>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d04c      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b03      	cmp	r3, #3
 8003834:	d107      	bne.n	8003846 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003836:	4b5a      	ldr	r3, [pc, #360]	@ (80039a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d121      	bne.n	8003886 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e0a6      	b.n	8003994 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d107      	bne.n	800385e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800384e:	4b54      	ldr	r3, [pc, #336]	@ (80039a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d115      	bne.n	8003886 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e09a      	b.n	8003994 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d107      	bne.n	8003876 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003866:	4b4e      	ldr	r3, [pc, #312]	@ (80039a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d109      	bne.n	8003886 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e08e      	b.n	8003994 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003876:	4b4a      	ldr	r3, [pc, #296]	@ (80039a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e086      	b.n	8003994 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003886:	4b46      	ldr	r3, [pc, #280]	@ (80039a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f023 0203 	bic.w	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	4943      	ldr	r1, [pc, #268]	@ (80039a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003894:	4313      	orrs	r3, r2
 8003896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003898:	f7fd fab4 	bl	8000e04 <HAL_GetTick>
 800389c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389e:	e00a      	b.n	80038b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a0:	f7fd fab0 	bl	8000e04 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e06e      	b.n	8003994 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b6:	4b3a      	ldr	r3, [pc, #232]	@ (80039a0 <HAL_RCC_ClockConfig+0x1f0>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 020c 	and.w	r2, r3, #12
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d1eb      	bne.n	80038a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d010      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	4b31      	ldr	r3, [pc, #196]	@ (80039a0 <HAL_RCC_ClockConfig+0x1f0>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d208      	bcs.n	80038f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e4:	4b2e      	ldr	r3, [pc, #184]	@ (80039a0 <HAL_RCC_ClockConfig+0x1f0>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	492b      	ldr	r1, [pc, #172]	@ (80039a0 <HAL_RCC_ClockConfig+0x1f0>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f6:	4b29      	ldr	r3, [pc, #164]	@ (800399c <HAL_RCC_ClockConfig+0x1ec>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d210      	bcs.n	8003926 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003904:	4b25      	ldr	r3, [pc, #148]	@ (800399c <HAL_RCC_ClockConfig+0x1ec>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f023 0207 	bic.w	r2, r3, #7
 800390c:	4923      	ldr	r1, [pc, #140]	@ (800399c <HAL_RCC_ClockConfig+0x1ec>)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	4313      	orrs	r3, r2
 8003912:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003914:	4b21      	ldr	r3, [pc, #132]	@ (800399c <HAL_RCC_ClockConfig+0x1ec>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d001      	beq.n	8003926 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e036      	b.n	8003994 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003932:	4b1b      	ldr	r3, [pc, #108]	@ (80039a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	4918      	ldr	r1, [pc, #96]	@ (80039a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003940:	4313      	orrs	r3, r2
 8003942:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d009      	beq.n	8003964 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003950:	4b13      	ldr	r3, [pc, #76]	@ (80039a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4910      	ldr	r1, [pc, #64]	@ (80039a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003960:	4313      	orrs	r3, r2
 8003962:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003964:	f000 f824 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8003968:	4602      	mov	r2, r0
 800396a:	4b0d      	ldr	r3, [pc, #52]	@ (80039a0 <HAL_RCC_ClockConfig+0x1f0>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	091b      	lsrs	r3, r3, #4
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	490b      	ldr	r1, [pc, #44]	@ (80039a4 <HAL_RCC_ClockConfig+0x1f4>)
 8003976:	5ccb      	ldrb	r3, [r1, r3]
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	fa22 f303 	lsr.w	r3, r2, r3
 8003980:	4a09      	ldr	r2, [pc, #36]	@ (80039a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003982:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003984:	4b09      	ldr	r3, [pc, #36]	@ (80039ac <HAL_RCC_ClockConfig+0x1fc>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f7fd f92d 	bl	8000be8 <HAL_InitTick>
 800398e:	4603      	mov	r3, r0
 8003990:	72fb      	strb	r3, [r7, #11]

  return status;
 8003992:	7afb      	ldrb	r3, [r7, #11]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40022000 	.word	0x40022000
 80039a0:	40021000 	.word	0x40021000
 80039a4:	080079d0 	.word	0x080079d0
 80039a8:	20000000 	.word	0x20000000
 80039ac:	20000004 	.word	0x20000004

080039b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	@ 0x24
 80039b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	2300      	movs	r3, #0
 80039bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039be:	4b3e      	ldr	r3, [pc, #248]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039c8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0x34>
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	2b0c      	cmp	r3, #12
 80039dc:	d121      	bne.n	8003a22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d11e      	bne.n	8003a22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039e4:	4b34      	ldr	r3, [pc, #208]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d107      	bne.n	8003a00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039f0:	4b31      	ldr	r3, [pc, #196]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	e005      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a00:	4b2d      	ldr	r3, [pc, #180]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a0c:	4a2b      	ldr	r2, [pc, #172]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10d      	bne.n	8003a38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a20:	e00a      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d102      	bne.n	8003a2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a28:	4b25      	ldr	r3, [pc, #148]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a2a:	61bb      	str	r3, [r7, #24]
 8003a2c:	e004      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a34:	4b23      	ldr	r3, [pc, #140]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b0c      	cmp	r3, #12
 8003a3c:	d134      	bne.n	8003aa8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d003      	beq.n	8003a56 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d003      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0xac>
 8003a54:	e005      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a56:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a58:	617b      	str	r3, [r7, #20]
      break;
 8003a5a:	e005      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a5c:	4b19      	ldr	r3, [pc, #100]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a5e:	617b      	str	r3, [r7, #20]
      break;
 8003a60:	e002      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	617b      	str	r3, [r7, #20]
      break;
 8003a66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a68:	4b13      	ldr	r3, [pc, #76]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	3301      	adds	r3, #1
 8003a74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a76:	4b10      	ldr	r3, [pc, #64]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	fb03 f202 	mul.w	r2, r3, r2
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	0e5b      	lsrs	r3, r3, #25
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	3301      	adds	r3, #1
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003aa8:	69bb      	ldr	r3, [r7, #24]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3724      	adds	r7, #36	@ 0x24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	080079e8 	.word	0x080079e8
 8003ac0:	00f42400 	.word	0x00f42400
 8003ac4:	007a1200 	.word	0x007a1200

08003ac8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003acc:	4b03      	ldr	r3, [pc, #12]	@ (8003adc <HAL_RCC_GetHCLKFreq+0x14>)
 8003ace:	681b      	ldr	r3, [r3, #0]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20000000 	.word	0x20000000

08003ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ae4:	f7ff fff0 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	4b06      	ldr	r3, [pc, #24]	@ (8003b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	0a1b      	lsrs	r3, r3, #8
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	4904      	ldr	r1, [pc, #16]	@ (8003b08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003af6:	5ccb      	ldrb	r3, [r1, r3]
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40021000 	.word	0x40021000
 8003b08:	080079e0 	.word	0x080079e0

08003b0c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	220f      	movs	r2, #15
 8003b1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003b1c:	4b12      	ldr	r3, [pc, #72]	@ (8003b68 <HAL_RCC_GetClockConfig+0x5c>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0203 	and.w	r2, r3, #3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003b28:	4b0f      	ldr	r3, [pc, #60]	@ (8003b68 <HAL_RCC_GetClockConfig+0x5c>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003b34:	4b0c      	ldr	r3, [pc, #48]	@ (8003b68 <HAL_RCC_GetClockConfig+0x5c>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003b40:	4b09      	ldr	r3, [pc, #36]	@ (8003b68 <HAL_RCC_GetClockConfig+0x5c>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	08db      	lsrs	r3, r3, #3
 8003b46:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003b4e:	4b07      	ldr	r3, [pc, #28]	@ (8003b6c <HAL_RCC_GetClockConfig+0x60>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0207 	and.w	r2, r3, #7
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	601a      	str	r2, [r3, #0]
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	40022000 	.word	0x40022000

08003b70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b78:	2300      	movs	r3, #0
 8003b7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b88:	f7ff f994 	bl	8002eb4 <HAL_PWREx_GetVoltageRange>
 8003b8c:	6178      	str	r0, [r7, #20]
 8003b8e:	e014      	b.n	8003bba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b90:	4b25      	ldr	r3, [pc, #148]	@ (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b94:	4a24      	ldr	r2, [pc, #144]	@ (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b9c:	4b22      	ldr	r3, [pc, #136]	@ (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ba8:	f7ff f984 	bl	8002eb4 <HAL_PWREx_GetVoltageRange>
 8003bac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bae:	4b1e      	ldr	r3, [pc, #120]	@ (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc0:	d10b      	bne.n	8003bda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b80      	cmp	r3, #128	@ 0x80
 8003bc6:	d919      	bls.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2ba0      	cmp	r3, #160	@ 0xa0
 8003bcc:	d902      	bls.n	8003bd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bce:	2302      	movs	r3, #2
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	e013      	b.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	e010      	b.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b80      	cmp	r3, #128	@ 0x80
 8003bde:	d902      	bls.n	8003be6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003be0:	2303      	movs	r3, #3
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	e00a      	b.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b80      	cmp	r3, #128	@ 0x80
 8003bea:	d102      	bne.n	8003bf2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bec:	2302      	movs	r3, #2
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	e004      	b.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b70      	cmp	r3, #112	@ 0x70
 8003bf6:	d101      	bne.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f023 0207 	bic.w	r2, r3, #7
 8003c04:	4909      	ldr	r1, [pc, #36]	@ (8003c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c0c:	4b07      	ldr	r3, [pc, #28]	@ (8003c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d001      	beq.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40022000 	.word	0x40022000

08003c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c38:	2300      	movs	r3, #0
 8003c3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d041      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c50:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c54:	d02a      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c56:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c5a:	d824      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c60:	d008      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c66:	d81e      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c70:	d010      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c72:	e018      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c74:	4b86      	ldr	r3, [pc, #536]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4a85      	ldr	r2, [pc, #532]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c7e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c80:	e015      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3304      	adds	r3, #4
 8003c86:	2100      	movs	r1, #0
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 facd 	bl	8004228 <RCCEx_PLLSAI1_Config>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c92:	e00c      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3320      	adds	r3, #32
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fbb6 	bl	800440c <RCCEx_PLLSAI2_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ca4:	e003      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	74fb      	strb	r3, [r7, #19]
      break;
 8003caa:	e000      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003cac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cae:	7cfb      	ldrb	r3, [r7, #19]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10b      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cb4:	4b76      	ldr	r3, [pc, #472]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cc2:	4973      	ldr	r1, [pc, #460]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003cca:	e001      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ccc:	7cfb      	ldrb	r3, [r7, #19]
 8003cce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d041      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ce0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ce4:	d02a      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ce6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003cea:	d824      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cf0:	d008      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003cf2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cf6:	d81e      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003cfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d00:	d010      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d02:	e018      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d04:	4b62      	ldr	r3, [pc, #392]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	4a61      	ldr	r2, [pc, #388]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d0e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d10:	e015      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3304      	adds	r3, #4
 8003d16:	2100      	movs	r1, #0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 fa85 	bl	8004228 <RCCEx_PLLSAI1_Config>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d22:	e00c      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3320      	adds	r3, #32
 8003d28:	2100      	movs	r1, #0
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fb6e 	bl	800440c <RCCEx_PLLSAI2_Config>
 8003d30:	4603      	mov	r3, r0
 8003d32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d34:	e003      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	74fb      	strb	r3, [r7, #19]
      break;
 8003d3a:	e000      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d3e:	7cfb      	ldrb	r3, [r7, #19]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10b      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d44:	4b52      	ldr	r3, [pc, #328]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d52:	494f      	ldr	r1, [pc, #316]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d5a:	e001      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5c:	7cfb      	ldrb	r3, [r7, #19]
 8003d5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 80a0 	beq.w	8003eae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d72:	4b47      	ldr	r3, [pc, #284]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d82:	2300      	movs	r3, #0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00d      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d88:	4b41      	ldr	r3, [pc, #260]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8c:	4a40      	ldr	r2, [pc, #256]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d92:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d94:	4b3e      	ldr	r3, [pc, #248]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da0:	2301      	movs	r3, #1
 8003da2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003da4:	4b3b      	ldr	r3, [pc, #236]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a3a      	ldr	r2, [pc, #232]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003db0:	f7fd f828 	bl	8000e04 <HAL_GetTick>
 8003db4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003db6:	e009      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db8:	f7fd f824 	bl	8000e04 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d902      	bls.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	74fb      	strb	r3, [r7, #19]
        break;
 8003dca:	e005      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dcc:	4b31      	ldr	r3, [pc, #196]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0ef      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003dd8:	7cfb      	ldrb	r3, [r7, #19]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d15c      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dde:	4b2c      	ldr	r3, [pc, #176]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003de8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d01f      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d019      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dfc:	4b24      	ldr	r3, [pc, #144]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e08:	4b21      	ldr	r3, [pc, #132]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0e:	4a20      	ldr	r2, [pc, #128]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e18:	4b1d      	ldr	r3, [pc, #116]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e28:	4a19      	ldr	r2, [pc, #100]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d016      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3a:	f7fc ffe3 	bl	8000e04 <HAL_GetTick>
 8003e3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e40:	e00b      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e42:	f7fc ffdf 	bl	8000e04 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d902      	bls.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	74fb      	strb	r3, [r7, #19]
            break;
 8003e58:	e006      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0ec      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e68:	7cfb      	ldrb	r3, [r7, #19]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10c      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e6e:	4b08      	ldr	r3, [pc, #32]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7e:	4904      	ldr	r1, [pc, #16]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e86:	e009      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e88:	7cfb      	ldrb	r3, [r7, #19]
 8003e8a:	74bb      	strb	r3, [r7, #18]
 8003e8c:	e006      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e98:	7cfb      	ldrb	r3, [r7, #19]
 8003e9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e9c:	7c7b      	ldrb	r3, [r7, #17]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d105      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea2:	4ba6      	ldr	r3, [pc, #664]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea6:	4aa5      	ldr	r2, [pc, #660]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ea8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eba:	4ba0      	ldr	r3, [pc, #640]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec0:	f023 0203 	bic.w	r2, r3, #3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec8:	499c      	ldr	r1, [pc, #624]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003edc:	4b97      	ldr	r3, [pc, #604]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee2:	f023 020c 	bic.w	r2, r3, #12
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eea:	4994      	ldr	r1, [pc, #592]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003efe:	4b8f      	ldr	r3, [pc, #572]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f04:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	498b      	ldr	r1, [pc, #556]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f20:	4b86      	ldr	r3, [pc, #536]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f26:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2e:	4983      	ldr	r1, [pc, #524]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0310 	and.w	r3, r3, #16
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f42:	4b7e      	ldr	r3, [pc, #504]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f50:	497a      	ldr	r1, [pc, #488]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f64:	4b75      	ldr	r3, [pc, #468]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f72:	4972      	ldr	r1, [pc, #456]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f86:	4b6d      	ldr	r3, [pc, #436]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f94:	4969      	ldr	r1, [pc, #420]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fa8:	4b64      	ldr	r3, [pc, #400]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fb6:	4961      	ldr	r1, [pc, #388]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fca:	4b5c      	ldr	r3, [pc, #368]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd8:	4958      	ldr	r1, [pc, #352]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fec:	4b53      	ldr	r3, [pc, #332]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ffa:	4950      	ldr	r1, [pc, #320]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800400e:	4b4b      	ldr	r3, [pc, #300]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004014:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401c:	4947      	ldr	r1, [pc, #284]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004030:	4b42      	ldr	r3, [pc, #264]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004032:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004036:	f023 0203 	bic.w	r2, r3, #3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800403e:	493f      	ldr	r1, [pc, #252]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d028      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004052:	4b3a      	ldr	r3, [pc, #232]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004058:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004060:	4936      	ldr	r1, [pc, #216]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004070:	d106      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004072:	4b32      	ldr	r3, [pc, #200]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	4a31      	ldr	r2, [pc, #196]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004078:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800407c:	60d3      	str	r3, [r2, #12]
 800407e:	e011      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004084:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004088:	d10c      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3304      	adds	r3, #4
 800408e:	2101      	movs	r1, #1
 8004090:	4618      	mov	r0, r3
 8004092:	f000 f8c9 	bl	8004228 <RCCEx_PLLSAI1_Config>
 8004096:	4603      	mov	r3, r0
 8004098:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800409a:	7cfb      	ldrb	r3, [r7, #19]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80040a0:	7cfb      	ldrb	r3, [r7, #19]
 80040a2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d028      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040b0:	4b22      	ldr	r3, [pc, #136]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040be:	491f      	ldr	r1, [pc, #124]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040ce:	d106      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040d0:	4b1a      	ldr	r3, [pc, #104]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4a19      	ldr	r2, [pc, #100]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040da:	60d3      	str	r3, [r2, #12]
 80040dc:	e011      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040e6:	d10c      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3304      	adds	r3, #4
 80040ec:	2101      	movs	r1, #1
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 f89a 	bl	8004228 <RCCEx_PLLSAI1_Config>
 80040f4:	4603      	mov	r3, r0
 80040f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040f8:	7cfb      	ldrb	r3, [r7, #19]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80040fe:	7cfb      	ldrb	r3, [r7, #19]
 8004100:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d02a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800410e:	4b0b      	ldr	r3, [pc, #44]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004114:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800411c:	4907      	ldr	r1, [pc, #28]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004128:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800412c:	d108      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800412e:	4b03      	ldr	r3, [pc, #12]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	4a02      	ldr	r2, [pc, #8]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004134:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004138:	60d3      	str	r3, [r2, #12]
 800413a:	e013      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800413c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004144:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004148:	d10c      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3304      	adds	r3, #4
 800414e:	2101      	movs	r1, #1
 8004150:	4618      	mov	r0, r3
 8004152:	f000 f869 	bl	8004228 <RCCEx_PLLSAI1_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800415a:	7cfb      	ldrb	r3, [r7, #19]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004160:	7cfb      	ldrb	r3, [r7, #19]
 8004162:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d02f      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004170:	4b2c      	ldr	r3, [pc, #176]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004176:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800417e:	4929      	ldr	r1, [pc, #164]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800418a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800418e:	d10d      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3304      	adds	r3, #4
 8004194:	2102      	movs	r1, #2
 8004196:	4618      	mov	r0, r3
 8004198:	f000 f846 	bl	8004228 <RCCEx_PLLSAI1_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d014      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80041a6:	7cfb      	ldrb	r3, [r7, #19]
 80041a8:	74bb      	strb	r3, [r7, #18]
 80041aa:	e011      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041b4:	d10c      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3320      	adds	r3, #32
 80041ba:	2102      	movs	r1, #2
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 f925 	bl	800440c <RCCEx_PLLSAI2_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041c6:	7cfb      	ldrb	r3, [r7, #19]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80041cc:	7cfb      	ldrb	r3, [r7, #19]
 80041ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00b      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041dc:	4b11      	ldr	r3, [pc, #68]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041ec:	490d      	ldr	r1, [pc, #52]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00b      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004200:	4b08      	ldr	r3, [pc, #32]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004206:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004210:	4904      	ldr	r1, [pc, #16]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004218:	7cbb      	ldrb	r3, [r7, #18]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40021000 	.word	0x40021000

08004228 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004236:	4b74      	ldr	r3, [pc, #464]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d018      	beq.n	8004274 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004242:	4b71      	ldr	r3, [pc, #452]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f003 0203 	and.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d10d      	bne.n	800426e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
       ||
 8004256:	2b00      	cmp	r3, #0
 8004258:	d009      	beq.n	800426e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800425a:	4b6b      	ldr	r3, [pc, #428]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	091b      	lsrs	r3, r3, #4
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
       ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d047      	beq.n	80042fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
 8004272:	e044      	b.n	80042fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b03      	cmp	r3, #3
 800427a:	d018      	beq.n	80042ae <RCCEx_PLLSAI1_Config+0x86>
 800427c:	2b03      	cmp	r3, #3
 800427e:	d825      	bhi.n	80042cc <RCCEx_PLLSAI1_Config+0xa4>
 8004280:	2b01      	cmp	r3, #1
 8004282:	d002      	beq.n	800428a <RCCEx_PLLSAI1_Config+0x62>
 8004284:	2b02      	cmp	r3, #2
 8004286:	d009      	beq.n	800429c <RCCEx_PLLSAI1_Config+0x74>
 8004288:	e020      	b.n	80042cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800428a:	4b5f      	ldr	r3, [pc, #380]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d11d      	bne.n	80042d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800429a:	e01a      	b.n	80042d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800429c:	4b5a      	ldr	r3, [pc, #360]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d116      	bne.n	80042d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ac:	e013      	b.n	80042d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042ae:	4b56      	ldr	r3, [pc, #344]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10f      	bne.n	80042da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042ba:	4b53      	ldr	r3, [pc, #332]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042ca:	e006      	b.n	80042da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	73fb      	strb	r3, [r7, #15]
      break;
 80042d0:	e004      	b.n	80042dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042d2:	bf00      	nop
 80042d4:	e002      	b.n	80042dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042d6:	bf00      	nop
 80042d8:	e000      	b.n	80042dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042da:	bf00      	nop
    }

    if(status == HAL_OK)
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10d      	bne.n	80042fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042e2:	4b49      	ldr	r3, [pc, #292]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6819      	ldr	r1, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	430b      	orrs	r3, r1
 80042f8:	4943      	ldr	r1, [pc, #268]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d17c      	bne.n	80043fe <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004304:	4b40      	ldr	r3, [pc, #256]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a3f      	ldr	r2, [pc, #252]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800430a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800430e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004310:	f7fc fd78 	bl	8000e04 <HAL_GetTick>
 8004314:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004316:	e009      	b.n	800432c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004318:	f7fc fd74 	bl	8000e04 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d902      	bls.n	800432c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	73fb      	strb	r3, [r7, #15]
        break;
 800432a:	e005      	b.n	8004338 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800432c:	4b36      	ldr	r3, [pc, #216]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1ef      	bne.n	8004318 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d15f      	bne.n	80043fe <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d110      	bne.n	8004366 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004344:	4b30      	ldr	r3, [pc, #192]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800434c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6892      	ldr	r2, [r2, #8]
 8004354:	0211      	lsls	r1, r2, #8
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68d2      	ldr	r2, [r2, #12]
 800435a:	06d2      	lsls	r2, r2, #27
 800435c:	430a      	orrs	r2, r1
 800435e:	492a      	ldr	r1, [pc, #168]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004360:	4313      	orrs	r3, r2
 8004362:	610b      	str	r3, [r1, #16]
 8004364:	e027      	b.n	80043b6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d112      	bne.n	8004392 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800436c:	4b26      	ldr	r3, [pc, #152]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004374:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6892      	ldr	r2, [r2, #8]
 800437c:	0211      	lsls	r1, r2, #8
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6912      	ldr	r2, [r2, #16]
 8004382:	0852      	lsrs	r2, r2, #1
 8004384:	3a01      	subs	r2, #1
 8004386:	0552      	lsls	r2, r2, #21
 8004388:	430a      	orrs	r2, r1
 800438a:	491f      	ldr	r1, [pc, #124]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800438c:	4313      	orrs	r3, r2
 800438e:	610b      	str	r3, [r1, #16]
 8004390:	e011      	b.n	80043b6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004392:	4b1d      	ldr	r3, [pc, #116]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800439a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6892      	ldr	r2, [r2, #8]
 80043a2:	0211      	lsls	r1, r2, #8
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6952      	ldr	r2, [r2, #20]
 80043a8:	0852      	lsrs	r2, r2, #1
 80043aa:	3a01      	subs	r2, #1
 80043ac:	0652      	lsls	r2, r2, #25
 80043ae:	430a      	orrs	r2, r1
 80043b0:	4915      	ldr	r1, [pc, #84]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043b6:	4b14      	ldr	r3, [pc, #80]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a13      	ldr	r2, [pc, #76]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c2:	f7fc fd1f 	bl	8000e04 <HAL_GetTick>
 80043c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043c8:	e009      	b.n	80043de <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043ca:	f7fc fd1b 	bl	8000e04 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d902      	bls.n	80043de <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	73fb      	strb	r3, [r7, #15]
          break;
 80043dc:	e005      	b.n	80043ea <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043de:	4b0a      	ldr	r3, [pc, #40]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0ef      	beq.n	80043ca <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d106      	bne.n	80043fe <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043f0:	4b05      	ldr	r3, [pc, #20]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	4903      	ldr	r1, [pc, #12]	@ (8004408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40021000 	.word	0x40021000

0800440c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800441a:	4b69      	ldr	r3, [pc, #420]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d018      	beq.n	8004458 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004426:	4b66      	ldr	r3, [pc, #408]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f003 0203 	and.w	r2, r3, #3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d10d      	bne.n	8004452 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
       ||
 800443a:	2b00      	cmp	r3, #0
 800443c:	d009      	beq.n	8004452 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800443e:	4b60      	ldr	r3, [pc, #384]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	091b      	lsrs	r3, r3, #4
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
       ||
 800444e:	429a      	cmp	r2, r3
 8004450:	d047      	beq.n	80044e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	73fb      	strb	r3, [r7, #15]
 8004456:	e044      	b.n	80044e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b03      	cmp	r3, #3
 800445e:	d018      	beq.n	8004492 <RCCEx_PLLSAI2_Config+0x86>
 8004460:	2b03      	cmp	r3, #3
 8004462:	d825      	bhi.n	80044b0 <RCCEx_PLLSAI2_Config+0xa4>
 8004464:	2b01      	cmp	r3, #1
 8004466:	d002      	beq.n	800446e <RCCEx_PLLSAI2_Config+0x62>
 8004468:	2b02      	cmp	r3, #2
 800446a:	d009      	beq.n	8004480 <RCCEx_PLLSAI2_Config+0x74>
 800446c:	e020      	b.n	80044b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800446e:	4b54      	ldr	r3, [pc, #336]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d11d      	bne.n	80044b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800447e:	e01a      	b.n	80044b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004480:	4b4f      	ldr	r3, [pc, #316]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004488:	2b00      	cmp	r3, #0
 800448a:	d116      	bne.n	80044ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004490:	e013      	b.n	80044ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004492:	4b4b      	ldr	r3, [pc, #300]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10f      	bne.n	80044be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800449e:	4b48      	ldr	r3, [pc, #288]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044ae:	e006      	b.n	80044be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
      break;
 80044b4:	e004      	b.n	80044c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044b6:	bf00      	nop
 80044b8:	e002      	b.n	80044c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044ba:	bf00      	nop
 80044bc:	e000      	b.n	80044c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044be:	bf00      	nop
    }

    if(status == HAL_OK)
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10d      	bne.n	80044e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044c6:	4b3e      	ldr	r3, [pc, #248]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6819      	ldr	r1, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	430b      	orrs	r3, r1
 80044dc:	4938      	ldr	r1, [pc, #224]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d166      	bne.n	80045b6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044e8:	4b35      	ldr	r3, [pc, #212]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a34      	ldr	r2, [pc, #208]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f4:	f7fc fc86 	bl	8000e04 <HAL_GetTick>
 80044f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044fa:	e009      	b.n	8004510 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044fc:	f7fc fc82 	bl	8000e04 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d902      	bls.n	8004510 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	73fb      	strb	r3, [r7, #15]
        break;
 800450e:	e005      	b.n	800451c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004510:	4b2b      	ldr	r3, [pc, #172]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1ef      	bne.n	80044fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d149      	bne.n	80045b6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d110      	bne.n	800454a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004528:	4b25      	ldr	r3, [pc, #148]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004530:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6892      	ldr	r2, [r2, #8]
 8004538:	0211      	lsls	r1, r2, #8
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68d2      	ldr	r2, [r2, #12]
 800453e:	06d2      	lsls	r2, r2, #27
 8004540:	430a      	orrs	r2, r1
 8004542:	491f      	ldr	r1, [pc, #124]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004544:	4313      	orrs	r3, r2
 8004546:	614b      	str	r3, [r1, #20]
 8004548:	e011      	b.n	800456e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800454a:	4b1d      	ldr	r3, [pc, #116]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004552:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6892      	ldr	r2, [r2, #8]
 800455a:	0211      	lsls	r1, r2, #8
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6912      	ldr	r2, [r2, #16]
 8004560:	0852      	lsrs	r2, r2, #1
 8004562:	3a01      	subs	r2, #1
 8004564:	0652      	lsls	r2, r2, #25
 8004566:	430a      	orrs	r2, r1
 8004568:	4915      	ldr	r1, [pc, #84]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800456a:	4313      	orrs	r3, r2
 800456c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800456e:	4b14      	ldr	r3, [pc, #80]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a13      	ldr	r2, [pc, #76]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004578:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457a:	f7fc fc43 	bl	8000e04 <HAL_GetTick>
 800457e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004580:	e009      	b.n	8004596 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004582:	f7fc fc3f 	bl	8000e04 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d902      	bls.n	8004596 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	73fb      	strb	r3, [r7, #15]
          break;
 8004594:	e005      	b.n	80045a2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004596:	4b0a      	ldr	r3, [pc, #40]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0ef      	beq.n	8004582 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d106      	bne.n	80045b6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045a8:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80045aa:	695a      	ldr	r2, [r3, #20]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	4903      	ldr	r1, [pc, #12]	@ (80045c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40021000 	.word	0x40021000

080045c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e049      	b.n	800466a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f841 	bl	8004672 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3304      	adds	r3, #4
 8004600:	4619      	mov	r1, r3
 8004602:	4610      	mov	r0, r2
 8004604:	f000 f9e0 	bl	80049c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b01      	cmp	r3, #1
 800469a:	d001      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e04f      	b.n	8004740 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a23      	ldr	r2, [pc, #140]	@ (800474c <HAL_TIM_Base_Start_IT+0xc4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d01d      	beq.n	80046fe <HAL_TIM_Base_Start_IT+0x76>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ca:	d018      	beq.n	80046fe <HAL_TIM_Base_Start_IT+0x76>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004750 <HAL_TIM_Base_Start_IT+0xc8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d013      	beq.n	80046fe <HAL_TIM_Base_Start_IT+0x76>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a1e      	ldr	r2, [pc, #120]	@ (8004754 <HAL_TIM_Base_Start_IT+0xcc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00e      	beq.n	80046fe <HAL_TIM_Base_Start_IT+0x76>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004758 <HAL_TIM_Base_Start_IT+0xd0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d009      	beq.n	80046fe <HAL_TIM_Base_Start_IT+0x76>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1b      	ldr	r2, [pc, #108]	@ (800475c <HAL_TIM_Base_Start_IT+0xd4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d004      	beq.n	80046fe <HAL_TIM_Base_Start_IT+0x76>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a19      	ldr	r2, [pc, #100]	@ (8004760 <HAL_TIM_Base_Start_IT+0xd8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d115      	bne.n	800472a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	4b17      	ldr	r3, [pc, #92]	@ (8004764 <HAL_TIM_Base_Start_IT+0xdc>)
 8004706:	4013      	ands	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2b06      	cmp	r3, #6
 800470e:	d015      	beq.n	800473c <HAL_TIM_Base_Start_IT+0xb4>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004716:	d011      	beq.n	800473c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004728:	e008      	b.n	800473c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0201 	orr.w	r2, r2, #1
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e000      	b.n	800473e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	40012c00 	.word	0x40012c00
 8004750:	40000400 	.word	0x40000400
 8004754:	40000800 	.word	0x40000800
 8004758:	40000c00 	.word	0x40000c00
 800475c:	40013400 	.word	0x40013400
 8004760:	40014000 	.word	0x40014000
 8004764:	00010007 	.word	0x00010007

08004768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d020      	beq.n	80047cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01b      	beq.n	80047cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0202 	mvn.w	r2, #2
 800479c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f8e9 	bl	800498a <HAL_TIM_IC_CaptureCallback>
 80047b8:	e005      	b.n	80047c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f8db 	bl	8004976 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f8ec 	bl	800499e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d020      	beq.n	8004818 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d01b      	beq.n	8004818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f06f 0204 	mvn.w	r2, #4
 80047e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2202      	movs	r2, #2
 80047ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f8c3 	bl	800498a <HAL_TIM_IC_CaptureCallback>
 8004804:	e005      	b.n	8004812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f8b5 	bl	8004976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f8c6 	bl	800499e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d020      	beq.n	8004864 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d01b      	beq.n	8004864 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f06f 0208 	mvn.w	r2, #8
 8004834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2204      	movs	r2, #4
 800483a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f89d 	bl	800498a <HAL_TIM_IC_CaptureCallback>
 8004850:	e005      	b.n	800485e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f88f 	bl	8004976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f8a0 	bl	800499e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	2b00      	cmp	r3, #0
 800486c:	d020      	beq.n	80048b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01b      	beq.n	80048b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0210 	mvn.w	r2, #16
 8004880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2208      	movs	r2, #8
 8004886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f877 	bl	800498a <HAL_TIM_IC_CaptureCallback>
 800489c:	e005      	b.n	80048aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f869 	bl	8004976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f87a 	bl	800499e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00c      	beq.n	80048d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f06f 0201 	mvn.w	r2, #1
 80048cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fb ffdc 	bl	800088c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d104      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00c      	beq.n	8004902 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80048fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f913 	bl	8004b28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00c      	beq.n	8004926 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004912:	2b00      	cmp	r3, #0
 8004914:	d007      	beq.n	8004926 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800491e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f90b 	bl	8004b3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00c      	beq.n	800494a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f834 	bl	80049b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f003 0320 	and.w	r3, r3, #32
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00c      	beq.n	800496e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f06f 0220 	mvn.w	r2, #32
 8004966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f8d3 	bl	8004b14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800496e:	bf00      	nop
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
	...

080049c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a46      	ldr	r2, [pc, #280]	@ (8004af4 <TIM_Base_SetConfig+0x12c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d013      	beq.n	8004a08 <TIM_Base_SetConfig+0x40>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e6:	d00f      	beq.n	8004a08 <TIM_Base_SetConfig+0x40>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a43      	ldr	r2, [pc, #268]	@ (8004af8 <TIM_Base_SetConfig+0x130>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00b      	beq.n	8004a08 <TIM_Base_SetConfig+0x40>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a42      	ldr	r2, [pc, #264]	@ (8004afc <TIM_Base_SetConfig+0x134>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d007      	beq.n	8004a08 <TIM_Base_SetConfig+0x40>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a41      	ldr	r2, [pc, #260]	@ (8004b00 <TIM_Base_SetConfig+0x138>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d003      	beq.n	8004a08 <TIM_Base_SetConfig+0x40>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a40      	ldr	r2, [pc, #256]	@ (8004b04 <TIM_Base_SetConfig+0x13c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d108      	bne.n	8004a1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a35      	ldr	r2, [pc, #212]	@ (8004af4 <TIM_Base_SetConfig+0x12c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d01f      	beq.n	8004a62 <TIM_Base_SetConfig+0x9a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a28:	d01b      	beq.n	8004a62 <TIM_Base_SetConfig+0x9a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a32      	ldr	r2, [pc, #200]	@ (8004af8 <TIM_Base_SetConfig+0x130>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d017      	beq.n	8004a62 <TIM_Base_SetConfig+0x9a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a31      	ldr	r2, [pc, #196]	@ (8004afc <TIM_Base_SetConfig+0x134>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d013      	beq.n	8004a62 <TIM_Base_SetConfig+0x9a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a30      	ldr	r2, [pc, #192]	@ (8004b00 <TIM_Base_SetConfig+0x138>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00f      	beq.n	8004a62 <TIM_Base_SetConfig+0x9a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a2f      	ldr	r2, [pc, #188]	@ (8004b04 <TIM_Base_SetConfig+0x13c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00b      	beq.n	8004a62 <TIM_Base_SetConfig+0x9a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a2e      	ldr	r2, [pc, #184]	@ (8004b08 <TIM_Base_SetConfig+0x140>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d007      	beq.n	8004a62 <TIM_Base_SetConfig+0x9a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a2d      	ldr	r2, [pc, #180]	@ (8004b0c <TIM_Base_SetConfig+0x144>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d003      	beq.n	8004a62 <TIM_Base_SetConfig+0x9a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a2c      	ldr	r2, [pc, #176]	@ (8004b10 <TIM_Base_SetConfig+0x148>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d108      	bne.n	8004a74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a16      	ldr	r2, [pc, #88]	@ (8004af4 <TIM_Base_SetConfig+0x12c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00f      	beq.n	8004ac0 <TIM_Base_SetConfig+0xf8>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a18      	ldr	r2, [pc, #96]	@ (8004b04 <TIM_Base_SetConfig+0x13c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00b      	beq.n	8004ac0 <TIM_Base_SetConfig+0xf8>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a17      	ldr	r2, [pc, #92]	@ (8004b08 <TIM_Base_SetConfig+0x140>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d007      	beq.n	8004ac0 <TIM_Base_SetConfig+0xf8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a16      	ldr	r2, [pc, #88]	@ (8004b0c <TIM_Base_SetConfig+0x144>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d003      	beq.n	8004ac0 <TIM_Base_SetConfig+0xf8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a15      	ldr	r2, [pc, #84]	@ (8004b10 <TIM_Base_SetConfig+0x148>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d103      	bne.n	8004ac8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d105      	bne.n	8004ae6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f023 0201 	bic.w	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	611a      	str	r2, [r3, #16]
  }
}
 8004ae6:	bf00      	nop
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40012c00 	.word	0x40012c00
 8004af8:	40000400 	.word	0x40000400
 8004afc:	40000800 	.word	0x40000800
 8004b00:	40000c00 	.word	0x40000c00
 8004b04:	40013400 	.word	0x40013400
 8004b08:	40014000 	.word	0x40014000
 8004b0c:	40014400 	.word	0x40014400
 8004b10:	40014800 	.word	0x40014800

08004b14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <__NVIC_SetPriority>:
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	6039      	str	r1, [r7, #0]
 8004b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	db0a      	blt.n	8004b7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	490c      	ldr	r1, [pc, #48]	@ (8004b9c <__NVIC_SetPriority+0x4c>)
 8004b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6e:	0112      	lsls	r2, r2, #4
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	440b      	add	r3, r1
 8004b74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004b78:	e00a      	b.n	8004b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	4908      	ldr	r1, [pc, #32]	@ (8004ba0 <__NVIC_SetPriority+0x50>)
 8004b80:	79fb      	ldrb	r3, [r7, #7]
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	3b04      	subs	r3, #4
 8004b88:	0112      	lsls	r2, r2, #4
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	761a      	strb	r2, [r3, #24]
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	e000e100 	.word	0xe000e100
 8004ba0:	e000ed00 	.word	0xe000ed00

08004ba4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004ba8:	4b05      	ldr	r3, [pc, #20]	@ (8004bc0 <SysTick_Handler+0x1c>)
 8004baa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004bac:	f001 fd46 	bl	800663c <xTaskGetSchedulerState>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d001      	beq.n	8004bba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004bb6:	f002 fb3f 	bl	8007238 <xPortSysTickHandler>
  }
}
 8004bba:	bf00      	nop
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	e000e010 	.word	0xe000e010

08004bc4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004bc8:	2100      	movs	r1, #0
 8004bca:	f06f 0004 	mvn.w	r0, #4
 8004bce:	f7ff ffbf 	bl	8004b50 <__NVIC_SetPriority>
#endif
}
 8004bd2:	bf00      	nop
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bde:	f3ef 8305 	mrs	r3, IPSR
 8004be2:	603b      	str	r3, [r7, #0]
  return(result);
 8004be4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004bea:	f06f 0305 	mvn.w	r3, #5
 8004bee:	607b      	str	r3, [r7, #4]
 8004bf0:	e00c      	b.n	8004c0c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8004c1c <osKernelInitialize+0x44>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d105      	bne.n	8004c06 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004bfa:	4b08      	ldr	r3, [pc, #32]	@ (8004c1c <osKernelInitialize+0x44>)
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	607b      	str	r3, [r7, #4]
 8004c04:	e002      	b.n	8004c0c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004c06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c0c:	687b      	ldr	r3, [r7, #4]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	200001f8 	.word	0x200001f8

08004c20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c26:	f3ef 8305 	mrs	r3, IPSR
 8004c2a:	603b      	str	r3, [r7, #0]
  return(result);
 8004c2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004c32:	f06f 0305 	mvn.w	r3, #5
 8004c36:	607b      	str	r3, [r7, #4]
 8004c38:	e010      	b.n	8004c5c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c68 <osKernelStart+0x48>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d109      	bne.n	8004c56 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c42:	f7ff ffbf 	bl	8004bc4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c46:	4b08      	ldr	r3, [pc, #32]	@ (8004c68 <osKernelStart+0x48>)
 8004c48:	2202      	movs	r2, #2
 8004c4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c4c:	f001 f892 	bl	8005d74 <vTaskStartScheduler>
      stat = osOK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	607b      	str	r3, [r7, #4]
 8004c54:	e002      	b.n	8004c5c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004c56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c5c:	687b      	ldr	r3, [r7, #4]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	200001f8 	.word	0x200001f8

08004c6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b08e      	sub	sp, #56	@ 0x38
 8004c70:	af04      	add	r7, sp, #16
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c7c:	f3ef 8305 	mrs	r3, IPSR
 8004c80:	617b      	str	r3, [r7, #20]
  return(result);
 8004c82:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d17e      	bne.n	8004d86 <osThreadNew+0x11a>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d07b      	beq.n	8004d86 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004c8e:	2380      	movs	r3, #128	@ 0x80
 8004c90:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004c92:	2318      	movs	r3, #24
 8004c94:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004c9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c9e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d045      	beq.n	8004d32 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <osThreadNew+0x48>
        name = attr->name;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d008      	beq.n	8004cda <osThreadNew+0x6e>
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	2b38      	cmp	r3, #56	@ 0x38
 8004ccc:	d805      	bhi.n	8004cda <osThreadNew+0x6e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <osThreadNew+0x72>
        return (NULL);
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e054      	b.n	8004d88 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	089b      	lsrs	r3, r3, #2
 8004cec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00e      	beq.n	8004d14 <osThreadNew+0xa8>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	2ba7      	cmp	r3, #167	@ 0xa7
 8004cfc:	d90a      	bls.n	8004d14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d006      	beq.n	8004d14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <osThreadNew+0xa8>
        mem = 1;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	61bb      	str	r3, [r7, #24]
 8004d12:	e010      	b.n	8004d36 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10c      	bne.n	8004d36 <osThreadNew+0xca>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d108      	bne.n	8004d36 <osThreadNew+0xca>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d104      	bne.n	8004d36 <osThreadNew+0xca>
          mem = 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61bb      	str	r3, [r7, #24]
 8004d30:	e001      	b.n	8004d36 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d110      	bne.n	8004d5e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d44:	9202      	str	r2, [sp, #8]
 8004d46:	9301      	str	r3, [sp, #4]
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	6a3a      	ldr	r2, [r7, #32]
 8004d50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 fe1a 	bl	800598c <xTaskCreateStatic>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	e013      	b.n	8004d86 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d110      	bne.n	8004d86 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	f107 0310 	add.w	r3, r7, #16
 8004d6c:	9301      	str	r3, [sp, #4]
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 fe68 	bl	8005a4c <xTaskCreate>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d001      	beq.n	8004d86 <osThreadNew+0x11a>
            hTask = NULL;
 8004d82:	2300      	movs	r3, #0
 8004d84:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d86:	693b      	ldr	r3, [r7, #16]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3728      	adds	r7, #40	@ 0x28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d98:	f3ef 8305 	mrs	r3, IPSR
 8004d9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d9e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <osDelay+0x1c>
    stat = osErrorISR;
 8004da4:	f06f 0305 	mvn.w	r3, #5
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	e007      	b.n	8004dbc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <osDelay+0x2c>
      vTaskDelay(ticks);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 ffa6 	bl	8005d08 <vTaskDelay>
    }
  }

  return (stat);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4a07      	ldr	r2, [pc, #28]	@ (8004df4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004dd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	4a06      	ldr	r2, [pc, #24]	@ (8004df8 <vApplicationGetIdleTaskMemory+0x30>)
 8004dde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2280      	movs	r2, #128	@ 0x80
 8004de4:	601a      	str	r2, [r3, #0]
}
 8004de6:	bf00      	nop
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	200001fc 	.word	0x200001fc
 8004df8:	200002a4 	.word	0x200002a4

08004dfc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4a07      	ldr	r2, [pc, #28]	@ (8004e28 <vApplicationGetTimerTaskMemory+0x2c>)
 8004e0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	4a06      	ldr	r2, [pc, #24]	@ (8004e2c <vApplicationGetTimerTaskMemory+0x30>)
 8004e12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e1a:	601a      	str	r2, [r3, #0]
}
 8004e1c:	bf00      	nop
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	200004a4 	.word	0x200004a4
 8004e2c:	2000054c 	.word	0x2000054c

08004e30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f103 0208 	add.w	r2, r3, #8
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f103 0208 	add.w	r2, r3, #8
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f103 0208 	add.w	r2, r3, #8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b085      	sub	sp, #20
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	601a      	str	r2, [r3, #0]
}
 8004ec6:	bf00      	nop
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b085      	sub	sp, #20
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ee8:	d103      	bne.n	8004ef2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	e00c      	b.n	8004f0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	e002      	b.n	8004f00 <vListInsert+0x2e>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d2f6      	bcs.n	8004efa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	601a      	str	r2, [r3, #0]
}
 8004f38:	bf00      	nop
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6892      	ldr	r2, [r2, #8]
 8004f5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6852      	ldr	r2, [r2, #4]
 8004f64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d103      	bne.n	8004f78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	1e5a      	subs	r2, r3, #1
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10b      	bne.n	8004fc4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004fbe:	bf00      	nop
 8004fc0:	bf00      	nop
 8004fc2:	e7fd      	b.n	8004fc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004fc4:	f002 f8a8 	bl	8007118 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd0:	68f9      	ldr	r1, [r7, #12]
 8004fd2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004fd4:	fb01 f303 	mul.w	r3, r1, r3
 8004fd8:	441a      	add	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	68f9      	ldr	r1, [r7, #12]
 8004ff8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ffa:	fb01 f303 	mul.w	r3, r1, r3
 8004ffe:	441a      	add	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	22ff      	movs	r2, #255	@ 0xff
 8005008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	22ff      	movs	r2, #255	@ 0xff
 8005010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d114      	bne.n	8005044 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d01a      	beq.n	8005058 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	3310      	adds	r3, #16
 8005026:	4618      	mov	r0, r3
 8005028:	f001 f942 	bl	80062b0 <xTaskRemoveFromEventList>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d012      	beq.n	8005058 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005032:	4b0d      	ldr	r3, [pc, #52]	@ (8005068 <xQueueGenericReset+0xd0>)
 8005034:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	e009      	b.n	8005058 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	3310      	adds	r3, #16
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff fef1 	bl	8004e30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3324      	adds	r3, #36	@ 0x24
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff feec 	bl	8004e30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005058:	f002 f890 	bl	800717c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800505c:	2301      	movs	r3, #1
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08e      	sub	sp, #56	@ 0x38
 8005070:	af02      	add	r7, sp, #8
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10b      	bne.n	8005098 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	e7fd      	b.n	8005094 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10b      	bne.n	80050b6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050b0:	bf00      	nop
 80050b2:	bf00      	nop
 80050b4:	e7fd      	b.n	80050b2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <xQueueGenericCreateStatic+0x56>
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <xQueueGenericCreateStatic+0x5a>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <xQueueGenericCreateStatic+0x5c>
 80050c6:	2300      	movs	r3, #0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10b      	bne.n	80050e4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	623b      	str	r3, [r7, #32]
}
 80050de:	bf00      	nop
 80050e0:	bf00      	nop
 80050e2:	e7fd      	b.n	80050e0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d102      	bne.n	80050f0 <xQueueGenericCreateStatic+0x84>
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <xQueueGenericCreateStatic+0x88>
 80050f0:	2301      	movs	r3, #1
 80050f2:	e000      	b.n	80050f6 <xQueueGenericCreateStatic+0x8a>
 80050f4:	2300      	movs	r3, #0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10b      	bne.n	8005112 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	61fb      	str	r3, [r7, #28]
}
 800510c:	bf00      	nop
 800510e:	bf00      	nop
 8005110:	e7fd      	b.n	800510e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005112:	2350      	movs	r3, #80	@ 0x50
 8005114:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2b50      	cmp	r3, #80	@ 0x50
 800511a:	d00b      	beq.n	8005134 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	61bb      	str	r3, [r7, #24]
}
 800512e:	bf00      	nop
 8005130:	bf00      	nop
 8005132:	e7fd      	b.n	8005130 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005134:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800513a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00d      	beq.n	800515c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005148:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800514c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	4613      	mov	r3, r2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 f805 	bl	8005166 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800515c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800515e:	4618      	mov	r0, r3
 8005160:	3730      	adds	r7, #48	@ 0x30
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
 8005172:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d103      	bne.n	8005182 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	e002      	b.n	8005188 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005194:	2101      	movs	r1, #1
 8005196:	69b8      	ldr	r0, [r7, #24]
 8005198:	f7ff fefe 	bl	8004f98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	78fa      	ldrb	r2, [r7, #3]
 80051a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80051a4:	bf00      	nop
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08e      	sub	sp, #56	@ 0x38
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80051ba:	2300      	movs	r3, #0
 80051bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80051c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10b      	bne.n	80051e0 <xQueueGenericSend+0x34>
	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051da:	bf00      	nop
 80051dc:	bf00      	nop
 80051de:	e7fd      	b.n	80051dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d103      	bne.n	80051ee <xQueueGenericSend+0x42>
 80051e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <xQueueGenericSend+0x46>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <xQueueGenericSend+0x48>
 80051f2:	2300      	movs	r3, #0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10b      	bne.n	8005210 <xQueueGenericSend+0x64>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800520a:	bf00      	nop
 800520c:	bf00      	nop
 800520e:	e7fd      	b.n	800520c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2b02      	cmp	r3, #2
 8005214:	d103      	bne.n	800521e <xQueueGenericSend+0x72>
 8005216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800521a:	2b01      	cmp	r3, #1
 800521c:	d101      	bne.n	8005222 <xQueueGenericSend+0x76>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <xQueueGenericSend+0x78>
 8005222:	2300      	movs	r3, #0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10b      	bne.n	8005240 <xQueueGenericSend+0x94>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	623b      	str	r3, [r7, #32]
}
 800523a:	bf00      	nop
 800523c:	bf00      	nop
 800523e:	e7fd      	b.n	800523c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005240:	f001 f9fc 	bl	800663c <xTaskGetSchedulerState>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d102      	bne.n	8005250 <xQueueGenericSend+0xa4>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <xQueueGenericSend+0xa8>
 8005250:	2301      	movs	r3, #1
 8005252:	e000      	b.n	8005256 <xQueueGenericSend+0xaa>
 8005254:	2300      	movs	r3, #0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10b      	bne.n	8005272 <xQueueGenericSend+0xc6>
	__asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	61fb      	str	r3, [r7, #28]
}
 800526c:	bf00      	nop
 800526e:	bf00      	nop
 8005270:	e7fd      	b.n	800526e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005272:	f001 ff51 	bl	8007118 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005278:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800527a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527e:	429a      	cmp	r2, r3
 8005280:	d302      	bcc.n	8005288 <xQueueGenericSend+0xdc>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d129      	bne.n	80052dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	68b9      	ldr	r1, [r7, #8]
 800528c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800528e:	f000 fa0f 	bl	80056b0 <prvCopyDataToQueue>
 8005292:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005298:	2b00      	cmp	r3, #0
 800529a:	d010      	beq.n	80052be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800529c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529e:	3324      	adds	r3, #36	@ 0x24
 80052a0:	4618      	mov	r0, r3
 80052a2:	f001 f805 	bl	80062b0 <xTaskRemoveFromEventList>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d013      	beq.n	80052d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80052ac:	4b3f      	ldr	r3, [pc, #252]	@ (80053ac <xQueueGenericSend+0x200>)
 80052ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	e00a      	b.n	80052d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80052be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d007      	beq.n	80052d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80052c4:	4b39      	ldr	r3, [pc, #228]	@ (80053ac <xQueueGenericSend+0x200>)
 80052c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052d4:	f001 ff52 	bl	800717c <vPortExitCritical>
				return pdPASS;
 80052d8:	2301      	movs	r3, #1
 80052da:	e063      	b.n	80053a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d103      	bne.n	80052ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052e2:	f001 ff4b 	bl	800717c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052e6:	2300      	movs	r3, #0
 80052e8:	e05c      	b.n	80053a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d106      	bne.n	80052fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052f0:	f107 0314 	add.w	r3, r7, #20
 80052f4:	4618      	mov	r0, r3
 80052f6:	f001 f83f 	bl	8006378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052fa:	2301      	movs	r3, #1
 80052fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052fe:	f001 ff3d 	bl	800717c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005302:	f000 fda7 	bl	8005e54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005306:	f001 ff07 	bl	8007118 <vPortEnterCritical>
 800530a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005310:	b25b      	sxtb	r3, r3
 8005312:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005316:	d103      	bne.n	8005320 <xQueueGenericSend+0x174>
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005322:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005326:	b25b      	sxtb	r3, r3
 8005328:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800532c:	d103      	bne.n	8005336 <xQueueGenericSend+0x18a>
 800532e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005336:	f001 ff21 	bl	800717c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800533a:	1d3a      	adds	r2, r7, #4
 800533c:	f107 0314 	add.w	r3, r7, #20
 8005340:	4611      	mov	r1, r2
 8005342:	4618      	mov	r0, r3
 8005344:	f001 f82e 	bl	80063a4 <xTaskCheckForTimeOut>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d124      	bne.n	8005398 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800534e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005350:	f000 faa6 	bl	80058a0 <prvIsQueueFull>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d018      	beq.n	800538c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800535a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535c:	3310      	adds	r3, #16
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	4611      	mov	r1, r2
 8005362:	4618      	mov	r0, r3
 8005364:	f000 ff52 	bl	800620c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005368:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800536a:	f000 fa31 	bl	80057d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800536e:	f000 fd7f 	bl	8005e70 <xTaskResumeAll>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	f47f af7c 	bne.w	8005272 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800537a:	4b0c      	ldr	r3, [pc, #48]	@ (80053ac <xQueueGenericSend+0x200>)
 800537c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	e772      	b.n	8005272 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800538c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800538e:	f000 fa1f 	bl	80057d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005392:	f000 fd6d 	bl	8005e70 <xTaskResumeAll>
 8005396:	e76c      	b.n	8005272 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005398:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800539a:	f000 fa19 	bl	80057d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800539e:	f000 fd67 	bl	8005e70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80053a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3738      	adds	r7, #56	@ 0x38
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	e000ed04 	.word	0xe000ed04

080053b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b090      	sub	sp, #64	@ 0x40
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80053c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10b      	bne.n	80053e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80053da:	bf00      	nop
 80053dc:	bf00      	nop
 80053de:	e7fd      	b.n	80053dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d103      	bne.n	80053ee <xQueueGenericSendFromISR+0x3e>
 80053e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <xQueueGenericSendFromISR+0x42>
 80053ee:	2301      	movs	r3, #1
 80053f0:	e000      	b.n	80053f4 <xQueueGenericSendFromISR+0x44>
 80053f2:	2300      	movs	r3, #0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10b      	bne.n	8005410 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800540a:	bf00      	nop
 800540c:	bf00      	nop
 800540e:	e7fd      	b.n	800540c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2b02      	cmp	r3, #2
 8005414:	d103      	bne.n	800541e <xQueueGenericSendFromISR+0x6e>
 8005416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <xQueueGenericSendFromISR+0x72>
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <xQueueGenericSendFromISR+0x74>
 8005422:	2300      	movs	r3, #0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10b      	bne.n	8005440 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	623b      	str	r3, [r7, #32]
}
 800543a:	bf00      	nop
 800543c:	bf00      	nop
 800543e:	e7fd      	b.n	800543c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005440:	f001 ff4a 	bl	80072d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005444:	f3ef 8211 	mrs	r2, BASEPRI
 8005448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	61fa      	str	r2, [r7, #28]
 800545a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800545c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800545e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005462:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005468:	429a      	cmp	r2, r3
 800546a:	d302      	bcc.n	8005472 <xQueueGenericSendFromISR+0xc2>
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d12f      	bne.n	80054d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005474:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005478:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800547c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005480:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005488:	f000 f912 	bl	80056b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800548c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005490:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005494:	d112      	bne.n	80054bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549a:	2b00      	cmp	r3, #0
 800549c:	d016      	beq.n	80054cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800549e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a0:	3324      	adds	r3, #36	@ 0x24
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 ff04 	bl	80062b0 <xTaskRemoveFromEventList>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00e      	beq.n	80054cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00b      	beq.n	80054cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	e007      	b.n	80054cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80054c0:	3301      	adds	r3, #1
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	b25a      	sxtb	r2, r3
 80054c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80054cc:	2301      	movs	r3, #1
 80054ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80054d0:	e001      	b.n	80054d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3740      	adds	r7, #64	@ 0x40
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08c      	sub	sp, #48	@ 0x30
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054f8:	2300      	movs	r3, #0
 80054fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10b      	bne.n	800551e <xQueueReceive+0x32>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	623b      	str	r3, [r7, #32]
}
 8005518:	bf00      	nop
 800551a:	bf00      	nop
 800551c:	e7fd      	b.n	800551a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d103      	bne.n	800552c <xQueueReceive+0x40>
 8005524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <xQueueReceive+0x44>
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <xQueueReceive+0x46>
 8005530:	2300      	movs	r3, #0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10b      	bne.n	800554e <xQueueReceive+0x62>
	__asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	61fb      	str	r3, [r7, #28]
}
 8005548:	bf00      	nop
 800554a:	bf00      	nop
 800554c:	e7fd      	b.n	800554a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800554e:	f001 f875 	bl	800663c <xTaskGetSchedulerState>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d102      	bne.n	800555e <xQueueReceive+0x72>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <xQueueReceive+0x76>
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <xQueueReceive+0x78>
 8005562:	2300      	movs	r3, #0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10b      	bne.n	8005580 <xQueueReceive+0x94>
	__asm volatile
 8005568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	61bb      	str	r3, [r7, #24]
}
 800557a:	bf00      	nop
 800557c:	bf00      	nop
 800557e:	e7fd      	b.n	800557c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005580:	f001 fdca 	bl	8007118 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005588:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01f      	beq.n	80055d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005594:	f000 f8f6 	bl	8005784 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559a:	1e5a      	subs	r2, r3, #1
 800559c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00f      	beq.n	80055c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055aa:	3310      	adds	r3, #16
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fe7f 	bl	80062b0 <xTaskRemoveFromEventList>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055b8:	4b3c      	ldr	r3, [pc, #240]	@ (80056ac <xQueueReceive+0x1c0>)
 80055ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055c8:	f001 fdd8 	bl	800717c <vPortExitCritical>
				return pdPASS;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e069      	b.n	80056a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d103      	bne.n	80055de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055d6:	f001 fdd1 	bl	800717c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055da:	2300      	movs	r3, #0
 80055dc:	e062      	b.n	80056a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d106      	bne.n	80055f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055e4:	f107 0310 	add.w	r3, r7, #16
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fec5 	bl	8006378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055ee:	2301      	movs	r3, #1
 80055f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055f2:	f001 fdc3 	bl	800717c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055f6:	f000 fc2d 	bl	8005e54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055fa:	f001 fd8d 	bl	8007118 <vPortEnterCritical>
 80055fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005600:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005604:	b25b      	sxtb	r3, r3
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800560a:	d103      	bne.n	8005614 <xQueueReceive+0x128>
 800560c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005616:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800561a:	b25b      	sxtb	r3, r3
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005620:	d103      	bne.n	800562a <xQueueReceive+0x13e>
 8005622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800562a:	f001 fda7 	bl	800717c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800562e:	1d3a      	adds	r2, r7, #4
 8005630:	f107 0310 	add.w	r3, r7, #16
 8005634:	4611      	mov	r1, r2
 8005636:	4618      	mov	r0, r3
 8005638:	f000 feb4 	bl	80063a4 <xTaskCheckForTimeOut>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d123      	bne.n	800568a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005644:	f000 f916 	bl	8005874 <prvIsQueueEmpty>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d017      	beq.n	800567e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800564e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005650:	3324      	adds	r3, #36	@ 0x24
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	4611      	mov	r1, r2
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fdd8 	bl	800620c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800565c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800565e:	f000 f8b7 	bl	80057d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005662:	f000 fc05 	bl	8005e70 <xTaskResumeAll>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d189      	bne.n	8005580 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800566c:	4b0f      	ldr	r3, [pc, #60]	@ (80056ac <xQueueReceive+0x1c0>)
 800566e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	e780      	b.n	8005580 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800567e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005680:	f000 f8a6 	bl	80057d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005684:	f000 fbf4 	bl	8005e70 <xTaskResumeAll>
 8005688:	e77a      	b.n	8005580 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800568a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800568c:	f000 f8a0 	bl	80057d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005690:	f000 fbee 	bl	8005e70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005694:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005696:	f000 f8ed 	bl	8005874 <prvIsQueueEmpty>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	f43f af6f 	beq.w	8005580 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3730      	adds	r7, #48	@ 0x30
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	e000ed04 	.word	0xe000ed04

080056b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056bc:	2300      	movs	r3, #0
 80056be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10d      	bne.n	80056ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d14d      	bne.n	8005772 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 ffcc 	bl	8006678 <xTaskPriorityDisinherit>
 80056e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	609a      	str	r2, [r3, #8]
 80056e8:	e043      	b.n	8005772 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d119      	bne.n	8005724 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6858      	ldr	r0, [r3, #4]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f8:	461a      	mov	r2, r3
 80056fa:	68b9      	ldr	r1, [r7, #8]
 80056fc:	f002 f8a0 	bl	8007840 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005708:	441a      	add	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	d32b      	bcc.n	8005772 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	605a      	str	r2, [r3, #4]
 8005722:	e026      	b.n	8005772 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	68d8      	ldr	r0, [r3, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572c:	461a      	mov	r2, r3
 800572e:	68b9      	ldr	r1, [r7, #8]
 8005730:	f002 f886 	bl	8007840 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573c:	425b      	negs	r3, r3
 800573e:	441a      	add	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d207      	bcs.n	8005760 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005758:	425b      	negs	r3, r3
 800575a:	441a      	add	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b02      	cmp	r3, #2
 8005764:	d105      	bne.n	8005772 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	3b01      	subs	r3, #1
 8005770:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800577a:	697b      	ldr	r3, [r7, #20]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d018      	beq.n	80057c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579e:	441a      	add	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d303      	bcc.n	80057b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68d9      	ldr	r1, [r3, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c0:	461a      	mov	r2, r3
 80057c2:	6838      	ldr	r0, [r7, #0]
 80057c4:	f002 f83c 	bl	8007840 <memcpy>
	}
}
 80057c8:	bf00      	nop
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057d8:	f001 fc9e 	bl	8007118 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057e4:	e011      	b.n	800580a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d012      	beq.n	8005814 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3324      	adds	r3, #36	@ 0x24
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fd5c 	bl	80062b0 <xTaskRemoveFromEventList>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057fe:	f000 fe35 	bl	800646c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005802:	7bfb      	ldrb	r3, [r7, #15]
 8005804:	3b01      	subs	r3, #1
 8005806:	b2db      	uxtb	r3, r3
 8005808:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800580a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800580e:	2b00      	cmp	r3, #0
 8005810:	dce9      	bgt.n	80057e6 <prvUnlockQueue+0x16>
 8005812:	e000      	b.n	8005816 <prvUnlockQueue+0x46>
					break;
 8005814:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	22ff      	movs	r2, #255	@ 0xff
 800581a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800581e:	f001 fcad 	bl	800717c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005822:	f001 fc79 	bl	8007118 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800582c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800582e:	e011      	b.n	8005854 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d012      	beq.n	800585e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3310      	adds	r3, #16
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fd37 	bl	80062b0 <xTaskRemoveFromEventList>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005848:	f000 fe10 	bl	800646c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800584c:	7bbb      	ldrb	r3, [r7, #14]
 800584e:	3b01      	subs	r3, #1
 8005850:	b2db      	uxtb	r3, r3
 8005852:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005854:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005858:	2b00      	cmp	r3, #0
 800585a:	dce9      	bgt.n	8005830 <prvUnlockQueue+0x60>
 800585c:	e000      	b.n	8005860 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800585e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	22ff      	movs	r2, #255	@ 0xff
 8005864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005868:	f001 fc88 	bl	800717c <vPortExitCritical>
}
 800586c:	bf00      	nop
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800587c:	f001 fc4c 	bl	8007118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005884:	2b00      	cmp	r3, #0
 8005886:	d102      	bne.n	800588e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005888:	2301      	movs	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	e001      	b.n	8005892 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005892:	f001 fc73 	bl	800717c <vPortExitCritical>

	return xReturn;
 8005896:	68fb      	ldr	r3, [r7, #12]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058a8:	f001 fc36 	bl	8007118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d102      	bne.n	80058be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80058b8:	2301      	movs	r3, #1
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	e001      	b.n	80058c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058c2:	f001 fc5b 	bl	800717c <vPortExitCritical>

	return xReturn;
 80058c6:	68fb      	ldr	r3, [r7, #12]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	e014      	b.n	800590a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058e0:	4a0f      	ldr	r2, [pc, #60]	@ (8005920 <vQueueAddToRegistry+0x50>)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10b      	bne.n	8005904 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058ec:	490c      	ldr	r1, [pc, #48]	@ (8005920 <vQueueAddToRegistry+0x50>)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80058f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005920 <vQueueAddToRegistry+0x50>)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	4413      	add	r3, r2
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005902:	e006      	b.n	8005912 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3301      	adds	r3, #1
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b07      	cmp	r3, #7
 800590e:	d9e7      	bls.n	80058e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005910:	bf00      	nop
 8005912:	bf00      	nop
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	2000094c 	.word	0x2000094c

08005924 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005934:	f001 fbf0 	bl	8007118 <vPortEnterCritical>
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800593e:	b25b      	sxtb	r3, r3
 8005940:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005944:	d103      	bne.n	800594e <vQueueWaitForMessageRestricted+0x2a>
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005954:	b25b      	sxtb	r3, r3
 8005956:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800595a:	d103      	bne.n	8005964 <vQueueWaitForMessageRestricted+0x40>
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005964:	f001 fc0a 	bl	800717c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596c:	2b00      	cmp	r3, #0
 800596e:	d106      	bne.n	800597e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	3324      	adds	r3, #36	@ 0x24
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	4618      	mov	r0, r3
 800597a:	f000 fc6d 	bl	8006258 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800597e:	6978      	ldr	r0, [r7, #20]
 8005980:	f7ff ff26 	bl	80057d0 <prvUnlockQueue>
	}
 8005984:	bf00      	nop
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08e      	sub	sp, #56	@ 0x38
 8005990:	af04      	add	r7, sp, #16
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800599a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10b      	bne.n	80059b8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	623b      	str	r3, [r7, #32]
}
 80059b2:	bf00      	nop
 80059b4:	bf00      	nop
 80059b6:	e7fd      	b.n	80059b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10b      	bne.n	80059d6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	61fb      	str	r3, [r7, #28]
}
 80059d0:	bf00      	nop
 80059d2:	bf00      	nop
 80059d4:	e7fd      	b.n	80059d2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059d6:	23a8      	movs	r3, #168	@ 0xa8
 80059d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	2ba8      	cmp	r3, #168	@ 0xa8
 80059de:	d00b      	beq.n	80059f8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	61bb      	str	r3, [r7, #24]
}
 80059f2:	bf00      	nop
 80059f4:	bf00      	nop
 80059f6:	e7fd      	b.n	80059f4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01e      	beq.n	8005a3e <xTaskCreateStatic+0xb2>
 8005a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01b      	beq.n	8005a3e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a08:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a0e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a18:	2300      	movs	r3, #0
 8005a1a:	9303      	str	r3, [sp, #12]
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1e:	9302      	str	r3, [sp, #8]
 8005a20:	f107 0314 	add.w	r3, r7, #20
 8005a24:	9301      	str	r3, [sp, #4]
 8005a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	68b9      	ldr	r1, [r7, #8]
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 f851 	bl	8005ad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a38:	f000 f8f6 	bl	8005c28 <prvAddNewTaskToReadyList>
 8005a3c:	e001      	b.n	8005a42 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a42:	697b      	ldr	r3, [r7, #20]
	}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3728      	adds	r7, #40	@ 0x28
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08c      	sub	sp, #48	@ 0x30
 8005a50:	af04      	add	r7, sp, #16
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	603b      	str	r3, [r7, #0]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a5c:	88fb      	ldrh	r3, [r7, #6]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4618      	mov	r0, r3
 8005a62:	f001 fc7b 	bl	800735c <pvPortMalloc>
 8005a66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00e      	beq.n	8005a8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a6e:	20a8      	movs	r0, #168	@ 0xa8
 8005a70:	f001 fc74 	bl	800735c <pvPortMalloc>
 8005a74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a82:	e005      	b.n	8005a90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a84:	6978      	ldr	r0, [r7, #20]
 8005a86:	f001 fd37 	bl	80074f8 <vPortFree>
 8005a8a:	e001      	b.n	8005a90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d017      	beq.n	8005ac6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a9e:	88fa      	ldrh	r2, [r7, #6]
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	9303      	str	r3, [sp, #12]
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	9302      	str	r3, [sp, #8]
 8005aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	68b9      	ldr	r1, [r7, #8]
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f80f 	bl	8005ad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005aba:	69f8      	ldr	r0, [r7, #28]
 8005abc:	f000 f8b4 	bl	8005c28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	61bb      	str	r3, [r7, #24]
 8005ac4:	e002      	b.n	8005acc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ac6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005aca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005acc:	69bb      	ldr	r3, [r7, #24]
	}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3720      	adds	r7, #32
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
 8005ae4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	461a      	mov	r2, r3
 8005af0:	21a5      	movs	r1, #165	@ 0xa5
 8005af2:	f001 fe21 	bl	8007738 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b00:	3b01      	subs	r3, #1
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	f023 0307 	bic.w	r3, r3, #7
 8005b0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00b      	beq.n	8005b32 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	617b      	str	r3, [r7, #20]
}
 8005b2c:	bf00      	nop
 8005b2e:	bf00      	nop
 8005b30:	e7fd      	b.n	8005b2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d01f      	beq.n	8005b78 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b38:	2300      	movs	r3, #0
 8005b3a:	61fb      	str	r3, [r7, #28]
 8005b3c:	e012      	b.n	8005b64 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	4413      	add	r3, r2
 8005b44:	7819      	ldrb	r1, [r3, #0]
 8005b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	3334      	adds	r3, #52	@ 0x34
 8005b4e:	460a      	mov	r2, r1
 8005b50:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	4413      	add	r3, r2
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d006      	beq.n	8005b6c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	3301      	adds	r3, #1
 8005b62:	61fb      	str	r3, [r7, #28]
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	2b0f      	cmp	r3, #15
 8005b68:	d9e9      	bls.n	8005b3e <prvInitialiseNewTask+0x66>
 8005b6a:	e000      	b.n	8005b6e <prvInitialiseNewTask+0x96>
			{
				break;
 8005b6c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b76:	e003      	b.n	8005b80 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b82:	2b37      	cmp	r3, #55	@ 0x37
 8005b84:	d901      	bls.n	8005b8a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b86:	2337      	movs	r3, #55	@ 0x37
 8005b88:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b94:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b98:	2200      	movs	r2, #0
 8005b9a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff f965 	bl	8004e70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba8:	3318      	adds	r3, #24
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff f960 	bl	8004e70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bb4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bc4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd8:	3354      	adds	r3, #84	@ 0x54
 8005bda:	224c      	movs	r2, #76	@ 0x4c
 8005bdc:	2100      	movs	r1, #0
 8005bde:	4618      	mov	r0, r3
 8005be0:	f001 fdaa 	bl	8007738 <memset>
 8005be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be6:	4a0d      	ldr	r2, [pc, #52]	@ (8005c1c <prvInitialiseNewTask+0x144>)
 8005be8:	659a      	str	r2, [r3, #88]	@ 0x58
 8005bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bec:	4a0c      	ldr	r2, [pc, #48]	@ (8005c20 <prvInitialiseNewTask+0x148>)
 8005bee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8005c24 <prvInitialiseNewTask+0x14c>)
 8005bf4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	68f9      	ldr	r1, [r7, #12]
 8005bfa:	69b8      	ldr	r0, [r7, #24]
 8005bfc:	f001 f95a 	bl	8006eb4 <pxPortInitialiseStack>
 8005c00:	4602      	mov	r2, r0
 8005c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c12:	bf00      	nop
 8005c14:	3720      	adds	r7, #32
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20001b98 	.word	0x20001b98
 8005c20:	20001c00 	.word	0x20001c00
 8005c24:	20001c68 	.word	0x20001c68

08005c28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c30:	f001 fa72 	bl	8007118 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c34:	4b2d      	ldr	r3, [pc, #180]	@ (8005cec <prvAddNewTaskToReadyList+0xc4>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	4a2c      	ldr	r2, [pc, #176]	@ (8005cec <prvAddNewTaskToReadyList+0xc4>)
 8005c3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c3e:	4b2c      	ldr	r3, [pc, #176]	@ (8005cf0 <prvAddNewTaskToReadyList+0xc8>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c46:	4a2a      	ldr	r2, [pc, #168]	@ (8005cf0 <prvAddNewTaskToReadyList+0xc8>)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c4c:	4b27      	ldr	r3, [pc, #156]	@ (8005cec <prvAddNewTaskToReadyList+0xc4>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d110      	bne.n	8005c76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c54:	f000 fc2e 	bl	80064b4 <prvInitialiseTaskLists>
 8005c58:	e00d      	b.n	8005c76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c5a:	4b26      	ldr	r3, [pc, #152]	@ (8005cf4 <prvAddNewTaskToReadyList+0xcc>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d109      	bne.n	8005c76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c62:	4b23      	ldr	r3, [pc, #140]	@ (8005cf0 <prvAddNewTaskToReadyList+0xc8>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d802      	bhi.n	8005c76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c70:	4a1f      	ldr	r2, [pc, #124]	@ (8005cf0 <prvAddNewTaskToReadyList+0xc8>)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c76:	4b20      	ldr	r3, [pc, #128]	@ (8005cf8 <prvAddNewTaskToReadyList+0xd0>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	4a1e      	ldr	r2, [pc, #120]	@ (8005cf8 <prvAddNewTaskToReadyList+0xd0>)
 8005c7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c80:	4b1d      	ldr	r3, [pc, #116]	@ (8005cf8 <prvAddNewTaskToReadyList+0xd0>)
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cfc <prvAddNewTaskToReadyList+0xd4>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d903      	bls.n	8005c9c <prvAddNewTaskToReadyList+0x74>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c98:	4a18      	ldr	r2, [pc, #96]	@ (8005cfc <prvAddNewTaskToReadyList+0xd4>)
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4a15      	ldr	r2, [pc, #84]	@ (8005d00 <prvAddNewTaskToReadyList+0xd8>)
 8005caa:	441a      	add	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	f7ff f8e9 	bl	8004e8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005cb8:	f001 fa60 	bl	800717c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf4 <prvAddNewTaskToReadyList+0xcc>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00e      	beq.n	8005ce2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf0 <prvAddNewTaskToReadyList+0xc8>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d207      	bcs.n	8005ce2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005d04 <prvAddNewTaskToReadyList+0xdc>)
 8005cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ce2:	bf00      	nop
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	20000e60 	.word	0x20000e60
 8005cf0:	2000098c 	.word	0x2000098c
 8005cf4:	20000e6c 	.word	0x20000e6c
 8005cf8:	20000e7c 	.word	0x20000e7c
 8005cfc:	20000e68 	.word	0x20000e68
 8005d00:	20000990 	.word	0x20000990
 8005d04:	e000ed04 	.word	0xe000ed04

08005d08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d10:	2300      	movs	r3, #0
 8005d12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d018      	beq.n	8005d4c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d1a:	4b14      	ldr	r3, [pc, #80]	@ (8005d6c <vTaskDelay+0x64>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00b      	beq.n	8005d3a <vTaskDelay+0x32>
	__asm volatile
 8005d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	60bb      	str	r3, [r7, #8]
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop
 8005d38:	e7fd      	b.n	8005d36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d3a:	f000 f88b 	bl	8005e54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d3e:	2100      	movs	r1, #0
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fd09 	bl	8006758 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d46:	f000 f893 	bl	8005e70 <xTaskResumeAll>
 8005d4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d107      	bne.n	8005d62 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005d52:	4b07      	ldr	r3, [pc, #28]	@ (8005d70 <vTaskDelay+0x68>)
 8005d54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d62:	bf00      	nop
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20000e88 	.word	0x20000e88
 8005d70:	e000ed04 	.word	0xe000ed04

08005d74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08a      	sub	sp, #40	@ 0x28
 8005d78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d82:	463a      	mov	r2, r7
 8005d84:	1d39      	adds	r1, r7, #4
 8005d86:	f107 0308 	add.w	r3, r7, #8
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7ff f81c 	bl	8004dc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	9202      	str	r2, [sp, #8]
 8005d98:	9301      	str	r3, [sp, #4]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	2300      	movs	r3, #0
 8005da0:	460a      	mov	r2, r1
 8005da2:	4924      	ldr	r1, [pc, #144]	@ (8005e34 <vTaskStartScheduler+0xc0>)
 8005da4:	4824      	ldr	r0, [pc, #144]	@ (8005e38 <vTaskStartScheduler+0xc4>)
 8005da6:	f7ff fdf1 	bl	800598c <xTaskCreateStatic>
 8005daa:	4603      	mov	r3, r0
 8005dac:	4a23      	ldr	r2, [pc, #140]	@ (8005e3c <vTaskStartScheduler+0xc8>)
 8005dae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005db0:	4b22      	ldr	r3, [pc, #136]	@ (8005e3c <vTaskStartScheduler+0xc8>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d002      	beq.n	8005dbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005db8:	2301      	movs	r3, #1
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	e001      	b.n	8005dc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d102      	bne.n	8005dce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005dc8:	f000 fd1a 	bl	8006800 <xTimerCreateTimerTask>
 8005dcc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d11b      	bne.n	8005e0c <vTaskStartScheduler+0x98>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	613b      	str	r3, [r7, #16]
}
 8005de6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005de8:	4b15      	ldr	r3, [pc, #84]	@ (8005e40 <vTaskStartScheduler+0xcc>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3354      	adds	r3, #84	@ 0x54
 8005dee:	4a15      	ldr	r2, [pc, #84]	@ (8005e44 <vTaskStartScheduler+0xd0>)
 8005df0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005df2:	4b15      	ldr	r3, [pc, #84]	@ (8005e48 <vTaskStartScheduler+0xd4>)
 8005df4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005df8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005dfa:	4b14      	ldr	r3, [pc, #80]	@ (8005e4c <vTaskStartScheduler+0xd8>)
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e00:	4b13      	ldr	r3, [pc, #76]	@ (8005e50 <vTaskStartScheduler+0xdc>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e06:	f001 f8e3 	bl	8006fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e0a:	e00f      	b.n	8005e2c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e12:	d10b      	bne.n	8005e2c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	60fb      	str	r3, [r7, #12]
}
 8005e26:	bf00      	nop
 8005e28:	bf00      	nop
 8005e2a:	e7fd      	b.n	8005e28 <vTaskStartScheduler+0xb4>
}
 8005e2c:	bf00      	nop
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	0800794c 	.word	0x0800794c
 8005e38:	08006485 	.word	0x08006485
 8005e3c:	20000e84 	.word	0x20000e84
 8005e40:	2000098c 	.word	0x2000098c
 8005e44:	20000010 	.word	0x20000010
 8005e48:	20000e80 	.word	0x20000e80
 8005e4c:	20000e6c 	.word	0x20000e6c
 8005e50:	20000e64 	.word	0x20000e64

08005e54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e54:	b480      	push	{r7}
 8005e56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e58:	4b04      	ldr	r3, [pc, #16]	@ (8005e6c <vTaskSuspendAll+0x18>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	4a03      	ldr	r2, [pc, #12]	@ (8005e6c <vTaskSuspendAll+0x18>)
 8005e60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e62:	bf00      	nop
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	20000e88 	.word	0x20000e88

08005e70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e7e:	4b42      	ldr	r3, [pc, #264]	@ (8005f88 <xTaskResumeAll+0x118>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10b      	bne.n	8005e9e <xTaskResumeAll+0x2e>
	__asm volatile
 8005e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	603b      	str	r3, [r7, #0]
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	e7fd      	b.n	8005e9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e9e:	f001 f93b 	bl	8007118 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ea2:	4b39      	ldr	r3, [pc, #228]	@ (8005f88 <xTaskResumeAll+0x118>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	4a37      	ldr	r2, [pc, #220]	@ (8005f88 <xTaskResumeAll+0x118>)
 8005eaa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eac:	4b36      	ldr	r3, [pc, #216]	@ (8005f88 <xTaskResumeAll+0x118>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d162      	bne.n	8005f7a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005eb4:	4b35      	ldr	r3, [pc, #212]	@ (8005f8c <xTaskResumeAll+0x11c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d05e      	beq.n	8005f7a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ebc:	e02f      	b.n	8005f1e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ebe:	4b34      	ldr	r3, [pc, #208]	@ (8005f90 <xTaskResumeAll+0x120>)
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	3318      	adds	r3, #24
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff f83a 	bl	8004f44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff f835 	bl	8004f44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ede:	4b2d      	ldr	r3, [pc, #180]	@ (8005f94 <xTaskResumeAll+0x124>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d903      	bls.n	8005eee <xTaskResumeAll+0x7e>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eea:	4a2a      	ldr	r2, [pc, #168]	@ (8005f94 <xTaskResumeAll+0x124>)
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4a27      	ldr	r2, [pc, #156]	@ (8005f98 <xTaskResumeAll+0x128>)
 8005efc:	441a      	add	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3304      	adds	r3, #4
 8005f02:	4619      	mov	r1, r3
 8005f04:	4610      	mov	r0, r2
 8005f06:	f7fe ffc0 	bl	8004e8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f0e:	4b23      	ldr	r3, [pc, #140]	@ (8005f9c <xTaskResumeAll+0x12c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d302      	bcc.n	8005f1e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005f18:	4b21      	ldr	r3, [pc, #132]	@ (8005fa0 <xTaskResumeAll+0x130>)
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8005f90 <xTaskResumeAll+0x120>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1cb      	bne.n	8005ebe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f2c:	f000 fb66 	bl	80065fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f30:	4b1c      	ldr	r3, [pc, #112]	@ (8005fa4 <xTaskResumeAll+0x134>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d010      	beq.n	8005f5e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f3c:	f000 f846 	bl	8005fcc <xTaskIncrementTick>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005f46:	4b16      	ldr	r3, [pc, #88]	@ (8005fa0 <xTaskResumeAll+0x130>)
 8005f48:	2201      	movs	r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1f1      	bne.n	8005f3c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005f58:	4b12      	ldr	r3, [pc, #72]	@ (8005fa4 <xTaskResumeAll+0x134>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f5e:	4b10      	ldr	r3, [pc, #64]	@ (8005fa0 <xTaskResumeAll+0x130>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d009      	beq.n	8005f7a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f66:	2301      	movs	r3, #1
 8005f68:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa8 <xTaskResumeAll+0x138>)
 8005f6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f7a:	f001 f8ff 	bl	800717c <vPortExitCritical>

	return xAlreadyYielded;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	20000e88 	.word	0x20000e88
 8005f8c:	20000e60 	.word	0x20000e60
 8005f90:	20000e20 	.word	0x20000e20
 8005f94:	20000e68 	.word	0x20000e68
 8005f98:	20000990 	.word	0x20000990
 8005f9c:	2000098c 	.word	0x2000098c
 8005fa0:	20000e74 	.word	0x20000e74
 8005fa4:	20000e70 	.word	0x20000e70
 8005fa8:	e000ed04 	.word	0xe000ed04

08005fac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005fb2:	4b05      	ldr	r3, [pc, #20]	@ (8005fc8 <xTaskGetTickCount+0x1c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005fb8:	687b      	ldr	r3, [r7, #4]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	20000e64 	.word	0x20000e64

08005fcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fd6:	4b4f      	ldr	r3, [pc, #316]	@ (8006114 <xTaskIncrementTick+0x148>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f040 8090 	bne.w	8006100 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fe0:	4b4d      	ldr	r3, [pc, #308]	@ (8006118 <xTaskIncrementTick+0x14c>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fe8:	4a4b      	ldr	r2, [pc, #300]	@ (8006118 <xTaskIncrementTick+0x14c>)
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d121      	bne.n	8006038 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ff4:	4b49      	ldr	r3, [pc, #292]	@ (800611c <xTaskIncrementTick+0x150>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00b      	beq.n	8006016 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	603b      	str	r3, [r7, #0]
}
 8006010:	bf00      	nop
 8006012:	bf00      	nop
 8006014:	e7fd      	b.n	8006012 <xTaskIncrementTick+0x46>
 8006016:	4b41      	ldr	r3, [pc, #260]	@ (800611c <xTaskIncrementTick+0x150>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	4b40      	ldr	r3, [pc, #256]	@ (8006120 <xTaskIncrementTick+0x154>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a3e      	ldr	r2, [pc, #248]	@ (800611c <xTaskIncrementTick+0x150>)
 8006022:	6013      	str	r3, [r2, #0]
 8006024:	4a3e      	ldr	r2, [pc, #248]	@ (8006120 <xTaskIncrementTick+0x154>)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	4b3e      	ldr	r3, [pc, #248]	@ (8006124 <xTaskIncrementTick+0x158>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3301      	adds	r3, #1
 8006030:	4a3c      	ldr	r2, [pc, #240]	@ (8006124 <xTaskIncrementTick+0x158>)
 8006032:	6013      	str	r3, [r2, #0]
 8006034:	f000 fae2 	bl	80065fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006038:	4b3b      	ldr	r3, [pc, #236]	@ (8006128 <xTaskIncrementTick+0x15c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	429a      	cmp	r2, r3
 8006040:	d349      	bcc.n	80060d6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006042:	4b36      	ldr	r3, [pc, #216]	@ (800611c <xTaskIncrementTick+0x150>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d104      	bne.n	8006056 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800604c:	4b36      	ldr	r3, [pc, #216]	@ (8006128 <xTaskIncrementTick+0x15c>)
 800604e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006052:	601a      	str	r2, [r3, #0]
					break;
 8006054:	e03f      	b.n	80060d6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006056:	4b31      	ldr	r3, [pc, #196]	@ (800611c <xTaskIncrementTick+0x150>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	429a      	cmp	r2, r3
 800606c:	d203      	bcs.n	8006076 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800606e:	4a2e      	ldr	r2, [pc, #184]	@ (8006128 <xTaskIncrementTick+0x15c>)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006074:	e02f      	b.n	80060d6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	3304      	adds	r3, #4
 800607a:	4618      	mov	r0, r3
 800607c:	f7fe ff62 	bl	8004f44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006084:	2b00      	cmp	r3, #0
 8006086:	d004      	beq.n	8006092 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	3318      	adds	r3, #24
 800608c:	4618      	mov	r0, r3
 800608e:	f7fe ff59 	bl	8004f44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006096:	4b25      	ldr	r3, [pc, #148]	@ (800612c <xTaskIncrementTick+0x160>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	429a      	cmp	r2, r3
 800609c:	d903      	bls.n	80060a6 <xTaskIncrementTick+0xda>
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a2:	4a22      	ldr	r2, [pc, #136]	@ (800612c <xTaskIncrementTick+0x160>)
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006130 <xTaskIncrementTick+0x164>)
 80060b4:	441a      	add	r2, r3
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	3304      	adds	r3, #4
 80060ba:	4619      	mov	r1, r3
 80060bc:	4610      	mov	r0, r2
 80060be:	f7fe fee4 	bl	8004e8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006134 <xTaskIncrementTick+0x168>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d3b8      	bcc.n	8006042 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80060d0:	2301      	movs	r3, #1
 80060d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060d4:	e7b5      	b.n	8006042 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060d6:	4b17      	ldr	r3, [pc, #92]	@ (8006134 <xTaskIncrementTick+0x168>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060dc:	4914      	ldr	r1, [pc, #80]	@ (8006130 <xTaskIncrementTick+0x164>)
 80060de:	4613      	mov	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	440b      	add	r3, r1
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d901      	bls.n	80060f2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80060ee:	2301      	movs	r3, #1
 80060f0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80060f2:	4b11      	ldr	r3, [pc, #68]	@ (8006138 <xTaskIncrementTick+0x16c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d007      	beq.n	800610a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80060fa:	2301      	movs	r3, #1
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	e004      	b.n	800610a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006100:	4b0e      	ldr	r3, [pc, #56]	@ (800613c <xTaskIncrementTick+0x170>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3301      	adds	r3, #1
 8006106:	4a0d      	ldr	r2, [pc, #52]	@ (800613c <xTaskIncrementTick+0x170>)
 8006108:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800610a:	697b      	ldr	r3, [r7, #20]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3718      	adds	r7, #24
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	20000e88 	.word	0x20000e88
 8006118:	20000e64 	.word	0x20000e64
 800611c:	20000e18 	.word	0x20000e18
 8006120:	20000e1c 	.word	0x20000e1c
 8006124:	20000e78 	.word	0x20000e78
 8006128:	20000e80 	.word	0x20000e80
 800612c:	20000e68 	.word	0x20000e68
 8006130:	20000990 	.word	0x20000990
 8006134:	2000098c 	.word	0x2000098c
 8006138:	20000e74 	.word	0x20000e74
 800613c:	20000e70 	.word	0x20000e70

08006140 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006146:	4b2b      	ldr	r3, [pc, #172]	@ (80061f4 <vTaskSwitchContext+0xb4>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800614e:	4b2a      	ldr	r3, [pc, #168]	@ (80061f8 <vTaskSwitchContext+0xb8>)
 8006150:	2201      	movs	r2, #1
 8006152:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006154:	e047      	b.n	80061e6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006156:	4b28      	ldr	r3, [pc, #160]	@ (80061f8 <vTaskSwitchContext+0xb8>)
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800615c:	4b27      	ldr	r3, [pc, #156]	@ (80061fc <vTaskSwitchContext+0xbc>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	e011      	b.n	8006188 <vTaskSwitchContext+0x48>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10b      	bne.n	8006182 <vTaskSwitchContext+0x42>
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	607b      	str	r3, [r7, #4]
}
 800617c:	bf00      	nop
 800617e:	bf00      	nop
 8006180:	e7fd      	b.n	800617e <vTaskSwitchContext+0x3e>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	3b01      	subs	r3, #1
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	491d      	ldr	r1, [pc, #116]	@ (8006200 <vTaskSwitchContext+0xc0>)
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	4613      	mov	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	440b      	add	r3, r1
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0e3      	beq.n	8006164 <vTaskSwitchContext+0x24>
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4a16      	ldr	r2, [pc, #88]	@ (8006200 <vTaskSwitchContext+0xc0>)
 80061a8:	4413      	add	r3, r2
 80061aa:	60bb      	str	r3, [r7, #8]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	605a      	str	r2, [r3, #4]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	3308      	adds	r3, #8
 80061be:	429a      	cmp	r2, r3
 80061c0:	d104      	bne.n	80061cc <vTaskSwitchContext+0x8c>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	605a      	str	r2, [r3, #4]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	4a0c      	ldr	r2, [pc, #48]	@ (8006204 <vTaskSwitchContext+0xc4>)
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	4a09      	ldr	r2, [pc, #36]	@ (80061fc <vTaskSwitchContext+0xbc>)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061dc:	4b09      	ldr	r3, [pc, #36]	@ (8006204 <vTaskSwitchContext+0xc4>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3354      	adds	r3, #84	@ 0x54
 80061e2:	4a09      	ldr	r2, [pc, #36]	@ (8006208 <vTaskSwitchContext+0xc8>)
 80061e4:	6013      	str	r3, [r2, #0]
}
 80061e6:	bf00      	nop
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	20000e88 	.word	0x20000e88
 80061f8:	20000e74 	.word	0x20000e74
 80061fc:	20000e68 	.word	0x20000e68
 8006200:	20000990 	.word	0x20000990
 8006204:	2000098c 	.word	0x2000098c
 8006208:	20000010 	.word	0x20000010

0800620c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10b      	bne.n	8006234 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	60fb      	str	r3, [r7, #12]
}
 800622e:	bf00      	nop
 8006230:	bf00      	nop
 8006232:	e7fd      	b.n	8006230 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006234:	4b07      	ldr	r3, [pc, #28]	@ (8006254 <vTaskPlaceOnEventList+0x48>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3318      	adds	r3, #24
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7fe fe48 	bl	8004ed2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006242:	2101      	movs	r1, #1
 8006244:	6838      	ldr	r0, [r7, #0]
 8006246:	f000 fa87 	bl	8006758 <prvAddCurrentTaskToDelayedList>
}
 800624a:	bf00      	nop
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	2000098c 	.word	0x2000098c

08006258 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10b      	bne.n	8006282 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	617b      	str	r3, [r7, #20]
}
 800627c:	bf00      	nop
 800627e:	bf00      	nop
 8006280:	e7fd      	b.n	800627e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006282:	4b0a      	ldr	r3, [pc, #40]	@ (80062ac <vTaskPlaceOnEventListRestricted+0x54>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3318      	adds	r3, #24
 8006288:	4619      	mov	r1, r3
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f7fe fdfd 	bl	8004e8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006296:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800629a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	68b8      	ldr	r0, [r7, #8]
 80062a0:	f000 fa5a 	bl	8006758 <prvAddCurrentTaskToDelayedList>
	}
 80062a4:	bf00      	nop
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	2000098c 	.word	0x2000098c

080062b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10b      	bne.n	80062de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	60fb      	str	r3, [r7, #12]
}
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	e7fd      	b.n	80062da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	3318      	adds	r3, #24
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fe fe2e 	bl	8004f44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006360 <xTaskRemoveFromEventList+0xb0>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d11d      	bne.n	800632c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	3304      	adds	r3, #4
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fe fe25 	bl	8004f44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062fe:	4b19      	ldr	r3, [pc, #100]	@ (8006364 <xTaskRemoveFromEventList+0xb4>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	429a      	cmp	r2, r3
 8006304:	d903      	bls.n	800630e <xTaskRemoveFromEventList+0x5e>
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630a:	4a16      	ldr	r2, [pc, #88]	@ (8006364 <xTaskRemoveFromEventList+0xb4>)
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006312:	4613      	mov	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4a13      	ldr	r2, [pc, #76]	@ (8006368 <xTaskRemoveFromEventList+0xb8>)
 800631c:	441a      	add	r2, r3
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	3304      	adds	r3, #4
 8006322:	4619      	mov	r1, r3
 8006324:	4610      	mov	r0, r2
 8006326:	f7fe fdb0 	bl	8004e8a <vListInsertEnd>
 800632a:	e005      	b.n	8006338 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	3318      	adds	r3, #24
 8006330:	4619      	mov	r1, r3
 8006332:	480e      	ldr	r0, [pc, #56]	@ (800636c <xTaskRemoveFromEventList+0xbc>)
 8006334:	f7fe fda9 	bl	8004e8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800633c:	4b0c      	ldr	r3, [pc, #48]	@ (8006370 <xTaskRemoveFromEventList+0xc0>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006342:	429a      	cmp	r2, r3
 8006344:	d905      	bls.n	8006352 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006346:	2301      	movs	r3, #1
 8006348:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800634a:	4b0a      	ldr	r3, [pc, #40]	@ (8006374 <xTaskRemoveFromEventList+0xc4>)
 800634c:	2201      	movs	r2, #1
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	e001      	b.n	8006356 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006352:	2300      	movs	r3, #0
 8006354:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006356:	697b      	ldr	r3, [r7, #20]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	20000e88 	.word	0x20000e88
 8006364:	20000e68 	.word	0x20000e68
 8006368:	20000990 	.word	0x20000990
 800636c:	20000e20 	.word	0x20000e20
 8006370:	2000098c 	.word	0x2000098c
 8006374:	20000e74 	.word	0x20000e74

08006378 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006380:	4b06      	ldr	r3, [pc, #24]	@ (800639c <vTaskInternalSetTimeOutState+0x24>)
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006388:	4b05      	ldr	r3, [pc, #20]	@ (80063a0 <vTaskInternalSetTimeOutState+0x28>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	605a      	str	r2, [r3, #4]
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	20000e78 	.word	0x20000e78
 80063a0:	20000e64 	.word	0x20000e64

080063a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b088      	sub	sp, #32
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10b      	bne.n	80063cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	613b      	str	r3, [r7, #16]
}
 80063c6:	bf00      	nop
 80063c8:	bf00      	nop
 80063ca:	e7fd      	b.n	80063c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10b      	bne.n	80063ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80063d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	60fb      	str	r3, [r7, #12]
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop
 80063e8:	e7fd      	b.n	80063e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80063ea:	f000 fe95 	bl	8007118 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80063ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006464 <xTaskCheckForTimeOut+0xc0>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006406:	d102      	bne.n	800640e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006408:	2300      	movs	r3, #0
 800640a:	61fb      	str	r3, [r7, #28]
 800640c:	e023      	b.n	8006456 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	4b15      	ldr	r3, [pc, #84]	@ (8006468 <xTaskCheckForTimeOut+0xc4>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d007      	beq.n	800642a <xTaskCheckForTimeOut+0x86>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	429a      	cmp	r2, r3
 8006422:	d302      	bcc.n	800642a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006424:	2301      	movs	r3, #1
 8006426:	61fb      	str	r3, [r7, #28]
 8006428:	e015      	b.n	8006456 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	429a      	cmp	r2, r3
 8006432:	d20b      	bcs.n	800644c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	1ad2      	subs	r2, r2, r3
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7ff ff99 	bl	8006378 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006446:	2300      	movs	r3, #0
 8006448:	61fb      	str	r3, [r7, #28]
 800644a:	e004      	b.n	8006456 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2200      	movs	r2, #0
 8006450:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006452:	2301      	movs	r3, #1
 8006454:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006456:	f000 fe91 	bl	800717c <vPortExitCritical>

	return xReturn;
 800645a:	69fb      	ldr	r3, [r7, #28]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3720      	adds	r7, #32
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	20000e64 	.word	0x20000e64
 8006468:	20000e78 	.word	0x20000e78

0800646c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800646c:	b480      	push	{r7}
 800646e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006470:	4b03      	ldr	r3, [pc, #12]	@ (8006480 <vTaskMissedYield+0x14>)
 8006472:	2201      	movs	r2, #1
 8006474:	601a      	str	r2, [r3, #0]
}
 8006476:	bf00      	nop
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	20000e74 	.word	0x20000e74

08006484 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800648c:	f000 f852 	bl	8006534 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006490:	4b06      	ldr	r3, [pc, #24]	@ (80064ac <prvIdleTask+0x28>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d9f9      	bls.n	800648c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006498:	4b05      	ldr	r3, [pc, #20]	@ (80064b0 <prvIdleTask+0x2c>)
 800649a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80064a8:	e7f0      	b.n	800648c <prvIdleTask+0x8>
 80064aa:	bf00      	nop
 80064ac:	20000990 	.word	0x20000990
 80064b0:	e000ed04 	.word	0xe000ed04

080064b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064ba:	2300      	movs	r3, #0
 80064bc:	607b      	str	r3, [r7, #4]
 80064be:	e00c      	b.n	80064da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	4613      	mov	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4a12      	ldr	r2, [pc, #72]	@ (8006514 <prvInitialiseTaskLists+0x60>)
 80064cc:	4413      	add	r3, r2
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fe fcae 	bl	8004e30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3301      	adds	r3, #1
 80064d8:	607b      	str	r3, [r7, #4]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b37      	cmp	r3, #55	@ 0x37
 80064de:	d9ef      	bls.n	80064c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064e0:	480d      	ldr	r0, [pc, #52]	@ (8006518 <prvInitialiseTaskLists+0x64>)
 80064e2:	f7fe fca5 	bl	8004e30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064e6:	480d      	ldr	r0, [pc, #52]	@ (800651c <prvInitialiseTaskLists+0x68>)
 80064e8:	f7fe fca2 	bl	8004e30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064ec:	480c      	ldr	r0, [pc, #48]	@ (8006520 <prvInitialiseTaskLists+0x6c>)
 80064ee:	f7fe fc9f 	bl	8004e30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064f2:	480c      	ldr	r0, [pc, #48]	@ (8006524 <prvInitialiseTaskLists+0x70>)
 80064f4:	f7fe fc9c 	bl	8004e30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064f8:	480b      	ldr	r0, [pc, #44]	@ (8006528 <prvInitialiseTaskLists+0x74>)
 80064fa:	f7fe fc99 	bl	8004e30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064fe:	4b0b      	ldr	r3, [pc, #44]	@ (800652c <prvInitialiseTaskLists+0x78>)
 8006500:	4a05      	ldr	r2, [pc, #20]	@ (8006518 <prvInitialiseTaskLists+0x64>)
 8006502:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006504:	4b0a      	ldr	r3, [pc, #40]	@ (8006530 <prvInitialiseTaskLists+0x7c>)
 8006506:	4a05      	ldr	r2, [pc, #20]	@ (800651c <prvInitialiseTaskLists+0x68>)
 8006508:	601a      	str	r2, [r3, #0]
}
 800650a:	bf00      	nop
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20000990 	.word	0x20000990
 8006518:	20000df0 	.word	0x20000df0
 800651c:	20000e04 	.word	0x20000e04
 8006520:	20000e20 	.word	0x20000e20
 8006524:	20000e34 	.word	0x20000e34
 8006528:	20000e4c 	.word	0x20000e4c
 800652c:	20000e18 	.word	0x20000e18
 8006530:	20000e1c 	.word	0x20000e1c

08006534 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800653a:	e019      	b.n	8006570 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800653c:	f000 fdec 	bl	8007118 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006540:	4b10      	ldr	r3, [pc, #64]	@ (8006584 <prvCheckTasksWaitingTermination+0x50>)
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3304      	adds	r3, #4
 800654c:	4618      	mov	r0, r3
 800654e:	f7fe fcf9 	bl	8004f44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006552:	4b0d      	ldr	r3, [pc, #52]	@ (8006588 <prvCheckTasksWaitingTermination+0x54>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3b01      	subs	r3, #1
 8006558:	4a0b      	ldr	r2, [pc, #44]	@ (8006588 <prvCheckTasksWaitingTermination+0x54>)
 800655a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800655c:	4b0b      	ldr	r3, [pc, #44]	@ (800658c <prvCheckTasksWaitingTermination+0x58>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3b01      	subs	r3, #1
 8006562:	4a0a      	ldr	r2, [pc, #40]	@ (800658c <prvCheckTasksWaitingTermination+0x58>)
 8006564:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006566:	f000 fe09 	bl	800717c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f810 	bl	8006590 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006570:	4b06      	ldr	r3, [pc, #24]	@ (800658c <prvCheckTasksWaitingTermination+0x58>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1e1      	bne.n	800653c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006578:	bf00      	nop
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	20000e34 	.word	0x20000e34
 8006588:	20000e60 	.word	0x20000e60
 800658c:	20000e48 	.word	0x20000e48

08006590 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	3354      	adds	r3, #84	@ 0x54
 800659c:	4618      	mov	r0, r3
 800659e:	f001 f8d3 	bl	8007748 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d108      	bne.n	80065be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 ffa1 	bl	80074f8 <vPortFree>
				vPortFree( pxTCB );
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 ff9e 	bl	80074f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065bc:	e019      	b.n	80065f2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d103      	bne.n	80065d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 ff95 	bl	80074f8 <vPortFree>
	}
 80065ce:	e010      	b.n	80065f2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d00b      	beq.n	80065f2 <prvDeleteTCB+0x62>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	60fb      	str	r3, [r7, #12]
}
 80065ec:	bf00      	nop
 80065ee:	bf00      	nop
 80065f0:	e7fd      	b.n	80065ee <prvDeleteTCB+0x5e>
	}
 80065f2:	bf00      	nop
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006602:	4b0c      	ldr	r3, [pc, #48]	@ (8006634 <prvResetNextTaskUnblockTime+0x38>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d104      	bne.n	8006616 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800660c:	4b0a      	ldr	r3, [pc, #40]	@ (8006638 <prvResetNextTaskUnblockTime+0x3c>)
 800660e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006612:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006614:	e008      	b.n	8006628 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006616:	4b07      	ldr	r3, [pc, #28]	@ (8006634 <prvResetNextTaskUnblockTime+0x38>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	4a04      	ldr	r2, [pc, #16]	@ (8006638 <prvResetNextTaskUnblockTime+0x3c>)
 8006626:	6013      	str	r3, [r2, #0]
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	20000e18 	.word	0x20000e18
 8006638:	20000e80 	.word	0x20000e80

0800663c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006642:	4b0b      	ldr	r3, [pc, #44]	@ (8006670 <xTaskGetSchedulerState+0x34>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d102      	bne.n	8006650 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800664a:	2301      	movs	r3, #1
 800664c:	607b      	str	r3, [r7, #4]
 800664e:	e008      	b.n	8006662 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006650:	4b08      	ldr	r3, [pc, #32]	@ (8006674 <xTaskGetSchedulerState+0x38>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d102      	bne.n	800665e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006658:	2302      	movs	r3, #2
 800665a:	607b      	str	r3, [r7, #4]
 800665c:	e001      	b.n	8006662 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800665e:	2300      	movs	r3, #0
 8006660:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006662:	687b      	ldr	r3, [r7, #4]
	}
 8006664:	4618      	mov	r0, r3
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	20000e6c 	.word	0x20000e6c
 8006674:	20000e88 	.word	0x20000e88

08006678 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006684:	2300      	movs	r3, #0
 8006686:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d058      	beq.n	8006740 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800668e:	4b2f      	ldr	r3, [pc, #188]	@ (800674c <xTaskPriorityDisinherit+0xd4>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	429a      	cmp	r2, r3
 8006696:	d00b      	beq.n	80066b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	60fb      	str	r3, [r7, #12]
}
 80066aa:	bf00      	nop
 80066ac:	bf00      	nop
 80066ae:	e7fd      	b.n	80066ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10b      	bne.n	80066d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	60bb      	str	r3, [r7, #8]
}
 80066ca:	bf00      	nop
 80066cc:	bf00      	nop
 80066ce:	e7fd      	b.n	80066cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066d4:	1e5a      	subs	r2, r3, #1
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d02c      	beq.n	8006740 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d128      	bne.n	8006740 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	3304      	adds	r3, #4
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fe fc26 	bl	8004f44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006704:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006710:	4b0f      	ldr	r3, [pc, #60]	@ (8006750 <xTaskPriorityDisinherit+0xd8>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d903      	bls.n	8006720 <xTaskPriorityDisinherit+0xa8>
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800671c:	4a0c      	ldr	r2, [pc, #48]	@ (8006750 <xTaskPriorityDisinherit+0xd8>)
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006724:	4613      	mov	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4a09      	ldr	r2, [pc, #36]	@ (8006754 <xTaskPriorityDisinherit+0xdc>)
 800672e:	441a      	add	r2, r3
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	3304      	adds	r3, #4
 8006734:	4619      	mov	r1, r3
 8006736:	4610      	mov	r0, r2
 8006738:	f7fe fba7 	bl	8004e8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800673c:	2301      	movs	r3, #1
 800673e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006740:	697b      	ldr	r3, [r7, #20]
	}
 8006742:	4618      	mov	r0, r3
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	2000098c 	.word	0x2000098c
 8006750:	20000e68 	.word	0x20000e68
 8006754:	20000990 	.word	0x20000990

08006758 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006762:	4b21      	ldr	r3, [pc, #132]	@ (80067e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006768:	4b20      	ldr	r3, [pc, #128]	@ (80067ec <prvAddCurrentTaskToDelayedList+0x94>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3304      	adds	r3, #4
 800676e:	4618      	mov	r0, r3
 8006770:	f7fe fbe8 	bl	8004f44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800677a:	d10a      	bne.n	8006792 <prvAddCurrentTaskToDelayedList+0x3a>
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d007      	beq.n	8006792 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006782:	4b1a      	ldr	r3, [pc, #104]	@ (80067ec <prvAddCurrentTaskToDelayedList+0x94>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3304      	adds	r3, #4
 8006788:	4619      	mov	r1, r3
 800678a:	4819      	ldr	r0, [pc, #100]	@ (80067f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800678c:	f7fe fb7d 	bl	8004e8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006790:	e026      	b.n	80067e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4413      	add	r3, r2
 8006798:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800679a:	4b14      	ldr	r3, [pc, #80]	@ (80067ec <prvAddCurrentTaskToDelayedList+0x94>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d209      	bcs.n	80067be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067aa:	4b12      	ldr	r3, [pc, #72]	@ (80067f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	4b0f      	ldr	r3, [pc, #60]	@ (80067ec <prvAddCurrentTaskToDelayedList+0x94>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3304      	adds	r3, #4
 80067b4:	4619      	mov	r1, r3
 80067b6:	4610      	mov	r0, r2
 80067b8:	f7fe fb8b 	bl	8004ed2 <vListInsert>
}
 80067bc:	e010      	b.n	80067e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067be:	4b0e      	ldr	r3, [pc, #56]	@ (80067f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4b0a      	ldr	r3, [pc, #40]	@ (80067ec <prvAddCurrentTaskToDelayedList+0x94>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3304      	adds	r3, #4
 80067c8:	4619      	mov	r1, r3
 80067ca:	4610      	mov	r0, r2
 80067cc:	f7fe fb81 	bl	8004ed2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067d0:	4b0a      	ldr	r3, [pc, #40]	@ (80067fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d202      	bcs.n	80067e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067da:	4a08      	ldr	r2, [pc, #32]	@ (80067fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	6013      	str	r3, [r2, #0]
}
 80067e0:	bf00      	nop
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	20000e64 	.word	0x20000e64
 80067ec:	2000098c 	.word	0x2000098c
 80067f0:	20000e4c 	.word	0x20000e4c
 80067f4:	20000e1c 	.word	0x20000e1c
 80067f8:	20000e18 	.word	0x20000e18
 80067fc:	20000e80 	.word	0x20000e80

08006800 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08a      	sub	sp, #40	@ 0x28
 8006804:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006806:	2300      	movs	r3, #0
 8006808:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800680a:	f000 fb13 	bl	8006e34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800680e:	4b1d      	ldr	r3, [pc, #116]	@ (8006884 <xTimerCreateTimerTask+0x84>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d021      	beq.n	800685a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800681a:	2300      	movs	r3, #0
 800681c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800681e:	1d3a      	adds	r2, r7, #4
 8006820:	f107 0108 	add.w	r1, r7, #8
 8006824:	f107 030c 	add.w	r3, r7, #12
 8006828:	4618      	mov	r0, r3
 800682a:	f7fe fae7 	bl	8004dfc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800682e:	6879      	ldr	r1, [r7, #4]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	9202      	str	r2, [sp, #8]
 8006836:	9301      	str	r3, [sp, #4]
 8006838:	2302      	movs	r3, #2
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	2300      	movs	r3, #0
 800683e:	460a      	mov	r2, r1
 8006840:	4911      	ldr	r1, [pc, #68]	@ (8006888 <xTimerCreateTimerTask+0x88>)
 8006842:	4812      	ldr	r0, [pc, #72]	@ (800688c <xTimerCreateTimerTask+0x8c>)
 8006844:	f7ff f8a2 	bl	800598c <xTaskCreateStatic>
 8006848:	4603      	mov	r3, r0
 800684a:	4a11      	ldr	r2, [pc, #68]	@ (8006890 <xTimerCreateTimerTask+0x90>)
 800684c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800684e:	4b10      	ldr	r3, [pc, #64]	@ (8006890 <xTimerCreateTimerTask+0x90>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006856:	2301      	movs	r3, #1
 8006858:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10b      	bne.n	8006878 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	613b      	str	r3, [r7, #16]
}
 8006872:	bf00      	nop
 8006874:	bf00      	nop
 8006876:	e7fd      	b.n	8006874 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006878:	697b      	ldr	r3, [r7, #20]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20000ebc 	.word	0x20000ebc
 8006888:	08007954 	.word	0x08007954
 800688c:	080069cd 	.word	0x080069cd
 8006890:	20000ec0 	.word	0x20000ec0

08006894 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b08a      	sub	sp, #40	@ 0x28
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10b      	bne.n	80068c4 <xTimerGenericCommand+0x30>
	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	623b      	str	r3, [r7, #32]
}
 80068be:	bf00      	nop
 80068c0:	bf00      	nop
 80068c2:	e7fd      	b.n	80068c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068c4:	4b19      	ldr	r3, [pc, #100]	@ (800692c <xTimerGenericCommand+0x98>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d02a      	beq.n	8006922 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b05      	cmp	r3, #5
 80068dc:	dc18      	bgt.n	8006910 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068de:	f7ff fead 	bl	800663c <xTaskGetSchedulerState>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d109      	bne.n	80068fc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068e8:	4b10      	ldr	r3, [pc, #64]	@ (800692c <xTimerGenericCommand+0x98>)
 80068ea:	6818      	ldr	r0, [r3, #0]
 80068ec:	f107 0110 	add.w	r1, r7, #16
 80068f0:	2300      	movs	r3, #0
 80068f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068f4:	f7fe fc5a 	bl	80051ac <xQueueGenericSend>
 80068f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80068fa:	e012      	b.n	8006922 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068fc:	4b0b      	ldr	r3, [pc, #44]	@ (800692c <xTimerGenericCommand+0x98>)
 80068fe:	6818      	ldr	r0, [r3, #0]
 8006900:	f107 0110 	add.w	r1, r7, #16
 8006904:	2300      	movs	r3, #0
 8006906:	2200      	movs	r2, #0
 8006908:	f7fe fc50 	bl	80051ac <xQueueGenericSend>
 800690c:	6278      	str	r0, [r7, #36]	@ 0x24
 800690e:	e008      	b.n	8006922 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006910:	4b06      	ldr	r3, [pc, #24]	@ (800692c <xTimerGenericCommand+0x98>)
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	f107 0110 	add.w	r1, r7, #16
 8006918:	2300      	movs	r3, #0
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	f7fe fd48 	bl	80053b0 <xQueueGenericSendFromISR>
 8006920:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006924:	4618      	mov	r0, r3
 8006926:	3728      	adds	r7, #40	@ 0x28
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	20000ebc 	.word	0x20000ebc

08006930 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af02      	add	r7, sp, #8
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800693a:	4b23      	ldr	r3, [pc, #140]	@ (80069c8 <prvProcessExpiredTimer+0x98>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	3304      	adds	r3, #4
 8006948:	4618      	mov	r0, r3
 800694a:	f7fe fafb 	bl	8004f44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b00      	cmp	r3, #0
 800695a:	d023      	beq.n	80069a4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	699a      	ldr	r2, [r3, #24]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	18d1      	adds	r1, r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	6978      	ldr	r0, [r7, #20]
 800696a:	f000 f8d5 	bl	8006b18 <prvInsertTimerInActiveList>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d020      	beq.n	80069b6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006974:	2300      	movs	r3, #0
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	2300      	movs	r3, #0
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	2100      	movs	r1, #0
 800697e:	6978      	ldr	r0, [r7, #20]
 8006980:	f7ff ff88 	bl	8006894 <xTimerGenericCommand>
 8006984:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d114      	bne.n	80069b6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	60fb      	str	r3, [r7, #12]
}
 800699e:	bf00      	nop
 80069a0:	bf00      	nop
 80069a2:	e7fd      	b.n	80069a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069aa:	f023 0301 	bic.w	r3, r3, #1
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	6978      	ldr	r0, [r7, #20]
 80069bc:	4798      	blx	r3
}
 80069be:	bf00      	nop
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20000eb4 	.word	0x20000eb4

080069cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069d4:	f107 0308 	add.w	r3, r7, #8
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 f859 	bl	8006a90 <prvGetNextExpireTime>
 80069de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	4619      	mov	r1, r3
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 f805 	bl	80069f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069ea:	f000 f8d7 	bl	8006b9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069ee:	bf00      	nop
 80069f0:	e7f0      	b.n	80069d4 <prvTimerTask+0x8>
	...

080069f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069fe:	f7ff fa29 	bl	8005e54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a02:	f107 0308 	add.w	r3, r7, #8
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 f866 	bl	8006ad8 <prvSampleTimeNow>
 8006a0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d130      	bne.n	8006a76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10a      	bne.n	8006a30 <prvProcessTimerOrBlockTask+0x3c>
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d806      	bhi.n	8006a30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a22:	f7ff fa25 	bl	8005e70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a26:	68f9      	ldr	r1, [r7, #12]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff ff81 	bl	8006930 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a2e:	e024      	b.n	8006a7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d008      	beq.n	8006a48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a36:	4b13      	ldr	r3, [pc, #76]	@ (8006a84 <prvProcessTimerOrBlockTask+0x90>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <prvProcessTimerOrBlockTask+0x50>
 8006a40:	2301      	movs	r3, #1
 8006a42:	e000      	b.n	8006a46 <prvProcessTimerOrBlockTask+0x52>
 8006a44:	2300      	movs	r3, #0
 8006a46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a48:	4b0f      	ldr	r3, [pc, #60]	@ (8006a88 <prvProcessTimerOrBlockTask+0x94>)
 8006a4a:	6818      	ldr	r0, [r3, #0]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	4619      	mov	r1, r3
 8006a56:	f7fe ff65 	bl	8005924 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a5a:	f7ff fa09 	bl	8005e70 <xTaskResumeAll>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10a      	bne.n	8006a7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a64:	4b09      	ldr	r3, [pc, #36]	@ (8006a8c <prvProcessTimerOrBlockTask+0x98>)
 8006a66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	f3bf 8f6f 	isb	sy
}
 8006a74:	e001      	b.n	8006a7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a76:	f7ff f9fb 	bl	8005e70 <xTaskResumeAll>
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20000eb8 	.word	0x20000eb8
 8006a88:	20000ebc 	.word	0x20000ebc
 8006a8c:	e000ed04 	.word	0xe000ed04

08006a90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a98:	4b0e      	ldr	r3, [pc, #56]	@ (8006ad4 <prvGetNextExpireTime+0x44>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <prvGetNextExpireTime+0x16>
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	e000      	b.n	8006aa8 <prvGetNextExpireTime+0x18>
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d105      	bne.n	8006ac0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ab4:	4b07      	ldr	r3, [pc, #28]	@ (8006ad4 <prvGetNextExpireTime+0x44>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	e001      	b.n	8006ac4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	20000eb4 	.word	0x20000eb4

08006ad8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ae0:	f7ff fa64 	bl	8005fac <xTaskGetTickCount>
 8006ae4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8006b14 <prvSampleTimeNow+0x3c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d205      	bcs.n	8006afc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006af0:	f000 f93a 	bl	8006d68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	e002      	b.n	8006b02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b02:	4a04      	ldr	r2, [pc, #16]	@ (8006b14 <prvSampleTimeNow+0x3c>)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b08:	68fb      	ldr	r3, [r7, #12]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	20000ec4 	.word	0x20000ec4

08006b18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
 8006b24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b26:	2300      	movs	r3, #0
 8006b28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d812      	bhi.n	8006b64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	1ad2      	subs	r2, r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d302      	bcc.n	8006b52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	e01b      	b.n	8006b8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b52:	4b10      	ldr	r3, [pc, #64]	@ (8006b94 <prvInsertTimerInActiveList+0x7c>)
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3304      	adds	r3, #4
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	f7fe f9b8 	bl	8004ed2 <vListInsert>
 8006b62:	e012      	b.n	8006b8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d206      	bcs.n	8006b7a <prvInsertTimerInActiveList+0x62>
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d302      	bcc.n	8006b7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b74:	2301      	movs	r3, #1
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	e007      	b.n	8006b8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b7a:	4b07      	ldr	r3, [pc, #28]	@ (8006b98 <prvInsertTimerInActiveList+0x80>)
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3304      	adds	r3, #4
 8006b82:	4619      	mov	r1, r3
 8006b84:	4610      	mov	r0, r2
 8006b86:	f7fe f9a4 	bl	8004ed2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b8a:	697b      	ldr	r3, [r7, #20]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	20000eb8 	.word	0x20000eb8
 8006b98:	20000eb4 	.word	0x20000eb4

08006b9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b08e      	sub	sp, #56	@ 0x38
 8006ba0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ba2:	e0ce      	b.n	8006d42 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	da19      	bge.n	8006bde <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006baa:	1d3b      	adds	r3, r7, #4
 8006bac:	3304      	adds	r3, #4
 8006bae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10b      	bne.n	8006bce <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	61fb      	str	r3, [r7, #28]
}
 8006bc8:	bf00      	nop
 8006bca:	bf00      	nop
 8006bcc:	e7fd      	b.n	8006bca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bd4:	6850      	ldr	r0, [r2, #4]
 8006bd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bd8:	6892      	ldr	r2, [r2, #8]
 8006bda:	4611      	mov	r1, r2
 8006bdc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f2c0 80ae 	blt.w	8006d42 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d004      	beq.n	8006bfc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fe f9a4 	bl	8004f44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bfc:	463b      	mov	r3, r7
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7ff ff6a 	bl	8006ad8 <prvSampleTimeNow>
 8006c04:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b09      	cmp	r3, #9
 8006c0a:	f200 8097 	bhi.w	8006d3c <prvProcessReceivedCommands+0x1a0>
 8006c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c14 <prvProcessReceivedCommands+0x78>)
 8006c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c14:	08006c3d 	.word	0x08006c3d
 8006c18:	08006c3d 	.word	0x08006c3d
 8006c1c:	08006c3d 	.word	0x08006c3d
 8006c20:	08006cb3 	.word	0x08006cb3
 8006c24:	08006cc7 	.word	0x08006cc7
 8006c28:	08006d13 	.word	0x08006d13
 8006c2c:	08006c3d 	.word	0x08006c3d
 8006c30:	08006c3d 	.word	0x08006c3d
 8006c34:	08006cb3 	.word	0x08006cb3
 8006c38:	08006cc7 	.word	0x08006cc7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c42:	f043 0301 	orr.w	r3, r3, #1
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	18d1      	adds	r1, r2, r3
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c5c:	f7ff ff5c 	bl	8006b18 <prvInsertTimerInActiveList>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d06c      	beq.n	8006d40 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d061      	beq.n	8006d40 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	441a      	add	r2, r3
 8006c84:	2300      	movs	r3, #0
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c8e:	f7ff fe01 	bl	8006894 <xTimerGenericCommand>
 8006c92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d152      	bne.n	8006d40 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	61bb      	str	r3, [r7, #24]
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	e7fd      	b.n	8006cae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cb8:	f023 0301 	bic.w	r3, r3, #1
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006cc4:	e03d      	b.n	8006d42 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ccc:	f043 0301 	orr.w	r3, r3, #1
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cdc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10b      	bne.n	8006cfe <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	617b      	str	r3, [r7, #20]
}
 8006cf8:	bf00      	nop
 8006cfa:	bf00      	nop
 8006cfc:	e7fd      	b.n	8006cfa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d00:	699a      	ldr	r2, [r3, #24]
 8006d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d04:	18d1      	adds	r1, r2, r3
 8006d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d0c:	f7ff ff04 	bl	8006b18 <prvInsertTimerInActiveList>
					break;
 8006d10:	e017      	b.n	8006d42 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d103      	bne.n	8006d28 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006d20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d22:	f000 fbe9 	bl	80074f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d26:	e00c      	b.n	8006d42 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d2e:	f023 0301 	bic.w	r3, r3, #1
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006d3a:	e002      	b.n	8006d42 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006d3c:	bf00      	nop
 8006d3e:	e000      	b.n	8006d42 <prvProcessReceivedCommands+0x1a6>
					break;
 8006d40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d42:	4b08      	ldr	r3, [pc, #32]	@ (8006d64 <prvProcessReceivedCommands+0x1c8>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	1d39      	adds	r1, r7, #4
 8006d48:	2200      	movs	r2, #0
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe fbce 	bl	80054ec <xQueueReceive>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f47f af26 	bne.w	8006ba4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006d58:	bf00      	nop
 8006d5a:	bf00      	nop
 8006d5c:	3730      	adds	r7, #48	@ 0x30
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20000ebc 	.word	0x20000ebc

08006d68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d6e:	e049      	b.n	8006e04 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d70:	4b2e      	ldr	r3, [pc, #184]	@ (8006e2c <prvSwitchTimerLists+0xc4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8006e2c <prvSwitchTimerLists+0xc4>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	3304      	adds	r3, #4
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fe f8db 	bl	8004f44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d02f      	beq.n	8006e04 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	4413      	add	r3, r2
 8006dac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d90e      	bls.n	8006dd4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8006e2c <prvSwitchTimerLists+0xc4>)
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4610      	mov	r0, r2
 8006dce:	f7fe f880 	bl	8004ed2 <vListInsert>
 8006dd2:	e017      	b.n	8006e04 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	2300      	movs	r3, #0
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	2100      	movs	r1, #0
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f7ff fd58 	bl	8006894 <xTimerGenericCommand>
 8006de4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10b      	bne.n	8006e04 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	603b      	str	r3, [r7, #0]
}
 8006dfe:	bf00      	nop
 8006e00:	bf00      	nop
 8006e02:	e7fd      	b.n	8006e00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e04:	4b09      	ldr	r3, [pc, #36]	@ (8006e2c <prvSwitchTimerLists+0xc4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1b0      	bne.n	8006d70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e0e:	4b07      	ldr	r3, [pc, #28]	@ (8006e2c <prvSwitchTimerLists+0xc4>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e14:	4b06      	ldr	r3, [pc, #24]	@ (8006e30 <prvSwitchTimerLists+0xc8>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a04      	ldr	r2, [pc, #16]	@ (8006e2c <prvSwitchTimerLists+0xc4>)
 8006e1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e1c:	4a04      	ldr	r2, [pc, #16]	@ (8006e30 <prvSwitchTimerLists+0xc8>)
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	6013      	str	r3, [r2, #0]
}
 8006e22:	bf00      	nop
 8006e24:	3718      	adds	r7, #24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20000eb4 	.word	0x20000eb4
 8006e30:	20000eb8 	.word	0x20000eb8

08006e34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e3a:	f000 f96d 	bl	8007118 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e3e:	4b15      	ldr	r3, [pc, #84]	@ (8006e94 <prvCheckForValidListAndQueue+0x60>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d120      	bne.n	8006e88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e46:	4814      	ldr	r0, [pc, #80]	@ (8006e98 <prvCheckForValidListAndQueue+0x64>)
 8006e48:	f7fd fff2 	bl	8004e30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e4c:	4813      	ldr	r0, [pc, #76]	@ (8006e9c <prvCheckForValidListAndQueue+0x68>)
 8006e4e:	f7fd ffef 	bl	8004e30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e52:	4b13      	ldr	r3, [pc, #76]	@ (8006ea0 <prvCheckForValidListAndQueue+0x6c>)
 8006e54:	4a10      	ldr	r2, [pc, #64]	@ (8006e98 <prvCheckForValidListAndQueue+0x64>)
 8006e56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e58:	4b12      	ldr	r3, [pc, #72]	@ (8006ea4 <prvCheckForValidListAndQueue+0x70>)
 8006e5a:	4a10      	ldr	r2, [pc, #64]	@ (8006e9c <prvCheckForValidListAndQueue+0x68>)
 8006e5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e5e:	2300      	movs	r3, #0
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	4b11      	ldr	r3, [pc, #68]	@ (8006ea8 <prvCheckForValidListAndQueue+0x74>)
 8006e64:	4a11      	ldr	r2, [pc, #68]	@ (8006eac <prvCheckForValidListAndQueue+0x78>)
 8006e66:	2110      	movs	r1, #16
 8006e68:	200a      	movs	r0, #10
 8006e6a:	f7fe f8ff 	bl	800506c <xQueueGenericCreateStatic>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	4a08      	ldr	r2, [pc, #32]	@ (8006e94 <prvCheckForValidListAndQueue+0x60>)
 8006e72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e74:	4b07      	ldr	r3, [pc, #28]	@ (8006e94 <prvCheckForValidListAndQueue+0x60>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d005      	beq.n	8006e88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e7c:	4b05      	ldr	r3, [pc, #20]	@ (8006e94 <prvCheckForValidListAndQueue+0x60>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	490b      	ldr	r1, [pc, #44]	@ (8006eb0 <prvCheckForValidListAndQueue+0x7c>)
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fe fd24 	bl	80058d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e88:	f000 f978 	bl	800717c <vPortExitCritical>
}
 8006e8c:	bf00      	nop
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20000ebc 	.word	0x20000ebc
 8006e98:	20000e8c 	.word	0x20000e8c
 8006e9c:	20000ea0 	.word	0x20000ea0
 8006ea0:	20000eb4 	.word	0x20000eb4
 8006ea4:	20000eb8 	.word	0x20000eb8
 8006ea8:	20000f68 	.word	0x20000f68
 8006eac:	20000ec8 	.word	0x20000ec8
 8006eb0:	0800795c 	.word	0x0800795c

08006eb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	3b04      	subs	r3, #4
 8006ec4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3b04      	subs	r3, #4
 8006ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f023 0201 	bic.w	r2, r3, #1
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3b04      	subs	r3, #4
 8006ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8006f18 <pxPortInitialiseStack+0x64>)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3b14      	subs	r3, #20
 8006eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3b04      	subs	r3, #4
 8006efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f06f 0202 	mvn.w	r2, #2
 8006f02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3b20      	subs	r3, #32
 8006f08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	08006f1d 	.word	0x08006f1d

08006f1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f22:	2300      	movs	r3, #0
 8006f24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f26:	4b13      	ldr	r3, [pc, #76]	@ (8006f74 <prvTaskExitError+0x58>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f2e:	d00b      	beq.n	8006f48 <prvTaskExitError+0x2c>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	60fb      	str	r3, [r7, #12]
}
 8006f42:	bf00      	nop
 8006f44:	bf00      	nop
 8006f46:	e7fd      	b.n	8006f44 <prvTaskExitError+0x28>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	60bb      	str	r3, [r7, #8]
}
 8006f5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f5c:	bf00      	nop
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d0fc      	beq.n	8006f5e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f64:	bf00      	nop
 8006f66:	bf00      	nop
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	2000000c 	.word	0x2000000c
	...

08006f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f80:	4b07      	ldr	r3, [pc, #28]	@ (8006fa0 <pxCurrentTCBConst2>)
 8006f82:	6819      	ldr	r1, [r3, #0]
 8006f84:	6808      	ldr	r0, [r1, #0]
 8006f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8a:	f380 8809 	msr	PSP, r0
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f04f 0000 	mov.w	r0, #0
 8006f96:	f380 8811 	msr	BASEPRI, r0
 8006f9a:	4770      	bx	lr
 8006f9c:	f3af 8000 	nop.w

08006fa0 <pxCurrentTCBConst2>:
 8006fa0:	2000098c 	.word	0x2000098c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop

08006fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fa8:	4808      	ldr	r0, [pc, #32]	@ (8006fcc <prvPortStartFirstTask+0x24>)
 8006faa:	6800      	ldr	r0, [r0, #0]
 8006fac:	6800      	ldr	r0, [r0, #0]
 8006fae:	f380 8808 	msr	MSP, r0
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f380 8814 	msr	CONTROL, r0
 8006fba:	b662      	cpsie	i
 8006fbc:	b661      	cpsie	f
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	df00      	svc	0
 8006fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fca:	bf00      	nop
 8006fcc:	e000ed08 	.word	0xe000ed08

08006fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fd6:	4b47      	ldr	r3, [pc, #284]	@ (80070f4 <xPortStartScheduler+0x124>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a47      	ldr	r2, [pc, #284]	@ (80070f8 <xPortStartScheduler+0x128>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d10b      	bne.n	8006ff8 <xPortStartScheduler+0x28>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	613b      	str	r3, [r7, #16]
}
 8006ff2:	bf00      	nop
 8006ff4:	bf00      	nop
 8006ff6:	e7fd      	b.n	8006ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80070f4 <xPortStartScheduler+0x124>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a3f      	ldr	r2, [pc, #252]	@ (80070fc <xPortStartScheduler+0x12c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d10b      	bne.n	800701a <xPortStartScheduler+0x4a>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	60fb      	str	r3, [r7, #12]
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop
 8007018:	e7fd      	b.n	8007016 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800701a:	4b39      	ldr	r3, [pc, #228]	@ (8007100 <xPortStartScheduler+0x130>)
 800701c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	22ff      	movs	r2, #255	@ 0xff
 800702a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	b2db      	uxtb	r3, r3
 8007032:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007034:	78fb      	ldrb	r3, [r7, #3]
 8007036:	b2db      	uxtb	r3, r3
 8007038:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800703c:	b2da      	uxtb	r2, r3
 800703e:	4b31      	ldr	r3, [pc, #196]	@ (8007104 <xPortStartScheduler+0x134>)
 8007040:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007042:	4b31      	ldr	r3, [pc, #196]	@ (8007108 <xPortStartScheduler+0x138>)
 8007044:	2207      	movs	r2, #7
 8007046:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007048:	e009      	b.n	800705e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800704a:	4b2f      	ldr	r3, [pc, #188]	@ (8007108 <xPortStartScheduler+0x138>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3b01      	subs	r3, #1
 8007050:	4a2d      	ldr	r2, [pc, #180]	@ (8007108 <xPortStartScheduler+0x138>)
 8007052:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	b2db      	uxtb	r3, r3
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	b2db      	uxtb	r3, r3
 800705c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800705e:	78fb      	ldrb	r3, [r7, #3]
 8007060:	b2db      	uxtb	r3, r3
 8007062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007066:	2b80      	cmp	r3, #128	@ 0x80
 8007068:	d0ef      	beq.n	800704a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800706a:	4b27      	ldr	r3, [pc, #156]	@ (8007108 <xPortStartScheduler+0x138>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f1c3 0307 	rsb	r3, r3, #7
 8007072:	2b04      	cmp	r3, #4
 8007074:	d00b      	beq.n	800708e <xPortStartScheduler+0xbe>
	__asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	60bb      	str	r3, [r7, #8]
}
 8007088:	bf00      	nop
 800708a:	bf00      	nop
 800708c:	e7fd      	b.n	800708a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800708e:	4b1e      	ldr	r3, [pc, #120]	@ (8007108 <xPortStartScheduler+0x138>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	021b      	lsls	r3, r3, #8
 8007094:	4a1c      	ldr	r2, [pc, #112]	@ (8007108 <xPortStartScheduler+0x138>)
 8007096:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007098:	4b1b      	ldr	r3, [pc, #108]	@ (8007108 <xPortStartScheduler+0x138>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80070a0:	4a19      	ldr	r2, [pc, #100]	@ (8007108 <xPortStartScheduler+0x138>)
 80070a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070ac:	4b17      	ldr	r3, [pc, #92]	@ (800710c <xPortStartScheduler+0x13c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a16      	ldr	r2, [pc, #88]	@ (800710c <xPortStartScheduler+0x13c>)
 80070b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80070b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070b8:	4b14      	ldr	r3, [pc, #80]	@ (800710c <xPortStartScheduler+0x13c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a13      	ldr	r2, [pc, #76]	@ (800710c <xPortStartScheduler+0x13c>)
 80070be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80070c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070c4:	f000 f8da 	bl	800727c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070c8:	4b11      	ldr	r3, [pc, #68]	@ (8007110 <xPortStartScheduler+0x140>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070ce:	f000 f8f9 	bl	80072c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070d2:	4b10      	ldr	r3, [pc, #64]	@ (8007114 <xPortStartScheduler+0x144>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007114 <xPortStartScheduler+0x144>)
 80070d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80070dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070de:	f7ff ff63 	bl	8006fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070e2:	f7ff f82d 	bl	8006140 <vTaskSwitchContext>
	prvTaskExitError();
 80070e6:	f7ff ff19 	bl	8006f1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3718      	adds	r7, #24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	e000ed00 	.word	0xe000ed00
 80070f8:	410fc271 	.word	0x410fc271
 80070fc:	410fc270 	.word	0x410fc270
 8007100:	e000e400 	.word	0xe000e400
 8007104:	20000fb8 	.word	0x20000fb8
 8007108:	20000fbc 	.word	0x20000fbc
 800710c:	e000ed20 	.word	0xe000ed20
 8007110:	2000000c 	.word	0x2000000c
 8007114:	e000ef34 	.word	0xe000ef34

08007118 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	607b      	str	r3, [r7, #4]
}
 8007130:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007132:	4b10      	ldr	r3, [pc, #64]	@ (8007174 <vPortEnterCritical+0x5c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3301      	adds	r3, #1
 8007138:	4a0e      	ldr	r2, [pc, #56]	@ (8007174 <vPortEnterCritical+0x5c>)
 800713a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800713c:	4b0d      	ldr	r3, [pc, #52]	@ (8007174 <vPortEnterCritical+0x5c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d110      	bne.n	8007166 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007144:	4b0c      	ldr	r3, [pc, #48]	@ (8007178 <vPortEnterCritical+0x60>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00b      	beq.n	8007166 <vPortEnterCritical+0x4e>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	603b      	str	r3, [r7, #0]
}
 8007160:	bf00      	nop
 8007162:	bf00      	nop
 8007164:	e7fd      	b.n	8007162 <vPortEnterCritical+0x4a>
	}
}
 8007166:	bf00      	nop
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	2000000c 	.word	0x2000000c
 8007178:	e000ed04 	.word	0xe000ed04

0800717c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007182:	4b12      	ldr	r3, [pc, #72]	@ (80071cc <vPortExitCritical+0x50>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10b      	bne.n	80071a2 <vPortExitCritical+0x26>
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	607b      	str	r3, [r7, #4]
}
 800719c:	bf00      	nop
 800719e:	bf00      	nop
 80071a0:	e7fd      	b.n	800719e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071a2:	4b0a      	ldr	r3, [pc, #40]	@ (80071cc <vPortExitCritical+0x50>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3b01      	subs	r3, #1
 80071a8:	4a08      	ldr	r2, [pc, #32]	@ (80071cc <vPortExitCritical+0x50>)
 80071aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071ac:	4b07      	ldr	r3, [pc, #28]	@ (80071cc <vPortExitCritical+0x50>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d105      	bne.n	80071c0 <vPortExitCritical+0x44>
 80071b4:	2300      	movs	r3, #0
 80071b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	f383 8811 	msr	BASEPRI, r3
}
 80071be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	2000000c 	.word	0x2000000c

080071d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071d0:	f3ef 8009 	mrs	r0, PSP
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	4b15      	ldr	r3, [pc, #84]	@ (8007230 <pxCurrentTCBConst>)
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	f01e 0f10 	tst.w	lr, #16
 80071e0:	bf08      	it	eq
 80071e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ea:	6010      	str	r0, [r2, #0]
 80071ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80071f4:	f380 8811 	msr	BASEPRI, r0
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f7fe ff9e 	bl	8006140 <vTaskSwitchContext>
 8007204:	f04f 0000 	mov.w	r0, #0
 8007208:	f380 8811 	msr	BASEPRI, r0
 800720c:	bc09      	pop	{r0, r3}
 800720e:	6819      	ldr	r1, [r3, #0]
 8007210:	6808      	ldr	r0, [r1, #0]
 8007212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007216:	f01e 0f10 	tst.w	lr, #16
 800721a:	bf08      	it	eq
 800721c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007220:	f380 8809 	msr	PSP, r0
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	f3af 8000 	nop.w

08007230 <pxCurrentTCBConst>:
 8007230:	2000098c 	.word	0x2000098c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop

08007238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	607b      	str	r3, [r7, #4]
}
 8007250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007252:	f7fe febb 	bl	8005fcc <xTaskIncrementTick>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800725c:	4b06      	ldr	r3, [pc, #24]	@ (8007278 <xPortSysTickHandler+0x40>)
 800725e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	2300      	movs	r3, #0
 8007266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	f383 8811 	msr	BASEPRI, r3
}
 800726e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	e000ed04 	.word	0xe000ed04

0800727c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007280:	4b0b      	ldr	r3, [pc, #44]	@ (80072b0 <vPortSetupTimerInterrupt+0x34>)
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007286:	4b0b      	ldr	r3, [pc, #44]	@ (80072b4 <vPortSetupTimerInterrupt+0x38>)
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800728c:	4b0a      	ldr	r3, [pc, #40]	@ (80072b8 <vPortSetupTimerInterrupt+0x3c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a0a      	ldr	r2, [pc, #40]	@ (80072bc <vPortSetupTimerInterrupt+0x40>)
 8007292:	fba2 2303 	umull	r2, r3, r2, r3
 8007296:	099b      	lsrs	r3, r3, #6
 8007298:	4a09      	ldr	r2, [pc, #36]	@ (80072c0 <vPortSetupTimerInterrupt+0x44>)
 800729a:	3b01      	subs	r3, #1
 800729c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800729e:	4b04      	ldr	r3, [pc, #16]	@ (80072b0 <vPortSetupTimerInterrupt+0x34>)
 80072a0:	2207      	movs	r2, #7
 80072a2:	601a      	str	r2, [r3, #0]
}
 80072a4:	bf00      	nop
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	e000e010 	.word	0xe000e010
 80072b4:	e000e018 	.word	0xe000e018
 80072b8:	20000000 	.word	0x20000000
 80072bc:	10624dd3 	.word	0x10624dd3
 80072c0:	e000e014 	.word	0xe000e014

080072c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80072d4 <vPortEnableVFP+0x10>
 80072c8:	6801      	ldr	r1, [r0, #0]
 80072ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80072ce:	6001      	str	r1, [r0, #0]
 80072d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072d2:	bf00      	nop
 80072d4:	e000ed88 	.word	0xe000ed88

080072d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072de:	f3ef 8305 	mrs	r3, IPSR
 80072e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b0f      	cmp	r3, #15
 80072e8:	d915      	bls.n	8007316 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072ea:	4a18      	ldr	r2, [pc, #96]	@ (800734c <vPortValidateInterruptPriority+0x74>)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072f4:	4b16      	ldr	r3, [pc, #88]	@ (8007350 <vPortValidateInterruptPriority+0x78>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	7afa      	ldrb	r2, [r7, #11]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d20b      	bcs.n	8007316 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	607b      	str	r3, [r7, #4]
}
 8007310:	bf00      	nop
 8007312:	bf00      	nop
 8007314:	e7fd      	b.n	8007312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007316:	4b0f      	ldr	r3, [pc, #60]	@ (8007354 <vPortValidateInterruptPriority+0x7c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800731e:	4b0e      	ldr	r3, [pc, #56]	@ (8007358 <vPortValidateInterruptPriority+0x80>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	429a      	cmp	r2, r3
 8007324:	d90b      	bls.n	800733e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	603b      	str	r3, [r7, #0]
}
 8007338:	bf00      	nop
 800733a:	bf00      	nop
 800733c:	e7fd      	b.n	800733a <vPortValidateInterruptPriority+0x62>
	}
 800733e:	bf00      	nop
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	e000e3f0 	.word	0xe000e3f0
 8007350:	20000fb8 	.word	0x20000fb8
 8007354:	e000ed0c 	.word	0xe000ed0c
 8007358:	20000fbc 	.word	0x20000fbc

0800735c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08a      	sub	sp, #40	@ 0x28
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007364:	2300      	movs	r3, #0
 8007366:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007368:	f7fe fd74 	bl	8005e54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800736c:	4b5c      	ldr	r3, [pc, #368]	@ (80074e0 <pvPortMalloc+0x184>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007374:	f000 f924 	bl	80075c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007378:	4b5a      	ldr	r3, [pc, #360]	@ (80074e4 <pvPortMalloc+0x188>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4013      	ands	r3, r2
 8007380:	2b00      	cmp	r3, #0
 8007382:	f040 8095 	bne.w	80074b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01e      	beq.n	80073ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800738c:	2208      	movs	r2, #8
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4413      	add	r3, r2
 8007392:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	2b00      	cmp	r3, #0
 800739c:	d015      	beq.n	80073ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f023 0307 	bic.w	r3, r3, #7
 80073a4:	3308      	adds	r3, #8
 80073a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00b      	beq.n	80073ca <pvPortMalloc+0x6e>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	617b      	str	r3, [r7, #20]
}
 80073c4:	bf00      	nop
 80073c6:	bf00      	nop
 80073c8:	e7fd      	b.n	80073c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d06f      	beq.n	80074b0 <pvPortMalloc+0x154>
 80073d0:	4b45      	ldr	r3, [pc, #276]	@ (80074e8 <pvPortMalloc+0x18c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d86a      	bhi.n	80074b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073da:	4b44      	ldr	r3, [pc, #272]	@ (80074ec <pvPortMalloc+0x190>)
 80073dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073de:	4b43      	ldr	r3, [pc, #268]	@ (80074ec <pvPortMalloc+0x190>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073e4:	e004      	b.n	80073f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80073e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d903      	bls.n	8007402 <pvPortMalloc+0xa6>
 80073fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1f1      	bne.n	80073e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007402:	4b37      	ldr	r3, [pc, #220]	@ (80074e0 <pvPortMalloc+0x184>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007408:	429a      	cmp	r2, r3
 800740a:	d051      	beq.n	80074b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2208      	movs	r2, #8
 8007412:	4413      	add	r3, r2
 8007414:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800741e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	1ad2      	subs	r2, r2, r3
 8007426:	2308      	movs	r3, #8
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	429a      	cmp	r2, r3
 800742c:	d920      	bls.n	8007470 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800742e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4413      	add	r3, r2
 8007434:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00b      	beq.n	8007458 <pvPortMalloc+0xfc>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	613b      	str	r3, [r7, #16]
}
 8007452:	bf00      	nop
 8007454:	bf00      	nop
 8007456:	e7fd      	b.n	8007454 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	1ad2      	subs	r2, r2, r3
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800746a:	69b8      	ldr	r0, [r7, #24]
 800746c:	f000 f90a 	bl	8007684 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007470:	4b1d      	ldr	r3, [pc, #116]	@ (80074e8 <pvPortMalloc+0x18c>)
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	4a1b      	ldr	r2, [pc, #108]	@ (80074e8 <pvPortMalloc+0x18c>)
 800747c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800747e:	4b1a      	ldr	r3, [pc, #104]	@ (80074e8 <pvPortMalloc+0x18c>)
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	4b1b      	ldr	r3, [pc, #108]	@ (80074f0 <pvPortMalloc+0x194>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d203      	bcs.n	8007492 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800748a:	4b17      	ldr	r3, [pc, #92]	@ (80074e8 <pvPortMalloc+0x18c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a18      	ldr	r2, [pc, #96]	@ (80074f0 <pvPortMalloc+0x194>)
 8007490:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	685a      	ldr	r2, [r3, #4]
 8007496:	4b13      	ldr	r3, [pc, #76]	@ (80074e4 <pvPortMalloc+0x188>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	431a      	orrs	r2, r3
 800749c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80074a6:	4b13      	ldr	r3, [pc, #76]	@ (80074f4 <pvPortMalloc+0x198>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3301      	adds	r3, #1
 80074ac:	4a11      	ldr	r2, [pc, #68]	@ (80074f4 <pvPortMalloc+0x198>)
 80074ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074b0:	f7fe fcde 	bl	8005e70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	f003 0307 	and.w	r3, r3, #7
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00b      	beq.n	80074d6 <pvPortMalloc+0x17a>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	60fb      	str	r3, [r7, #12]
}
 80074d0:	bf00      	nop
 80074d2:	bf00      	nop
 80074d4:	e7fd      	b.n	80074d2 <pvPortMalloc+0x176>
	return pvReturn;
 80074d6:	69fb      	ldr	r3, [r7, #28]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3728      	adds	r7, #40	@ 0x28
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20001b80 	.word	0x20001b80
 80074e4:	20001b94 	.word	0x20001b94
 80074e8:	20001b84 	.word	0x20001b84
 80074ec:	20001b78 	.word	0x20001b78
 80074f0:	20001b88 	.word	0x20001b88
 80074f4:	20001b8c 	.word	0x20001b8c

080074f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d04f      	beq.n	80075aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800750a:	2308      	movs	r3, #8
 800750c:	425b      	negs	r3, r3
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	4413      	add	r3, r2
 8007512:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	4b25      	ldr	r3, [pc, #148]	@ (80075b4 <vPortFree+0xbc>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4013      	ands	r3, r2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10b      	bne.n	800753e <vPortFree+0x46>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	60fb      	str	r3, [r7, #12]
}
 8007538:	bf00      	nop
 800753a:	bf00      	nop
 800753c:	e7fd      	b.n	800753a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00b      	beq.n	800755e <vPortFree+0x66>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	60bb      	str	r3, [r7, #8]
}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	e7fd      	b.n	800755a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	4b14      	ldr	r3, [pc, #80]	@ (80075b4 <vPortFree+0xbc>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4013      	ands	r3, r2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d01e      	beq.n	80075aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d11a      	bne.n	80075aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	4b0e      	ldr	r3, [pc, #56]	@ (80075b4 <vPortFree+0xbc>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	43db      	mvns	r3, r3
 800757e:	401a      	ands	r2, r3
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007584:	f7fe fc66 	bl	8005e54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	4b0a      	ldr	r3, [pc, #40]	@ (80075b8 <vPortFree+0xc0>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4413      	add	r3, r2
 8007592:	4a09      	ldr	r2, [pc, #36]	@ (80075b8 <vPortFree+0xc0>)
 8007594:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007596:	6938      	ldr	r0, [r7, #16]
 8007598:	f000 f874 	bl	8007684 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800759c:	4b07      	ldr	r3, [pc, #28]	@ (80075bc <vPortFree+0xc4>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3301      	adds	r3, #1
 80075a2:	4a06      	ldr	r2, [pc, #24]	@ (80075bc <vPortFree+0xc4>)
 80075a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80075a6:	f7fe fc63 	bl	8005e70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075aa:	bf00      	nop
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20001b94 	.word	0x20001b94
 80075b8:	20001b84 	.word	0x20001b84
 80075bc:	20001b90 	.word	0x20001b90

080075c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075c6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80075ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075cc:	4b27      	ldr	r3, [pc, #156]	@ (800766c <prvHeapInit+0xac>)
 80075ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f003 0307 	and.w	r3, r3, #7
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00c      	beq.n	80075f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3307      	adds	r3, #7
 80075de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f023 0307 	bic.w	r3, r3, #7
 80075e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	4a1f      	ldr	r2, [pc, #124]	@ (800766c <prvHeapInit+0xac>)
 80075f0:	4413      	add	r3, r2
 80075f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007670 <prvHeapInit+0xb0>)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075fe:	4b1c      	ldr	r3, [pc, #112]	@ (8007670 <prvHeapInit+0xb0>)
 8007600:	2200      	movs	r2, #0
 8007602:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	4413      	add	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800760c:	2208      	movs	r2, #8
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	1a9b      	subs	r3, r3, r2
 8007612:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f023 0307 	bic.w	r3, r3, #7
 800761a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4a15      	ldr	r2, [pc, #84]	@ (8007674 <prvHeapInit+0xb4>)
 8007620:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007622:	4b14      	ldr	r3, [pc, #80]	@ (8007674 <prvHeapInit+0xb4>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2200      	movs	r2, #0
 8007628:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800762a:	4b12      	ldr	r3, [pc, #72]	@ (8007674 <prvHeapInit+0xb4>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2200      	movs	r2, #0
 8007630:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	1ad2      	subs	r2, r2, r3
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007640:	4b0c      	ldr	r3, [pc, #48]	@ (8007674 <prvHeapInit+0xb4>)
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	4a0a      	ldr	r2, [pc, #40]	@ (8007678 <prvHeapInit+0xb8>)
 800764e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	4a09      	ldr	r2, [pc, #36]	@ (800767c <prvHeapInit+0xbc>)
 8007656:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007658:	4b09      	ldr	r3, [pc, #36]	@ (8007680 <prvHeapInit+0xc0>)
 800765a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800765e:	601a      	str	r2, [r3, #0]
}
 8007660:	bf00      	nop
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	20000fc0 	.word	0x20000fc0
 8007670:	20001b78 	.word	0x20001b78
 8007674:	20001b80 	.word	0x20001b80
 8007678:	20001b88 	.word	0x20001b88
 800767c:	20001b84 	.word	0x20001b84
 8007680:	20001b94 	.word	0x20001b94

08007684 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800768c:	4b28      	ldr	r3, [pc, #160]	@ (8007730 <prvInsertBlockIntoFreeList+0xac>)
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	e002      	b.n	8007698 <prvInsertBlockIntoFreeList+0x14>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d8f7      	bhi.n	8007692 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	4413      	add	r3, r2
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d108      	bne.n	80076c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	441a      	add	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	441a      	add	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d118      	bne.n	800770c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	4b15      	ldr	r3, [pc, #84]	@ (8007734 <prvInsertBlockIntoFreeList+0xb0>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d00d      	beq.n	8007702 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	441a      	add	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	e008      	b.n	8007714 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007702:	4b0c      	ldr	r3, [pc, #48]	@ (8007734 <prvInsertBlockIntoFreeList+0xb0>)
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	e003      	b.n	8007714 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	429a      	cmp	r2, r3
 800771a:	d002      	beq.n	8007722 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007722:	bf00      	nop
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	20001b78 	.word	0x20001b78
 8007734:	20001b80 	.word	0x20001b80

08007738 <memset>:
 8007738:	4402      	add	r2, r0
 800773a:	4603      	mov	r3, r0
 800773c:	4293      	cmp	r3, r2
 800773e:	d100      	bne.n	8007742 <memset+0xa>
 8007740:	4770      	bx	lr
 8007742:	f803 1b01 	strb.w	r1, [r3], #1
 8007746:	e7f9      	b.n	800773c <memset+0x4>

08007748 <_reclaim_reent>:
 8007748:	4b29      	ldr	r3, [pc, #164]	@ (80077f0 <_reclaim_reent+0xa8>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4283      	cmp	r3, r0
 800774e:	b570      	push	{r4, r5, r6, lr}
 8007750:	4604      	mov	r4, r0
 8007752:	d04b      	beq.n	80077ec <_reclaim_reent+0xa4>
 8007754:	69c3      	ldr	r3, [r0, #28]
 8007756:	b1ab      	cbz	r3, 8007784 <_reclaim_reent+0x3c>
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	b16b      	cbz	r3, 8007778 <_reclaim_reent+0x30>
 800775c:	2500      	movs	r5, #0
 800775e:	69e3      	ldr	r3, [r4, #28]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	5959      	ldr	r1, [r3, r5]
 8007764:	2900      	cmp	r1, #0
 8007766:	d13b      	bne.n	80077e0 <_reclaim_reent+0x98>
 8007768:	3504      	adds	r5, #4
 800776a:	2d80      	cmp	r5, #128	@ 0x80
 800776c:	d1f7      	bne.n	800775e <_reclaim_reent+0x16>
 800776e:	69e3      	ldr	r3, [r4, #28]
 8007770:	4620      	mov	r0, r4
 8007772:	68d9      	ldr	r1, [r3, #12]
 8007774:	f000 f872 	bl	800785c <_free_r>
 8007778:	69e3      	ldr	r3, [r4, #28]
 800777a:	6819      	ldr	r1, [r3, #0]
 800777c:	b111      	cbz	r1, 8007784 <_reclaim_reent+0x3c>
 800777e:	4620      	mov	r0, r4
 8007780:	f000 f86c 	bl	800785c <_free_r>
 8007784:	6961      	ldr	r1, [r4, #20]
 8007786:	b111      	cbz	r1, 800778e <_reclaim_reent+0x46>
 8007788:	4620      	mov	r0, r4
 800778a:	f000 f867 	bl	800785c <_free_r>
 800778e:	69e1      	ldr	r1, [r4, #28]
 8007790:	b111      	cbz	r1, 8007798 <_reclaim_reent+0x50>
 8007792:	4620      	mov	r0, r4
 8007794:	f000 f862 	bl	800785c <_free_r>
 8007798:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800779a:	b111      	cbz	r1, 80077a2 <_reclaim_reent+0x5a>
 800779c:	4620      	mov	r0, r4
 800779e:	f000 f85d 	bl	800785c <_free_r>
 80077a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077a4:	b111      	cbz	r1, 80077ac <_reclaim_reent+0x64>
 80077a6:	4620      	mov	r0, r4
 80077a8:	f000 f858 	bl	800785c <_free_r>
 80077ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80077ae:	b111      	cbz	r1, 80077b6 <_reclaim_reent+0x6e>
 80077b0:	4620      	mov	r0, r4
 80077b2:	f000 f853 	bl	800785c <_free_r>
 80077b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80077b8:	b111      	cbz	r1, 80077c0 <_reclaim_reent+0x78>
 80077ba:	4620      	mov	r0, r4
 80077bc:	f000 f84e 	bl	800785c <_free_r>
 80077c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80077c2:	b111      	cbz	r1, 80077ca <_reclaim_reent+0x82>
 80077c4:	4620      	mov	r0, r4
 80077c6:	f000 f849 	bl	800785c <_free_r>
 80077ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80077cc:	b111      	cbz	r1, 80077d4 <_reclaim_reent+0x8c>
 80077ce:	4620      	mov	r0, r4
 80077d0:	f000 f844 	bl	800785c <_free_r>
 80077d4:	6a23      	ldr	r3, [r4, #32]
 80077d6:	b14b      	cbz	r3, 80077ec <_reclaim_reent+0xa4>
 80077d8:	4620      	mov	r0, r4
 80077da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80077de:	4718      	bx	r3
 80077e0:	680e      	ldr	r6, [r1, #0]
 80077e2:	4620      	mov	r0, r4
 80077e4:	f000 f83a 	bl	800785c <_free_r>
 80077e8:	4631      	mov	r1, r6
 80077ea:	e7bb      	b.n	8007764 <_reclaim_reent+0x1c>
 80077ec:	bd70      	pop	{r4, r5, r6, pc}
 80077ee:	bf00      	nop
 80077f0:	20000010 	.word	0x20000010

080077f4 <__libc_init_array>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	4d0d      	ldr	r5, [pc, #52]	@ (800782c <__libc_init_array+0x38>)
 80077f8:	4c0d      	ldr	r4, [pc, #52]	@ (8007830 <__libc_init_array+0x3c>)
 80077fa:	1b64      	subs	r4, r4, r5
 80077fc:	10a4      	asrs	r4, r4, #2
 80077fe:	2600      	movs	r6, #0
 8007800:	42a6      	cmp	r6, r4
 8007802:	d109      	bne.n	8007818 <__libc_init_array+0x24>
 8007804:	4d0b      	ldr	r5, [pc, #44]	@ (8007834 <__libc_init_array+0x40>)
 8007806:	4c0c      	ldr	r4, [pc, #48]	@ (8007838 <__libc_init_array+0x44>)
 8007808:	f000 f87e 	bl	8007908 <_init>
 800780c:	1b64      	subs	r4, r4, r5
 800780e:	10a4      	asrs	r4, r4, #2
 8007810:	2600      	movs	r6, #0
 8007812:	42a6      	cmp	r6, r4
 8007814:	d105      	bne.n	8007822 <__libc_init_array+0x2e>
 8007816:	bd70      	pop	{r4, r5, r6, pc}
 8007818:	f855 3b04 	ldr.w	r3, [r5], #4
 800781c:	4798      	blx	r3
 800781e:	3601      	adds	r6, #1
 8007820:	e7ee      	b.n	8007800 <__libc_init_array+0xc>
 8007822:	f855 3b04 	ldr.w	r3, [r5], #4
 8007826:	4798      	blx	r3
 8007828:	3601      	adds	r6, #1
 800782a:	e7f2      	b.n	8007812 <__libc_init_array+0x1e>
 800782c:	08007a18 	.word	0x08007a18
 8007830:	08007a18 	.word	0x08007a18
 8007834:	08007a18 	.word	0x08007a18
 8007838:	08007a1c 	.word	0x08007a1c

0800783c <__retarget_lock_acquire_recursive>:
 800783c:	4770      	bx	lr

0800783e <__retarget_lock_release_recursive>:
 800783e:	4770      	bx	lr

08007840 <memcpy>:
 8007840:	440a      	add	r2, r1
 8007842:	4291      	cmp	r1, r2
 8007844:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007848:	d100      	bne.n	800784c <memcpy+0xc>
 800784a:	4770      	bx	lr
 800784c:	b510      	push	{r4, lr}
 800784e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007852:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007856:	4291      	cmp	r1, r2
 8007858:	d1f9      	bne.n	800784e <memcpy+0xe>
 800785a:	bd10      	pop	{r4, pc}

0800785c <_free_r>:
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	4605      	mov	r5, r0
 8007860:	2900      	cmp	r1, #0
 8007862:	d041      	beq.n	80078e8 <_free_r+0x8c>
 8007864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007868:	1f0c      	subs	r4, r1, #4
 800786a:	2b00      	cmp	r3, #0
 800786c:	bfb8      	it	lt
 800786e:	18e4      	addlt	r4, r4, r3
 8007870:	f000 f83e 	bl	80078f0 <__malloc_lock>
 8007874:	4a1d      	ldr	r2, [pc, #116]	@ (80078ec <_free_r+0x90>)
 8007876:	6813      	ldr	r3, [r2, #0]
 8007878:	b933      	cbnz	r3, 8007888 <_free_r+0x2c>
 800787a:	6063      	str	r3, [r4, #4]
 800787c:	6014      	str	r4, [r2, #0]
 800787e:	4628      	mov	r0, r5
 8007880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007884:	f000 b83a 	b.w	80078fc <__malloc_unlock>
 8007888:	42a3      	cmp	r3, r4
 800788a:	d908      	bls.n	800789e <_free_r+0x42>
 800788c:	6820      	ldr	r0, [r4, #0]
 800788e:	1821      	adds	r1, r4, r0
 8007890:	428b      	cmp	r3, r1
 8007892:	bf01      	itttt	eq
 8007894:	6819      	ldreq	r1, [r3, #0]
 8007896:	685b      	ldreq	r3, [r3, #4]
 8007898:	1809      	addeq	r1, r1, r0
 800789a:	6021      	streq	r1, [r4, #0]
 800789c:	e7ed      	b.n	800787a <_free_r+0x1e>
 800789e:	461a      	mov	r2, r3
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	b10b      	cbz	r3, 80078a8 <_free_r+0x4c>
 80078a4:	42a3      	cmp	r3, r4
 80078a6:	d9fa      	bls.n	800789e <_free_r+0x42>
 80078a8:	6811      	ldr	r1, [r2, #0]
 80078aa:	1850      	adds	r0, r2, r1
 80078ac:	42a0      	cmp	r0, r4
 80078ae:	d10b      	bne.n	80078c8 <_free_r+0x6c>
 80078b0:	6820      	ldr	r0, [r4, #0]
 80078b2:	4401      	add	r1, r0
 80078b4:	1850      	adds	r0, r2, r1
 80078b6:	4283      	cmp	r3, r0
 80078b8:	6011      	str	r1, [r2, #0]
 80078ba:	d1e0      	bne.n	800787e <_free_r+0x22>
 80078bc:	6818      	ldr	r0, [r3, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	6053      	str	r3, [r2, #4]
 80078c2:	4408      	add	r0, r1
 80078c4:	6010      	str	r0, [r2, #0]
 80078c6:	e7da      	b.n	800787e <_free_r+0x22>
 80078c8:	d902      	bls.n	80078d0 <_free_r+0x74>
 80078ca:	230c      	movs	r3, #12
 80078cc:	602b      	str	r3, [r5, #0]
 80078ce:	e7d6      	b.n	800787e <_free_r+0x22>
 80078d0:	6820      	ldr	r0, [r4, #0]
 80078d2:	1821      	adds	r1, r4, r0
 80078d4:	428b      	cmp	r3, r1
 80078d6:	bf04      	itt	eq
 80078d8:	6819      	ldreq	r1, [r3, #0]
 80078da:	685b      	ldreq	r3, [r3, #4]
 80078dc:	6063      	str	r3, [r4, #4]
 80078de:	bf04      	itt	eq
 80078e0:	1809      	addeq	r1, r1, r0
 80078e2:	6021      	streq	r1, [r4, #0]
 80078e4:	6054      	str	r4, [r2, #4]
 80078e6:	e7ca      	b.n	800787e <_free_r+0x22>
 80078e8:	bd38      	pop	{r3, r4, r5, pc}
 80078ea:	bf00      	nop
 80078ec:	20001cd4 	.word	0x20001cd4

080078f0 <__malloc_lock>:
 80078f0:	4801      	ldr	r0, [pc, #4]	@ (80078f8 <__malloc_lock+0x8>)
 80078f2:	f7ff bfa3 	b.w	800783c <__retarget_lock_acquire_recursive>
 80078f6:	bf00      	nop
 80078f8:	20001cd0 	.word	0x20001cd0

080078fc <__malloc_unlock>:
 80078fc:	4801      	ldr	r0, [pc, #4]	@ (8007904 <__malloc_unlock+0x8>)
 80078fe:	f7ff bf9e 	b.w	800783e <__retarget_lock_release_recursive>
 8007902:	bf00      	nop
 8007904:	20001cd0 	.word	0x20001cd0

08007908 <_init>:
 8007908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790a:	bf00      	nop
 800790c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800790e:	bc08      	pop	{r3}
 8007910:	469e      	mov	lr, r3
 8007912:	4770      	bx	lr

08007914 <_fini>:
 8007914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007916:	bf00      	nop
 8007918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800791a:	bc08      	pop	{r3}
 800791c:	469e      	mov	lr, r3
 800791e:	4770      	bx	lr
